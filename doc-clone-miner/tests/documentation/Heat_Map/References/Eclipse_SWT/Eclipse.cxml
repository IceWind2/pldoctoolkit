<?xml version="1.0" encoding="utf-8" ?>
<plainxml><![CDATA[

====== ArmEvent.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class are sent as a result of
a widget such as a menu item being armed.

@see ArmListener
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
------------
Constructs a new instance of this class based on the
information in the given untyped event.

@param e the untyped event containing the information

====== ArmListener.java ======
Copyright (c) 2000, 2016 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
Lars Vogel <Lars.Vogel@vogella.com> - Bug 502576
------------
Classes which implement this interface provide a method
that deals with the event that is generated when a widget,
such as a menu item, is armed.
<p>
After creating an instance of a class that implements
this interface it can be added to a widget using the
<code>addArmListener</code> method and removed using
the <code>removeArmListener</code> method. When the
widget is armed, the widgetArmed method will be invoked.
</p>

@see ArmEvent
------------
Sent when a widget is armed, or 'about to be selected'.

@param e an event containing information about the arm

====== BidiUtil.java ======
Copyright (c) 2000, 2016 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Adds a language listener. The listener will get notified when the language of
the keyboard changes (via Alt-Shift on Win platforms).  Do this by creating a
window proc for the Control so that the window messages for the Control can be
monitored.
<p>

@param hwnd the handle of the Control that is listening for keyboard language
changes
@param runnable the code that should be executed when a keyboard language change
occurs
------------
Proc used for OS.EnumSystemLanguageGroups call during isBidiPlatform test.
------------
Wraps the ExtTextOut function.
<p>

@param gc the gc to use for rendering
@param renderBuffer the glyphs to render as an array of characters
@param renderDx the width of each glyph in renderBuffer
@param x x position to start rendering
@param y y position to start rendering
------------
Return ordering and rendering information for the given text.  Wraps the GetFontLanguageInfo
and GetCharacterPlacement functions.
<p>

@param gc the GC to use for measuring of this line, input parameter
@param text text that bidi data should be calculated for, input parameter
@param order an array of integers representing the visual position of each character in
the text array, output parameter
@param classBuffer an array of integers representing the type (e.g., ARABIC, HEBREW,
LOCALNUMBER) of each character in the text array, input/output parameter
@param dx an array of integers representing the pixel width of each glyph in the returned
glyph buffer, output parameter
@param flags an integer representing rendering flag information, input parameter
@param offsets text segments that should be measured and reordered separately, input
parameter. See org.eclipse.swt.custom.BidiSegmentEvent for details.
@return buffer with the glyphs that should be rendered for the given text
------------
Return bidi ordering information for the given text.  Does not return rendering
information (e.g., glyphs, glyph distances).  Use this method when you only need
ordering information.  Doing so will improve performance.  Wraps the
GetFontLanguageInfo and GetCharacterPlacement functions.
<p>

@param gc the GC to use for measuring of this line, input parameter
@param text text that bidi data should be calculated for, input parameter
@param order an array of integers representing the visual position of each character in
the text array, output parameter
@param classBuffer an array of integers representing the type (e.g., ARABIC, HEBREW,
LOCALNUMBER) of each character in the text array, input/output parameter
@param flags an integer representing rendering flag information, input parameter
@param offsets text segments that should be measured and reordered separately, input
parameter. See org.eclipse.swt.custom.BidiSegmentEvent for details.
------------
Return bidi attribute information for the font in the specified gc.
<p>

@param gc the gc to query
@return bitwise OR of the REORDER, LIGATE and GLYPHSHAPE flags
defined by this class.
------------
Return the active keyboard language type.
<p>

@return an integer representing the active keyboard language (KEYBOARD_BIDI,
KEYBOARD_NON_BIDI)
------------
Return the languages that are installed for the keyboard.
<p>

@return integer array with an entry for each installed language
------------
Return whether or not the platform supports a bidi language.  Determine this
by looking at the languages that are installed.
<p>

@return true if bidi is supported, false otherwise. Always
false on Windows CE.
------------
Return whether or not the keyboard supports input of a bidi language.  Determine this
by looking at the languages that are installed for the keyboard.
<p>

@return true if bidi is supported, false otherwise.
------------
Removes the specified language listener.
<p>

@param hwnd the handle of the Control that is listening for keyboard language changes
------------
Determine the base direction for the given text. The direction is derived
from that of the first strong bidirectional character. In case the text
doesn't contain any strong characters, the base direction is to be
derived from a higher-level protocol (e.g. the widget orientation).
<p>

@param text
Text base direction should be resolved for.
@return SWT#LEFT_RIGHT or SWT#RIGHT_TO_LEFT if the text contains strong
characters and thus the direction can be resolved, SWT#NONE
otherwise.
@since 3.105
------------
Switch the keyboard language to the specified language type.  We do
not distinguish between multiple bidi or multiple non-bidi languages, so
set the keyboard to the first language of the given type.
<p>

@param language integer representing language. One of
KEYBOARD_BIDI, KEYBOARD_NON_BIDI.
------------
Sets the orientation (writing order) of the specified control. Text will
be right aligned for right to left writing order.
<p>

@param hwnd the handle of the Control to change the orientation of
@param orientation one of SWT.RIGHT_TO_LEFT or SWT.LEFT_TO_RIGHT
@return true if the orientation was changed, false if the orientation
could not be changed
------------
Override the window proc.

@param hwnd control to override the window proc of
------------
Reverse the character array.  Used for right orientation.

@param charArray character array to reverse
------------
Reverse the integer array.  Used for right orientation.

@param intArray integer array to reverse
------------
Adjust the order array so that it is relative to the start of the line.  Also reverse the order array if the orientation
is to the right.

@param orderArray  integer array of order values to translate
@param glyphCount  number of glyphs that have been processed for the current line
@param isRightOriented  flag indicating whether or not current orientation is to the right
/
static void translateOrder(int[] orderArray, int glyphCount, boolean isRightOriented) {
int maxOrder = 0;
int length = orderArray.length;
if (isRightOriented) {
for (int i=0; i<length; i++) {
maxOrder = Math.max(maxOrder, orderArray[i]);
}
}
for (int i=0; i<length; i++) {
if (isRightOriented) orderArray[i] = maxOrder - orderArray[i];
orderArray [i] += glyphCount;
}
}

Remove the overridden the window proc.

@param hwnd control to remove the window proc override for
------------
Window proc to intercept keyboard language switch event (WS_INPUTLANGCHANGE)
and widget orientation changes.
Run the Control's registered runnable when the keyboard language is switched.

@param hwnd handle of the control that is listening for the keyboard language
change event
@param msg window message

====== Button.java ======
Copyright (c) 2000, 2016 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
Conrad Groth - Bug 23837 [FEEP] Button, do not respect foreground and background color on Windows
------------
Instances of this class represent a selectable user interface object that
issues notification when pressed and released.
<dl>
<dt><b>Styles:</b></dt>
<dd>ARROW, CHECK, PUSH, RADIO, TOGGLE, FLAT, WRAP</dd>
<dd>UP, DOWN, LEFT, RIGHT, CENTER</dd>
<dt><b>Events:</b></dt>
<dd>Selection</dd>
</dl>
<p>
Note: Only one of the styles ARROW, CHECK, PUSH, RADIO, and TOGGLE
may be specified.
</p><p>
Note: Only one of the styles LEFT, RIGHT, and CENTER may be specified.
</p><p>
Note: Only one of the styles UP, DOWN, LEFT, and RIGHT may be specified
when the ARROW style is specified.
</p><p>
IMPORTANT: This class is <em>not</em> intended to be subclassed.
</p>

@see <a href="http://www.eclipse.org/swt/snippets/#button">Button snippets</a>
@see <a href="http://www.eclipse.org/swt/examples.php">SWT Example: ControlExample</a>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
@noextend This class is not intended to be subclassed by clients.
------------
Constructs a new instance of this class given its parent
and a style value describing its behavior and appearance.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.
</p>

@param parent a composite control which will be the parent of the new instance (cannot be null)
@param style the style of control to construct

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see SWT#ARROW
@see SWT#CHECK
@see SWT#PUSH
@see SWT#RADIO
@see SWT#TOGGLE
@see SWT#FLAT
@see SWT#UP
@see SWT#DOWN
@see SWT#LEFT
@see SWT#RIGHT
@see SWT#CENTER
@see Widget#checkSubclass
@see Widget#getStyle
------------
Adds the listener to the collection of listeners who will
be notified when the control is selected by the user, by sending
it one of the messages defined in the <code>SelectionListener</code>
interface.
<p>
<code>widgetSelected</code> is called when the control is selected by the user.
<code>widgetDefaultSelected</code> is not called.
</p>
<p>
When the <code>SWT.RADIO</code> style bit is set, the <code>widgetSelected</code> method is
also called when the receiver loses selection because another item in the same radio group
was selected by the user. During <code>widgetSelected</code> the application can use
<code>getSelection()</code> to determine the current selected state of the receiver.
</p>

@param listener the listener which should be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see SelectionListener
@see #removeSelectionListener
@see SelectionEvent
------------
Returns a value which describes the position of the
text or image in the receiver. The value will be one of
<code>LEFT</code>, <code>RIGHT</code> or <code>CENTER</code>
unless the receiver is an <code>ARROW</code> button, in
which case, the alignment will indicate the direction of
the arrow (one of <code>LEFT</code>, <code>RIGHT</code>,
<code>UP</code> or <code>DOWN</code>).

@return the alignment

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns <code>true</code> if the receiver is grayed,
and false otherwise. When the widget does not have
the <code>CHECK</code> style, return false.

@return the grayed state of the checkbox

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.4
------------
Returns the receiver's image if it has one, or null
if it does not.

@return the receiver's image

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the widget message. When the widget is created
with the style <code>SWT.COMMAND</code>, the message text
is displayed to provide further information for the user.

@return the widget message

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.3
------------
Returns <code>true</code> if the receiver is selected,
and false otherwise.
<p>
When the receiver is of type <code>CHECK</code> or <code>RADIO</code>,
it is selected when it is checked. When it is of type <code>TOGGLE</code>,
it is selected when it is pushed in. If the receiver is of any other type,
this method returns false.

@return the selection state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the receiver's text, which will be an empty
string if it has never been set or if the receiver is
an <code>ARROW</code> button.

@return the receiver's text

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Removes the listener from the collection of listeners who will
be notified when the control is selected by the user.

@param listener the listener which should no longer be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see SelectionListener
@see #addSelectionListener
------------
Controls how text, images and arrows will be displayed
in the receiver. The argument should be one of
<code>LEFT</code>, <code>RIGHT</code> or <code>CENTER</code>
unless the receiver is an <code>ARROW</code> button, in
which case, the argument indicates the direction of
the arrow (one of <code>LEFT</code>, <code>RIGHT</code>,
<code>UP</code> or <code>DOWN</code>).

@param alignment the new alignment

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the button's background color to the color specified
by the argument, or to the default system color for the control
if the argument is null.
<p>
Note: This is custom paint operation and only affects {@link SWT#PUSH} and {@link SWT#TOGGLE} buttons. If the native button
has a 3D look an feel (e.g. Windows 7), this method will cause the button to look FLAT irrespective of the state of the
{@link SWT#FLAT} style.
For {@link SWT#CHECK} and {@link SWT#RADIO} buttons, this method delegates to {@link Control#setBackground(Color)}.
</p>
@param color the new color (or null)

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the argument has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the receiver's image to the argument, which may be
<code>null</code> indicating that no image should be displayed.
<p>
Note that a Button can display an image and text simultaneously
on Windows (starting with XP), GTK+ and OSX.  On other platforms,
a Button that has an image and text set into it will display the
image or text that was set most recently.
</p>
@param image the image to display on the receiver (may be <code>null</code>)

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the image has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the grayed state of the receiver.  This state change
only applies if the control was created with the SWT.CHECK
style.

@param grayed the new grayed state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.4
------------
Sets the widget message. When the widget is created
with the style <code>SWT.COMMAND</code>, the message text
is displayed to provide further information for the user.

@param message the new message

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the string is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.3
------------
Sets the selection state of the receiver, if it is of type <code>CHECK</code>,
<code>RADIO</code>, or <code>TOGGLE</code>.

<p>
When the receiver is of type <code>CHECK</code> or <code>RADIO</code>,
it is selected when it is checked. When it is of type <code>TOGGLE</code>,
it is selected when it is pushed in.

@param selected the new selection state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the receiver's text.
<p>
This method sets the button label.  The label may include
the mnemonic character but must not contain line delimiters.
</p>
<p>
Mnemonics are indicated by an '&amp;' that causes the next
character to be the mnemonic.  When the user presses a
key sequence that matches the mnemonic, a selection
event occurs. On most platforms, the mnemonic appears
underlined but may be emphasized in a platform specific
manner.  The mnemonic indicator character '&amp;' can be
escaped by doubling it in the string, causing a single
'&amp;' to be displayed.
</p><p>
Note that a Button can display an image and text simultaneously
on Windows (starting with XP), GTK+ and OSX.  On other platforms,
a Button that has an image and text set into it will display the
image or text that was set most recently.
</p><p>
Also note, if control characters like '\n', '\t' etc. are used
in the string, then the behavior is platform dependent.
</p>
@param string the new text

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the text is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

====== Callback.java ======
Copyright (c) 2000, 2012 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class represent entry points into Java
which can be invoked from operating system level callback
routines.
<p>
IMPORTANT: A callback is only valid when invoked on the
thread which created it. The results are undefined (and
typically bad) when a callback is passed out to the
operating system (or other code) in such a way that the
callback is called from a different thread.
------------
Constructs a new instance of this class given an object
to send the message to, a string naming the method to
invoke and an argument count. Note that, if the object
is an instance of <code>Class</code> it is assumed that
the method is a static method on that class.

<p>Note, do not use this if the method arguments have a double, as arguments will be
shifted/corrupted. See Bug 510538. Instead use the following constructor: <br>
<code> Callback (Object, String, Type, Type [])</code></p>

@param object the object to send the message to
@param method the name of the method to invoke
@param argCount the number of arguments that the method takes
------------
Constructs a new instance of this class given an object
to send the message to, a string naming the method to
invoke, an argument count and a flag indicating whether
or not the arguments will be passed in an array. Note
that, if the object is an instance of <code>Class</code>
it is assumed that the method is a static method on that
class.

<p>Note, do not use this if the method arguments have a double, as arguments will be
shifted/corrupted. See Bug 510538. Instead use the following constructor: <br>
<code> Callback (Object, String, Type, Type [])</code></p>

@param object the object to send the message to
@param method the name of the method to invoke
@param argCount the number of arguments that the method takes
@param isArrayBased <code>true</code> if the arguments should be passed in an array and false otherwise
------------
Constructs a new instance of this class given an object
to send the message to, a string naming the method to
invoke, an argument count, a flag indicating whether
or not the arguments will be passed in an array and a value
to return when an exception happens. Note that, if
the object is an instance of <code>Class</code>
it is assumed that the method is a static method on that
class.

<p>Note, do not use this if the method arguments have a double, as arguments will be
shifted/corrupted. See Bug 510538. Instead use the following constructor: <br>
<code> Callback (Object, String, Type, Type [])</code></p>

@param object the object to send the message to
@param method the name of the method to invoke
@param argCount the number of arguments that the method takes
@param isArrayBased <code>true</code> if the arguments should be passed in an array and false otherwise
@param errorResult the return value if the java code throws an exception
------------
<p>Register the java method to be a C callback.
I.e, C will be able to make a call to this java method directly (through callback.c)</p>

<p>The other constructors hard-code int/long into the method signature:<br>
<code> long method (long ...) </code><br>
Which is suitable for int/long and pointers.<br>
This constructor is used if you need to use a different return/argument type, e.g double. See Bug 510538 </p>

<p> Note:
<ul>
<li> Array support is not implemented/supported by this constructor. Use other constructors.</li>
<li> If the object is an instance of <code>Class</code> it is assumed that
the method is a static method on that class. </li>
<li> Note, long types are converted to ints on 32 bit system automatically to account for smaller pointers.
This means if you use 'long', you need to cast int next to it. like: <code> long &#47;*int*&#47;</code> </li>
</ul></p>

<p>The following types are supported: <br>
<ul>
<li>void (for return values only) </li>
<li>int</li>
<li>long</li>
<li>byte</li>
<li>char</li>
<li>double</li>
<li>float</li>
<li>short</li>
<li>boolean</li>
</ul>

<p> For example if you want to link the following method: <br>
<code> void myMethod(long &#47;*int*&#47; arg1, double arg2) </code> <br>
Then you would call this callback like:<br>
<code> Callback (this, "myMethod", void.class, new Type []{long.class, double.class}); </code>
</p>

@param object the object to send the message to
@param method method the name of the method to invoke
@param returnType specify the type like  <code>void.class, long.class, double.class </code>
@param arguments specify the list of arguments like <code> new Type [] {long.class, double.class } </code>
------------
Allocates the native level resources associated with the
callback. This method is only invoked from within the
constructor for the argument.

@param callback the callback to bind
@param object the callback's object
@param method the callback's method
@param signature the callback's method signature
@param argCount the callback's method argument count
@param isStatic whether the callback's method is static
@param isArrayBased whether the callback's method is array based
@param errorResult the callback's error result
------------
Releases the native level resources associated with the callback,
and removes all references between the callback and
other objects. This helps to prevent (bad) application code
from accidentally holding onto extraneous garbage.
------------
Returns the address of a block of machine code which will
invoke the callback represented by the receiver.

@return the callback address
------------
Returns the SWT platform name.

@return the platform name of the currently running SWT
------------
Returns the number of times the system has been recursively entered
through a callback.
<p>
Note: This should not be called by application code.
</p>

@return the entry count

@since 2.1
------------
Indicates whether or not callbacks which are triggered at the
native level should cause the messages described by the matching
<code>Callback</code> objects to be invoked. This method is used
to safely shut down SWT when it is run within environments
which can generate spurious events.
<p>
Note: This should not be called by application code.
</p>

@param enable true if callbacks should be invoked
------------
Returns whether or not callbacks which are triggered at the
native level should cause the messages described by the matching
<code>Callback</code> objects to be invoked. This method is used
to safely shut down SWT when it is run within environments
which can generate spurious events.
<p>
Note: This should not be called by application code.
</p>

@return true if callbacks should not be invoked
------------
This might be called directly from native code in environments
which can generate spurious events. Check before removing it.

@deprecated

@param ignore true if callbacks should not be invoked
------------
Immediately wipes out all native level state associated
with <em>all</em> callbacks.
<p>
<b>WARNING:</b> This operation is <em>extremely</em> dangerous,
and should never be performed by application code.
</p>
------------
Releases the native level resources associated with the callback.

@see #dispose

====== Canvas.java ======
Copyright (c) 2000, 2013 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class provide a surface for drawing
arbitrary graphics.
<dl>
<dt><b>Styles:</b></dt>
<dd>(none)</dd>
<dt><b>Events:</b></dt>
<dd>(none)</dd>
</dl>
<p>
This class may be subclassed by custom control implementors
who are building controls that are <em>not</em> constructed
from aggregates of other controls. That is, they are either
painted using SWT graphics calls or are handled by native
methods.
</p>

@see Composite
@see <a href="http://www.eclipse.org/swt/snippets/#canvas">Canvas snippets</a>
@see <a href="http://www.eclipse.org/swt/examples.php">SWT Example: ControlExample</a>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
------------
Prevents uninitialized instances from being created outside the package.
------------
Constructs a new instance of this class given its parent
and a style value describing its behavior and appearance.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.
</p>

@param parent a composite control which will be the parent of the new instance (cannot be null)
@param style the style of control to construct

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
</ul>

@see SWT
@see Widget#getStyle
------------
Fills the interior of the rectangle specified by the arguments,
with the receiver's background.

@param gc the gc where the rectangle is to be filled
@param x the x coordinate of the rectangle to be filled
@param y the y coordinate of the rectangle to be filled
@param width the width of the rectangle to be filled
@param height the height of the rectangle to be filled

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the gc is null</li>
<li>ERROR_INVALID_ARGUMENT - if the gc has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.2
------------
Returns the caret.
<p>
The caret for the control is automatically hidden
and shown when the control is painted or resized,
when focus is gained or lost and when an the control
is scrolled.  To avoid drawing on top of the caret,
the programmer must hide and show the caret when
drawing in the window any other time.
</p>

@return the caret for the receiver, may be null

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the IME.

@return the IME

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.4
------------
Scrolls a rectangular area of the receiver by first copying
the source area to the destination and then causing the area
of the source which is not covered by the destination to
be repainted. Children that intersect the rectangle are
optionally moved during the operation. In addition, all outstanding
paint events are flushed before the source area is copied to
ensure that the contents of the canvas are drawn correctly.

@param destX the x coordinate of the destination
@param destY the y coordinate of the destination
@param x the x coordinate of the source
@param y the y coordinate of the source
@param width the width of the area
@param height the height of the area
@param all <code>true</code>if children should be scrolled, and <code>false</code> otherwise

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the receiver's caret.
<p>
The caret for the control is automatically hidden
and shown when the control is painted or resized,
when focus is gained or lost and when an the control
is scrolled.  To avoid drawing on top of the caret,
the programmer must hide and show the caret when
drawing in the window any other time.
</p>
@param caret the new caret for the receiver, may be null

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the caret has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the receiver's IME.

@param ime the new IME for the receiver, may be null

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the IME has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.4

====== Caret.java ======
Copyright (c) 2000, 2012 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class provide an i-beam that is typically used
as the insertion point for text.
<dl>
<dt><b>Styles:</b></dt>
<dd>(none)</dd>
<dt><b>Events:</b></dt>
<dd>(none)</dd>
</dl>
<p>
IMPORTANT: This class is <em>not</em> intended to be subclassed.
</p>

@see <a href="http://www.eclipse.org/swt/snippets/#caret">Caret snippets</a>
@see <a href="http://www.eclipse.org/swt/examples.php">SWT Example: ControlExample, Canvas tab</a>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
@noextend This class is not intended to be subclassed by clients.
------------
Constructs a new instance of this class given its parent
and a style value describing its behavior and appearance.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.
</p>

@param parent a composite control which will be the parent of the new instance (cannot be null)
@param style the style of control to construct

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see SWT
@see Widget#checkSubclass
@see Widget#getStyle
------------
Returns a rectangle describing the receiver's size and location
relative to its parent (or its display if its parent is null).

@return the receiver's bounding rectangle

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the font that the receiver will use to paint textual information.

@return the receiver's font

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the image that the receiver will use to paint the caret.

@return the receiver's image

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns a point describing the receiver's location relative
to its parent (or its display if its parent is null).

@return the receiver's location

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the receiver's parent, which must be a <code>Canvas</code>.

@return the receiver's parent

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns a point describing the receiver's size.

@return the receiver's size

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns <code>true</code> if the receiver is visible, and
<code>false</code> otherwise.
<p>
If one of the receiver's ancestors is not visible or some
other condition makes the receiver not visible, this method
may still indicate that it is considered visible even though
it may not actually be showing.
</p>

@return the receiver's visibility state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns <code>true</code> if the receiver is visible and all
of the receiver's ancestors are visible and <code>false</code>
otherwise.

@return the receiver's visibility state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #getVisible
------------
Sets the receiver's size and location to the rectangular
area specified by the arguments. The <code>x</code> and
<code>y</code> arguments are relative to the receiver's
parent (or its display if its parent is null).

@param x the new x coordinate for the receiver
@param y the new y coordinate for the receiver
@param width the new width for the receiver
@param height the new height for the receiver

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the receiver's size and location to the rectangular
area specified by the argument. The <code>x</code> and
<code>y</code> fields of the rectangle are relative to
the receiver's parent (or its display if its parent is null).

@param rect the new bounds for the receiver

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the font that the receiver will use to paint textual information
to the font specified by the argument, or to the default font for that
kind of control if the argument is null.

@param font the new font (or null)

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the font has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the image that the receiver will use to paint the caret
to the image specified by the argument, or to the default
which is a filled rectangle if the argument is null

@param image the new image (or null)

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the image has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the receiver's location to the point specified by
the arguments which are relative to the receiver's
parent (or its display if its parent is null).

@param x the new x coordinate for the receiver
@param y the new y coordinate for the receiver

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the receiver's location to the point specified by
the argument which is relative to the receiver's
parent (or its display if its parent is null).

@param location the new location for the receiver

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the receiver's size to the point specified by the arguments.

@param width the new width for the receiver
@param height the new height for the receiver

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the receiver's size to the point specified by the argument.

@param size the new extent for the receiver

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the point is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Marks the receiver as visible if the argument is <code>true</code>,
and marks it invisible otherwise.
<p>
If one of the receiver's ancestors is not visible or some
other condition makes the receiver not visible, marking
it visible may not actually cause it to be displayed.
</p>

@param visible the new visibility state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

====== Color.java ======
Copyright (c) 2000, 2015 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class manage the operating system resources that
implement SWT's RGB color model. To create a color you can either
specify the individual color components as integers in the range
0 to 255 or provide an instance of an <code>RGB</code> or <code>RGBA</code>.
<p>
Application code must explicitly invoke the <code>Color.dispose()</code>
method to release the operating system resources managed by each instance
when those instances are no longer required.
</p>

@see RGB
@see RGBA
@see Device#getSystemColor
@see <a href="http://www.eclipse.org/swt/snippets/#color">Color and RGB snippets</a>
@see <a href="http://www.eclipse.org/swt/examples.php">SWT Example: PaintExample</a>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
------------
the handle to the OS color resource
(Warning: This field is platform dependent)
<p>
<b>IMPORTANT:</b> This field is <em>not</em> part of the SWT
public API. It is marked public only so that it can be shared
within the packages provided by SWT. It is not available on all
platforms and should never be accessed from application code.
</p>
*
@noreference This field is not intended to be referenced by clients.

public int handle;
int alpha = 255;


Prevents uninitialized instances from being created outside the package.
------------
Constructs a new instance of this class given a device and the
desired red, green and blue values expressed as ints in the range
0 to 255 (where 0 is black and 255 is full brightness). On limited
color devices, the color instance created by this call may not have
the same RGB values as the ones specified by the arguments. The
RGB values on the returned instance will be the color values of
the operating system color.
<p>
You must dispose the color when it is no longer required.
</p>

@param device the device on which to allocate the color
@param red the amount of red in the color
@param green the amount of green in the color
@param blue the amount of blue in the color

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if device is null and there is no current device</li>
<li>ERROR_INVALID_ARGUMENT - if the red, green or blue argument is not between 0 and 255</li>
</ul>

@see #dispose
------------
Constructs a new instance of this class given a device and the
desired red, green, blue & alpha values expressed as ints in the range
0 to 255 (where 0 is black and 255 is full brightness). On limited
color devices, the color instance created by this call may not have
the same RGB values as the ones specified by the arguments. The
RGB values on the returned instance will be the color values of
the operating system color.
<p>
You must dispose the color when it is no longer required.
</p>

@param device the device on which to allocate the color
@param red the amount of red in the color
@param green the amount of green in the color
@param blue the amount of blue in the color
@param alpha the amount of alpha in the color. Currently, SWT only honors extreme values for alpha i.e. 0 (transparent) or 255 (opaque).

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if device is null and there is no current device</li>
<li>ERROR_INVALID_ARGUMENT - if the red, green, blue or alpha argument is not between 0 and 255</li>
</ul>

@see #dispose
@since 3.104
------------
Constructs a new instance of this class given a device and an
<code>RGB</code> describing the desired red, green and blue values.
On limited color devices, the color instance created by this call
may not have the same RGB values as the ones specified by the
argument. The RGB values on the returned instance will be the color
values of the operating system color.
<p>
You must dispose the color when it is no longer required.
</p>

@param device the device on which to allocate the color
@param rgb the RGB values of the desired color

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if device is null and there is no current device</li>
<li>ERROR_NULL_ARGUMENT - if the rgb argument is null</li>
<li>ERROR_INVALID_ARGUMENT - if the red, green or blue components of the argument are not between 0 and 255</li>
</ul>

@see #dispose
------------
Constructs a new instance of this class given a device and an
<code>RGBA</code> describing the desired red, green, blue & alpha values.
On limited color devices, the color instance created by this call
may not have the same RGBA values as the ones specified by the
argument. The RGBA values on the returned instance will be the color
values of the operating system color + alpha.
<p>
You must dispose the color when it is no longer required.
</p>

@param device the device on which to allocate the color
@param rgba the RGBA values of the desired color. Currently, SWT only honors extreme values for alpha i.e. 0 (transparent) or 255 (opaque).

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if device is null and there is no current device</li>
<li>ERROR_NULL_ARGUMENT - if the rgba argument is null</li>
<li>ERROR_INVALID_ARGUMENT - if the red, green, blue or alpha components of the argument are not between 0 and 255</li>
</ul>

@see #dispose
@since 3.104
------------
Constructs a new instance of this class given a device, an
<code>RGB</code> describing the desired red, green and blue values,
alpha specifying the level of transparency.
On limited color devices, the color instance created by this call
may not have the same RGB values as the ones specified by the
argument. The RGB values on the returned instance will be the color
values of the operating system color.
<p>
You must dispose the color when it is no longer required.
</p>

@param device the device on which to allocate the color
@param rgb the RGB values of the desired color
@param alpha the alpha value of the desired color. Currently, SWT only honors extreme values for alpha i.e. 0 (transparent) or 255 (opaque).

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if device is null and there is no current device</li>
<li>ERROR_NULL_ARGUMENT - if the rgb argument is null</li>
<li>ERROR_INVALID_ARGUMENT - if the red, green, blue or alpha components of the argument are not between 0 and 255</li>
</ul>

@see #dispose
@since 3.104
------------
Compares the argument to the receiver, and returns true
if they represent the <em>same</em> object using a class
specific comparison.

@param object the object to compare with this object
@return <code>true</code> if the object is the same as this object and <code>false</code> otherwise

@see #hashCode
------------
Returns the amount of alpha in the color, from 0 (transparent) to 255 (opaque).

@return the alpha component of the color

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
@since 3.104
------------
Returns the amount of blue in the color, from 0 to 255.

@return the blue component of the color

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Returns the amount of green in the color, from 0 to 255.

@return the green component of the color

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Returns the amount of red in the color, from 0 to 255.

@return the red component of the color

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Returns an <code>RGB</code> representing the receiver.

@return the RGB for the color

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Returns an <code>RGBA</code> representing the receiver.

@return the RGBA for the color

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
@since 3.104
------------
Returns an integer hash code for the receiver. Any two
objects that return <code>true</code> when passed to
<code>equals</code> must return the same value for this
method.

@return the receiver's hash

@see #equals
------------
Allocates the operating system resources associated
with the receiver.

@param device the device on which to allocate the color
@param red the amount of red in the color
@param green the amount of green in the color
@param blue the amount of blue in the color
@param alpha the amount of alpha in the color. Currently, SWT only honors extreme values for alpha i.e. 0 (transparent) or 255 (opaque).

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the red, green, blue or alpha argument is not between 0 and 255</li>
</ul>

@see #dispose
------------
Returns <code>true</code> if the color has been disposed,
and <code>false</code> otherwise.
<p>
This method gets the dispose state for the color.
When a color has been disposed, it is an error to
invoke any other method (except {@link #dispose()}) using the color.

@return <code>true</code> when the color is disposed and <code>false</code> otherwise
------------
Returns a string containing a concise, human-readable
description of the receiver.

@return a string representation of the receiver
------------
Invokes platform specific functionality to allocate a new color.
<p>
<b>IMPORTANT:</b> This method is <em>not</em> part of the public
API for <code>Color</code>. It is marked public only so that it
can be shared within the packages provided by SWT. It is not
available on all platforms, and should never be called from
application code.
</p>

@param device the device on which to allocate the color
@param handle the handle for the color
@return a new color object containing the specified device and handle

@noreference This method is not intended to be referenced by clients.
------------
Invokes platform specific functionality to allocate a new color.
<p>
<b>IMPORTANT:</b> This method is <em>not</em> part of the public
API for <code>Color</code>. It is marked public only so that it
can be shared within the packages provided by SWT. It is not
available on all platforms, and should never be called from
application code.
</p>

@param device the device on which to allocate the color
@param handle the handle for the color
@param alpha the int for the alpha content in the color
@return a new color object containing the specified device and handle

@noreference This method is not intended to be referenced by clients.

====== ColorDialog.java ======
Copyright (c) 2000, 2012 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class allow the user to select a color
from a predefined set of available colors.
<dl>
<dt><b>Styles:</b></dt>
<dd>(none)</dd>
<dt><b>Events:</b></dt>
<dd>(none)</dd>
</dl>
<p>
IMPORTANT: This class is <em>not</em> intended to be subclassed.
</p>

@see <a href="http://www.eclipse.org/swt/examples.php">SWT Example: ControlExample, Dialog tab</a>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
@noextend This class is not intended to be subclassed by clients.
------------
Constructs a new instance of this class given only its parent.

@param parent a composite control which will be the parent of the new instance

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see SWT
@see Widget#checkSubclass
@see Widget#getStyle
------------
Constructs a new instance of this class given its parent
and a style value describing its behavior and appearance.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.
</p>

@param parent a composite control which will be the parent of the new instance (cannot be null)
@param style the style of control to construct

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see SWT
@see Widget#checkSubclass
@see Widget#getStyle
------------
Returns the currently selected color in the receiver.

@return the RGB value for the selected color, may be null

@see PaletteData#getRGBs
------------
Returns an array of <code>RGB</code>s which are the list of
custom colors selected by the user in the receiver, or null
if no custom colors were selected.

@return the array of RGBs, which may be null

@since 3.8
------------
Makes the receiver visible and brings it to the front
of the display.

@return the selected color, or null if the dialog was
cancelled, no color was selected, or an error
occurred

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the receiver's selected color to be the argument.

@param rgb the new RGB value for the selected color, may be
null to let the platform select a default when
open() is called
@see PaletteData#getRGBs
------------
Sets the receiver's list of custom colors to be the given array
of <code>RGB</code>s, which may be null to let the platform select
a default when open() is called.

@param rgbs the array of RGBs, which may be null

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if an RGB in the rgbs array is null</li>
</ul>

@since 3.8

====== Combo.java ======
Copyright (c) 2000, 2016 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
Lars Vogel <Lars.Vogel@vogella.com> - Bug 483540
------------
Instances of this class are controls that allow the user
to choose an item from a list of items, or optionally
enter a new value by typing it into an editable text
field. Often, <code>Combo</code>s are used in the same place
where a single selection <code>List</code> widget could
be used but space is limited. A <code>Combo</code> takes
less space than a <code>List</code> widget and shows
similar information.
<p>
Note: Since <code>Combo</code>s can contain both a list
and an editable text field, it is possible to confuse methods
which access one versus the other (compare for example,
<code>clearSelection()</code> and <code>deselectAll()</code>).
The API documentation is careful to indicate either "the
receiver's list" or the "the receiver's text field" to
distinguish between the two cases.
</p><p>
Note that although this class is a subclass of <code>Composite</code>,
it does not make sense to add children to it, or set a layout on it.
</p>
<dl>
<dt><b>Styles:</b></dt>
<dd>DROP_DOWN, READ_ONLY, SIMPLE</dd>
<dt><b>Events:</b></dt>
<dd>DefaultSelection, Modify, Selection, Verify, OrientationChange</dd>
</dl>
<p>
Note: Only one of the styles DROP_DOWN and SIMPLE may be specified.
</p><p>
IMPORTANT: This class is <em>not</em> intended to be subclassed.
</p>

@see List
@see <a href="http://www.eclipse.org/swt/snippets/#combo">Combo snippets</a>
@see <a href="http://www.eclipse.org/swt/examples.php">SWT Example: ControlExample</a>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
@noextend This class is not intended to be subclassed by clients.
------------
the operating system limit for the number of characters
that the text field in an instance of this class can hold

public static final int LIMIT;

/*
These values can be different on different platforms.
Therefore they are not initialized in the declaration
to stop the compiler from inlining.

static {
LIMIT = OS.IsWinNT ? 0x7FFFFFFF : 0x7FFF;
}

/*
These are the undocumented control id's for the children of
a combo box.  Since there are no constants for these values,
they may change with different versions of Windows (but have
been the same since Windows 3.0).

static final int CBID_LIST = 1000;
static final int CBID_EDIT = 1001;
static /*final*/ long /*int*/ EditProc, ListProc;

static final long /*int*/ ComboProc;
static final TCHAR ComboClass = new TCHAR (0, "COMBOBOX", true);
static {
WNDCLASS lpWndClass = new WNDCLASS ();
OS.GetClassInfo (0, ComboClass, lpWndClass);
ComboProc = lpWndClass.lpfnWndProc;
}


Constructs a new instance of this class given its parent
and a style value describing its behavior and appearance.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.
</p>

@param parent a composite control which will be the parent of the new instance (cannot be null)
@param style the style of control to construct

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see SWT#DROP_DOWN
@see SWT#READ_ONLY
@see SWT#SIMPLE
@see Widget#checkSubclass
@see Widget#getStyle
------------
Adds the argument to the end of the receiver's list.
<p>
Note: If control characters like '\n', '\t' etc. are used
in the string, then the behavior is platform dependent.
</p>
@param string the new item

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the string is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #add(String,int)
------------
Adds the argument to the receiver's list at the given
zero-relative index.
<p>
Note: To add an item at the end of the list, use the
result of calling <code>getItemCount()</code> as the
index or use <code>add(String)</code>.
</p><p>
Also note, if control characters like '\n', '\t' etc. are used
in the string, then the behavior is platform dependent.
</p>

@param string the new item
@param index the index for the item

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the string is null</li>
<li>ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list (inclusive)</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #add(String)
------------
Adds the listener to the collection of listeners who will
be notified when the receiver's text is modified, by sending
it one of the messages defined in the <code>ModifyListener</code>
interface.

@param listener the listener which should be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see ModifyListener
@see #removeModifyListener
------------
Adds a segment listener.
<p>
A <code>SegmentEvent</code> is sent whenever text content is being modified or
a segment listener is added or removed. You can
customize the appearance of text by indicating certain characters to be inserted
at certain text offsets. This may be used for bidi purposes, e.g. when
adjacent segments of right-to-left text should not be reordered relative to
each other.
E.g., multiple Java string literals in a right-to-left language
should generally remain in logical order to each other, that is, the
way they are stored.
</p>
<p>
<b>Warning</b>: This API is currently only implemented on Windows.
<code>SegmentEvent</code>s won't be sent on GTK and Cocoa.
</p>

@param listener the listener which should be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see SegmentEvent
@see SegmentListener
@see #removeSegmentListener

@since 3.103
------------
Adds the listener to the collection of listeners who will
be notified when the user changes the receiver's selection, by sending
it one of the messages defined in the <code>SelectionListener</code>
interface.
<p>
<code>widgetSelected</code> is called when the user changes the combo's list selection.
<code>widgetDefaultSelected</code> is typically called when ENTER is pressed the combo's text area.
</p>

@param listener the listener which should be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see SelectionListener
@see #removeSelectionListener
@see SelectionEvent
------------
Adds the listener to the collection of listeners who will
be notified when the receiver's text is verified, by sending
it one of the messages defined in the <code>VerifyListener</code>
interface.

@param listener the listener which should be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see VerifyListener
@see #removeVerifyListener

@since 3.1
------------
Sets the selection in the receiver's text field to an empty
selection starting just before the first character. If the
text field is editable, this has the effect of placing the
i-beam at the start of the text.
<p>
Note: To clear the selected items in the receiver's list,
use <code>deselectAll()</code>.
</p>

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #deselectAll
------------
Copies the selected text.
<p>
The current selection is copied to the clipboard.
</p>

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 2.1
------------
Cuts the selected text.
<p>
The current selection is first copied to the
clipboard and then deleted from the widget.
</p>

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 2.1
------------
Deselects the item at the given zero-relative index in the receiver's
list.  If the item at the index was already deselected, it remains
deselected. Indices that are out of range are ignored.

@param index the index of the item to deselect

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Deselects all selected items in the receiver's list.
<p>
Note: To clear the selection in the receiver's text field,
use <code>clearSelection()</code>.
</p>

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #clearSelection
------------
Returns a point describing the location of the caret relative
to the receiver.

@return a point, the location of the caret

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.8
------------
Returns the character position of the caret.
<p>
Indexing is zero based.
</p>

@return the position of the caret

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.8
------------
Returns the item at the given, zero-relative index in the
receiver's list. Throws an exception if the index is out
of range.

@param index the index of the item to return
@return the item at the given index

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list minus 1 (inclusive)</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the number of items contained in the receiver's list.

@return the number of items

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the height of the area which would be used to
display <em>one</em> of the items in the receiver's list.

@return the height of one item

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns a (possibly empty) array of <code>String</code>s which are
the items in the receiver's list.
<p>
Note: This is not the actual structure used by the receiver
to maintain its list of items, so modifying the array will
not affect the receiver.
</p>

@return the items in the receiver's list

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns <code>true</code> if the receiver's list is visible,
and <code>false</code> otherwise.
<p>
If one of the receiver's ancestors is not visible or some
other condition makes the receiver not visible, this method
may still indicate that it is considered visible even though
it may not actually be showing.
</p>

@return the receiver's list's visibility state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.4
------------
Marks the receiver's list as visible if the argument is <code>true</code>,
and marks it invisible otherwise.
<p>
If one of the receiver's ancestors is not visible or some
other condition makes the receiver not visible, marking
it visible may not actually cause it to be displayed.
</p>

@param visible the new visibility state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.4
------------
Returns the orientation of the receiver.

@return the orientation style

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 2.1.2
------------
Returns a <code>Point</code> whose x coordinate is the
character position representing the start of the selection
in the receiver's text field, and whose y coordinate is the
character position representing the end of the selection.
An "empty" selection is indicated by the x and y coordinates
having the same value.
<p>
Indexing is zero based.  The range of a selection is from
0..N where N is the number of characters in the widget.
</p>

@return a point representing the selection start and end

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the zero-relative index of the item which is currently
selected in the receiver's list, or -1 if no item is selected.

@return the index of the selected item

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns a string containing a copy of the contents of the
receiver's text field, or an empty string if there are no
contents.

@return the receiver's text

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the height of the receivers's text field.

@return the text height

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the maximum number of characters that the receiver's
text field is capable of holding. If this has not been changed
by <code>setTextLimit()</code>, it will be the constant
<code>Combo.LIMIT</code>.

@return the text limit

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #LIMIT
------------
Gets the number of items that are visible in the drop
down portion of the receiver's list.
<p>
Note: This operation is a hint and is not supported on
platforms that do not have this concept.
</p>

@return the number of items that are visible

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.0
------------
Searches the receiver's list starting at the first item
(index 0) until an item is found that is equal to the
argument, and returns the index of that item. If no item
is found, returns -1.

@param string the search item
@return the index of the item

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the string is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Searches the receiver's list starting at the given,
zero-relative index until an item is found that is equal
to the argument, and returns the index of that item. If
no item is found or the starting index is out of range,
returns -1.

@param string the search item
@param start the zero-relative index at which to begin the search
@return the index of the item

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the string is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Pastes text from clipboard.
<p>
The selected text is deleted from the widget
and new text inserted from the clipboard.
</p>

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 2.1
------------
Removes the item from the receiver's list at the given
zero-relative index.

@param index the index for the item

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list minus 1 (inclusive)</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Removes the items from the receiver's list which are
between the given zero-relative start and end
indices (inclusive).

@param start the start of the range
@param end the end of the range

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_RANGE - if either the start or end are not between 0 and the number of elements in the list minus 1 (inclusive)</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Searches the receiver's list starting at the first item
until an item is found that is equal to the argument,
and removes that item from the list.

@param string the item to remove

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the string is null</li>
<li>ERROR_INVALID_ARGUMENT - if the string is not found in the list</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Removes all of the items from the receiver's list and clear the
contents of receiver's text field.
<p>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Removes the listener from the collection of listeners who will
be notified when the receiver's text is modified.

@param listener the listener which should no longer be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see ModifyListener
@see #addModifyListener
------------
Removes the listener from the collection of listeners who will
be notified when the receiver's text is modified.

@param listener the listener which should no longer be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see SegmentEvent
@see SegmentListener
@see #addSegmentListener

@since 3.103
------------
Removes the listener from the collection of listeners who will
be notified when the user changes the receiver's selection.

@param listener the listener which should no longer be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see SelectionListener
@see #addSelectionListener
------------
Removes the listener from the collection of listeners who will
be notified when the control is verified.

@param listener the listener which should no longer be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see VerifyListener
@see #addVerifyListener

@since 3.1
------------
Selects the item at the given zero-relative index in the receiver's
list.  If the item at the index was already selected, it remains
selected. Indices that are out of range are ignored.

@param index the index of the item to select

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the text of the item in the receiver's list at the given
zero-relative index to the string argument.

@param index the index for the item
@param string the new text for the item

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list minus 1 (inclusive)</li>
<li>ERROR_NULL_ARGUMENT - if the string is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the receiver's list to be the given array of items.

@param items the array of items

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the items array is null</li>
<li>ERROR_INVALID_ARGUMENT - if an item in the items array is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the orientation of the receiver, which must be one
of the constants <code>SWT.LEFT_TO_RIGHT</code> or <code>SWT.RIGHT_TO_LEFT</code>.
<p>

@param orientation new orientation style

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 2.1.2
------------
Sets the selection in the receiver's text field to the
range specified by the argument whose x coordinate is the
start of the selection and whose y coordinate is the end
of the selection.

@param selection a point representing the new selection start and end

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the point is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the contents of the receiver's text field to the
given string.
<p>
This call is ignored when the receiver is read only and
the given string is not in the receiver's list.
</p>
<p>
Note: The text field in a <code>Combo</code> is typically
only capable of displaying a single line of text. Thus,
setting the text to a string containing line breaks or
other special characters will probably cause it to
display incorrectly.
</p><p>
Also note, if control characters like '\n', '\t' etc. are used
in the string, then the behavior is platform dependent.
</p>

@param string the new text

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the string is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the maximum number of characters that the receiver's
text field is capable of holding to be the argument.
<p>
To reset this value to the default, use <code>setTextLimit(Combo.LIMIT)</code>.
Specifying a limit value larger than <code>Combo.LIMIT</code> sets the
receiver's limit to <code>Combo.LIMIT</code>.
</p>
@param limit new text limit

@exception IllegalArgumentException <ul>
<li>ERROR_CANNOT_BE_ZERO - if the limit is zero</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #LIMIT
------------
Sets the number of items that are visible in the drop
down portion of the receiver's list.
<p>
Note: This operation is a hint and is not supported on
platforms that do not have this concept.
</p>

@param count the new number of items to be visible

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.0

====== Compatibility.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
This class is a placeholder for utility methods commonly
used on J2SE platforms but not supported on some J2ME
profiles.
<p>
It is part of our effort to provide support for both J2SE
and J2ME platforms.
</p>
<p>
IMPORTANT: some of the methods have been modified from their
J2SE parents. Refer to the description of each method for
specific changes.
</p>
<ul>
<li>Exceptions thrown may differ since J2ME's set of
exceptions is a subset of J2SE's one.
</li>
<li>The range of the mathematic functions is subject to
change.
</li>
</ul>
------------
Answers the most negative (i.e. closest to negative infinity)
integer value which is greater than or equal to the number obtained by dividing
the first argument p by the second argument q.

@param p numerator
@param q denominator (must be different from zero)
@return the ceiling of the rational number p / q.
------------
Answers whether the indicated file exists or not.

@param parent the file's parent directory
@param child the file's name
@return true if the file exists
------------
Answers the result of rounding to the closest integer the number obtained
by dividing the first argument p by the second argument q.
<p>
IMPORTANT: the j2me version has an additional restriction on
the arguments. p must be within the range 0 - 32767 (inclusive).
q must be within the range 1 - 32767 (inclusive).
</p>

@param p numerator
@param q denominator (must be different from zero)
@return the closest integer to the rational number p / q
------------
Returns 2 raised to the power of the argument.

@param n an int value between 0 and 30 (inclusive)
@return 2 raised to the power of the argument

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_RANGE - if the argument is not between 0 and 30 (inclusive)</li>
</ul>
------------
Execute prog[0] in a separate platform process if the
underlying platform supports this.
<p>
The new process inherits the environment of the caller.
<p>

@param prog array containing the program to execute and its arguments
@param envp
array of strings, each element of which has environment
variable settings in the format name=value
@param workingDir
the working directory of the new process, or null if the new
process should inherit the working directory of the caller

@exception IOException
if the program cannot be executed
@exception	SecurityException
if the current SecurityManager disallows program execution

@since 3.6
------------
Returns the NLS'ed message for the given argument. This is only being
called from SWT.

@param key the key to look up
@return the message for the given key

@see SWT#getMessage(String)

====== Composite.java ======
Copyright (c) 2000, 2016 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class are controls which are capable
of containing other controls.
<dl>
<dt><b>Styles:</b></dt>
<dd>NO_BACKGROUND, NO_FOCUS, NO_MERGE_PAINTS, NO_REDRAW_RESIZE, NO_RADIO_GROUP, EMBEDDED, DOUBLE_BUFFERED</dd>
<dt><b>Events:</b></dt>
<dd>(none)</dd>
</dl>
<p>
Note: The <code>NO_BACKGROUND</code>, <code>NO_FOCUS</code>, <code>NO_MERGE_PAINTS</code>,
and <code>NO_REDRAW_RESIZE</code> styles are intended for use with <code>Canvas</code>.
They can be used with <code>Composite</code> if you are drawing your own, but their
behavior is undefined if they are used with subclasses of <code>Composite</code> other
than <code>Canvas</code>.
</p><p>
Note: The <code>CENTER</code> style, although undefined for composites, has the
same value as <code>EMBEDDED</code> which is used to embed widgets from other
widget toolkits into SWT.  On some operating systems (GTK), this may cause
the children of this composite to be obscured.
</p><p>
This class may be subclassed by custom control implementors
who are building controls that are constructed from aggregates
of other controls.
</p>

@see Canvas
@see <a href="http://www.eclipse.org/swt/snippets/#composite">Composite snippets</a>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
------------
Prevents uninitialized instances from being created outside the package.
------------
Constructs a new instance of this class given its parent
and a style value describing its behavior and appearance.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.
</p>

@param parent a widget which will be the parent of the new instance (cannot be null)
@param style the style of widget to construct

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
</ul>

@see SWT#NO_BACKGROUND
@see SWT#NO_FOCUS
@see SWT#NO_MERGE_PAINTS
@see SWT#NO_REDRAW_RESIZE
@see SWT#NO_RADIO_GROUP
@see SWT#EMBEDDED
@see SWT#DOUBLE_BUFFERED
@see Widget#getStyle
------------
Clears any data that has been cached by a Layout for all widgets that
are in the parent hierarchy of the changed control up to and including the
receiver.  If an ancestor does not have a layout, it is skipped.

@param changed an array of controls that changed state and require a recalculation of size

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the changed array is null any of its controls are null or have been disposed</li>
<li>ERROR_INVALID_PARENT - if any control in changed is not in the widget tree of the receiver</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@deprecated use {@link Composite#layout(Control[], int)} instead
@since 3.1
------------
Copies a rectangular area of the receiver at the specified
position using the gc.

@param gc the gc where the rectangle is to be filled
@param x the x coordinate of the rectangle to be filled
@param y the y coordinate of the rectangle to be filled
@param width the width of the rectangle to be filled
@param height the height of the rectangle to be filled

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the gc is null</li>
<li>ERROR_INVALID_ARGUMENT - if the gc has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Fills the interior of the rectangle specified by the arguments,
with the receiver's background.

<p>The <code>offsetX</code> and <code>offsetY</code> are used to map from
the <code>gc</code> origin to the origin of the parent image background. This is useful
to ensure proper alignment of the image background.</p>

@param gc the gc where the rectangle is to be filled
@param x the x coordinate of the rectangle to be filled
@param y the y coordinate of the rectangle to be filled
@param width the width of the rectangle to be filled
@param height the height of the rectangle to be filled
@param offsetX the image background x offset
@param offsetY the image background y offset

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the gc is null</li>
<li>ERROR_INVALID_ARGUMENT - if the gc has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.6
------------
Returns the receiver's background drawing mode. This
will be one of the following constants defined in class
<code>SWT</code>:
<code>INHERIT_NONE</code>, <code>INHERIT_DEFAULT</code>,
<code>INHERIT_FORCE</code>.

@return the background mode

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see SWT

@since 3.2
------------
Returns a (possibly empty) array containing the receiver's children.
Children are returned in the order that they are drawn.  The topmost
control appears at the beginning of the array.  Subsequent controls
draw beneath this control and appear later in the array.
<p>
Note: This is not the actual structure used by the receiver
to maintain its list of children, so modifying the array will
not affect the receiver.
</p>

@return an array of children

@see Control#moveAbove
@see Control#moveBelow

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns layout which is associated with the receiver, or
null if one has not been set.

@return the receiver's layout or null

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Gets the (possibly empty) tabbing order for the control.

@return tabList the ordered list of controls representing the tab order

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #setTabList
------------
Returns <code>true</code> if the receiver has deferred
the performing of layout, and <code>false</code> otherwise.

@return the receiver's deferred layout state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #setLayoutDeferred(boolean)
@see #isLayoutDeferred()

@since 3.1
------------
Returns <code>true</code> if the receiver or any ancestor
up to and including the receiver's nearest ancestor shell
has deferred the performing of layouts.  Otherwise, <code>false</code>
is returned.

@return the receiver's deferred layout state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #setLayoutDeferred(boolean)
@see #getLayoutDeferred()

@since 3.1
------------
If the receiver has a layout, asks the layout to <em>lay out</em>
(that is, set the size and location of) the receiver's children.
If the receiver does not have a layout, do nothing.
<p>
Use of this method is discouraged since it is the least-efficient
way to trigger a layout. The use of <code>layout(true)</code>
discards all cached layout information, even from controls which
have not changed. It is much more efficient to invoke
{@link Control#requestLayout()} on every control which has changed
in the layout than it is to invoke this method on the layout itself.
</p>
<p>
This is equivalent to calling <code>layout(true)</code>.
</p>
<p>
Note: Layout is different from painting. If a child is
moved or resized such that an area in the parent is
exposed, then the parent will paint. If no child is
affected, the parent will not paint.
</p>

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
If the receiver has a layout, asks the layout to <em>lay out</em>
(that is, set the size and location of) the receiver's children.
If the argument is <code>true</code> the layout must not rely
on any information it has cached about the immediate children. If it
is <code>false</code> the layout may (potentially) optimize the
work it is doing by assuming that none of the receiver's
children has changed state since the last layout.
If the receiver does not have a layout, do nothing.
<p>
It is normally more efficient to invoke {@link Control#requestLayout()}
on every control which has changed in the layout than it is to invoke
this method on the layout itself. Clients are encouraged to use
{@link Control#requestLayout()} where possible instead of calling
this method.
</p>
<p>
If a child is resized as a result of a call to layout, the
resize event will invoke the layout of the child.  The layout
will cascade down through all child widgets in the receiver's widget
tree until a child is encountered that does not resize.  Note that
a layout due to a resize will not flush any cached information
(same as <code>layout(false)</code>).
</p>
<p>
Note: Layout is different from painting. If a child is
moved or resized such that an area in the parent is
exposed, then the parent will paint. If no child is
affected, the parent will not paint.
</p>

@param changed <code>true</code> if the layout must flush its caches, and <code>false</code> otherwise

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
If the receiver has a layout, asks the layout to <em>lay out</em>
(that is, set the size and location of) the receiver's children.
If the changed argument is <code>true</code> the layout must not rely
on any information it has cached about its children. If it
is <code>false</code> the layout may (potentially) optimize the
work it is doing by assuming that none of the receiver's
children has changed state since the last layout.
If the all argument is <code>true</code> the layout will cascade down
through all child widgets in the receiver's widget tree, regardless of
whether the child has changed size.  The changed argument is applied to
all layouts.  If the all argument is <code>false</code>, the layout will
<em>not</em> cascade down through all child widgets in the receiver's widget
tree.  However, if a child is resized as a result of a call to layout, the
resize event will invoke the layout of the child.  Note that
a layout due to a resize will not flush any cached information
(same as <code>layout(false)</code>).
</p>
<p>
It is normally more efficient to invoke {@link Control#requestLayout()}
on every control which has changed in the layout than it is to invoke
this method on the layout itself. Clients are encouraged to use
{@link Control#requestLayout()} where possible instead of calling
this method.
</p>
<p>
Note: Layout is different from painting. If a child is
moved or resized such that an area in the parent is
exposed, then the parent will paint. If no child is
affected, the parent will not paint.
</p>

@param changed <code>true</code> if the layout must flush its caches, and <code>false</code> otherwise
@param all <code>true</code> if all children in the receiver's widget tree should be laid out, and <code>false</code> otherwise

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.1
------------
Forces a lay out (that is, sets the size and location) of all widgets that
are in the parent hierarchy of the changed control up to and including the
receiver.  The layouts in the hierarchy must not rely on any information
cached about the changed control or any of its ancestors.  The layout may
(potentially) optimize the work it is doing by assuming that none of the
peers of the changed control have changed state since the last layout.
If an ancestor does not have a layout, skip it.
<p>
It is normally more efficient to invoke {@link Control#requestLayout()}
on every control which has changed in the layout than it is to invoke
this method on the layout itself. Clients are encouraged to use
{@link Control#requestLayout()} where possible instead of calling
this method.
</p>
<p>
Note: Layout is different from painting. If a child is
moved or resized such that an area in the parent is
exposed, then the parent will paint. If no child is
affected, the parent will not paint.
</p>

@param changed a control that has had a state change which requires a recalculation of its size

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the changed array is null any of its controls are null or have been disposed</li>
<li>ERROR_INVALID_PARENT - if any control in changed is not in the widget tree of the receiver</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.1
------------
Forces a lay out (that is, sets the size and location) of all widgets that
are in the parent hierarchy of the changed control up to and including the
receiver.
<p>
The parameter <code>flags</code> may be a combination of:
<dl>
<dt><b>SWT.ALL</b></dt>
<dd>all children in the receiver's widget tree should be laid out</dd>
<dt><b>SWT.CHANGED</b></dt>
<dd>the layout must flush its caches</dd>
<dt><b>SWT.DEFER</b></dt>
<dd>layout will be deferred</dd>
</dl>
</p>
<p>
When the <code>changed</code> array is specified, the flags <code>SWT.ALL</code>
and <code>SWT.CHANGED</code> have no effect. In this case, the layouts in the
hierarchy must not rely on any information cached about the changed control or
any of its ancestors.  The layout may (potentially) optimize the
work it is doing by assuming that none of the peers of the changed
control have changed state since the last layout.
If an ancestor does not have a layout, skip it.
</p>
<p>
When the <code>changed</code> array is not specified, the flag <code>SWT.ALL</code>
indicates that the whole widget tree should be laid out. And the flag
<code>SWT.CHANGED</code> indicates that the layouts should flush any cached
information for all controls that are laid out.
</p>
<p>
The <code>SWT.DEFER</code> flag always causes the layout to be deferred by
calling <code>Composite.setLayoutDeferred(true)</code> and scheduling a call
to <code>Composite.setLayoutDeferred(false)</code>, which will happen when
appropriate (usually before the next event is handled). When this flag is set,
the application should not call <code>Composite.setLayoutDeferred(boolean)</code>.
</p>
<p>
Note: Layout is different from painting. If a child is
moved or resized such that an area in the parent is
exposed, then the parent will paint. If no child is
affected, the parent will not paint.
</p>

@param changed a control that has had a state change which requires a recalculation of its size
@param flags the flags specifying how the layout should happen

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if any of the controls in changed is null or has been disposed</li>
<li>ERROR_INVALID_PARENT - if any control in changed is not in the widget tree of the receiver</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.6
------------
Sets the background drawing mode to the argument which should
be one of the following constants defined in class <code>SWT</code>:
<code>INHERIT_NONE</code>, <code>INHERIT_DEFAULT</code>,
<code>INHERIT_FORCE</code>.

@param mode the new background mode

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see SWT

@since 3.2
------------
Sets the layout which is associated with the receiver to be
the argument which may be null.

@param layout the receiver's new layout or null

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
If the argument is <code>true</code>, causes subsequent layout
operations in the receiver or any of its children to be ignored.
No layout of any kind can occur in the receiver or any of its
children until the flag is set to false.
Layout operations that occurred while the flag was
<code>true</code> are remembered and when the flag is set to
<code>false</code>, the layout operations are performed in an
optimized manner.  Nested calls to this method are stacked.

@param defer the new defer state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #layout(boolean)
@see #layout(Control[])

@since 3.1
------------
Sets the tabbing order for the specified controls to
match the order that they occur in the argument list.

@param tabList the ordered list of controls representing the tab order or null

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if a widget in the tabList is null or has been disposed</li>
<li>ERROR_INVALID_PARENT - if widget in the tabList is not in the same widget tree</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

====== Control.java ======
Copyright (c) 2000, 2016 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
Stefan Xenos (Google) - bug 468854 - Add a requestLayout method to Control
------------
Control is the abstract superclass of all windowed user interface classes.
<p>
<dl>
<dt><b>Styles:</b>
<dd>BORDER</dd>
<dd>LEFT_TO_RIGHT, RIGHT_TO_LEFT, FLIP_TEXT_DIRECTION</dd>
<dt><b>Events:</b>
<dd>DragDetect, FocusIn, FocusOut, Help, KeyDown, KeyUp, MenuDetect, MouseDoubleClick, MouseDown, MouseEnter,
MouseExit, MouseHover, MouseUp, MouseMove, MouseWheel, MouseHorizontalWheel, MouseVerticalWheel, Move,
Paint, Resize, Traverse</dd>
</dl>
</p><p>
Only one of LEFT_TO_RIGHT or RIGHT_TO_LEFT may be specified.
</p><p>
IMPORTANT: This class is intended to be subclassed <em>only</em>
within the SWT implementation.
</p>

@see <a href="http://www.eclipse.org/swt/snippets/#control">Control snippets</a>
@see <a href="http://www.eclipse.org/swt/examples.php">SWT Example: ControlExample</a>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
@noextend This class is not intended to be subclassed by clients.
------------
the handle to the OS resource
(Warning: This field is platform dependent)
<p>
<b>IMPORTANT:</b> This field is <em>not</em> part of the SWT
public API. It is marked public only so that it can be shared
within the packages provided by SWT. It is not available on all
platforms and should never be accessed from application code.
</p>
*
@noreference This field is not intended to be referenced by clients.

public long /*int*/ handle;
Composite parent;
Cursor cursor;
Menu menu, activeMenu;
String toolTipText;
Object layoutData;
Accessible accessible;
Image backgroundImage;
Region region;
Font font;
int drawCount, foreground, background, backgroundAlpha = 255;


Prevents uninitialized instances from being created outside the package.
------------
Constructs a new instance of this class given its parent
and a style value describing its behavior and appearance.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.
</p>

@param parent a composite control which will be the parent of the new instance (cannot be null)
@param style the style of control to construct

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see SWT#BORDER
@see SWT#LEFT_TO_RIGHT
@see SWT#RIGHT_TO_LEFT
@see Widget#checkSubclass
@see Widget#getStyle
------------
Adds the listener to the collection of listeners who will
be notified when the control is moved or resized, by sending
it one of the messages defined in the <code>ControlListener</code>
interface.

@param listener the listener which should be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see ControlListener
@see #removeControlListener
------------
Adds the listener to the collection of listeners who will
be notified when a drag gesture occurs, by sending it
one of the messages defined in the <code>DragDetectListener</code>
interface.

@param listener the listener which should be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see DragDetectListener
@see #removeDragDetectListener

@since 3.3
------------
Adds the listener to the collection of listeners who will
be notified when the control gains or loses focus, by sending
it one of the messages defined in the <code>FocusListener</code>
interface.

@param listener the listener which should be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see FocusListener
@see #removeFocusListener
------------
Adds the listener to the collection of listeners who will
be notified when gesture events are generated for the control,
by sending it one of the messages defined in the
<code>GestureListener</code> interface.
<p>
NOTE: If <code>setTouchEnabled(true)</code> has previously been
invoked on the receiver then <code>setTouchEnabled(false)</code>
must be invoked on it to specify that gesture events should be
sent instead of touch events.
</p>
<p>
<b>Warning</b>: This API is currently only implemented on Windows and Cocoa.
SWT doesn't send Gesture or Touch events on GTK.
</p>

@param listener the listener which should be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see GestureListener
@see #removeGestureListener
@see #setTouchEnabled

@since 3.7
------------
Adds the listener to the collection of listeners who will
be notified when help events are generated for the control,
by sending it one of the messages defined in the
<code>HelpListener</code> interface.

@param listener the listener which should be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see HelpListener
@see #removeHelpListener
------------
Adds the listener to the collection of listeners who will
be notified when keys are pressed and released on the system keyboard, by sending
it one of the messages defined in the <code>KeyListener</code>
interface.
<p>
When a key listener is added to a control, the control
will take part in widget traversal.  By default, all
traversal keys (such as the tab key and so on) are
delivered to the control.  In order for a control to take
part in traversal, it should listen for traversal events.
Otherwise, the user can traverse into a control but not
out.  Note that native controls such as table and tree
implement key traversal in the operating system.  It is
not necessary to add traversal listeners for these controls,
unless you want to override the default traversal.
</p>
@param listener the listener which should be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see KeyListener
@see #removeKeyListener
------------
Adds the listener to the collection of listeners who will
be notified when the platform-specific context menu trigger
has occurred, by sending it one of the messages defined in
the <code>MenuDetectListener</code> interface.

@param listener the listener which should be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see MenuDetectListener
@see #removeMenuDetectListener

@since 3.3
------------
Adds the listener to the collection of listeners who will
be notified when mouse buttons are pressed and released, by sending
it one of the messages defined in the <code>MouseListener</code>
interface.

@param listener the listener which should be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see MouseListener
@see #removeMouseListener
------------
Adds the listener to the collection of listeners who will
be notified when the mouse passes or hovers over controls, by sending
it one of the messages defined in the <code>MouseTrackListener</code>
interface.

@param listener the listener which should be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see MouseTrackListener
@see #removeMouseTrackListener
------------
Adds the listener to the collection of listeners who will
be notified when the mouse moves, by sending it one of the
messages defined in the <code>MouseMoveListener</code>
interface.

@param listener the listener which should be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see MouseMoveListener
@see #removeMouseMoveListener
------------
Adds the listener to the collection of listeners who will
be notified when the mouse wheel is scrolled, by sending
it one of the messages defined in the
<code>MouseWheelListener</code> interface.

@param listener the listener which should be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see MouseWheelListener
@see #removeMouseWheelListener

@since 3.3
------------
Adds the listener to the collection of listeners who will
be notified when the receiver needs to be painted, by sending it
one of the messages defined in the <code>PaintListener</code>
interface.

@param listener the listener which should be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see PaintListener
@see #removePaintListener
------------
Adds the listener to the collection of listeners who will
be notified when touch events occur, by sending it
one of the messages defined in the <code>TouchListener</code>
interface.
<p>
NOTE: You must also call <code>setTouchEnabled(true)</code> to
specify that touch events should be sent, which will cause gesture
events to not be sent.
</p>
<p>
<b>Warning</b>: This API is currently only implemented on Windows and Cocoa.
SWT doesn't send Gesture or Touch events on GTK.
</p>

@param listener the listener which should be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see TouchListener
@see #removeTouchListener
@see #setTouchEnabled

@since 3.7
------------
Adds the listener to the collection of listeners who will
be notified when traversal events occur, by sending it
one of the messages defined in the <code>TraverseListener</code>
interface.

@param listener the listener which should be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see TraverseListener
@see #removeTraverseListener
------------
Returns the preferred size (in points) of the receiver.
<p>
The <em>preferred size</em> of a control is the size that it would
best be displayed at. The width hint and height hint arguments
allow the caller to ask a control questions such as "Given a particular
width, how high does the control need to be to show all of the contents?"
To indicate that the caller does not wish to constrain a particular
dimension, the constant <code>SWT.DEFAULT</code> is passed for the hint.
</p>

@param wHint the width hint (can be <code>SWT.DEFAULT</code>)
@param hHint the height hint (can be <code>SWT.DEFAULT</code>)
@return the preferred size of the control

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see Layout
@see #getBorderWidth
@see #getBounds
@see #getSize
@see #pack(boolean)
@see "computeTrim, getClientArea for controls that implement them"
------------
Returns the preferred size (in points) of the receiver.
<p>
The <em>preferred size</em> of a control is the size that it would
best be displayed at. The width hint and height hint arguments
allow the caller to ask a control questions such as "Given a particular
width, how high does the control need to be to show all of the contents?"
To indicate that the caller does not wish to constrain a particular
dimension, the constant <code>SWT.DEFAULT</code> is passed for the hint.
</p><p>
If the changed flag is <code>true</code>, it indicates that the receiver's
<em>contents</em> have changed, therefore any caches that a layout manager
containing the control may have been keeping need to be flushed. When the
control is resized, the changed flag will be <code>false</code>, so layout
manager caches can be retained.
</p>

@param wHint the width hint (can be <code>SWT.DEFAULT</code>)
@param hHint the height hint (can be <code>SWT.DEFAULT</code>)
@param changed <code>true</code> if the control's contents have changed, and <code>false</code> otherwise
@return the preferred size of the control.

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see Layout
@see #getBorderWidth
@see #getBounds
@see #getSize
@see #pack(boolean)
@see "computeTrim, getClientArea for controls that implement them"
------------
Detects a drag and drop gesture.  This method is used
to detect a drag gesture when called from within a mouse
down listener.

<p>By default, a drag is detected when the gesture
occurs anywhere within the client area of a control.
Some controls, such as tables and trees, override this
behavior.  In addition to the operating system specific
drag gesture, they require the mouse to be inside an
item.  Custom widget writers can use <code>setDragDetect</code>
to disable the default detection, listen for mouse down,
and then call <code>dragDetect()</code> from within the
listener to conditionally detect a drag.
</p>

@param event the mouse down event

@return <code>true</code> if the gesture occurred, and <code>false</code> otherwise.

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT if the event is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see DragDetectListener
@see #addDragDetectListener

@see #getDragDetect
@see #setDragDetect

@since 3.3
------------
Detects a drag and drop gesture.  This method is used
to detect a drag gesture when called from within a mouse
down listener.

<p>By default, a drag is detected when the gesture
occurs anywhere within the client area of a control.
Some controls, such as tables and trees, override this
behavior.  In addition to the operating system specific
drag gesture, they require the mouse to be inside an
item.  Custom widget writers can use <code>setDragDetect</code>
to disable the default detection, listen for mouse down,
and then call <code>dragDetect()</code> from within the
listener to conditionally detect a drag.
</p>

@param event the mouse down event

@return <code>true</code> if the gesture occurred, and <code>false</code> otherwise.

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT if the event is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see DragDetectListener
@see #addDragDetectListener

@see #getDragDetect
@see #setDragDetect

@since 3.3
------------
Forces the receiver to have the <em>keyboard focus</em>, causing
all keyboard events to be delivered to it.

@return <code>true</code> if the control got focus, and <code>false</code> if it was unable to.

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #setFocus
------------
Returns the accessible object for the receiver.
<p>
If this is the first time this object is requested,
then the object is created and returned. The object
returned by getAccessible() does not need to be disposed.
</p>

@return the accessible object

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see Accessible#addAccessibleListener
@see Accessible#addAccessibleControlListener

@since 2.0
------------
Returns the receiver's background color.
<p>
Note: This operation is a hint and may be overridden by the platform.
For example, on some versions of Windows the background of a TabFolder,
is a gradient rather than a solid color.
</p>
@return the background color

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the receiver's background image.

@return the background image

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.2
------------
Returns the receiver's border width in points.

@return the border width

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns a rectangle describing the receiver's size and location in points
relative to its parent (or its display if its parent is null),
unless the receiver is a shell. In this case, the location is
relative to the display.

@return the receiver's bounding rectangle

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the receiver's cursor, or null if it has not been set.
<p>
When the mouse pointer passes over a control its appearance
is changed to match the control's cursor.
</p>

@return the receiver's cursor or <code>null</code>

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.3
------------
Returns <code>true</code> if the receiver is detecting
drag gestures, and  <code>false</code> otherwise.

@return the receiver's drag detect state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.3
------------
Returns <code>true</code> if the receiver is enabled, and
<code>false</code> otherwise. A disabled control is typically
not selectable from the user interface and draws with an
inactive or "grayed" look.

@return the receiver's enabled state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #isEnabled
------------
Returns the font that the receiver will use to paint textual information.

@return the receiver's font

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the foreground color that the receiver will use to draw.

@return the receiver's foreground color

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns layout data which is associated with the receiver.

@return the receiver's layout data

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns a point describing the receiver's location relative
to its parent in points (or its display if its parent is null), unless
the receiver is a shell. In this case, the point is
relative to the display.

@return the receiver's location

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the receiver's pop up menu if it has one, or null
if it does not. All controls may optionally have a pop up
menu that is displayed when the user requests one for
the control. The sequence of key strokes, button presses
and/or button releases that are used to request a pop up
menu is platform specific.

@return the receiver's menu

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the receiver's monitor.

@return the receiver's monitor

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.0
------------
Returns the orientation of the receiver, which will be one of the
constants <code>SWT.LEFT_TO_RIGHT</code> or <code>SWT.RIGHT_TO_LEFT</code>.

@return the orientation style

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.7
------------
Returns the receiver's parent, which must be a <code>Composite</code>
or null when the receiver is a shell that was created with null or
a display for a parent.

@return the receiver's parent

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the region that defines the shape of the control,
or null if the control has the default shape.

@return the region that defines the shape of the shell (or null)

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.4
------------
Returns the receiver's shell. For all controls other than
shells, this simply returns the control's nearest ancestor
shell. Shells return themselves, even if they are children
of other shells.

@return the receiver's shell

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #getParent
------------
Returns a point describing the receiver's size in points. The
x coordinate of the result is the width of the receiver.
The y coordinate of the result is the height of the
receiver.

@return the receiver's size

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
calculates a slightly different color, e.g. for highlighting the sort column
in a column or the hot state of a button.
@param pixel the color to start with
------------
calculates a different color, e.g. for the checked state of a toggle button
or to highlight a selected button.
@param pixel the color to start with
------------
@param factor must be between [0..1]. The bounds are not checked
------------
Returns the text direction of the receiver, which will be one of the
constants <code>SWT.LEFT_TO_RIGHT</code> or <code>SWT.RIGHT_TO_LEFT</code>.

@return the text direction style

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.102
------------
Returns the receiver's tool tip text, or null if it has
not been set.

@return the receiver's tool tip text

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns <code>true</code> if this control is set to send touch events, or
<code>false</code> if it is set to send gesture events instead.  This method
also returns <code>false</code> if a touch-based input device is not detected
(this can be determined with <code>Display#getTouchEnabled()</code>).  Use
{@link #setTouchEnabled(boolean)} to switch the events that a control sends
between touch events and gesture events.

@return <code>true</code> if the control is set to send touch events, or <code>false</code> otherwise

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #setTouchEnabled
@see Display#getTouchEnabled

@since 3.7
------------
Returns <code>true</code> if the receiver is visible, and
<code>false</code> otherwise.
<p>
If one of the receiver's ancestors is not visible or some
other condition makes the receiver not visible, this method
may still indicate that it is considered visible even though
it may not actually be showing.
</p>

@return the receiver's visibility state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Invokes platform specific functionality to allocate a new GC handle.
<p>
<b>IMPORTANT:</b> This method is <em>not</em> part of the public
API for <code>Control</code>. It is marked public only so that it
can be shared within the packages provided by SWT. It is not
available on all platforms, and should never be called from
application code.
</p>

@param data the platform specific GC data
@return the platform specific GC handle

@noreference This method is not intended to be referenced by clients.
------------
Invokes platform specific functionality to dispose a GC handle.
<p>
<b>IMPORTANT:</b> This method is <em>not</em> part of the public
API for <code>Control</code>. It is marked public only so that it
can be shared within the packages provided by SWT. It is not
available on all platforms, and should never be called from
application code.
</p>

@param hDC the platform specific GC handle
@param data the platform specific GC data

@noreference This method is not intended to be referenced by clients.
------------
Returns <code>true</code> if the receiver is enabled and all
ancestors up to and including the receiver's nearest ancestor
shell are enabled.  Otherwise, <code>false</code> is returned.
A disabled control is typically not selectable from the user
interface and draws with an inactive or "grayed" look.

@return the receiver's enabled state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #getEnabled
------------
Returns <code>true</code> if the receiver has the user-interface
focus, and <code>false</code> otherwise.

@return the receiver's focus state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns <code>true</code> if the underlying operating
system supports this reparenting, otherwise <code>false</code>

@return <code>true</code> if the widget can be reparented, otherwise <code>false</code>

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns <code>true</code> if the receiver is visible and all
ancestors up to and including the receiver's nearest ancestor
shell are visible. Otherwise, <code>false</code> is returned.

@return the receiver's visibility state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #getVisible
------------
Moves the receiver above the specified control in the
drawing order. If the argument is null, then the receiver
is moved to the top of the drawing order. The control at
the top of the drawing order will not be covered by other
controls even if they occupy intersecting areas.

@param control the sibling control (or null)

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the control has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see Control#moveBelow
@see Composite#getChildren
------------
Moves the receiver below the specified control in the
drawing order. If the argument is null, then the receiver
is moved to the bottom of the drawing order. The control at
the bottom of the drawing order will be covered by all other
controls which occupy intersecting areas.

@param control the sibling control (or null)

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the control has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see Control#moveAbove
@see Composite#getChildren
------------
Causes the receiver to be resized to its preferred size.
For a composite, this involves computing the preferred size
from its layout, if there is one.

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #computeSize(int, int, boolean)
------------
Causes the receiver to be resized to its preferred size.
For a composite, this involves computing the preferred size
from its layout, if there is one.
<p>
If the changed flag is <code>true</code>, it indicates that the receiver's
<em>contents</em> have changed, therefore any caches that a layout manager
containing the control may have been keeping need to be flushed. When the
control is resized, the changed flag will be <code>false</code>, so layout
manager caches can be retained.
</p>

@param changed whether or not the receiver's contents have changed

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #computeSize(int, int, boolean)
------------
Prints the receiver and all children.

@param gc the gc where the drawing occurs
@return <code>true</code> if the operation was successful and <code>false</code> otherwise

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the gc is null</li>
<li>ERROR_INVALID_ARGUMENT - if the gc has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.4
------------
Requests that this control and all of its ancestors be repositioned by
their layouts at the earliest opportunity. This should be invoked after
modifying the control in order to inform any dependent layouts of
the change.
<p>
The control will not be repositioned synchronously. This method is
fast-running and only marks the control for future participation in
a deferred layout.
<p>
Invoking this method multiple times before the layout occurs is an
inexpensive no-op.

@since 3.105
------------
Causes the entire bounds of the receiver to be marked
as needing to be redrawn. The next time a paint request
is processed, the control will be completely painted,
including the background.

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #update()
@see PaintListener
@see SWT#Paint
@see SWT#NO_BACKGROUND
@see SWT#NO_REDRAW_RESIZE
@see SWT#NO_MERGE_PAINTS
@see SWT#DOUBLE_BUFFERED
------------
Causes the rectangular area of the receiver specified by
the arguments to be marked as needing to be redrawn.
The next time a paint request is processed, that area of
the receiver will be painted, including the background.
If the <code>all</code> flag is <code>true</code>, any
children of the receiver which intersect with the specified
area will also paint their intersecting areas. If the
<code>all</code> flag is <code>false</code>, the children
will not be painted.

@param x the x coordinate of the area to draw
@param y the y coordinate of the area to draw
@param width the width of the area to draw
@param height the height of the area to draw
@param all <code>true</code> if children should redraw, and <code>false</code> otherwise

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #update()
@see PaintListener
@see SWT#Paint
@see SWT#NO_BACKGROUND
@see SWT#NO_REDRAW_RESIZE
@see SWT#NO_MERGE_PAINTS
@see SWT#DOUBLE_BUFFERED
------------
Removes the listener from the collection of listeners who will
be notified when the control is moved or resized.

@param listener the listener which should no longer be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see ControlListener
@see #addControlListener
------------
Removes the listener from the collection of listeners who will
be notified when a drag gesture occurs.

@param listener the listener which should no longer be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see DragDetectListener
@see #addDragDetectListener

@since 3.3
------------
Removes the listener from the collection of listeners who will
be notified when the control gains or loses focus.

@param listener the listener which should no longer be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see FocusListener
@see #addFocusListener
------------
Removes the listener from the collection of listeners who will
be notified when gesture events are generated for the control.

@param listener the listener which should no longer be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see GestureListener
@see #addGestureListener

@since 3.7
------------
Removes the listener from the collection of listeners who will
be notified when the help events are generated for the control.

@param listener the listener which should no longer be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see HelpListener
@see #addHelpListener
------------
Removes the listener from the collection of listeners who will
be notified when keys are pressed and released on the system keyboard.

@param listener the listener which should no longer be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see KeyListener
@see #addKeyListener
------------
Removes the listener from the collection of listeners who will
be notified when the platform-specific context menu trigger has
occurred.

@param listener the listener which should no longer be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see MenuDetectListener
@see #addMenuDetectListener

@since 3.3
------------
Removes the listener from the collection of listeners who will
be notified when the mouse passes or hovers over controls.

@param listener the listener which should no longer be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see MouseTrackListener
@see #addMouseTrackListener
------------
Removes the listener from the collection of listeners who will
be notified when mouse buttons are pressed and released.

@param listener the listener which should no longer be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see MouseListener
@see #addMouseListener
------------
Removes the listener from the collection of listeners who will
be notified when the mouse moves.

@param listener the listener which should no longer be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see MouseMoveListener
@see #addMouseMoveListener
------------
Removes the listener from the collection of listeners who will
be notified when the mouse wheel is scrolled.

@param listener the listener which should no longer be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see MouseWheelListener
@see #addMouseWheelListener

@since 3.3
------------
Removes the listener from the collection of listeners who will
be notified when the receiver needs to be painted.

@param listener the listener which should no longer be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see PaintListener
@see #addPaintListener
------------
Removes the listener from the collection of listeners who will
be notified when touch events occur.

@param listener the listener which should no longer be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see TouchListener
@see #addTouchListener

@since 3.7
------------
Removes the listener from the collection of listeners who will
be notified when traversal events occur.

@param listener the listener which should no longer be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see TraverseListener
@see #addTraverseListener
------------
Feature in Windows 7.  GID_BEGIN and GID_END events bubble up through the window
hierarchy for legacy support.  Ignore events not targeted for this control.

if (gi.hwndTarget != handle) return true;
Event event = new Event ();
int type = 0;
Point globalPt = new Point(gi.x, gi.y);
Point point = toControlInPixels(globalPt.x, globalPt.y);
event.setLocationInPixels(point.x, point.y);
switch (gi.dwID) {
case OS.GID_ZOOM:
type = SWT.Gesture;
event.detail = SWT.GESTURE_MAGNIFY;
int fingerDistance = OS.LODWORD (gi.ullArguments);
if ((gi.dwFlags & OS.GF_BEGIN) != 0) {
event.detail = SWT.GESTURE_BEGIN;
display.magStartDistance = display.lastDistance = fingerDistance;
} else if ((gi.dwFlags & OS.GF_END) != 0) {
event.detail = SWT.GESTURE_END;
}

/*
The gi.ullArguments is the distance between the fingers.
Scale factor is relative to that original value.

if (fingerDistance == display.lastDistance && event.detail == SWT.GESTURE_MAGNIFY) return true;
if (fingerDistance != 0) event.magnification = fingerDistance / display.magStartDistance;
display.lastDistance = fingerDistance;
break;
case OS.GID_PAN:
type = SWT.Gesture;
event.detail = SWT.GESTURE_PAN;
if ((gi.dwFlags & OS.GF_BEGIN) != 0) {
event.detail = SWT.GESTURE_BEGIN;
display.lastX = point.x;
display.lastY = point.y;
} else if ((gi.dwFlags & OS.GF_END) != 0) {
event.detail = SWT.GESTURE_END;
}
if (display.lastX == point.x && display.lastY == point.y && event.detail == SWT.GESTURE_PAN) return true;
event.xDirection = point.x - display.lastX;
event.yDirection = point.y - display.lastY;
display.lastX = point.x;
display.lastY = point.y;
break;
case OS.GID_ROTATE:
type = SWT.Gesture;
event.detail = SWT.GESTURE_ROTATE;
double rotationInRadians = OS.GID_ROTATE_ANGLE_FROM_ARGUMENT (OS.LODWORD (gi.ullArguments));
if ((gi.dwFlags & OS.GF_BEGIN) != 0) {
event.detail = SWT.GESTURE_BEGIN;
display.rotationAngle = rotationInRadians;
} else if ((gi.dwFlags & OS.GF_END) != 0) {
event.detail = SWT.GESTURE_END;
}

/*
Feature in Win32. Rotation events are sent even when the fingers are at rest.
If the current rotation is the same as the last one received don't send the event.

if (display.rotationAngle == rotationInRadians && event.detail == SWT.GESTURE_ROTATE) return true;
event.rotation = rotationInRadians * 180.0 / Math.PI;
display.rotationAngle = rotationInRadians;
break;
default:
// Unknown gesture -- ignore.
break;
}

if (type == 0) return true;
setInputState (event, type);
sendEvent (type, event);
return event.doit;
}

void sendMove () {
sendEvent (SWT.Move);
}

void sendResize () {
sendEvent (SWT.Resize);
}

void sendTouchEvent (TOUCHINPUT touchInput []) {
Event event = new Event ();
POINT pt = new POINT ();
OS.GetCursorPos (pt);
OS.ScreenToClient (handle, pt);
event.setLocationInPixels(pt.x, pt.y);
Touch [] touches = new Touch [touchInput.length];
Monitor monitor = getMonitor ();
for (int i = 0; i < touchInput.length; i++) {
TOUCHINPUT ti = touchInput [i];
TouchSource inputSource = display.findTouchSource (ti.hSource, monitor);
int state = 0;
if ((ti.dwFlags & OS.TOUCHEVENTF_DOWN) != 0) state = SWT.TOUCHSTATE_DOWN;
if ((ti.dwFlags & OS.TOUCHEVENTF_UP) != 0) state = SWT.TOUCHSTATE_UP;
if ((ti.dwFlags & OS.TOUCHEVENTF_MOVE) != 0) state = SWT.TOUCHSTATE_MOVE;
boolean primary = (ti.dwFlags & OS.TOUCHEVENTF_PRIMARY) != 0;
int x = (int)OS.TOUCH_COORD_TO_PIXEL (ti.x);
int y = (int)OS.TOUCH_COORD_TO_PIXEL (ti.y);
touches [i] = new Touch (ti.dwID, inputSource, state, primary, x, y);
}
event.touches = touches;
setInputState (event, SWT.Touch);
postEvent (SWT.Touch, event);
}

void setBackground () {
Control control = findBackgroundControl ();
if (control == null) control = this;
if (control.backgroundImage != null) {
Shell shell = getShell ();
shell.releaseBrushes ();
setBackgroundImage (control.backgroundImage.handle);
} else {
setBackgroundPixel (control.background == -1 ? control.defaultBackground() : control.background);
}
}


Sets the receiver's background color to the color specified
by the argument, or to the default system color for the control
if the argument is null.
<p>
Note: This operation is a hint and may be overridden by the platform.
For example, on MAC the background of a Button cannot be changed.
</p>
@param color the new color (or null)

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the argument has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the receiver's background image to the image specified
by the argument, or to the default system color for the control
if the argument is null.  The background image is tiled to fill
the available space.
<p>
Note: This operation is a hint and may be overridden by the platform.
For example, on Windows the background of a Button cannot be changed.
</p>
@param image the new image (or null)

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the argument has been disposed</li>
<li>ERROR_INVALID_ARGUMENT - if the argument is not a bitmap</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.2
------------
Sets the receiver's size and location in points to the rectangular
area specified by the arguments. The <code>x</code> and
<code>y</code> arguments are relative to the receiver's
parent (or its display if its parent is null), unless
the receiver is a shell. In this case, the <code>x</code>
and <code>y</code> arguments are relative to the display.
<p>
Note: Attempting to set the width or height of the
receiver to a negative number will cause that
value to be set to zero instead.
</p>
<p>
Note: On GTK, attempting to set the width or height of the
receiver to a number higher or equal 2^14 will cause them to be
set to (2^14)-1 instead.
</p>

@param x the new x coordinate for the receiver
@param y the new y coordinate for the receiver
@param width the new width for the receiver
@param height the new height for the receiver

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the receiver's size and location in points to the rectangular
area specified by the argument. The <code>x</code> and
<code>y</code> fields of the rectangle are relative to
the receiver's parent (or its display if its parent is null).
<p>
Note: Attempting to set the width or height of the
receiver to a negative number will cause that
value to be set to zero instead.
</p>
<p>
Note: On GTK, attempting to set the width or height of the
receiver to a number higher or equal 2^14 will cause them to be
set to (2^14)-1 instead.
</p>

@param rect the new bounds for the receiver

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
If the argument is <code>true</code>, causes the receiver to have
all mouse events delivered to it until the method is called with
<code>false</code> as the argument.  Note that on some platforms,
a mouse button must currently be down for capture to be assigned.

@param capture <code>true</code> to capture the mouse, and <code>false</code> to release it

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the receiver's cursor to the cursor specified by the
argument, or to the default cursor for that kind of control
if the argument is null.
<p>
When the mouse pointer passes over a control its appearance
is changed to match the control's cursor.
</p>

@param cursor the new cursor (or null)

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the argument has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the receiver's drag detect state. If the argument is
<code>true</code>, the receiver will detect drag gestures,
otherwise these gestures will be ignored.

@param dragDetect the new drag detect state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.3
------------
Enables the receiver if the argument is <code>true</code>,
and disables it otherwise. A disabled control is typically
not selectable from the user interface and draws with an
inactive or "grayed" look.

@param enabled the new enabled state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Causes the receiver to have the <em>keyboard focus</em>,
such that all keyboard events will be delivered to it.  Focus
reassignment will respect applicable platform constraints.

@return <code>true</code> if the control got focus, and <code>false</code> if it was unable to.

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #forceFocus
------------
Sets the font that the receiver will use to paint textual information
to the font specified by the argument, or to the default font for that
kind of control if the argument is null.

@param font the new font (or null)

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the argument has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the receiver's foreground color to the color specified
by the argument, or to the default system color for the control
if the argument is null.
<p>
Note: This operation is a hint and may be overridden by the platform.
</p>
@param color the new color (or null)

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the argument has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the layout data associated with the receiver to the argument.

@param layoutData the new layout data for the receiver.

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the receiver's location to the point specified by
the arguments which are relative to the receiver's
parent (or its display if its parent is null), unless
the receiver is a shell. In this case, the point is
relative to the display.

@param x the new x coordinate for the receiver
@param y the new y coordinate for the receiver

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the receiver's location to the point specified by
the arguments which are relative to the receiver's
parent (or its display if its parent is null), unless
the receiver is a shell. In this case, the point is
relative to the display.

@param location the new location for the receiver

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the receiver's pop up menu to the argument.
All controls may optionally have a pop up
menu that is displayed when the user requests one for
the control. The sequence of key strokes, button presses
and/or button releases that are used to request a pop up
menu is platform specific.
<p>
Note: Disposing of a control that has a pop up menu will
dispose of the menu.  To avoid this behavior, set the
menu to null before the control is disposed.
</p>

@param menu the new pop up menu

@exception IllegalArgumentException <ul>
<li>ERROR_MENU_NOT_POP_UP - the menu is not a pop up menu</li>
<li>ERROR_INVALID_PARENT - if the menu is not in the same widget tree</li>
<li>ERROR_INVALID_ARGUMENT - if the menu has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the orientation of the receiver, which must be one
of the constants <code>SWT.LEFT_TO_RIGHT</code> or <code>SWT.RIGHT_TO_LEFT</code>.
<p>

@param orientation new orientation style

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.7
------------
If the argument is <code>false</code>, causes subsequent drawing
operations in the receiver to be ignored. No drawing of any kind
can occur in the receiver until the flag is set to true.
Graphics operations that occurred while the flag was
<code>false</code> are lost. When the flag is set to <code>true</code>,
the entire widget is marked as needing to be redrawn.  Nested calls
to this method are stacked.
<p>
Note: This operation is a hint and may not be supported on some
platforms or for some widgets.
</p>

@param redraw the new redraw state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #redraw(int, int, int, int, boolean)
@see #update()
------------
Sets the shape of the control to the region specified
by the argument.  When the argument is null, the
default shape of the control is restored.

@param region the region that defines the shape of the control (or null)

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the region has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.4
------------
Sets the receiver's size to the point specified by the arguments.
<p>
Note: Attempting to set the width or height of the
receiver to a negative number will cause that
value to be set to zero instead.
</p>
<p>
Note: On GTK, attempting to set the width or height of the
receiver to a number higher or equal 2^14 will cause them to be
set to (2^14)-1 instead.
</p>

@param width the new width in points for the receiver
@param height the new height in points for the receiver

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the receiver's size to the point specified by the argument.
<p>
Note: Attempting to set the width or height of the
receiver to a negative number will cause them to be
set to zero instead.
</p>
<p>
Note: On GTK, attempting to set the width or height of the
receiver to a number higher or equal 2^14 will cause them to be
set to (2^14)-1 instead.
</p>

@param size the new size in points for the receiver

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the point is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the base text direction (a.k.a. "paragraph direction") of the receiver,
which must be one of the constants <code>SWT.LEFT_TO_RIGHT</code>,
<code>SWT.RIGHT_TO_LEFT</code>, or <code>SWT.AUTO_TEXT_DIRECTION</code>.
<p>
<code>setOrientation</code> would override this value with the text direction
that is consistent with the new orientation.
</p>
<p>
<b>Warning</b>: This API is currently only implemented on Windows.
It doesn't set the base text direction on GTK and Cocoa.
</p>

@param textDirection the base text direction style

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see SWT#LEFT_TO_RIGHT
@see SWT#RIGHT_TO_LEFT
@see SWT#AUTO_TEXT_DIRECTION
@see SWT#FLIP_TEXT_DIRECTION

@since 3.102
------------
Sets the receiver's tool tip text to the argument, which
may be null indicating that the default tool tip for the
control will be shown. For a control that has a default
tool tip, such as the Tree control on Windows, setting
the tool tip text to an empty string replaces the default,
causing no tool tip text to be shown.
<p>
The mnemonic indicator (character '&amp;') is not displayed in a tool tip.
To display a single '&amp;' in the tool tip, the character '&amp;' can be
escaped by doubling it in the string.
</p>

@param string the new tool tip text (or null)

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets whether this control should send touch events (by default controls do not).
Setting this to <code>false</code> causes the receiver to send gesture events
instead.  No exception is thrown if a touch-based input device is not
detected (this can be determined with <code>Display#getTouchEnabled()</code>).

@param enabled the new touch-enabled state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>

@see Display#getTouchEnabled

@since 3.7
------------
Marks the receiver as visible if the argument is <code>true</code>,
and marks it invisible otherwise.
<p>
If one of the receiver's ancestors is not visible or some
other condition makes the receiver not visible, marking
it visible may not actually cause it to be displayed.
</p>

@param visible the new visibility state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns a point which is the result of converting the
argument, which is specified in display relative coordinates,
to coordinates relative to the receiver.
<p>
NOTE: To properly map a rectangle or a corner of a rectangle on a right-to-left platform, use
{@link Display#map(Control, Control, Rectangle)}.
</p>

@param x the x coordinate in points to be translated
@param y the y coordinate in points to be translated
@return the translated coordinates

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 2.1
------------
Returns a point which is the result of converting the
argument, which is specified in display relative coordinates,
to coordinates relative to the receiver.
<p>
NOTE: To properly map a rectangle or a corner of a rectangle on a right-to-left platform, use
{@link Display#map(Control, Control, Rectangle)}.
</p>

@param point the point to be translated (must not be null)
@return the translated coordinates

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the point is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns a point which is the result of converting the
argument, which is specified in coordinates relative to
the receiver, to display relative coordinates.
<p>
NOTE: To properly map a rectangle or a corner of a rectangle on a right-to-left platform, use
{@link Display#map(Control, Control, Rectangle)}.
</p>

@param x the x coordinate to be translated
@param y the y coordinate to be translated
@return the translated coordinates

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 2.1
------------
Returns a point which is the result of converting the
argument, which is specified in coordinates relative to
the receiver, to display relative coordinates.
<p>
NOTE: To properly map a rectangle or a corner of a rectangle on a right-to-left platform, use
{@link Display#map(Control, Control, Rectangle)}.
</p>

@param point the point to be translated (must not be null)
@return the translated coordinates

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the point is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Based on the argument, perform one of the expected platform
traversal action. The argument should be one of the constants:
<code>SWT.TRAVERSE_ESCAPE</code>, <code>SWT.TRAVERSE_RETURN</code>,
<code>SWT.TRAVERSE_TAB_NEXT</code>, <code>SWT.TRAVERSE_TAB_PREVIOUS</code>,
<code>SWT.TRAVERSE_ARROW_NEXT</code>, <code>SWT.TRAVERSE_ARROW_PREVIOUS</code>,
<code>SWT.TRAVERSE_PAGE_NEXT</code> and <code>SWT.TRAVERSE_PAGE_PREVIOUS</code>.

@param traversal the type of traversal
@return true if the traversal succeeded

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Performs a platform traversal action corresponding to a <code>KeyDown</code> event.

<p>Valid traversal values are
<code>SWT.TRAVERSE_NONE</code>, <code>SWT.TRAVERSE_MNEMONIC</code>,
<code>SWT.TRAVERSE_ESCAPE</code>, <code>SWT.TRAVERSE_RETURN</code>,
<code>SWT.TRAVERSE_TAB_NEXT</code>, <code>SWT.TRAVERSE_TAB_PREVIOUS</code>,
<code>SWT.TRAVERSE_ARROW_NEXT</code>, <code>SWT.TRAVERSE_ARROW_PREVIOUS</code>,
<code>SWT.TRAVERSE_PAGE_NEXT</code> and <code>SWT.TRAVERSE_PAGE_PREVIOUS</code>.
If <code>traversal</code> is <code>SWT.TRAVERSE_NONE</code> then the Traverse
event is created with standard values based on the KeyDown event.  If
<code>traversal</code> is one of the other traversal constants then the Traverse
event is created with this detail, and its <code>doit</code> is taken from the
KeyDown event.
</p>

@param traversal the type of traversal, or <code>SWT.TRAVERSE_NONE</code> to compute
this from <code>event</code>
@param event the KeyDown event

@return <code>true</code> if the traversal succeeded

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT if the event is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.6
------------
Performs a platform traversal action corresponding to a <code>KeyDown</code> event.

<p>Valid traversal values are
<code>SWT.TRAVERSE_NONE</code>, <code>SWT.TRAVERSE_MNEMONIC</code>,
<code>SWT.TRAVERSE_ESCAPE</code>, <code>SWT.TRAVERSE_RETURN</code>,
<code>SWT.TRAVERSE_TAB_NEXT</code>, <code>SWT.TRAVERSE_TAB_PREVIOUS</code>,
<code>SWT.TRAVERSE_ARROW_NEXT</code>, <code>SWT.TRAVERSE_ARROW_PREVIOUS</code>,
<code>SWT.TRAVERSE_PAGE_NEXT</code> and <code>SWT.TRAVERSE_PAGE_PREVIOUS</code>.
If <code>traversal</code> is <code>SWT.TRAVERSE_NONE</code> then the Traverse
event is created with standard values based on the KeyDown event.  If
<code>traversal</code> is one of the other traversal constants then the Traverse
event is created with this detail, and its <code>doit</code> is taken from the
KeyDown event.
</p>

@param traversal the type of traversal, or <code>SWT.TRAVERSE_NONE</code> to compute
this from <code>event</code>
@param event the KeyDown event

@return <code>true</code> if the traversal succeeded

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT if the event is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.6
------------
Forces all outstanding paint requests for the widget
to be processed before this method returns. If there
are no outstanding paint request, this method does
nothing.
<p>
Note: This method does not cause a redraw.
</p>

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #redraw()
@see #redraw(int, int, int, int, boolean)
@see PaintListener
@see SWT#Paint
------------
Changes the parent of the widget to be the one provided if
the underlying operating system supports this feature.
Returns <code>true</code> if the parent is successfully changed.

@param parent the new parent for the control.
@return <code>true</code> if the parent is changed and <code>false</code> otherwise.

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the argument has been disposed</li>
<li>ERROR_NULL_ARGUMENT - if the parent is <code>null</code></li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

====== ControlAdapter.java ======
Copyright (c) 2000, 2016 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
This adapter class provides default implementations for the
methods described by the <code>ControlListener</code> interface.
<p>
Classes that wish to deal with <code>ControlEvent</code>s can
extend this class and override only the methods which they are
interested in.
</p>

@see ControlListener
@see ControlEvent
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
------------
Sent when the location (x, y) of a control changes relative
to its parent (or relative to the display, for <code>Shell</code>s).
The default behavior is to do nothing.

@param e an event containing information about the move
------------
Sent when the size (width, height) of a control changes.
The default behavior is to do nothing.

@param e an event containing information about the resize

====== ControlEvent.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class are sent as a result of
controls being moved or resized.

@see ControlListener
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
------------
Constructs a new instance of this class based on the
information in the given untyped event.

@param e the untyped event containing the information

====== ControlListener.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Classes which implement this interface provide methods
that deal with the events that are generated by moving
and resizing controls.
<p>
After creating an instance of a class that implements
this interface it can be added to a control using the
<code>addControlListener</code> method and removed using
the <code>removeControlListener</code> method. When a
control is moved or resized, the appropriate method will
be invoked.
</p>

@see ControlAdapter
@see ControlEvent
------------
Sent when the location (x, y) of a control changes relative
to its parent (or relative to the display, for <code>Shell</code>s).

@param e an event containing information about the move
------------
Sent when the size (width, height) of a control changes.

@param e an event containing information about the resize

====== CoolBar.java ======
Copyright (c) 2000, 2012 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class provide an area for dynamically
positioning the items they contain.
<p>
The item children that may be added to instances of this class
must be of type <code>CoolItem</code>.
</p><p>
Note that although this class is a subclass of <code>Composite</code>,
it does not make sense to add <code>Control</code> children to it,
or set a layout on it.
</p><p>
<dl>
<dt><b>Styles:</b></dt>
<dd>FLAT, HORIZONTAL, VERTICAL</dd>
<dt><b>Events:</b></dt>
<dd>(none)</dd>
</dl>
</p><p>
Note: Only one of the styles HORIZONTAL and VERTICAL may be specified.
</p><p>
IMPORTANT: This class is <em>not</em> intended to be subclassed.
</p>

@see <a href="http://www.eclipse.org/swt/snippets/#coolbar">CoolBar snippets</a>
@see <a href="http://www.eclipse.org/swt/examples.php">SWT Example: ControlExample</a>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
@noextend This class is not intended to be subclassed by clients.
------------
Constructs a new instance of this class given its parent
and a style value describing its behavior and appearance.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.
</p>

@param parent a composite control which will be the parent of the new instance (cannot be null)
@param style the style of control to construct

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see SWT
@see SWT#FLAT
@see SWT#HORIZONTAL
@see SWT#VERTICAL
@see Widget#checkSubclass
@see Widget#getStyle
------------
Returns the item that is currently displayed at the given,
zero-relative index. Throws an exception if the index is
out of range.

@param index the visual index of the item to return
@return the item at the given visual index

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list minus 1 (inclusive)</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the number of items contained in the receiver.

@return the number of items

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns an array of zero-relative ints that map
the creation order of the receiver's items to the
order in which they are currently being displayed.
<p>
Specifically, the indices of the returned array represent
the current visual order of the items, and the contents
of the array represent the creation order of the items.
</p><p>
Note: This is not the actual structure used by the receiver
to maintain its list of items, so modifying the array will
not affect the receiver.
</p>

@return the current visual order of the receiver's items

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns an array of <code>CoolItem</code>s in the order
in which they are currently being displayed.
<p>
Note: This is not the actual structure used by the receiver
to maintain its list of items, so modifying the array will
not affect the receiver.
</p>

@return the receiver's items in their current visual order

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns an array of points whose x and y coordinates describe
the widths and heights (respectively) of the items in the receiver
in the order in which they are currently being displayed.

@return the receiver's item sizes in their current visual order

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns whether or not the receiver is 'locked'. When a coolbar
is locked, its items cannot be repositioned.

@return true if the coolbar is locked, false otherwise

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 2.0
------------
Returns an array of ints that describe the zero-relative
indices of any item(s) in the receiver that will begin on
a new row. The 0th visible item always begins the first row,
therefore it does not count as a wrap index.

@return an array containing the receiver's wrap indices, or an empty array if all items are in one row

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Searches the receiver's items in the order they are currently
being displayed, starting at the first item (index 0), until
an item is found that is equal to the argument, and returns
the index of that item. If no item is found, returns -1.

@param item the search item
@return the visual order index of the search item, or -1 if the item is not found

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the item is null</li>
<li>ERROR_INVALID_ARGUMENT - if the item is disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the receiver's item order, wrap indices, and item sizes
all at once. This method is typically used to restore the
displayed state of the receiver to a previously stored state.
<p>
The item order is the order in which the items in the receiver
should be displayed, given in terms of the zero-relative ordering
of when the items were added.
</p><p>
The wrap indices are the indices of all item(s) in the receiver
that will begin on a new row. The indices are given in the order
specified by the item order. The 0th item always begins the first
row, therefore it does not count as a wrap index. If wrap indices
is null or empty, the items will be placed on one line.
</p><p>
The sizes are specified in an array of points whose x and y
coordinates describe the new widths and heights (respectively)
of the receiver's items in the order specified by the item order.
</p>

@param itemOrder an array of indices that describe the new order to display the items in
@param wrapIndices an array of wrap indices, or null
@param sizes an array containing the new sizes for each of the receiver's items in visual order

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if item order or sizes is null</li>
<li>ERROR_INVALID_ARGUMENT - if item order or sizes is not the same length as the number of items</li>
</ul>
------------
Sets whether or not the receiver is 'locked'. When a coolbar
is locked, its items cannot be repositioned.

@param locked lock the coolbar if true, otherwise unlock the coolbar

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 2.0
------------
Sets the indices of all item(s) in the receiver that will
begin on a new row. The indices are given in the order in
which they are currently being displayed. The 0th item
always begins the first row, therefore it does not count
as a wrap index. If indices is null or empty, the items
will be placed on one line.

@param indices an array of wrap indices, or null

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

====== CoolItem.java ======
Copyright (c) 2000, 2012 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class are selectable user interface
objects that represent the dynamically positionable
areas of a <code>CoolBar</code>.
<dl>
<dt><b>Styles:</b></dt>
<dd>DROP_DOWN</dd>
<dt><b>Events:</b></dt>
<dd>Selection</dd>
</dl>
<p>
IMPORTANT: This class is <em>not</em> intended to be subclassed.
</p>

@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
@noextend This class is not intended to be subclassed by clients.
------------
Constructs a new instance of this class given its parent
(which must be a <code>CoolBar</code>) and a style value
describing its behavior and appearance. The item is added
to the end of the items maintained by its parent.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.
</p>

@param parent a composite control which will be the parent of the new instance (cannot be null)
@param style the style of control to construct

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see SWT#DROP_DOWN
@see Widget#checkSubclass
@see Widget#getStyle
------------
Constructs a new instance of this class given its parent
(which must be a <code>CoolBar</code>), a style value
describing its behavior and appearance, and the index
at which to place it in the items maintained by its parent.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.
</p>

@param parent a composite control which will be the parent of the new instance (cannot be null)
@param style the style of control to construct
@param index the zero-relative index at which to store the receiver in its parent

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
<li>ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the parent (inclusive)</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see SWT#DROP_DOWN
@see Widget#checkSubclass
@see Widget#getStyle
------------
Adds the listener to the collection of listeners that will
be notified when the control is selected by the user, by sending it one
of the messages defined in the <code>SelectionListener</code>
interface.
<p>
If <code>widgetSelected</code> is called when the mouse is over
the drop-down arrow (or 'chevron') portion of the cool item,
the event object detail field contains the value <code>SWT.ARROW</code>,
and the x and y fields in the event object represent the point at
the bottom left of the chevron, where the menu should be popped up.
<code>widgetDefaultSelected</code> is not called.
</p>

@param listener the listener which should be notified when the control is selected by the user

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see SelectionListener
@see #removeSelectionListener
@see SelectionEvent

@since 2.0
------------
Returns the preferred size of the receiver.
<p>
The <em>preferred size</em> of a <code>CoolItem</code> is the size that
it would best be displayed at. The width hint and height hint arguments
allow the caller to ask the instance questions such as "Given a particular
width, how high does it need to be to show all of the contents?"
To indicate that the caller does not wish to constrain a particular
dimension, the constant <code>SWT.DEFAULT</code> is passed for the hint.
</p>

@param wHint the width hint (can be <code>SWT.DEFAULT</code>)
@param hHint the height hint (can be <code>SWT.DEFAULT</code>)
@return the preferred size

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see Layout
@see #getBounds
@see #getSize
@see Control#getBorderWidth
@see Scrollable#computeTrim
@see Scrollable#getClientArea
------------
Returns a rectangle describing the receiver's size and location
relative to its parent.

@return the receiver's bounding rectangle

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the control that is associated with the receiver.

@return the control that is contained by the receiver

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the receiver's parent, which must be a <code>CoolBar</code>.

@return the receiver's parent

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the control that is associated with the receiver
to the argument.

@param control the new control that will be contained by the receiver

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the control has been disposed</li>
<li>ERROR_INVALID_PARENT - if the control is not in the same widget tree</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns a point describing the receiver's ideal size.
The x coordinate of the result is the ideal width of the receiver.
The y coordinate of the result is the ideal height of the receiver.

@return the receiver's ideal size

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the receiver's ideal size to the point specified by the arguments.

@param width the new ideal width for the receiver
@param height the new ideal height for the receiver

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the receiver's ideal size to the point specified by the argument.

@param size the new ideal size for the receiver

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the point is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns a point describing the receiver's size. The
x coordinate of the result is the width of the receiver.
The y coordinate of the result is the height of the
receiver.

@return the receiver's size

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the receiver's size to the point specified by the arguments.
<p>
Note: Attempting to set the width or height of the
receiver to a negative number will cause that
value to be set to zero instead.
</p>

@param width the new width for the receiver
@param height the new height for the receiver

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the receiver's size to the point specified by the argument.
<p>
Note: Attempting to set the width or height of the
receiver to a negative number will cause them to be
set to zero instead.
</p>

@param size the new size for the receiver

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the point is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the minimum size that the cool item can
be resized to using the cool item's gripper.

@return a point containing the minimum width and height of the cool item, in pixels

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 2.0
------------
Sets the minimum size that the cool item can be resized to
using the cool item's gripper, to the point specified by the arguments.

@param width the minimum width of the cool item, in pixels
@param height the minimum height of the cool item, in pixels

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 2.0
------------
Sets the minimum size that the cool item can be resized to
using the cool item's gripper, to the point specified by the argument.

@param size a point representing the minimum width and height of the cool item, in pixels

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the point is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 2.0
------------
Removes the listener from the collection of listeners that
will be notified when the control is selected by the user.

@param listener the listener which should no longer be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see SelectionListener
@see #addSelectionListener

@since 2.0

====== Cursor.java ======
Copyright (c) 2000, 2014 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class manage operating system resources that
specify the appearance of the on-screen pointer. To create a
cursor you specify the device and either a simple cursor style
describing one of the standard operating system provided cursors
or the image and mask data for the desired appearance.
<p>
Application code must explicitly invoke the <code>Cursor.dispose()</code>
method to release the operating system resources managed by each instance
when those instances are no longer required.
</p>
<dl>
<dt><b>Styles:</b></dt>
<dd>
CURSOR_ARROW, CURSOR_WAIT, CURSOR_CROSS, CURSOR_APPSTARTING, CURSOR_HELP,
CURSOR_SIZEALL, CURSOR_SIZENESW, CURSOR_SIZENS, CURSOR_SIZENWSE, CURSOR_SIZEWE,
CURSOR_SIZEN, CURSOR_SIZES, CURSOR_SIZEE, CURSOR_SIZEW, CURSOR_SIZENE, CURSOR_SIZESE,
CURSOR_SIZESW, CURSOR_SIZENW, CURSOR_UPARROW, CURSOR_IBEAM, CURSOR_NO, CURSOR_HAND
</dd>
</dl>
<p>
Note: Only one of the above styles may be specified.
</p>

@see <a href="http://www.eclipse.org/swt/snippets/#cursor">Cursor snippets</a>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
------------
the handle to the OS cursor resource
(Warning: This field is platform dependent)
<p>
<b>IMPORTANT:</b> This field is <em>not</em> part of the SWT
public API. It is marked public only so that it can be shared
within the packages provided by SWT. It is not available on all
platforms and should never be accessed from application code.
</p>
*
@noreference This field is not intended to be referenced by clients.

public long /*int*/ handle;

boolean isIcon;


data used to create a HAND cursor.

static final byte[] HAND_SOURCE = {
(byte)0xf9,(byte)0xff,(byte)0xff,(byte)0xff,
(byte)0xf0,(byte)0xff,(byte)0xff,(byte)0xff,
(byte)0xf0,(byte)0xff,(byte)0xff,(byte)0xff,
(byte)0xf0,(byte)0xff,(byte)0xff,(byte)0xff,
(byte)0xf0,(byte)0x3f,(byte)0xff,(byte)0xff,
(byte)0xf0,(byte)0x07,(byte)0xff,(byte)0xff,
(byte)0xf0,(byte)0x03,(byte)0xff,(byte)0xff,
(byte)0xf0,(byte)0x00,(byte)0xff,(byte)0xff,

(byte)0x10,(byte)0x00,(byte)0x7f,(byte)0xff,
(byte)0x00,(byte)0x00,(byte)0x7f,(byte)0xff,
(byte)0x80,(byte)0x00,(byte)0x7f,(byte)0xff,
(byte)0xc0,(byte)0x00,(byte)0x7f,(byte)0xff,
(byte)0xe0,(byte)0x00,(byte)0x7f,(byte)0xff,
(byte)0xf0,(byte)0x00,(byte)0x7f,(byte)0xff,
(byte)0xf8,(byte)0x00,(byte)0xff,(byte)0xff,
(byte)0xfc,(byte)0x01,(byte)0xff,(byte)0xff,

(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,
(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,
(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,
(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,
(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,
(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,
(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,
(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,

(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,
(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,
(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,
(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,
(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,
(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,
(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,
(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff
};
static final byte[] HAND_MASK = {
(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,
(byte)0x06,(byte)0x00,(byte)0x00,(byte)0x00,
(byte)0x06,(byte)0x00,(byte)0x00,(byte)0x00,
(byte)0x06,(byte)0x00,(byte)0x00,(byte)0x00,
(byte)0x06,(byte)0x00,(byte)0x00,(byte)0x00,
(byte)0x06,(byte)0xc0,(byte)0x00,(byte)0x00,
(byte)0x06,(byte)0xd8,(byte)0x00,(byte)0x00,
(byte)0x06,(byte)0xd8,(byte)0x00,(byte)0x00,

(byte)0x07,(byte)0xdb,(byte)0x00,(byte)0x00,
(byte)0x67,(byte)0xfb,(byte)0x00,(byte)0x00,
(byte)0x3f,(byte)0xff,(byte)0x00,(byte)0x00,
(byte)0x1f,(byte)0xff,(byte)0x00,(byte)0x00,
(byte)0x0f,(byte)0xff,(byte)0x00,(byte)0x00,
(byte)0x07,(byte)0xff,(byte)0x00,(byte)0x00,
(byte)0x03,(byte)0xfe,(byte)0x00,(byte)0x00,
(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,

(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,
(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,
(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,
(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,
(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,
(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,
(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,
(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,

(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,
(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,
(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,
(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,
(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,
(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,
(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,
(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00
};


Prevents uninitialized instances from being created outside the package.
------------
Constructs a new cursor given a device and a style
constant describing the desired cursor appearance.
<p>
You must dispose the cursor when it is no longer required.
</p>
NOTE:
It is recommended to use {@link org.eclipse.swt.widgets.Display#getSystemCursor(int)}
instead of using this constructor. This way you can avoid the
overhead of disposing the Cursor resource.

@param device the device on which to allocate the cursor
@param style the style of cursor to allocate

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if device is null and there is no current device</li>
<li>ERROR_INVALID_ARGUMENT - when an unknown style is specified</li>
</ul>
@exception SWTError <ul>
<li>ERROR_NO_HANDLES - if a handle could not be obtained for cursor creation</li>
</ul>

@see SWT#CURSOR_ARROW
@see SWT#CURSOR_WAIT
@see SWT#CURSOR_CROSS
@see SWT#CURSOR_APPSTARTING
@see SWT#CURSOR_HELP
@see SWT#CURSOR_SIZEALL
@see SWT#CURSOR_SIZENESW
@see SWT#CURSOR_SIZENS
@see SWT#CURSOR_SIZENWSE
@see SWT#CURSOR_SIZEWE
@see SWT#CURSOR_SIZEN
@see SWT#CURSOR_SIZES
@see SWT#CURSOR_SIZEE
@see SWT#CURSOR_SIZEW
@see SWT#CURSOR_SIZENE
@see SWT#CURSOR_SIZESE
@see SWT#CURSOR_SIZESW
@see SWT#CURSOR_SIZENW
@see SWT#CURSOR_UPARROW
@see SWT#CURSOR_IBEAM
@see SWT#CURSOR_NO
@see SWT#CURSOR_HAND
@see #dispose()
------------
Constructs a new cursor given a device, image and mask
data describing the desired cursor appearance, and the x
and y coordinates of the <em>hotspot</em> (that is, the point
within the area covered by the cursor which is considered
to be where the on-screen pointer is "pointing").
<p>
The mask data is allowed to be null, but in this case the source
must be an ImageData representing an icon that specifies both
color data and mask data.
<p>
You must dispose the cursor when it is no longer required.
</p>

@param device the device on which to allocate the cursor
@param source the color data for the cursor
@param mask the mask data for the cursor (or null)
@param hotspotX the x coordinate of the cursor's hotspot
@param hotspotY the y coordinate of the cursor's hotspot

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if device is null and there is no current device</li>
<li>ERROR_NULL_ARGUMENT - if the source is null</li>
<li>ERROR_NULL_ARGUMENT - if the mask is null and the source does not have a mask</li>
<li>ERROR_INVALID_ARGUMENT - if the source and the mask are not the same
size, or if the hotspot is outside the bounds of the image</li>
</ul>
@exception SWTError <ul>
<li>ERROR_NO_HANDLES - if a handle could not be obtained for cursor creation</li>
</ul>

@see #dispose()
------------
Constructs a new cursor given a device, image data describing
the desired cursor appearance, and the x and y coordinates of
the <em>hotspot</em> (that is, the point within the area
covered by the cursor which is considered to be where the
on-screen pointer is "pointing").
<p>
You must dispose the cursor when it is no longer required.
</p>

@param device the device on which to allocate the cursor
@param source the image data for the cursor
@param hotspotX the x coordinate of the cursor's hotspot
@param hotspotY the y coordinate of the cursor's hotspot

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if device is null and there is no current device</li>
<li>ERROR_NULL_ARGUMENT - if the image is null</li>
<li>ERROR_INVALID_ARGUMENT - if the hotspot is outside the bounds of the
image</li>
</ul>
@exception SWTError <ul>
<li>ERROR_NO_HANDLES - if a handle could not be obtained for cursor creation</li>
</ul>

@see #dispose()

@since 3.0
------------
Compares the argument to the receiver, and returns true
if they represent the <em>same</em> object using a class
specific comparison.

@param object the object to compare with this object
@return <code>true</code> if the object is the same as this object and <code>false</code> otherwise

@see #hashCode
------------
Returns an integer hash code for the receiver. Any two
objects that return <code>true</code> when passed to
<code>equals</code> must return the same value for this
method.

@return the receiver's hash

@see #equals
------------
Returns <code>true</code> if the cursor has been disposed,
and <code>false</code> otherwise.
<p>
This method gets the dispose state for the cursor.
When a cursor has been disposed, it is an error to
invoke any other method (except {@link #dispose()}) using the cursor.

@return <code>true</code> when the cursor is disposed and <code>false</code> otherwise
------------
Returns a string containing a concise, human-readable
description of the receiver.

@return a string representation of the receiver
------------
Invokes platform specific functionality to allocate a new cursor.
<p>
<b>IMPORTANT:</b> This method is <em>not</em> part of the public
API for <code>Cursor</code>. It is marked public only so that it
can be shared within the packages provided by SWT. It is not
available on all platforms, and should never be called from
application code.
</p>

@param device the device on which to allocate the color
@param handle the handle for the cursor
@return a new cursor object containing the specified device and handle

@noreference This method is not intended to be referenced by clients.

====== DateTime.java ======
Copyright (c) 2000, 2012 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class are selectable user interface
objects that allow the user to enter and modify date
or time values.
<p>
Note that although this class is a subclass of <code>Composite</code>,
it does not make sense to add children to it, or set a layout on it.
</p>
<dl>
<dt><b>Styles:</b></dt>
<dd>DATE, TIME, CALENDAR, SHORT, MEDIUM, LONG, DROP_DOWN</dd>
<dt><b>Events:</b></dt>
<dd>DefaultSelection, Selection</dd>
</dl>
<p>
Note: Only one of the styles DATE, TIME, or CALENDAR may be specified,
and only one of the styles SHORT, MEDIUM, or LONG may be specified.
The DROP_DOWN style is a <em>HINT</em>, and it is only valid with the DATE style.
</p><p>
IMPORTANT: This class is <em>not</em> intended to be subclassed.
</p>

@see <a href="http://www.eclipse.org/swt/snippets/#datetime">DateTime snippets</a>
@see <a href="http://www.eclipse.org/swt/examples.php">SWT Example: ControlExample</a>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>

@since 3.3
@noextend This class is not intended to be subclassed by clients.
------------
Constructs a new instance of this class given its parent
and a style value describing its behavior and appearance.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.
</p>

@param parent a composite control which will be the parent of the new instance (cannot be null)
@param style the style of control to construct

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see SWT#DATE
@see SWT#TIME
@see SWT#CALENDAR
@see SWT#SHORT
@see SWT#MEDIUM
@see SWT#LONG
@see SWT#DROP_DOWN
@see Widget#checkSubclass
@see Widget#getStyle
------------
Adds the listener to the collection of listeners who will
be notified when the control is selected by the user, by sending
it one of the messages defined in the <code>SelectionListener</code>
interface.
<p>
<code>widgetSelected</code> is called when the user changes the control's value.
<code>widgetDefaultSelected</code> is typically called when ENTER is pressed.
</p>

@param listener the listener which should be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see SelectionListener
@see #removeSelectionListener
@see SelectionEvent
------------
Returns the receiver's date, or day of the month.
<p>
The first day of the month is 1, and the last day depends on the month and year.
</p>

@return a positive integer beginning with 1

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the receiver's hours.
<p>
Hours is an integer between 0 and 23.
</p>

@return an integer between 0 and 23

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the receiver's minutes.
<p>
Minutes is an integer between 0 and 59.
</p>

@return an integer between 0 and 59

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the receiver's month.
<p>
The first month of the year is 0, and the last month is 11.
</p>

@return an integer between 0 and 11

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the receiver's seconds.
<p>
Seconds is an integer between 0 and 59.
</p>

@return an integer between 0 and 59

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the receiver's year.
<p>
The first year is 1752 and the last year is 9999.
</p>

@return an integer between 1752 and 9999

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Removes the listener from the collection of listeners who will
be notified when the control is selected by the user.

@param listener the listener which should no longer be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see SelectionListener
@see #addSelectionListener
------------
Sets the receiver's year, month, and day in a single operation.
<p>
This is the recommended way to set the date, because setting the year,
month, and day separately may result in invalid intermediate dates.
</p>

@param year an integer between 1752 and 9999
@param month an integer between 0 and 11
@param day a positive integer beginning with 1

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.4
------------
Sets the receiver's date, or day of the month, to the specified day.
<p>
The first day of the month is 1, and the last day depends on the month and year.
If the specified day is not valid for the receiver's month and year, then it is ignored.
</p>

@param day a positive integer beginning with 1

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #setDate
------------
Sets the receiver's hours.
<p>
Hours is an integer between 0 and 23.
</p>

@param hours an integer between 0 and 23

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the receiver's minutes.
<p>
Minutes is an integer between 0 and 59.
</p>

@param minutes an integer between 0 and 59

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the receiver's month.
<p>
The first month of the year is 0, and the last month is 11.
If the specified month is not valid for the receiver's day and year, then it is ignored.
</p>

@param month an integer between 0 and 11

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #setDate
------------
Sets the receiver's seconds.
<p>
Seconds is an integer between 0 and 59.
</p>

@param seconds an integer between 0 and 59

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the receiver's hours, minutes, and seconds in a single operation.

@param hours an integer between 0 and 23
@param minutes an integer between 0 and 59
@param seconds an integer between 0 and 59

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.4
------------
Sets the receiver's year.
<p>
The first year is 1752 and the last year is 9999.
If the specified year is not valid for the receiver's day and month, then it is ignored.
</p>

@param year an integer between 1752 and 9999

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #setDate

====== Decorations.java ======
Copyright (c) 2000, 2015 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class provide the appearance and
behavior of <code>Shells</code>, but are not top
level shells or dialogs. Class <code>Shell</code>
shares a significant amount of code with this class,
and is a subclass.
<p>
IMPORTANT: This class was intended to be abstract and
should <em>never</em> be referenced or instantiated.
Instead, the class <code>Shell</code> should be used.
</p>
<p>
Instances are always displayed in one of the maximized,
minimized or normal states:
<ul>
<li>
When an instance is marked as <em>maximized</em>, the
window manager will typically resize it to fill the
entire visible area of the display, and the instance
is usually put in a state where it can not be resized
(even if it has style <code>RESIZE</code>) until it is
no longer maximized.
</li><li>
When an instance is in the <em>normal</em> state (neither
maximized or minimized), its appearance is controlled by
the style constants which were specified when it was created
and the restrictions of the window manager (see below).
</li><li>
When an instance has been marked as <em>minimized</em>,
its contents (client area) will usually not be visible,
and depending on the window manager, it may be
"iconified" (that is, replaced on the desktop by a small
simplified representation of itself), relocated to a
distinguished area of the screen, or hidden. Combinations
of these changes are also possible.
</li>
</ul>
</p>
Note: The styles supported by this class must be treated
as <em>HINT</em>s, since the window manager for the
desktop on which the instance is visible has ultimate
control over the appearance and behavior of decorations.
For example, some window managers only support resizable
windows and will always assume the RESIZE style, even if
it is not set.
<dl>
<dt><b>Styles:</b></dt>
<dd>BORDER, CLOSE, MIN, MAX, NO_TRIM, RESIZE, TITLE, ON_TOP, TOOL</dd>
<dt><b>Events:</b></dt>
<dd>(none)</dd>
</dl>
Class <code>SWT</code> provides two "convenience constants"
for the most commonly required style combinations:
<dl>
<dt><code>SHELL_TRIM</code></dt>
<dd>
the result of combining the constants which are required
to produce a typical application top level shell: (that
is, <code>CLOSE | TITLE | MIN | MAX | RESIZE</code>)
</dd>
<dt><code>DIALOG_TRIM</code></dt>
<dd>
the result of combining the constants which are required
to produce a typical application dialog shell: (that
is, <code>TITLE | CLOSE | BORDER</code>)
</dd>
</dl>
<p>
IMPORTANT: This class is intended to be subclassed <em>only</em>
within the SWT implementation.
</p>

@see #getMinimized
@see #getMaximized
@see Shell
@see SWT
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
@noextend This class is not intended to be subclassed by clients.
------------
Prevents uninitialized instances from being created outside the package.
------------
Constructs a new instance of this class given its parent
and a style value describing its behavior and appearance.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.
</p>

@param parent a composite control which will be the parent of the new instance (cannot be null)
@param style the style of control to construct

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see SWT#BORDER
@see SWT#CLOSE
@see SWT#MIN
@see SWT#MAX
@see SWT#RESIZE
@see SWT#TITLE
@see SWT#NO_TRIM
@see SWT#NO_MOVE
@see SWT#SHELL_TRIM
@see SWT#DIALOG_TRIM
@see SWT#ON_TOP
@see SWT#TOOL
@see Widget#checkSubclass
@see Widget#getStyle
------------
Returns the receiver's default button if one had
previously been set, otherwise returns null.

@return the default button or null

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #setDefaultButton(Button)
------------
Returns the receiver's image if it had previously been
set using <code>setImage()</code>. The image is typically
displayed by the window manager when the instance is
marked as iconified, and may also be displayed somewhere
in the trim when the instance is in normal or maximized
states.
<p>
Note: This method will return null if called before
<code>setImage()</code> is called. It does not provide
access to a window manager provided, "default" image
even if one exists.
</p>

@return the image

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the receiver's images if they had previously been
set using <code>setImages()</code>. Images are typically
displayed by the window manager when the instance is
marked as iconified, and may also be displayed somewhere
in the trim when the instance is in normal or maximized
states. Depending where the icon is displayed, the platform
chooses the icon with the "best" attributes.  It is expected
that the array will contain the same icon rendered at different
sizes, with different depth and transparency attributes.

<p>
Note: This method will return an empty array if called before
<code>setImages()</code> is called. It does not provide
access to a window manager provided, "default" image
even if one exists.
</p>

@return the images

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.0
------------
Returns <code>true</code> if the receiver is currently
maximized, and false otherwise.
<p>

@return the maximized state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #setMaximized
------------
Returns the receiver's menu bar if one had previously
been set, otherwise returns null.

@return the menu bar or null

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns <code>true</code> if the receiver is currently
minimized, and false otherwise.
<p>

@return the minimized state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #setMinimized
------------
Returns the receiver's text, which is the string that the
window manager will typically display as the receiver's
<em>title</em>. If the text has not previously been set,
returns an empty string.

@return the text

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
If the argument is not null, sets the receiver's default
button to the argument, and if the argument is null, sets
the receiver's default button to the first button which
was set as the receiver's default button (called the
<em>saved default button</em>). If no default button had
previously been set, or the saved default button was
disposed, the receiver's default button will be set to
null.
<p>
The default button is the button that is selected when
the receiver is active and the user presses ENTER.
</p>

@param button the new default button

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the button has been disposed</li>
<li>ERROR_INVALID_PARENT - if the control is not in the same widget tree</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the receiver's image to the argument, which may
be null. The image is typically displayed by the window
manager when the instance is marked as iconified, and
may also be displayed somewhere in the trim when the
instance is in normal or maximized states.

@param image the new image (or null)

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the image has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the receiver's images to the argument, which may
be an empty array. Images are typically displayed by the
window manager when the instance is marked as iconified,
and may also be displayed somewhere in the trim when the
instance is in normal or maximized states. Depending where
the icon is displayed, the platform chooses the icon with
the "best" attributes. It is expected that the array will
contain the same icon rendered at different sizes, with
different depth and transparency attributes.

@param images the new image array

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the array of images is null</li>
<li>ERROR_INVALID_ARGUMENT - if one of the images is null or has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.0
------------
Sets the maximized state of the receiver.
If the argument is <code>true</code> causes the receiver
to switch to the maximized state, and if the argument is
<code>false</code> and the receiver was previously maximized,
causes the receiver to switch back to either the minimized
or normal states.
<p>
Note: The result of intermixing calls to <code>setMaximized(true)</code>
and <code>setMinimized(true)</code> will vary by platform. Typically,
the behavior will match the platform user's expectations, but not
always. This should be avoided if possible.
</p>

@param maximized the new maximized state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #setMinimized
------------
Sets the receiver's menu bar to the argument, which
may be null.

@param menu the new menu bar

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the menu has been disposed</li>
<li>ERROR_INVALID_PARENT - if the menu is not in the same widget tree</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the minimized stated of the receiver.
If the argument is <code>true</code> causes the receiver
to switch to the minimized state, and if the argument is
<code>false</code> and the receiver was previously minimized,
causes the receiver to switch back to either the maximized
or normal states.
<p>
Note: The result of intermixing calls to <code>setMaximized(true)</code>
and <code>setMinimized(true)</code> will vary by platform. Typically,
the behavior will match the platform user's expectations, but not
always. This should be avoided if possible.
</p>

@param minimized the new maximized state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #setMaximized
------------
Sets the receiver's text, which is the string that the
window manager will typically display as the receiver's
<em>title</em>, to the argument, which must not be null.
<p>
Note: If control characters like '\n', '\t' etc. are used
in the string, then the behavior is platform dependent.
</p>

@param string the new text

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the text is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

====== DefaultExceptionHandler.java ======
Copyright (c) 2016 Google Inc and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
Stefan Xenos (Google) - initial API and implementation

====== Device.java ======
Copyright (c) 2000, 2016 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
This class is the abstract superclass of all device objects,
such as the Display device and the Printer device. Devices
can have a graphics context (GC) created for them, and they
can be drawn on by sending messages to the associated GC.

@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
------------
Palette
(Warning: This field is platform dependent)
<p>
<b>IMPORTANT:</b> This field is <em>not</em> part of the SWT
public API. It is marked public only so that it can be shared
within the packages provided by SWT. It is not available on all
platforms and should never be accessed from application code.
</p>
*
@noreference This field is not intended to be referenced by clients.

public long /*int*/ hPalette = 0;
int [] colorRefCount;

/* System Font */
Font systemFont;

/* Font Enumeration */
int nFonts = 256;
LOGFONT [] logFonts;
TEXTMETRIC metrics;
int[] pixels;

/* Scripts */
long /*int*/ [] scripts;

/* Advanced Graphics */
long /*int*/ [] gdipToken;
long /*int*/ fontCollection;
String[] loadedFonts;

boolean disposed;

/* Auto-Scaling*/
boolean enableAutoScaling = true;

/*
TEMPORARY CODE. When a graphics object is
created and the device parameter is null,
the current Display is used. This presents
a problem because SWT graphics does not
reference classes in SWT widgets. The correct
fix is to remove this feature. Unfortunately,
too many application programs rely on this
feature.

protected static Device CurrentDevice;
protected static Runnable DeviceFinder;
static {
try {
Class.forName ("org.eclipse.swt.widgets.Display"); //$NON-NLS-1$
} catch (ClassNotFoundException e) {}
}

/*
TEMPORARY CODE.
/
static synchronized Device getDevice () {
if (DeviceFinder != null) DeviceFinder.run();
Device device = CurrentDevice;
CurrentDevice = null;
return device;
}


Constructs a new instance of this class.
<p>
You must dispose the device when it is no longer required.
</p>

@see #create
@see #init

@since 3.1
------------
Constructs a new instance of this class.
<p>
You must dispose the device when it is no longer required.
</p>

@param data the DeviceData which describes the receiver

@see #create
@see #init
@see DeviceData
------------
Throws an <code>SWTException</code> if the receiver can not
be accessed by the caller. This may include both checks on
the state of the receiver and more generally on the entire
execution context. This method <em>should</em> be called by
device implementors to enforce the standard SWT invariants.
<p>
Currently, it is an error to invoke any method (other than
<code>isDisposed()</code> and <code>dispose()</code>) on a
device that has had its <code>dispose()</code> method called.
</p><p>
In future releases of SWT, there may be more or fewer error
checks and exceptions may be thrown for different reasons.
<p>

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Creates the device in the operating system.  If the device
does not have a handle, this method may do nothing depending
on the device.
<p>
This method is called before <code>init</code>.
</p><p>
Subclasses are supposed to reimplement this method and not
call the <code>super</code> implementation.
</p>

@param data the DeviceData which describes the receiver

@see #init
------------
Destroys the device in the operating system and releases
the device's handle.  If the device does not have a handle,
this method may do nothing depending on the device.
<p>
This method is called after <code>release</code>.
</p><p>
Subclasses are supposed to reimplement this method and not
call the <code>super</code> implementation.
</p>

@see #dispose
@see #release
------------
Disposes of the operating system resources associated with
the receiver. After this method has been invoked, the receiver
will answer <code>true</code> when sent the message
<code>isDisposed()</code>.

@see #release
@see #destroy
@see #checkDevice
------------
Returns a rectangle describing the receiver's size and location.

@return the bounding rectangle

@exception SWTException <ul>
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Returns a <code>DeviceData</code> based on the receiver.
Modifications made to this <code>DeviceData</code> will not
affect the receiver.

@return a <code>DeviceData</code> containing the device's data and attributes

@exception SWTException <ul>
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
</ul>

@see DeviceData
------------
Returns a rectangle which describes the area of the
receiver which is capable of displaying data.

@return the client area

@exception SWTException <ul>
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
</ul>

@see #getBounds
------------
Returns the bit depth of the screen, which is the number of
bits it takes to represent the number of unique colors that
the screen is currently capable of displaying. This number
will typically be one of 1, 8, 15, 16, 24 or 32.

@return the depth of the screen

@exception SWTException <ul>
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Returns a point whose x coordinate is the horizontal
dots per inch of the display, and whose y coordinate
is the vertical dots per inch of the display.

@return the horizontal and vertical DPI

@exception SWTException <ul>
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Returns DPI in x direction. In the modern monitors DPI for
X and Y directions is same.

@return the horizontal DPI
------------
Returns <code>FontData</code> objects which describe
the fonts that match the given arguments. If the
<code>faceName</code> is null, all fonts will be returned.

@param faceName the name of the font to look for, or null
@param scalable if true only scalable fonts are returned, otherwise only non-scalable fonts are returned.
@return the matching font data

@exception SWTException <ul>
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
For bitmapped fonts, EnumFontFamilies only enumerates once for each font, regardless
of how many styles are available. If the user wants bitmapped fonts, enumerate on
each face name now.

offset = nFonts;
for (int i=0; i<offset; i++) {
LOGFONT lf = logFonts [i];

Bug in Windows 98. When EnumFontFamiliesEx is called with a specified face name, it
should enumerate for each available style of that font. Instead, it only enumerates
once. The fix is to call EnumFontFamilies, which works as expected.

if (OS.IsUnicode) {
OS.EnumFontFamiliesW (hDC, ((LOGFONTW)lf).lfFaceName, lpEnumFontFamProc, scalable ? 1 : 0);
} else {
OS.EnumFontFamiliesA (hDC, ((LOGFONTA)lf).lfFaceName, lpEnumFontFamProc, scalable ? 1 : 0);
}
}
} else {
/* Use the character encoding for the default locale */
TCHAR lpFaceName = new TCHAR (0, faceName, true);

Bug in Windows 98. When EnumFontFamiliesEx is called with a specified face name, it
should enumerate for each available style of that font. Instead, it only enumerates
once. The fix is to call EnumFontFamilies, which works as expected.

OS.EnumFontFamilies (hDC, lpFaceName, lpEnumFontFamProc, scalable ? 1 : 0);
}
int logPixelsY = OS.GetDeviceCaps(hDC, OS.LOGPIXELSY);
internal_dispose_GC (hDC, null);

/* Create the fontData from the logfonts */
int count = 0;
FontData [] result = new FontData [nFonts - offset];
for (int i=offset; i<nFonts; i++) {
FontData fd = FontData.win32_new (logFonts [i], pixels [i] * 72f / logPixelsY);
int j;
for (j = 0; j < count; j++) {
if (fd.equals (result [j])) break;
}
if (j == count) result [count++] = fd;
}
if (count != result.length) {
FontData [] newResult = new FontData [count];
System.arraycopy (result, 0, newResult, 0, count);
result = newResult;
}

/* Clean up */
callback.dispose ();
logFonts = null;
pixels = null;
metrics = null;
return result;
}

String getLastError () {
int error = OS.GetLastError();
if (error == 0) return ""; //$NON-NLS-1$
return " [GetLastError=0x" + Integer.toHexString(error) + "]"; //$NON-NLS-1$ //$NON-NLS-2$
}

String getLastErrorText () {
int error = OS.GetLastError();
if (error == 0) return ""; //$NON-NLS-1$
long /*int*/ [] buffer = new long /*int*/ [1];
int dwFlags = OS.FORMAT_MESSAGE_ALLOCATE_BUFFER | OS.FORMAT_MESSAGE_FROM_SYSTEM | OS.FORMAT_MESSAGE_IGNORE_INSERTS;
int length = OS.FormatMessage(dwFlags, 0, error, OS.LANG_USER_DEFAULT, buffer, 0, 0);
if (length == 0) return " [GetLastError=0x" + Integer.toHexString(error) + "]"; //$NON-NLS-1$ //$NON-NLS-2$
TCHAR buffer1 = new TCHAR(0, length);
OS.MoveMemory(buffer1, buffer[0], length * TCHAR.sizeof);
if (buffer[0] != 0) OS.LocalFree(buffer[0]);
return buffer1.toString(0, length);
}


Returns the matching standard color for the given
constant, which should be one of the color constants
specified in class <code>SWT</code>. Any value other
than one of the SWT color constants which is passed
in will result in the color black. This color should
not be freed because it was allocated by the system,
not the application.

@param id the color constant
@return the matching color

@exception SWTException <ul>
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
</ul>

@see SWT
------------
Returns a reasonable font for applications to use.
On some platforms, this will match the "default font"
or "system font" if such can be found.  This font
should not be freed because it was allocated by the
system, not the application.
<p>
Typically, applications which want the default look
should simply not set the font on the widgets they
create. Widgets are always created with the correct
default font for the class of user-interface component
they represent.
</p>

@return a font

@exception SWTException <ul>
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Returns <code>true</code> if the underlying window system prints out
warning messages on the console, and <code>setWarnings</code>
had previously been called with <code>true</code>.

@return <code>true</code>if warnings are being handled, and <code>false</code> otherwise

@exception SWTException <ul>
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Initializes any internal resources needed by the
device.
<p>
This method is called after <code>create</code>.
</p><p>
If subclasses reimplement this method, they must
call the <code>super</code> implementation.
</p>

@see #create
------------
Invokes platform specific functionality to allocate a new GC handle.
<p>
<b>IMPORTANT:</b> This method is <em>not</em> part of the public
API for <code>Device</code>. It is marked public only so that it
can be shared within the packages provided by SWT. It is not
available on all platforms, and should never be called from
application code.
</p>

@param data the platform specific GC data
@return the platform specific GC handle

@noreference This method is not intended to be referenced by clients.
------------
Invokes platform specific functionality to dispose a GC handle.
<p>
<b>IMPORTANT:</b> This method is <em>not</em> part of the public
API for <code>Device</code>. It is marked public only so that it
can be shared within the packages provided by SWT. It is not
available on all platforms, and should never be called from
application code.
</p>

@param hDC the platform specific GC handle
@param data the platform specific GC data

@noreference This method is not intended to be referenced by clients.
------------
Returns <code>true</code> if the device has been disposed,
and <code>false</code> otherwise.
<p>
This method gets the dispose state for the device.
When a device has been disposed, it is an error to
invoke any other method using the device.

@return <code>true</code> when the device is disposed and <code>false</code> otherwise
------------
Loads the font specified by a file.  The font will be
present in the list of fonts available to the application.

@param path the font file path
@return whether the font was successfully loaded

@exception SWTException <ul>
<li>ERROR_NULL_ARGUMENT - if path is null</li>
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
</ul>

@see Font

@since 3.3
------------
Releases any internal resources back to the operating
system and clears all fields except the device handle.
<p>
When a device is destroyed, resources that were acquired
on behalf of the programmer need to be returned to the
operating system.  For example, if the device allocated a
font to be used as the system font, this font would be
freed in <code>release</code>.  Also,to assist the garbage
collector and minimize the amount of memory that is not
reclaimed when the programmer keeps a reference to a
disposed device, all fields except the handle are zero'd.
The handle is needed by <code>destroy</code>.
</p>
This method is called before <code>destroy</code>.
</p><p>
If subclasses reimplement this method, they must
call the <code>super</code> implementation.
</p>

@see #dispose
@see #destroy
------------
If the underlying window system supports printing warning messages
to the console, setting warnings to <code>false</code> prevents these
messages from being printed. If the argument is <code>true</code> then
message printing is not blocked.

@param warnings <code>true</code>if warnings should be printed, and <code>false</code> otherwise

@exception SWTException <ul>
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Gets the scaling factor from the device and calculates the zoom level.
@return zoom in percentage

@noreference This method is not intended to be referenced by clients.
@nooverride This method is not intended to be re-implemented or extended by clients.
@since 3.105

====== DeviceData.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation

====== Dialog.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
This class is the abstract superclass of the classes
that represent the built in platform dialogs.
A <code>Dialog</code> typically contains other widgets
that are not accessible. A <code>Dialog</code> is not
a <code>Widget</code>.
<p>
This class can also be used as the abstract superclass
for user-designed dialogs. Such dialogs usually consist
of a Shell with child widgets. The basic template for a
user-defined dialog typically looks something like this:
<pre><code>
public class MyDialog extends Dialog {
Object result;

public MyDialog (Shell parent, int style) {
super (parent, style);
}
public MyDialog (Shell parent) {
this (parent, 0); // your default style bits go here (not the Shell's style bits)
}
public Object open () {
Shell parent = getParent();
Shell shell = new Shell(parent, SWT.DIALOG_TRIM | SWT.APPLICATION_MODAL);
shell.setText(getText());
// Your code goes here (widget creation, set result, etc).
shell.open();
Display display = parent.getDisplay();
while (!shell.isDisposed()) {
if (!display.readAndDispatch()) display.sleep();
}
return result;
}
}
</pre></code>
<p>
Note: The <em>modality</em> styles supported by this class
are treated as <em>HINT</em>s, because not all are supported
by every subclass on every platform. If a modality style is
not supported, it is "upgraded" to a more restrictive modality
style that is supported.  For example, if <code>PRIMARY_MODAL</code>
is not supported by a particular dialog, it would be upgraded to
<code>APPLICATION_MODAL</code>. In addition, as is the case
for shells, the window manager for the desktop on which the
instance is visible has ultimate control over the appearance
and behavior of the instance, including its modality.
<dl>
<dt><b>Styles:</b></dt>
<dd>APPLICATION_MODAL, PRIMARY_MODAL, SYSTEM_MODAL, SHEET</dd>
<dt><b>Events:</b></dt>
<dd>(none)</dd>
</dl>
<p>
Note: Only one of the styles APPLICATION_MODAL, PRIMARY_MODAL,
and SYSTEM_MODAL may be specified.
</p>

@see Shell
@see <a href="http://www.eclipse.org/swt/examples.php">SWT Example: ControlExample</a>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
------------
Constructs a new instance of this class given only its
parent.

@param parent a shell which will be the parent of the new instance

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
</ul>
------------
Constructs a new instance of this class given its parent
and a style value describing its behavior and appearance.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.

@param parent a shell which will be the parent of the new instance
@param style the style of dialog to construct

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
</ul>

@see SWT#PRIMARY_MODAL
@see SWT#APPLICATION_MODAL
@see SWT#SYSTEM_MODAL
------------
Checks that this class can be subclassed.
<p>
IMPORTANT: See the comment in <code>Widget.checkSubclass()</code>.
</p>

@exception SWTException <ul>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see Widget#checkSubclass
------------
Throws an exception if the specified widget can not be
used as a parent for the receiver.

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
<li>ERROR_INVALID_ARGUMENT - if the parent is disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
</ul>
------------
Does whatever dialog specific cleanup is required, and then
uses the code in <code>SWTError.error</code> to handle the error.

@param code the descriptive error code

@see SWT#error(int)
------------
Returns the receiver's parent, which must be a <code>Shell</code>
or null.

@return the receiver's parent

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the receiver's style information.
<p>
Note that, the value which is returned by this method <em>may
not match</em> the value which was provided to the constructor
when the receiver was created.
</p>

@return the style bits

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the receiver's text, which is the string that the
window manager will typically display as the receiver's
<em>title</em>. If the text has not previously been set,
returns an empty string.

@return the text

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the receiver's text, which is the string that the
window manager will typically display as the receiver's
<em>title</em>, to the argument, which must not be null.

@param string the new text

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the text is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

====== DirectoryDialog.java ======
Copyright (c) 2000, 2012 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class allow the user to navigate
the file system and select a directory.
<dl>
<dt><b>Styles:</b></dt>
<dd>(none)</dd>
<dt><b>Events:</b></dt>
<dd>(none)</dd>
</dl>
<p>
IMPORTANT: This class is <em>not</em> intended to be subclassed.
</p>

@see <a href="http://www.eclipse.org/swt/snippets/#directorydialog">DirectoryDialog snippets</a>
@see <a href="http://www.eclipse.org/swt/examples.php">SWT Example: ControlExample, Dialog tab</a>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
@noextend This class is not intended to be subclassed by clients.
------------
Constructs a new instance of this class given only its parent.

@param parent a shell which will be the parent of the new instance

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>
------------
Constructs a new instance of this class given its parent
and a style value describing its behavior and appearance.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.
</p>

@param parent a shell which will be the parent of the new instance
@param style the style of dialog to construct

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>
------------
Returns the path which the dialog will use to filter
the directories it shows.

@return the filter path

@see #setFilterPath
------------
Returns the dialog's message, which is a description of
the purpose for which it was opened. This message will be
visible on the dialog while it is open.

@return the message
------------
Makes the dialog visible and brings it to the front
of the display.

@return a string describing the absolute path of the selected directory,
or null if the dialog was cancelled or an error occurred

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the dialog has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the dialog</li>
</ul>
------------
Sets the path that the dialog will use to filter
the directories it shows to the argument, which may
be null. If the string is null, then the operating
system's default filter path will be used.
<p>
Note that the path string is platform dependent.
For convenience, either '/' or '\' can be used
as a path separator.
</p>

@param string the filter path
------------
Sets the dialog's message, which is a description of
the purpose for which it was opened. This message will be
visible on the dialog while it is open.

@param string the message

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the string is null</li>
</ul>

====== Display.java ======
Copyright (c) 2000, 2016 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class are responsible for managing the
connection between SWT and the underlying operating
system. Their most important function is to implement
the SWT event loop in terms of the platform event model.
They also provide various methods for accessing information
about the operating system, and have overall control over
the operating system resources which SWT allocates.
<p>
Applications which are built with SWT will <em>almost always</em>
require only a single display. In particular, some platforms
which SWT supports will not allow more than one <em>active</em>
display. In other words, some platforms do not support
creating a new display if one already exists that has not been
sent the <code>dispose()</code> message.
<p>
In SWT, the thread which creates a <code>Display</code>
instance is distinguished as the <em>user-interface thread</em>
for that display.
</p>
The user-interface thread for a particular display has the
following special attributes:
<ul>
<li>
The event loop for that display must be run from the thread.
</li>
<li>
Some SWT API methods (notably, most of the public methods in
<code>Widget</code> and its subclasses), may only be called
from the thread. (To support multi-threaded user-interface
applications, class <code>Display</code> provides inter-thread
communication methods which allow threads other than the
user-interface thread to request that it perform operations
on their behalf.)
</li>
<li>
The thread is not allowed to construct other
<code>Display</code>s until that display has been disposed.
(Note that, this is in addition to the restriction mentioned
above concerning platform support for multiple displays. Thus,
the only way to have multiple simultaneously active displays,
even on platforms which support it, is to have multiple threads.)
</li>
</ul>
Enforcing these attributes allows SWT to be implemented directly
on the underlying operating system's event model. This has
numerous benefits including smaller footprint, better use of
resources, safer memory management, clearer program logic,
better performance, and fewer overall operating system threads
required. The down side however, is that care must be taken
(only) when constructing multi-threaded applications to use the
inter-thread communication mechanisms which this class provides
when required.
</p><p>
All SWT API methods which may only be called from the user-interface
thread are distinguished in their documentation by indicating that
they throw the "<code>ERROR_THREAD_INVALID_ACCESS</code>"
SWT exception.
</p>
<dl>
<dt><b>Styles:</b></dt>
<dd>(none)</dd>
<dt><b>Events:</b></dt>
<dd>Close, Dispose, OpenDocument, Settings, Skin</dd>
</dl>
<p>
IMPORTANT: This class is <em>not</em> intended to be subclassed.
</p>
@see #syncExec
@see #asyncExec
@see #wake
@see #readAndDispatch
@see #sleep
@see Device#dispose
@see <a href="http://www.eclipse.org/swt/snippets/#display">Display snippets</a>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
@noextend This class is not intended to be subclassed by clients.
------------
the handle to the OS message queue
(Warning: This field is platform dependent)
<p>
<b>IMPORTANT:</b> This field is <em>not</em> part of the SWT
public API. It is marked public only so that it can be shared
within the packages provided by SWT. It is not available on all
platforms and should never be accessed from application code.
</p>
*
@noreference This field is not intended to be referenced by clients.

public MSG msg = new MSG ();

static String APP_NAME = "SWT"; //$NON-NLS-1$
static String APP_VERSION = ""; //$NON-NLS-1$

/* Windows and Events */
Event [] eventQueue;
Callback windowCallback;
long /*int*/ windowProc;
int threadId;
TCHAR windowClass, windowShadowClass, windowOwnDCClass;
static int WindowClassCount;
static final String WindowName = "SWT_Window"; //$NON-NLS-1$
static final String WindowShadowName = "SWT_WindowShadow"; //$NON-NLS-1$
static final String WindowOwnDCName = "SWT_WindowOwnDC"; //$NON-NLS-1$
EventTable eventTable, filterTable;
boolean useOwnDC;

/* Widget Table */
int freeSlot;
int [] indexTable;
Control lastControl, lastGetControl;
long /*int*/ lastHwnd, lastGetHwnd;
Control [] controlTable;
static final int GROW_SIZE = 1024;
static final int SWT_OBJECT_INDEX;
static final boolean USE_PROPERTY = !OS.IsWinCE;
static {
if (USE_PROPERTY) {
SWT_OBJECT_INDEX = OS.GlobalAddAtom (new TCHAR (0, "SWT_OBJECT_INDEX", true)); //$NON-NLS-1$
} else {
SWT_OBJECT_INDEX = 0;
}
}

/* Startup info */
static STARTUPINFO lpStartupInfo;
static {
if (!OS.IsWinCE) {
lpStartupInfo = new STARTUPINFO ();
lpStartupInfo.cb = STARTUPINFO.sizeof;
OS.GetStartupInfo (lpStartupInfo);
}
}

/* XP Themes */
long /*int*/ hButtonTheme, hEditTheme, hExplorerBarTheme, hScrollBarTheme, hTabTheme;
static final char [] BUTTON = new char [] {'B', 'U', 'T', 'T', 'O', 'N', 0};
static final char [] EDIT = new char [] {'E', 'D', 'I', 'T', 0};
static final char [] EXPLORER = new char [] {'E', 'X', 'P', 'L', 'O', 'R', 'E', 'R', 0};
static final char [] EXPLORERBAR = new char [] {'E', 'X', 'P', 'L', 'O', 'R', 'E', 'R', 'B', 'A', 'R', 0};
static final char [] SCROLLBAR = new char [] {'S', 'C', 'R', 'O', 'L', 'L', 'B', 'A', 'R', 0};
static final char [] LISTVIEW = new char [] {'L', 'I', 'S', 'T', 'V', 'I', 'E', 'W', 0};
static final char [] TAB = new char [] {'T', 'A', 'B', 0};
static final char [] TREEVIEW = new char [] {'T', 'R', 'E', 'E', 'V', 'I', 'E', 'W', 0};

/* Focus */
int focusEvent;
Control focusControl;
boolean fixFocus;

/* Menus */
Menu [] bars, popups;
MenuItem [] items;

/*
The start value for WM_COMMAND id's.
Windows reserves the values 0..100.
*
The SmartPhone SWT resource file reserves
the values 101..107.

static final int ID_START = 108;

/* Filter Hook */
Callback msgFilterCallback;
long /*int*/ msgFilterProc, filterHook;
MSG hookMsg = new MSG ();
boolean runDragDrop = true, dragCancelled = false;

/* Idle Hook */
Callback foregroundIdleCallback;
long /*int*/ foregroundIdleProc, idleHook;

/* Message Hook and Embedding */
boolean ignoreNextKey;
Callback getMsgCallback, embeddedCallback;
long /*int*/ getMsgProc, msgHook, embeddedHwnd, embeddedProc;
static final String AWT_WINDOW_CLASS = "SunAwtWindow"; //$NON-NLS-1$
static final short [] ACCENTS = new short [] {'~', '`', '\'', '^', '"'};

/* Sync/Async Widget Communication */
Synchronizer synchronizer = new Synchronizer (this);
Consumer<RuntimeException> runtimeExceptionHandler = DefaultExceptionHandler.RUNTIME_EXCEPTION_HANDLER;
Consumer<Error> errorHandler = DefaultExceptionHandler.RUNTIME_ERROR_HANDLER;
boolean runMessages = true, runMessagesInIdle = false, runMessagesInMessageProc = true;
static final String RUN_MESSAGES_IN_IDLE_KEY = "org.eclipse.swt.internal.win32.runMessagesInIdle"; //$NON-NLS-1$
static final String RUN_MESSAGES_IN_MESSAGE_PROC_KEY = "org.eclipse.swt.internal.win32.runMessagesInMessageProc"; //$NON-NLS-1$
static final String USE_OWNDC_KEY = "org.eclipse.swt.internal.win32.useOwnDC"; //$NON-NLS-1$
static final String ACCEL_KEY_HIT = "org.eclipse.swt.internal.win32.accelKeyHit"; //$NON-NLS-1$
Thread thread;

/* Display Shutdown */
Runnable [] disposeList;

/* Deferred Layout list */
Composite[] layoutDeferred;
int layoutDeferredCount;

/* System Tray */
Tray tray;
int nextTrayId;

/* TaskBar */
TaskBar taskBar;
static final String TASKBAR_EVENT = "/SWTINTERNAL_ID"; //$NON-NLS-1$
static final String LAUNCHER_PREFIX = "--launcher.openFile "; //$NON-NLS-1$

/* Timers */
long /*int*/ [] timerIds;
Runnable [] timerList;
long /*int*/ nextTimerId = SETTINGS_ID + 1;

/* Settings */
static final long /*int*/ SETTINGS_ID = 100;
static final int SETTINGS_DELAY = 2000;
boolean lastHighContrast, sendSettings;

/* Keyboard and Mouse */
RECT clickRect;
int clickCount, lastTime, lastButton;
long /*int*/ lastClickHwnd;
int scrollRemainder, scrollHRemainder;
int lastKey, lastMouse, lastAscii;
boolean lastVirtual, lastNull, lastDead;
byte [] keyboard = new byte [256];
boolean accelKeyHit, mnemonicKeyHit;
boolean lockActiveWindow, captureChanged, xMouse;

/* Gesture state */
double magStartDistance, lastDistance;
double rotationAngle;
int lastX, lastY;

/* Touch state */
TouchSource [] touchSources;

/* Tool Tips */
int nextToolTipId;

/* MDI */
boolean ignoreRestoreFocus;
Control lastHittestControl;
int lastHittest;

/* Message Only Window */
Callback messageCallback;
long /*int*/ hwndMessage, messageProc;

/* System Resources */
LOGFONT lfSystemFont;
Font systemFont;
Image errorImage, infoImage, questionImage, warningIcon;
Cursor [] cursors = new Cursor [SWT.CURSOR_HAND + 1];
Resource [] resources;
static final int RESOURCE_SIZE = 1 + 4 + SWT.CURSOR_HAND + 1;

/* ImageList Cache */
ImageList[] imageList, toolImageList, toolHotImageList, toolDisabledImageList;

/* Custom Colors for ChooseColor */
long /*int*/ lpCustColors;

/* Sort Indicators */
Image upArrow, downArrow;

/* Table */
char [] tableBuffer;
NMHDR hdr = new NMHDR ();
NMLVDISPINFO plvfi = new NMLVDISPINFO ();
long /*int*/ hwndParent;
int columnCount;
boolean [] columnVisible;

/* Resize and move recursion */
int resizeCount;
static final int RESIZE_LIMIT = 4;

/* Display Data */
Object data;
String [] keys;
Object [] values;

/* Key Mappings */
static final int [] [] KeyTable = {

/* Keyboard and Mouse Masks */
{OS.VK_MENU,	SWT.ALT},
{OS.VK_SHIFT,	SWT.SHIFT},
{OS.VK_CONTROL,	SWT.CONTROL},
//		{OS.VK_????,	SWT.COMMAND},

/* NOT CURRENTLY USED */
//		{OS.VK_LBUTTON, SWT.BUTTON1},
//		{OS.VK_MBUTTON, SWT.BUTTON3},
//		{OS.VK_RBUTTON, SWT.BUTTON2},

/* Non-Numeric Keypad Keys */
{OS.VK_UP,		SWT.ARROW_UP},
{OS.VK_DOWN,	SWT.ARROW_DOWN},
{OS.VK_LEFT,	SWT.ARROW_LEFT},
{OS.VK_RIGHT,	SWT.ARROW_RIGHT},
{OS.VK_PRIOR,	SWT.PAGE_UP},
{OS.VK_NEXT,	SWT.PAGE_DOWN},
{OS.VK_HOME,	SWT.HOME},
{OS.VK_END,		SWT.END},
{OS.VK_INSERT,	SWT.INSERT},

/* Virtual and Ascii Keys */
{OS.VK_BACK,	SWT.BS},
{OS.VK_RETURN,	SWT.CR},
{OS.VK_DELETE,	SWT.DEL},
{OS.VK_ESCAPE,	SWT.ESC},
{OS.VK_RETURN,	SWT.LF},
{OS.VK_TAB,		SWT.TAB},

/* Functions Keys */
{OS.VK_F1,	SWT.F1},
{OS.VK_F2,	SWT.F2},
{OS.VK_F3,	SWT.F3},
{OS.VK_F4,	SWT.F4},
{OS.VK_F5,	SWT.F5},
{OS.VK_F6,	SWT.F6},
{OS.VK_F7,	SWT.F7},
{OS.VK_F8,	SWT.F8},
{OS.VK_F9,	SWT.F9},
{OS.VK_F10,	SWT.F10},
{OS.VK_F11,	SWT.F11},
{OS.VK_F12,	SWT.F12},
{OS.VK_F13,	SWT.F13},
{OS.VK_F14,	SWT.F14},
{OS.VK_F15,	SWT.F15},
{OS.VK_F16,	SWT.F16},
{OS.VK_F17,	SWT.F17},
{OS.VK_F18,	SWT.F18},
{OS.VK_F19,	SWT.F19},
{OS.VK_F20,	SWT.F20},

/* Numeric Keypad Keys */
{OS.VK_MULTIPLY,	SWT.KEYPAD_MULTIPLY},
{OS.VK_ADD,			SWT.KEYPAD_ADD},
{OS.VK_RETURN,		SWT.KEYPAD_CR},
{OS.VK_SUBTRACT,	SWT.KEYPAD_SUBTRACT},
{OS.VK_DECIMAL,		SWT.KEYPAD_DECIMAL},
{OS.VK_DIVIDE,		SWT.KEYPAD_DIVIDE},
{OS.VK_NUMPAD0,		SWT.KEYPAD_0},
{OS.VK_NUMPAD1,		SWT.KEYPAD_1},
{OS.VK_NUMPAD2,		SWT.KEYPAD_2},
{OS.VK_NUMPAD3,		SWT.KEYPAD_3},
{OS.VK_NUMPAD4,		SWT.KEYPAD_4},
{OS.VK_NUMPAD5,		SWT.KEYPAD_5},
{OS.VK_NUMPAD6,		SWT.KEYPAD_6},
{OS.VK_NUMPAD7,		SWT.KEYPAD_7},
{OS.VK_NUMPAD8,		SWT.KEYPAD_8},
{OS.VK_NUMPAD9,		SWT.KEYPAD_9},
//		{OS.VK_????,		SWT.KEYPAD_EQUAL},

/* Other keys */
{OS.VK_CAPITAL,		SWT.CAPS_LOCK},
{OS.VK_NUMLOCK,		SWT.NUM_LOCK},
{OS.VK_SCROLL,		SWT.SCROLL_LOCK},
{OS.VK_PAUSE,		SWT.PAUSE},
{OS.VK_CANCEL,		SWT.BREAK},
{OS.VK_SNAPSHOT,	SWT.PRINT_SCREEN},
//		{OS.VK_????,		SWT.HELP},

};

/* Multiple Displays */
static Display Default;
static Display [] Displays = new Display [4];

/* Multiple Monitors */
Monitor[] monitors = null;
int monitorCount = 0;

/* Modality */
Shell [] modalShells;
Dialog modalDialog;
static boolean TrimEnabled = false;

/* Private SWT Window Messages */
static final int SWT_GETACCELCOUNT	= OS.WM_APP;
static final int SWT_GETACCEL 		= OS.WM_APP + 1;
static final int SWT_KEYMSG	 		= OS.WM_APP + 2;
static final int SWT_DESTROY	 	= OS.WM_APP + 3;
static final int SWT_TRAYICONMSG	= OS.WM_APP + 4;
static final int SWT_NULL			= OS.WM_APP + 5;
static final int SWT_RUNASYNC		= OS.WM_APP + 6;
static int TASKBARCREATED;
static int TASKBARBUTTONCREATED;
static int SWT_RESTORECARET;
static int DI_GETDRAGIMAGE;
static int SWT_OPENDOC;

/* Workaround for Adobe Reader 7.0 */
int hitCount;

/* Skinning support */
Widget [] skinList = new Widget [GROW_SIZE];
int skinCount;

/* Package Name */
static final String PACKAGE_PREFIX = "org.eclipse.swt.widgets."; //$NON-NLS-1$
/*
This code is intentionally commented.  In order
to support CLDC, .class cannot be used because
it does not compile on some Java compilers when
they are targeted for CLDC.

//	static {
//		String name = Display.class.getName ();
//		int index = name.lastIndexOf ('.');
//		PACKAGE_PREFIX = name.substring (0, index + 1);
//	}

/*
TEMPORARY CODE.  Install the runnable that
gets the current display. This code will
be removed in the future.

static {
DeviceFinder = new Runnable () {
@Override
public void run () {
Device device = getCurrent ();
if (device == null) {
device = getDefault ();
}
setDevice (device);
}
};
}

/*
TEMPORARY CODE.
/
static void setDevice (Device device) {
CurrentDevice = device;
}


Constructs a new instance of this class.
<p>
Note: The resulting display is marked as the <em>current</em>
display. If this is the first display which has been
constructed since the application started, it is also
marked as the <em>default</em> display.
</p>

@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if called from a thread that already created an existing display</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see #getCurrent
@see #getDefault
@see Widget#checkSubclass
@see Shell
------------
Constructs a new instance of this class using the parameter.

@param data the device data
------------
Adds the listener to the collection of listeners who will
be notified when an event of the given type occurs anywhere
in a widget. The event type is one of the event constants
defined in class <code>SWT</code>. When the event does occur,
the listener is notified by sending it the <code>handleEvent()</code>
message.
<p>
Setting the type of an event to <code>SWT.None</code> from
within the <code>handleEvent()</code> method can be used to
change the event type and stop subsequent Java listeners
from running. Because event filters run before other listeners,
event filters can both block other listeners and set arbitrary
fields within an event. For this reason, event filters are both
powerful and dangerous. They should generally be avoided for
performance, debugging and code maintenance reasons.
</p>

@param eventType the type of event to listen for
@param listener the listener which should be notified when the event occurs

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
</ul>

@see Listener
@see SWT
@see #removeFilter
@see #removeListener

@since 3.0
------------
Adds the listener to the collection of listeners who will
be notified when an event of the given type occurs. The event
type is one of the event constants defined in class <code>SWT</code>.
When the event does occur in the display, the listener is notified by
sending it the <code>handleEvent()</code> message.

@param eventType the type of event to listen for
@param listener the listener which should be notified when the event occurs

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
</ul>

@see Listener
@see SWT
@see #removeListener

@since 2.0
------------
Causes the <code>run()</code> method of the runnable to
be invoked by the user-interface thread at the next
reasonable opportunity. The caller of this method continues
to run in parallel, and is not notified when the
runnable has completed.  Specifying <code>null</code> as the
runnable simply wakes the user-interface thread when run.
<p>
Note that at the time the runnable is invoked, widgets
that have the receiver as their display may have been
disposed. Therefore, it is necessary to check for this
case inside the runnable before accessing the widget.
</p>

@param runnable code to run on the user-interface thread or <code>null</code>

@exception SWTException <ul>
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
</ul>

@see #syncExec
------------
Causes the system hardware to emit a short sound
(if it supports this capability).

@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Checks that this class can be subclassed.
<p>
IMPORTANT: See the comment in <code>Widget.checkSubclass()</code>.
</p>

@exception SWTException <ul>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see Widget#checkSubclass
------------
Requests that the connection between SWT and the underlying
operating system be closed.

@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
</ul>

@see Device#dispose

@since 2.0
------------
Creates the device in the operating system.  If the device
does not have a handle, this method may do nothing depending
on the device.
<p>
This method is called before <code>init</code>.
</p>

@param data the DeviceData which describes the receiver

@see #init
------------
Destroys the device in the operating system and releases
the device's handle.  If the device does not have a handle,
this method may do nothing depending on the device.
<p>
This method is called after <code>release</code>.
</p>
@see Device#dispose
@see #release
------------
Causes the <code>run()</code> method of the runnable to
be invoked by the user-interface thread just before the
receiver is disposed.  Specifying a <code>null</code> runnable
is ignored.

@param runnable code to run at dispose time.

@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Does whatever display specific cleanup is required, and then
uses the code in <code>SWTError.error</code> to handle the error.

@param code the descriptive error code

@see SWT#error(int)
------------
Given the operating system handle for a widget, returns
the instance of the <code>Widget</code> subclass which
represents it in the currently running application, if
such exists, or null if no matching widget can be found.
<p>
<b>IMPORTANT:</b> This method should not be called from
application code. The arguments are platform-specific.
</p>

@param handle the handle for the widget
@return the SWT widget that the handle represents

@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
</ul>

@noreference This method is not intended to be referenced by clients.
------------
Given the operating system handle for a widget,
and widget-specific id, returns the instance of
the <code>Widget</code> subclass which represents
the handle/id pair in the currently running application,
if such exists, or null if no matching widget can be found.
<p>
<b>IMPORTANT:</b> This method should not be called from
application code. The arguments are platform-specific.
</p>

@param handle the handle for the widget
@param id the id for the subwidget (usually an item)
@return the SWT widget that the handle/id pair represents

@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
</ul>

@noreference This method is not intended to be referenced by clients.

@since 3.1
------------
Given a widget and a widget-specific id, returns the
instance of the <code>Widget</code> subclass which represents
the widget/id pair in the currently running application,
if such exists, or null if no matching widget can be found.

@param widget the widget
@param id the id for the subwidget (usually an item)
@return the SWT subwidget (usually an item) that the widget/id pair represents

@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
</ul>

@noreference This method is not intended to be referenced by clients.

@since 3.3
------------
Returns the display which the given thread is the
user-interface thread for, or null if the given thread
is not a user-interface thread for any display.  Specifying
<code>null</code> as the thread will return <code>null</code>
for the display.

@param thread the user-interface thread
@return the display for the given thread
------------
Returns the currently active <code>Shell</code>, or null
if no shell belonging to the currently running application
is active.

@return the active shell or null

@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Returns the single instance of the application menu bar, or
<code>null</code> if there is no application menu bar for the platform.

@return the application menu bar, or <code>null</code>

@exception SWTException <ul>
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
</ul>

@since 3.7
------------
Returns a rectangle describing the receiver's size and location. Note that
on multi-monitor systems the origin can be negative.

@return the bounding rectangle

@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Returns the display which the currently running thread is
the user-interface thread for, or null if the currently
running thread is not a user-interface thread for any display.

@return the current display
------------
Returns a rectangle which describes the area of the
receiver which is capable of displaying data.

@return the client area

@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
</ul>

@see #getBounds
------------
Returns the control which the on-screen pointer is currently
over top of, or null if it is not currently over one of the
controls built by the currently running application.

@return the control under the cursor or <code>null</code>

@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Returns the location of the on-screen pointer relative
to the top left corner of the screen.

@return the cursor location

@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Returns an array containing the recommended cursor sizes.

@return the array of cursor sizes

@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
</ul>

@since 3.0
------------
Returns the default display. One is created (making the
thread that invokes this method its user-interface thread)
if it did not already exist.

@return the default display
------------
Returns the application defined property of the receiver
with the specified name, or null if it has not been set.
<p>
Applications may have associated arbitrary objects with the
receiver in this fashion. If the objects stored in the
properties need to be notified when the display is disposed
of, it is the application's responsibility to provide a
<code>disposeExec()</code> handler which does so.
</p>

@param key the name of the property
@return the value of the property or null if it has not been set

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the key is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
</ul>

@see #setData(String, Object)
@see #disposeExec(Runnable)
------------
Returns the application defined, display specific data
associated with the receiver, or null if it has not been
set. The <em>display specific data</em> is a single,
unnamed field that is stored with every display.
<p>
Applications may put arbitrary objects in this field. If
the object stored in the display specific data needs to
be notified when the display is disposed of, it is the
application's responsibility to provide a
<code>disposeExec()</code> handler which does so.
</p>

@return the display specific data

@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
</ul>

@see #setData(Object)
@see #disposeExec(Runnable)
------------
Returns the button dismissal alignment, one of <code>LEFT</code> or <code>RIGHT</code>.
The button dismissal alignment is the ordering that should be used when positioning the
default dismissal button for a dialog.  For example, in a dialog that contains an OK and
CANCEL button, on platforms where the button dismissal alignment is <code>LEFT</code>, the
button ordering should be OK/CANCEL.  When button dismissal alignment is <code>RIGHT</code>,
the button ordering should be CANCEL/OK.

@return the button dismissal order

@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
</ul>

@since 2.1
------------
Returns the longest duration, in milliseconds, between
two mouse button clicks that will be considered a
<em>double click</em> by the underlying operating system.

@return the double click time

@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Returns the control which currently has keyboard focus,
or null if keyboard events are not currently going to
any of the controls built by the currently running
application.

@return the focus control or <code>null</code>

@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Returns true when the high contrast mode is enabled.
Otherwise, false is returned.
<p>
Note: This operation is a hint and is not supported on
platforms that do not have this concept.
</p>

@return the high contrast mode

@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
</ul>

@since 3.0
------------
Returns the maximum allowed depth of icons on this display, in bits per pixel.
On some platforms, this may be different than the actual depth of the display.

@return the maximum icon depth

@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
</ul>

@see Device#getDepth
------------
Returns an array containing the recommended icon sizes.

@return the array of icon sizes

@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
</ul>

@see Decorations#setImages(Image[])

@since 3.0
------------
Returns an array of monitors attached to the device.

@return the array of monitors

@since 3.0
------------
Returns the primary monitor for that device.

@return the primary monitor

@since 3.0
------------
Returns a (possibly empty) array containing all shells which have
not been disposed and have the receiver as their display.

@return the receiver's shells

@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Gets the synchronizer used by the display.

@return the receiver's synchronizer

@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
</ul>

@since 3.4
------------
Returns the thread that has invoked <code>syncExec</code>
or null if no such runnable is currently being invoked by
the user-interface thread.
<p>
Note: If a runnable invoked by asyncExec is currently
running, this method will return null.
</p>

@return the receiver's sync-interface thread

@exception SWTException <ul>
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Returns the matching standard color for the given
constant, which should be one of the color constants
specified in class <code>SWT</code>. Any value other
than one of the SWT color constants which is passed
in will result in the color black. This color should
not be free'd because it was allocated by the system,
not the application.

@param id the color constant
@return the matching color

@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
</ul>

@see SWT
------------
Returns the matching standard platform cursor for the given
constant, which should be one of the cursor constants
specified in class <code>SWT</code>. This cursor should
not be free'd because it was allocated by the system,
not the application.  A value of <code>null</code> will
be returned if the supplied constant is not an SWT cursor
constant.

@param id the SWT cursor constant
@return the corresponding cursor or <code>null</code>

@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
</ul>

@see SWT#CURSOR_ARROW
@see SWT#CURSOR_WAIT
@see SWT#CURSOR_CROSS
@see SWT#CURSOR_APPSTARTING
@see SWT#CURSOR_HELP
@see SWT#CURSOR_SIZEALL
@see SWT#CURSOR_SIZENESW
@see SWT#CURSOR_SIZENS
@see SWT#CURSOR_SIZENWSE
@see SWT#CURSOR_SIZEWE
@see SWT#CURSOR_SIZEN
@see SWT#CURSOR_SIZES
@see SWT#CURSOR_SIZEE
@see SWT#CURSOR_SIZEW
@see SWT#CURSOR_SIZENE
@see SWT#CURSOR_SIZESE
@see SWT#CURSOR_SIZESW
@see SWT#CURSOR_SIZENW
@see SWT#CURSOR_UPARROW
@see SWT#CURSOR_IBEAM
@see SWT#CURSOR_NO
@see SWT#CURSOR_HAND

@since 3.0
------------
Returns a reasonable font for applications to use.
On some platforms, this will match the "default font"
or "system font" if such can be found.  This font
should not be free'd because it was allocated by the
system, not the application.
<p>
Typically, applications which want the default look
should simply not set the font on the widgets they
create. Widgets are always created with the correct
default font for the class of user-interface component
they represent.
</p>

@return a font

@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Returns the matching standard platform image for the given
constant, which should be one of the icon constants
specified in class <code>SWT</code>. This image should
not be free'd because it was allocated by the system,
not the application.  A value of <code>null</code> will
be returned either if the supplied constant is not an
SWT icon constant or if the platform does not define an
image that corresponds to the constant.

@param id the SWT icon constant
@return the corresponding image or <code>null</code>

@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
</ul>

@see SWT#ICON_ERROR
@see SWT#ICON_INFORMATION
@see SWT#ICON_QUESTION
@see SWT#ICON_WARNING
@see SWT#ICON_WORKING

@since 3.0
------------
Returns the single instance of the system-provided menu for the application, or
<code>null</code> on platforms where no menu is provided for the application.

@return the system menu, or <code>null</code>

@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
</ul>

@since 3.7
------------
Returns the single instance of the system taskBar or null
when there is no system taskBar available for the platform.

@return the system taskBar or <code>null</code>

@exception SWTException <ul>
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
</ul>

@since 3.6
------------
Returns the single instance of the system tray or null
when there is no system tray available for the platform.

@return the system tray or <code>null</code>

@exception SWTException <ul>
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
</ul>

@since 3.0
------------
Returns the user-interface thread for the receiver.

@return the receiver's user-interface thread

@exception SWTException <ul>
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Returns a boolean indicating whether a touch-aware input device is
attached to the system and is ready for use.

@return <code>true</code> if a touch-aware input device is detected, or <code>false</code> otherwise

@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
</ul>

@since 3.7
------------
Invokes platform specific functionality to allocate a new GC handle.
<p>
<b>IMPORTANT:</b> This method is <em>not</em> part of the public
API for <code>Display</code>. It is marked public only so that it
can be shared within the packages provided by SWT. It is not
available on all platforms, and should never be called from
application code.
</p>

@param data the platform specific GC data
@return the platform specific GC handle

@exception SWTException <ul>
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
</ul>
@exception SWTError <ul>
<li>ERROR_NO_HANDLES if a handle could not be obtained for gc creation</li>
</ul>

@noreference This method is not intended to be referenced by clients.
------------
Initializes any internal resources needed by the
device.
<p>
This method is called after <code>create</code>.
</p>

@see #create
------------
Invokes platform specific functionality to dispose a GC handle.
<p>
<b>IMPORTANT:</b> This method is <em>not</em> part of the public
API for <code>Display</code>. It is marked public only so that it
can be shared within the packages provided by SWT. It is not
available on all platforms, and should never be called from
application code.
</p>

@param hDC the platform specific GC handle
@param data the platform specific GC data

@noreference This method is not intended to be referenced by clients.
------------
Maps a point from one coordinate system to another.
When the control is null, coordinates are mapped to
the display.
<p>
NOTE: On right-to-left platforms where the coordinate
systems are mirrored, special care needs to be taken
when mapping coordinates from one control to another
to ensure the result is correctly mirrored.

Mapping a point that is the origin of a rectangle and
then adding the width and height is not equivalent to
mapping the rectangle.  When one control is mirrored
and the other is not, adding the width and height to a
point that was mapped causes the rectangle to extend
in the wrong direction.  Mapping the entire rectangle
instead of just one point causes both the origin and
the corner of the rectangle to be mapped.
</p>

@param from the source <code>Control</code> or <code>null</code>
@param to the destination <code>Control</code> or <code>null</code>
@param point to be mapped
@return point with mapped coordinates

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the point is null</li>
<li>ERROR_INVALID_ARGUMENT - if the Control from or the Control to have been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
</ul>

@since 2.1.2
------------
Maps a point from one coordinate system to another.
When the control is null, coordinates are mapped to
the display.
<p>
NOTE: On right-to-left platforms where the coordinate
systems are mirrored, special care needs to be taken
when mapping coordinates from one control to another
to ensure the result is correctly mirrored.

Mapping a point that is the origin of a rectangle and
then adding the width and height is not equivalent to
mapping the rectangle.  When one control is mirrored
and the other is not, adding the width and height to a
point that was mapped causes the rectangle to extend
in the wrong direction.  Mapping the entire rectangle
instead of just one point causes both the origin and
the corner of the rectangle to be mapped.
</p>

@param from the source <code>Control</code> or <code>null</code>
@param to the destination <code>Control</code> or <code>null</code>
@param x coordinates to be mapped
@param y coordinates to be mapped
@return point with mapped coordinates

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the Control from or the Control to have been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
</ul>

@since 2.1.2
------------
Maps a point from one coordinate system to another.
When the control is null, coordinates are mapped to
the display.
<p>
NOTE: On right-to-left platforms where the coordinate
systems are mirrored, special care needs to be taken
when mapping coordinates from one control to another
to ensure the result is correctly mirrored.

Mapping a point that is the origin of a rectangle and
then adding the width and height is not equivalent to
mapping the rectangle.  When one control is mirrored
and the other is not, adding the width and height to a
point that was mapped causes the rectangle to extend
in the wrong direction.  Mapping the entire rectangle
instead of just one point causes both the origin and
the corner of the rectangle to be mapped.
</p>

@param from the source <code>Control</code> or <code>null</code>
@param to the destination <code>Control</code> or <code>null</code>
@param rectangle to be mapped
@return rectangle with mapped coordinates

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the rectangle is null</li>
<li>ERROR_INVALID_ARGUMENT - if the Control from or the Control to have been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
</ul>

@since 2.1.2
------------
Maps a point from one coordinate system to another.
When the control is null, coordinates are mapped to
the display.
<p>
NOTE: On right-to-left platforms where the coordinate
systems are mirrored, special care needs to be taken
when mapping coordinates from one control to another
to ensure the result is correctly mirrored.

Mapping a point that is the origin of a rectangle and
then adding the width and height is not equivalent to
mapping the rectangle.  When one control is mirrored
and the other is not, adding the width and height to a
point that was mapped causes the rectangle to extend
in the wrong direction.  Mapping the entire rectangle
instead of just one point causes both the origin and
the corner of the rectangle to be mapped.
</p>

@param from the source <code>Control</code> or <code>null</code>
@param to the destination <code>Control</code> or <code>null</code>
@param x coordinates to be mapped
@param y coordinates to be mapped
@param width coordinates to be mapped
@param height coordinates to be mapped
@return rectangle with mapped coordinates

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the Control from or the Control to have been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
</ul>

@since 2.1.2
------------
Generate a low level system event.

<code>post</code> is used to generate low level keyboard
and mouse events. The intent is to enable automated UI
testing by simulating the input from the user.  Most
SWT applications should never need to call this method.
<p>
Note that this operation can fail when the operating system
fails to generate the event for any reason.  For example,
this can happen when there is no such key or mouse button
or when the system event queue is full.
</p>
<p>
<b>Event Types:</b>
<p>KeyDown, KeyUp
<p>The following fields in the <code>Event</code> apply:
<ul>
<li>(in) type KeyDown or KeyUp</li>
<p> Either one of:
<li>(in) character a character that corresponds to a keyboard key</li>
<li>(in) keyCode the key code of the key that was typed,
as defined by the key code constants in class <code>SWT</code></li>
</ul>
<p>MouseDown, MouseUp</p>
<p>The following fields in the <code>Event</code> apply:
<ul>
<li>(in) type MouseDown or MouseUp
<li>(in) button the button that is pressed or released
</ul>
<p>MouseMove</p>
<p>The following fields in the <code>Event</code> apply:
<ul>
<li>(in) type MouseMove
<li>(in) x the x coordinate to move the mouse pointer to in screen coordinates
<li>(in) y the y coordinate to move the mouse pointer to in screen coordinates
</ul>
<p>MouseWheel</p>
<p>The following fields in the <code>Event</code> apply:
<ul>
<li>(in) type MouseWheel
<li>(in) detail either SWT.SCROLL_LINE or SWT.SCROLL_PAGE
<li>(in) count the number of lines or pages to scroll
</ul>
</dl>

@param event the event to be generated

@return true if the event was generated or false otherwise

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the event is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
</ul>

@since 3.0
------------
Reads an event from the operating system's event queue,
dispatches it appropriately, and returns <code>true</code>
if there is potentially more work to do, or <code>false</code>
if the caller can sleep until another event is placed on
the event queue.
<p>
In addition to checking the system event queue, this method also
checks if any inter-thread messages (created by <code>syncExec()</code>
or <code>asyncExec()</code>) are waiting to be processed, and if
so handles them before returning.
</p>

@return <code>false</code> if the caller can sleep upon return from this method

@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_FAILED_EXEC - if an exception occurred while running an inter-thread message</li>
</ul>

@see #sleep
@see #wake
------------
Releases any internal resources back to the operating
system and clears all fields except the device handle.
<p>
Disposes all shells which are currently open on the display.
After this method has been invoked, all related related shells
will answer <code>true</code> when sent the message
<code>isDisposed()</code>.
</p><p>
When a device is destroyed, resources that were acquired
on behalf of the programmer need to be returned to the
operating system.  For example, if the device allocated a
font to be used as the system font, this font would be
freed in <code>release</code>.  Also,to assist the garbage
collector and minimize the amount of memory that is not
reclaimed when the programmer keeps a reference to a
disposed device, all fields except the handle are zero'd.
The handle is needed by <code>destroy</code>.
</p>
This method is called before <code>destroy</code>.

@see Device#dispose
@see #destroy
------------
Removes the listener from the collection of listeners who will
be notified when an event of the given type occurs anywhere in
a widget. The event type is one of the event constants defined
in class <code>SWT</code>.

@param eventType the type of event to listen for
@param listener the listener which should no longer be notified when the event occurs

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see Listener
@see SWT
@see #addFilter
@see #addListener

@since 3.0
------------
Removes the listener from the collection of listeners who will
be notified when an event of the given type occurs. The event type
is one of the event constants defined in class <code>SWT</code>.

@param eventType the type of event to listen for
@param listener the listener which should no longer be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
</ul>

@see Listener
@see SWT
@see #addListener

@since 2.0
------------
Sends a SWT.PreExternalEventDispatch event.

@noreference This method is not intended to be referenced by clients.
------------
Sends a SWT.PostExternalEventDispatch event.

@noreference This method is not intended to be referenced by clients.
------------
Sets the location of the on-screen pointer relative to the top left corner
of the screen.  <b>Note: It is typically considered bad practice for a
program to move the on-screen pointer location.</b>

@param x the new x coordinate for the cursor
@param y the new y coordinate for the cursor

@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
</ul>

@since 2.1
------------
Sets the location of the on-screen pointer relative to the top left corner
of the screen.  <b>Note: It is typically considered bad practice for a
program to move the on-screen pointer location.</b>

@param point new position

@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
<li>ERROR_NULL_ARGUMENT - if the point is null
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
</ul>

@since 2.0
------------
Sets the application defined property of the receiver
with the specified name to the given argument.
<p>
Applications may have associated arbitrary objects with the
receiver in this fashion. If the objects stored in the
properties need to be notified when the display is disposed
of, it is the application's responsibility provide a
<code>disposeExec()</code> handler which does so.
</p>

@param key the name of the property
@param value the new value for the property

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the key is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
</ul>

@see #getData(String)
@see #disposeExec(Runnable)
------------
Sets the application defined, display specific data
associated with the receiver, to the argument.
The <em>display specific data</em> is a single,
unnamed field that is stored with every display.
<p>
Applications may put arbitrary objects in this field. If
the object stored in the display specific data needs to
be notified when the display is disposed of, it is the
application's responsibility provide a
<code>disposeExec()</code> handler which does so.
</p>

@param data the new display specific data

@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
</ul>

@see #getData()
@see #disposeExec(Runnable)
------------
Returns the application name.

@return the application name

@see #setAppName(String)

@since 3.6
------------
Returns the application version.

@return the application version

@see #setAppVersion(String)

@since 3.6
------------
Sets the application name to the argument.
<p>
The application name can be used in several ways,
depending on the platform and tools being used.
Accessibility tools could ask for the application
name. On Windows, if the application name is set
to any value other than "SWT" (case insensitive),
it is used to set the application user model ID
which is used by the OS for taskbar grouping.
@see <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/dd378459%28v=vs.85%29.aspx#HOW">AppUserModelID (Windows)</a>
</p><p>
Specifying <code>null</code> for the name clears it.
</p>

@param name the new app name or <code>null</code>
------------
Sets the application version to the argument.

@param version the new app version

@since 3.6
------------
Sets the synchronizer used by the display to be
the argument, which can not be null.

@param synchronizer the new synchronizer for the display (must not be null)

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the synchronizer is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_FAILED_EXEC - if an exception occurred while running an inter-thread message</li>
</ul>
------------
Sets a callback that will be invoked whenever an exception is thrown by a listener or external
callback function. The application may use this to set a global exception handling policy:
the most common policies are either to log and discard the exception or to re-throw the
exception.
<p>
The default SWT error handling policy is to rethrow exceptions.

@param runtimeExceptionHandler new exception handler to be registered.
@since 3.106
------------
Returns the current exception handler. It will receive all exceptions thrown by listeners
and external callbacks in this display. If code wishes to temporarily replace the exception
handler (for example, during a unit test), it is common practice to invoke this method prior
to replacing the exception handler so that the old handler may be restored afterward.

@return the current exception handler. Never null.
@since 3.106
------------
Sets a callback that will be invoked whenever an error is thrown by a listener or external
callback function. The application may use this to set a global exception handling policy:
the most common policies are either to log and discard the exception or to re-throw the
exception.
<p>
The default SWT error handling policy is to rethrow exceptions.

@param errorHandler new error handler to be registered.
@since 3.106
------------
Returns the current exception handler. It will receive all errors thrown by listeners
and external callbacks in this display. If code wishes to temporarily replace the error
handler (for example, during a unit test), it is common practice to invoke this method prior
to replacing the error handler so that the old handler may be restored afterward.

@return the current error handler. Never null.
@since 3.106
------------
Causes the user-interface thread to <em>sleep</em> (that is,
to be put in a state where it does not consume CPU cycles)
until an event is received or it is otherwise awakened.

@return <code>true</code> if an event requiring dispatching was placed on the queue.

@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
</ul>

@see #wake
------------
Causes the <code>run()</code> method of the runnable to
be invoked by the user-interface thread at the next
reasonable opportunity. The thread which calls this method
is suspended until the runnable completes.  Specifying <code>null</code>
as the runnable simply wakes the user-interface thread.
<p>
Note that at the time the runnable is invoked, widgets
that have the receiver as their display may have been
disposed. Therefore, it is necessary to check for this
case inside the runnable before accessing the widget.
</p>

@param runnable code to run on the user-interface thread or <code>null</code>

@exception SWTException <ul>
<li>ERROR_FAILED_EXEC - if an exception occurred when executing the runnable</li>
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
</ul>

@see #asyncExec
------------
Causes the <code>run()</code> method of the runnable to
be invoked by the user-interface thread after the specified
number of milliseconds have elapsed. If milliseconds is less
than zero, the runnable is not executed.
<p>
Note that at the time the runnable is invoked, widgets
that have the receiver as their display may have been
disposed. Therefore, it is necessary to check for this
case inside the runnable before accessing the widget.
</p>

@param milliseconds the delay before running the runnable
@param runnable code to run on the user-interface thread

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the runnable is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
</ul>

@see #asyncExec
------------
Forces all outstanding paint requests for the display
to be processed before this method returns.

@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
</ul>

@see Control#update()
------------
If the receiver's user-interface thread was <code>sleep</code>ing,
causes it to be awakened and start running again. Note that this
method may be called from any thread.

@exception SWTException <ul>
<li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
</ul>

@see #sleep

====== DisposeEvent.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class are sent as a result of
widgets being disposed.

@see DisposeListener
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
------------
Constructs a new instance of this class based on the
information in the given untyped event.

@param e the untyped event containing the information

====== DisposeListener.java ======
Copyright (c) 2000, 2016 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
Lars Vogel <Lars.Vogel@vogella.com> - Bug 502576
------------
Classes which implement this interface provide a method
that deals with the event that is generated when a widget
is disposed.
<p>
After creating an instance of a class that implements
this interface it can be added to a widget using the
<code>addDisposeListener</code> method and removed using
the <code>removeDisposeListener</code> method. When a
widget is disposed, the widgetDisposed method will
be invoked.
</p>

@see DisposeEvent
------------
Sent when the widget is disposed.

@param e an event containing information about the dispose

====== DPIUtil.java ======
Copyright (c) 2016 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
This class hold common constants and utility functions w.r.t. to SWT high DPI
functionality.
<p>
The {@code autoScaleUp(..)} methods convert from API coordinates (in
SWT points) to internal high DPI coordinates (in pixels) that interface with
native widgets.
</p>
<p>
The {@code autoScaleDown(..)} convert from high DPI pixels to API coordinates
(in SWT points).
</p>

@since 3.105
------------
System property that controls the autoScale functionality.
<ul>
<li><b>false</b>: deviceZoom is set to 100%</li>
<li><b>integer</b>: deviceZoom depends on the current display resolution,
    but only uses integer multiples of 100%. The detected native zoom is
    generally rounded down (e.g. at 150%, will use 100%), unless close to
    the next integer multiple (currently at 175%, will use 200%).</li>
<li><b>quarter</b>: deviceZoom depends on the current display resolution,
    but only uses integer multiples of 25%. The detected native zoom is
    rounded to the closest permissible value.</li>
<li><b>exact</b>: deviceZoom uses the native zoom (with 1% as minimal
    step).</li>
<li><i><value></i>: deviceZoom uses the given integer value in
    percent as zoom level.</li>
</ul>
The current default is "integer".

private static final String SWT_AUTOSCALE = "swt.autoScale";


System property that controls the method for scaling images:
<ul>
<li>"nearest": nearest-neighbor interpolation, may look jagged</li>
<li>"smooth": smooth edges, may look blurry</li>
</ul>
The current default is to use "nearest", except on
GTK when the deviceZoom is not an integer multiple of 100%.
The smooth strategy currently doesn't work on Win32 and Cocoa, see
<a href="https://bugs.eclipse.org/493455">bug 493455</a>.

private static final String SWT_AUTOSCALE_METHOD = "swt.autoScale.method";
static {
String value = System.getProperty (SWT_AUTOSCALE_METHOD);
if (value != null) {
if (AutoScaleMethod.NEAREST.name().equalsIgnoreCase(value)) {
autoScaleMethod = autoScaleMethodSetting = AutoScaleMethod.NEAREST;
} else if (AutoScaleMethod.SMOOTH.name().equalsIgnoreCase(value)) {
autoScaleMethod = autoScaleMethodSetting = AutoScaleMethod.SMOOTH;
}
}
}


Auto-scale down ImageData
------------
Auto-scale up float array dimensions.
------------
Auto-scale up float array dimensions if enabled for Drawable class.
------------
Auto-scale down int dimensions.
------------
Auto-scale down int dimensions if enabled for Drawable class.
------------
Auto-scale down float dimensions.
------------
Auto-scale down float dimensions if enabled for Drawable class.
------------
Returns a new scaled down Point.
------------
Returns a new scaled down Point if enabled for Drawable class.
------------
Returns a new scaled down Rectangle.
------------
Returns a new scaled down Rectangle if enabled for Drawable class.
------------
Auto-scale image with ImageData
------------
Returns a new rectangle as per the scaleFactor.
------------
Auto-scale up ImageData
------------
Auto-scale up int dimensions.
------------
Auto-scale up int dimensions using Native DPI
------------
Auto-scale up int dimensions if enabled for Drawable class.
------------
Returns a new scaled up Point.
------------
Returns a new scaled up Point if enabled for Drawable class.
------------
Returns a new scaled up Rectangle.
------------
Returns a new scaled up Rectangle if enabled for Drawable class.
------------
Returns Scaling factor from the display
@return float scaling factor
------------
Compute the zoom value based on the DPI value.

@return zoom
------------
Gets Image data at specified zoom level, if image is missing then
fall-back to 100% image. If provider or fall-back image is not available,
throw error.
------------
Gets Image file path at specified zoom level, if image is missing then
fall-back to 100% image. If provider or fall-back image is not available,
throw error.
------------
AutoScale ImageDataProvider.

====== DragDetectEvent.java ======
Copyright (c) 2000, 2008 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class are sent as a result of
a drag gesture.

@see DragDetectListener
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>

@since 3.3
------------
Constructs a new instance of this class based on the
information in the given untyped event.

@param e the untyped event containing the information

====== DragDetectListener.java ======
Copyright (c) 2000, 2016 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
Lars Vogel <Lars.Vogel@vogella.com> - Bug 502576
------------
Classes which implement this interface provide methods
that deal with the events that are generated when a drag
gesture is detected.
<p>
After creating an instance of a class that implements
this interface it can be added to a control using the
<code>addDragDetectListener</code> method and removed using
the <code>removeDragDetectListener</code> method. When the
drag is detected, the drageDetected method will be invoked.
</p>

@see DragDetectEvent

@since 3.3
------------
Sent when a drag gesture is detected.

@param e an event containing information about the drag

====== Drawable.java ======
Copyright (c) 2000, 2016 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Implementers of <code>Drawable</code> can have a graphics context (GC)
created for them, and then they can be drawn on by sending messages to
their associated GC. SWT images, and device objects such as the Display
device and the Printer device, are drawables.
<p>
<b>IMPORTANT:</b> This interface is <em>not</em> part of the SWT
public API. It is marked public only so that it can be shared
within the packages provided by SWT. It should never be
referenced from application code.
</p>

@see Device
@see Image
@see GC
------------
Invokes platform specific functionality to allocate a new GC handle.
<p>
<b>IMPORTANT:</b> This method is <em>not</em> part of the public
API for <code>Drawable</code>. It is marked public only so that it
can be shared within the packages provided by SWT. It is not
available on all platforms, and should never be called from
application code.
</p>

@param data the platform specific GC data
@return the platform specific GC handle

@noreference This method is not intended to be referenced by clients.
------------
Invokes platform specific functionality to dispose a GC handle.
<p>
<b>IMPORTANT:</b> This method is <em>not</em> part of the public
API for <code>Drawable</code>. It is marked public only so that it
can be shared within the packages provided by SWT. It is not
available on all platforms, and should never be called from
application code.
</p>

@param handle the platform specific GC handle
@param data the platform specific GC data

@noreference This method is not intended to be referenced by clients.
------------
Returns <code>true</code> iff coordinates can be auto-scaled on this
drawable and <code>false</code> if not. E.g. a {@link GC} method should not
auto-scale the bounds of a figure drawn on a Printer device, but it may have
to auto-scale when drawing on a high-DPI Display monitor.

@return <code>true</code> if auto-scaling is enabled for this drawable

@noreference This method is not intended to be referenced by clients.

====== Event.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class provide a description of a particular
event which occurred within SWT. The SWT <em>untyped listener</em>
API uses these instances for all event dispatching.
<p>
Note: For a given event, only the fields which are appropriate
will be filled in. The contents of the fields which are not used
by the event are unspecified.
</p>

@see Listener
@see org.eclipse.swt.events.TypedEvent
@see <a href="http://www.eclipse.org/swt/examples.php">SWT Example: ControlExample, Listeners</a>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
------------
the display where the event occurred
*
@since 2.0

public Display display;


the widget that issued the event

public Widget widget;


the type of event, as defined by the event type constants
in class <code>SWT</code>
*
@see org.eclipse.swt.SWT

public int type;


the event specific detail field, as defined by the detail constants
in class <code>SWT</code>
*
@see org.eclipse.swt.SWT

public int detail;


the item that the event occurred in (can be null)

public Widget item;


the index of the item where the event occurred
*
@since 3.2

public int index;


the graphics context to use when painting
that is configured to use the colors, font and
damaged region of the control.  It is valid
only during the paint and must not be disposed

public GC gc;


depending on the event type, the x offset of the bounding
rectangle of the region that requires painting or the
widget-relative, x coordinate of the pointer at the
time the mouse button was pressed or released

public int x;


depending on the event type, the y offset of the bounding
rectangle of the  region that requires painting or the
widget-relative, y coordinate of the pointer at the
time the mouse button was pressed or released

public int y;


the width of the bounding rectangle of the
region that requires painting

public int width;


the height of the bounding rectangle of the
region that requires painting

public int height;


depending on the event type, the number of following
paint events that are pending which may always be zero
on some platforms, or the number of lines or pages to
scroll using the mouse wheel, or the number of times the
mouse has been clicked

public int count;


the time that the event occurred.
*
NOTE: This field is an unsigned integer and should
be AND'ed with 0xFFFFFFFFL so that it can be treated
as a signed long.

public int time;


the button that was pressed or released; 1 for the
first button, 2 for the second button, and 3 for the
third button, etc.

public int button;


depending on the event, the character represented by the key
that was typed.  This is the final character that results
after all modifiers have been applied.  For example, when the
user types Ctrl+A, the character value is 0x01 (ASCII SOH).
It is important that applications do not attempt to modify the
character value based on a stateMask (such as SWT.CTRL) or the
resulting character will not be correct.

public char character;


depending on the event, the key code of the key that was typed,
as defined by the key code constants in class <code>SWT</code>.
When the character field of the event is ambiguous, this field
contains the unaffected value of the original character.  For
example, typing Ctrl+M or Enter both result in the character '\r'
but the keyCode field will also contain '\r' when Enter was typed
and 'm' when Ctrl+M was typed.
*
@see org.eclipse.swt.SWT

public int keyCode;


depending on the event, the location of key specified by the
keyCode or character. The possible values for this field are
<code>SWT.LEFT</code>, <code>SWT.RIGHT</code>, <code>SWT.KEYPAD</code>,
or <code>SWT.NONE</code> representing the main keyboard area.
<p>
The location field can be used to differentiate key events that have
the same key code and character but are generated by different keys
in the keyboard. For example, a key down event with the key code equals
to SWT.SHIFT can be generated by the left and the right shift keys in the
keyboard. The location field can only be used to determine the location
of the key code or character in the current event. It does not
include information about the location of modifiers in state
mask.
</p>
*
@see org.eclipse.swt.SWT#LEFT
@see org.eclipse.swt.SWT#RIGHT
@see org.eclipse.swt.SWT#KEYPAD
*
@since 3.6

public int keyLocation;


depending on the event, the state of the keyboard modifier
keys and mouse masks at the time the event was generated.
*
@see org.eclipse.swt.SWT#MODIFIER_MASK
@see org.eclipse.swt.SWT#BUTTON_MASK

public int stateMask;


depending on the event, the range of text being modified.
Setting these fields only has effect during ImeComposition
events.

public int start, end;


depending on the event, the new text that will be inserted.
Setting this field will change the text that is about to
be inserted or deleted.

public String text;


Bidi segment offsets
@since 3.8

public int[] segments;


Characters to be applied on the segment boundaries
@since 3.8

public char[] segmentsChars;


depending on the event, a flag indicating whether the operation
should be allowed.  Setting this field to false will cancel the
operation.

public boolean doit = true;


a field for application use

public Object data;


An array of the touch states for the current touch event.
*
@since 3.7

public Touch[] touches;


If nonzero, a positive value indicates a swipe to the right,
and a negative value indicates a swipe to the left.
*
@since 3.7

public int xDirection;


If nonzero, a positive value indicates a swipe in the up direction,
and a negative value indicates a swipe in the down direction.
*
@since 3.7

public int yDirection;


The change in magnification. This value should be added to the current
scaling of an item to get the new scale factor.
*
@since 3.7

public double magnification;


The number of degrees rotated on the track pad.
*
@since 3.7

public double rotation;


Gets the bounds.

@return a rectangle that is the bounds.
------------
Sets the bounds.

@param rect the new rectangle
------------
Returns a string containing a concise, human-readable
description of the receiver.

@return a string representation of the event

====== EventTable.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class implement a simple
look up mechanism that maps an event type
to a listener.  Multiple listeners for the
same event type are supported.

====== ExpandAdapter.java ======
Copyright (c) 2000, 2016 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
This adapter class provides default implementations for the
methods described by the <code>ExpandListener</code> interface.
<p>
Classes that wish to deal with <code>ExpandEvent</code>s can
extend this class and override only the methods which they are
interested in.
</p>

@see ExpandListener
@see ExpandEvent
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>

@since 3.2
------------
Sent when an item is collapsed.
The default behavior is to do nothing.

@param e an event containing information about the operation
------------
Sent when an item is expanded.
The default behavior is to do nothing.

@param e an event containing information about the operation

====== ExpandBar.java ======
Copyright (c) 2000, 2016 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class support the layout of selectable
expand bar items.
<p>
The item children that may be added to instances of this class
must be of type <code>ExpandItem</code>.
</p><p>
<dl>
<dt><b>Styles:</b></dt>
<dd>V_SCROLL</dd>
<dt><b>Events:</b></dt>
<dd>Expand, Collapse</dd>
</dl>
</p><p>
IMPORTANT: This class is <em>not</em> intended to be subclassed.
</p>

@see ExpandItem
@see ExpandEvent
@see ExpandListener
@see ExpandAdapter
@see <a href="http://www.eclipse.org/swt/snippets/#expandbar">ExpandBar snippets</a>
@see <a href="http://www.eclipse.org/swt/examples.php">SWT Example: ControlExample</a>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>

@since 3.2
@noextend This class is not intended to be subclassed by clients.
------------
Constructs a new instance of this class given its parent
and a style value describing its behavior and appearance.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.
</p>

@param parent a composite control which will be the parent of the new instance (cannot be null)
@param style the style of control to construct

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see SWT#V_SCROLL
@see Widget#checkSubclass
@see Widget#getStyle
------------
Adds the listener to the collection of listeners who will
be notified when an item in the receiver is expanded or collapsed
by sending it one of the messages defined in the <code>ExpandListener</code>
interface.

@param listener the listener which should be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see ExpandListener
@see #removeExpandListener
------------
Returns the item at the given, zero-relative index in the
receiver. Throws an exception if the index is out of range.

@param index the index of the item to return
@return the item at the given index

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list minus 1 (inclusive)</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the number of items contained in the receiver.

@return the number of items

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns an array of <code>ExpandItem</code>s which are the items
in the receiver.
<p>
Note: This is not the actual structure used by the receiver
to maintain its list of items, so modifying the array will
not affect the receiver.
</p>

@return the items in the receiver

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the receiver's spacing.

@return the spacing

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Searches the receiver's list starting at the first item
(index 0) until an item is found that is equal to the
argument, and returns the index of that item. If no item
is found, returns -1.

@param item the search item
@return the index of the item

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the item is null</li>
<li>ERROR_INVALID_ARGUMENT - if the item has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Removes the listener from the collection of listeners who will
be notified when items in the receiver are expanded or collapsed.

@param listener the listener which should no longer be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see ExpandListener
@see #addExpandListener
------------
Sets the receiver's spacing. Spacing specifies the number of pixels allocated around
each item.

@param spacing the spacing around each item

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

====== ExpandEvent.java ======
Copyright (c) 2000, 2008 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class are sent as a result of
<code>ExpandItem</code>s being expanded or collapsed.

@see ExpandListener
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>

@since 3.2
------------
Constructs a new instance of this class based on the
information in the given untyped event.

@param e the untyped event containing the information

====== ExpandItem.java ======
Copyright (c) 2000, 2013 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class represent a selectable user interface object
that represents a expandable item in a expand bar.
<p>
<dl>
<dt><b>Styles:</b></dt>
<dd>(none)</dd>
<dt><b>Events:</b></dt>
<dd>(none)</dd>
</dl>
</p><p>
IMPORTANT: This class is <em>not</em> intended to be subclassed.
</p>

@see ExpandBar
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>

@since 3.2
@noextend This class is not intended to be subclassed by clients.
------------
Constructs a new instance of this class given its parent
and a style value describing its behavior and appearance.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.
</p>

@param parent a composite control which will be the parent of the new instance (cannot be null)
@param style the style of control to construct

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see Widget#checkSubclass
@see Widget#getStyle
------------
Constructs a new instance of this class given its parent, a
style value describing its behavior and appearance, and the index
at which to place it in the items maintained by its parent.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.
</p>

@param parent a composite control which will be the parent of the new instance (cannot be null)
@param style the style of control to construct
@param index the zero-relative index to store the receiver in its parent

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
<li>ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the parent (inclusive)</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see Widget#checkSubclass
@see Widget#getStyle
------------
Returns the control that is shown when the item is expanded.
If no control has been set, return <code>null</code>.

@return the control

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns <code>true</code> if the receiver is expanded,
and false otherwise.

@return the expanded state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the height of the receiver's header

@return the height of the header

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Gets the height of the receiver.

@return the height

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the receiver's parent, which must be a <code>ExpandBar</code>.

@return the receiver's parent

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the control that is shown when the item is expanded.

@param control the new control (or null)

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the control has been disposed</li>
<li>ERROR_INVALID_PARENT - if the control is not in the same widget tree</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the expanded state of the receiver.

@param expanded the new expanded state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the height of the receiver. This is height of the item when it is expanded,
excluding the height of the header.

@param height the new height

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

====== ExpandListener.java ======
Copyright (c) 2000, 2006 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Classes which implement this interface provide methods
that deal with the expanding and collapsing of <code>ExpandItem</code>s.

<p>
After creating an instance of a class that implements
this interface it can be added to a <code>ExpandBar</code>
control using the <code>addExpandListener</code> method and
removed using the <code>removeExpandListener</code> method.
When a item of the <code>ExpandBar</code> is expanded or
collapsed, the appropriate method will be invoked.
</p>

@see ExpandAdapter
@see ExpandEvent

@since 3.2
------------
Sent when an item is collapsed.

@param e an event containing information about the operation
------------
Sent when an item is expanded.

@param e an event containing information about the operation

====== FileDialog.java ======
Copyright (c) 2000, 2012 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class allow the user to navigate
the file system and select or enter a file name.
<dl>
<dt><b>Styles:</b></dt>
<dd>SAVE, OPEN, MULTI</dd>
<dt><b>Events:</b></dt>
<dd>(none)</dd>
</dl>
<p>
Note: Only one of the styles SAVE and OPEN may be specified.
</p><p>
IMPORTANT: This class is <em>not</em> intended to be subclassed.
</p>

@see <a href="http://www.eclipse.org/swt/snippets/#filedialog">FileDialog snippets</a>
@see <a href="http://www.eclipse.org/swt/examples.php">SWT Example: ControlExample, Dialog tab</a>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
@noextend This class is not intended to be subclassed by clients.
------------
Constructs a new instance of this class given only its parent.

@param parent a shell which will be the parent of the new instance

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>
------------
Constructs a new instance of this class given its parent
and a style value describing its behavior and appearance.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.
</p>

@param parent a shell which will be the parent of the new instance
@param style the style of dialog to construct

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see SWT#SAVE
@see SWT#OPEN
@see SWT#MULTI
------------
Returns the path of the first file that was
selected in the dialog relative to the filter path, or an
empty string if no such file has been selected.

@return the relative path of the file
------------
Returns a (possibly empty) array with the paths of all files
that were selected in the dialog relative to the filter path.

@return the relative paths of the files
------------
Returns the file extensions which the dialog will
use to filter the files it shows.

@return the file extensions filter
------------
Get the 0-based index of the file extension filter
which was selected by the user, or -1 if no filter
was selected.
<p>
This is an index into the FilterExtensions array and
the FilterNames array.
</p>

@return index the file extension filter index

@see #getFilterExtensions
@see #getFilterNames

@since 3.4
------------
Returns the names that describe the filter extensions
which the dialog will use to filter the files it shows.

@return the list of filter names
------------
Returns the directory path that the dialog will use, or an empty
string if this is not set.  File names in this path will appear
in the dialog, filtered according to the filter extensions.

@return the directory path string

@see #setFilterExtensions
------------
Returns the flag that the dialog will use to
determine whether to prompt the user for file
overwrite if the selected file already exists.

@return true if the dialog will prompt for file overwrite, false otherwise

@since 3.4
------------
Makes the dialog visible and brings it to the front
of the display.

@return a string describing the absolute path of the first selected file,
or null if the dialog was cancelled or an error occurred

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the dialog has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the dialog</li>
</ul>
------------
Set the initial filename which the dialog will
select by default when opened to the argument,
which may be null.  The name will be prefixed with
the filter path when one is supplied.

@param string the file name
------------
Set the file extensions which the dialog will
use to filter the files it shows to the argument,
which may be null.
<p>
The strings are platform specific. For example, on
some platforms, an extension filter string is typically
of the form "*.extension", where "*.*" matches all files.
For filters with multiple extensions, use semicolon as
a separator, e.g. "*.jpg;*.png".
</p>
<p>
Note: On Mac, setting the file extension filter affects how
app bundles are treated by the dialog. When a filter extension
having the app extension (.app) is selected, bundles are treated
as files. For all other extension filters, bundles are treated
as directories. When no filter extension is set, bundles are
treated as files.
</p>

@param extensions the file extension filter

@see #setFilterNames to specify the user-friendly
names corresponding to the extensions
------------
Set the 0-based index of the file extension filter
which the dialog will use initially to filter the files
it shows to the argument.
<p>
This is an index into the FilterExtensions array and
the FilterNames array.
</p>

@param index the file extension filter index

@see #setFilterExtensions
@see #setFilterNames

@since 3.4
------------
Sets the names that describe the filter extensions
which the dialog will use to filter the files it shows
to the argument, which may be null.
<p>
Each name is a user-friendly short description shown for
its corresponding filter. The <code>names</code> array must
be the same length as the <code>extensions</code> array.
</p>

@param names the list of filter names, or null for no filter names

@see #setFilterExtensions
------------
Sets the directory path that the dialog will use
to the argument, which may be null. File names in this
path will appear in the dialog, filtered according
to the filter extensions. If the string is null,
then the operating system's default filter path
will be used.
<p>
Note that the path string is platform dependent.
For convenience, either '/' or '\' can be used
as a path separator.
</p>

@param string the directory path

@see #setFilterExtensions
------------
Sets the flag that the dialog will use to
determine whether to prompt the user for file
overwrite if the selected file already exists.

@param overwrite true if the dialog will prompt for file overwrite, false otherwise

@since 3.4

====== FileFormat.java ======
Copyright (c) 2000, 2012 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Abstract factory class for loading/unloading images from files or streams
in various image file formats.
------------
Return whether or not the specified input stream
represents a supported file format.
------------
Read the specified input stream, and return the
device independent image array represented by the stream.
------------
Read the specified input stream using the specified loader, and
return the device independent image array represented by the stream.
------------
Write the device independent image array stored in the specified loader
to the specified output stream using the specified file format.
------------
Write the device independent image array stored in the specified loader
to the specified output stream.

====== FillData.java ======
Copyright (c) 2005 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation

====== FillLayout.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
<code>FillLayout</code> is the simplest layout class. It lays out
controls in a single row or column, forcing them to be the same size.
<p>
Initially, the controls will all be as tall as the tallest control,
and as wide as the widest. <code>FillLayout</code> does not wrap,
but you can specify margins and spacing. You might use it to
lay out buttons in a task bar or tool bar, or to stack checkboxes
in a <code>Group</code>. <code>FillLayout</code> can also be used
when a <code>Composite</code> only has one child. For example,
if a <code>Shell</code> has a single <code>Group</code> child,
<code>FillLayout</code> will cause the <code>Group</code> to
completely fill the <code>Shell</code> (if margins are 0).
</p>
<p>
Example code: first a <code>FillLayout</code> is created and
its type field is set, and then the layout is set into the
<code>Composite</code>. Note that in a <code>FillLayout</code>,
children are always the same size, and they fill all available space.
<pre>
FillLayout fillLayout = new FillLayout();
fillLayout.type = SWT.VERTICAL;
shell.setLayout(fillLayout);
</pre>
</p>

@see <a href="http://www.eclipse.org/swt/examples.php">SWT Example: LayoutExample</a>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
------------
type specifies how controls will be positioned
within the layout.
*
The default value is HORIZONTAL.
*
Possible values are: <ul>
   <li>HORIZONTAL: Position the controls horizontally from left to right</li>
   <li>VERTICAL: Position the controls vertically from top to bottom</li>
</ul>

public int type = SWT.HORIZONTAL;


marginWidth specifies the number of pixels of horizontal margin
that will be placed along the left and right edges of the layout.
*
The default value is 0.
*
@since 3.0

public int marginWidth = 0;


marginHeight specifies the number of pixels of vertical margin
that will be placed along the top and bottom edges of the layout.
*
The default value is 0.
*
@since 3.0

public int marginHeight = 0;


spacing specifies the number of pixels between the edge of one cell
and the edge of its neighbouring cell.
*
The default value is 0.
*
@since 3.0

public int spacing = 0;


Constructs a new instance of this class.
------------
Constructs a new instance of this class given the type.

@param type the type of fill layout

@since 2.0
------------
Returns a string containing a concise, human-readable
description of the receiver.

@return a string representation of the layout

====== FocusAdapter.java ======
Copyright (c) 2000, 2016 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
This adapter class provides default implementations for the
methods described by the <code>FocusListener</code> interface.
<p>
Classes that wish to deal with <code>FocusEvent</code>s can
extend this class and override only the methods which they are
interested in.
</p>

@see FocusListener
@see FocusEvent
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
------------
Sent when a control gets focus.
The default behavior is to do nothing.

@param e an event containing information about the focus change
------------
Sent when a control loses focus.
The default behavior is to do nothing.

@param e an event containing information about the focus change

====== FocusEvent.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class are sent as a result of
widgets gaining and losing focus.

@see FocusListener
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
------------
Constructs a new instance of this class based on the
information in the given untyped event.

@param e the untyped event containing the information

====== FocusListener.java ======
Copyright (c) 2000, 2016 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
Lars Vogel <Lars.Vogel@vogella.com> - Bug 506538
------------
Classes which implement this interface provide methods
that deal with the events that are generated as controls
gain and lose focus.
<p>
After creating an instance of a class that implements
this interface it can be added to a control using the
<code>addFocusListener</code> method and removed using
the <code>removeFocusListener</code> method. When a
control gains or loses focus, the appropriate method
will be invoked.
</p>

@see FocusAdapter
@see FocusEvent
------------
Sent when a control gets focus.

@param e an event containing information about the focus change
------------
Sent when a control loses focus.

@param e an event containing information about the focus change
------------
Static helper method to create a focus listener for the
{@link #focusGained(FocusEvent e)}) method with a lambda expression.

@param c the consumer of the event
@return FocusListener
@since 3.106

====== Font.java ======
Copyright (c) 2000, 2014 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class manage operating system resources that
define how text looks when it is displayed. Fonts may be constructed
by providing a device and either name, size and style information
or a <code>FontData</code> object which encapsulates this data.
<p>
Application code must explicitly invoke the <code>Font.dispose()</code>
method to release the operating system resources managed by each instance
when those instances are no longer required.
</p>

@see FontData
@see <a href="http://www.eclipse.org/swt/snippets/#font">Font snippets</a>
@see <a href="http://www.eclipse.org/swt/examples.php">SWT Examples: GraphicsExample, PaintExample</a>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
------------
the handle to the OS font resource
(Warning: This field is platform dependent)
<p>
<b>IMPORTANT:</b> This field is <em>not</em> part of the SWT
public API. It is marked public only so that it can be shared
within the packages provided by SWT. It is not available on all
platforms and should never be accessed from application code.
</p>
*
@noreference This field is not intended to be referenced by clients.

public long /*int*/ handle;


Prevents uninitialized instances from being created outside the package.
------------
Constructs a new font given a device and font data
which describes the desired font's appearance.
<p>
You must dispose the font when it is no longer required.
</p>

@param device the device to create the font on
@param fd the FontData that describes the desired font (must not be null)

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if device is null and there is no current device</li>
<li>ERROR_NULL_ARGUMENT - if the fd argument is null</li>
</ul>
@exception SWTError <ul>
<li>ERROR_NO_HANDLES - if a font could not be created from the given font data</li>
</ul>

@see #dispose()
------------
Constructs a new font given a device and an array
of font data which describes the desired font's
appearance.
<p>
You must dispose the font when it is no longer required.
</p>

@param device the device to create the font on
@param fds the array of FontData that describes the desired font (must not be null)

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if device is null and there is no current device</li>
<li>ERROR_NULL_ARGUMENT - if the fds argument is null</li>
<li>ERROR_INVALID_ARGUMENT - if the length of fds is zero</li>
<li>ERROR_NULL_ARGUMENT - if any fd in the array is null</li>
</ul>
@exception SWTError <ul>
<li>ERROR_NO_HANDLES - if a font could not be created from the given font data</li>
</ul>

@see #dispose()

@since 2.1
------------
Constructs a new font given a device, a font name,
the height of the desired font in points, and a font
style.
<p>
You must dispose the font when it is no longer required.
</p>

@param device the device to create the font on
@param name the name of the font (must not be null)
@param height the font height in points
@param style a bit or combination of NORMAL, BOLD, ITALIC

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if device is null and there is no current device</li>
<li>ERROR_NULL_ARGUMENT - if the name argument is null</li>
<li>ERROR_INVALID_ARGUMENT - if the height is negative</li>
</ul>
@exception SWTError <ul>
<li>ERROR_NO_HANDLES - if a font could not be created from the given arguments</li>
</ul>

@see #dispose()
------------
Compares the argument to the receiver, and returns true
if they represent the <em>same</em> object using a class
specific comparison.

@param object the object to compare with this object
@return <code>true</code> if the object is the same as this object and <code>false</code> otherwise

@see #hashCode
------------
Returns an array of <code>FontData</code>s representing the receiver.
On Windows, only one FontData will be returned per font. On X however,
a <code>Font</code> object <em>may</em> be composed of multiple X
fonts. To support this case, we return an array of font data objects.

@return an array of font data objects describing the receiver

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Returns an integer hash code for the receiver. Any two
objects that return <code>true</code> when passed to
<code>equals</code> must return the same value for this
method.

@return the receiver's hash

@see #equals
------------
Returns <code>true</code> if the font has been disposed,
and <code>false</code> otherwise.
<p>
This method gets the dispose state for the font.
When a font has been disposed, it is an error to
invoke any other method (except {@link #dispose()}) using the font.

@return <code>true</code> when the font is disposed and <code>false</code> otherwise
------------
Returns a string containing a concise, human-readable
description of the receiver.

@return a string representation of the receiver
------------
Invokes platform specific functionality to allocate a new font.
<p>
<b>IMPORTANT:</b> This method is <em>not</em> part of the public
API for <code>Font</code>. It is marked public only so that it
can be shared within the packages provided by SWT. It is not
available on all platforms, and should never be called from
application code.
</p>

@param device the device on which to allocate the color
@param handle the handle for the font
@return a new font object containing the specified device and handle

@noreference This method is not intended to be referenced by clients.

====== FontData.java ======
Copyright (c) 2000, 2012 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class describe operating system fonts.
<p>
For platform-independent behaviour, use the get and set methods
corresponding to the following properties:
<dl>
<dt>height</dt><dd>the height of the font in points</dd>
<dt>name</dt><dd>the face name of the font, which may include the foundry</dd>
<dt>style</dt><dd>A bitwise combination of NORMAL, ITALIC and BOLD</dd>
</dl>
If extra, platform-dependent functionality is required:
<ul>
<li>On <em>Windows</em>, the data member of the <code>FontData</code>
corresponds to a Windows <code>LOGFONT</code> structure whose fields
may be retrieved and modified.</li>
<li>On <em>X</em>, the fields of the <code>FontData</code> correspond
to the entries in the font's XLFD name and may be retrieved and modified.
</ul>
Application code does <em>not</em> need to explicitly release the
resources managed by each instance when those instances are no longer
required, and thus no <code>dispose()</code> method is provided.

@see Font
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
------------
A Win32 LOGFONT struct
(Warning: This field is platform dependent)
<p>
<b>IMPORTANT:</b> This field is <em>not</em> part of the SWT
public API. It is marked public only so that it can be shared
within the packages provided by SWT. It is not available on all
platforms and should never be accessed from application code.
</p>
*
@noreference This field is not intended to be referenced by clients.

public LOGFONT data;


The height of the font data in points
(Warning: This field is platform dependent)
<p>
<b>IMPORTANT:</b> This field is <em>not</em> part of the SWT
public API. It is marked public only so that it can be shared
within the packages provided by SWT. It is not available on all
platforms and should never be accessed from application code.
</p>
*
@noreference This field is not intended to be referenced by clients.

public float height;


The locales of the font

String lang, country, variant;


Constructs a new uninitialized font data.
------------
Constructs a new font data given the Windows <code>LOGFONT</code>
that it should represent.

@param data the <code>LOGFONT</code> for the result
------------
Constructs a new FontData given a string representation
in the form generated by the <code>FontData.toString</code>
method.
<p>
Note that the representation varies between platforms,
and a FontData can only be created from a string that was
generated on the same platform.
</p>

@param string the string representation of a <code>FontData</code> (must not be null)

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the argument is null</li>
<li>ERROR_INVALID_ARGUMENT - if the argument does not represent a valid description</li>
</ul>

@see #toString
------------
Constructs a new font data given a font name,
the height of the desired font in points,
and a font style.

@param name the name of the font (must not be null)
@param height the font height in points
@param style a bit or combination of NORMAL, BOLD, ITALIC

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - when the font name is null</li>
<li>ERROR_INVALID_ARGUMENT - if the height is negative</li>
</ul>
------------
Compares the argument to the receiver, and returns true
if they represent the <em>same</em> object using a class
specific comparison.

@param object the object to compare with this object
@return <code>true</code> if the object is the same as this object and <code>false</code> otherwise

@see #hashCode
------------
Returns the height of the receiver in points.

@return the height of this FontData

@see #setHeight(int)
------------
Returns the locale of the receiver.
<p>
The locale determines which platform character set this
font is going to use. Widgets and graphics operations that
use this font will convert UNICODE strings to the platform
character set of the specified locale.
</p>
<p>
On platforms where there are multiple character sets for a
given language/country locale, the variant portion of the
locale will determine the character set.
</p>

@return the <code>String</code> representing a Locale object
@since 3.0
------------
Returns the name of the receiver.
On platforms that support font foundries, the return value will
be the foundry followed by a dash ("-") followed by the face name.

@return the name of this <code>FontData</code>

@see #setName
------------
Returns the style of the receiver which is a bitwise OR of
one or more of the <code>SWT</code> constants NORMAL, BOLD
and ITALIC.

@return the style of this <code>FontData</code>

@see #setStyle
------------
Returns an integer hash code for the receiver. Any two
objects that return <code>true</code> when passed to
<code>equals</code> must return the same value for this
method.

@return the receiver's hash

@see #equals
------------
Sets the height of the receiver. The parameter is
specified in terms of points, where a point is one
seventy-second of an inch.

@param height the height of the <code>FontData</code>

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the height is negative</li>
</ul>

@see #getHeight
------------
Sets the locale of the receiver.
<p>
The locale determines which platform character set this
font is going to use. Widgets and graphics operations that
use this font will convert UNICODE strings to the platform
character set of the specified locale.
</p>
<p>
On platforms where there are multiple character sets for a
given language/country locale, the variant portion of the
locale will determine the character set.
</p>

@param locale the <code>String</code> representing a Locale object
@see java.util.Locale#toString
------------
Sets the name of the receiver.
<p>
Some platforms support font foundries. On these platforms, the name
of the font specified in setName() may have one of the following forms:
<ol>
<li>a face name (for example, "courier")</li>
<li>a foundry followed by a dash ("-") followed by a face name (for example, "adobe-courier")</li>
</ol>
In either case, the name returned from getName() will include the
foundry.
</p>
<p>
On platforms that do not support font foundries, only the face name
(for example, "courier") is used in <code>setName()</code> and
<code>getName()</code>.
</p>

@param name the name of the font data (must not be null)
@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - when the font name is null</li>
</ul>

@see #getName
------------
Sets the style of the receiver to the argument which must
be a bitwise OR of one or more of the <code>SWT</code>
constants NORMAL, BOLD and ITALIC.  All other style bits are
ignored.

@param style the new style for this <code>FontData</code>

@see #getStyle
------------
Returns a string representation of the receiver which is suitable
for constructing an equivalent instance using the
<code>FontData(String)</code> constructor.

@return a string representation of the FontData

@see FontData
------------
Invokes platform specific functionality to allocate a new font data.
<p>
<b>IMPORTANT:</b> This method is <em>not</em> part of the public
API for <code>FontData</code>. It is marked public only so that
it can be shared within the packages provided by SWT. It is not
available on all platforms, and should never be called from
application code.
</p>

@param data the <code>LOGFONT</code> for the font data
@param height the height of the font data
@return a new font data object containing the specified <code>LOGFONT</code> and height

@noreference This method is not intended to be referenced by clients.

====== FontDialog.java ======
Copyright (c) 2000, 2014 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class allow the user to select a font
from all available fonts in the system.
<dl>
<dt><b>Styles:</b></dt>
<dd>(none)</dd>
<dt><b>Events:</b></dt>
<dd>(none)</dd>
</dl>
<p>
IMPORTANT: This class is <em>not</em> intended to be subclassed.
</p>

@see <a href="http://www.eclipse.org/swt/examples.php">SWT Example: ControlExample, Dialog tab</a>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
@noextend This class is not intended to be subclassed by clients.
------------
Constructs a new instance of this class given only its parent.

@param parent a shell which will be the parent of the new instance

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>
------------
Constructs a new instance of this class given its parent
and a style value describing its behavior and appearance.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.
</p>

@param parent a shell which will be the parent of the new instance
@param style the style of dialog to construct

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>
------------
Returns <code>true</code> if the dialog's effects selection controls
are visible, and <code>false</code> otherwise.
<p>
If the platform's font dialog does not have any effects selection controls,
then this method always returns false.
</p>

@return <code>true</code> if the dialog's effects selection controls
are visible and <code>false</code> otherwise

@since 3.8
------------
Returns a FontData object describing the font that was
selected in the dialog, or null if none is available.

@return the FontData for the selected font, or null
@deprecated use #getFontList ()
------------
Returns a FontData set describing the font that was
selected in the dialog, or null if none is available.

@return the FontData for the selected font, or null
@since 2.1.1
------------
Returns an RGB describing the color that was selected
in the dialog, or null if none is available.

@return the RGB value for the selected color, or null

@see PaletteData#getRGBs

@since 2.1
------------
Makes the dialog visible and brings it to the front
of the display.

@return a FontData object describing the font that was selected,
or null if the dialog was cancelled or an error occurred

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the dialog has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the dialog</li>
</ul>
------------
Sets the effects selection controls in the dialog visible if the
argument is <code>true</code>, and invisible otherwise.
<p>
By default the effects selection controls are displayed if the
platform font dialog supports effects selection.
</p>

@param visible whether or not the dialog will show the effects selection controls

@since 3.8
------------
Sets a FontData object describing the font to be
selected by default in the dialog, or null to let
the platform choose one.

@param fontData the FontData to use initially, or null
@deprecated use #setFontList (FontData [])
------------
Sets the set of FontData objects describing the font to
be selected by default in the dialog, or null to let
the platform choose one.

@param fontData the set of FontData objects to use initially, or null
to let the platform select a default when open() is called

@see Font#getFontData

@since 2.1.1
------------
Sets the RGB describing the color to be selected by default
in the dialog, or null to let the platform choose one.

@param rgb the RGB value to use initially, or null to let
the platform select a default when open() is called

@see PaletteData#getRGBs

@since 2.1

====== FontMetrics.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class provide measurement information
about fonts including ascent, descent, height, leading
space between rows, and average character width.
<code>FontMetrics</code> are obtained from <code>GC</code>s
using the <code>getFontMetrics()</code> method.

@see GC#getFontMetrics
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
------------
On Windows, handle is a Win32 TEXTMETRIC struct
(Warning: This field is platform dependent)
<p>
<b>IMPORTANT:</b> This field is <em>not</em> part of the SWT
public API. It is marked public only so that it can be shared
within the packages provided by SWT. It is not available on all
platforms and should never be accessed from application code.
</p>
*
@noreference This field is not intended to be referenced by clients.

public TEXTMETRIC handle;


Prevents instances from being created outside the package.
------------
Compares the argument to the receiver, and returns true
if they represent the <em>same</em> object using a class
specific comparison.

@param object the object to compare with this object
@return <code>true</code> if the object is the same as this object and <code>false</code> otherwise

@see #hashCode
------------
Returns the ascent of the font described by the receiver. A
font's <em>ascent</em> is the distance from the baseline to the
top of actual characters, not including any of the leading area,
measured in pixels.

@return the ascent of the font
------------
Returns the average character width, measured in pixels,
of the font described by the receiver.

@return the average character width of the font
------------
Returns the descent of the font described by the receiver. A
font's <em>descent</em> is the distance from the baseline to the
bottom of actual characters, not including any of the leading area,
measured in pixels.

@return the descent of the font
------------
Returns the height of the font described by the receiver,
measured in pixels. A font's <em>height</em> is the sum of
its ascent, descent and leading area.

@return the height of the font

@see #getAscent
@see #getDescent
@see #getLeading
------------
Returns the leading area of the font described by the
receiver. A font's <em>leading area</em> is the space
above its ascent which may include accents or other marks.

@return the leading space of the font
------------
Returns an integer hash code for the receiver. Any two
objects that return <code>true</code> when passed to
<code>equals</code> must return the same value for this
method.

@return the receiver's hash

@see #equals
------------
Invokes platform specific functionality to allocate a new font metrics.
<p>
<b>IMPORTANT:</b> This method is <em>not</em> part of the public
API for <code>FontMetrics</code>. It is marked public only so that
it can be shared within the packages provided by SWT. It is not
available on all platforms, and should never be called from
application code.
</p>

@param handle the <code>TEXTMETRIC</code> containing information about a font
@return a new font metrics object containing the specified <code>TEXTMETRIC</code>

@noreference This method is not intended to be referenced by clients.

====== FormAttachment.java ======
Copyright (c) 2000, 2008 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class are used to define the edges of a control
within a <code>FormLayout</code>.
<p>
<code>FormAttachments</code> are set into the top, bottom, left,
and right fields of the <code>FormData</code> for a control.
For example:
<pre>
FormData data = new FormData();
data.top = new FormAttachment(0,5);
data.bottom = new FormAttachment(100,-5);
data.left = new FormAttachment(0,5);
data.right = new FormAttachment(100,-5);
button.setLayoutData(data);
</pre>
</p>
<p>
A <code>FormAttachment</code> defines where to attach the side of
a control by using the equation, y = ax + b. The "a" term represents
a fraction of the parent composite's width (from the left) or height
(from the top). It can be defined using a numerator and denominator,
or just a percentage value. If a percentage is used, the denominator
is set to 100. The "b" term in the equation represents an offset, in
pixels, from the attachment position. For example:
<pre>
FormAttachment attach = new FormAttachment (20, -5);
</pre>
specifies that the side to which the <code>FormAttachment</code>
object belongs will lie at 20% of the parent composite, minus 5 pixels.
</p>
<p>
Control sides can also be attached to another control.
For example:
<pre>
FormAttachment attach = new FormAttachment (button, 10);
</pre>
specifies that the side to which the <code>FormAttachment</code>
object belongs will lie in the same position as the adjacent side of
the <code>button</code> control, plus 10 pixels. The control side can
also be attached to the opposite side of the specified control.
For example:
<pre>
FormData data = new FormData ();
data.left = new FormAttachment (button, 0, SWT.LEFT);
</pre>
specifies that the left side of the control will lie in the same position
as the left side of the <code>button</code> control. The control can also
be attached in a position that will center the control on the specified
control. For example:
<pre>
data.left = new FormAttachment (button, 0, SWT.CENTER);
</pre>
specifies that the left side of the control will be positioned so that it is
centered between the left and right sides of the <code>button</code> control.
If the alignment is not specified, the default is to attach to the adjacent side.
</p>

@see FormLayout
@see FormData
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>

@since 2.0
------------
numerator specifies the numerator of the "a" term in the
equation, y = ax + b, which defines the attachment.

public int numerator;


denominator specifies the denominator of the "a" term in the
equation, y = ax + b, which defines the attachment.
*
The default value is 100.

public int denominator = 100;


offset specifies the offset, in pixels, of the control side
from the attachment position.
If the offset is positive, then the control side is offset
to the right of or below the attachment position. If it is
negative, then the control side is offset to the left of or
above the attachment position.
*
This is equivalent to the "b" term in the equation y = ax + b.
The default value is 0.

public int offset;


control specifies the control to which the control side is
attached.

public Control control;


alignment specifies the alignment of the control side that is
attached to a control.
<p>
For top and bottom attachments, TOP, BOTTOM and CENTER are used. For left
and right attachments, LEFT, RIGHT and CENTER are used. If any other case
occurs, the default will be used instead.
</p>
*
<br>Possible values are: <ul>
   <li>{@link SWT#TOP}: Attach the side to the top side of the specified control.</li>
   <li>{@link SWT#BOTTOM}: Attach the side to the bottom side of the specified control.</li>
   <li>{@link SWT#LEFT}: Attach the side to the left side of the specified control.</li>
   <li>{@link SWT#RIGHT}: Attach the side to the right side of the specified control.</li>
   <li>{@link SWT#CENTER}: Attach the side at a position which will center the control on the specified control.</li>
   <li>{@link SWT#DEFAULT}: Attach the side to the adjacent side of the specified control.</li>
</ul>

public int alignment;


Constructs a new instance of this class.
Since no numerator, denominator or offset is specified,
the attachment is treated as a percentage of the form.
The numerator is zero, the denominator is 100 and the
offset is zero.

@since 3.2
------------
Constructs a new instance of this class given a numerator
Since no denominator or offset is specified, the default
is to treat the numerator as a percentage of the form, with a
denominator of 100. The offset is zero.

@param numerator the percentage of the position

@since 3.0
------------
Constructs a new instance of this class given a numerator
and an offset. Since no denominator is specified, the default
is to treat the numerator as a percentage of the form, with a
denominator of 100.

@param numerator the percentage of the position
@param offset the offset of the side from the position
------------
Constructs a new instance of this class given a numerator
and denominator and an offset. The position of the side is
given by the fraction of the form defined by the numerator
and denominator.

@param numerator the numerator of the position
@param denominator the denominator of the position
@param offset the offset of the side from the position
------------
Constructs a new instance of this class given a control.
Since no alignment is specified, the default alignment is
to attach the side to the adjacent side of the specified
control. Since no offset is specified, an offset of 0 is
used.

@param control the control the side is attached to
------------
Constructs a new instance of this class given a control
and an offset. Since no alignment is specified, the default
alignment is to attach the side to the adjacent side of the
specified control.

@param control the control the side is attached to
@param offset the offset of the side from the control
------------
Constructs a new instance of this class given a control,
an offset and an alignment.  The possible alignment values are:
<dl>
<dt><b>{@link SWT#TOP}</b></dt>
<dd>the side will be attached to the top side of the specified control</dd>
<dt><b>{@link SWT#BOTTOM}</b></dt>
<dd>the side will be attached to the bottom side of the specified control</dd>
<dt><b>{@link SWT#LEFT}</b></dt>
<dd>the side will be attached to the left side of the specified control</dd>
<dt><b>{@link SWT#RIGHT}</b></dt>
<dd>the side will be attached to the right side of the specified control</dd>
<dt><b>{@link SWT#CENTER}</b></dt>
<dd>the side will be centered on the same side of the specified control</dd>
<dt><b>{@link SWT#DEFAULT}</b></dt>
<dd>the side will be attached to the adjacent side of the specified control</dd>
</dl>

@param control the control the side is attached to
@param offset the offset of the side from the control
@param alignment the alignment of the side to the control it is attached to,
one of TOP, BOTTOM, LEFT, RIGHT, CENTER, or DEFAULT
------------
Returns a string containing a concise, human-readable
description of the receiver.

@return a string representation of the FormAttachment

====== FormData.java ======
Copyright (c) 2000, 2008 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class are used to define the attachments
of a control in a <code>FormLayout</code>.
<p>
To set a <code>FormData</code> object into a control, you use the
<code>setLayoutData ()</code> method. To define attachments for the
<code>FormData</code>, set the fields directly, like this:
<pre>
FormData data = new FormData();
data.left = new FormAttachment(0,5);
data.right = new FormAttachment(100,-5);
button.setLayoutData(formData);
</pre>
</p>
<p>
<code>FormData</code> contains the <code>FormAttachments</code> for
each edge of the control that the <code>FormLayout</code> uses to
determine the size and position of the control. <code>FormData</code>
objects also allow you to set the width and height of controls within
a <code>FormLayout</code>.
</p>

@see FormLayout
@see FormAttachment
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>

@since 2.0
------------
width specifies the preferred width in pixels. This value
is the wHint passed into Control.computeSize(int, int, boolean)
to determine the preferred size of the control.
*
The default value is SWT.DEFAULT.
*
@see Control#computeSize(int, int, boolean)

public int width = SWT.DEFAULT;

height specifies the preferred height in pixels. This value
is the hHint passed into Control.computeSize(int, int, boolean)
to determine the preferred size of the control.
*
The default value is SWT.DEFAULT.
*
@see Control#computeSize(int, int, boolean)

public int height = SWT.DEFAULT;

left specifies the attachment of the left side of
the control.

public FormAttachment left;

right specifies the attachment of the right side of
the control.

public FormAttachment right;

top specifies the attachment of the top of the control.

public FormAttachment top;

bottom specifies the attachment of the bottom of the
control.

public FormAttachment bottom;

int cacheWidth = -1, cacheHeight = -1;
int defaultWhint, defaultHhint, defaultWidth = -1, defaultHeight = -1;
int currentWhint, currentHhint, currentWidth = -1, currentHeight = -1;
FormAttachment cacheLeft, cacheRight, cacheTop, cacheBottom;
boolean isVisited, needed;


Constructs a new instance of FormData using
default values.
------------
Constructs a new instance of FormData according to the parameters.
A value of SWT.DEFAULT indicates that no minimum width or
no minimum height is specified.

@param width a minimum width for the control
@param height a minimum height for the control
------------
Returns a string containing a concise, human-readable
description of the receiver.

@return a string representation of the FormData object

====== FormLayout.java ======
Copyright (c) 2000, 2008 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class control the position and size of the
children of a composite control by using <code>FormAttachments</code>
to optionally configure the left, top, right and bottom edges of
each child.
<p>
The following example code creates a <code>FormLayout</code> and then sets
it into a <code>Shell</code>:
<pre>
Display display = new Display ();
Shell shell = new Shell(display);
FormLayout layout = new FormLayout();
layout.marginWidth = 3;
layout.marginHeight = 3;
shell.setLayout(layout);
</pre>
</p>
<p>
To use a <code>FormLayout</code>, create a <code>FormData</code> with
<code>FormAttachment</code> for each child of <code>Composite</code>.
The following example code attaches <code>button1</code> to the top
and left edge of the composite and <code>button2</code> to the right
edge of <code>button1</code> and the top and right edges of the
composite:
<pre>
FormData data1 = new FormData();
data1.left = new FormAttachment(0, 0);
data1.top = new FormAttachment(0, 0);
button1.setLayoutData(data1);
FormData data2 = new FormData();
data2.left = new FormAttachment(button1);
data2.top = new FormAttachment(0, 0);
data2.right = new FormAttachment(100, 0);
button2.setLayoutData(data2);
</pre>
</p>
<p>
Each side of a child control can be attached to a position in the parent
composite, or to other controls within the <code>Composite</code> by
creating instances of <code>FormAttachment</code> and setting them into
the top, bottom, left, and right fields of the child's <code>FormData</code>.
</p>
<p>
If a side is not given an attachment, it is defined as not being attached
to anything, causing the child to remain at its preferred size.  If a child
is given no attachment on either the left or the right or top or bottom, it is
automatically attached to the left and top of the composite respectively.
The following code positions <code>button1</code> and <code>button2</code>
but relies on default attachments:
<pre>
FormData data2 = new FormData();
data2.left = new FormAttachment(button1);
data2.right = new FormAttachment(100, 0);
button2.setLayoutData(data2);
</pre>
</p>
<p>
IMPORTANT: Do not define circular attachments.  For example, do not attach
the right edge of <code>button1</code> to the left edge of <code>button2</code>
and then attach the left edge of <code>button2</code> to the right edge of
<code>button1</code>.  This will over constrain the layout, causing undefined
behavior.  The algorithm will terminate, but the results are undefined.
</p>

@see FormData
@see FormAttachment
@see <a href="http://www.eclipse.org/swt/snippets/#formlayout">FormLayout snippets</a>
@see <a href="http://www.eclipse.org/swt/examples.php">SWT Example: LayoutExample</a>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>

@since 2.0
------------
marginWidth specifies the number of pixels of horizontal margin
that will be placed along the left and right edges of the layout.
*
The default value is 0.

public int marginWidth = 0;


marginHeight specifies the number of pixels of vertical margin
that will be placed along the top and bottom edges of the layout.
*
The default value is 0.

public int marginHeight = 0;


marginLeft specifies the number of pixels of horizontal margin
that will be placed along the left edge of the layout.
*
The default value is 0.
*
@since 3.1

public int marginLeft = 0;


marginTop specifies the number of pixels of vertical margin
that will be placed along the top edge of the layout.
*
The default value is 0.
*
@since 3.1

public int marginTop = 0;


marginRight specifies the number of pixels of horizontal margin
that will be placed along the right edge of the layout.
*
The default value is 0.
*
@since 3.1

public int marginRight = 0;


marginBottom specifies the number of pixels of vertical margin
that will be placed along the bottom edge of the layout.
*
The default value is 0.
*
@since 3.1

public int marginBottom = 0;


spacing specifies the number of pixels between the edge of one control
and the edge of its neighbouring control.
*
The default value is 0.
*
@since 3.0

public int spacing = 0;


Constructs a new instance of this class.
------------
Returns a string containing a concise, human-readable
description of the receiver.

@return a string representation of the layout

====== GC.java ======
Copyright (c) 2000, 2016 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Class <code>GC</code> is where all of the drawing capabilities that are
supported by SWT are located. Instances are used to draw on either an
<code>Image</code>, a <code>Control</code>, or directly on a <code>Display</code>.
<dl>
<dt><b>Styles:</b></dt>
<dd>LEFT_TO_RIGHT, RIGHT_TO_LEFT</dd>
</dl>

<p>
The SWT drawing coordinate system is the two-dimensional space with the origin
(0,0) at the top left corner of the drawing area and with (x,y) values increasing
to the right and downward respectively.
</p>

<p>
The result of drawing on an image that was created with an indexed
palette using a color that is not in the palette is platform specific.
Some platforms will match to the nearest color while other will draw
the color itself. This happens because the allocated image might use
a direct palette on platforms that do not support indexed palette.
</p>

<p>
Application code must explicitly invoke the <code>GC.dispose()</code>
method to release the operating system resources managed by each instance
when those instances are no longer required. This is <em>particularly</em>
important on Windows95 and Windows98 where the operating system has a limited
number of device contexts available.
</p>

<p>
Note: Only one of LEFT_TO_RIGHT and RIGHT_TO_LEFT may be specified.
</p>

@see org.eclipse.swt.events.PaintEvent
@see <a href="http://www.eclipse.org/swt/snippets/#gc">GC snippets</a>
@see <a href="http://www.eclipse.org/swt/examples.php">SWT Examples: GraphicsExample, PaintExample</a>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
------------
the handle to the OS device context
(Warning: This field is platform dependent)
<p>
<b>IMPORTANT:</b> This field is <em>not</em> part of the SWT
public API. It is marked public only so that it can be shared
within the packages provided by SWT. It is not available on all
platforms and should never be accessed from application code.
</p>
*
@noreference This field is not intended to be referenced by clients.

public long /*int*/ handle;

Drawable drawable;
GCData data;

static final int FOREGROUND = 1 << 0;
static final int BACKGROUND = 1 << 1;
static final int FONT = 1 << 2;
static final int LINE_STYLE = 1 << 3;
static final int LINE_WIDTH = 1 << 4;
static final int LINE_CAP = 1 << 5;
static final int LINE_JOIN = 1 << 6;
static final int LINE_MITERLIMIT = 1 << 7;
static final int FOREGROUND_TEXT = 1 << 8;
static final int BACKGROUND_TEXT = 1 << 9;
static final int BRUSH = 1 << 10;
static final int PEN = 1 << 11;
static final int NULL_BRUSH = 1 << 12;
static final int NULL_PEN = 1 << 13;
static final int DRAW_OFFSET = 1 << 14;

static final int DRAW = FOREGROUND | LINE_STYLE | LINE_WIDTH | LINE_CAP | LINE_JOIN | LINE_MITERLIMIT | PEN | NULL_BRUSH | DRAW_OFFSET;
static final int FILL = BACKGROUND | BRUSH | NULL_PEN;

static final float[] LINE_DOT_ZERO = new float[]{3, 3};
static final float[] LINE_DASH_ZERO = new float[]{18, 6};
static final float[] LINE_DASHDOT_ZERO = new float[]{9, 6, 3, 6};
static final float[] LINE_DASHDOTDOT_ZERO = new float[]{9, 3, 3, 3, 3, 3};


Prevents uninitialized instances from being created outside the package.
------------
Constructs a new instance of this class which has been
configured to draw on the specified drawable. Sets the
foreground color, background color and font in the GC
to match those in the drawable.
<p>
You must dispose the graphics context when it is no longer required.
</p>
@param drawable the drawable to draw on
@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the drawable is null</li>
<li>ERROR_NULL_ARGUMENT - if there is no current device</li>
<li>ERROR_INVALID_ARGUMENT
- if the drawable is an image that is not a bitmap or an icon
- if the drawable is an image or printer that is already selected
into another graphics context</li>
</ul>
@exception SWTError <ul>
<li>ERROR_NO_HANDLES if a handle could not be obtained for GC creation</li>
<li>ERROR_THREAD_INVALID_ACCESS if not called from the thread that created the drawable</li>
</ul>
@see #dispose()
------------
Constructs a new instance of this class which has been
configured to draw on the specified drawable. Sets the
foreground color, background color and font in the GC
to match those in the drawable.
<p>
You must dispose the graphics context when it is no longer required.
</p>

@param drawable the drawable to draw on
@param style the style of GC to construct

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the drawable is null</li>
<li>ERROR_NULL_ARGUMENT - if there is no current device</li>
<li>ERROR_INVALID_ARGUMENT
- if the drawable is an image that is not a bitmap or an icon
- if the drawable is an image or printer that is already selected
into another graphics context</li>
</ul>
@exception SWTError <ul>
<li>ERROR_NO_HANDLES if a handle could not be obtained for GC creation</li>
<li>ERROR_THREAD_INVALID_ACCESS if not called from the thread that created the drawable</li>
</ul>

@see #dispose()

@since 2.1.2
------------
Copies a rectangular area of the receiver at the specified
position into the image, which must be of type <code>SWT.BITMAP</code>.

@param image the image to copy into
@param x the x coordinate in the receiver of the area to be copied
@param y the y coordinate in the receiver of the area to be copied

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the image is null</li>
<li>ERROR_INVALID_ARGUMENT - if the image is not a bitmap or has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Copies a rectangular area of the receiver at the source
position onto the receiver at the destination position.

@param srcX the x coordinate in the receiver of the area to be copied
@param srcY the y coordinate in the receiver of the area to be copied
@param width the width of the area to copy
@param height the height of the area to copy
@param destX the x coordinate in the receiver of the area to copy to
@param destY the y coordinate in the receiver of the area to copy to

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Copies a rectangular area of the receiver at the source
position onto the receiver at the destination position.

@param srcX the x coordinate in the receiver of the area to be copied
@param srcY the y coordinate in the receiver of the area to be copied
@param width the width of the area to copy
@param height the height of the area to copy
@param destX the x coordinate in the receiver of the area to copy to
@param destY the y coordinate in the receiver of the area to copy to
@param paint if <code>true</code> paint events will be generated for old and obscured areas

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@since 3.1
------------
Disposes of the operating system resources associated with
the graphics context. Applications must dispose of all GCs
which they allocate.

@exception SWTError <ul>
<li>ERROR_THREAD_INVALID_ACCESS if not called from the thread that created the drawable</li>
</ul>
------------
Draws the outline of a circular or elliptical arc
within the specified rectangular area.
<p>
The resulting arc begins at <code>startAngle</code> and extends
for <code>arcAngle</code> degrees, using the current color.
Angles are interpreted such that 0 degrees is at the 3 o'clock
position. A positive value indicates a counter-clockwise rotation
while a negative value indicates a clockwise rotation.
</p><p>
The center of the arc is the center of the rectangle whose origin
is (<code>x</code>, <code>y</code>) and whose size is specified by the
<code>width</code> and <code>height</code> arguments.
</p><p>
The resulting arc covers an area <code>width + 1</code> pixels wide
by <code>height + 1</code> pixels tall.
</p>

@param x the x coordinate of the upper-left corner of the arc to be drawn
@param y the y coordinate of the upper-left corner of the arc to be drawn
@param width the width of the arc to be drawn
@param height the height of the arc to be drawn
@param startAngle the beginning angle
@param arcAngle the angular extent of the arc, relative to the start angle

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Draws a rectangle, based on the specified arguments, which has
the appearance of the platform's <em>focus rectangle</em> if the
platform supports such a notion, and otherwise draws a simple
rectangle in the receiver's foreground color.

@param x the x coordinate of the rectangle
@param y the y coordinate of the rectangle
@param width the width of the rectangle
@param height the height of the rectangle

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@see #drawRectangle(int, int, int, int)
------------
Draws the given image in the receiver at the specified
coordinates.

@param image the image to draw
@param x the x coordinate of where to draw
@param y the y coordinate of where to draw

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the image is null</li>
<li>ERROR_INVALID_ARGUMENT - if the image has been disposed</li>
<li>ERROR_INVALID_ARGUMENT - if the given coordinates are outside the bounds of the image</li>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
@exception SWTError <ul>
<li>ERROR_NO_HANDLES - if no handles are available to perform the operation</li>
</ul>
------------
Copies a rectangular area from the source image into a (potentially
different sized) rectangular area in the receiver. If the source
and destination areas are of differing sizes, then the source
area will be stretched or shrunk to fit the destination area
as it is copied. The copy fails if any part of the source rectangle
lies outside the bounds of the source image, or if any of the width
or height arguments are negative.

@param image the source image
@param srcX the x coordinate in the source image to copy from
@param srcY the y coordinate in the source image to copy from
@param srcWidth the width in points to copy from the source
@param srcHeight the height in points to copy from the source
@param destX the x coordinate in the destination to copy to
@param destY the y coordinate in the destination to copy to
@param destWidth the width in points of the destination rectangle
@param destHeight the height in points of the destination rectangle

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the image is null</li>
<li>ERROR_INVALID_ARGUMENT - if the image has been disposed</li>
<li>ERROR_INVALID_ARGUMENT - if any of the width or height arguments are negative.
<li>ERROR_INVALID_ARGUMENT - if the source rectangle is not contained within the bounds of the source image</li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
@exception SWTError <ul>
<li>ERROR_NO_HANDLES - if no handles are available to perform the operation</li>
</ul>
------------
Draws a line, using the foreground color, between the points
(<code>x1</code>, <code>y1</code>) and (<code>x2</code>, <code>y2</code>).

@param x1 the first point's x coordinate
@param y1 the first point's y coordinate
@param x2 the second point's x coordinate
@param y2 the second point's y coordinate

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Draws the outline of an oval, using the foreground color,
within the specified rectangular area.
<p>
The result is a circle or ellipse that fits within the
rectangle specified by the <code>x</code>, <code>y</code>,
<code>width</code>, and <code>height</code> arguments.
</p><p>
The oval covers an area that is <code>width + 1</code>
pixels wide and <code>height + 1</code> pixels tall.
</p>

@param x the x coordinate of the upper left corner of the oval to be drawn
@param y the y coordinate of the upper left corner of the oval to be drawn
@param width the width of the oval to be drawn
@param height the height of the oval to be drawn

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Draws the path described by the parameter.
<p>
This operation requires the operating system's advanced
graphics subsystem which may not be available on some
platforms.
</p>

@param path the path to draw

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parameter is null</li>
<li>ERROR_INVALID_ARGUMENT - if the parameter has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_NO_GRAPHICS_LIBRARY - if advanced graphics are not available</li>
</ul>

@see Path

@since 3.1
------------
Draws a pixel, using the foreground color, at the specified
point (<code>x</code>, <code>y</code>).
<p>
Note that the receiver's line attributes do not affect this
operation.
</p>

@param x the point's x coordinate
@param y the point's y coordinate

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@since 3.0
------------
Draws the closed polygon which is defined by the specified array
of integer coordinates, using the receiver's foreground color. The array
contains alternating x and y values which are considered to represent
points which are the vertices of the polygon. Lines are drawn between
each consecutive pair, and between the first pair and last pair in the
array.

@param pointArray an array of alternating x and y values which are the vertices of the polygon

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT if pointArray is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Draws the polyline which is defined by the specified array
of integer coordinates, using the receiver's foreground color. The array
contains alternating x and y values which are considered to represent
points which are the corners of the polyline. Lines are drawn between
each consecutive pair, but not between the first pair and last pair in
the array.

@param pointArray an array of alternating x and y values which are the corners of the polyline

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the point array is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Draws the outline of the rectangle specified by the arguments,
using the receiver's foreground color. The left and right edges
of the rectangle are at <code>x</code> and <code>x + width</code>.
The top and bottom edges are at <code>y</code> and <code>y + height</code>.

@param x the x coordinate of the rectangle to be drawn
@param y the y coordinate of the rectangle to be drawn
@param width the width of the rectangle to be drawn
@param height the height of the rectangle to be drawn

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Draws the outline of the specified rectangle, using the receiver's
foreground color. The left and right edges of the rectangle are at
<code>rect.x</code> and <code>rect.x + rect.width</code>. The top
and bottom edges are at <code>rect.y</code> and
<code>rect.y + rect.height</code>.

@param rect the rectangle to draw

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the rectangle is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Draws the outline of the round-cornered rectangle specified by
the arguments, using the receiver's foreground color. The left and
right edges of the rectangle are at <code>x</code> and <code>x + width</code>.
The top and bottom edges are at <code>y</code> and <code>y + height</code>.
The <em>roundness</em> of the corners is specified by the
<code>arcWidth</code> and <code>arcHeight</code> arguments, which
are respectively the width and height of the ellipse used to draw
the corners.

@param x the x coordinate of the rectangle to be drawn
@param y the y coordinate of the rectangle to be drawn
@param width the width of the rectangle to be drawn
@param height the height of the rectangle to be drawn
@param arcWidth the width of the arc
@param arcHeight the height of the arc

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Draws the given string, using the receiver's current font and
foreground color. No tab expansion or carriage return processing
will be performed. The background of the rectangular area where
the string is being drawn will be filled with the receiver's
background color.

@param string the string to be drawn
@param x the x coordinate of the top left corner of the rectangular area where the string is to be drawn
@param y the y coordinate of the top left corner of the rectangular area where the string is to be drawn

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the string is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Draws the given string, using the receiver's current font and
foreground color. No tab expansion or carriage return processing
will be performed. If <code>isTransparent</code> is <code>true</code>,
then the background of the rectangular area where the string is being
drawn will not be modified, otherwise it will be filled with the
receiver's background color.

@param string the string to be drawn
@param x the x coordinate of the top left corner of the rectangular area where the string is to be drawn
@param y the y coordinate of the top left corner of the rectangular area where the string is to be drawn
@param isTransparent if <code>true</code> the background will be transparent, otherwise it will be opaque

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the string is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Draws the given string, using the receiver's current font and
foreground color. Tab expansion and carriage return processing
are performed. The background of the rectangular area where
the text is being drawn will be filled with the receiver's
background color.

@param string the string to be drawn
@param x the x coordinate of the top left corner of the rectangular area where the text is to be drawn
@param y the y coordinate of the top left corner of the rectangular area where the text is to be drawn

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the string is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Draws the given string, using the receiver's current font and
foreground color. Tab expansion and carriage return processing
are performed. If <code>isTransparent</code> is <code>true</code>,
then the background of the rectangular area where the text is being
drawn will not be modified, otherwise it will be filled with the
receiver's background color.

@param string the string to be drawn
@param x the x coordinate of the top left corner of the rectangular area where the text is to be drawn
@param y the y coordinate of the top left corner of the rectangular area where the text is to be drawn
@param isTransparent if <code>true</code> the background will be transparent, otherwise it will be opaque

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the string is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Draws the given string, using the receiver's current font and
foreground color. Tab expansion, line delimiter and mnemonic
processing are performed according to the specified flags. If
<code>flags</code> includes <code>DRAW_TRANSPARENT</code>,
then the background of the rectangular area where the text is being
drawn will not be modified, otherwise it will be filled with the
receiver's background color.
<p>
The parameter <code>flags</code> may be a combination of:
<dl>
<dt><b>DRAW_DELIMITER</b></dt>
<dd>draw multiple lines</dd>
<dt><b>DRAW_TAB</b></dt>
<dd>expand tabs</dd>
<dt><b>DRAW_MNEMONIC</b></dt>
<dd>underline the mnemonic character</dd>
<dt><b>DRAW_TRANSPARENT</b></dt>
<dd>transparent background</dd>
</dl>
</p>

@param string the string to be drawn
@param x the x coordinate of the top left corner of the rectangular area where the text is to be drawn
@param y the y coordinate of the top left corner of the rectangular area where the text is to be drawn
@param flags the flags specifying how to process the text

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the string is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Compares the argument to the receiver, and returns true
if they represent the <em>same</em> object using a class
specific comparison.

@param object the object to compare with this object
@return <code>true</code> if the object is the same as this object and <code>false</code> otherwise

@see #hashCode
------------
Fills the interior of a circular or elliptical arc within
the specified rectangular area, with the receiver's background
color.
<p>
The resulting arc begins at <code>startAngle</code> and extends
for <code>arcAngle</code> degrees, using the current color.
Angles are interpreted such that 0 degrees is at the 3 o'clock
position. A positive value indicates a counter-clockwise rotation
while a negative value indicates a clockwise rotation.
</p><p>
The center of the arc is the center of the rectangle whose origin
is (<code>x</code>, <code>y</code>) and whose size is specified by the
<code>width</code> and <code>height</code> arguments.
</p><p>
The resulting arc covers an area <code>width + 1</code> pixels wide
by <code>height + 1</code> pixels tall.
</p>

@param x the x coordinate of the upper-left corner of the arc to be filled
@param y the y coordinate of the upper-left corner of the arc to be filled
@param width the width of the arc to be filled
@param height the height of the arc to be filled
@param startAngle the beginning angle
@param arcAngle the angular extent of the arc, relative to the start angle

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@see #drawArc
------------
Fills the interior of the specified rectangle with a gradient
sweeping from left to right or top to bottom progressing
from the receiver's foreground color to its background color.

@param x the x coordinate of the rectangle to be filled
@param y the y coordinate of the rectangle to be filled
@param width the width of the rectangle to be filled, may be negative
(inverts direction of gradient if horizontal)
@param height the height of the rectangle to be filled, may be negative
(inverts direction of gradient if vertical)
@param vertical if true sweeps from top to bottom, else
sweeps from left to right

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@see #drawRectangle(int, int, int, int)
------------
Fills the interior of an oval, within the specified
rectangular area, with the receiver's background
color.

@param x the x coordinate of the upper left corner of the oval to be filled
@param y the y coordinate of the upper left corner of the oval to be filled
@param width the width of the oval to be filled
@param height the height of the oval to be filled

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@see #drawOval
------------
Fills the path described by the parameter.
<p>
This operation requires the operating system's advanced
graphics subsystem which may not be available on some
platforms.
</p>

@param path the path to fill

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parameter is null</li>
<li>ERROR_INVALID_ARGUMENT - if the parameter has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_NO_GRAPHICS_LIBRARY - if advanced graphics are not available</li>
</ul>

@see Path

@since 3.1
------------
Fills the interior of the closed polygon which is defined by the
specified array of integer coordinates, using the receiver's
background color. The array contains alternating x and y values
which are considered to represent points which are the vertices of
the polygon. Lines are drawn between each consecutive pair, and
between the first pair and last pair in the array.

@param pointArray an array of alternating x and y values which are the vertices of the polygon

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT if pointArray is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@see #drawPolygon
------------
Fills the interior of the rectangle specified by the arguments,
using the receiver's background color.

@param x the x coordinate of the rectangle to be filled
@param y the y coordinate of the rectangle to be filled
@param width the width of the rectangle to be filled
@param height the height of the rectangle to be filled

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@see #drawRectangle(int, int, int, int)
------------
Fills the interior of the specified rectangle, using the receiver's
background color.

@param rect the rectangle to be filled

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the rectangle is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@see #drawRectangle(int, int, int, int)
------------
Fills the interior of the round-cornered rectangle specified by
the arguments, using the receiver's background color.

@param x the x coordinate of the rectangle to be filled
@param y the y coordinate of the rectangle to be filled
@param width the width of the rectangle to be filled
@param height the height of the rectangle to be filled
@param arcWidth the width of the arc
@param arcHeight the height of the arc

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@see #drawRoundRectangle
------------
Returns the <em>advance width</em> of the specified character in
the font which is currently selected into the receiver.
<p>
The advance width is defined as the horizontal distance the cursor
should move after printing the character in the selected font.
</p>

@param ch the character to measure
@return the distance in the x direction to move past the character before painting the next

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Returns <code>true</code> if receiver is using the operating system's
advanced graphics subsystem.  Otherwise, <code>false</code> is returned
to indicate that normal graphics are in use.
<p>
Advanced graphics may not be installed for the operating system.  In this
case, <code>false</code> is always returned.  Some operating system have
only one graphics subsystem.  If this subsystem supports advanced graphics,
then <code>true</code> is always returned.  If any graphics operation such
as alpha, antialias, patterns, interpolation, paths, clipping or transformation
has caused the receiver to switch from regular to advanced graphics mode,
<code>true</code> is returned.  If the receiver has been explicitly switched
to advanced mode and this mode is supported, <code>true</code> is returned.
</p>

@return the advanced value

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@see #setAdvanced

@since 3.1
------------
Returns the receiver's alpha value. The alpha value
is between 0 (transparent) and 255 (opaque).

@return the alpha value

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@since 3.1
------------
Returns the receiver's anti-aliasing setting value, which will be
one of <code>SWT.DEFAULT</code>, <code>SWT.OFF</code> or
<code>SWT.ON</code>. Note that this controls anti-aliasing for all
<em>non-text drawing</em> operations.

@return the anti-aliasing setting

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@see #getTextAntialias

@since 3.1
------------
Returns the background color.

@return the receiver's background color

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Returns the background pattern. The default value is
<code>null</code>.

@return the receiver's background pattern

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@see Pattern

@since 3.1
------------
Returns the width of the specified character in the font
selected into the receiver.
<p>
The width is defined as the space taken up by the actual
character, not including the leading and tailing whitespace
or overhang.
</p>

@param ch the character to measure
@return the width of the character

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Returns the bounding rectangle of the receiver's clipping
region. If no clipping region is set, the return value
will be a rectangle which covers the entire bounds of the
object the receiver is drawing on.

@return the bounding rectangle of the clipping region

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Sets the region managed by the argument to the current
clipping region of the receiver.

@param region the region to fill with the clipping region

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the region is null</li>
<li>ERROR_INVALID_ARGUMENT - if the region is disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Returns the receiver's fill rule, which will be one of
<code>SWT.FILL_EVEN_ODD</code> or <code>SWT.FILL_WINDING</code>.

@return the receiver's fill rule

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@since 3.1
------------
Returns the font currently being used by the receiver
to draw and measure text.

@return the receiver's font

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Returns a FontMetrics which contains information
about the font currently being used by the receiver
to draw and measure text.

@return font metrics for the receiver's font

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Returns the receiver's foreground color.

@return the color used for drawing foreground things

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Returns the foreground pattern. The default value is
<code>null</code>.

@return the receiver's foreground pattern

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@see Pattern

@since 3.1
------------
Returns the GCData.
<p>
<b>IMPORTANT:</b> This method is <em>not</em> part of the public
API for <code>GC</code>. It is marked public only so that it
can be shared within the packages provided by SWT. It is not
available on all platforms, and should never be called from
application code.
</p>

@return the receiver's GCData

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@see GCData

@noreference This method is not intended to be referenced by clients.

@since 3.2
------------
Returns the receiver's interpolation setting, which will be one of
<code>SWT.DEFAULT</code>, <code>SWT.NONE</code>,
<code>SWT.LOW</code> or <code>SWT.HIGH</code>.

@return the receiver's interpolation setting

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@since 3.1
------------
Returns the receiver's line attributes.

@return the line attributes used for drawing lines

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@since 3.3
------------
Returns the receiver's line cap style, which will be one
of the constants <code>SWT.CAP_FLAT</code>, <code>SWT.CAP_ROUND</code>,
or <code>SWT.CAP_SQUARE</code>.

@return the cap style used for drawing lines

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@since 3.1
------------
Returns the receiver's line dash style. The default value is
<code>null</code>.

@return the line dash style used for drawing lines

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@since 3.1
------------
Returns the receiver's line join style, which will be one
of the constants <code>SWT.JOIN_MITER</code>, <code>SWT.JOIN_ROUND</code>,
or <code>SWT.JOIN_BEVEL</code>.

@return the join style used for drawing lines

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@since 3.1
------------
Returns the receiver's line style, which will be one
of the constants <code>SWT.LINE_SOLID</code>, <code>SWT.LINE_DASH</code>,
<code>SWT.LINE_DOT</code>, <code>SWT.LINE_DASHDOT</code> or
<code>SWT.LINE_DASHDOTDOT</code>.

@return the style used for drawing lines

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Returns the width that will be used when drawing lines
for all of the figure drawing operations (that is,
<code>drawLine</code>, <code>drawRectangle</code>,
<code>drawPolyline</code>, and so forth.

@return the receiver's line width

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Returns the receiver's style information.
<p>
Note that the value which is returned by this method <em>may
not match</em> the value which was provided to the constructor
when the receiver was created. This can occur when the underlying
operating system does not support a particular combination of
requested styles.
</p>

@return the style bits

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@since 2.1.2
------------
Returns the receiver's text drawing anti-aliasing setting value,
which will be one of <code>SWT.DEFAULT</code>, <code>SWT.OFF</code> or
<code>SWT.ON</code>. Note that this controls anti-aliasing
<em>only</em> for text drawing operations.

@return the anti-aliasing setting

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@see #getAntialias

@since 3.1
------------
Sets the parameter to the transform that is currently being
used by the receiver.

@param transform the destination to copy the transform into

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parameter is null</li>
<li>ERROR_INVALID_ARGUMENT - if the parameter has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@see Transform

@since 3.1
------------
Returns <code>true</code> if this GC is drawing in the mode
where the resulting color in the destination is the
<em>exclusive or</em> of the color values in the source
and the destination, and <code>false</code> if it is
drawing in the mode where the destination color is being
replaced with the source color value.

@return <code>true</code> true if the receiver is in XOR mode, and false otherwise

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Returns an integer hash code for the receiver. Any two
objects that return <code>true</code> when passed to
<code>equals</code> must return the same value for this
method.

@return the receiver's hash

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@see #equals
------------
Returns <code>true</code> if the receiver has a clipping
region set into it, and <code>false</code> otherwise.
If this method returns false, the receiver will draw on all
available space in the destination. If it returns true,
it will draw only in the area that is covered by the region
that can be accessed with <code>getClipping(region)</code>.

@return <code>true</code> if the GC has a clipping region, and <code>false</code> otherwise

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Returns <code>true</code> if the GC has been disposed,
and <code>false</code> otherwise.
<p>
This method gets the dispose state for the GC.
When a GC has been disposed, it is an error to
invoke any other method (except {@link #dispose()}) using the GC.

@return <code>true</code> when the GC is disposed and <code>false</code> otherwise
------------
Sets the receiver to always use the operating system's advanced graphics
subsystem for all graphics operations if the argument is <code>true</code>.
If the argument is <code>false</code>, the advanced graphics subsystem is
no longer used, advanced graphics state is cleared and the normal graphics
subsystem is used from now on.
<p>
Normally, the advanced graphics subsystem is invoked automatically when
any one of the alpha, antialias, patterns, interpolation, paths, clipping
or transformation operations in the receiver is requested.  When the receiver
is switched into advanced mode, the advanced graphics subsystem performs both
advanced and normal graphics operations.  Because the two subsystems are
different, their output may differ.  Switching to advanced graphics before
any graphics operations are performed ensures that the output is consistent.
</p><p>
Advanced graphics may not be installed for the operating system.  In this
case, this operation does nothing.  Some operating system have only one
graphics subsystem, so switching from normal to advanced graphics does
nothing.  However, switching from advanced to normal graphics will always
clear the advanced graphics state, even for operating systems that have
only one graphics subsystem.
</p>

@param advanced the new advanced graphics state

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@see #setAlpha
@see #setAntialias
@see #setBackgroundPattern
@see #setClipping(Path)
@see #setForegroundPattern
@see #setLineAttributes
@see #setInterpolation
@see #setTextAntialias
@see #setTransform
@see #getAdvanced

@since 3.1
------------
Sets the receiver's anti-aliasing value to the parameter,
which must be one of <code>SWT.DEFAULT</code>, <code>SWT.OFF</code>
or <code>SWT.ON</code>. Note that this controls anti-aliasing for all
<em>non-text drawing</em> operations.
<p>
This operation requires the operating system's advanced
graphics subsystem which may not be available on some
platforms.
</p>

@param antialias the anti-aliasing setting

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the parameter is not one of <code>SWT.DEFAULT</code>,
<code>SWT.OFF</code> or <code>SWT.ON</code></li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_NO_GRAPHICS_LIBRARY - if advanced graphics are not available</li>
</ul>

@see #getAdvanced
@see #setAdvanced
@see #setTextAntialias

@since 3.1
------------
Sets the receiver's alpha value which must be
between 0 (transparent) and 255 (opaque).
<p>
This operation requires the operating system's advanced
graphics subsystem which may not be available on some
platforms.
</p>
@param alpha the alpha value

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_NO_GRAPHICS_LIBRARY - if advanced graphics are not available</li>
</ul>

@see #getAdvanced
@see #setAdvanced

@since 3.1
------------
Sets the background color. The background color is used
for fill operations and as the background color when text
is drawn.

@param color the new background color for the receiver

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the color is null</li>
<li>ERROR_INVALID_ARGUMENT - if the color has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Sets the background pattern. The default value is <code>null</code>.
<p>
This operation requires the operating system's advanced
graphics subsystem which may not be available on some
platforms.
</p>

@param pattern the new background pattern

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the parameter has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_NO_GRAPHICS_LIBRARY - if advanced graphics are not available</li>
</ul>

@see Pattern
@see #getAdvanced
@see #setAdvanced

@since 3.1
------------
Sets the area of the receiver which can be changed
by drawing operations to the rectangular area specified
by the arguments.

@param x the x coordinate of the clipping rectangle
@param y the y coordinate of the clipping rectangle
@param width the width of the clipping rectangle
@param height the height of the clipping rectangle

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Sets the area of the receiver which can be changed
by drawing operations to the path specified
by the argument.
<p>
This operation requires the operating system's advanced
graphics subsystem which may not be available on some
platforms.
</p>

@param path the clipping path.

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the path has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_NO_GRAPHICS_LIBRARY - if advanced graphics are not available</li>
</ul>

@see Path
@see #getAdvanced
@see #setAdvanced

@since 3.1
------------
Sets the area of the receiver which can be changed
by drawing operations to the rectangular area specified
by the argument.  Specifying <code>null</code> for the
rectangle reverts the receiver's clipping area to its
original value.

@param rect the clipping rectangle or <code>null</code>

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Sets the area of the receiver which can be changed
by drawing operations to the region specified
by the argument.  Specifying <code>null</code> for the
region reverts the receiver's clipping area to its
original value.

@param region the clipping region or <code>null</code>

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the region has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Sets the receiver's fill rule to the parameter, which must be one of
<code>SWT.FILL_EVEN_ODD</code> or <code>SWT.FILL_WINDING</code>.

@param rule the new fill rule

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the rule is not one of <code>SWT.FILL_EVEN_ODD</code>
or <code>SWT.FILL_WINDING</code></li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@since 3.1
------------
Sets the font which will be used by the receiver
to draw and measure text to the argument. If the
argument is null, then a default font appropriate
for the platform will be used instead.

@param font the new font for the receiver, or null to indicate a default font

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the font has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Sets the foreground color. The foreground color is used
for drawing operations including when text is drawn.

@param color the new foreground color for the receiver

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the color is null</li>
<li>ERROR_INVALID_ARGUMENT - if the color has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Sets the foreground pattern. The default value is <code>null</code>.
<p>
This operation requires the operating system's advanced
graphics subsystem which may not be available on some
platforms.
</p>
@param pattern the new foreground pattern

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the parameter has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_NO_GRAPHICS_LIBRARY - if advanced graphics are not available</li>
</ul>

@see Pattern
@see #getAdvanced
@see #setAdvanced

@since 3.1
------------
Sets the receiver's interpolation setting to the parameter, which
must be one of <code>SWT.DEFAULT</code>, <code>SWT.NONE</code>,
<code>SWT.LOW</code> or <code>SWT.HIGH</code>.
<p>
This operation requires the operating system's advanced
graphics subsystem which may not be available on some
platforms.
</p>

@param interpolation the new interpolation setting

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the rule is not one of <code>SWT.DEFAULT</code>,
<code>SWT.NONE</code>, <code>SWT.LOW</code> or <code>SWT.HIGH</code>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_NO_GRAPHICS_LIBRARY - if advanced graphics are not available</li>
</ul>

@see #getAdvanced
@see #setAdvanced

@since 3.1
------------
Sets the receiver's line attributes.
<p>
This operation requires the operating system's advanced
graphics subsystem which may not be available on some
platforms.
</p>
@param attributes the line attributes

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the attributes is null</li>
<li>ERROR_INVALID_ARGUMENT - if any of the line attributes is not valid</li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_NO_GRAPHICS_LIBRARY - if advanced graphics are not available</li>
</ul>

@see LineAttributes
@see #getAdvanced
@see #setAdvanced

@since 3.3
------------
Sets the receiver's line cap style to the argument, which must be one
of the constants <code>SWT.CAP_FLAT</code>, <code>SWT.CAP_ROUND</code>,
or <code>SWT.CAP_SQUARE</code>.

@param cap the cap style to be used for drawing lines

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the style is not valid</li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@since 3.1
------------
Sets the receiver's line dash style to the argument. The default
value is <code>null</code>. If the argument is not <code>null</code>,
the receiver's line style is set to <code>SWT.LINE_CUSTOM</code>, otherwise
it is set to <code>SWT.LINE_SOLID</code>.

@param dashes the dash style to be used for drawing lines

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if any of the values in the array is less than or equal 0</li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@since 3.1
------------
Sets the receiver's line join style to the argument, which must be one
of the constants <code>SWT.JOIN_MITER</code>, <code>SWT.JOIN_ROUND</code>,
or <code>SWT.JOIN_BEVEL</code>.

@param join the join style to be used for drawing lines

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the style is not valid</li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@since 3.1
------------
Sets the receiver's line style to the argument, which must be one
of the constants <code>SWT.LINE_SOLID</code>, <code>SWT.LINE_DASH</code>,
<code>SWT.LINE_DOT</code>, <code>SWT.LINE_DASHDOT</code> or
<code>SWT.LINE_DASHDOTDOT</code>.

@param lineStyle the style to be used for drawing lines

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the style is not valid</li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Sets the width that will be used when drawing lines
for all of the figure drawing operations (that is,
<code>drawLine</code>, <code>drawRectangle</code>,
<code>drawPolyline</code>, and so forth.
<p>
Note that line width of zero is used as a hint to
indicate that the fastest possible line drawing
algorithms should be used. This means that the
output may be different from line width one.
</p>

@param lineWidth the width of a line

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
If the argument is <code>true</code>, puts the receiver
in a drawing mode where the resulting color in the destination
is the <em>exclusive or</em> of the color values in the source
and the destination, and if the argument is <code>false</code>,
puts the receiver in a drawing mode where the destination color
is replaced with the source color value.
<p>
Note that this mode in fundamentally unsupportable on certain
platforms, notably Carbon (Mac OS X). Clients that want their
code to run on all platforms need to avoid this method.
</p>

@param xor if <code>true</code>, then <em>xor</em> mode is used, otherwise <em>source copy</em> mode is used

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@deprecated this functionality is not supported on some platforms
------------
Sets the receiver's text anti-aliasing value to the parameter,
which must be one of <code>SWT.DEFAULT</code>, <code>SWT.OFF</code>
or <code>SWT.ON</code>. Note that this controls anti-aliasing only
for all <em>text drawing</em> operations.
<p>
This operation requires the operating system's advanced
graphics subsystem which may not be available on some
platforms.
</p>

@param antialias the anti-aliasing setting

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the parameter is not one of <code>SWT.DEFAULT</code>,
<code>SWT.OFF</code> or <code>SWT.ON</code></li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_NO_GRAPHICS_LIBRARY - if advanced graphics are not available</li>
</ul>

@see #getAdvanced
@see #setAdvanced
@see #setAntialias

@since 3.1
------------
Sets the transform that is currently being used by the receiver. If
the argument is <code>null</code>, the current transform is set to
the identity transform.
<p>
This operation requires the operating system's advanced
graphics subsystem which may not be available on some
platforms.
</p>

@param transform the transform to set

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the parameter has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_NO_GRAPHICS_LIBRARY - if advanced graphics are not available</li>
</ul>

@see Transform
@see #getAdvanced
@see #setAdvanced

@since 3.1
------------
Returns the extent of the given string. No tab
expansion or carriage return processing will be performed.
<p>
The <em>extent</em> of a string is the width and height of
the rectangular area it would cover if drawn in a particular
font (in this case, the current font in the receiver).
</p>

@param string the string to measure
@return a point containing the extent of the string

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the string is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Returns the extent of the given string. Tab expansion and
carriage return processing are performed.
<p>
The <em>extent</em> of a string is the width and height of
the rectangular area it would cover if drawn in a particular
font (in this case, the current font in the receiver).
</p>

@param string the string to measure
@return a point containing the extent of the string

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the string is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Returns the extent of the given string. Tab expansion, line
delimiter and mnemonic processing are performed according to
the specified flags, which can be a combination of:
<dl>
<dt><b>DRAW_DELIMITER</b></dt>
<dd>draw multiple lines</dd>
<dt><b>DRAW_TAB</b></dt>
<dd>expand tabs</dd>
<dt><b>DRAW_MNEMONIC</b></dt>
<dd>underline the mnemonic character</dd>
<dt><b>DRAW_TRANSPARENT</b></dt>
<dd>transparent background</dd>
</dl>
<p>
The <em>extent</em> of a string is the width and height of
the rectangular area it would cover if drawn in a particular
font (in this case, the current font in the receiver).
</p>

@param string the string to measure
@param flags the flags specifying how to process the text
@return a point containing the extent of the string

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the string is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Returns a string containing a concise, human-readable
description of the receiver.

@return a string representation of the receiver
------------
Invokes platform specific functionality to allocate a new graphics context.
<p>
<b>IMPORTANT:</b> This method is <em>not</em> part of the public
API for <code>GC</code>. It is marked public only so that it
can be shared within the packages provided by SWT. It is not
available on all platforms, and should never be called from
application code.
</p>

@param drawable the Drawable for the receiver.
@param data the data for the receiver.

@return a new <code>GC</code>

@noreference This method is not intended to be referenced by clients.
------------
Invokes platform specific functionality to wrap a graphics context.
<p>
<b>IMPORTANT:</b> This method is <em>not</em> part of the public
API for <code>GC</code>. It is marked public only so that it
can be shared within the packages provided by SWT. It is not
available on all platforms, and should never be called from
application code.
</p>

@param hDC the Windows HDC.
@param data the data for the receiver.

@return a new <code>GC</code>

@noreference This method is not intended to be referenced by clients.
------------
Answers the length of the side adjacent to the given angle
of a right triangle. In other words, it returns the integer
conversion of length * cos (angle).

@param angle the angle in degrees
@param length the length of the triangle's hypotenuse
@return the integer conversion of length * cos (angle)
------------
Answers the length of the side opposite to the given angle
of a right triangle. In other words, it returns the integer
conversion of length * sin (angle).

@param angle the angle in degrees
@param length the length of the triangle's hypotenuse
@return the integer conversion of length * sin (angle)

====== GCData.java ======
Copyright (c) 2000, 2009 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class are descriptions of GCs in terms
of unallocated platform-specific data fields.
<p>
<b>IMPORTANT:</b> This class is <em>not</em> part of the public
API for SWT. It is marked public only so that it can be shared
within the packages provided by SWT. It is not available on all
platforms, and should never be called from application code.
</p>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
@noreference This class is not intended to be referenced by clients

====== GestureEvent.java ======
Copyright (c) 2010, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class are sent in response to
touch-based gestures that are triggered by the user.

@see GestureListener
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>

@since 3.7
------------
The state of the keyboard modifier keys and mouse masks
at the time the event was generated.
*
@see org.eclipse.swt.SWT#MODIFIER_MASK
@see org.eclipse.swt.SWT#BUTTON_MASK

public int stateMask;


The gesture type.
<p><ul>
<li>{@link org.eclipse.swt.SWT#GESTURE_BEGIN}</li>
<li>{@link org.eclipse.swt.SWT#GESTURE_END}</li>
<li>{@link org.eclipse.swt.SWT#GESTURE_MAGNIFY}</li>
<li>{@link org.eclipse.swt.SWT#GESTURE_PAN}</li>
<li>{@link org.eclipse.swt.SWT#GESTURE_ROTATE}</li>
<li>{@link org.eclipse.swt.SWT#GESTURE_SWIPE}</li>
</ul></p>
*
This field determines the <code>GestureEvent</code> fields that contain valid data.

public int detail;


The meaning of this field is dependent on the value of the <code>detail</code> field
and the platform.  It can represent either the x coordinate of the centroid of the
touches that make up the gesture, or the x coordinate of the cursor at the time the
gesture was performed.

public int x;


The meaning of this field is dependent on the value of the <code>detail</code> field
and the platform.  It can represent either the y coordinate of the centroid of the
touches that make up the gesture, or the y coordinate of the cursor at the time the
gesture was performed.

public int y;


This field is valid when the <code>detail</code> field is set to <code>GESTURE_ROTATE</code>.
It specifies the number of degrees rotated on the device since the gesture started. Positive
values indicate counter-clockwise rotation, and negative values indicate clockwise rotation.

public double rotation;


This field is valid when the <code>detail</code> field is set to <code>GESTURE_SWIPE</code>
or <code>GESTURE_PAN</code>.  Both <code>xDirection</code> and <code>yDirection</code>
can be valid for an individual gesture.  The meaning of this field is dependent on the value
of the <code>detail</code> field.
<p>
If <code>detail</code> is <code>GESTURE_SWIPE</code> then a positive value indicates a swipe
to the right and a negative value indicates a swipe to the left.
*
If <code>detail</code> is <code>GESTURE_PAN</code> then a positive value indicates a pan to
the right by this field's count of pixels and a negative value indicates a pan to the left
by this field's count of pixels.

public int xDirection;


This field is valid when the <code>detail</code> field is set to <code>GESTURE_SWIPE</code>
or <code>GESTURE_PAN</code>.  Both <code>xDirection</code> and <code>yDirection</code>
can be valid for an individual gesture.  The meaning of this field is dependent on the value
of the <code>detail</code> field.
*
If <code>detail</code> is <code>GESTURE_SWIPE</code> then a positive value indicates a downward
swipe and a negative value indicates an upward swipe.
*
If <code>detail</code> is <code>GESTURE_PAN</code> then a positive value indicates a downward
pan by this field's count of pixels and a negative value indicates an upward pan by this
field's count of pixels.

public int yDirection;


This field is valid when the <code>detail</code> field is set to <code>GESTURE_MAGNIFY</code>.
This is the scale factor to be applied. This value will be 1.0 in the first received event with
<code>GESTURE_MAGNIFY</code>, and will then fluctuate in subsequent events as the user moves
their fingers.

public double magnification;


This flag indicates whether the operation should be allowed.
Setting it to <code>false</code> will cancel the operation.

public boolean doit;

static final long serialVersionUID = -8348741538373572182L;


Constructs a new instance of this class based on the
information in the given untyped event.

@param e the untyped event containing the information
------------
Returns a string containing a concise, human-readable
description of the receiver.

@return a string representation of the event

====== GestureListener.java ======
Copyright (c) 2010, 2016 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
Lars Vogel <Lars.Vogel@vogella.com> - Bug 502576
------------
Classes which implement this interface provide methods
that deal with the events that are generated as gestures
are triggered by the user interacting with a touch pad or
touch screen.
<p>
After creating an instance of a class that implements
this interface it can be added to a control using the
<code>addGestureListener</code> method and removed using
the <code>removeGestureListener</code> method. When a
gesture is triggered, the appropriate method will be invoked.
</p>
<p>
<b>Warning</b>: This API is currently only implemented on Windows and Cocoa.
SWT doesn't send Gesture or Touch events on GTK.
</p>

@see GestureEvent

@since 3.7
------------
Sent when a recognized gesture has occurred.

@param e an event containing information about the gesture.

====== GIFFileFormat.java ======
Copyright (c) 2000, 2012 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation

====== GlyphMetrics.java ======
Copyright (c) 2000, 2016 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class represent glyph metrics.
<p>
The hashCode() method in this class uses the values of the public
fields to compute the hash value. When storing instances of the
class in hashed collections, do not modify these fields after the
object has been inserted.
</p>
<p>
Application code does <em>not</em> need to explicitly release the
resources managed by each instance when those instances are no longer
required, and thus no <code>dispose()</code> method is provided.
</p>

@see TextStyle
@see TextLayout
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>

@since 3.2
------------
the ascent of the GlyphMetrics

public int ascent;


the descent of the GlyphMetrics

public int descent;


the width of the GlyphMetrics

public int width;


Constructs an instance of this class with the given
ascent, descent and width values.

@param ascent the GlyphMetrics ascent
@param descent the GlyphMetrics descent
@param width the GlyphMetrics width

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the ascent, descent or width argument is negative</li>
</ul>
------------
Compares the argument to the receiver, and returns true
if they represent the <em>same</em> object using a class
specific comparison.

@param object the object to compare with this object
@return <code>true</code> if the object is the same as this object and <code>false</code> otherwise

@see #hashCode()
------------
Returns an integer hash code for the receiver. Any two
objects that return <code>true</code> when passed to
<code>equals</code> must return the same value for this
method.

@return the receiver's hash

@see #equals(Object)
------------
Returns a string containing a concise, human-readable
description of the receiver.

@return a string representation of the <code>GlyphMetrics</code>

====== GridData.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
<code>GridData</code> is the layout data object associated with
<code>GridLayout</code>. To set a <code>GridData</code> object into a
control, you use the <code>Control.setLayoutData(Object)</code> method.
<p>
There are two ways to create a <code>GridData</code> object with certain
fields set. The first is to set the fields directly, like this:
<pre>
GridData gridData = new GridData();
gridData.horizontalAlignment = GridData.FILL;
gridData.grabExcessHorizontalSpace = true;
button1.setLayoutData(gridData);

gridData = new GridData();
gridData.horizontalAlignment = GridData.FILL;
gridData.verticalAlignment = GridData.FILL;
gridData.grabExcessHorizontalSpace = true;
gridData.grabExcessVerticalSpace = true;
gridData.horizontalSpan = 2;
button2.setLayoutData(gridData);
</pre>
The second is to take advantage of <code>GridData</code> convenience constructors, for example:
<pre>
button1.setLayoutData(new GridData (SWT.FILL, SWT.CENTER, true, false));
button2.setLayoutData(new GridData (SWT.FILL, SWT.FILL, true, true, 2, 1));
</pre>
</p>
<p>
NOTE: Do not reuse <code>GridData</code> objects. Every control in a
<code>Composite</code> that is managed by a <code>GridLayout</code>
must have a unique <code>GridData</code> object. If the layout data
for a control in a <code>GridLayout</code> is null at layout time,
a unique <code>GridData</code> object is created for it.
</p>

@see GridLayout
@see Control#setLayoutData
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
------------
verticalAlignment specifies how controls will be positioned
vertically within a cell.
*
The default value is CENTER.
*
Possible values are: <ul>
   <li>SWT.BEGINNING (or SWT.TOP): Position the control at the top of the cell</li>
   <li>SWT.CENTER: Position the control in the vertical center of the cell</li>
   <li>SWT.END (or SWT.BOTTOM): Position the control at the bottom of the cell</li>
   <li>SWT.FILL: Resize the control to fill the cell vertically</li>
</ul>

public int verticalAlignment = CENTER;


horizontalAlignment specifies how controls will be positioned
horizontally within a cell.
*
The default value is BEGINNING.
*
Possible values are: <ul>
   <li>SWT.BEGINNING (or SWT.LEFT): Position the control at the left of the cell</li>
   <li>SWT.CENTER: Position the control in the horizontal center of the cell</li>
   <li>SWT.END (or SWT.RIGHT): Position the control at the right of the cell</li>
   <li>SWT.FILL: Resize the control to fill the cell horizontally</li>
</ul>

public int horizontalAlignment = BEGINNING;


widthHint specifies the preferred width in pixels. This value
is the wHint passed into Control.computeSize(int, int, boolean)
to determine the preferred size of the control.
*
The default value is SWT.DEFAULT.
*
@see Control#computeSize(int, int, boolean)

public int widthHint = SWT.DEFAULT;


heightHint specifies the preferred height in pixels. This value
is the hHint passed into Control.computeSize(int, int, boolean)
to determine the preferred size of the control.
*
The default value is SWT.DEFAULT.
*
@see Control#computeSize(int, int, boolean)

public int heightHint = SWT.DEFAULT;


horizontalIndent specifies the number of pixels of indentation
that will be placed along the left side of the cell.
*
The default value is 0.

public int horizontalIndent = 0;


verticalIndent specifies the number of pixels of indentation
that will be placed along the top side of the cell.
*
The default value is 0.
*
@since 3.1

public int verticalIndent = 0;


horizontalSpan specifies the number of column cells that the control
will take up.
*
The default value is 1.

public int horizontalSpan = 1;


verticalSpan specifies the number of row cells that the control
will take up.
*
The default value is 1.

public int verticalSpan = 1;


<p>grabExcessHorizontalSpace specifies whether the width of the cell
changes depending on the size of the parent Composite.  If
grabExcessHorizontalSpace is <code>true</code>, the following rules
apply to the width of the cell:</p>
<ul>
<li>If extra horizontal space is available in the parent, the cell will
grow to be wider than its preferred width.  The new width
will be "preferred width + delta" where delta is the extra
horizontal space divided by the number of grabbing columns.</li>
<li>If there is not enough horizontal space available in the parent, the
cell will shrink until it reaches its minimum width as specified by
GridData.minimumWidth. The new width will be the maximum of
"minimumWidth" and "preferred width - delta", where delta is
the amount of space missing divided by the number of grabbing columns.</li>
<li>If the parent is packed, the cell will be its preferred width
as specified by GridData.widthHint.</li>
<li>If the control spans multiple columns and there are no other grabbing
controls in any of the spanned columns, the last column in the span will
grab the extra space.  If there is at least one other grabbing control
in the span, the grabbing will be spread over the columns already
marked as grabExcessHorizontalSpace.</li>
</ul>
*
<p>The default value is false.</p>
*
@see GridData#minimumWidth
@see GridData#widthHint

public boolean grabExcessHorizontalSpace = false;


<p>grabExcessVerticalSpace specifies whether the height of the cell
changes depending on the size of the parent Composite.  If
grabExcessVerticalSpace is <code>true</code>, the following rules
apply to the height of the cell:</p>
<ul>
<li>If extra vertical space is available in the parent, the cell will
grow to be taller than its preferred height.  The new height
will be "preferred height + delta" where delta is the extra
vertical space divided by the number of grabbing rows.</li>
<li>If there is not enough vertical space available in the parent, the
cell will shrink until it reaches its minimum height as specified by
GridData.minimumHeight. The new height will be the maximum of
"minimumHeight" and "preferred height - delta", where delta is
the amount of space missing divided by the number of grabbing rows.</li>
<li>If the parent is packed, the cell will be its preferred height
as specified by GridData.heightHint.</li>
<li>If the control spans multiple rows and there are no other grabbing
controls in any of the spanned rows, the last row in the span will
grab the extra space.  If there is at least one other grabbing control
in the span, the grabbing will be spread over the rows already
marked as grabExcessVerticalSpace.</li>
</ul>
*
<p>The default value is false.</p>
*
@see GridData#minimumHeight
@see GridData#heightHint

public boolean grabExcessVerticalSpace = false;


minimumWidth specifies the minimum width in pixels.  This value
applies only if grabExcessHorizontalSpace is true. A value of
SWT.DEFAULT means that the minimum width will be the result
of Control.computeSize(int, int, boolean) where wHint is
determined by GridData.widthHint.
*
The default value is 0.
*
@since 3.1
@see Control#computeSize(int, int, boolean)
@see GridData#widthHint

public int minimumWidth = 0;


minimumHeight specifies the minimum height in pixels.  This value
applies only if grabExcessVerticalSpace is true.  A value of
SWT.DEFAULT means that the minimum height will be the result
of Control.computeSize(int, int, boolean) where hHint is
determined by GridData.heightHint.
*
The default value is 0.
*
@since 3.1
@see Control#computeSize(int, int, boolean)
@see GridData#heightHint

public int minimumHeight = 0;


exclude informs the layout to ignore this control when sizing
and positioning controls.  If this value is <code>true</code>,
the size and position of the control will not be managed by the
layout.  If this	value is <code>false</code>, the size and
position of the control will be computed and assigned.
*
The default value is <code>false</code>.
*
@since 3.1

public boolean exclude = false;


Value for horizontalAlignment or verticalAlignment.
Position the control at the top or left of the cell.
Not recommended. Use SWT.BEGINNING, SWT.TOP or SWT.LEFT instead.

public static final int BEGINNING = SWT.BEGINNING;


Value for horizontalAlignment or verticalAlignment.
Position the control in the vertical or horizontal center of the cell
Not recommended. Use SWT.CENTER instead.

public static final int CENTER = 2;


Value for horizontalAlignment or verticalAlignment.
Position the control at the bottom or right of the cell
Not recommended. Use SWT.END, SWT.BOTTOM or SWT.RIGHT instead.

public static final int END = 3;


Value for horizontalAlignment or verticalAlignment.
Resize the control to fill the cell horizontally or vertically.
Not recommended. Use SWT.FILL instead.

public static final int FILL = SWT.FILL;


Style bit for <code>new GridData(int)</code>.
Position the control at the top of the cell.
Not recommended. Use
<code>new GridData(int, SWT.BEGINNING, boolean, boolean)</code>
instead.

public static final int VERTICAL_ALIGN_BEGINNING =  1 << 1;


Style bit for <code>new GridData(int)</code> to position the
control in the vertical center of the cell.
Not recommended. Use
<code>new GridData(int, SWT.CENTER, boolean, boolean)</code>
instead.

public static final int VERTICAL_ALIGN_CENTER = 1 << 2;


Style bit for <code>new GridData(int)</code> to position the
control at the bottom of the cell.
Not recommended. Use
<code>new GridData(int, SWT.END, boolean, boolean)</code>
instead.

public static final int VERTICAL_ALIGN_END = 1 << 3;


Style bit for <code>new GridData(int)</code> to resize the
control to fill the cell vertically.
Not recommended. Use
<code>new GridData(int, SWT.FILL, boolean, boolean)</code>
instead

public static final int VERTICAL_ALIGN_FILL = 1 << 4;


Style bit for <code>new GridData(int)</code> to position the
control at the left of the cell.
Not recommended. Use
<code>new GridData(SWT.BEGINNING, int, boolean, boolean)</code>
instead.

public static final int HORIZONTAL_ALIGN_BEGINNING =  1 << 5;


Style bit for <code>new GridData(int)</code> to position the
control in the horizontal center of the cell.
Not recommended. Use
<code>new GridData(SWT.CENTER, int, boolean, boolean)</code>
instead.

public static final int HORIZONTAL_ALIGN_CENTER = 1 << 6;


Style bit for <code>new GridData(int)</code> to position the
control at the right of the cell.
Not recommended. Use
<code>new GridData(SWT.END, int, boolean, boolean)</code>
instead.

public static final int HORIZONTAL_ALIGN_END = 1 << 7;


Style bit for <code>new GridData(int)</code> to resize the
control to fill the cell horizontally.
Not recommended. Use
<code>new GridData(SWT.FILL, int, boolean, boolean)</code>
instead.

public static final int HORIZONTAL_ALIGN_FILL = 1 << 8;


Style bit for <code>new GridData(int)</code> to resize the
control to fit the remaining horizontal space.
Not recommended. Use
<code>new GridData(int, int, true, boolean)</code>
instead.

public static final int GRAB_HORIZONTAL = 1 << 9;


Style bit for <code>new GridData(int)</code> to resize the
control to fit the remaining vertical space.
Not recommended. Use
<code>new GridData(int, int, boolean, true)</code>
instead.

public static final int GRAB_VERTICAL = 1 << 10;


Style bit for <code>new GridData(int)</code> to resize the
control to fill the cell vertically and to fit the remaining
vertical space.
FILL_VERTICAL = VERTICAL_ALIGN_FILL | GRAB_VERTICAL
Not recommended. Use
<code>new GridData(int, SWT.FILL, boolean, true)</code>
instead.

public static final int FILL_VERTICAL = VERTICAL_ALIGN_FILL | GRAB_VERTICAL;


Style bit for <code>new GridData(int)</code> to resize the
control to fill the cell horizontally and to fit the remaining
horizontal space.
FILL_HORIZONTAL = HORIZONTAL_ALIGN_FILL | GRAB_HORIZONTAL
Not recommended. Use
<code>new GridData(SWT.FILL, int, true, boolean)</code>
instead.

public static final int FILL_HORIZONTAL = HORIZONTAL_ALIGN_FILL | GRAB_HORIZONTAL;


Style bit for <code>new GridData(int)</code> to resize the
control to fill the cell horizontally and vertically and
to fit the remaining horizontal and vertical space.
FILL_BOTH = FILL_VERTICAL | FILL_HORIZONTAL
Not recommended. Use
<code>new GridData(SWT.FILL, SWT.FILL, true, true)</code>
instead.

public static final int FILL_BOTH = FILL_VERTICAL | FILL_HORIZONTAL;

int cacheWidth = -1, cacheHeight = -1;
int defaultWhint, defaultHhint, defaultWidth = -1, defaultHeight = -1;
int currentWhint, currentHhint, currentWidth = -1, currentHeight = -1;


Constructs a new instance of GridData using
default values.
------------
Constructs a new instance based on the GridData style.
This constructor is not recommended.

@param style the GridData style
------------
Constructs a new instance of GridData according to the parameters.

@param horizontalAlignment how control will be positioned horizontally within a cell,
one of: SWT.BEGINNING (or SWT.LEFT), SWT.CENTER, SWT.END (or SWT.RIGHT), or SWT.FILL
@param verticalAlignment how control will be positioned vertically within a cell,
one of: SWT.BEGINNING (or SWT.TOP), SWT.CENTER, SWT.END (or SWT.BOTTOM), or SWT.FILL
@param grabExcessHorizontalSpace whether cell will be made wide enough to fit the remaining horizontal space
@param grabExcessVerticalSpace whether cell will be made high enough to fit the remaining vertical space

@since 3.0
------------
Constructs a new instance of GridData according to the parameters.

@param horizontalAlignment how control will be positioned horizontally within a cell,
one of: SWT.BEGINNING (or SWT.LEFT), SWT.CENTER, SWT.END (or SWT.RIGHT), or SWT.FILL
@param verticalAlignment how control will be positioned vertically within a cell,
one of: SWT.BEGINNING (or SWT.TOP), SWT.CENTER, SWT.END (or SWT.BOTTOM), or SWT.FILL
@param grabExcessHorizontalSpace whether cell will be made wide enough to fit the remaining horizontal space
@param grabExcessVerticalSpace whether cell will be made high enough to fit the remaining vertical space
@param horizontalSpan the number of column cells that the control will take up
@param verticalSpan the number of row cells that the control will take up

@since 3.0
------------
Constructs a new instance of GridData according to the parameters.
A value of SWT.DEFAULT indicates that no minimum width or
no minimum height is specified.

@param width a minimum width for the column
@param height a minimum height for the row

@since 3.0
------------
Returns a string containing a concise, human-readable
description of the receiver.

@return a string representation of the GridData object

====== GridLayout.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class lay out the control children of a
<code>Composite</code> in a grid.
<p>
<code>GridLayout</code> has a number of configuration fields, and the
controls it lays out can have an associated layout data object, called
<code>GridData</code>. The power of <code>GridLayout</code> lies in the
ability to configure <code>GridData</code> for each control in the layout.
</p>
<p>
The following code creates a shell managed by a <code>GridLayout</code>
with 3 columns:
<pre>
Display display = new Display();
Shell shell = new Shell(display);
GridLayout gridLayout = new GridLayout();
gridLayout.numColumns = 3;
shell.setLayout(gridLayout);
</pre>
The <code>numColumns</code> field is the most important field in a
<code>GridLayout</code>. Widgets are laid out in columns from left
to right, and a new row is created when <code>numColumns</code> + 1
controls are added to the <code>Composite<code>.
</p>

@see GridData
@see <a href="http://www.eclipse.org/swt/snippets/#gridlayout">GridLayout snippets</a>
@see <a href="http://www.eclipse.org/swt/examples.php">SWT Example: LayoutExample</a>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
------------
numColumns specifies the number of cell columns in the layout.
If numColumns has a value less than 1, the layout will not
set the size and position of any controls.
*
The default value is 1.

public int numColumns = 1;


makeColumnsEqualWidth specifies whether all columns in the layout
will be forced to have the same width.
*
The default value is false.

public boolean makeColumnsEqualWidth = false;


marginWidth specifies the number of pixels of horizontal margin
that will be placed along the left and right edges of the layout.
*
The default value is 5.

public int marginWidth = 5;


marginHeight specifies the number of pixels of vertical margin
that will be placed along the top and bottom edges of the layout.
*
The default value is 5.

public int marginHeight = 5;


marginLeft specifies the number of pixels of horizontal margin
that will be placed along the left edge of the layout.
*
The default value is 0.
*
@since 3.1

public int marginLeft = 0;


marginTop specifies the number of pixels of vertical margin
that will be placed along the top edge of the layout.
*
The default value is 0.
*
@since 3.1

public int marginTop = 0;


marginRight specifies the number of pixels of horizontal margin
that will be placed along the right edge of the layout.
*
The default value is 0.
*
@since 3.1

public int marginRight = 0;


marginBottom specifies the number of pixels of vertical margin
that will be placed along the bottom edge of the layout.
*
The default value is 0.
*
@since 3.1

public int marginBottom = 0;


horizontalSpacing specifies the number of pixels between the right
edge of one cell and the left edge of its neighbouring cell to
the right.
*
The default value is 5.

public int horizontalSpacing = 5;


verticalSpacing specifies the number of pixels between the bottom
edge of one cell and the top edge of its neighbouring cell underneath.
*
The default value is 5.

public int verticalSpacing = 5;


Constructs a new instance of this class
with a single column.
------------
Constructs a new instance of this class given the
number of columns, and whether or not the columns
should be forced to have the same width.
If numColumns has a value less than 1, the layout will not
set the size and position of any controls.

@param numColumns the number of columns in the grid
@param makeColumnsEqualWidth whether or not the columns will have equal width

@since 2.0
------------
Returns a string containing a concise, human-readable
description of the receiver.

@return a string representation of the layout

====== Group.java ======
Copyright (c) 2000, 2015 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class provide an etched border
with an optional title.
<p>
Shadow styles are hints and may not be honoured
by the platform.  To create a group with the
default shadow style for the platform, do not
specify a shadow style.
<dl>
<dt><b>Styles:</b></dt>
<dd>SHADOW_ETCHED_IN, SHADOW_ETCHED_OUT, SHADOW_IN, SHADOW_OUT, SHADOW_NONE</dd>
<dt><b>Events:</b></dt>
<dd>(none)</dd>
</dl>
<p>
Note: Only one of the above styles may be specified.
</p><p>
IMPORTANT: This class is <em>not</em> intended to be subclassed.
</p>

@see <a href="http://www.eclipse.org/swt/examples.php">SWT Example: ControlExample</a>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
@noextend This class is not intended to be subclassed by clients.
------------
Constructs a new instance of this class given its parent
and a style value describing its behavior and appearance.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.
</p>

@param parent a composite control which will be the parent of the new instance (cannot be null)
@param style the style of control to construct

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see SWT#SHADOW_ETCHED_IN
@see SWT#SHADOW_ETCHED_OUT
@see SWT#SHADOW_IN
@see SWT#SHADOW_OUT
@see SWT#SHADOW_NONE
@see Widget#checkSubclass
@see Widget#getStyle
------------
Returns the receiver's text, which is the string that the
is used as the <em>title</em>. If the text has not previously
been set, returns an empty string.

@return the text

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the receiver's text, which is the string that will
be displayed as the receiver's <em>title</em>, to the argument,
which may not be null. The string may include the mnemonic character.
</p>
Mnemonics are indicated by an '&amp;' that causes the next
character to be the mnemonic.  When the user presses a
key sequence that matches the mnemonic, focus is assigned
to the first child of the group. On most platforms, the
mnemonic appears underlined but may be emphasised in a
platform specific manner.  The mnemonic indicator character
'&amp;' can be escaped by doubling it in the string, causing
a single '&amp;' to be displayed.
</p><p>
Note: If control characters like '\n', '\t' etc. are used
in the string, then the behavior is platform dependent.
</p>
@param string the new text

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the text is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

====== HelpEvent.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class are sent as a result of
help being requested for a widget.

@see HelpListener
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
------------
Constructs a new instance of this class based on the
information in the given untyped event.

@param e the untyped event containing the information

====== HelpListener.java ======
Copyright (c) 2000, 2016 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
Lars Vogel <Lars.Vogel@vogella.com> - Bug 502576
------------
Classes which implement this interface provide a method
that deals with the event that is generated when help is
requested for a control, typically when the user presses F1.
<p>
After creating an instance of a class that implements
this interface it can be added to a control using the
<code>addHelpListener</code> method and removed using
the <code>removeHelpListener</code> method. When help
is requested for a control, the helpRequested method
will be invoked.
</p>

@see HelpEvent
------------
Sent when help is requested for a control, typically
when the user presses F1.

@param e an event containing information about the help

====== Image.java ======
Copyright (c) 2000, 2016 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class are graphics which have been prepared
for display on a specific device. That is, they are ready
to paint using methods such as <code>GC.drawImage()</code>
and display on widgets with, for example, <code>Button.setImage()</code>.
<p>
If loaded from a file format that supports it, an
<code>Image</code> may have transparency, meaning that certain
pixels are specified as being transparent when drawn. Examples
of file formats that support transparency are GIF and PNG.
</p><p>
There are two primary ways to use <code>Images</code>.
The first is to load a graphic file from disk and create an
<code>Image</code> from it. This is done using an <code>Image</code>
constructor, for example:
<pre>
Image i = new Image(device, "C:\\graphic.bmp");
</pre>
A graphic file may contain a color table specifying which
colors the image was intended to possess. In the above example,
these colors will be mapped to the closest available color in
SWT. It is possible to get more control over the mapping of
colors as the image is being created, using code of the form:
<pre>
ImageData data = new ImageData("C:\\graphic.bmp");
RGB[] rgbs = data.getRGBs();
// At this point, rgbs contains specifications of all
// the colors contained within this image. You may
// allocate as many of these colors as you wish by
// using the Color constructor Color(RGB), then
// create the image:
Image i = new Image(device, data);
</pre>
<p>
Applications which require even greater control over the image
loading process should use the support provided in class
<code>ImageLoader</code>.
</p><p>
Application code must explicitly invoke the <code>Image.dispose()</code>
method to release the operating system resources managed by each instance
when those instances are no longer required.
</p>

@see Color
@see ImageData
@see ImageLoader
@see <a href="http://www.eclipse.org/swt/snippets/#image">Image snippets</a>
@see <a href="http://www.eclipse.org/swt/examples.php">SWT Examples: GraphicsExample, ImageAnalyzer</a>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
------------
specifies whether the receiver is a bitmap or an icon
(one of <code>SWT.BITMAP</code>, <code>SWT.ICON</code>)
<p>
<b>IMPORTANT:</b> This field is <em>not</em> part of the SWT
public API. It is marked public only so that it can be shared
within the packages provided by SWT. It is not available on all
platforms and should never be accessed from application code.
</p>
*
@noreference This field is not intended to be referenced by clients.

public int type;


the handle to the OS image resource
(Warning: This field is platform dependent)
<p>
<b>IMPORTANT:</b> This field is <em>not</em> part of the SWT
public API. It is marked public only so that it can be shared
within the packages provided by SWT. It is not available on all
platforms and should never be accessed from application code.
</p>
*
@noreference This field is not intended to be referenced by clients.

public long /*int*/ handle;


specifies the transparent pixel

int transparentPixel = -1, transparentColor = -1;


the GC which is drawing on the image

GC memGC;


the alpha data for the image

byte[] alphaData;


the global alpha value to be used for every pixel

int alpha = -1;


the image data used to create this image if it is a
icon. Used only in WinCE

ImageData data;


ImageFileNameProvider to provide file names at various Zoom levels

private ImageFileNameProvider imageFileNameProvider;


ImageDataProvider to provide ImageData at various Zoom levels

private ImageDataProvider imageDataProvider;


Attribute to cache current device zoom level

private int currentDeviceZoom = 100;


width of the image

int width = -1;


height of the image

int height = -1;


specifies the default scanline padding

static final int DEFAULT_SCANLINE_PAD = 4;


Prevents uninitialized instances from being created outside the package.
------------
Constructs an empty instance of this class with the
specified width and height. The result may be drawn upon
by creating a GC and using any of its drawing operations,
as shown in the following example:
<pre>
Image i = new Image(device, width, height);
GC gc = new GC(i);
gc.drawRectangle(0, 0, 50, 50);
gc.dispose();
</pre>
<p>
Note: Some platforms may have a limitation on the size
of image that can be created (size depends on width, height,
and depth). For example, Windows 95, 98, and ME do not allow
images larger than 16M.
</p>
<p>
You must dispose the image when it is no longer required.
</p>

@param device the device on which to create the image
@param width the width of the new image
@param height the height of the new image

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if device is null and there is no current device</li>
<li>ERROR_INVALID_ARGUMENT - if either the width or height is negative or zero</li>
</ul>
@exception SWTError <ul>
<li>ERROR_NO_HANDLES if a handle could not be obtained for image creation</li>
</ul>

@see #dispose()
------------
Constructs a new instance of this class based on the
provided image, with an appearance that varies depending
on the value of the flag. The possible flag values are:
<dl>
<dt><b>{@link SWT#IMAGE_COPY}</b></dt>
<dd>the result is an identical copy of srcImage</dd>
<dt><b>{@link SWT#IMAGE_DISABLE}</b></dt>
<dd>the result is a copy of srcImage which has a <em>disabled</em> look</dd>
<dt><b>{@link SWT#IMAGE_GRAY}</b></dt>
<dd>the result is a copy of srcImage which has a <em>gray scale</em> look</dd>
</dl>
<p>
You must dispose the image when it is no longer required.
</p>

@param device the device on which to create the image
@param srcImage the image to use as the source
@param flag the style, either <code>IMAGE_COPY</code>, <code>IMAGE_DISABLE</code> or <code>IMAGE_GRAY</code>

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if device is null and there is no current device</li>
<li>ERROR_NULL_ARGUMENT - if srcImage is null</li>
<li>ERROR_INVALID_ARGUMENT - if the flag is not one of <code>IMAGE_COPY</code>, <code>IMAGE_DISABLE</code> or <code>IMAGE_GRAY</code></li>
<li>ERROR_INVALID_ARGUMENT - if the image has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_INVALID_IMAGE - if the image is not a bitmap or an icon, or is otherwise in an invalid state</li>
<li>ERROR_UNSUPPORTED_DEPTH - if the depth of the image is not supported</li>
</ul>
@exception SWTError <ul>
<li>ERROR_NO_HANDLES if a handle could not be obtained for image creation</li>
</ul>

@see #dispose()
------------
Constructs an empty instance of this class with the
width and height of the specified rectangle. The result
may be drawn upon by creating a GC and using any of its
drawing operations, as shown in the following example:
<pre>
Image i = new Image(device, boundsRectangle);
GC gc = new GC(i);
gc.drawRectangle(0, 0, 50, 50);
gc.dispose();
</pre>
<p>
Note: Some platforms may have a limitation on the size
of image that can be created (size depends on width, height,
and depth). For example, Windows 95, 98, and ME do not allow
images larger than 16M.
</p>
<p>
You must dispose the image when it is no longer required.
</p>

@param device the device on which to create the image
@param bounds a rectangle specifying the image's width and height (must not be null)

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if device is null and there is no current device</li>
<li>ERROR_NULL_ARGUMENT - if the bounds rectangle is null</li>
<li>ERROR_INVALID_ARGUMENT - if either the rectangle's width or height is negative</li>
</ul>
@exception SWTError <ul>
<li>ERROR_NO_HANDLES if a handle could not be obtained for image creation</li>
</ul>

@see #dispose()
------------
Constructs an instance of this class from the given
<code>ImageData</code>.
<p>
You must dispose the image when it is no longer required.
</p>

@param device the device on which to create the image
@param data the image data to create the image from (must not be null)

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if device is null and there is no current device</li>
<li>ERROR_NULL_ARGUMENT - if the image data is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_UNSUPPORTED_DEPTH - if the depth of the ImageData is not supported</li>
</ul>
@exception SWTError <ul>
<li>ERROR_NO_HANDLES if a handle could not be obtained for image creation</li>
</ul>

@see #dispose()
------------
Constructs an instance of this class, whose type is
<code>SWT.ICON</code>, from the two given <code>ImageData</code>
objects. The two images must be the same size. Pixel transparency
in either image will be ignored.
<p>
The mask image should contain white wherever the icon is to be visible,
and black wherever the icon is to be transparent. In addition,
the source image should contain black wherever the icon is to be
transparent.
</p>
<p>
You must dispose the image when it is no longer required.
</p>

@param device the device on which to create the icon
@param source the color data for the icon
@param mask the mask data for the icon

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if device is null and there is no current device</li>
<li>ERROR_NULL_ARGUMENT - if either the source or mask is null </li>
<li>ERROR_INVALID_ARGUMENT - if source and mask are different sizes</li>
</ul>
@exception SWTError <ul>
<li>ERROR_NO_HANDLES if a handle could not be obtained for image creation</li>
</ul>

@see #dispose()
------------
Constructs an instance of this class by loading its representation
from the specified input stream. Throws an error if an error
occurs while loading the image, or if the result is an image
of an unsupported type.  Application code is still responsible
for closing the input stream.
<p>
This constructor is provided for convenience when loading a single
image only. If the stream contains multiple images, only the first
one will be loaded. To load multiple images, use
<code>ImageLoader.load()</code>.
</p><p>
This constructor may be used to load a resource as follows:
</p>
<pre>
static Image loadImage (Display display, Class clazz, String string) {
InputStream stream = clazz.getResourceAsStream (string);
if (stream == null) return null;
Image image = null;
try {
image = new Image (display, stream);
} catch (SWTException ex) {
} finally {
try {
stream.close ();
} catch (IOException ex) {}
}
return image;
}
</pre>
<p>
You must dispose the image when it is no longer required.
</p>

@param device the device on which to create the image
@param stream the input stream to load the image from

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if device is null and there is no current device</li>
<li>ERROR_NULL_ARGUMENT - if the stream is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_IO - if an IO error occurs while reading from the stream</li>
<li>ERROR_INVALID_IMAGE - if the image stream contains invalid data </li>
<li>ERROR_UNSUPPORTED_DEPTH - if the image stream describes an image with an unsupported depth</li>
<li>ERROR_UNSUPPORTED_FORMAT - if the image stream contains an unrecognized format</li>
</ul>
@exception SWTError <ul>
<li>ERROR_NO_HANDLES if a handle could not be obtained for image creation</li>
</ul>

@see #dispose()
------------
Constructs an instance of this class by loading its representation
from the file with the specified name. Throws an error if an error
occurs while loading the image, or if the result is an image
of an unsupported type.
<p>
This constructor is provided for convenience when loading
a single image only. If the specified file contains
multiple images, only the first one will be used.
<p>
You must dispose the image when it is no longer required.
</p>

@param device the device on which to create the image
@param filename the name of the file to load the image from

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if device is null and there is no current device</li>
<li>ERROR_NULL_ARGUMENT - if the file name is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_IO - if an IO error occurs while reading from the file</li>
<li>ERROR_INVALID_IMAGE - if the image file contains invalid data </li>
<li>ERROR_UNSUPPORTED_DEPTH - if the image file describes an image with an unsupported depth</li>
<li>ERROR_UNSUPPORTED_FORMAT - if the image file contains an unrecognized format</li>
</ul>
@exception SWTError <ul>
<li>ERROR_NO_HANDLES if a handle could not be obtained for image creation</li>
</ul>

@see #dispose()
------------
Constructs an instance of this class by loading its representation
from the file retrieved from the ImageFileNameProvider. Throws an
error if an error occurs while loading the image, or if the result
is an image of an unsupported type.
<p>
This constructor is provided for convenience for loading image as
per DPI level.

@param device the device on which to create the image
@param imageFileNameProvider the ImageFileNameProvider object that is
to be used to get the file name

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if device is null and there is no current device</li>
<li>ERROR_NULL_ARGUMENT - if the ImageFileNameProvider is null</li>
<li>ERROR_INVALID_ARGUMENT - if the fileName provided by ImageFileNameProvider is null at 100% zoom</li>
</ul>
@exception SWTException <ul>
<li>ERROR_IO - if an IO error occurs while reading from the file</li>
<li>ERROR_INVALID_IMAGE - if the image file contains invalid data </li>
<li>ERROR_UNSUPPORTED_DEPTH - if the image file describes an image with an unsupported depth</li>
<li>ERROR_UNSUPPORTED_FORMAT - if the image file contains an unrecognized format</li>
</ul>
@exception SWTError <ul>
<li>ERROR_NO_HANDLES if a handle could not be obtained for image creation</li>
</ul>
@since 3.104
------------
Constructs an instance of this class by loading its representation
from the ImageData retrieved from the ImageDataProvider. Throws an
error if an error occurs while loading the image, or if the result
is an image of an unsupported type.
<p>
This constructor is provided for convenience for loading image as
per DPI level.

@param device the device on which to create the image
@param imageDataProvider the ImageDataProvider object that is
to be used to get the ImageData

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if device is null and there is no current device</li>
<li>ERROR_NULL_ARGUMENT - if the ImageDataProvider is null</li>
<li>ERROR_INVALID_ARGUMENT - if the ImageData provided by ImageDataProvider is null at 100% zoom</li>
</ul>
@exception SWTException <ul>
<li>ERROR_IO - if an IO error occurs while reading from the file</li>
<li>ERROR_INVALID_IMAGE - if the image file contains invalid data </li>
<li>ERROR_UNSUPPORTED_DEPTH - if the image file describes an image with an unsupported depth</li>
<li>ERROR_UNSUPPORTED_FORMAT - if the image file contains an unrecognized format</li>
</ul>
@exception SWTError <ul>
<li>ERROR_NO_HANDLES if a handle could not be obtained for image creation</li>
</ul>
@since 3.104
------------
Refresh the Image based on the zoom level, if required.

@return true if image is refreshed
------------
Create a DIB from a DDB without using GetDIBits. Note that
the DDB should not be selected into a HDC.
------------
Compares the argument to the receiver, and returns true
if they represent the <em>same</em> object using a class
specific comparison.

@param object the object to compare with this object
@return <code>true</code> if the object is the same as this object and <code>false</code> otherwise

@see #hashCode
------------
Returns the color to which to map the transparent pixel, or null if
the receiver has no transparent pixel.
<p>
There are certain uses of Images that do not support transparency
(for example, setting an image into a button or label). In these cases,
it may be desired to simulate transparency by using the background
color of the widget to paint the transparent pixels of the image.
Use this method to check which color will be used in these cases
in place of transparency. This value may be set with setBackground().
<p>

@return the background color of the image, or null if there is no transparency in the image

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Returns the bounds of the receiver. The rectangle will always
have x and y values of 0, and the width and height of the
image.

@return a rectangle specifying the image's bounds in points.

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_INVALID_IMAGE - if the image is not a bitmap or an icon</li>
</ul>
------------
Returns the bounds of the receiver. The rectangle will always
have x and y values of 0, and the width and height of the
image in pixels.

@return a rectangle specifying the image's bounds in pixels.

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_INVALID_IMAGE - if the image is not a bitmap or an icon</li>
</ul>
@since 3.105
------------
Returns an <code>ImageData</code> based on the receiver.
Modifications made to this <code>ImageData</code> will not
affect the Image.

@return an <code>ImageData</code> containing the image's data and
attributes at 100% zoom level.

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_INVALID_IMAGE - if the image is not a bitmap or an icon</li>
</ul>

@see ImageData
------------
Returns an <code>ImageData</code> based on the receiver.
Modifications made to this <code>ImageData</code> will not
affect the Image.

@return an <code>ImageData</code> containing the image's data
and attributes at the current zoom level.

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_INVALID_IMAGE - if the image is not a bitmap or an icon</li>
</ul>

@see ImageData
@since 3.105
------------
Returns an integer hash code for the receiver. Any two
objects that return <code>true</code> when passed to
<code>equals</code> must return the same value for this
method.

@return the receiver's hash

@see #equals
------------
Feature in WinCE.  GetIconInfo is not available in WinCE.
The workaround is to cache the object ImageData for images
of type SWT.ICON. The bitmaps hbmMask and hbmColor can then
be reconstructed by using our version of getIconInfo.
This function takes an ICONINFO object and sets the fields
hbmMask and hbmColor with the corresponding bitmaps it has
created.
Note.  These bitmaps must be freed - as they would have to be
if the regular GetIconInfo had been used.
------------
Invokes platform specific functionality to allocate a new GC handle.
<p>
<b>IMPORTANT:</b> This method is <em>not</em> part of the public
API for <code>Image</code>. It is marked public only so that it
can be shared within the packages provided by SWT. It is not
available on all platforms, and should never be called from
application code.
</p>

@param data the platform specific GC data
@return the platform specific GC handle

@noreference This method is not intended to be referenced by clients.
------------
Invokes platform specific functionality to dispose a GC handle.
<p>
<b>IMPORTANT:</b> This method is <em>not</em> part of the public
API for <code>Image</code>. It is marked public only so that it
can be shared within the packages provided by SWT. It is not
available on all platforms, and should never be called from
application code.
</p>

@param hDC the platform specific GC handle
@param data the platform specific GC data

@noreference This method is not intended to be referenced by clients.
------------
Returns <code>true</code> if the image has been disposed,
and <code>false</code> otherwise.
<p>
This method gets the dispose state for the image.
When an image has been disposed, it is an error to
invoke any other method (except {@link #dispose()}) using the image.

@return <code>true</code> when the image is disposed and <code>false</code> otherwise
------------
Sets the color to which to map the transparent pixel.
<p>
There are certain uses of <code>Images</code> that do not support
transparency (for example, setting an image into a button or label).
In these cases, it may be desired to simulate transparency by using
the background color of the widget to paint the transparent pixels
of the image. This method specifies the color that will be used in
these cases. For example:
<pre>
Button b = new Button();
image.setBackground(b.getBackground());
b.setImage(image);
</pre>
</p><p>
The image may be modified by this operation (in effect, the
transparent regions may be filled with the supplied color).  Hence
this operation is not reversible and it is not legal to call
this function twice or with a null argument.
</p><p>
This method has no effect if the receiver does not have a transparent
pixel value.
</p>

@param color the color to use when a transparent pixel is specified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the color is null</li>
<li>ERROR_INVALID_ARGUMENT - if the color has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Returns a string containing a concise, human-readable
description of the receiver.

@return a string representation of the receiver
------------
Invokes platform specific functionality to allocate a new image.
<p>
<b>IMPORTANT:</b> This method is <em>not</em> part of the public
API for <code>Image</code>. It is marked public only so that it
can be shared within the packages provided by SWT. It is not
available on all platforms, and should never be called from
application code.
</p>

@param device the device on which to allocate the color
@param type the type of the image (<code>SWT.BITMAP</code> or <code>SWT.ICON</code>)
@param handle the OS handle for the image
@return a new image object containing the specified device, type and handle

@noreference This method is not intended to be referenced by clients.

====== ImageData.java ======
Copyright (c) 2000, 2016 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class are device-independent descriptions
of images. They are typically used as an intermediate format
between loading from or writing to streams and creating an
<code>Image</code>.
<p>
Note that the public fields <code>x</code>, <code>y</code>,
<code>disposalMethod</code> and <code>delayTime</code> are
typically only used when the image is in a set of images used
for animation.
</p>

@see Image
@see ImageLoader
@see <a href="http://www.eclipse.org/swt/snippets/#image">ImageData snippets</a>
@see <a href="http://www.eclipse.org/swt/examples.php">SWT Example: ImageAnalyzer</a>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
------------
The width of the image, in pixels.

public int width;


The height of the image, in pixels.

public int height;


The color depth of the image, in bits per pixel.
<p>
Note that a depth of 8 or less does not necessarily
mean that the image is palette indexed, or
conversely that a depth greater than 8 means that
the image is direct color.  Check the associated
PaletteData's isDirect field for such determinations.

public int depth;


The scanline padding.
<p>
If one scanline of the image is not a multiple of
this number, it will be padded with zeros until it is.
</p>

public int scanlinePad;


The number of bytes per scanline.
<p>
This is a multiple of the scanline padding.
</p>

public int bytesPerLine;


The pixel data of the image.
<p>
Note that for 16 bit depth images the pixel data is stored
in least significant byte order; however, for 24bit and
32bit depth images the pixel data is stored in most
significant byte order.
</p>

public byte[] data;


The color table for the image.

public PaletteData palette;


The transparent pixel.
<p>
Pixels with this value are transparent.
</p><p>
The default is -1 which means 'no transparent pixel'.
</p>

public int transparentPixel;


An icon-specific field containing the data from the icon mask.
<p>
This is a 1 bit bitmap stored with the most significant
bit first.  The number of bytes per scanline is
'((width + 7) / 8 + (maskPad - 1)) / maskPad * maskPad'.
</p><p>
The default is null which means 'no transparency mask'.
</p>

public byte[] maskData;


An icon-specific field containing the scanline pad of the mask.
<p>
If one scanline of the transparency mask is not a
multiple of this number, it will be padded with zeros until
it is.
</p>

public int maskPad;


The alpha data of the image.
<p>
Every pixel can have an <em>alpha blending</em> value that
varies from 0, meaning fully transparent, to 255 meaning
fully opaque.  The number of bytes per scanline is
'width'.
</p>

public byte[] alphaData;


The global alpha value to be used for every pixel.
<p>
If this value is set, the <code>alphaData</code> field
is ignored and when the image is rendered each pixel
will be blended with the background an amount
proportional to this value.
</p><p>
The default is -1 which means 'no global alpha value'
</p>

public int alpha;


The type of file from which the image was read.
*
It is expressed as one of the following values:
<dl>
<dt><code>IMAGE_BMP</code></dt>
<dd>Windows BMP file format, no compression</dd>
<dt><code>IMAGE_BMP_RLE</code></dt>
<dd>Windows BMP file format, RLE compression if appropriate</dd>
<dt><code>IMAGE_GIF</code></dt>
<dd>GIF file format</dd>
<dt><code>IMAGE_ICO</code></dt>
<dd>Windows ICO file format</dd>
<dt><code>IMAGE_JPEG</code></dt>
<dd>JPEG file format</dd>
<dt><code>IMAGE_PNG</code></dt>
<dd>PNG file format</dd>
</dl>

public int type;


The x coordinate of the top left corner of the image
within the logical screen (this field corresponds to
the GIF89a Image Left Position value).

public int x;


The y coordinate of the top left corner of the image
within the logical screen (this field corresponds to
the GIF89a Image Top Position value).

public int y;


A description of how to dispose of the current image
before displaying the next.
*
It is expressed as one of the following values:
<dl>
<dt><code>DM_UNSPECIFIED</code></dt>
<dd>disposal method not specified</dd>
<dt><code>DM_FILL_NONE</code></dt>
<dd>do nothing - leave the image in place</dd>
<dt><code>DM_FILL_BACKGROUND</code></dt>
<dd>fill with the background color</dd>
<dt><code>DM_FILL_PREVIOUS</code></dt>
<dd>restore the previous picture</dd>
</dl>
(this field corresponds to the GIF89a Disposal Method value)

public int disposalMethod;


The time to delay before displaying the next image
in an animation (this field corresponds to the GIF89a
Delay Time value).

public int delayTime;


Arbitrary channel width data to 8-bit conversion table.

static final byte[][] ANY_TO_EIGHT = new byte[9][];
static {
for (int b = 0; b < 9; ++b) {
byte[] data = ANY_TO_EIGHT[b] = new byte[1 << b];
if (b == 0) continue;
int inc = 0;
for (int bit = 0x10000; (bit >>= b) != 0;) inc |= bit;
for (int v = 0, p = 0; v < 0x10000; v+= inc) data[p++] = (byte)(v >> 8);
}
}
static final byte[] ONE_TO_ONE_MAPPING = ANY_TO_EIGHT[8];


Scaled 8x8 Bayer dither matrix.

static final int[][] DITHER_MATRIX = {
{ 0xfc0000, 0x7c0000, 0xdc0000, 0x5c0000, 0xf40000, 0x740000, 0xd40000, 0x540000 },
{ 0x3c0000, 0xbc0000, 0x1c0000, 0x9c0000, 0x340000, 0xb40000, 0x140000, 0x940000 },
{ 0xcc0000, 0x4c0000, 0xec0000, 0x6c0000, 0xc40000, 0x440000, 0xe40000, 0x640000 },
{ 0x0c0000, 0x8c0000, 0x2c0000, 0xac0000, 0x040000, 0x840000, 0x240000, 0xa40000 },
{ 0xf00000, 0x700000, 0xd00000, 0x500000, 0xf80000, 0x780000, 0xd80000, 0x580000 },
{ 0x300000, 0xb00000, 0x100000, 0x900000, 0x380000, 0xb80000, 0x180000, 0x980000 },
{ 0xc00000, 0x400000, 0xe00000, 0x600000, 0xc80000, 0x480000, 0xe80000, 0x680000 },
{ 0x000000, 0x800000, 0x200000, 0xa00000, 0x080000, 0x880000, 0x280000, 0xa80000 }
};


Constructs a new, empty ImageData with the given width, height,
depth and palette. The data will be initialized to an (all zero)
array of the appropriate size.

@param width the width of the image
@param height the height of the image
@param depth the depth of the image
@param palette the palette of the image (must not be null)

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the width or height is zero or negative, or if the depth is not
one of 1, 2, 4, 8, 16, 24 or 32</li>
<li>ERROR_NULL_ARGUMENT - if the palette is null</li>
</ul>
------------
Constructs a new, empty ImageData with the given width, height,
depth, palette, scanlinePad and data.

@param width the width of the image
@param height the height of the image
@param depth the depth of the image
@param palette the palette of the image
@param scanlinePad the padding of each line, in bytes
@param data the data of the image

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the width or height is zero or negative, or if the depth is not
one of 1, 2, 4, 8, 16, 24 or 32, or the data array is too small to contain the image data</li>
<li>ERROR_NULL_ARGUMENT - if the palette or data is null</li>
<li>ERROR_CANNOT_BE_ZERO - if the scanlinePad is zero</li>
</ul>
------------
Constructs an <code>ImageData</code> loaded from the specified
input stream. Throws an error if an error occurs while loading
the image, or if the image has an unsupported type.  Application
code is still responsible for closing the input stream.
<p>
This constructor is provided for convenience when loading a single
image only. If the stream contains multiple images, only the first
one will be loaded. To load multiple images, use
<code>ImageLoader.load()</code>.
</p><p>
This constructor may be used to load a resource as follows:
</p>
<pre>
static ImageData loadImageData (Class clazz, String string) {
InputStream stream = clazz.getResourceAsStream (string);
if (stream == null) return null;
ImageData imageData = null;
try {
imageData = new ImageData (stream);
} catch (SWTException ex) {
} finally {
try {
stream.close ();
} catch (IOException ex) {}
}
return imageData;
}
</pre>

@param stream the input stream to load the image from (must not be null)

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the stream is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_IO - if an IO error occurs while reading from the stream</li>
<li>ERROR_INVALID_IMAGE - if the image stream contains invalid data</li>
<li>ERROR_UNSUPPORTED_FORMAT - if the image stream contains an unrecognized format</li>
</ul>

@see ImageLoader#load(InputStream)
------------
Constructs an <code>ImageData</code> loaded from a file with the
specified name. Throws an error if an error occurs loading the
image, or if the image has an unsupported type.
<p>
This constructor is provided for convenience when loading a single
image only. If the file contains multiple images, only the first
one will be loaded. To load multiple images, use
<code>ImageLoader.load()</code>.
</p>

@param filename the name of the file to load the image from (must not be null)

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the file name is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_IO - if an IO error occurs while reading from the file</li>
<li>ERROR_INVALID_IMAGE - if the image file contains invalid data</li>
<li>ERROR_UNSUPPORTED_FORMAT - if the image file contains an unrecognized format</li>
</ul>
------------
Prevents uninitialized instances from being created outside the package.
------------
Constructs an image data by giving values for all non-computable fields.
<p>
This method is for internal use, and is not described further.
</p>
------------
Initializes all fields in the receiver. This method must be called
by all public constructors to ensure that all fields are initialized
for a new ImageData object. If a new field is added to the class,
then it must be added to this method.
<p>
This method is for internal use, and is not described further.
</p>
------------
Invokes internal SWT functionality to create a new instance of
this class.
<p>
<b>IMPORTANT:</b> This method is <em>not</em> part of the public
API for <code>ImageData</code>. It is marked public only so that it
can be shared within the packages provided by SWT. It is subject
to change without notice, and should never be called from
application code.
</p>
<p>
This method is for internal use, and is not described further.
</p>

@noreference This method is not intended to be referenced by clients.
------------
Returns a new instance of the same class as the receiver,
whose slots have been filled in with <em>copies</em> of
the values in the slots of the receiver. That is, the
returned object is a <em>deep copy</em> of the receiver.

@return a copy of the receiver.
------------
Returns the alpha value at offset <code>x</code> in
scanline <code>y</code> in the receiver's alpha data.
The alpha value is between 0 (transparent) and
255 (opaque).

@param x the x coordinate of the pixel to get the alpha value of
@param y the y coordinate of the pixel to get the alpha value of
@return the alpha value at the given coordinates

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if either argument is out of range</li>
</ul>
------------
Returns <code>getWidth</code> alpha values starting at offset
<code>x</code> in scanline <code>y</code> in the receiver's alpha
data starting at <code>startIndex</code>. The alpha values
are unsigned, between <code>(byte)0</code> (transparent) and
<code>(byte)255</code> (opaque).

@param x the x position of the pixel to begin getting alpha values
@param y the y position of the pixel to begin getting alpha values
@param getWidth the width of the data to get
@param alphas the buffer in which to put the alpha values
@param startIndex the offset into the image to begin getting alpha values

@exception IndexOutOfBoundsException if getWidth is too large
@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if pixels is null</li>
<li>ERROR_INVALID_ARGUMENT - if x or y is out of bounds</li>
<li>ERROR_INVALID_ARGUMENT - if getWidth is negative</li>
</ul>
------------
Returns the pixel value at offset <code>x</code> in
scanline <code>y</code> in the receiver's data.

@param x the x position of the pixel to get
@param y the y position of the pixel to get
@return the pixel at the given coordinates

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if either argument is out of bounds</li>
</ul>
@exception SWTException <ul>
<li>ERROR_UNSUPPORTED_DEPTH if the depth is not one of 1, 2, 4, 8, 16, 24 or 32</li>
</ul>
------------
Returns <code>getWidth</code> pixel values starting at offset
<code>x</code> in scanline <code>y</code> in the receiver's
data starting at <code>startIndex</code>.

@param x the x position of the first pixel to get
@param y the y position of the first pixel to get
@param getWidth the width of the data to get
@param pixels the buffer in which to put the pixels
@param startIndex the offset into the byte array to begin storing pixels

@exception IndexOutOfBoundsException if getWidth is too large
@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if pixels is null</li>
<li>ERROR_INVALID_ARGUMENT - if x or y is out of bounds</li>
<li>ERROR_INVALID_ARGUMENT - if getWidth is negative</li>
</ul>
@exception SWTException <ul>
<li>ERROR_UNSUPPORTED_DEPTH - if the depth is not one of 1, 2, 4 or 8
(For higher depths, use the int[] version of this method.)</li>
</ul>
------------
Returns <code>getWidth</code> pixel values starting at offset
<code>x</code> in scanline <code>y</code> in the receiver's
data starting at <code>startIndex</code>.

@param x the x position of the first pixel to get
@param y the y position of the first pixel to get
@param getWidth the width of the data to get
@param pixels the buffer in which to put the pixels
@param startIndex the offset into the buffer to begin storing pixels

@exception IndexOutOfBoundsException if getWidth is too large
@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if pixels is null</li>
<li>ERROR_INVALID_ARGUMENT - if x or y is out of bounds</li>
<li>ERROR_INVALID_ARGUMENT - if getWidth is negative</li>
</ul>
@exception SWTException <ul>
<li>ERROR_UNSUPPORTED_DEPTH - if the depth is not one of 1, 2, 4, 8, 16, 24 or 32</li>
</ul>
------------
Returns an array of <code>RGB</code>s which comprise the
indexed color table of the receiver, or null if the receiver
has a direct color model.

@return the RGB values for the image or null if direct color

@see PaletteData#getRGBs()
------------
Returns an <code>ImageData</code> which specifies the
transparency mask information for the receiver. If the
receiver has no transparency or is not an icon, returns
an opaque mask.

@return the transparency mask
------------
Returns the image transparency type, which will be one of
<code>SWT.TRANSPARENCY_NONE</code>, <code>SWT.TRANSPARENCY_MASK</code>,
<code>SWT.TRANSPARENCY_PIXEL</code> or <code>SWT.TRANSPARENCY_ALPHA</code>.

@return the receiver's transparency type
------------
Returns the byte order of the receiver.

@return MSB_FIRST or LSB_FIRST
------------
Returns a copy of the receiver which has been stretched or
shrunk to the specified size. If either the width or height
is negative, the resulting image will be inverted in the
associated axis.

@param width the width of the new ImageData
@param height the height of the new ImageData
@return a scaled copy of the image
------------
Sets the alpha value at offset <code>x</code> in
scanline <code>y</code> in the receiver's alpha data.
The alpha value must be between 0 (transparent)
and 255 (opaque).

@param x the x coordinate of the alpha value to set
@param y the y coordinate of the alpha value to set
@param alpha the value to set the alpha to

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if x or y is out of bounds</li>
</ul>
------------
Sets the alpha values starting at offset <code>x</code> in
scanline <code>y</code> in the receiver's alpha data to the
values from the array <code>alphas</code> starting at
<code>startIndex</code>. The alpha values must be between
<code>(byte)0</code> (transparent) and <code>(byte)255</code> (opaque)

@param x the x coordinate of the pixel to being setting the alpha values
@param y the y coordinate of the pixel to being setting the alpha values
@param putWidth the width of the alpha values to set
@param alphas the alpha values to set
@param startIndex the index at which to begin setting

@exception IndexOutOfBoundsException if putWidth is too large
@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if pixels is null</li>
<li>ERROR_INVALID_ARGUMENT - if x or y is out of bounds</li>
<li>ERROR_INVALID_ARGUMENT - if putWidth is negative</li>
</ul>
------------
Sets the pixel value at offset <code>x</code> in
scanline <code>y</code> in the receiver's data.

@param x the x coordinate of the pixel to set
@param y the y coordinate of the pixel to set
@param pixelValue the value to set the pixel to

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if x or y is out of bounds</li>
</ul>
@exception SWTException <ul>
<li>ERROR_UNSUPPORTED_DEPTH if the depth is not one of 1, 2, 4, 8, 16, 24 or 32</li>
</ul>
------------
Sets the pixel values starting at offset <code>x</code> in
scanline <code>y</code> in the receiver's data to the
values from the array <code>pixels</code> starting at
<code>startIndex</code>.

@param x the x position of the pixel to set
@param y the y position of the pixel to set
@param putWidth the width of the pixels to set
@param pixels the pixels to set
@param startIndex the index at which to begin setting

@exception IndexOutOfBoundsException if putWidth is too large
@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if pixels is null</li>
<li>ERROR_INVALID_ARGUMENT - if x or y is out of bounds</li>
<li>ERROR_INVALID_ARGUMENT - if putWidth is negative</li>
</ul>
@exception SWTException <ul>
<li>ERROR_UNSUPPORTED_DEPTH if the depth is not one of 1, 2, 4, 8
(For higher depths, use the int[] version of this method.)</li>
</ul>
------------
Sets the pixel values starting at offset <code>x</code> in
scanline <code>y</code> in the receiver's data to the
values from the array <code>pixels</code> starting at
<code>startIndex</code>.

@param x the x position of the pixel to set
@param y the y position of the pixel to set
@param putWidth the width of the pixels to set
@param pixels the pixels to set
@param startIndex the index at which to begin setting

@exception IndexOutOfBoundsException if putWidth is too large
@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if pixels is null</li>
<li>ERROR_INVALID_ARGUMENT - if x or y is out of bounds</li>
<li>ERROR_INVALID_ARGUMENT - if putWidth is negative</li>
</ul>
@exception SWTException <ul>
<li>ERROR_UNSUPPORTED_DEPTH if the depth is not one of 1, 2, 4, 8, 16, 24 or 32</li>
</ul>
------------
Returns a palette with 2 colors: black & white.
------------
Gets the offset of the most significant bit for
the given mask.
------------
Finds the closest match.
------------
Blit operation bits to be OR'ed together to specify the desired operation.
------------
Alpha mode, values 0 - 255 specify global alpha level
------------
Byte and bit order constants.
------------
Data types (internal)
------------
Blits a direct palette image into a direct palette image.
<p>
Note: When the source and destination depth, order and masks
are pairwise equal and the blitter operation is BLIT_SRC,
the masks are ignored.  Hence when not changing the image
data format, 0 may be specified for the masks.
</p>

@param op the blitter operation: a combination of BLIT_xxx flags
(see BLIT_xxx constants)
@param srcData the source byte array containing image data
@param srcDepth the source depth: one of 8, 16, 24, 32
@param srcStride the source number of bytes per line
@param srcOrder the source byte ordering: one of MSB_FIRST or LSB_FIRST;
ignored if srcDepth is not 16 or 32
@param srcX the top-left x-coord of the source blit region
@param srcY the top-left y-coord of the source blit region
@param srcWidth the width of the source blit region
@param srcHeight the height of the source blit region
@param srcRedMask the source red channel mask
@param srcGreenMask the source green channel mask
@param srcBlueMask the source blue channel mask
@param alphaMode the alpha blending or mask mode, may be
an integer 0-255 for global alpha; ignored if BLIT_ALPHA
not specified in the blitter operations
(see ALPHA_MODE_xxx constants)
@param alphaData the alpha blending or mask data, varies depending
on the value of alphaMode and sometimes ignored
@param alphaStride the alpha data number of bytes per line
@param alphaX the top-left x-coord of the alpha blit region
@param alphaY the top-left y-coord of the alpha blit region
@param destData the destination byte array containing image data
@param destDepth the destination depth: one of 8, 16, 24, 32
@param destStride the destination number of bytes per line
@param destOrder the destination byte ordering: one of MSB_FIRST or LSB_FIRST;
ignored if destDepth is not 16 or 32
@param destX the top-left x-coord of the destination blit region
@param destY the top-left y-coord of the destination blit region
@param destWidth the width of the destination blit region
@param destHeight the height of the destination blit region
@param destRedMask the destination red channel mask
@param destGreenMask the destination green channel mask
@param destBlueMask the destination blue channel mask
@param flipX if true the resulting image is flipped along the vertical axis
@param flipY if true the resulting image is flipped along the horizontal axis
------------
Prepare scaling data ***/
final int dwm1 = destWidth - 1;
final int sfxi = (dwm1 != 0) ? (int)((((long)srcWidth << 16) - 1) / dwm1) : 0;
final int dhm1 = destHeight - 1;
final int sfyi = (dhm1 != 0) ? (int)((((long)srcHeight << 16) - 1) / dhm1) : 0;

Prepare source-related data ***/
final int sbpp, stype;
switch (srcDepth) {
case 8:
sbpp = 1;
stype = TYPE_GENERIC_8;
break;
case 16:
sbpp = 2;
stype = (srcOrder == MSB_FIRST) ? TYPE_GENERIC_16_MSB : TYPE_GENERIC_16_LSB;
break;
case 24:
sbpp = 3;
stype = TYPE_GENERIC_24;
break;
case 32:
sbpp = 4;
stype = (srcOrder == MSB_FIRST) ? TYPE_GENERIC_32_MSB : TYPE_GENERIC_32_LSB;
break;
default:
//throw new IllegalArgumentException("Invalid source type");
return;
}
int spr = srcY * srcStride + srcX * sbpp;

Prepare destination-related data ***/
final int dbpp, dtype;
switch (destDepth) {
case 8:
dbpp = 1;
dtype = TYPE_GENERIC_8;
break;
case 16:
dbpp = 2;
dtype = (destOrder == MSB_FIRST) ? TYPE_GENERIC_16_MSB : TYPE_GENERIC_16_LSB;
break;
case 24:
dbpp = 3;
dtype = TYPE_GENERIC_24;
break;
case 32:
dbpp = 4;
dtype = (destOrder == MSB_FIRST) ? TYPE_GENERIC_32_MSB : TYPE_GENERIC_32_LSB;
break;
default:
//throw new IllegalArgumentException("Invalid destination type");
return;
}
int dpr = ((flipY) ? destY + dhm1 : destY) * destStride + ((flipX) ? destX + dwm1 : destX) * dbpp;
final int dprxi = (flipX) ? -dbpp : dbpp;
final int dpryi = (flipY) ? -destStride : destStride;

Prepare special processing data ***/
int apr;
if ((op & BLIT_ALPHA) != 0) {
switch (alphaMode) {
case ALPHA_MASK_UNPACKED:
case ALPHA_CHANNEL_SEPARATE:
if (alphaData == null) alphaMode = 0x10000;
apr = alphaY * alphaStride + alphaX;
break;
case ALPHA_MASK_PACKED:
if (alphaData == null) alphaMode = 0x10000;
alphaStride <<= 3;
apr = alphaY * alphaStride + alphaX;
break;
case ALPHA_MASK_INDEX:
//throw new IllegalArgumentException("Invalid alpha type");
return;
case ALPHA_MASK_RGB:
if (alphaData == null) alphaMode = 0x10000;
apr = 0;
break;
default:
alphaMode = (alphaMode << 16) / 255; // prescale
case ALPHA_CHANNEL_SOURCE:
apr = 0;
break;
}
} else {
alphaMode = 0x10000;
apr = 0;
}

Blit ***/
int dp = dpr;
int sp = spr;
if ((alphaMode == 0x10000) && (stype == dtype) &&
(srcRedMask == destRedMask) && (srcGreenMask == destGreenMask) &&
(srcBlueMask == destBlueMask) && (srcAlphaMask == destAlphaMask)) {
Fast blit (straight copy) ***/
switch (sbpp) {
case 1:
for (int dy = destHeight, sfy = sfyi; dy > 0; --dy, sp = spr += (sfy >>> 16) * srcStride, sfy = (sfy & 0xffff) + sfyi, dp = dpr += dpryi) {
for (int dx = destWidth, sfx = sfxi; dx > 0; --dx, dp += dprxi, sfx = (sfx & 0xffff) + sfxi) {
destData[dp] = srcData[sp];
sp += (sfx >>> 16);
}
}
break;
case 2:
for (int dy = destHeight, sfy = sfyi; dy > 0; --dy, sp = spr += (sfy >>> 16) * srcStride, sfy = (sfy & 0xffff) + sfyi, dp = dpr += dpryi) {
for (int dx = destWidth, sfx = sfxi; dx > 0; --dx, dp += dprxi, sfx = (sfx & 0xffff) + sfxi) {
destData[dp] = srcData[sp];
destData[dp + 1] = srcData[sp + 1];
sp += (sfx >>> 16) * 2;
}
}
break;
case 3:
for (int dy = destHeight, sfy = sfyi; dy > 0; --dy, sp = spr += (sfy >>> 16) * srcStride, sfy = (sfy & 0xffff) + sfyi, dp = dpr += dpryi) {
for (int dx = destWidth, sfx = sfxi; dx > 0; --dx, dp += dprxi, sfx = (sfx & 0xffff) + sfxi) {
destData[dp] = srcData[sp];
destData[dp + 1] = srcData[sp + 1];
destData[dp + 2] = srcData[sp + 2];
sp += (sfx >>> 16) * 3;
}
}
break;
case 4:
for (int dy = destHeight, sfy = sfyi; dy > 0; --dy, sp = spr += (sfy >>> 16) * srcStride, sfy = (sfy & 0xffff) + sfyi, dp = dpr += dpryi) {
for (int dx = destWidth, sfx = sfxi; dx > 0; --dx, dp += dprxi, sfx = (sfx & 0xffff) + sfxi) {
destData[dp] = srcData[sp];
destData[dp + 1] = srcData[sp + 1];
destData[dp + 2] = srcData[sp + 2];
destData[dp + 3] = srcData[sp + 3];
sp += (sfx >>> 16) * 4;
}
}
break;
}
return;
}
/*Fast 32 to 32 blit */
if (alphaMode == 0x10000 && stype == TYPE_GENERIC_32_MSB && dtype == TYPE_GENERIC_32_MSB) {
if (srcRedMask == 0xFF00 && srcGreenMask == 0xff0000 && srcBlueMask == 0xff000000 && destRedMask == 0xFF0000 && destGreenMask == 0xff00 && destBlueMask == 0xff) {
for (int dy = destHeight, sfy = sfyi; dy > 0; --dy, sp = spr += (sfy >>> 16) * srcStride, sfy = (sfy & 0xffff) + sfyi, dp = dpr += dpryi) {
for (int dx = destWidth, sfx = sfxi; dx > 0; --dx, dp += dprxi, sfx = (sfx & 0xffff) + sfxi) {
destData[dp] = srcData[sp + 3];
destData[dp + 1] = srcData[sp + 2];
destData[dp + 2] = srcData[sp + 1];
destData[dp + 3] = srcData[sp];
sp += (sfx >>> 16) * 4;
}
}
return;
}
}
/*Fast 24 to 32 blit */
if (alphaMode == 0x10000 && stype == TYPE_GENERIC_24 && dtype == TYPE_GENERIC_32_MSB) {
if (srcRedMask == 0xFF && srcGreenMask == 0xff00 && srcBlueMask == 0xff0000 && destRedMask == 0xFF0000 && destGreenMask == 0xff00 && destBlueMask == 0xff) {
for (int dy = destHeight, sfy = sfyi; dy > 0; --dy, sp = spr += (sfy >>> 16) * srcStride, sfy = (sfy & 0xffff) + sfyi, dp = dpr += dpryi) {
for (int dx = destWidth, sfx = sfxi; dx > 0; --dx, dp += dprxi, sfx = (sfx & 0xffff) + sfxi) {
destData[dp] = 0;
destData[dp + 1] = srcData[sp + 2];
destData[dp + 2] = srcData[sp + 1];
destData[dp + 3] = srcData[sp];
sp += (sfx >>> 16) * 3;
}
}
return;
}
}

Comprehensive blit (apply transformations) ***/
final int srcRedShift = getChannelShift(srcRedMask);
final byte[] srcReds = ANY_TO_EIGHT[getChannelWidth(srcRedMask, srcRedShift)];
final int srcGreenShift = getChannelShift(srcGreenMask);
final byte[] srcGreens = ANY_TO_EIGHT[getChannelWidth(srcGreenMask, srcGreenShift)];
final int srcBlueShift = getChannelShift(srcBlueMask);
final byte[] srcBlues = ANY_TO_EIGHT[getChannelWidth(srcBlueMask, srcBlueShift)];
final int srcAlphaShift = getChannelShift(srcAlphaMask);
final byte[] srcAlphas = ANY_TO_EIGHT[getChannelWidth(srcAlphaMask, srcAlphaShift)];

final int destRedShift = getChannelShift(destRedMask);
final int destRedWidth = getChannelWidth(destRedMask, destRedShift);
final byte[] destReds = ANY_TO_EIGHT[destRedWidth];
final int destRedPreShift = 8 - destRedWidth;
final int destGreenShift = getChannelShift(destGreenMask);
final int destGreenWidth = getChannelWidth(destGreenMask, destGreenShift);
final byte[] destGreens = ANY_TO_EIGHT[destGreenWidth];
final int destGreenPreShift = 8 - destGreenWidth;
final int destBlueShift = getChannelShift(destBlueMask);
final int destBlueWidth = getChannelWidth(destBlueMask, destBlueShift);
final byte[] destBlues = ANY_TO_EIGHT[destBlueWidth];
final int destBluePreShift = 8 - destBlueWidth;
final int destAlphaShift = getChannelShift(destAlphaMask);
final int destAlphaWidth = getChannelWidth(destAlphaMask, destAlphaShift);
final byte[] destAlphas = ANY_TO_EIGHT[destAlphaWidth];
final int destAlphaPreShift = 8 - destAlphaWidth;

int ap = apr, alpha = alphaMode;
int r = 0, g = 0, b = 0, a = 0;
int rq = 0, gq = 0, bq = 0, aq = 0;
for (int dy = destHeight, sfy = sfyi; dy > 0; --dy,
sp = spr += (sfy >>> 16) * srcStride,
ap = apr += (sfy >>> 16) * alphaStride,
sfy = (sfy & 0xffff) + sfyi,
dp = dpr += dpryi) {
for (int dx = destWidth, sfx = sfxi; dx > 0; --dx,
dp += dprxi,
sfx = (sfx & 0xffff) + sfxi) {
READ NEXT PIXEL ***/
switch (stype) {
case TYPE_GENERIC_8: {
final int data = srcData[sp] & 0xff;
sp += (sfx >>> 16);
r = srcReds[(data & srcRedMask) >>> srcRedShift] & 0xff;
g = srcGreens[(data & srcGreenMask) >>> srcGreenShift] & 0xff;
b = srcBlues[(data & srcBlueMask) >>> srcBlueShift] & 0xff;
a = srcAlphas[(data & srcAlphaMask) >>> srcAlphaShift] & 0xff;
} break;
case TYPE_GENERIC_16_MSB: {
final int data = ((srcData[sp] & 0xff) << 8) | (srcData[sp + 1] & 0xff);
sp += (sfx >>> 16) * 2;
r = srcReds[(data & srcRedMask) >>> srcRedShift] & 0xff;
g = srcGreens[(data & srcGreenMask) >>> srcGreenShift] & 0xff;
b = srcBlues[(data & srcBlueMask) >>> srcBlueShift] & 0xff;
a = srcAlphas[(data & srcAlphaMask) >>> srcAlphaShift] & 0xff;
} break;
case TYPE_GENERIC_16_LSB: {
final int data = ((srcData[sp + 1] & 0xff) << 8) | (srcData[sp] & 0xff);
sp += (sfx >>> 16) * 2;
r = srcReds[(data & srcRedMask) >>> srcRedShift] & 0xff;
g = srcGreens[(data & srcGreenMask) >>> srcGreenShift] & 0xff;
b = srcBlues[(data & srcBlueMask) >>> srcBlueShift] & 0xff;
a = srcAlphas[(data & srcAlphaMask) >>> srcAlphaShift] & 0xff;
} break;
case TYPE_GENERIC_24: {
final int data = (( ((srcData[sp] & 0xff) << 8) |
(srcData[sp + 1] & 0xff)) << 8) |
(srcData[sp + 2] & 0xff);
sp += (sfx >>> 16) * 3;
r = srcReds[(data & srcRedMask) >>> srcRedShift] & 0xff;
g = srcGreens[(data & srcGreenMask) >>> srcGreenShift] & 0xff;
b = srcBlues[(data & srcBlueMask) >>> srcBlueShift] & 0xff;
a = srcAlphas[(data & srcAlphaMask) >>> srcAlphaShift] & 0xff;
} break;
case TYPE_GENERIC_32_MSB: {
final int data = (( (( ((srcData[sp] & 0xff) << 8) |
(srcData[sp + 1] & 0xff)) << 8) |
(srcData[sp + 2] & 0xff)) << 8) |
(srcData[sp + 3] & 0xff);
sp += (sfx >>> 16) * 4;
r = srcReds[(data & srcRedMask) >>> srcRedShift] & 0xff;
g = srcGreens[(data & srcGreenMask) >>> srcGreenShift] & 0xff;
b = srcBlues[(data & srcBlueMask) >>> srcBlueShift] & 0xff;
a = srcAlphas[(data & srcAlphaMask) >>> srcAlphaShift] & 0xff;
} break;
case TYPE_GENERIC_32_LSB: {
final int data = (( (( ((srcData[sp + 3] & 0xff) << 8) |
(srcData[sp + 2] & 0xff)) << 8) |
(srcData[sp + 1] & 0xff)) << 8) |
(srcData[sp] & 0xff);
sp += (sfx >>> 16) * 4;
r = srcReds[(data & srcRedMask) >>> srcRedShift] & 0xff;
g = srcGreens[(data & srcGreenMask) >>> srcGreenShift] & 0xff;
b = srcBlues[(data & srcBlueMask) >>> srcBlueShift] & 0xff;
a = srcAlphas[(data & srcAlphaMask) >>> srcAlphaShift] & 0xff;
} break;
}

DO SPECIAL PROCESSING IF REQUIRED ***/
switch (alphaMode) {
case ALPHA_CHANNEL_SEPARATE:
alpha = ((alphaData[ap] & 0xff) << 16) / 255;
ap += (sfx >> 16);
break;
case ALPHA_CHANNEL_SOURCE:
alpha = (a << 16) / 255;
break;
case ALPHA_MASK_UNPACKED:
alpha = (alphaData[ap] != 0) ? 0x10000 : 0;
ap += (sfx >> 16);
break;
case ALPHA_MASK_PACKED:
alpha = (alphaData[ap >> 3] << ((ap & 7) + 9)) & 0x10000;
ap += (sfx >> 16);
break;
case ALPHA_MASK_RGB:
alpha = 0x10000;
for (int i = 0; i < alphaData.length; i += 3) {
if ((r == alphaData[i]) && (g == alphaData[i + 1]) && (b == alphaData[i + 2])) {
alpha = 0x0000;
break;
}
}
break;
}
if (alpha != 0x10000) {
if (alpha == 0x0000) continue;
switch (dtype) {
case TYPE_GENERIC_8: {
final int data = destData[dp] & 0xff;
rq = destReds[(data & destRedMask) >>> destRedShift] & 0xff;
gq = destGreens[(data & destGreenMask) >>> destGreenShift] & 0xff;
bq = destBlues[(data & destBlueMask) >>> destBlueShift] & 0xff;
aq = destAlphas[(data & destAlphaMask) >>> destAlphaShift] & 0xff;
} break;
case TYPE_GENERIC_16_MSB: {
final int data = ((destData[dp] & 0xff) << 8) | (destData[dp + 1] & 0xff);
rq = destReds[(data & destRedMask) >>> destRedShift] & 0xff;
gq = destGreens[(data & destGreenMask) >>> destGreenShift] & 0xff;
bq = destBlues[(data & destBlueMask) >>> destBlueShift] & 0xff;
aq = destAlphas[(data & destAlphaMask) >>> destAlphaShift] & 0xff;
} break;
case TYPE_GENERIC_16_LSB: {
final int data = ((destData[dp + 1] & 0xff) << 8) | (destData[dp] & 0xff);
rq = destReds[(data & destRedMask) >>> destRedShift] & 0xff;
gq = destGreens[(data & destGreenMask) >>> destGreenShift] & 0xff;
bq = destBlues[(data & destBlueMask) >>> destBlueShift] & 0xff;
aq = destAlphas[(data & destAlphaMask) >>> destAlphaShift] & 0xff;
} break;
case TYPE_GENERIC_24: {
final int data = (( ((destData[dp] & 0xff) << 8) |
(destData[dp + 1] & 0xff)) << 8) |
(destData[dp + 2] & 0xff);
rq = destReds[(data & destRedMask) >>> destRedShift] & 0xff;
gq = destGreens[(data & destGreenMask) >>> destGreenShift] & 0xff;
bq = destBlues[(data & destBlueMask) >>> destBlueShift] & 0xff;
aq = destAlphas[(data & destAlphaMask) >>> destAlphaShift] & 0xff;
} break;
case TYPE_GENERIC_32_MSB: {
final int data = (( (( ((destData[dp] & 0xff) << 8) |
(destData[dp + 1] & 0xff)) << 8) |
(destData[dp + 2] & 0xff)) << 8) |
(destData[dp + 3] & 0xff);
rq = destReds[(data & destRedMask) >>> destRedShift] & 0xff;
gq = destGreens[(data & destGreenMask) >>> destGreenShift] & 0xff;
bq = destBlues[(data & destBlueMask) >>> destBlueShift] & 0xff;
aq = destAlphas[(data & destAlphaMask) >>> destAlphaShift] & 0xff;
} break;
case TYPE_GENERIC_32_LSB: {
final int data = (( (( ((destData[dp + 3] & 0xff) << 8) |
(destData[dp + 2] & 0xff)) << 8) |
(destData[dp + 1] & 0xff)) << 8) |
(destData[dp] & 0xff);
rq = destReds[(data & destRedMask) >>> destRedShift] & 0xff;
gq = destGreens[(data & destGreenMask) >>> destGreenShift] & 0xff;
bq = destBlues[(data & destBlueMask) >>> destBlueShift] & 0xff;
aq = destAlphas[(data & destAlphaMask) >>> destAlphaShift] & 0xff;
} break;
}
// Perform alpha blending
a = aq + ((a - aq) * alpha >> 16);
r = rq + ((r - rq) * alpha >> 16);
g = gq + ((g - gq) * alpha >> 16);
b = bq + ((b - bq) * alpha >> 16);
}

WRITE NEXT PIXEL ***/
final int data =
(r >>> destRedPreShift << destRedShift) |
(g >>> destGreenPreShift << destGreenShift) |
(b >>> destBluePreShift << destBlueShift) |
(a >>> destAlphaPreShift << destAlphaShift);
switch (dtype) {
case TYPE_GENERIC_8: {
destData[dp] = (byte) data;
} break;
case TYPE_GENERIC_16_MSB: {
destData[dp] = (byte) (data >>> 8);
destData[dp + 1] = (byte) (data & 0xff);
} break;
case TYPE_GENERIC_16_LSB: {
destData[dp] = (byte) (data & 0xff);
destData[dp + 1] = (byte) (data >>> 8);
} break;
case TYPE_GENERIC_24: {
destData[dp] = (byte) (data >>> 16);
destData[dp + 1] = (byte) (data >>> 8);
destData[dp + 2] = (byte) (data & 0xff);
} break;
case TYPE_GENERIC_32_MSB: {
destData[dp] = (byte) (data >>> 24);
destData[dp + 1] = (byte) (data >>> 16);
destData[dp + 2] = (byte) (data >>> 8);
destData[dp + 3] = (byte) (data & 0xff);
} break;
case TYPE_GENERIC_32_LSB: {
destData[dp] = (byte) (data & 0xff);
destData[dp + 1] = (byte) (data >>> 8);
destData[dp + 2] = (byte) (data >>> 16);
destData[dp + 3] = (byte) (data >>> 24);
} break;
}
}
}
}


Blits an index palette image into an index palette image.
<p>
Note: The source and destination red, green, and blue
arrays may be null if no alpha blending or dither is to be
performed.
</p>

@param op the blitter operation: a combination of BLIT_xxx flags
(see BLIT_xxx constants)
@param srcData the source byte array containing image data
@param srcDepth the source depth: one of 1, 2, 4, 8
@param srcStride the source number of bytes per line
@param srcOrder the source byte ordering: one of MSB_FIRST or LSB_FIRST;
ignored if srcDepth is not 1
@param srcX the top-left x-coord of the source blit region
@param srcY the top-left y-coord of the source blit region
@param srcWidth the width of the source blit region
@param srcHeight the height of the source blit region
@param srcReds the source palette red component intensities
@param srcGreens the source palette green component intensities
@param srcBlues the source palette blue component intensities
@param alphaMode the alpha blending or mask mode, may be
an integer 0-255 for global alpha; ignored if BLIT_ALPHA
not specified in the blitter operations
(see ALPHA_MODE_xxx constants)
@param alphaData the alpha blending or mask data, varies depending
on the value of alphaMode and sometimes ignored
@param alphaStride the alpha data number of bytes per line
@param alphaX the top-left x-coord of the alpha blit region
@param alphaY the top-left y-coord of the alpha blit region
@param destData the destination byte array containing image data
@param destDepth the destination depth: one of 1, 2, 4, 8
@param destStride the destination number of bytes per line
@param destOrder the destination byte ordering: one of MSB_FIRST or LSB_FIRST;
ignored if destDepth is not 1
@param destX the top-left x-coord of the destination blit region
@param destY the top-left y-coord of the destination blit region
@param destWidth the width of the destination blit region
@param destHeight the height of the destination blit region
@param destReds the destination palette red component intensities
@param destGreens the destination palette green component intensities
@param destBlues the destination palette blue component intensities
@param flipX if true the resulting image is flipped along the vertical axis
@param flipY if true the resulting image is flipped along the horizontal axis
------------
Prepare scaling data ***/
final int dwm1 = destWidth - 1;
final int sfxi = (dwm1 != 0) ? (int)((((long)srcWidth << 16) - 1) / dwm1) : 0;
final int dhm1 = destHeight - 1;
final int sfyi = (dhm1 != 0) ? (int)((((long)srcHeight << 16) - 1) / dhm1) : 0;

Prepare source-related data ***/
final int stype;
switch (srcDepth) {
case 8:
stype = TYPE_INDEX_8;
break;
case 4:
srcStride <<= 1;
stype = TYPE_INDEX_4;
break;
case 2:
srcStride <<= 2;
stype = TYPE_INDEX_2;
break;
case 1:
srcStride <<= 3;
stype = (srcOrder == MSB_FIRST) ? TYPE_INDEX_1_MSB : TYPE_INDEX_1_LSB;
break;
default:
//throw new IllegalArgumentException("Invalid source type");
return;
}
int spr = srcY * srcStride + srcX;

Prepare destination-related data ***/
final int dtype;
switch (destDepth) {
case 8:
dtype = TYPE_INDEX_8;
break;
case 4:
destStride <<= 1;
dtype = TYPE_INDEX_4;
break;
case 2:
destStride <<= 2;
dtype = TYPE_INDEX_2;
break;
case 1:
destStride <<= 3;
dtype = (destOrder == MSB_FIRST) ? TYPE_INDEX_1_MSB : TYPE_INDEX_1_LSB;
break;
default:
//throw new IllegalArgumentException("Invalid source type");
return;
}
int dpr = ((flipY) ? destY + dhm1 : destY) * destStride + ((flipX) ? destX + dwm1 : destX);
final int dprxi = (flipX) ? -1 : 1;
final int dpryi = (flipY) ? -destStride : destStride;

Prepare special processing data ***/
int apr;
if ((op & BLIT_ALPHA) != 0) {
switch (alphaMode) {
case ALPHA_MASK_UNPACKED:
case ALPHA_CHANNEL_SEPARATE:
if (alphaData == null) alphaMode = 0x10000;
apr = alphaY * alphaStride + alphaX;
break;
case ALPHA_MASK_PACKED:
if (alphaData == null) alphaMode = 0x10000;
alphaStride <<= 3;
apr = alphaY * alphaStride + alphaX;
break;
case ALPHA_MASK_INDEX:
case ALPHA_MASK_RGB:
if (alphaData == null) alphaMode = 0x10000;
apr = 0;
break;
default:
alphaMode = (alphaMode << 16) / 255; // prescale
case ALPHA_CHANNEL_SOURCE:
apr = 0;
break;
}
} else {
alphaMode = 0x10000;
apr = 0;
}
final boolean ditherEnabled = (op & BLIT_DITHER) != 0;

Blit ***/
int dp = dpr;
int sp = spr;
int ap = apr;
int destPaletteSize = 1 << destDepth;
if ((destReds != null) && (destReds.length < destPaletteSize)) destPaletteSize = destReds.length;
byte[] paletteMapping = null;
boolean isExactPaletteMapping = true;
switch (alphaMode) {
case 0x10000:
If the palettes and formats are equivalent use a one-to-one mapping ***/
if ((stype == dtype) &&
(srcReds == destReds) && (srcGreens == destGreens) && (srcBlues == destBlues)) {
paletteMapping = ONE_TO_ONE_MAPPING;
break;
If palettes have not been supplied, supply a suitable mapping ***/
} else if ((srcReds == null) || (destReds == null)) {
if (srcDepth <= destDepth) {
paletteMapping = ONE_TO_ONE_MAPPING;
} else {
paletteMapping = new byte[1 << srcDepth];
int mask = (0xff << destDepth) >>> 8;
for (int i = 0; i < paletteMapping.length; ++i) paletteMapping[i] = (byte)(i & mask);
}
break;
}
case ALPHA_MASK_UNPACKED:
case ALPHA_MASK_PACKED:
case ALPHA_MASK_INDEX:
case ALPHA_MASK_RGB:
Generate a palette mapping ***/
int srcPaletteSize = 1 << srcDepth;
paletteMapping = new byte[srcPaletteSize];
if ((srcReds != null) && (srcReds.length < srcPaletteSize)) srcPaletteSize = srcReds.length;
for (int i = 0, r, g, b, index; i < srcPaletteSize; ++i) {
r = srcReds[i] & 0xff;
g = srcGreens[i] & 0xff;
b = srcBlues[i] & 0xff;
index = 0;
int minDistance = 0x7fffffff;
for (int j = 0, dr, dg, db, distance; j < destPaletteSize; ++j) {
dr = (destReds[j] & 0xff) - r;
dg = (destGreens[j] & 0xff) - g;
db = (destBlues[j] & 0xff) - b;
distance = dr * dr + dg * dg + db * db;
if (distance < minDistance) {
index = j;
if (distance == 0) break;
minDistance = distance;
}
}
paletteMapping[i] = (byte)index;
if (minDistance != 0) isExactPaletteMapping = false;
}
break;
}
if ((paletteMapping != null) && (isExactPaletteMapping || ! ditherEnabled)) {
if ((stype == dtype) && (alphaMode == 0x10000)) {
Fast blit (copy w/ mapping) ***/
switch (stype) {
case TYPE_INDEX_8:
for (int dy = destHeight, sfy = sfyi; dy > 0; --dy, sp = spr += (sfy >>> 16) * srcStride, sfy = (sfy & 0xffff) + sfyi, dp = dpr += dpryi) {
for (int dx = destWidth, sfx = sfxi; dx > 0; --dx, dp += dprxi, sfx = (sfx & 0xffff) + sfxi) {
destData[dp] = paletteMapping[srcData[sp] & 0xff];
sp += (sfx >>> 16);
}
}
break;
case TYPE_INDEX_4:
for (int dy = destHeight, sfy = sfyi; dy > 0; --dy, sp = spr += (sfy >>> 16) * srcStride, sfy = (sfy & 0xffff) + sfyi, dp = dpr += dpryi) {
for (int dx = destWidth, sfx = sfxi; dx > 0; --dx, dp += dprxi, sfx = (sfx & 0xffff) + sfxi) {
final int v;
if ((sp & 1) != 0) v = paletteMapping[srcData[sp >> 1] & 0x0f];
else v = (srcData[sp >> 1] >>> 4) & 0x0f;
sp += (sfx >>> 16);
if ((dp & 1) != 0) destData[dp >> 1] = (byte)((destData[dp >> 1] & 0xf0) | v);
else destData[dp >> 1] = (byte)((destData[dp >> 1] & 0x0f) | (v << 4));
}
}
break;
case TYPE_INDEX_2:
for (int dy = destHeight, sfy = sfyi; dy > 0; --dy, sp = spr += (sfy >>> 16) * srcStride, sfy = (sfy & 0xffff) + sfyi, dp = dpr += dpryi) {
for (int dx = destWidth, sfx = sfxi; dx > 0; --dx, dp += dprxi, sfx = (sfx & 0xffff) + sfxi) {
final int index = paletteMapping[(srcData[sp >> 2] >>> (6 - (sp & 3) * 2)) & 0x03];
sp += (sfx >>> 16);
final int shift = 6 - (dp & 3) * 2;
destData[dp >> 2] = (byte)(destData[dp >> 2] & ~(0x03 << shift) | (index << shift));
}
}
break;
case TYPE_INDEX_1_MSB:
for (int dy = destHeight, sfy = sfyi; dy > 0; --dy, sp = spr += (sfy >>> 16) * srcStride, sfy = (sfy & 0xffff) + sfyi, dp = dpr += dpryi) {
for (int dx = destWidth, sfx = sfxi; dx > 0; --dx, dp += dprxi, sfx = (sfx & 0xffff) + sfxi) {
final int index = paletteMapping[(srcData[sp >> 3] >>> (7 - (sp & 7))) & 0x01];
sp += (sfx >>> 16);
final int shift = 7 - (dp & 7);
destData[dp >> 3] = (byte)(destData[dp >> 3] & ~(0x01 << shift) | (index << shift));
}
}
break;
case TYPE_INDEX_1_LSB:
for (int dy = destHeight, sfy = sfyi; dy > 0; --dy, sp = spr += (sfy >>> 16) * srcStride, sfy = (sfy & 0xffff) + sfyi, dp = dpr += dpryi) {
for (int dx = destWidth, sfx = sfxi; dx > 0; --dx, dp += dprxi, sfx = (sfx & 0xffff) + sfxi) {
final int index = paletteMapping[(srcData[sp >> 3] >>> (sp & 7)) & 0x01];
sp += (sfx >>> 16);
final int shift = dp & 7;
destData[dp >> 3] = (byte)(destData[dp >> 3] & ~(0x01 << shift) | (index << shift));
}
}
break;
}
} else {
Convert between indexed modes using mapping and mask ***/
for (int dy = destHeight, sfy = sfyi; dy > 0; --dy,
sp = spr += (sfy >>> 16) * srcStride,
sfy = (sfy & 0xffff) + sfyi,
dp = dpr += dpryi) {
for (int dx = destWidth, sfx = sfxi; dx > 0; --dx,
dp += dprxi,
sfx = (sfx & 0xffff) + sfxi) {
int index;
READ NEXT PIXEL ***/
switch (stype) {
case TYPE_INDEX_8:
index = srcData[sp] & 0xff;
sp += (sfx >>> 16);
break;
case TYPE_INDEX_4:
if ((sp & 1) != 0) index = srcData[sp >> 1] & 0x0f;
else index = (srcData[sp >> 1] >>> 4) & 0x0f;
sp += (sfx >>> 16);
break;
case TYPE_INDEX_2:
index = (srcData[sp >> 2] >>> (6 - (sp & 3) * 2)) & 0x03;
sp += (sfx >>> 16);
break;
case TYPE_INDEX_1_MSB:
index = (srcData[sp >> 3] >>> (7 - (sp & 7))) & 0x01;
sp += (sfx >>> 16);
break;
case TYPE_INDEX_1_LSB:
index = (srcData[sp >> 3] >>> (sp & 7)) & 0x01;
sp += (sfx >>> 16);
break;
default:
return;
}
APPLY MASK ***/
switch (alphaMode) {
case ALPHA_MASK_UNPACKED: {
final byte mask = alphaData[ap];
ap += (sfx >> 16);
if (mask == 0) continue;
} break;
case ALPHA_MASK_PACKED: {
final int mask = alphaData[ap >> 3] & (1 << (ap & 7));
ap += (sfx >> 16);
if (mask == 0) continue;
} break;
case ALPHA_MASK_INDEX: {
int i = 0;
while (i < alphaData.length) {
if (index == (alphaData[i] & 0xff)) break;
}
if (i < alphaData.length) continue;
} break;
case ALPHA_MASK_RGB: {
final byte r = srcReds[index], g = srcGreens[index], b = srcBlues[index];
int i = 0;
while (i < alphaData.length) {
if ((r == alphaData[i]) && (g == alphaData[i + 1]) && (b == alphaData[i + 2])) break;
i += 3;
}
if (i < alphaData.length) continue;
} break;
}
index = paletteMapping[index] & 0xff;

WRITE NEXT PIXEL ***/
switch (dtype) {
case TYPE_INDEX_8:
destData[dp] = (byte) index;
break;
case TYPE_INDEX_4:
if ((dp & 1) != 0) destData[dp >> 1] = (byte)((destData[dp >> 1] & 0xf0) | index);
else destData[dp >> 1] = (byte)((destData[dp >> 1] & 0x0f) | (index << 4));
break;
case TYPE_INDEX_2: {
final int shift = 6 - (dp & 3) * 2;
destData[dp >> 2] = (byte)(destData[dp >> 2] & ~(0x03 << shift) | (index << shift));
} break;
case TYPE_INDEX_1_MSB: {
final int shift = 7 - (dp & 7);
destData[dp >> 3] = (byte)(destData[dp >> 3] & ~(0x01 << shift) | (index << shift));
} break;
case TYPE_INDEX_1_LSB: {
final int shift = dp & 7;
destData[dp >> 3] = (byte)(destData[dp >> 3] & ~(0x01 << shift) | (index << shift));
} break;
}
}
}
}
return;
}

Comprehensive blit (apply transformations) ***/
int alpha = alphaMode;
int index = 0;
int indexq = 0;
int lastindex = 0, lastr = -1, lastg = -1, lastb = -1;
final int[] rerr, gerr, berr;
if (ditherEnabled) {
rerr = new int[destWidth + 2];
gerr = new int[destWidth + 2];
berr = new int[destWidth + 2];
} else {
rerr = null; gerr = null; berr = null;
}
for (int dy = destHeight, sfy = sfyi; dy > 0; --dy,
sp = spr += (sfy >>> 16) * srcStride,
ap = apr += (sfy >>> 16) * alphaStride,
sfy = (sfy & 0xffff) + sfyi,
dp = dpr += dpryi) {
int lrerr = 0, lgerr = 0, lberr = 0;
for (int dx = destWidth, sfx = sfxi; dx > 0; --dx,
dp += dprxi,
sfx = (sfx & 0xffff) + sfxi) {
READ NEXT PIXEL ***/
switch (stype) {
case TYPE_INDEX_8:
index = srcData[sp] & 0xff;
sp += (sfx >>> 16);
break;
case TYPE_INDEX_4:
if ((sp & 1) != 0) index = srcData[sp >> 1] & 0x0f;
else index = (srcData[sp >> 1] >>> 4) & 0x0f;
sp += (sfx >>> 16);
break;
case TYPE_INDEX_2:
index = (srcData[sp >> 2] >>> (6 - (sp & 3) * 2)) & 0x03;
sp += (sfx >>> 16);
break;
case TYPE_INDEX_1_MSB:
index = (srcData[sp >> 3] >>> (7 - (sp & 7))) & 0x01;
sp += (sfx >>> 16);
break;
case TYPE_INDEX_1_LSB:
index = (srcData[sp >> 3] >>> (sp & 7)) & 0x01;
sp += (sfx >>> 16);
break;
}

DO SPECIAL PROCESSING IF REQUIRED ***/
int r = srcReds[index] & 0xff, g = srcGreens[index] & 0xff, b = srcBlues[index] & 0xff;
switch (alphaMode) {
case ALPHA_CHANNEL_SEPARATE:
alpha = ((alphaData[ap] & 0xff) << 16) / 255;
ap += (sfx >> 16);
break;
case ALPHA_MASK_UNPACKED:
alpha = (alphaData[ap] != 0) ? 0x10000 : 0;
ap += (sfx >> 16);
break;
case ALPHA_MASK_PACKED:
alpha = (alphaData[ap >> 3] << ((ap & 7) + 9)) & 0x10000;
ap += (sfx >> 16);
break;
case ALPHA_MASK_INDEX: { // could speed up using binary search if we sorted the indices
int i = 0;
while (i < alphaData.length) {
if (index == (alphaData[i] & 0xff)) break;
}
if (i < alphaData.length) continue;
} break;
case ALPHA_MASK_RGB: {
int i = 0;
while (i < alphaData.length) {
if ((r == (alphaData[i] & 0xff)) &&
(g == (alphaData[i + 1] & 0xff)) &&
(b == (alphaData[i + 2] & 0xff))) break;
i += 3;
}
if (i < alphaData.length) continue;
} break;
}
if (alpha != 0x10000) {
if (alpha == 0x0000) continue;
switch (dtype) {
case TYPE_INDEX_8:
indexq = destData[dp] & 0xff;
break;
case TYPE_INDEX_4:
if ((dp & 1) != 0) indexq = destData[dp >> 1] & 0x0f;
else indexq = (destData[dp >> 1] >>> 4) & 0x0f;
break;
case TYPE_INDEX_2:
indexq = (destData[dp >> 2] >>> (6 - (dp & 3) * 2)) & 0x03;
break;
case TYPE_INDEX_1_MSB:
indexq = (destData[dp >> 3] >>> (7 - (dp & 7))) & 0x01;
break;
case TYPE_INDEX_1_LSB:
indexq = (destData[dp >> 3] >>> (dp & 7)) & 0x01;
break;
}
// Perform alpha blending
final int rq = destReds[indexq] & 0xff;
final int gq = destGreens[indexq] & 0xff;
final int bq = destBlues[indexq] & 0xff;
r = rq + ((r - rq) * alpha >> 16);
g = gq + ((g - gq) * alpha >> 16);
b = bq + ((b - bq) * alpha >> 16);
}

MAP COLOR TO THE PALETTE ***/
if (ditherEnabled) {
// Floyd-Steinberg error diffusion
r += rerr[dx] >> 4;
if (r < 0) r = 0; else if (r > 255) r = 255;
g += gerr[dx] >> 4;
if (g < 0) g = 0; else if (g > 255) g = 255;
b += berr[dx] >> 4;
if (b < 0) b = 0; else if (b > 255) b = 255;
rerr[dx] = lrerr;
gerr[dx] = lgerr;
berr[dx] = lberr;
}
if (r != lastr || g != lastg || b != lastb) {
// moving the variable declarations out seems to make the JDK JIT happier...
for (int j = 0, dr, dg, db, distance, minDistance = 0x7fffffff; j < destPaletteSize; ++j) {
dr = (destReds[j] & 0xff) - r;
dg = (destGreens[j] & 0xff) - g;
db = (destBlues[j] & 0xff) - b;
distance = dr * dr + dg * dg + db * db;
if (distance < minDistance) {
lastindex = j;
if (distance == 0) break;
minDistance = distance;
}
}
lastr = r; lastg = g; lastb = b;
}
if (ditherEnabled) {
// Floyd-Steinberg error diffusion, cont'd...
final int dxm1 = dx - 1, dxp1 = dx + 1;
int acc;
rerr[dxp1] += acc = (lrerr = r - (destReds[lastindex] & 0xff)) + lrerr + lrerr;
rerr[dx] += acc += lrerr + lrerr;
rerr[dxm1] += acc + lrerr + lrerr;
gerr[dxp1] += acc = (lgerr = g - (destGreens[lastindex] & 0xff)) + lgerr + lgerr;
gerr[dx] += acc += lgerr + lgerr;
gerr[dxm1] += acc + lgerr + lgerr;
berr[dxp1] += acc = (lberr = b - (destBlues[lastindex] & 0xff)) + lberr + lberr;
berr[dx] += acc += lberr + lberr;
berr[dxm1] += acc + lberr + lberr;
}

WRITE NEXT PIXEL ***/
switch (dtype) {
case TYPE_INDEX_8:
destData[dp] = (byte) lastindex;
break;
case TYPE_INDEX_4:
if ((dp & 1) != 0) destData[dp >> 1] = (byte)((destData[dp >> 1] & 0xf0) | lastindex);
else destData[dp >> 1] = (byte)((destData[dp >> 1] & 0x0f) | (lastindex << 4));
break;
case TYPE_INDEX_2: {
final int shift = 6 - (dp & 3) * 2;
destData[dp >> 2] = (byte)(destData[dp >> 2] & ~(0x03 << shift) | (lastindex << shift));
} break;
case TYPE_INDEX_1_MSB: {
final int shift = 7 - (dp & 7);
destData[dp >> 3] = (byte)(destData[dp >> 3] & ~(0x01 << shift) | (lastindex << shift));
} break;
case TYPE_INDEX_1_LSB: {
final int shift = dp & 7;
destData[dp >> 3] = (byte)(destData[dp >> 3] & ~(0x01 << shift) | (lastindex << shift));
} break;
}
}
}
}


Blits an index palette image into a direct palette image.
<p>
Note: The source and destination masks and palettes must
always be fully specified.
</p>

@param op the blitter operation: a combination of BLIT_xxx flags
(see BLIT_xxx constants)
@param srcData the source byte array containing image data
@param srcDepth the source depth: one of 1, 2, 4, 8
@param srcStride the source number of bytes per line
@param srcOrder the source byte ordering: one of MSB_FIRST or LSB_FIRST;
ignored if srcDepth is not 1
@param srcX the top-left x-coord of the source blit region
@param srcY the top-left y-coord of the source blit region
@param srcWidth the width of the source blit region
@param srcHeight the height of the source blit region
@param srcReds the source palette red component intensities
@param srcGreens the source palette green component intensities
@param srcBlues the source palette blue component intensities
@param alphaMode the alpha blending or mask mode, may be
an integer 0-255 for global alpha; ignored if BLIT_ALPHA
not specified in the blitter operations
(see ALPHA_MODE_xxx constants)
@param alphaData the alpha blending or mask data, varies depending
on the value of alphaMode and sometimes ignored
@param alphaStride the alpha data number of bytes per line
@param alphaX the top-left x-coord of the alpha blit region
@param alphaY the top-left y-coord of the alpha blit region
@param destData the destination byte array containing image data
@param destDepth the destination depth: one of 8, 16, 24, 32
@param destStride the destination number of bytes per line
@param destOrder the destination byte ordering: one of MSB_FIRST or LSB_FIRST;
ignored if destDepth is not 16 or 32
@param destX the top-left x-coord of the destination blit region
@param destY the top-left y-coord of the destination blit region
@param destWidth the width of the destination blit region
@param destHeight the height of the destination blit region
@param destRedMask the destination red channel mask
@param destGreenMask the destination green channel mask
@param destBlueMask the destination blue channel mask
@param flipX if true the resulting image is flipped along the vertical axis
@param flipY if true the resulting image is flipped along the horizontal axis
------------
Fast blit (straight copy) ***/
if (srcX == 0 && srcY == 0 && destX == 0 && destY == 0 && destWidth == srcWidth && destHeight == srcHeight) {
if (destDepth == 24 && srcDepth == 8 && (op & BLIT_ALPHA) == 0 && destRedMask == 0xFF0000 && destGreenMask == 0xFF00 && destBlueMask == 0xFF) {
for (int y = 0, sp = 0, dp = 0, spad = srcStride - srcWidth, dpad = destStride - (destWidth * 3); y < destHeight; y++, sp += spad, dp += dpad) {
for (int x = 0; x < destWidth; x++) {
int index = srcData[sp++] & 0xff;
destData[dp++] = srcReds[index];
destData[dp++] = srcGreens[index];
destData[dp++] = srcBlues[index];
}
}
return;
}
if (destDepth == 32 && destOrder == MSB_FIRST && srcDepth == 8 && (op & BLIT_ALPHA) == 0 && destRedMask == 0xFF0000 && destGreenMask == 0xFF00 && destBlueMask == 0xFF) {
for (int y = 0, sp = 0, dp = 0, spad = srcStride - srcWidth, dpad = destStride - (destWidth * 4); y < destHeight; y++, sp += spad, dp += dpad) {
for (int x = 0; x < destWidth; x++) {
int index = srcData[sp++] & 0xff;
dp++;
destData[dp++] = srcReds[index];
destData[dp++] = srcGreens[index];
destData[dp++] = srcBlues[index];
}
}
return;
}
}
// these should be supplied as params later
final int destAlphaMask = 0;

Prepare scaling data ***/
final int dwm1 = destWidth - 1;
final int sfxi = (dwm1 != 0) ? (int)((((long)srcWidth << 16) - 1) / dwm1) : 0;
final int dhm1 = destHeight - 1;
final int sfyi = (dhm1 != 0) ? (int)((((long)srcHeight << 16) - 1) / dhm1) : 0;

Prepare source-related data ***/
final int stype;
switch (srcDepth) {
case 8:
stype = TYPE_INDEX_8;
break;
case 4:
srcStride <<= 1;
stype = TYPE_INDEX_4;
break;
case 2:
srcStride <<= 2;
stype = TYPE_INDEX_2;
break;
case 1:
srcStride <<= 3;
stype = (srcOrder == MSB_FIRST) ? TYPE_INDEX_1_MSB : TYPE_INDEX_1_LSB;
break;
default:
//throw new IllegalArgumentException("Invalid source type");
return;
}
int spr = srcY * srcStride + srcX;

Prepare destination-related data ***/
final int dbpp, dtype;
switch (destDepth) {
case 8:
dbpp = 1;
dtype = TYPE_GENERIC_8;
break;
case 16:
dbpp = 2;
dtype = (destOrder == MSB_FIRST) ? TYPE_GENERIC_16_MSB : TYPE_GENERIC_16_LSB;
break;
case 24:
dbpp = 3;
dtype = TYPE_GENERIC_24;
break;
case 32:
dbpp = 4;
dtype = (destOrder == MSB_FIRST) ? TYPE_GENERIC_32_MSB : TYPE_GENERIC_32_LSB;
break;
default:
//throw new IllegalArgumentException("Invalid destination type");
return;
}
int dpr = ((flipY) ? destY + dhm1 : destY) * destStride + ((flipX) ? destX + dwm1 : destX) * dbpp;
final int dprxi = (flipX) ? -dbpp : dbpp;
final int dpryi = (flipY) ? -destStride : destStride;

Prepare special processing data ***/
int apr;
if ((op & BLIT_ALPHA) != 0) {
switch (alphaMode) {
case ALPHA_MASK_UNPACKED:
case ALPHA_CHANNEL_SEPARATE:
if (alphaData == null) alphaMode = 0x10000;
apr = alphaY * alphaStride + alphaX;
break;
case ALPHA_MASK_PACKED:
if (alphaData == null) alphaMode = 0x10000;
alphaStride <<= 3;
apr = alphaY * alphaStride + alphaX;
break;
case ALPHA_MASK_INDEX:
case ALPHA_MASK_RGB:
if (alphaData == null) alphaMode = 0x10000;
apr = 0;
break;
default:
alphaMode = (alphaMode << 16) / 255; // prescale
case ALPHA_CHANNEL_SOURCE:
apr = 0;
break;
}
} else {
alphaMode = 0x10000;
apr = 0;
}

Comprehensive blit (apply transformations) ***/
final int destRedShift = getChannelShift(destRedMask);
final int destRedWidth = getChannelWidth(destRedMask, destRedShift);
final byte[] destReds = ANY_TO_EIGHT[destRedWidth];
final int destRedPreShift = 8 - destRedWidth;
final int destGreenShift = getChannelShift(destGreenMask);
final int destGreenWidth = getChannelWidth(destGreenMask, destGreenShift);
final byte[] destGreens = ANY_TO_EIGHT[destGreenWidth];
final int destGreenPreShift = 8 - destGreenWidth;
final int destBlueShift = getChannelShift(destBlueMask);
final int destBlueWidth = getChannelWidth(destBlueMask, destBlueShift);
final byte[] destBlues = ANY_TO_EIGHT[destBlueWidth];
final int destBluePreShift = 8 - destBlueWidth;
final int destAlphaShift = getChannelShift(destAlphaMask);
final int destAlphaWidth = getChannelWidth(destAlphaMask, destAlphaShift);
final byte[] destAlphas = ANY_TO_EIGHT[destAlphaWidth];
final int destAlphaPreShift = 8 - destAlphaWidth;

int dp = dpr;
int sp = spr;
int ap = apr, alpha = alphaMode;
int r = 0, g = 0, b = 0, a = 0, index = 0;
int rq = 0, gq = 0, bq = 0, aq = 0;
for (int dy = destHeight, sfy = sfyi; dy > 0; --dy,
sp = spr += (sfy >>> 16) * srcStride,
ap = apr += (sfy >>> 16) * alphaStride,
sfy = (sfy & 0xffff) + sfyi,
dp = dpr += dpryi) {
for (int dx = destWidth, sfx = sfxi; dx > 0; --dx,
dp += dprxi,
sfx = (sfx & 0xffff) + sfxi) {
READ NEXT PIXEL ***/
switch (stype) {
case TYPE_INDEX_8:
index = srcData[sp] & 0xff;
sp += (sfx >>> 16);
break;
case TYPE_INDEX_4:
if ((sp & 1) != 0) index = srcData[sp >> 1] & 0x0f;
else index = (srcData[sp >> 1] >>> 4) & 0x0f;
sp += (sfx >>> 16);
break;
case TYPE_INDEX_2:
index = (srcData[sp >> 2] >>> (6 - (sp & 3) * 2)) & 0x03;
sp += (sfx >>> 16);
break;
case TYPE_INDEX_1_MSB:
index = (srcData[sp >> 3] >>> (7 - (sp & 7))) & 0x01;
sp += (sfx >>> 16);
break;
case TYPE_INDEX_1_LSB:
index = (srcData[sp >> 3] >>> (sp & 7)) & 0x01;
sp += (sfx >>> 16);
break;
}

DO SPECIAL PROCESSING IF REQUIRED ***/
r = srcReds[index] & 0xff;
g = srcGreens[index] & 0xff;
b = srcBlues[index] & 0xff;
switch (alphaMode) {
case ALPHA_CHANNEL_SEPARATE:
alpha = ((alphaData[ap] & 0xff) << 16) / 255;
ap += (sfx >> 16);
break;
case ALPHA_MASK_UNPACKED:
alpha = (alphaData[ap] != 0) ? 0x10000 : 0;
ap += (sfx >> 16);
break;
case ALPHA_MASK_PACKED:
alpha = (alphaData[ap >> 3] << ((ap & 7) + 9)) & 0x10000;
ap += (sfx >> 16);
break;
case ALPHA_MASK_INDEX: { // could speed up using binary search if we sorted the indices
int i = 0;
while (i < alphaData.length) {
if (index == (alphaData[i] & 0xff)) break;
}
if (i < alphaData.length) continue;
} break;
case ALPHA_MASK_RGB: {
int i = 0;
while (i < alphaData.length) {
if ((r == (alphaData[i] & 0xff)) &&
(g == (alphaData[i + 1] & 0xff)) &&
(b == (alphaData[i + 2] & 0xff))) break;
i += 3;
}
if (i < alphaData.length) continue;
} break;
}
if (alpha != 0x10000) {
if (alpha == 0x0000) continue;
switch (dtype) {
case TYPE_GENERIC_8: {
final int data = destData[dp] & 0xff;
rq = destReds[(data & destRedMask) >>> destRedShift] & 0xff;
gq = destGreens[(data & destGreenMask) >>> destGreenShift] & 0xff;
bq = destBlues[(data & destBlueMask) >>> destBlueShift] & 0xff;
aq = destAlphas[(data & destAlphaMask) >>> destAlphaShift] & 0xff;
} break;
case TYPE_GENERIC_16_MSB: {
final int data = ((destData[dp] & 0xff) << 8) | (destData[dp + 1] & 0xff);
rq = destReds[(data & destRedMask) >>> destRedShift] & 0xff;
gq = destGreens[(data & destGreenMask) >>> destGreenShift] & 0xff;
bq = destBlues[(data & destBlueMask) >>> destBlueShift] & 0xff;
aq = destAlphas[(data & destAlphaMask) >>> destAlphaShift] & 0xff;
} break;
case TYPE_GENERIC_16_LSB: {
final int data = ((destData[dp + 1] & 0xff) << 8) | (destData[dp] & 0xff);
rq = destReds[(data & destRedMask) >>> destRedShift] & 0xff;
gq = destGreens[(data & destGreenMask) >>> destGreenShift] & 0xff;
bq = destBlues[(data & destBlueMask) >>> destBlueShift] & 0xff;
aq = destAlphas[(data & destAlphaMask) >>> destAlphaShift] & 0xff;
} break;
case TYPE_GENERIC_24: {
final int data = (( ((destData[dp] & 0xff) << 8) |
(destData[dp + 1] & 0xff)) << 8) |
(destData[dp + 2] & 0xff);
rq = destReds[(data & destRedMask) >>> destRedShift] & 0xff;
gq = destGreens[(data & destGreenMask) >>> destGreenShift] & 0xff;
bq = destBlues[(data & destBlueMask) >>> destBlueShift] & 0xff;
aq = destAlphas[(data & destAlphaMask) >>> destAlphaShift] & 0xff;
} break;
case TYPE_GENERIC_32_MSB: {
final int data = (( (( ((destData[dp] & 0xff) << 8) |
(destData[dp + 1] & 0xff)) << 8) |
(destData[dp + 2] & 0xff)) << 8) |
(destData[dp + 3] & 0xff);
rq = destReds[(data & destRedMask) >>> destRedShift] & 0xff;
gq = destGreens[(data & destGreenMask) >>> destGreenShift] & 0xff;
bq = destBlues[(data & destBlueMask) >>> destBlueShift] & 0xff;
aq = destAlphas[(data & destAlphaMask) >>> destAlphaShift] & 0xff;
} break;
case TYPE_GENERIC_32_LSB: {
final int data = (( (( ((destData[dp + 3] & 0xff) << 8) |
(destData[dp + 2] & 0xff)) << 8) |
(destData[dp + 1] & 0xff)) << 8) |
(destData[dp] & 0xff);
rq = destReds[(data & destRedMask) >>> destRedShift] & 0xff;
gq = destGreens[(data & destGreenMask) >>> destGreenShift] & 0xff;
bq = destBlues[(data & destBlueMask) >>> destBlueShift] & 0xff;
aq = destAlphas[(data & destAlphaMask) >>> destAlphaShift] & 0xff;
} break;
}
// Perform alpha blending
a = aq + ((a - aq) * alpha >> 16);
r = rq + ((r - rq) * alpha >> 16);
g = gq + ((g - gq) * alpha >> 16);
b = bq + ((b - bq) * alpha >> 16);
}

WRITE NEXT PIXEL ***/
final int data =
(r >>> destRedPreShift << destRedShift) |
(g >>> destGreenPreShift << destGreenShift) |
(b >>> destBluePreShift << destBlueShift) |
(a >>> destAlphaPreShift << destAlphaShift);
switch (dtype) {
case TYPE_GENERIC_8: {
destData[dp] = (byte) data;
} break;
case TYPE_GENERIC_16_MSB: {
destData[dp] = (byte) (data >>> 8);
destData[dp + 1] = (byte) (data & 0xff);
} break;
case TYPE_GENERIC_16_LSB: {
destData[dp] = (byte) (data & 0xff);
destData[dp + 1] = (byte) (data >>> 8);
} break;
case TYPE_GENERIC_24: {
destData[dp] = (byte) (data >>> 16);
destData[dp + 1] = (byte) (data >>> 8);
destData[dp + 2] = (byte) (data & 0xff);
} break;
case TYPE_GENERIC_32_MSB: {
destData[dp] = (byte) (data >>> 24);
destData[dp + 1] = (byte) (data >>> 16);
destData[dp + 2] = (byte) (data >>> 8);
destData[dp + 3] = (byte) (data & 0xff);
} break;
case TYPE_GENERIC_32_LSB: {
destData[dp] = (byte) (data & 0xff);
destData[dp + 1] = (byte) (data >>> 8);
destData[dp + 2] = (byte) (data >>> 16);
destData[dp + 3] = (byte) (data >>> 24);
} break;
}
}
}
}


Blits a direct palette image into an index palette image.
<p>
Note: The source and destination masks and palettes must
always be fully specified.
</p>

@param op the blitter operation: a combination of BLIT_xxx flags
(see BLIT_xxx constants)
@param srcData the source byte array containing image data
@param srcDepth the source depth: one of 8, 16, 24, 32
@param srcStride the source number of bytes per line
@param srcOrder the source byte ordering: one of MSB_FIRST or LSB_FIRST;
ignored if srcDepth is not 16 or 32
@param srcX the top-left x-coord of the source blit region
@param srcY the top-left y-coord of the source blit region
@param srcWidth the width of the source blit region
@param srcHeight the height of the source blit region
@param srcRedMask the source red channel mask
@param srcGreenMask the source green channel mask
@param srcBlueMask the source blue channel mask
@param alphaMode the alpha blending or mask mode, may be
an integer 0-255 for global alpha; ignored if BLIT_ALPHA
not specified in the blitter operations
(see ALPHA_MODE_xxx constants)
@param alphaData the alpha blending or mask data, varies depending
on the value of alphaMode and sometimes ignored
@param alphaStride the alpha data number of bytes per line
@param alphaX the top-left x-coord of the alpha blit region
@param alphaY the top-left y-coord of the alpha blit region
@param destData the destination byte array containing image data
@param destDepth the destination depth: one of 1, 2, 4, 8
@param destStride the destination number of bytes per line
@param destOrder the destination byte ordering: one of MSB_FIRST or LSB_FIRST;
ignored if destDepth is not 1
@param destX the top-left x-coord of the destination blit region
@param destY the top-left y-coord of the destination blit region
@param destWidth the width of the destination blit region
@param destHeight the height of the destination blit region
@param destReds the destination palette red component intensities
@param destGreens the destination palette green component intensities
@param destBlues the destination palette blue component intensities
@param flipX if true the resulting image is flipped along the vertical axis
@param flipY if true the resulting image is flipped along the horizontal axis
------------
Prepare scaling data ***/
final int dwm1 = destWidth - 1;
final int sfxi = (dwm1 != 0) ? (int)((((long)srcWidth << 16) - 1) / dwm1) : 0;
final int dhm1 = destHeight - 1;
final int sfyi = (dhm1 != 0) ? (int)((((long)srcHeight << 16) - 1) / dhm1) : 0;

Prepare source-related data ***/
final int sbpp, stype;
switch (srcDepth) {
case 8:
sbpp = 1;
stype = TYPE_GENERIC_8;
break;
case 16:
sbpp = 2;
stype = (srcOrder == MSB_FIRST) ? TYPE_GENERIC_16_MSB : TYPE_GENERIC_16_LSB;
break;
case 24:
sbpp = 3;
stype = TYPE_GENERIC_24;
break;
case 32:
sbpp = 4;
stype = (srcOrder == MSB_FIRST) ? TYPE_GENERIC_32_MSB : TYPE_GENERIC_32_LSB;
break;
default:
//throw new IllegalArgumentException("Invalid source type");
return;
}
int spr = srcY * srcStride + srcX * sbpp;

Prepare destination-related data ***/
final int dtype;
switch (destDepth) {
case 8:
dtype = TYPE_INDEX_8;
break;
case 4:
destStride <<= 1;
dtype = TYPE_INDEX_4;
break;
case 2:
destStride <<= 2;
dtype = TYPE_INDEX_2;
break;
case 1:
destStride <<= 3;
dtype = (destOrder == MSB_FIRST) ? TYPE_INDEX_1_MSB : TYPE_INDEX_1_LSB;
break;
default:
//throw new IllegalArgumentException("Invalid source type");
return;
}
int dpr = ((flipY) ? destY + dhm1 : destY) * destStride + ((flipX) ? destX + dwm1 : destX);
final int dprxi = (flipX) ? -1 : 1;
final int dpryi = (flipY) ? -destStride : destStride;

Prepare special processing data ***/
int apr;
if ((op & BLIT_ALPHA) != 0) {
switch (alphaMode) {
case ALPHA_MASK_UNPACKED:
case ALPHA_CHANNEL_SEPARATE:
if (alphaData == null) alphaMode = 0x10000;
apr = alphaY * alphaStride + alphaX;
break;
case ALPHA_MASK_PACKED:
if (alphaData == null) alphaMode = 0x10000;
alphaStride <<= 3;
apr = alphaY * alphaStride + alphaX;
break;
case ALPHA_MASK_INDEX:
//throw new IllegalArgumentException("Invalid alpha type");
return;
case ALPHA_MASK_RGB:
if (alphaData == null) alphaMode = 0x10000;
apr = 0;
break;
default:
alphaMode = (alphaMode << 16) / 255; // prescale
case ALPHA_CHANNEL_SOURCE:
apr = 0;
break;
}
} else {
alphaMode = 0x10000;
apr = 0;
}
final boolean ditherEnabled = (op & BLIT_DITHER) != 0;

Comprehensive blit (apply transformations) ***/
final int srcRedShift = getChannelShift(srcRedMask);
final byte[] srcReds = ANY_TO_EIGHT[getChannelWidth(srcRedMask, srcRedShift)];
final int srcGreenShift = getChannelShift(srcGreenMask);
final byte[] srcGreens = ANY_TO_EIGHT[getChannelWidth(srcGreenMask, srcGreenShift)];
final int srcBlueShift = getChannelShift(srcBlueMask);
final byte[] srcBlues = ANY_TO_EIGHT[getChannelWidth(srcBlueMask, srcBlueShift)];
final int srcAlphaShift = getChannelShift(srcAlphaMask);
final byte[] srcAlphas = ANY_TO_EIGHT[getChannelWidth(srcAlphaMask, srcAlphaShift)];

int dp = dpr;
int sp = spr;
int ap = apr, alpha = alphaMode;
int r = 0, g = 0, b = 0, a = 0;
int indexq = 0;
int lastindex = 0, lastr = -1, lastg = -1, lastb = -1;
final int[] rerr, gerr, berr;
int destPaletteSize = 1 << destDepth;
if ((destReds != null) && (destReds.length < destPaletteSize)) destPaletteSize = destReds.length;
if (ditherEnabled) {
rerr = new int[destWidth + 2];
gerr = new int[destWidth + 2];
berr = new int[destWidth + 2];
} else {
rerr = null; gerr = null; berr = null;
}
for (int dy = destHeight, sfy = sfyi; dy > 0; --dy,
sp = spr += (sfy >>> 16) * srcStride,
ap = apr += (sfy >>> 16) * alphaStride,
sfy = (sfy & 0xffff) + sfyi,
dp = dpr += dpryi) {
int lrerr = 0, lgerr = 0, lberr = 0;
for (int dx = destWidth, sfx = sfxi; dx > 0; --dx,
dp += dprxi,
sfx = (sfx & 0xffff) + sfxi) {
READ NEXT PIXEL ***/
switch (stype) {
case TYPE_GENERIC_8: {
final int data = srcData[sp] & 0xff;
sp += (sfx >>> 16);
r = srcReds[(data & srcRedMask) >>> srcRedShift] & 0xff;
g = srcGreens[(data & srcGreenMask) >>> srcGreenShift] & 0xff;
b = srcBlues[(data & srcBlueMask) >>> srcBlueShift] & 0xff;
a = srcAlphas[(data & srcAlphaMask) >>> srcAlphaShift] & 0xff;
} break;
case TYPE_GENERIC_16_MSB: {
final int data = ((srcData[sp] & 0xff) << 8) | (srcData[sp + 1] & 0xff);
sp += (sfx >>> 16) * 2;
r = srcReds[(data & srcRedMask) >>> srcRedShift] & 0xff;
g = srcGreens[(data & srcGreenMask) >>> srcGreenShift] & 0xff;
b = srcBlues[(data & srcBlueMask) >>> srcBlueShift] & 0xff;
a = srcAlphas[(data & srcAlphaMask) >>> srcAlphaShift] & 0xff;
} break;
case TYPE_GENERIC_16_LSB: {
final int data = ((srcData[sp + 1] & 0xff) << 8) | (srcData[sp] & 0xff);
sp += (sfx >>> 16) * 2;
r = srcReds[(data & srcRedMask) >>> srcRedShift] & 0xff;
g = srcGreens[(data & srcGreenMask) >>> srcGreenShift] & 0xff;
b = srcBlues[(data & srcBlueMask) >>> srcBlueShift] & 0xff;
a = srcAlphas[(data & srcAlphaMask) >>> srcAlphaShift] & 0xff;
} break;
case TYPE_GENERIC_24: {
final int data = (( ((srcData[sp] & 0xff) << 8) |
(srcData[sp + 1] & 0xff)) << 8) |
(srcData[sp + 2] & 0xff);
sp += (sfx >>> 16) * 3;
r = srcReds[(data & srcRedMask) >>> srcRedShift] & 0xff;
g = srcGreens[(data & srcGreenMask) >>> srcGreenShift] & 0xff;
b = srcBlues[(data & srcBlueMask) >>> srcBlueShift] & 0xff;
a = srcAlphas[(data & srcAlphaMask) >>> srcAlphaShift] & 0xff;
} break;
case TYPE_GENERIC_32_MSB: {
final int data = (( (( ((srcData[sp] & 0xff) << 8) |
(srcData[sp + 1] & 0xff)) << 8) |
(srcData[sp + 2] & 0xff)) << 8) |
(srcData[sp + 3] & 0xff);
sp += (sfx >>> 16) * 4;
r = srcReds[(data & srcRedMask) >>> srcRedShift] & 0xff;
g = srcGreens[(data & srcGreenMask) >>> srcGreenShift] & 0xff;
b = srcBlues[(data & srcBlueMask) >>> srcBlueShift] & 0xff;
a = srcAlphas[(data & srcAlphaMask) >>> srcAlphaShift] & 0xff;
} break;
case TYPE_GENERIC_32_LSB: {
final int data = (( (( ((srcData[sp + 3] & 0xff) << 8) |
(srcData[sp + 2] & 0xff)) << 8) |
(srcData[sp + 1] & 0xff)) << 8) |
(srcData[sp] & 0xff);
sp += (sfx >>> 16) * 4;
r = srcReds[(data & srcRedMask) >>> srcRedShift] & 0xff;
g = srcGreens[(data & srcGreenMask) >>> srcGreenShift] & 0xff;
b = srcBlues[(data & srcBlueMask) >>> srcBlueShift] & 0xff;
a = srcAlphas[(data & srcAlphaMask) >>> srcAlphaShift] & 0xff;
} break;
}

DO SPECIAL PROCESSING IF REQUIRED ***/
switch (alphaMode) {
case ALPHA_CHANNEL_SEPARATE:
alpha = ((alphaData[ap] & 0xff) << 16) / 255;
ap += (sfx >> 16);
break;
case ALPHA_CHANNEL_SOURCE:
alpha = (a << 16) / 255;
break;
case ALPHA_MASK_UNPACKED:
alpha = (alphaData[ap] != 0) ? 0x10000 : 0;
ap += (sfx >> 16);
break;
case ALPHA_MASK_PACKED:
alpha = (alphaData[ap >> 3] << ((ap & 7) + 9)) & 0x10000;
ap += (sfx >> 16);
break;
case ALPHA_MASK_RGB:
alpha = 0x10000;
for (int i = 0; i < alphaData.length; i += 3) {
if ((r == alphaData[i]) && (g == alphaData[i + 1]) && (b == alphaData[i + 2])) {
alpha = 0x0000;
break;
}
}
break;
}
if (alpha != 0x10000) {
if (alpha == 0x0000) continue;
switch (dtype) {
case TYPE_INDEX_8:
indexq = destData[dp] & 0xff;
break;
case TYPE_INDEX_4:
if ((dp & 1) != 0) indexq = destData[dp >> 1] & 0x0f;
else indexq = (destData[dp >> 1] >>> 4) & 0x0f;
break;
case TYPE_INDEX_2:
indexq = (destData[dp >> 2] >>> (6 - (dp & 3) * 2)) & 0x03;
break;
case TYPE_INDEX_1_MSB:
indexq = (destData[dp >> 3] >>> (7 - (dp & 7))) & 0x01;
break;
case TYPE_INDEX_1_LSB:
indexq = (destData[dp >> 3] >>> (dp & 7)) & 0x01;
break;
}
// Perform alpha blending
final int rq = destReds[indexq] & 0xff;
final int gq = destGreens[indexq] & 0xff;
final int bq = destBlues[indexq] & 0xff;
r = rq + ((r - rq) * alpha >> 16);
g = gq + ((g - gq) * alpha >> 16);
b = bq + ((b - bq) * alpha >> 16);
}

MAP COLOR TO THE PALETTE ***/
if (ditherEnabled) {
// Floyd-Steinberg error diffusion
r += rerr[dx] >> 4;
if (r < 0) r = 0; else if (r > 255) r = 255;
g += gerr[dx] >> 4;
if (g < 0) g = 0; else if (g > 255) g = 255;
b += berr[dx] >> 4;
if (b < 0) b = 0; else if (b > 255) b = 255;
rerr[dx] = lrerr;
gerr[dx] = lgerr;
berr[dx] = lberr;
}
if (r != lastr || g != lastg || b != lastb) {
// moving the variable declarations out seems to make the JDK JIT happier...
for (int j = 0, dr, dg, db, distance, minDistance = 0x7fffffff; j < destPaletteSize; ++j) {
dr = (destReds[j] & 0xff) - r;
dg = (destGreens[j] & 0xff) - g;
db = (destBlues[j] & 0xff) - b;
distance = dr * dr + dg * dg + db * db;
if (distance < minDistance) {
lastindex = j;
if (distance == 0) break;
minDistance = distance;
}
}
lastr = r; lastg = g; lastb = b;
}
if (ditherEnabled) {
// Floyd-Steinberg error diffusion, cont'd...
final int dxm1 = dx - 1, dxp1 = dx + 1;
int acc;
rerr[dxp1] += acc = (lrerr = r - (destReds[lastindex] & 0xff)) + lrerr + lrerr;
rerr[dx] += acc += lrerr + lrerr;
rerr[dxm1] += acc + lrerr + lrerr;
gerr[dxp1] += acc = (lgerr = g - (destGreens[lastindex] & 0xff)) + lgerr + lgerr;
gerr[dx] += acc += lgerr + lgerr;
gerr[dxm1] += acc + lgerr + lgerr;
berr[dxp1] += acc = (lberr = b - (destBlues[lastindex] & 0xff)) + lberr + lberr;
berr[dx] += acc += lberr + lberr;
berr[dxm1] += acc + lberr + lberr;
}

WRITE NEXT PIXEL ***/
switch (dtype) {
case TYPE_INDEX_8:
destData[dp] = (byte) lastindex;
break;
case TYPE_INDEX_4:
if ((dp & 1) != 0) destData[dp >> 1] = (byte)((destData[dp >> 1] & 0xf0) | lastindex);
else destData[dp >> 1] = (byte)((destData[dp >> 1] & 0x0f) | (lastindex << 4));
break;
case TYPE_INDEX_2: {
final int shift = 6 - (dp & 3) * 2;
destData[dp >> 2] = (byte)(destData[dp >> 2] & ~(0x03 << shift) | (lastindex << shift));
} break;
case TYPE_INDEX_1_MSB: {
final int shift = 7 - (dp & 7);
destData[dp >> 3] = (byte)(destData[dp >> 3] & ~(0x01 << shift) | (lastindex << shift));
} break;
case TYPE_INDEX_1_LSB: {
final int shift = dp & 7;
destData[dp >> 3] = (byte)(destData[dp >> 3] & ~(0x01 << shift) | (lastindex << shift));
} break;
}
}
}
}


Computes the required channel shift from a mask.
------------
Computes the required channel width (depth) from a mask.
------------
Extracts a field from packed RGB data given a mask for that field.
------------
Creates an ImageData containing one band's worth of a gradient filled
block.  If <code>vertical</code> is true, the band must be tiled
horizontally to fill a region, otherwise it must be tiled vertically.

@param width the width of the region to be filled
@param height the height of the region to be filled
@param vertical if true sweeps from top to bottom, else
sweeps from left to right
@param fromRGB the color to start with
@param toRGB the color to end with
@param redBits the number of significant red bits, 0 for palette modes
@param greenBits the number of significant green bits, 0 for palette modes
@param blueBits the number of significant blue bits, 0 for palette modes
@return the new ImageData
------------
Renders a gradient onto a GC.
<p>
This is a GC helper.
</p>

@param gc the GC to render the gradient onto
@param device the device the GC belongs to
@param x the top-left x coordinate of the region to be filled
@param y the top-left y coordinate of the region to be filled
@param width the width of the region to be filled
@param height the height of the region to be filled
@param vertical if true sweeps from top to bottom, else
sweeps from left to right
@param fromRGB the color to start with
@param toRGB the color to end with
@param redBits the number of significant red bits, 0 for palette modes
@param greenBits the number of significant green bits, 0 for palette modes
@param blueBits the number of significant blue bits, 0 for palette modes

====== ImageDataLoader.java ======
Copyright (c) 2000, 2006 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Internal class that separates ImageData from ImageLoader
to allow removal of ImageLoader from the toolkit.

====== ImageDataProvider.java ======
Copyright (c) 2015 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Interface to provide a callback mechanism to get information about images
when the application is moved from a low DPI monitor to a high DPI monitor.
This provides API which will be called by SWT during the image rendering.

This interface needs to be implemented by client code to provide the
image information on demand.

@since 3.104

====== ImageFileNameProvider.java ======
Copyright (c) 2015 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Interface to provide a callback mechanism to get information about images
when the application is moved from a low DPI monitor to a high DPI monitor.
This provides API which will be called by SWT during the image rendering.

This interface needs to be implemented by client code to provide the
image information on demand.

@since 3.104

====== ImageList.java ======
Copyright (c) 2000, 2014 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation

====== ImageLoader.java ======
Copyright (c) 2000, 2016 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class are used to load images from,
and save images to, a file or stream.
<p>
Currently supported image formats are:
</p><ul>
<li>BMP (Windows or OS/2 Bitmap)</li>
<li>ICO (Windows Icon)</li>
<li>JPEG</li>
<li>GIF</li>
<li>PNG</li>
<li>TIFF</li>
</ul>
<code>ImageLoaders</code> can be used to:
<ul>
<li>load/save single images in all formats</li>
<li>load/save multiple images (GIF/ICO/TIFF)</li>
<li>load/save animated GIF images</li>
<li>load interlaced GIF/PNG images</li>
<li>load progressive JPEG images</li>
</ul>

@see <a href="http://www.eclipse.org/swt/examples.php">SWT Example: ImageAnalyzer</a>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
------------
the array of ImageData objects in this ImageLoader.
This array is read in when the load method is called,
and it is written out when the save method is called

public ImageData[] data;


the width of the logical screen on which the images
reside, in pixels (this corresponds to the GIF89a
Logical Screen Width value)

public int logicalScreenWidth;


the height of the logical screen on which the images
reside, in pixels (this corresponds to the GIF89a
Logical Screen Height value)

public int logicalScreenHeight;


the background pixel for the logical screen (this
corresponds to the GIF89a Background Color Index value).
The default is -1 which means 'unspecified background'
*

public int backgroundPixel;


the number of times to repeat the display of a sequence
of animated images (this corresponds to the commonly-used
GIF application extension for "NETSCAPE 2.0 01").
The default is 1. A value of 0 means 'display repeatedly'

public int repeatCount;


This is the compression used when saving jpeg and png files.
<p>
When saving jpeg files, the value is from 1 to 100,
where 1 is very high compression but low quality, and 100 is
no compression and high quality; default is 75.
</p><p>
When saving png files, the value is from 0 to 3, but they do not impact the quality
because PNG is lossless compression. 0 is uncompressed, 1 is low compression and fast,
2 is default compression, and 3 is high compression but slow.
</p>
*
@since 3.8

public int compression;

/*
the set of ImageLoader event listeners, created on demand

List<ImageLoaderListener> imageLoaderListeners;


Construct a new empty ImageLoader.
------------
Resets the fields of the ImageLoader, except for the
<code>imageLoaderListeners</code> field.
------------
Loads an array of <code>ImageData</code> objects from the
specified input stream. Throws an error if either an error
occurs while loading the images, or if the images are not
of a supported type. Returns the loaded image data array.

@param stream the input stream to load the images from
@return an array of <code>ImageData</code> objects loaded from the specified input stream

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the stream is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_IO - if an IO error occurs while reading from the stream</li>
<li>ERROR_INVALID_IMAGE - if the image stream contains invalid data</li>
<li>ERROR_UNSUPPORTED_FORMAT - if the image stream contains an unrecognized format</li>
</ul>
------------
Loads an array of <code>ImageData</code> objects from the
file with the specified name. Throws an error if either
an error occurs while loading the images, or if the images are
not of a supported type. Returns the loaded image data array.

@param filename the name of the file to load the images from
@return an array of <code>ImageData</code> objects loaded from the specified file

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the file name is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_IO - if an IO error occurs while reading from the file</li>
<li>ERROR_INVALID_IMAGE - if the image file contains invalid data</li>
<li>ERROR_UNSUPPORTED_FORMAT - if the image file contains an unrecognized format</li>
</ul>
------------
Saves the image data in this ImageLoader to the specified stream.
The format parameter can have one of the following values:
<dl>
<dt><code>IMAGE_BMP</code></dt>
<dd>Windows BMP file format, no compression</dd>
<dt><code>IMAGE_BMP_RLE</code></dt>
<dd>Windows BMP file format, RLE compression if appropriate</dd>
<dt><code>IMAGE_GIF</code></dt>
<dd>GIF file format</dd>
<dt><code>IMAGE_ICO</code></dt>
<dd>Windows ICO file format</dd>
<dt><code>IMAGE_JPEG</code></dt>
<dd>JPEG file format</dd>
<dt><code>IMAGE_PNG</code></dt>
<dd>PNG file format</dd>
</dl>

@param stream the output stream to write the images to
@param format the format to write the images in

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the stream is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_IO - if an IO error occurs while writing to the stream</li>
<li>ERROR_INVALID_IMAGE - if the image data contains invalid data</li>
<li>ERROR_UNSUPPORTED_FORMAT - if the image data cannot be saved to the requested format</li>
</ul>
------------
Saves the image data in this ImageLoader to a file with the specified name.
The format parameter can have one of the following values:
<dl>
<dt><code>IMAGE_BMP</code></dt>
<dd>Windows BMP file format, no compression</dd>
<dt><code>IMAGE_BMP_RLE</code></dt>
<dd>Windows BMP file format, RLE compression if appropriate</dd>
<dt><code>IMAGE_GIF</code></dt>
<dd>GIF file format</dd>
<dt><code>IMAGE_ICO</code></dt>
<dd>Windows ICO file format</dd>
<dt><code>IMAGE_JPEG</code></dt>
<dd>JPEG file format</dd>
<dt><code>IMAGE_PNG</code></dt>
<dd>PNG file format</dd>
</dl>

@param filename the name of the file to write the images to
@param format the format to write the images in

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the file name is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_IO - if an IO error occurs while writing to the file</li>
<li>ERROR_INVALID_IMAGE - if the image data contains invalid data</li>
<li>ERROR_UNSUPPORTED_FORMAT - if the image data cannot be saved to the requested format</li>
</ul>
------------
Adds the listener to the collection of listeners who will be
notified when image data is either partially or completely loaded.
<p>
An ImageLoaderListener should be added before invoking
one of the receiver's load methods. The listener's
<code>imageDataLoaded</code> method is called when image
data has been partially loaded, as is supported by interlaced
GIF/PNG or progressive JPEG images.

@param listener the listener which should be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>

@see ImageLoaderListener
@see ImageLoaderEvent
------------
Removes the listener from the collection of listeners who will be
notified when image data is either partially or completely loaded.

@param listener the listener which should no longer be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>

@see #addImageLoaderListener(ImageLoaderListener)
------------
Returns <code>true</code> if the receiver has image loader
listeners, and <code>false</code> otherwise.

@return <code>true</code> if there are <code>ImageLoaderListener</code>s, and <code>false</code> otherwise

@see #addImageLoaderListener(ImageLoaderListener)
@see #removeImageLoaderListener(ImageLoaderListener)
------------
Notifies all image loader listeners that an image loader event
has occurred. Pass the specified event object to each listener.

@param event the <code>ImageLoaderEvent</code> to send to each <code>ImageLoaderListener</code>

====== ImageLoaderEvent.java ======
Copyright (c) 2000, 2017 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class are sent as a result of the incremental
loading of image data.
<p>
<b>Notes:</b>
</p><ul>
<li>The number of events which will be sent when loading images
is not constant. It varies by image type, and for JPEG images it
varies from image to image.</li>
<li>For image sources which contain multiple images, the
<code>endOfImage</code> flag in the event will be set to true
after each individual image is loaded.</li>
</ul>

@see ImageLoader
@see ImageLoaderListener
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
------------
if the <code>endOfImage</code> flag is false, then this is a
partially complete copy of the current <code>ImageData</code>,
otherwise this is a completely loaded <code>ImageData</code>

public ImageData imageData;


the zero-based count of image data increments -- this is
equivalent to the number of events that have been generated
while loading a particular image

public int incrementCount;


If this flag is true, then the current image data has been
completely loaded, otherwise the image data is only partially
loaded, and further ImageLoader events will occur unless an
exception is thrown

public boolean endOfImage;

static final long serialVersionUID = 3257284738325558065L;


Constructs a new instance of this class given the event source and
the values to store in its fields.

@param source the ImageLoader that was loading when the event occurred
@param imageData the image data for the event
@param incrementCount the image data increment for the event
@param endOfImage the end of image flag for the event
------------
Returns a string containing a concise, human-readable
description of the receiver.

@return a string representation of the event

====== ImageLoaderListener.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Classes which implement this interface provide methods
that deal with the incremental loading of image data.
<p>
After creating an instance of a class that implements
this interface it can be added to an image loader using the
<code>addImageLoaderListener</code> method and removed using
the <code>removeImageLoaderListener</code> method. When
image data is either partially or completely loaded, this
method will be invoked.
</p>

@see ImageLoader
@see ImageLoaderEvent
------------
Sent when image data is either partially or completely loaded.
<p>
The timing of when this method is called varies depending on
the format of the image being loaded.
</p>

@param e an event containing information about the image loading operation

====== IME.java ======
Copyright (c) 2007, 2014 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class represent input method editors.
These are typically in-line pre-edit text areas that allow
the user to compose characters from Far Eastern languages
such as Japanese, Chinese or Korean.

<dl>
<dt><b>Styles:</b></dt>
<dd>(none)</dd>
<dt><b>Events:</b></dt>
<dd>ImeComposition</dd>
</dl>
<p>
IMPORTANT: This class is <em>not</em> intended to be subclassed.
</p>

@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>

@since 3.4
@noextend This class is not intended to be subclassed by clients.
------------
Prevents uninitialized instances from being created outside the package.
------------
Constructs a new instance of this class given its parent
and a style value describing its behavior and appearance.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.
</p>

@param parent a canvas control which will be the parent of the new instance (cannot be null)
@param style the style of control to construct

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see Widget#checkSubclass
@see Widget#getStyle
------------
Returns the offset of the caret from the start of the document.
The caret is within the current composition.

@return the caret offset

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the commit count of the composition.  This is the
number of characters that have been composed.  When the
commit count is equal to the length of the composition
text, then the in-line edit operation is complete.

@return the commit count

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see IME#getText
------------
Returns the offset of the composition from the start of the document.
This is the start offset of the composition within the document and
in not changed by the input method editor itself during the in-line edit
session.

@return the offset of the composition

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the ranges for the style that should be applied during the
in-line edit session.
<p>
The ranges array contains start and end pairs.  Each pair refers to
the corresponding style in the styles array.  For example, the pair
that starts at ranges[n] and ends at ranges[n+1] uses the style
at styles[n/2] returned by <code>getStyles()</code>.
</p>
@return the ranges for the styles

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see IME#getStyles
------------
Returns the styles for the ranges.
<p>
The ranges array contains start and end pairs.  Each pair refers to
the corresponding style in the styles array.  For example, the pair
that starts at ranges[n] and ends at ranges[n+1] uses the style
at styles[n/2].
</p>

@return the ranges for the styles

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see IME#getRanges
------------
Returns the composition text.
<p>
The text for an IME is the characters in the widget that
are in the current composition. When the commit count is
equal to the length of the composition text, then the
in-line edit operation is complete.
</p>

@return the widget text

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns <code>true</code> if the caret should be wide, and
<code>false</code> otherwise.  In some languages, for example
Korean, the caret is typically widened to the width of the
current character in the in-line edit session.

@return the wide caret state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the offset of the composition from the start of the document.
This is the start offset of the composition within the document and
in not changed by the input method editor itself during the in-line edit
session but may need to be changed by clients of the IME.  For example,
if during an in-line edit operation, a text editor inserts characters
above the IME, then the IME must be informed that the composition
offset has changed.

@param offset the offset of the composition

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

====== Item.java ======
Copyright (c) 2000, 2015 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
This class is the abstract superclass of all non-windowed
user interface objects that occur within specific controls.
For example, a tree will contain tree items.
<dl>
<dt><b>Styles:</b></dt>
<dd>(none)</dd>
<dt><b>Events:</b></dt>
<dd>(none)</dd>
</dl>

@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
------------
Constructs a new instance of this class given its parent
and a style value describing its behavior and appearance.
The item is added to the end of the items maintained by its parent.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.
</p>

@param parent a widget which will be the parent of the new instance (cannot be null)
@param style the style of item to construct

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
</ul>

@see SWT
@see Widget#getStyle
------------
Constructs a new instance of this class given its parent
and a style value describing its behavior and appearance,
and the index at which to place it in the items maintained
by its parent.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.
</p>

@param parent a widget which will be the parent of the new instance (cannot be null)
@param style the style of item to construct
@param index the zero-relative index at which to store the receiver in its parent

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
<li>ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the parent (inclusive)</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
</ul>

@see SWT
@see Widget#getStyle
------------
Returns the receiver's image if it has one, or null
if it does not.

@return the receiver's image

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the receiver's text, which will be an empty
string if it has never been set.

@return the receiver's text

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the receiver's image to the argument, which may be
null indicating that no image should be displayed.

@param image the image to display on the receiver (may be null)

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the image has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the receiver's text.
<p>
Note: If control characters like '\n', '\t' etc. are used
in the string, then the behavior is platform dependent.
</p>
@param string the new text

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the text is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

====== JPEGAppn.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation

====== JPEGArithmeticConditioningTable.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation

====== JPEGComment.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation

====== JPEGDecoder.java ======
Copyright (c) 2000, 2014 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

This source file is based in part on the work of the Independent JPEG Group (IJG)
and is made available under the terms contained in the about_files/IJG_README
file accompanying this program.

Contributors:
IBM Corporation - initial API and implementation

====== JPEGEndOfImage.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation

====== JPEGFileFormat.java ======
Copyright (c) 2000, 2014 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

This source file is based in part on the work of the Independent JPEG Group (IJG)
and is made available under the terms contained in the about_files/IJG_README
file accompanying this program.

Contributors:
IBM Corporation - initial API and implementation

====== JPEGFixedSizeSegment.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation

====== JPEGFrameHeader.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation

====== JPEGHuffmanTable.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
JPEGHuffmanTable class actually represents two types of object:
1) A DHT (Define Huffman Tables) segment, which may represent
as many as 4 Huffman tables. In this case, the tables are
stored in the allTables array.
2) A single Huffman table. In this case, the allTables array
will be null.
The 'reference' field is stored in both types of object, but
'initialize' is only called if the object represents a DHT.

====== JPEGQuantizationTable.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation

====== JPEGRestartInterval.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation

====== JPEGScanHeader.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation

====== JPEGSegment.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation

====== JPEGStartOfImage.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation

====== JPEGVariableSizeSegment.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation

====== KeyAdapter.java ======
Copyright (c) 2000, 2016 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
This adapter class provides default implementations for the
methods described by the <code>KeyListener</code> interface.
<p>
Classes that wish to deal with <code>KeyEvent</code>s can
extend this class and override only the methods which they are
interested in.
</p>

@see KeyListener
@see KeyEvent
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
------------
Sent when a key is pressed on the system keyboard.
The default behavior is to do nothing.

@param e an event containing information about the key press
------------
Sent when a key is released on the system keyboard.
The default behavior is to do nothing.

@param e an event containing information about the key release

====== KeyEvent.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class are sent as a result of
keys being pressed and released on the keyboard.
<p>
When a key listener is added to a control, the control
will take part in widget traversal.  By default, all
traversal keys (such as the tab key and so on) are
delivered to the control.  In order for a control to take
part in traversal, it should listen for traversal events.
Otherwise, the user can traverse into a control but not
out.  Note that native controls such as table and tree
implement key traversal in the operating system.  It is
not necessary to add traversal listeners for these controls,
unless you want to override the default traversal.
</p>

@see KeyListener
@see TraverseListener
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
------------
the character represented by the key that was typed.
This is the final character that results after all modifiers have been
applied.  For example, when the user types Ctrl+A, the character value
is 0x01.  It is important that applications do not attempt to modify the
character value based on a stateMask (such as SWT.CTRL) or the resulting
character will not be correct.

public char character;


the key code of the key that was typed,
as defined by the key code constants in class <code>SWT</code>.
When the character field of the event is ambiguous, this field
contains the unicode value of the original character.  For example,
typing Ctrl+M or Return both result in the character '\r' but the
keyCode field will also contain '\r' when Return was typed.
*
@see org.eclipse.swt.SWT

public int keyCode;


depending on the event, the location of key specified by the
keyCode or character. The possible values for this field are
<code>SWT.LEFT</code>, <code>SWT.RIGHT</code>, <code>SWT.KEYPAD</code>,
or <code>SWT.NONE</code> representing the main keyboard area.
<p>
The location field can be used to differentiate key events that have
the same key code and character but are generated by different keys
on the keyboard. For example, a key down event with the key code equal
to SWT.SHIFT can be generated by the left and the right shift keys on
the keyboard.
</p><p>
The location field can only be used to determine the location of
the key code or character in the current event. It does not include
information about the location of modifiers in the state mask.
</p>
*
@see org.eclipse.swt.SWT#LEFT
@see org.eclipse.swt.SWT#RIGHT
@see org.eclipse.swt.SWT#KEYPAD
*
@since 3.6

public int keyLocation;


the state of the keyboard modifier keys and mouse masks
at the time the event was generated.
*
@see org.eclipse.swt.SWT#MODIFIER_MASK
@see org.eclipse.swt.SWT#BUTTON_MASK

public int stateMask;


A flag indicating whether the operation should be allowed.
Setting this field to <code>false</code> will cancel the operation.

public boolean doit;

static final long serialVersionUID = 3256442491011412789L;


Constructs a new instance of this class based on the
information in the given untyped event.

@param e the untyped event containing the information
------------
Returns a string containing a concise, human-readable
description of the receiver.

@return a string representation of the event

====== KeyListener.java ======
Copyright (c) 2000, 2016 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
Lars Vogel <Lars.Vogel@vogella.com> - Bug 507185
------------
Classes which implement this interface provide methods
that deal with the events that are generated as keys
are pressed on the system keyboard.
<p>
After creating an instance of a class that implements
this interface it can be added to a control using the
<code>addKeyListener</code> method and removed using
the <code>removeKeyListener</code> method. When a
key is pressed or released, the appropriate method will
be invoked.
</p>

@see KeyAdapter
@see KeyEvent
------------
Sent when a key is pressed on the system keyboard.

@param e an event containing information about the key press
------------
Sent when a key is released on the system keyboard.

@param e an event containing information about the key release
------------
Static helper method to create a key listener for the
{@link #keyPressed(KeyEvent e)}) method with a lambda expression.

@param c the consumer of the event
@return KeyListener
@since 3.106

====== Label.java ======
Copyright (c) 2000, 2015 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class represent a non-selectable
user interface object that displays a string or image.
When SEPARATOR is specified, displays a single
vertical or horizontal line.
<p>
Shadow styles are hints and may not be honored
by the platform.  To create a separator label
with the default shadow style for the platform,
do not specify a shadow style.
</p>
<dl>
<dt><b>Styles:</b></dt>
<dd>SEPARATOR, HORIZONTAL, VERTICAL</dd>
<dd>SHADOW_IN, SHADOW_OUT, SHADOW_NONE</dd>
<dd>CENTER, LEFT, RIGHT, WRAP</dd>
<dt><b>Events:</b></dt>
<dd>(none)</dd>
</dl>
<p>
Note: Only one of SHADOW_IN, SHADOW_OUT and SHADOW_NONE may be specified.
SHADOW_NONE is a HINT. Only one of HORIZONTAL and VERTICAL may be specified.
Only one of CENTER, LEFT and RIGHT may be specified.
</p><p>
IMPORTANT: This class is <em>not</em> intended to be subclassed.
</p>

@see <a href="http://www.eclipse.org/swt/snippets/#label">Label snippets</a>
@see <a href="http://www.eclipse.org/swt/examples.php">SWT Example: ControlExample</a>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
@noextend This class is not intended to be subclassed by clients.
------------
Constructs a new instance of this class given its parent
and a style value describing its behavior and appearance.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.
</p>

@param parent a composite control which will be the parent of the new instance (cannot be null)
@param style the style of control to construct

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see SWT#SEPARATOR
@see SWT#HORIZONTAL
@see SWT#VERTICAL
@see SWT#SHADOW_IN
@see SWT#SHADOW_OUT
@see SWT#SHADOW_NONE
@see SWT#CENTER
@see SWT#LEFT
@see SWT#RIGHT
@see SWT#WRAP
@see Widget#checkSubclass
@see Widget#getStyle
------------
Returns a value which describes the position of the
text or image in the receiver. The value will be one of
<code>LEFT</code>, <code>RIGHT</code> or <code>CENTER</code>
unless the receiver is a <code>SEPARATOR</code> label, in
which case, <code>NONE</code> is returned.

@return the alignment

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the receiver's image if it has one, or null
if it does not.

@return the receiver's image

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the receiver's text, which will be an empty
string if it has never been set or if the receiver is
a <code>SEPARATOR</code> label.

@return the receiver's text

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Controls how text and images will be displayed in the receiver.
The argument should be one of <code>LEFT</code>, <code>RIGHT</code>
or <code>CENTER</code>.  If the receiver is a <code>SEPARATOR</code>
label, the argument is ignored and the alignment is not changed.

@param alignment the new alignment

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the receiver's image to the argument, which may be
null indicating that no image should be displayed.

@param image the image to display on the receiver (may be null)

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the image has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the receiver's text.
<p>
This method sets the widget label.  The label may include
the mnemonic character and line delimiters.
</p>
<p>
Mnemonics are indicated by an '&amp;' that causes the next
character to be the mnemonic.  When the user presses a
key sequence that matches the mnemonic, focus is assigned
to the control that follows the label. On most platforms,
the mnemonic appears underlined but may be emphasised in a
platform specific manner.  The mnemonic indicator character
'&amp;' can be escaped by doubling it in the string, causing
a single '&amp;' to be displayed.
</p>
<p>
Note: If control characters like '\n', '\t' etc. are used
in the string, then the behavior is platform dependent.
</p>

@param string the new text

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the text is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

====== Layout.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
A layout controls the position and size
of the children of a composite widget.
This class is the abstract base class for
layouts.

@see Composite#setLayout(Layout)
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
------------
Computes and returns the size of the specified
composite's client area according to this layout.
<p>
This method computes the size that the client area
of the composite must be in order to position all
children at their preferred size inside the
composite according to the layout algorithm
encoded by this layout.
</p>
<p>
When a width or height hint is supplied, it is
used to constrain the result. For example, if a
width hint is provided that is less than the
width of the client area, the layout may choose
to wrap and increase height, clip, overlap, or
otherwise constrain the children.
</p>

@param composite a composite widget using this layout
@param wHint width (<code>SWT.DEFAULT</code> for preferred size)
@param hHint height (<code>SWT.DEFAULT</code> for preferred size)
@param flushCache <code>true</code> means flush cached layout values
@return a point containing the computed size (width, height)

@see #layout
@see Control#getBorderWidth
@see Control#getBounds
@see Control#getSize
@see Control#pack(boolean)
@see "computeTrim, getClientArea for controls that implement them"
------------
Instruct the layout to flush any cached values
associated with the control specified in the argument
<code>control</code>.

@param control a control managed by this layout
@return true if the Layout has flushed all cached information associated with control

@since 3.1
------------
Lays out the children of the specified composite
according to this layout.
<p>
This method positions and sizes the children of a
composite using the layout algorithm encoded by this
layout. Children of the composite are positioned in
the client area of the composite. The position of
the composite is not altered by this method.
</p>
<p>
When the flush cache hint is true, the layout is
instructed to flush any cached values associated
with the children. Typically, a layout will cache
the preferred sizes of the children to avoid the
expense of computing these values each time the
widget is laid out.
</p>
<p>
When layout is triggered explicitly by the programmer
the flush cache hint is true. When layout is triggered
by a resize, either caused by the programmer or by the
user, the hint is false.
</p>

@param composite a composite widget using this layout
@param flushCache <code>true</code> means flush cached layout values

====== LEDataInputStream.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation

====== LEDataOutputStream.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Write the specified number of bytes of the given byte array,
starting at the specified offset, to the output stream.
------------
Write the given byte to the output stream.
------------
Write the given byte to the output stream.
------------
Write the four bytes of the given integer
to the output stream.
------------
Write the two bytes of the given short
to the output stream.

====== LineAttributes.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
<code>LineAttributes</code> defines a set of line attributes that
can be modified in a GC.
<p>
Application code does <em>not</em> need to explicitly release the
resources managed by each instance when those instances are no longer
required, and thus no <code>dispose()</code> method is provided.
</p>

@see GC#getLineAttributes()
@see GC#setLineAttributes(LineAttributes)
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>

@since 3.3
------------
The line width.

public float width;


The line style.
*
@see org.eclipse.swt.SWT#LINE_CUSTOM
@see org.eclipse.swt.SWT#LINE_DASH
@see org.eclipse.swt.SWT#LINE_DASHDOT
@see org.eclipse.swt.SWT#LINE_DASHDOTDOT
@see org.eclipse.swt.SWT#LINE_DOT
@see org.eclipse.swt.SWT#LINE_SOLID

public int style;


The line cap style.
*
@see org.eclipse.swt.SWT#CAP_FLAT
@see org.eclipse.swt.SWT#CAP_ROUND
@see org.eclipse.swt.SWT#CAP_SQUARE

public int cap;


The line join style.
*
@see org.eclipse.swt.SWT#JOIN_BEVEL
@see org.eclipse.swt.SWT#JOIN_MITER
@see org.eclipse.swt.SWT#JOIN_ROUND

public int join;


The line dash style for SWT.LINE_CUSTOM.

public float[] dash;


The line dash style offset for SWT.LINE_CUSTOM.

public float dashOffset;


The line miter limit.

public float miterLimit;


Create a new line attributes with the specified line width.

@param width the line width
------------
Create a new line attributes with the specified line cap, join and width.

@param width the line width
@param cap the line cap style
@param join the line join style
------------
Create a new line attributes with the specified arguments.

@param width the line width
@param cap the line cap style
@param join the line join style
@param style the line style
@param dash the line dash style
@param dashOffset the line dash style offset
@param miterLimit the line miter limit
------------
Compares the argument to the receiver, and returns true
if they represent the <em>same</em> object using a class
specific comparison.

@param object the object to compare with this object
@return <code>true</code> if the object is the same as this object and <code>false</code> otherwise

@see #hashCode()
------------
Returns an integer hash code for the receiver. Any two
objects that return <code>true</code> when passed to
<code>equals</code> must return the same value for this
method.

@return the receiver's hash

@see #equals(Object)

====== Link.java ======
Copyright (c) 2000, 2016 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
Conrad Groth - Bug 401015 - [CSS] Add support for styling hyperlinks in Links
------------
Instances of this class represent a selectable
user interface object that displays a text with
links.
<p>
<dl>
<dt><b>Styles:</b></dt>
<dd>(none)</dd>
<dt><b>Events:</b></dt>
<dd>Selection</dd>
</dl>
<p>
IMPORTANT: This class is <em>not</em> intended to be subclassed.
</p>

@see <a href="http://www.eclipse.org/swt/snippets/#link">Link snippets</a>
@see <a href="http://www.eclipse.org/swt/examples.php">SWT Example: ControlExample</a>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>

@since 3.1
@noextend This class is not intended to be subclassed by clients.
------------
Constructs a new instance of this class given its parent
and a style value describing its behavior and appearance.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.
</p>

@param parent a composite control which will be the parent of the new instance (cannot be null)
@param style the style of control to construct

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see Widget#checkSubclass
@see Widget#getStyle
------------
Adds the listener to the collection of listeners who will
be notified when the control is selected by the user, by sending
it one of the messages defined in the <code>SelectionListener</code>
interface.
<p>
<code>widgetSelected</code> is called when the control is selected by the user.
<code>widgetDefaultSelected</code> is not called.
</p>

@param listener the listener which should be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see SelectionListener
@see #removeSelectionListener
@see SelectionEvent
------------
Returns the link foreground color.

@return the receiver's link foreground color.

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
@since 3.105
------------
Returns the receiver's text, which will be an empty
string if it has never been set.

@return the receiver's text

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Removes the listener from the collection of listeners who will
be notified when the control is selected by the user.

@param listener the listener which should no longer be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see SelectionListener
@see #addSelectionListener
------------
Sets the link foreground color to the color specified
by the argument, or to the default system color for the link
if the argument is null.
<p>
Note: This operation is a hint and may be overridden by the platform.
</p>
@param color the new color (or null)

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the argument has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
@since 3.105
------------
Sets the receiver's text.
<p>
The string can contain both regular text and hyperlinks.  A hyperlink
is delimited by an anchor tag, <a> and </a>.  Within an
anchor, a single HREF attribute is supported.  When a hyperlink is
selected, the text field of the selection event contains either the
text of the hyperlink or the value of its HREF, if one was specified.
In the rare case of identical hyperlinks within the same string, the
HREF attribute can be used to distinguish between them.  The string may
include the mnemonic character and line delimiters. The only delimiter
the HREF attribute supports is the quotation mark (").
</p>
<p>
Mnemonics are indicated by an '&amp;' that causes the next
character to be the mnemonic. The receiver can have a
mnemonic in the text preceding each link. When the user presses a
key sequence that matches the mnemonic, focus is assigned
to the link that follows the text. Mnemonics in links and in
the trailing text are ignored. On most platforms,
the mnemonic appears underlined but may be emphasised in a
platform specific manner.  The mnemonic indicator character
'&amp;' can be escaped by doubling it in the string, causing
a single '&amp;' to be displayed.
</p>

@param string the new text

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the text is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

====== List.java ======
Copyright (c) 2000, 2016 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class represent a selectable user interface
object that displays a list of strings and issues notification
when a string is selected.  A list may be single or multi select.
<p>
<dl>
<dt><b>Styles:</b></dt>
<dd>SINGLE, MULTI</dd>
<dt><b>Events:</b></dt>
<dd>Selection, DefaultSelection</dd>
</dl>
<p>
Note: Only one of SINGLE and MULTI may be specified.
</p><p>
IMPORTANT: This class is <em>not</em> intended to be subclassed.
</p>

@see <a href="http://www.eclipse.org/swt/snippets/#list">List snippets</a>
@see <a href="http://www.eclipse.org/swt/examples.php">SWT Example: ControlExample</a>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
@noextend This class is not intended to be subclassed by clients.
------------
Constructs a new instance of this class given its parent
and a style value describing its behavior and appearance.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.
</p>

@param parent a composite control which will be the parent of the new instance (cannot be null)
@param style the style of control to construct

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see SWT#SINGLE
@see SWT#MULTI
@see Widget#checkSubclass
@see Widget#getStyle
------------
Adds the argument to the end of the receiver's list.
<p>
Note: If control characters like '\n', '\t' etc. are used
in the string, then the behavior is platform dependent.
</p>
@param string the new item

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the string is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #add(String,int)
------------
Adds the argument to the receiver's list at the given
zero-relative index.
<p>
Note: To add an item at the end of the list, use the
result of calling <code>getItemCount()</code> as the
index or use <code>add(String)</code>.
</p><p>
Also note, if control characters like '\n', '\t' etc. are used
in the string, then the behavior is platform dependent.
</p>

@param string the new item
@param index the index for the item

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the string is null</li>
<li>ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list (inclusive)</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #add(String)
------------
Adds the listener to the collection of listeners who will
be notified when the user changes the receiver's selection, by sending
it one of the messages defined in the <code>SelectionListener</code>
interface.
<p>
<code>widgetSelected</code> is called when the selection changes.
<code>widgetDefaultSelected</code> is typically called when an item is double-clicked.
</p>

@param listener the listener which should be notified when the user changes the receiver's selection

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see SelectionListener
@see #removeSelectionListener
@see SelectionEvent
------------
Deselects the items at the given zero-relative indices in the receiver.
If the item at the given zero-relative index in the receiver
is selected, it is deselected.  If the item at the index
was not selected, it remains deselected. Indices that are out
of range and duplicate indices are ignored.

@param indices the array of indices for the items to deselect

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the set of indices is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Deselects the item at the given zero-relative index in the receiver.
If the item at the index was already deselected, it remains
deselected. Indices that are out of range are ignored.

@param index the index of the item to deselect

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Deselects the items at the given zero-relative indices in the receiver.
If the item at the given zero-relative index in the receiver
is selected, it is deselected.  If the item at the index
was not selected, it remains deselected.  The range of the
indices is inclusive. Indices that are out of range are ignored.

@param start the start index of the items to deselect
@param end the end index of the items to deselect

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Deselects all selected items in the receiver.

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the zero-relative index of the item which currently
has the focus in the receiver, or -1 if no item has focus.

@return the index of the selected item

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the item at the given, zero-relative index in the
receiver. Throws an exception if the index is out of range.

@param index the index of the item to return
@return the item at the given index

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list minus 1 (inclusive)</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the number of items contained in the receiver.

@return the number of items

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the height of the area which would be used to
display <em>one</em> of the items in the list.

@return the height of one item

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns a (possibly empty) array of <code>String</code>s which
are the items in the receiver.
<p>
Note: This is not the actual structure used by the receiver
to maintain its list of items, so modifying the array will
not affect the receiver.
</p>

@return the items in the receiver's list

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns an array of <code>String</code>s that are currently
selected in the receiver.  The order of the items is unspecified.
An empty array indicates that no items are selected.
<p>
Note: This is not the actual structure used by the receiver
to maintain its selection, so modifying the array will
not affect the receiver.
</p>
@return an array representing the selection

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the number of selected items contained in the receiver.

@return the number of selected items

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the zero-relative index of the item which is currently
selected in the receiver, or -1 if no item is selected.

@return the index of the selected item or -1

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the zero-relative indices of the items which are currently
selected in the receiver.  The order of the indices is unspecified.
The array is empty if no items are selected.
<p>
Note: This is not the actual structure used by the receiver
to maintain its selection, so modifying the array will
not affect the receiver.
</p>
@return the array of indices of the selected items

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the zero-relative index of the item which is currently
at the top of the receiver. This index can change when items are
scrolled or new items are added or removed.

@return the index of the top item

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Gets the index of an item.
<p>
The list is searched starting at 0 until an
item is found that is equal to the search item.
If no item is found, -1 is returned.  Indexing
is zero based.

@param string the search item
@return the index of the item

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the string is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Searches the receiver's list starting at the given,
zero-relative index until an item is found that is equal
to the argument, and returns the index of that item. If
no item is found or the starting index is out of range,
returns -1.

@param string the search item
@param start the zero-relative index at which to start the search
@return the index of the item

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the string is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns <code>true</code> if the item is selected,
and <code>false</code> otherwise.  Indices out of
range are ignored.

@param index the index of the item
@return the selection state of the item at the index

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Removes the items from the receiver at the given
zero-relative indices.

@param indices the array of indices of the items

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list minus 1 (inclusive)</li>
<li>ERROR_NULL_ARGUMENT - if the indices array is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Removes the item from the receiver at the given
zero-relative index.

@param index the index for the item

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list minus 1 (inclusive)</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Removes the items from the receiver which are
between the given zero-relative start and end
indices (inclusive).

@param start the start of the range
@param end the end of the range

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_RANGE - if either the start or end are not between 0 and the number of elements in the list minus 1 (inclusive)</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Searches the receiver's list starting at the first item
until an item is found that is equal to the argument,
and removes that item from the list.

@param string the item to remove

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the string is null</li>
<li>ERROR_INVALID_ARGUMENT - if the string is not found in the list</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Removes all of the items from the receiver.
<p>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Removes the listener from the collection of listeners who will
be notified when the user changes the receiver's selection.

@param listener the listener which should no longer be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see SelectionListener
@see #addSelectionListener
------------
Selects the items at the given zero-relative indices in the receiver.
The current selection is not cleared before the new items are selected.
<p>
If the item at a given index is not selected, it is selected.
If the item at a given index was already selected, it remains selected.
Indices that are out of range and duplicate indices are ignored.
If the receiver is single-select and multiple indices are specified,
then all indices are ignored.

@param indices the array of indices for the items to select

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the array of indices is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see List#setSelection(int[])
------------
Selects the item at the given zero-relative index in the receiver's
list.  If the item at the index was already selected, it remains
selected. Indices that are out of range are ignored.

@param index the index of the item to select

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Selects the items in the range specified by the given zero-relative
indices in the receiver. The range of indices is inclusive.
The current selection is not cleared before the new items are selected.
<p>
If an item in the given range is not selected, it is selected.
If an item in the given range was already selected, it remains selected.
Indices that are out of range are ignored and no items will be selected
if start is greater than end.
If the receiver is single-select and there is more than one item in the
given range, then all indices are ignored.

@param start the start of the range
@param end the end of the range

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see List#setSelection(int,int)
------------
Selects all of the items in the receiver.
<p>
If the receiver is single-select, do nothing.

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the text of the item in the receiver's list at the given
zero-relative index to the string argument.

@param index the index for the item
@param string the new text for the item

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list minus 1 (inclusive)</li>
<li>ERROR_NULL_ARGUMENT - if the string is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the receiver's items to be the given array of items.

@param items the array of items

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the items array is null</li>
<li>ERROR_INVALID_ARGUMENT - if an item in the items array is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Selects the items at the given zero-relative indices in the receiver.
The current selection is cleared before the new items are selected,
and if necessary the receiver is scrolled to make the new selection visible.
<p>
Indices that are out of range and duplicate indices are ignored.
If the receiver is single-select and multiple indices are specified,
then all indices are ignored.

@param indices the indices of the items to select

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the array of indices is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see List#deselectAll()
@see List#select(int[])
------------
Sets the receiver's selection to be the given array of items.
The current selection is cleared before the new items are selected,
and if necessary the receiver is scrolled to make the new selection visible.
<p>
Items that are not in the receiver are ignored.
If the receiver is single-select and multiple items are specified,
then all items are ignored.

@param items the array of items

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the array of items is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see List#deselectAll()
@see List#select(int[])
@see List#setSelection(int[])
------------
Selects the item at the given zero-relative index in the receiver.
If the item at the index was already selected, it remains selected.
The current selection is first cleared, then the new item is selected,
and if necessary the receiver is scrolled to make the new selection visible.
Indices that are out of range are ignored.

@param index the index of the item to select

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
@see List#deselectAll()
@see List#select(int)
------------
Selects the items in the range specified by the given zero-relative
indices in the receiver. The range of indices is inclusive.
The current selection is cleared before the new items are selected,
and if necessary the receiver is scrolled to make the new selection visible.
<p>
Indices that are out of range are ignored and no items will be selected
if start is greater than end.
If the receiver is single-select and there is more than one item in the
given range, then all indices are ignored.

@param start the start index of the items to select
@param end the end index of the items to select

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see List#deselectAll()
@see List#select(int,int)
------------
Sets the zero-relative index of the item which is currently
at the top of the receiver. This index can change when items
are scrolled or new items are added and removed.

@param index the index of the top item

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Shows the selection.  If the selection is already showing in the receiver,
this method simply returns.  Otherwise, the items are scrolled until
the selection is visible.

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

====== Listener.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Implementers of <code>Listener</code> provide a simple
<code>handleEvent()</code> method that is used internally
by SWT to dispatch events.
<p>
After creating an instance of a class that implements this interface
it can be added to a widget using the
<code>addListener(int eventType, Listener handler)</code> method and
removed using the
<code>removeListener (int eventType, Listener handler)</code> method.
When the specified event occurs, <code>handleEvent(...)</code> will
be sent to the instance.
</p>
<p>
Classes which implement this interface are described within SWT as
providing the <em>untyped listener</em> API. Typically, widgets will
also provide a higher-level <em>typed listener</em> API, that is based
on the standard <code>java.util.EventListener</code> pattern.
</p>
<p>
Note that, since all internal SWT event dispatching is based on untyped
listeners, it is simple to build subsets of SWT for use on memory
constrained, small footprint devices, by removing the classes and
methods which implement the typed listener API.
</p>

@see Widget#addListener
@see java.util.EventListener
@see org.eclipse.swt.events
------------
Sent when an event that the receiver has registered for occurs.

@param event the event which occurred

====== LZWCodec.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Decode the input.
------------
Decode the LZW-encoded bytes in the given byte stream
into the given DeviceIndependentImage.
------------
Encode the image.
------------
Encode the bytes into the given byte stream
from the given DeviceIndependentImage.
------------
Encoding loop broken out to allow early return.
------------
Initialize the receiver for decoding the given
byte array.
------------
Initialize the receiver for encoding the given
byte array.
------------
Answer the next code from the input byte array.
------------
Answer the next pixel to encode in the image
------------
Copy a row of pixel values from the image.
------------
Output aCode to the output stream.
------------
Copy a row of pixel values to the image.
------------
Copy duplicate rows of pixel values to the image.
This is to fill in rows if the image is interlaced.
------------
Read a block from the byte stream.
Return the number of bytes read.
Throw an exception if the block could not be read.
------------
Write a block to the byte stream.
Throw an exception if the block could not be written.

====== LZWNode.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation

====== Menu.java ======
Copyright (c) 2000, 2014 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class are user interface objects that contain
menu items.
<dl>
<dt><b>Styles:</b></dt>
<dd>BAR, DROP_DOWN, POP_UP, NO_RADIO_GROUP</dd>
<dd>LEFT_TO_RIGHT, RIGHT_TO_LEFT</dd>
<dt><b>Events:</b></dt>
<dd>Help, Hide, Show </dd>
</dl>
<p>
Note: Only one of BAR, DROP_DOWN and POP_UP may be specified.
Only one of LEFT_TO_RIGHT or RIGHT_TO_LEFT may be specified.
</p><p>
IMPORTANT: This class is <em>not</em> intended to be subclassed.
</p>

@see <a href="http://www.eclipse.org/swt/snippets/#menu">Menu snippets</a>
@see <a href="http://www.eclipse.org/swt/examples.php">SWT Example: ControlExample</a>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
@noextend This class is not intended to be subclassed by clients.
------------
the handle to the OS resource
(Warning: This field is platform dependent)
<p>
<b>IMPORTANT:</b> This field is <em>not</em> part of the SWT
public API. It is marked public only so that it can be shared
within the packages provided by SWT. It is not available on all
platforms and should never be accessed from application code.
</p>
*
@noreference This field is not intended to be referenced by clients.

public long /*int*/ handle;

int x, y;
long /*int*/ hBrush, hwndCB;
int id0, id1;
int foreground = -1, background = -1;
Image backgroundImage;
boolean hasLocation;
MenuItem cascade;
Decorations parent;
ImageList imageList;
MenuItem selectedMenuItem;

/* Resource ID for SHMENUBARINFO */
static final int ID_PPC = 100;

/* SmartPhone SoftKeyBar resource ids */
static final int ID_SPMM = 102;
static final int ID_SPBM = 103;
static final int ID_SPMB = 104;
static final int ID_SPBB = 105;
static final int ID_SPSOFTKEY0 = 106;
static final int ID_SPSOFTKEY1 = 107;

/* Timer ID for MenuItem ToolTip */
static final int ID_TOOLTIP_TIMER = 110;


Constructs a new instance of this class given its parent,
and sets the style for the instance so that the instance
will be a popup menu on the given parent's shell.
<p>
After constructing a menu, it can be set into its parent
using <code>parent.setMenu(menu)</code>.  In this case, the parent may
be any control in the same widget tree as the parent.
</p>

@param parent a control which will be the parent of the new instance (cannot be null)

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see SWT#POP_UP
@see Widget#checkSubclass
@see Widget#getStyle
------------
Constructs a new instance of this class given its parent
(which must be a <code>Decorations</code>) and a style value
describing its behavior and appearance.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.
</p><p>
After constructing a menu or menuBar, it can be set into its parent
using <code>parent.setMenu(menu)</code> or <code>parent.setMenuBar(menuBar)</code>.
</p>

@param parent a decorations control which will be the parent of the new instance (cannot be null)
@param style the style of menu to construct

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see SWT#BAR
@see SWT#DROP_DOWN
@see SWT#POP_UP
@see SWT#NO_RADIO_GROUP
@see SWT#LEFT_TO_RIGHT
@see SWT#RIGHT_TO_LEFT
@see Widget#checkSubclass
@see Widget#getStyle
------------
Constructs a new instance of this class given its parent
(which must be a <code>Menu</code>) and sets the style
for the instance so that the instance will be a drop-down
menu on the given parent's parent.
<p>
After constructing a drop-down menu, it can be set into its parentMenu
using <code>parentMenu.setMenu(menu)</code>.
</p>

@param parentMenu a menu which will be the parent of the new instance (cannot be null)

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see SWT#DROP_DOWN
@see Widget#checkSubclass
@see Widget#getStyle
------------
Constructs a new instance of this class given its parent
(which must be a <code>MenuItem</code>) and sets the style
for the instance so that the instance will be a drop-down
menu on the given parent's parent menu.
<p>
After constructing a drop-down menu, it can be set into its parentItem
using <code>parentItem.setMenu(menu)</code>.
</p>

@param parentItem a menu item which will be the parent of the new instance (cannot be null)

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see SWT#DROP_DOWN
@see Widget#checkSubclass
@see Widget#getStyle
------------
Adds the listener to the collection of listeners who will
be notified when help events are generated for the control,
by sending it one of the messages defined in the
<code>HelpListener</code> interface.

@param listener the listener which should be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see HelpListener
@see #removeHelpListener
------------
Adds the listener to the collection of listeners who will
be notified when menus are hidden or shown, by sending it
one of the messages defined in the <code>MenuListener</code>
interface.

@param listener the listener which should be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see MenuListener
@see #removeMenuListener
------------
Returns the receiver's background color.

@return the background color

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.3
------------
Returns the receiver's background image.

@return the background image

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.3
------------
Returns a rectangle describing the receiver's size and location
relative to its parent (or its display if its parent is null),
unless the receiver is a menu or a shell. In this case, the
location is relative to the display.
<p>
Note that the bounds of a menu or menu item are undefined when
the menu is not visible.  This is because most platforms compute
the bounds of a menu dynamically just before it is displayed.
</p>

@return the receiver's bounding rectangle

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.1
------------
Returns the default menu item or null if none has
been previously set.

@return the default menu item.

</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns <code>true</code> if the receiver is enabled, and
<code>false</code> otherwise. A disabled menu is typically
not selectable from the user interface and draws with an
inactive or "grayed" look.

@return the receiver's enabled state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #isEnabled
------------
Returns the foreground color that the receiver will use to draw.

@return the receiver's foreground color

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the item at the given, zero-relative index in the
receiver. Throws an exception if the index is out of range.

@param index the index of the item to return
@return the item at the given index

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list minus 1 (inclusive)</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the number of items contained in the receiver.

@return the number of items

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns a (possibly empty) array of <code>MenuItem</code>s which
are the items in the receiver.
<p>
Note: This is not the actual structure used by the receiver
to maintain its list of items, so modifying the array will
not affect the receiver.
</p>

@return the items in the receiver

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the orientation of the receiver, which will be one of the
constants <code>SWT.LEFT_TO_RIGHT</code> or <code>SWT.RIGHT_TO_LEFT</code>.

@return the orientation style

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.7
------------
Returns the receiver's parent, which must be a <code>Decorations</code>.

@return the receiver's parent

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the receiver's parent item, which must be a
<code>MenuItem</code> or null when the receiver is a
root.

@return the receiver's parent item

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the receiver's parent item, which must be a
<code>Menu</code> or null when the receiver is a
root.

@return the receiver's parent item

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the receiver's shell. For all controls other than
shells, this simply returns the control's nearest ancestor
shell. Shells return themselves, even if they are children
of other shells. Returns null if receiver or its ancestor
is the application menubar.

@return the receiver's shell or null

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #getParent
------------
Returns <code>true</code> if the receiver is visible, and
<code>false</code> otherwise.
<p>
If one of the receiver's ancestors is not visible or some
other condition makes the receiver not visible, this method
may still indicate that it is considered visible even though
it may not actually be showing.
</p>

@return the receiver's visibility state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Searches the receiver's list starting at the first item
(index 0) until an item is found that is equal to the
argument, and returns the index of that item. If no item
is found, returns -1.

@param item the search item
@return the index of the item

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the item is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns <code>true</code> if the receiver is enabled and all
of the receiver's ancestors are enabled, and <code>false</code>
otherwise. A disabled menu is typically not selectable from the
user interface and draws with an inactive or "grayed" look.

@return the receiver's enabled state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #getEnabled
------------
Returns <code>true</code> if the receiver is visible and all
of the receiver's ancestors are visible and <code>false</code>
otherwise.

@return the receiver's visibility state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #getVisible
------------
Removes the listener from the collection of listeners who will
be notified when the help events are generated for the control.

@param listener the listener which should no longer be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see HelpListener
@see #addHelpListener
------------
Removes the listener from the collection of listeners who will
be notified when the menu events are generated for the control.

@param listener the listener which should no longer be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see MenuListener
@see #addMenuListener
------------
Sets the receiver's background color to the color specified
by the argument, or to the default system color for the control
if the argument is null.

@param color the new color (or null)

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the argument has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.3
------------
Sets the receiver's background image to the image specified
by the argument, or to the default system color for the control
if the argument is null.  The background image is tiled to fill
the available space.

@param image the new image (or null)

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the argument has been disposed</li>
<li>ERROR_INVALID_ARGUMENT - if the argument is not a bitmap</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.3
------------
Sets the receiver's foreground color to the color specified
by the argument, or to the default system color for the control
if the argument is null.

@param color the new color (or null)

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the argument has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.3
------------
Sets the default menu item to the argument or removes
the default emphasis when the argument is <code>null</code>.

@param item the default menu item or null

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the menu item has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Enables the receiver if the argument is <code>true</code>,
and disables it otherwise. A disabled menu is typically
not selectable from the user interface and draws with an
inactive or "grayed" look.

@param enabled the new enabled state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the location of the receiver, which must be a popup,
to the point specified by the arguments which are relative
to the display.
<p>
Note that this is different from most widgets where the
location of the widget is relative to the parent.
</p><p>
Note that the platform window manager ultimately has control
over the location of popup menus.
</p>

@param x the new x coordinate for the receiver
@param y the new y coordinate for the receiver

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the location of the receiver, which must be a popup,
to the point specified by the argument which is relative
to the display.
<p>
Note that this is different from most widgets where the
location of the widget is relative to the parent.
</p><p>
Note that the platform window manager ultimately has control
over the location of popup menus.
</p>

@param location the new location for the receiver

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the point is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 2.1
------------
Sets the orientation of the receiver, which must be one
of the constants <code>SWT.LEFT_TO_RIGHT</code> or <code>SWT.RIGHT_TO_LEFT</code>.
<p>

@param orientation new orientation style

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.7
------------
Marks the receiver as visible if the argument is <code>true</code>,
and marks it invisible otherwise.
<p>
If one of the receiver's ancestors is not visible or some
other condition makes the receiver not visible, marking
it visible may not actually cause it to be displayed.
</p>

@param visible the new visibility state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

====== MenuAdapter.java ======
Copyright (c) 2000, 2016 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
This adapter class provides default implementations for the
methods described by the <code>MenuListener</code> interface.
<p>
Classes that wish to deal with <code>MenuEvent</code>s can
extend this class and override only the methods which they are
interested in.
</p>

@see MenuListener
@see MenuEvent
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
------------
Sent when a menu is hidden.
The default behavior is to do nothing.

@param e an event containing information about the menu operation
------------
Sent when a menu is shown.
The default behavior is to do nothing.

@param e an event containing information about the menu operation

====== MenuDetectEvent.java ======
Copyright (c) 2000, 2012 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class are sent whenever the platform-
specific trigger for showing a context menu is detected.

@see MenuDetectListener
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>

@since 3.3
------------
The display-relative x coordinate of the pointer
at the time the context menu trigger occurred.

public int x;


The display-relative y coordinate of the pointer
at the time the context menu trigger occurred.

public int y;


A flag indicating whether the operation should be allowed.
Setting this field to <code>false</code> will cancel the operation.

public boolean doit;


The context menu trigger type.
<p><ul>
<li>{@link org.eclipse.swt.SWT#MENU_MOUSE}</li>
<li>{@link org.eclipse.swt.SWT#MENU_KEYBOARD}</li>
</ul></p>
*
A field indicating whether the context menu was triggered by a
pointing device such as a mouse (indicated by <code>MENU_MOUSE</code>),
or by a focus-based device such as a keyboard (<code>MENU_KEYBOARD</code>).
If the trigger was <code>MENU_KEYBOARD</code>, then the application should
provide new display-relative x and y coordinates based on the current
selection or the current focus.
*
@since 3.8

public int detail;

private static final long serialVersionUID = -3061660596590828941L;


Constructs a new instance of this class based on the
information in the given untyped event.

@param e the untyped event containing the information
------------
Returns a string containing a concise, human-readable
description of the receiver.

@return a string representation of the event

====== MenuDetectListener.java ======
Copyright (c) 2000, 2016 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
Lars Vogel <Lars.Vogel@vogella.com> - Bug 502576
------------
Classes which implement this interface provide methods
that deal with the events that are generated when the
platform-specific trigger for showing a context menu is
detected.
<p>
After creating an instance of a class that implements
this interface it can be added to a control or TrayItem
using the <code>addMenuDetectListener</code> method and
removed using the <code>removeMenuDetectListener</code> method.
When the context menu trigger occurs, the
<code>menuDetected</code> method will be invoked.
</p>

@see MenuDetectEvent

@since 3.3
------------
Sent when the platform-dependent trigger for showing a menu item is detected.

@param e an event containing information about the menu detect

====== MenuEvent.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class are sent as a result of
menus being shown and hidden.

@see MenuListener
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
------------
Constructs a new instance of this class based on the
information in the given untyped event.

@param e the untyped event containing the information

====== MenuItem.java ======
Copyright (c) 2000, 2014 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class represent a selectable user interface object
that issues notification when pressed and released.
<dl>
<dt><b>Styles:</b></dt>
<dd>CHECK, CASCADE, PUSH, RADIO, SEPARATOR</dd>
<dt><b>Events:</b></dt>
<dd>Arm, Help, Selection</dd>
</dl>
<p>
Note: Only one of the styles CHECK, CASCADE, PUSH, RADIO and SEPARATOR
may be specified.
</p><p>
IMPORTANT: This class is <em>not</em> intended to be subclassed.
</p>

@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
@noextend This class is not intended to be subclassed by clients.
------------
Constructs a new instance of this class given its parent
(which must be a <code>Menu</code>) and a style value
describing its behavior and appearance. The item is added
to the end of the items maintained by its parent.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.
</p>

@param parent a menu control which will be the parent of the new instance (cannot be null)
@param style the style of control to construct

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see SWT#CHECK
@see SWT#CASCADE
@see SWT#PUSH
@see SWT#RADIO
@see SWT#SEPARATOR
@see Widget#checkSubclass
@see Widget#getStyle
------------
Constructs a new instance of this class given its parent
(which must be a <code>Menu</code>), a style value
describing its behavior and appearance, and the index
at which to place it in the items maintained by its parent.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.
</p>

@param parent a menu control which will be the parent of the new instance (cannot be null)
@param style the style of control to construct
@param index the zero-relative index to store the receiver in its parent

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
<li>ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the parent (inclusive)</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see SWT#CHECK
@see SWT#CASCADE
@see SWT#PUSH
@see SWT#RADIO
@see SWT#SEPARATOR
@see Widget#checkSubclass
@see Widget#getStyle
------------
Adds the listener to the collection of listeners who will
be notified when the arm events are generated for the control, by sending
it one of the messages defined in the <code>ArmListener</code>
interface.

@param listener the listener which should be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see ArmListener
@see #removeArmListener
------------
Adds the listener to the collection of listeners who will
be notified when the help events are generated for the control, by sending
it one of the messages defined in the <code>HelpListener</code>
interface.

@param listener the listener which should be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see HelpListener
@see #removeHelpListener
------------
Adds the listener to the collection of listeners who will
be notified when the menu item is selected by the user, by sending
it one of the messages defined in the <code>SelectionListener</code>
interface.
<p>
When <code>widgetSelected</code> is called, the stateMask field of the event object is valid.
<code>widgetDefaultSelected</code> is not called.
</p>
<p>
When the <code>SWT.RADIO</code> style bit is set, the <code>widgetSelected</code> method is
also called when the receiver loses selection because another item in the same radio group
was selected by the user. During <code>widgetSelected</code> the application can use
<code>getSelection()</code> to determine the current selected state of the receiver.
</p>

@param listener the listener which should be notified when the menu item is selected by the user

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see SelectionListener
@see #removeSelectionListener
@see SelectionEvent
------------
Returns the widget accelerator.  An accelerator is the bit-wise
OR of zero or more modifier masks and a key. Examples:
<code>SWT.CONTROL | SWT.SHIFT | 'T', SWT.ALT | SWT.F2</code>.
The default value is zero, indicating that the menu item does
not have an accelerator.

@return the accelerator or 0

</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns a rectangle describing the receiver's size and location
relative to its parent (or its display if its parent is null).

@return the receiver's bounding rectangle

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.1
------------
Returns <code>true</code> if the receiver is enabled, and
<code>false</code> otherwise. A disabled menu item is typically
not selectable from the user interface and draws with an
inactive or "grayed" look.

@return the receiver's enabled state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #isEnabled
------------
Gets the identifier associated with the receiver.

@return the receiver's identifier

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.7
------------
Returns the receiver's cascade menu if it has one or null
if it does not. Only <code>CASCADE</code> menu items can have
a pull down menu. The sequence of key strokes, button presses
and/or button releases that are used to request a pull down
menu is platform specific.

@return the receiver's menu

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the receiver's parent, which must be a <code>Menu</code>.

@return the receiver's parent

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns <code>true</code> if the receiver is selected,
and false otherwise.
<p>
When the receiver is of type <code>CHECK</code> or <code>RADIO</code>,
it is selected when it is checked.

@return the selection state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the receiver's tool tip text, or null if it has not been set.

@return the receiver's tool tip text

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.104
------------
Returns <code>true</code> if the receiver is enabled and all
of the receiver's ancestors are enabled, and <code>false</code>
otherwise. A disabled menu item is typically not selectable from the
user interface and draws with an inactive or "grayed" look.

@return the receiver's enabled state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #getEnabled
------------
Removes the listener from the collection of listeners who will
be notified when the arm events are generated for the control.

@param listener the listener which should no longer be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see ArmListener
@see #addArmListener
------------
Removes the listener from the collection of listeners who will
be notified when the help events are generated for the control.

@param listener the listener which should no longer be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see HelpListener
@see #addHelpListener
------------
Removes the listener from the collection of listeners who will
be notified when the control is selected by the user.

@param listener the listener which should no longer be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see SelectionListener
@see #addSelectionListener
------------
Sets the widget accelerator.  An accelerator is the bit-wise
OR of zero or more modifier masks and a key. Examples:
<code>SWT.MOD1 | SWT.MOD2 | 'T', SWT.MOD3 | SWT.F2</code>.
<code>SWT.CONTROL | SWT.SHIFT | 'T', SWT.ALT | SWT.F2</code>.
The default value is zero, indicating that the menu item does
not have an accelerator.

@param accelerator an integer that is the bit-wise OR of masks and a key

</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Enables the receiver if the argument is <code>true</code>,
and disables it otherwise. A disabled menu item is typically
not selectable from the user interface and draws with an
inactive or "grayed" look.

@param enabled the new enabled state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the identifier associated with the receiver to the argument.

@param id the new identifier. This must be a non-negative value. System-defined identifiers are negative values.

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
<li>ERROR_INVALID_ARGUMENT - if called with an negative-valued argument.</li>
</ul>

@since 3.7
------------
Sets the receiver's image to the argument, which may be
null indicating that no image should be displayed.
<p>
Note: This operation is a <em>HINT</em> and is not supported on
platforms that do not have this concept (for example, Windows NT).
Furthermore, some platforms (such as GTK2), cannot display both
a check box and an image at the same time.  Instead, they hide
the image and display the check box. Some platforms (such as GTK3)
support images alongside check boxes.
</p>

@param image the image to display on the receiver (may be null)

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the receiver's pull down menu to the argument.
Only <code>CASCADE</code> menu items can have a
pull down menu. The sequence of key strokes, button presses
and/or button releases that are used to request a pull down
menu is platform specific.
<p>
Note: Disposing of a menu item that has a pull down menu
will dispose of the menu.  To avoid this behavior, set the
menu to null before the menu item is disposed.
</p>

@param menu the new pull down menu

@exception IllegalArgumentException <ul>
<li>ERROR_MENU_NOT_DROP_DOWN - if the menu is not a drop down menu</li>
<li>ERROR_MENUITEM_NOT_CASCADE - if the menu item is not a <code>CASCADE</code></li>
<li>ERROR_INVALID_ARGUMENT - if the menu has been disposed</li>
<li>ERROR_INVALID_PARENT - if the menu is not in the same widget tree</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the selection state of the receiver.
<p>
When the receiver is of type <code>CHECK</code> or <code>RADIO</code>,
it is selected when it is checked.

@param selected the new selection state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the receiver's text. The string may include
the mnemonic character and accelerator text.
<p>
Mnemonics are indicated by an '&amp;' that causes the next
character to be the mnemonic.  When the user presses a
key sequence that matches the mnemonic, a selection
event occurs. On most platforms, the mnemonic appears
underlined but may be emphasised in a platform specific
manner.  The mnemonic indicator character '&amp;' can be
escaped by doubling it in the string, causing a single
'&amp;' to be displayed.
</p>
<p>
Accelerator text is indicated by the '\t' character.
On platforms that support accelerator text, the text
that follows the '\t' character is displayed to the user,
typically indicating the key stroke that will cause
the item to become selected.  On most platforms, the
accelerator text appears right aligned in the menu.
Setting the accelerator text does not install the
accelerator key sequence. The accelerator key sequence
is installed using #setAccelerator.
</p>

@param string the new text

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the text is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #setAccelerator
------------
Sets the receiver's tool tip text to the argument, which
may be null indicating that the default tool tip for the
control will be shown. For a menu item that has a default
tool tip, setting
the tool tip text to an empty string replaces the default,
causing no tool tip text to be shown.
<p>
The mnemonic indicator (character '&amp;') is not displayed in a tool tip.
To display a single '&amp;' in the tool tip, the character '&amp;' can be
escaped by doubling it in the string.
</p>
<p>
NOTE: Tooltips are currently not shown for top-level menu items in the
{@link Shell#setMenuBar(Menu) shell menubar} on Windows, Mac, and Ubuntu Unity desktop.
</p>
@param toolTip the new tool tip text (or null)

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.104

====== MenuListener.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Classes which implement this interface provide methods
that deal with the hiding and showing of menus.
<p>
After creating an instance of a class that implements
this interface it can be added to a menu using the
<code>addMenuListener</code> method and removed using
the <code>removeMenuListener</code> method. When the
menu is hidden or shown, the appropriate method will
be invoked.
</p>

@see MenuAdapter
@see MenuEvent
------------
Sent when a menu is hidden.

@param e an event containing information about the menu operation
------------
Sent when a menu is shown.

@param e an event containing information about the menu operation

====== MessageBox.java ======
Copyright (c) 2000, 2015 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class are used to inform or warn the user.
<dl>
<dt><b>Styles:</b></dt>
<dd>ICON_ERROR, ICON_INFORMATION, ICON_QUESTION, ICON_WARNING, ICON_WORKING</dd>
<dd>OK, OK | CANCEL</dd>
<dd>YES | NO, YES | NO | CANCEL</dd>
<dd>RETRY | CANCEL</dd>
<dd>ABORT | RETRY | IGNORE</dd>
<dt><b>Events:</b></dt>
<dd>(none)</dd>
</dl>
<p>
Note: Only one of the styles ICON_ERROR, ICON_INFORMATION, ICON_QUESTION,
ICON_WARNING and ICON_WORKING may be specified.
</p><p>
IMPORTANT: This class is <em>not</em> intended to be subclassed.
</p>

@see <a href="http://www.eclipse.org/swt/examples.php">SWT Example: ControlExample, Dialog tab</a>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
@noextend This class is not intended to be subclassed by clients.
------------
Constructs a new instance of this class given only its parent.

@param parent a shell which will be the parent of the new instance

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>
------------
Constructs a new instance of this class given its parent
and a style value describing its behavior and appearance.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.

@param parent a shell which will be the parent of the new instance
@param style the style of dialog to construct

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see SWT#ICON_ERROR
@see SWT#ICON_INFORMATION
@see SWT#ICON_QUESTION
@see SWT#ICON_WARNING
@see SWT#ICON_WORKING
@see SWT#OK
@see SWT#CANCEL
@see SWT#YES
@see SWT#NO
@see SWT#ABORT
@see SWT#RETRY
@see SWT#IGNORE
------------
Returns the dialog's message, or an empty string if it does not have one.
The message is a description of the purpose for which the dialog was opened.
This message will be visible in the dialog while it is open.

@return the message
------------
Makes the dialog visible and brings it to the front
of the display.

@return the ID of the button that was selected to dismiss the
message box (e.g. SWT.OK, SWT.CANCEL, etc.)

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the dialog has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the dialog</li>
</ul>
------------
Sets the dialog's message, which is a description of
the purpose for which it was opened. This message will be
visible on the dialog while it is open.

@param string the message

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the string is null</li>
</ul>

====== ModifyEvent.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class are sent as a result of
text being modified.

@see ModifyListener
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
------------
Constructs a new instance of this class based on the
information in the given untyped event.

@param e the untyped event containing the information

====== ModifyListener.java ======
Copyright (c) 2000, 2016 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
Lars Vogel <Lars.Vogel@vogella.com> - Bug 502576
------------
Classes which implement this interface provide a method
that deals with the events that are generated when text
is modified.
<p>
After creating an instance of a class that implements
this interface it can be added to a text widget using the
<code>addModifyListener</code> method and removed using
the <code>removeModifyListener</code> method. When the
text is modified, the modifyText method will be invoked.
</p>

@see ModifyEvent
------------
Sent when the text is modified.

@param e an event containing information about the modify

====== Monitor.java ======
Copyright (c) 2000, 2016 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class are descriptions of monitors.

@see Display
@see <a href="http://www.eclipse.org/swt/snippets/#monitor">Monitor snippets</a>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>

@since 3.0
------------
Prevents uninitialized instances from being created outside the package.
------------
Compares the argument to the receiver, and returns true
if they represent the <em>same</em> object using a class
specific comparison.

@param object the object to compare with this object
@return <code>true</code> if the object is the same as this object and <code>false</code> otherwise

@see #hashCode()
------------
Returns a rectangle describing the receiver's size and location
relative to its device. Note that on multi-monitor systems the
origin can be negative.

@return the receiver's bounding rectangle
------------
Returns a rectangle which describes the area of the
receiver which is capable of displaying data.

@return the client area
------------
Returns an integer hash code for the receiver. Any two
objects that return <code>true</code> when passed to
<code>equals</code> must return the same value for this
method.

@return the receiver's hash

@see #equals(Object)

====== MouseAdapter.java ======
Copyright (c) 2000, 2016 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
This adapter class provides default implementations for the
methods described by the <code>MouseListener</code> interface.
<p>
Classes that wish to deal with <code>MouseEvent</code>s
which occur as mouse buttons are pressed and released can
extend this class and override only the methods which they are
interested in.
</p>

@see MouseListener
@see MouseEvent
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
------------
Sent when a mouse button is pressed twice within the
(operating system specified) double click period.
The default behavior is to do nothing.

@param e an event containing information about the mouse double click

@see org.eclipse.swt.widgets.Display#getDoubleClickTime()
------------
Sent when a mouse button is pressed.
The default behavior is to do nothing.

@param e an event containing information about the mouse button press
------------
Sent when a mouse button is released.
The default behavior is to do nothing.

@param e an event containing information about the mouse button release

====== MouseEvent.java ======
Copyright (c) 2000, 2012 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class are sent whenever mouse
related actions occur. This includes mouse buttons
being pressed and released, the mouse pointer being
moved and the mouse pointer crossing widget boundaries.
<p>
Note: The <code>button</code> field is an integer that
represents the mouse button number.  This is not the same
as the <code>SWT</code> mask constants <code>BUTTONx</code>.
</p>

@see MouseListener
@see MouseMoveListener
@see MouseTrackListener
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
------------
the button that was pressed or released;
<ul>
<li>1 for the first button (usually 'left')</li>
<li>2 for the second button (usually 'middle')</li>
<li>3 for the third button (usually 'right')</li>
<li>etc.</li>

public int button;


the state of the keyboard modifier keys and mouse masks
at the time the event was generated.
*
@see org.eclipse.swt.SWT#MODIFIER_MASK
@see org.eclipse.swt.SWT#BUTTON_MASK

public int stateMask;


the widget-relative, x coordinate of the pointer
at the time the mouse button was pressed or released

public int x;


the widget-relative, y coordinate of the pointer
at the time the mouse button was pressed or released

public int y;


the number times the mouse has been clicked, as defined
by the operating system; 1 for the first click, 2 for the
second click and so on.
*
@since 3.3

public int count;

static final long serialVersionUID = 3257288037011566898L;


Constructs a new instance of this class based on the
information in the given untyped event.

@param e the untyped event containing the information
------------
Returns a string containing a concise, human-readable
description of the receiver.

@return a string representation of the event

====== MouseListener.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Classes which implement this interface provide methods
that deal with the events that are generated as mouse buttons
are pressed.
<p>
After creating an instance of a class that implements
this interface it can be added to a control using the
<code>addMouseListener</code> method and removed using
the <code>removeMouseListener</code> method. When a
mouse button is pressed or released, the appropriate method
will be invoked.
</p>

@see MouseAdapter
@see MouseEvent
------------
Sent when a mouse button is pressed twice within the
(operating system specified) double click period.

@param e an event containing information about the mouse double click

@see org.eclipse.swt.widgets.Display#getDoubleClickTime()
------------
Sent when a mouse button is pressed.

@param e an event containing information about the mouse button press
------------
Sent when a mouse button is released.

@param e an event containing information about the mouse button release

====== MouseMoveListener.java ======
Copyright (c) 2000, 2016 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
Lars Vogel <Lars.Vogel@vogella.com> - Bug 502576
------------
Classes which implement this interface provide a method
that deals with the events that are generated as the mouse
pointer moves.
<p>
After creating an instance of a class that implements
this interface it can be added to a control using the
<code>addMouseMoveListener</code> method and removed using
the <code>removeMouseMoveListener</code> method. As the
mouse moves, the mouseMove method will be invoked.
</p>

@see MouseEvent
------------
Sent when the mouse moves.

@param e an event containing information about the mouse move

====== MouseTrackAdapter.java ======
Copyright (c) 2000, 2016 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
This adapter class provides default implementations for the
methods described by the <code>MouseTrackListener</code> interface.
<p>
Classes that wish to deal with <code>MouseEvent</code>s which
occur as the mouse pointer passes (or hovers) over controls can
extend this class and override only the methods which they are
interested in.
</p>

@see MouseTrackListener
@see MouseEvent
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
------------
Sent when the mouse pointer passes into the area of
the screen covered by a control.
The default behavior is to do nothing.

@param e an event containing information about the mouse enter
------------
Sent when the mouse pointer passes out of the area of
the screen covered by a control.
The default behavior is to do nothing.

@param e an event containing information about the mouse exit
------------
Sent when the mouse pointer hovers (that is, stops moving
for an (operating system specified) period of time) over
a control.
The default behavior is to do nothing.

@param e an event containing information about the hover

====== MouseTrackListener.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Classes which implement this interface provide methods
that deal with the events that are generated as the mouse
pointer passes (or hovers) over controls.
<p>
After creating an instance of a class that implements
this interface it can be added to a control using the
<code>addMouseTrackListener</code> method and removed using
the <code>removeMouseTrackListener</code> method. When the
mouse pointer passes into or out of the area of the screen
covered by a control or pauses while over a control, the
appropriate method will be invoked.
</p>

@see MouseTrackAdapter
@see MouseEvent
------------
Sent when the mouse pointer passes into the area of
the screen covered by a control.

@param e an event containing information about the mouse enter
------------
Sent when the mouse pointer passes out of the area of
the screen covered by a control.

@param e an event containing information about the mouse exit
------------
Sent when the mouse pointer hovers (that is, stops moving
for an (operating system specified) period of time) over
a control.

@param e an event containing information about the hover

====== MouseWheelListener.java ======
Copyright (c) 2000, 2007 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Classes which implement this interface provide a method
that deals with the event that is generated as the mouse
wheel is scrolled.
<p>
After creating an instance of a class that implements
this interface it can be added to a control using the
<code>addMouseWheelListener</code> method and removed using
the <code>removeMouseWheelListener</code> method. When the
mouse wheel is scrolled the <code>mouseScrolled</code> method
will be invoked.
</p>

@see MouseEvent

@since 3.3
------------
Sent when the mouse wheel is scrolled.

@param e an event containing information about the mouse wheel action

====== OS2BMPFileFormat.java ======
Copyright (c) 2000, 2008 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Answer a byte array containing the BMP representation of
the given device independent palette.
------------
Unload the given image's data into the given byte stream.
Answer the number of bytes written.
------------
Unload a DeviceIndependentImage using Windows .BMP format into the given
byte stream.

====== PaintEvent.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class are sent as a result of
visible areas of controls requiring re-painting.

@see PaintListener
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
------------
the graphics context to use when painting
that is configured to use the colors, font and
damaged region of the control.  It is valid
only during the paint and must not be disposed

public GC gc;


the x offset of the bounding rectangle of the
region that requires painting

public int x;


the y offset of the bounding rectangle of the
region that requires painting

public int y;


the width of the bounding rectangle of the
region that requires painting

public int width;


the height of the bounding rectangle of the
region that requires painting

public int height;


the number of following paint events which
are pending which may always be zero on
some platforms

public int count;

static final long serialVersionUID = 3256446919205992497L;


Constructs a new instance of this class based on the
information in the given untyped event.

@param e the untyped event containing the information
------------
Returns a string containing a concise, human-readable
description of the receiver.

@return a string representation of the event

====== PaintListener.java ======
Copyright (c) 2000, 2016 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
Lars Vogel <Lars.Vogel@vogella.com> - Bug 502576
------------
Classes which implement this interface provide methods
that deal with the events that are generated when the
control needs to be painted.
<p>
After creating an instance of a class that implements
this interface it can be added to a control using the
<code>addPaintListener</code> method and removed using
the <code>removePaintListener</code> method. When a
paint event occurs, the paintControl method will be
invoked.
</p>

@see PaintEvent
------------
Sent when a paint event occurs for the control.

@param e an event containing information about the paint

====== PaletteData.java ======
Copyright (c) 2000, 2015 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
Lars Vogel <Lars.Vogel@vogella.com> - Bug 483460
------------
Instances of this class describe the color data used by an image.
<p>
Depending on the depth of the image, the PaletteData can take one
of two forms, indicated by the isDirect field:
</p>
<dl>
<dt>
<em>isDirect is false</em>
</dt>
<dd>
If isDirect is <code>false</code>, this palette is an indexed
palette which maps pixel values to RGBs. The actual RGB values
may be retrieved by using the getRGBs() method.
</dd>
<dt>
<em>isDirect is true</em>
</dt>
<dd>
If isDirect is <code>true</code>, this palette is a direct color
palette. Instead of containing RGB values, it contains red,
green and blue mask and shift information which indicates how
the color components may be extracted from a given pixel.
This means that the RGB value is actually encoded in the pixel value.
<p>
In this case, the shift data is the number of bits required to shift
the RGB value to the left in order to align the high bit of the
corresponding mask with the high bit of the first byte. This number
may be negative, so care must be taken when shifting. For example,
with a red mask of 0xFF0000, the red shift would be -16. With a red
mask of 0x1F, the red shift would be 3.
</p>
</dd>
</dl>

@see Image
@see RGB
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
------------
true if the receiver is a direct palette,
and false otherwise

public boolean isDirect;


the RGB values for an indexed palette, where the
indices of the array correspond to pixel values

public RGB[] colors;


the red mask for a direct palette

public int redMask;


the green mask for a direct palette

public int greenMask;


the blue mask for a direct palette

public int blueMask;


the red shift for a direct palette

public int redShift;


the green shift for a direct palette

public int greenShift;


the blue shift for a direct palette

public int blueShift;


Constructs a new indexed palette given an array of RGB values.

@param colors the array of <code>RGB</code>s for the palette

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the argument is null</li>
</ul>
------------
Constructs a new direct palette given the red, green and blue masks.

@param redMask the red mask
@param greenMask the green mask
@param blueMask the blue mask
------------
Returns the pixel value corresponding to the given <code>RGB</code>.

@param rgb the RGB to get the pixel value for
@return the pixel value for the given RGB

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the argument is null</li>
<li>ERROR_INVALID_ARGUMENT - if the RGB is not found in the palette</li>
</ul>
------------
Returns an <code>RGB</code> corresponding to the given pixel value.

@param pixel the pixel to get the RGB value for
@return the RGB value for the given pixel

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the argument is null</li>
<li>ERROR_INVALID_ARGUMENT - if the pixel does not exist in the palette</li>
</ul>
------------
Returns all the RGB values in the receiver if it is an
indexed palette, or null if it is a direct palette.

@return the <code>RGB</code>s for the receiver or null
------------
Computes the shift value for a given mask.

@param mask the mask to compute the shift for
@return the shift amount

@see PaletteData

====== Path.java ======
Copyright (c) 2000, 2016 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class represent paths through the two-dimensional
coordinate system. Paths do not have to be continuous, and can be
described using lines, rectangles, arcs, cubic or quadratic bezier curves,
glyphs, or other paths.
<p>
Application code must explicitly invoke the <code>Path.dispose()</code>
method to release the operating system resources managed by each instance
when those instances are no longer required.
</p>
<p>
This class requires the operating system's advanced graphics subsystem
which may not be available on some platforms.
</p>

@see <a href="http://www.eclipse.org/swt/snippets/#path">Path, Pattern snippets</a>
@see <a href="http://www.eclipse.org/swt/examples.php">SWT Example: GraphicsExample</a>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>

@since 3.1
------------
the OS resource for the Path
(Warning: This field is platform dependent)
<p>
<b>IMPORTANT:</b> This field is <em>not</em> part of the SWT
public API. It is marked public only so that it can be shared
within the packages provided by SWT. It is not available on all
platforms and should never be accessed from application code.
</p>
*
@noreference This field is not intended to be referenced by clients.

public long /*int*/ handle;

PointF currentPoint = new PointF(), startPoint = new PointF();


Constructs a new empty Path.
<p>
This operation requires the operating system's advanced
graphics subsystem which may not be available on some
platforms.
</p>
<p>
You must dispose the path when it is no longer required.
</p>

@param device the device on which to allocate the path

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the device is null and there is no current device</li>
</ul>
@exception SWTException <ul>
<li>ERROR_NO_GRAPHICS_LIBRARY - if advanced graphics are not available</li>
</ul>
@exception SWTError <ul>
<li>ERROR_NO_HANDLES if a handle for the path could not be obtained</li>
</ul>

@see #dispose()
------------
Constructs a new Path that is a copy of <code>path</code>. If
<code>flatness</code> is less than or equal to zero, an unflatten
copy of the path is created. Otherwise, it specifies the maximum
error between the path and its flatten copy. Smaller numbers give
better approximation.
<p>
This operation requires the operating system's advanced
graphics subsystem which may not be available on some
platforms.
</p>
<p>
You must dispose the path when it is no longer required.
</p>

@param device the device on which to allocate the path
@param path the path to make a copy
@param flatness the flatness value

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the device is null and there is no current device</li>
<li>ERROR_NULL_ARGUMENT - if the path is null</li>
<li>ERROR_INVALID_ARGUMENT - if the path has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_NO_GRAPHICS_LIBRARY - if advanced graphics are not available</li>
</ul>
@exception SWTError <ul>
<li>ERROR_NO_HANDLES if a handle for the path could not be obtained</li>
</ul>

@see #dispose()
@since 3.4
------------
Constructs a new Path with the specified PathData.
<p>
This operation requires the operating system's advanced
graphics subsystem which may not be available on some
platforms.
</p>
<p>
You must dispose the path when it is no longer required.
</p>

@param device the device on which to allocate the path
@param data the data for the path

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the device is null and there is no current device</li>
<li>ERROR_NULL_ARGUMENT - if the data is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_NO_GRAPHICS_LIBRARY - if advanced graphics are not available</li>
</ul>
@exception SWTError <ul>
<li>ERROR_NO_HANDLES if a handle for the path could not be obtained</li>
</ul>

@see #dispose()
@since 3.4
------------
Adds to the receiver a circular or elliptical arc that lies within
the specified rectangular area.
<p>
The resulting arc begins at <code>startAngle</code> and extends
for <code>arcAngle</code> degrees.
Angles are interpreted such that 0 degrees is at the 3 o'clock
position. A positive value indicates a counter-clockwise rotation
while a negative value indicates a clockwise rotation.
</p><p>
The center of the arc is the center of the rectangle whose origin
is (<code>x</code>, <code>y</code>) and whose size is specified by the
<code>width</code> and <code>height</code> arguments.
</p><p>
The resulting arc covers an area <code>width + 1</code> pixels wide
by <code>height + 1</code> pixels tall.
</p>

@param x the x coordinate of the upper-left corner of the arc
@param y the y coordinate of the upper-left corner of the arc
@param width the width of the arc
@param height the height of the arc
@param startAngle the beginning angle
@param arcAngle the angular extent of the arc, relative to the start angle

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Adds to the receiver the path described by the parameter.

@param path the path to add to the receiver

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parameter is null</li>
<li>ERROR_INVALID_ARGUMENT - if the parameter has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Adds to the receiver the rectangle specified by x, y, width and height.

@param x the x coordinate of the rectangle to add
@param y the y coordinate of the rectangle to add
@param width the width of the rectangle to add
@param height the height of the rectangle to add

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Adds to the receiver the pattern of glyphs generated by drawing
the given string using the given font starting at the point (x, y).

@param string the text to use
@param x the x coordinate of the starting point
@param y the y coordinate of the starting point
@param font the font to use

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the font is null</li>
<li>ERROR_INVALID_ARGUMENT - if the font has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Closes the current sub path by adding to the receiver a line
from the current point of the path back to the starting point
of the sub path.

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Returns <code>true</code> if the specified point is contained by
the receiver and false otherwise.
<p>
If outline is <code>true</code>, the point (x, y) checked for containment in
the receiver's outline. If outline is <code>false</code>, the point is
checked to see if it is contained within the bounds of the (closed) area
covered by the receiver.

@param x the x coordinate of the point to test for containment
@param y the y coordinate of the point to test for containment
@param gc the GC to use when testing for containment
@param outline controls whether to check the outline or contained area of the path
@return <code>true</code> if the path contains the point and <code>false</code> otherwise

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the gc is null</li>
<li>ERROR_INVALID_ARGUMENT - if the gc has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Adds to the receiver a cubic bezier curve based on the parameters.

@param cx1 the x coordinate of the first control point of the spline
@param cy1 the y coordinate of the first control of the spline
@param cx2 the x coordinate of the second control of the spline
@param cy2 the y coordinate of the second control of the spline
@param x the x coordinate of the end point of the spline
@param y the y coordinate of the end point of the spline

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Replaces the first four elements in the parameter with values that
describe the smallest rectangle that will completely contain the
receiver (i.e. the bounding box).

@param bounds the array to hold the result

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parameter is null</li>
<li>ERROR_INVALID_ARGUMENT - if the parameter is too small to hold the bounding box</li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Replaces the first two elements in the parameter with values that
describe the current point of the path.

@param point the array to hold the result

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parameter is null</li>
<li>ERROR_INVALID_ARGUMENT - if the parameter is too small to hold the end point</li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Returns a device independent representation of the receiver.

@return the PathData for the receiver

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@see PathData
------------
Adds to the receiver a line from the current point to
the point specified by (x, y).

@param x the x coordinate of the end of the line to add
@param y the y coordinate of the end of the line to add

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Returns <code>true</code> if the Path has been disposed,
and <code>false</code> otherwise.
<p>
This method gets the dispose state for the Path.
When a Path has been disposed, it is an error to
invoke any other method (except {@link #dispose()}) using the Path.

@return <code>true</code> when the Path is disposed, and <code>false</code> otherwise
------------
Sets the current point of the receiver to the point
specified by (x, y). Note that this starts a new
sub path.

@param x the x coordinate of the new end point
@param y the y coordinate of the new end point

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Adds to the receiver a quadratic curve based on the parameters.

@param cx the x coordinate of the control point of the spline
@param cy the y coordinate of the control point of the spline
@param x the x coordinate of the end point of the spline
@param y the y coordinate of the end point of the spline

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Returns a string containing a concise, human-readable
description of the receiver.

@return a string representation of the receiver

====== PathData.java ======
Copyright (c) 2000, 2008 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class describe device-independent paths.

@see Path
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>

@since 3.1

====== Pattern.java ======
Copyright (c) 2000, 2016 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class represent patterns to use while drawing. Patterns
can be specified either as bitmaps or gradients.
<p>
Application code must explicitly invoke the <code>Pattern.dispose()</code>
method to release the operating system resources managed by each instance
when those instances are no longer required.
</p>
<p>
This class requires the operating system's advanced graphics subsystem
which may not be available on some platforms.
</p>

@see <a href="http://www.eclipse.org/swt/snippets/#path">Path, Pattern snippets</a>
@see <a href="http://www.eclipse.org/swt/examples.php">SWT Example: GraphicsExample</a>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>

@since 3.1
------------
the OS resource for the Pattern
(Warning: This field is platform dependent)
<p>
<b>IMPORTANT:</b> This field is <em>not</em> part of the SWT
public API. It is marked public only so that it can be shared
within the packages provided by SWT. It is not available on all
platforms and should never be accessed from application code.
</p>
*
@noreference This field is not intended to be referenced by clients.

public long /*int*/ handle;


Constructs a new Pattern given an image. Drawing with the resulting
pattern will cause the image to be tiled over the resulting area.
<p>
This operation requires the operating system's advanced
graphics subsystem which may not be available on some
platforms.
</p>
<p>
You must dispose the pattern when it is no longer required.
</p>

@param device the device on which to allocate the pattern
@param image the image that the pattern will draw

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the device is null and there is no current device, or the image is null</li>
<li>ERROR_INVALID_ARGUMENT - if the image has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_NO_GRAPHICS_LIBRARY - if advanced graphics are not available</li>
</ul>
@exception SWTError <ul>
<li>ERROR_NO_HANDLES if a handle for the pattern could not be obtained</li>
</ul>

@see #dispose()
------------
Constructs a new Pattern that represents a linear, two color
gradient. Drawing with the pattern will cause the resulting area to be
tiled with the gradient specified by the arguments.
<p>
This operation requires the operating system's advanced
graphics subsystem which may not be available on some
platforms.
</p>
<p>
You must dispose the pattern when it is no longer required.
</p>

@param device the device on which to allocate the pattern
@param x1 the x coordinate of the starting corner of the gradient
@param y1 the y coordinate of the starting corner of the gradient
@param x2 the x coordinate of the ending corner of the gradient
@param y2 the y coordinate of the ending corner of the gradient
@param color1 the starting color of the gradient
@param color2 the ending color of the gradient

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the device is null and there is no current device,
or if either color1 or color2 is null</li>
<li>ERROR_INVALID_ARGUMENT - if either color1 or color2 has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_NO_GRAPHICS_LIBRARY - if advanced graphics are not available</li>
</ul>
@exception SWTError <ul>
<li>ERROR_NO_HANDLES if a handle for the pattern could not be obtained</li>
</ul>

@see #dispose()
------------
Constructs a new Pattern that represents a linear, two color
gradient. Drawing with the pattern will cause the resulting area to be
tiled with the gradient specified by the arguments.
<p>
This operation requires the operating system's advanced
graphics subsystem which may not be available on some
platforms.
</p>
<p>
You must dispose the pattern when it is no longer required.
</p>

@param device the device on which to allocate the pattern
@param x1 the x coordinate of the starting corner of the gradient
@param y1 the y coordinate of the starting corner of the gradient
@param x2 the x coordinate of the ending corner of the gradient
@param y2 the y coordinate of the ending corner of the gradient
@param color1 the starting color of the gradient
@param alpha1 the starting alpha value of the gradient
@param color2 the ending color of the gradient
@param alpha2 the ending alpha value of the gradient

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the device is null and there is no current device,
or if either color1 or color2 is null</li>
<li>ERROR_INVALID_ARGUMENT - if either color1 or color2 has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_NO_GRAPHICS_LIBRARY - if advanced graphics are not available</li>
</ul>
@exception SWTError <ul>
<li>ERROR_NO_HANDLES if a handle for the pattern could not be obtained</li>
</ul>

@see #dispose()

@since 3.2
------------
Returns <code>true</code> if the Pattern has been disposed,
and <code>false</code> otherwise.
<p>
This method gets the dispose state for the Pattern.
When a Pattern has been disposed, it is an error to
invoke any other method (except {@link #dispose()}) using the Pattern.

@return <code>true</code> when the Pattern is disposed, and <code>false</code> otherwise
------------
Returns a string containing a concise, human-readable
description of the receiver.

@return a string representation of the receiver

====== PngChunk.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Construct a PngChunk using the reference bytes
given.
------------
Construct a PngChunk with the specified number of
data bytes.
------------
Get the PngChunk's reference byteArray;
------------
Set the PngChunk's reference byteArray;
------------
Get the 16-bit integer from the reference byte
array at the given offset.
------------
Set the 16-bit integer in the reference byte
array at the given offset.
------------
Get the 32-bit integer from the reference byte
array at the given offset.
------------
Set the 32-bit integer in the reference byte
array at the given offset.
------------
Get the length of the data component of this chunk.
This is not the length of the entire chunk.
------------
Set the length of the data component of this chunk.
This is not the length of the entire chunk.
------------
Get the chunk type. This is a four byte value.
Each byte should be an ASCII character.
The first byte is upper case if the chunk is critical.
The second byte is upper case if the chunk is publicly defined.
The third byte must be upper case.
The fourth byte is upper case if the chunk is unsafe to copy.
Public chunk types are defined by the PNG Development Group.
------------
Set the chunk type. This is a four byte value.
Each byte should be an ASCII character.
The first byte is upper case if the chunk is critical.
The second byte is upper case if the chunk is publicly defined.
The third byte must be upper case.
The fourth byte is upper case if the chunk is unsafe to copy.
Public chunk types are defined by the PNG Development Group.
------------
Get the chunk's data.
------------
Set the chunk's data.
This method has two side-effects.
1. It will set the length field to be the length
of the data array given.
2. It will set the CRC field to the computed CRC
value of the data array given.
------------
Get the CRC value for the chunk's data.
Ensure that the length field has a good
value before making this call.
------------
Set the CRC value for the chunk's data.
Ensure that the length field has a good
value before making this call.
------------
Get the chunk's total size including the length, type, and crc fields.
------------
Compute the CRC value for the chunk's data. Answer
whether this value matches the value stored in the
chunk.
------------
Answer the CRC value of chunk's data.
------------
Read the next PNG chunk from the input stream given.
If unable to read a chunk, return null.
------------
Answer whether the chunk is a valid PNG chunk.
------------
Provided so that subclasses can override and add
data to the toString() call.
------------
Returns a string containing a concise, human-readable
description of the receiver.

@return a string representation of the event

====== PngChunkReader.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation

====== PngDecodingDataStream.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
This method should be called when the image decoder thinks
that all of the compressed image data has been read. This
method will ensure that the next data value is an end of
block marker. If there are more blocks after this one,
the method will read them and ensure that they are empty.

====== PngDeflater.java ======
Copyright (c) 2000, 2008 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation

====== PngEncoder.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation

====== PNGFileFormat.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Skip over signature data. This has already been
verified in isFileFormat().
------------
Load the PNG image from the byte stream.
------------
Read and handle the next chunk of data from the
PNG file.
------------
SWT does not support 16-bit depths. If this image uses
16-bit depths, convert the data to an 8-bit depth.
------------
SWT does not support greyscale as a color type. For
plain grayscale, we create a palette. For Grayscale
with Alpha, however, we need to convert the pixels
to use RGB values.
Note: This method assumes that the bit depth of the
data has already been restricted to 8 or less.
------------
PNG supports some color types and bit depths that are
unsupported by SWT. If the image uses an unsupported
color type (either of the gray scale types) or bit
depth (16), convert the data to an SWT-supported
format. Then assign the data into the ImageData given.
------------
Read the image data from the data stream. This must handle
decoding the data, filtering, and interlacing.
------------
Answer the number of bytes in a word-aligned row of pixel data.
------------
Answer the number of bytes in each row of the image
data. Each PNG row is byte-aligned, so images with bit
depths less than a byte may have unused bits at the
end of each row. The value of these bits is undefined.
------------
Answer the number of bytes needed to represent a pixel.
This value depends on the image's color type and bit
depth.
Note that this method rounds up if an image's pixel size
isn't byte-aligned.
------------
Answer the number of bytes in a row of the given pixel
width. Each row is byte-aligned, so images with bit
depths less than a byte may have unused bits at the
end of each row. The value of these bits is undefined.
------------
1. Read one of the seven frames of interlaced data.
2. Update the imageData.
3. Notify the image loader's listeners of the frame load.
------------
Read the pixel data for an interlaced image from the
data stream.
------------
Fire an event to let listeners know that an interlaced
frame has been loaded.
finalFrame should be true if the image has finished
loading, false if there are more frames to come.
------------
Read the pixel data for a non-interlaced image from the
data stream.
Update the imageData to reflect the new data.
------------
SWT does not support 16-bit depth color formats.
Convert the 16-bit data to 8-bit data.
The correct way to do this is to multiply each
16 bit value by the value:
(2^8 - 1) / (2^16 - 1).
The fast way to do this is just to drop the low
byte of the 16-bit value.
------------
SWT does not support 16-bit depth color formats.
Convert the 16-bit data to 8-bit data.
The correct way to do this is to multiply each
16 bit value by the value:
(2^8 - 1) / (2^16 - 1).
The fast way to do this is just to drop the low
byte of the 16-bit value.
------------
PNG supports four filtering types. These types are applied
per row of image data. This method unfilters the given row
based on the filterType.

====== PngFileReadState.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation

====== PngHuffmanTable.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation

====== PngHuffmanTables.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation

====== PngIdatChunk.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Answer whether the chunk is a valid IDAT chunk.

====== PngIendChunk.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Answer whether the chunk is a valid IEND chunk.

====== PngIhdrChunk.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Construct a PNGChunk using the reference bytes
given.
------------
Get the image's width in pixels.
------------
Set the image's width in pixels.
------------
Get the image's height in pixels.
------------
Set the image's height in pixels.
------------
Get the image's bit depth.
This is limited to the values 1, 2, 4, 8, or 16.
------------
Set the image's bit depth.
This is limited to the values 1, 2, 4, 8, or 16.
------------
Get the image's color type.
This is limited to the values:
0 - Grayscale image.
2 - RGB triple.
3 - Palette.
4 - Grayscale with Alpha channel.
6 - RGB with Alpha channel.
------------
Set the image's color type.
This is limited to the values:
0 - Grayscale image.
2 - RGB triple.
3 - Palette.
4 - Grayscale with Alpha channel.
6 - RGB with Alpha channel.
------------
Get the image's compression method.
This value must be 0.
------------
Set the image's compression method.
This value must be 0.
------------
Get the image's filter method.
This value must be 0.
------------
Set the image's filter method.
This value must be 0.
------------
Get the image's interlace method.
This value is limited to:
0 - No interlacing used.
1 - Adam7 interlacing used.
------------
Set the image's interlace method.
This value is limited to:
0 - No interlacing used.
1 - Adam7 interlacing used.
------------
Answer whether the chunk is a valid IHDR chunk.
------------
Answer the pixel size in bits based on the color type
and bit depth.
------------
Answer the pixel size in bits based on the color type
and bit depth.

====== PngInputStream.java ======
Copyright (c) 2000, 2006 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation

====== PngLzBlockReader.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation

====== PngPlteChunk.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Get the number of colors in this palette.
------------
Get a PaletteData object representing the colors
stored in this PLTE chunk.
The result should be cached as the PLTE chunk
does not store the palette data created.
------------
Set the data of a PLTE chunk to the colors
stored in the specified PaletteData object.
------------
Answer whether the chunk is a valid PLTE chunk.

====== PngTrnsChunk.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Answer whether the chunk is a valid tRNS chunk.
------------
Answer the transparent pixel RGB value.
This is not valid for palette color types.
This is not valid for alpha color types.
This will convert a grayscale value into
a palette index.
It will compress a 6 byte RGB into a 3 byte
RGB.
------------
Answer an array of Alpha values that correspond to the
colors in the palette.
This is only valid for the COLOR_TYPE_PALETTE color type.

====== Point.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class represent places on the (x, y)
coordinate plane.
<p>
The coordinate space for rectangles and points is considered
to have increasing values downward and to the right from its
origin making this the normal, computer graphics oriented notion
of (x, y) coordinates rather than the strict mathematical one.
</p>
<p>
The hashCode() method in this class uses the values of the public
fields to compute the hash value. When storing instances of the
class in hashed collections, do not modify these fields after the
object has been inserted.
</p>
<p>
Application code does <em>not</em> need to explicitly release the
resources managed by each instance when those instances are no longer
required, and thus no <code>dispose()</code> method is provided.
</p>

@see Rectangle
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
------------
the x coordinate of the point

public int x;


the y coordinate of the point

public int y;

static final long serialVersionUID = 3257002163938146354L;


Constructs a new point with the given x and y coordinates.

@param x the x coordinate of the new point
@param y the y coordinate of the new point
------------
Compares the argument to the receiver, and returns true
if they represent the <em>same</em> object using a class
specific comparison.

@param object the object to compare with this object
@return <code>true</code> if the object is the same as this object and <code>false</code> otherwise

@see #hashCode()
------------
Returns an integer hash code for the receiver. Any two
objects that return <code>true</code> when passed to
<code>equals</code> must return the same value for this
method.

@return the receiver's hash

@see #equals(Object)
------------
Returns a string containing a concise, human-readable
description of the receiver.

@return a string representation of the point

====== ProgressBar.java ======
Copyright (c) 2000, 2012 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of the receiver represent an unselectable
user interface object that is used to display progress,
typically in the form of a bar.
<dl>
<dt><b>Styles:</b></dt>
<dd>SMOOTH, HORIZONTAL, VERTICAL, INDETERMINATE</dd>
<dt><b>Events:</b></dt>
<dd>(none)</dd>
</dl>
<p>
Note: Only one of the styles HORIZONTAL and VERTICAL may be specified.
</p><p>
IMPORTANT: This class is <em>not</em> intended to be subclassed.
</p>

@see <a href="http://www.eclipse.org/swt/snippets/#progressbar">ProgressBar snippets</a>
@see <a href="http://www.eclipse.org/swt/examples.php">SWT Example: ControlExample</a>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
@noextend This class is not intended to be subclassed by clients.
------------
Constructs a new instance of this class given its parent
and a style value describing its behavior and appearance.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.
</p>

@param parent a composite control which will be the parent of the new instance (cannot be null)
@param style the style of control to construct

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see SWT#SMOOTH
@see SWT#HORIZONTAL
@see SWT#VERTICAL
@see SWT#INDETERMINATE
@see Widget#checkSubclass
@see Widget#getStyle
------------
Returns the maximum value which the receiver will allow.

@return the maximum

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the minimum value which the receiver will allow.

@return the minimum

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the single 'selection' that is the receiver's position.

@return the selection

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the state of the receiver. The value will be one of:
<ul>
<li>{@link SWT#NORMAL}</li>
<li>{@link SWT#ERROR}</li>
<li>{@link SWT#PAUSED}</li>
</ul>

@return the state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.4
------------
Sets the maximum value that the receiver will allow.  This new
value will be ignored if it is not greater than the receiver's current
minimum value.  If the new maximum is applied then the receiver's
selection value will be adjusted if necessary to fall within its new range.

@param value the new maximum, which must be greater than the current minimum

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the minimum value that the receiver will allow.  This new
value will be ignored if it is negative or is not less than the receiver's
current maximum value.  If the new minimum is applied then the receiver's
selection value will be adjusted if necessary to fall within its new range.

@param value the new minimum, which must be nonnegative and less than the current maximum

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the single 'selection' that is the receiver's
position to the argument which must be greater than or equal
to zero.

@param value the new selection (must be zero or greater)

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the state of the receiver. The state must be one of these values:
<ul>
<li>{@link SWT#NORMAL}</li>
<li>{@link SWT#ERROR}</li>
<li>{@link SWT#PAUSED}</li>
</ul>
<p>
Note: This operation is a hint and is not supported on
platforms that do not have this concept.
</p>

@param state the new state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.4

====== Rectangle.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class represent rectangular areas in an
(x, y) coordinate system. The top left corner of the rectangle
is specified by its x and y values, and the extent of the
rectangle is specified by its width and height.
<p>
The coordinate space for rectangles and points is considered
to have increasing values downward and to the right from its
origin making this the normal, computer graphics oriented notion
of (x, y) coordinates rather than the strict mathematical one.
</p>
<p>
The hashCode() method in this class uses the values of the public
fields to compute the hash value. When storing instances of the
class in hashed collections, do not modify these fields after the
object has been inserted.
</p>
<p>
Application code does <em>not</em> need to explicitly release the
resources managed by each instance when those instances are no longer
required, and thus no <code>dispose()</code> method is provided.
</p>

@see Point
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
------------
the x coordinate of the rectangle

public int x;


the y coordinate of the rectangle

public int y;


the width of the rectangle

public int width;


the height of the rectangle

public int height;

static final long serialVersionUID = 3256439218279428914L;


Construct a new instance of this class given the
x, y, width and height values.

@param x the x coordinate of the origin of the rectangle
@param y the y coordinate of the origin of the rectangle
@param width the width of the rectangle
@param height the height of the rectangle
------------
Destructively replaces the x, y, width and height values
in the receiver with ones which represent the union of the
rectangles specified by the receiver and the given rectangle.
<p>
The union of two rectangles is the smallest single rectangle
that completely covers both of the areas covered by the two
given rectangles.
</p>

@param rect the rectangle to merge with the receiver

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the argument is null</li>
</ul>
------------
Returns <code>true</code> if the point specified by the
arguments is inside the area specified by the receiver,
and <code>false</code> otherwise.

@param x the x coordinate of the point to test for containment
@param y the y coordinate of the point to test for containment
@return <code>true</code> if the rectangle contains the point and <code>false</code> otherwise
------------
Returns <code>true</code> if the given point is inside the
area specified by the receiver, and <code>false</code>
otherwise.

@param pt the point to test for containment
@return <code>true</code> if the rectangle contains the point and <code>false</code> otherwise

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the argument is null</li>
</ul>
------------
Compares the argument to the receiver, and returns true
if they represent the <em>same</em> object using a class
specific comparison.

@param object the object to compare with this object
@return <code>true</code> if the object is the same as this object and <code>false</code> otherwise

@see #hashCode()
------------
Returns an integer hash code for the receiver. Any two
objects that return <code>true</code> when passed to
<code>equals</code> must return the same value for this
method.

@return the receiver's hash

@see #equals(Object)
------------
Destructively replaces the x, y, width and height values
in the receiver with ones which represent the intersection of the
rectangles specified by the receiver and the given rectangle.

@param rect the rectangle to intersect with the receiver

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the argument is null</li>
</ul>

since 3.0
------------
Returns a new rectangle which represents the intersection
of the receiver and the given rectangle.
<p>
The intersection of two rectangles is the rectangle that
covers the area which is contained within both rectangles.
</p>

@param rect the rectangle to intersect with the receiver
@return the intersection of the receiver and the argument

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the argument is null</li>
</ul>
------------
Returns <code>true</code> if the rectangle described by the
arguments intersects with the receiver and <code>false</code>
otherwise.
<p>
Two rectangles intersect if the area of the rectangle
representing their intersection is not empty.
</p>

@param x the x coordinate of the origin of the rectangle
@param y the y coordinate of the origin of the rectangle
@param width the width of the rectangle
@param height the height of the rectangle
@return <code>true</code> if the rectangle intersects with the receiver, and <code>false</code> otherwise

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the argument is null</li>
</ul>

@see #intersection(Rectangle)
@see #isEmpty()

@since 3.0
------------
Returns <code>true</code> if the given rectangle intersects
with the receiver and <code>false</code> otherwise.
<p>
Two rectangles intersect if the area of the rectangle
representing their intersection is not empty.
</p>

@param rect the rectangle to test for intersection
@return <code>true</code> if the rectangle intersects with the receiver, and <code>false</code> otherwise

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the argument is null</li>
</ul>

@see #intersection(Rectangle)
@see #isEmpty()
------------
Returns <code>true</code> if the receiver does not cover any
area in the (x, y) coordinate plane, and <code>false</code> if
the receiver does cover some area in the plane.
<p>
A rectangle is considered to <em>cover area</em> in the
(x, y) coordinate plane if both its width and height are
non-zero.
</p>

@return <code>true</code> if the receiver is empty, and <code>false</code> otherwise
------------
Returns a string containing a concise, human-readable
description of the receiver.

@return a string representation of the rectangle
------------
Returns a new rectangle which represents the union of
the receiver and the given rectangle.
<p>
The union of two rectangles is the smallest single rectangle
that completely covers both of the areas covered by the two
given rectangles.
</p>

@param rect the rectangle to perform union with
@return the union of the receiver and the argument

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the argument is null</li>
</ul>

@see #add(Rectangle)

====== Region.java ======
Copyright (c) 2000, 2014 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class represent areas of an x-y coordinate
system that are aggregates of the areas covered by a number
of polygons.
<p>
Application code must explicitly invoke the <code>Region.dispose()</code>
method to release the operating system resources managed by each instance
when those instances are no longer required.
</p>

@see <a href="http://www.eclipse.org/swt/examples.php">SWT Example: GraphicsExample</a>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
------------
the OS resource for the region
(Warning: This field is platform dependent)
<p>
<b>IMPORTANT:</b> This field is <em>not</em> part of the SWT
public API. It is marked public only so that it can be shared
within the packages provided by SWT. It is not available on all
platforms and should never be accessed from application code.
</p>
*
@noreference This field is not intended to be referenced by clients.

public long /*int*/ handle;


Constructs a new empty region.
<p>
You must dispose the region when it is no longer required.
</p>

@exception SWTError <ul>
<li>ERROR_NO_HANDLES if a handle could not be obtained for region creation</li>
</ul>

@see #dispose()
------------
Constructs a new empty region.
<p>
You must dispose the region when it is no longer required.
</p>

@param device the device on which to allocate the region

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if device is null and there is no current device</li>
</ul>
@exception SWTError <ul>
<li>ERROR_NO_HANDLES if a handle could not be obtained for region creation</li>
</ul>

@see #dispose()

@since 3.0
------------
Constructs a new region given a handle to the operating
system resources that it should represent.

@param handle the handle for the result
------------
Adds the given polygon to the collection of polygons
the receiver maintains to describe its area.

@param pointArray points that describe the polygon to merge with the receiver

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the argument is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@since 3.0
------------
Adds the given rectangle to the collection of polygons
the receiver maintains to describe its area.

@param rect the rectangle to merge with the receiver

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the argument is null</li>
<li>ERROR_INVALID_ARGUMENT - if the rectangle's width or height is negative</li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Adds the given rectangle to the collection of polygons
the receiver maintains to describe its area.

@param x the x coordinate of the rectangle
@param y the y coordinate of the rectangle
@param width the width coordinate of the rectangle
@param height the height coordinate of the rectangle

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the rectangle's width or height is negative</li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@since 3.1
------------
Adds all of the polygons which make up the area covered
by the argument to the collection of polygons the receiver
maintains to describe its area.

@param region the region to merge

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the argument is null</li>
<li>ERROR_INVALID_ARGUMENT - if the argument has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Returns <code>true</code> if the point specified by the
arguments is inside the area specified by the receiver,
and <code>false</code> otherwise.

@param x the x coordinate of the point to test for containment
@param y the y coordinate of the point to test for containment
@return <code>true</code> if the region contains the point and <code>false</code> otherwise

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Returns <code>true</code> if the given point is inside the
area specified by the receiver, and <code>false</code>
otherwise.

@param pt the point to test for containment
@return <code>true</code> if the region contains the point and <code>false</code> otherwise

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the argument is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Compares the argument to the receiver, and returns true
if they represent the <em>same</em> object using a class
specific comparison.

@param object the object to compare with this object
@return <code>true</code> if the object is the same as this object and <code>false</code> otherwise

@see #hashCode
------------
Returns a rectangle which represents the rectangular
union of the collection of polygons the receiver
maintains to describe its area.

@return a bounding rectangle for the region

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@see Rectangle#union
------------
Returns an integer hash code for the receiver. Any two
objects that return <code>true</code> when passed to
<code>equals</code> must return the same value for this
method.

@return the receiver's hash

@see #equals
------------
Intersects the given rectangle to the collection of polygons
the receiver maintains to describe its area.

@param rect the rectangle to intersect with the receiver

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the argument is null</li>
<li>ERROR_INVALID_ARGUMENT - if the rectangle's width or height is negative</li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@since 3.0
------------
Intersects the given rectangle to the collection of polygons
the receiver maintains to describe its area.

@param x the x coordinate of the rectangle
@param y the y coordinate of the rectangle
@param width the width coordinate of the rectangle
@param height the height coordinate of the rectangle

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the rectangle's width or height is negative</li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@since 3.1
------------
Intersects all of the polygons which make up the area covered
by the argument to the collection of polygons the receiver
maintains to describe its area.

@param region the region to intersect

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the argument is null</li>
<li>ERROR_INVALID_ARGUMENT - if the argument has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@since 3.0
------------
Returns <code>true</code> if the rectangle described by the
arguments intersects with any of the polygons the receiver
maintains to describe its area, and <code>false</code> otherwise.

@param x the x coordinate of the origin of the rectangle
@param y the y coordinate of the origin of the rectangle
@param width the width of the rectangle
@param height the height of the rectangle
@return <code>true</code> if the rectangle intersects with the receiver, and <code>false</code> otherwise

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@see Rectangle#intersects(Rectangle)
------------
Returns <code>true</code> if the given rectangle intersects
with any of the polygons the receiver maintains to describe
its area and <code>false</code> otherwise.

@param rect the rectangle to test for intersection
@return <code>true</code> if the rectangle intersects with the receiver, and <code>false</code> otherwise

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the argument is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@see Rectangle#intersects(Rectangle)
------------
Returns <code>true</code> if the region has been disposed,
and <code>false</code> otherwise.
<p>
This method gets the dispose state for the region.
When a region has been disposed, it is an error to
invoke any other method (except {@link #dispose()}) using the region.

@return <code>true</code> when the region is disposed, and <code>false</code> otherwise
------------
Returns <code>true</code> if the receiver does not cover any
area in the (x, y) coordinate plane, and <code>false</code> if
the receiver does cover some area in the plane.

@return <code>true</code> if the receiver is empty, and <code>false</code> otherwise

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Subtracts the given polygon from the collection of polygons
the receiver maintains to describe its area.

@param pointArray points that describe the polygon to merge with the receiver

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the argument is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@since 3.0
------------
Subtracts the given rectangle from the collection of polygons
the receiver maintains to describe its area.

@param rect the rectangle to subtract from the receiver

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the argument is null</li>
<li>ERROR_INVALID_ARGUMENT - if the rectangle's width or height is negative</li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@since 3.0
------------
Subtracts the given rectangle from the collection of polygons
the receiver maintains to describe its area.

@param x the x coordinate of the rectangle
@param y the y coordinate of the rectangle
@param width the width coordinate of the rectangle
@param height the height coordinate of the rectangle

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the rectangle's width or height is negative</li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@since 3.1
------------
Subtracts all of the polygons which make up the area covered
by the argument from the collection of polygons the receiver
maintains to describe its area.

@param region the region to subtract

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the argument is null</li>
<li>ERROR_INVALID_ARGUMENT - if the argument has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@since 3.0
------------
Translate all of the polygons the receiver maintains to describe
its area by the specified point.

@param x the x coordinate of the point to translate
@param y the y coordinate of the point to translate

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@since 3.1
------------
Translate all of the polygons the receiver maintains to describe
its area by the specified point.

@param pt the point to translate

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the argument is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@since 3.1
------------
Returns a string containing a concise, human-readable
description of the receiver.

@return a string representation of the receiver
------------
Invokes platform specific functionality to allocate a new region.
<p>
<b>IMPORTANT:</b> This method is <em>not</em> part of the public
API for <code>Region</code>. It is marked public only so that it
can be shared within the packages provided by SWT. It is not
available on all platforms, and should never be called from
application code.
</p>

@param device the device on which to allocate the region
@param handle the handle for the region
@return a new region object containing the specified device and handle

@noreference This method is not intended to be referenced by clients.

====== Resource.java ======
Copyright (c) 2000, 2010 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
This class is the abstract superclass of all graphics resource objects.
Resources created by the application must be disposed.
<p>
IMPORTANT: This class is intended to be subclassed <em>only</em>
within the SWT implementation. However, it has not been marked
final to allow those outside of the SWT development team to implement
patched versions of the class in order to get around specific
limitations in advance of when those limitations can be addressed
by the team.  Any class built using subclassing to access the internals
of this class will likely fail to compile or run between releases and
may be strongly platform specific. Subclassing should not be attempted
without an intimate and detailed understanding of the workings of the
hierarchy. No support is provided for user-written classes which are
implemented as subclasses of this class.
</p>

@see #dispose
@see #isDisposed
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>

@since 3.1
------------
the device where this resource was created

Device device;

public Resource() {
}

Resource(Device device) {
if (device == null) device = Device.getDevice();
if (device == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);
this.device = device;
}

void destroy() {
}


Disposes of the operating system resources associated with
this resource. Applications must dispose of all resources
which they allocate.
This method does nothing if the resource is already disposed.
------------
Returns the <code>Device</code> where this resource was
created.

@return <code>Device</code> the device of the receiver

@since 3.2
------------
Returns <code>true</code> if the resource has been disposed,
and <code>false</code> otherwise.
<p>
This method gets the dispose state for the resource.
When a resource has been disposed, it is an error to
invoke any other method (except {@link #dispose()}) using the resource.

@return <code>true</code> when the resource is disposed and <code>false</code> otherwise

====== RGB.java ======
Copyright (c) 2000, 2013 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class are descriptions of colors in
terms of the primary additive color model (red, green and
blue). A color may be described in terms of the relative
intensities of these three primary colors. The brightness
of each color is specified by a value in the range 0 to 255,
where 0 indicates no color (blackness) and 255 indicates
maximum intensity.
<p>
The hashCode() method in this class uses the values of the public
fields to compute the hash value. When storing instances of the
class in hashed collections, do not modify these fields after the
object has been inserted.
</p>
<p>
Application code does <em>not</em> need to explicitly release the
resources managed by each instance when those instances are no longer
required, and thus no <code>dispose()</code> method is provided.
</p>

@see Color
@see <a href="http://www.eclipse.org/swt/snippets/#color">Color and RGB snippets</a>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
------------
the red component of the RGB

public int red;


the green component of the RGB

public int green;


the blue component of the RGB

public int blue;

static final long serialVersionUID = 3258415023461249074L;


Constructs an instance of this class with the given
red, green and blue values.

@param red the red component of the new instance
@param green the green component of the new instance
@param blue the blue component of the new instance

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the red, green or blue argument is not between 0 and 255</li>
</ul>
------------
Constructs an instance of this class with the given
hue, saturation, and brightness.

@param hue the hue value for the HSB color (from 0 to 360)
@param saturation the saturation value for the HSB color (from 0 to 1)
@param brightness the brightness value for the HSB color (from 0 to 1)

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the hue is not between 0 and 360 or
the saturation or brightness is not between 0 and 1</li>
</ul>

@since 3.2
/
public RGB(float hue, float saturation, float brightness) {
if (hue < 0 || hue > 360 || saturation < 0 || saturation > 1 ||
brightness < 0 || brightness > 1) {
SWT.error(SWT.ERROR_INVALID_ARGUMENT);
}
float r, g, b;
if (saturation == 0) {
r = g = b = brightness;
} else {
if (hue == 360) hue = 0;
hue /= 60;
int i = (int)hue;
float f = hue - i;
float p = brightness * (1 - saturation);
float q = brightness * (1 - saturation * f);
float t = brightness * (1 - saturation * (1 - f));
switch(i) {
case 0:
r = brightness;
g = t;
b = p;
break;
case 1:
r = q;
g = brightness;
b = p;
break;
case 2:
r = p;
g = brightness;
b = t;
break;
case 3:
r = p;
g = q;
b = brightness;
break;
case 4:
r = t;
g = p;
b = brightness;
break;
case 5:
default:
r = brightness;
g = p;
b = q;
break;
}
}
red = (int)(r * 255 + 0.5);
green = (int)(g * 255 + 0.5);
blue = (int)(b * 255 + 0.5);
}


Returns the hue, saturation, and brightness of the color.

@return color space values in float format:<ul>
<li>hue (from 0 to 360)</li>
<li>saturation (from 0 to 1)</li>
<li>brightness (from 0 to 1)</li>
</ul>
@see #RGB(float, float, float)

@since 3.2
------------
Compares the argument to the receiver, and returns true
if they represent the <em>same</em> object using a class
specific comparison.

@param object the object to compare with this object
@return <code>true</code> if the object is the same as this object and <code>false</code> otherwise

@see #hashCode()
------------
Returns an integer hash code for the receiver. Any two
objects that return <code>true</code> when passed to
<code>equals</code> must return the same value for this
method.

@return the receiver's hash

@see #equals(Object)
------------
Returns a string containing a concise, human-readable
description of the receiver.

@return a string representation of the <code>RGB</code>

====== RGBA.java ======
Copyright (c) 2015, 2016 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class are descriptions of colors in
terms of the primary additive color model (red, green, blue
and alpha). A color may be described in terms of the relative
intensities of these three primary colors. The brightness
of each color is specified by a value in the range 0 to 255,
where 0 indicates no color (blackness) and 255 indicates
maximum intensity and for alpha 0 indicates transparent and
255 indicates opaque.
<p>
The hashCode() method in this class uses the values of the public
fields to compute the hash value. When storing instances of the
class in hashed collections, do not modify these fields after the
object has been inserted.
</p>
<p>
Application code does <em>not</em> need to explicitly release the
resources managed by each instance when those instances are no longer
required, and thus no <code>dispose()</code> method is provided.
</p>

@see Color
@see <a href="http://www.eclipse.org/swt/snippets/#color">Color and RGB snippets</a>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
@since 3.104
------------
the RGB component of the RGBA

public final RGB rgb;


the alpha component of the RGBA

public int alpha;

static final long serialVersionUID = 1049467103126495855L;


Constructs an instance of this class with the given
red, green, blue and alpha values.

@param red the red component of the new instance
@param green the green component of the new instance
@param blue the blue component of the new instance
@param alpha the alpha component of the new instance

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the red, green, blue or alpha argument is not between 0 and 255</li>
</ul>
------------
Constructs an instance of this class with the given
hue, saturation, and brightness.

@param hue the hue value for the HSBA color (from 0 to 360)
@param saturation the saturation value for the HSBA color (from 0 to 1)
@param brightness the brightness value for the HSBA color (from 0 to 1)
@param alpha the alpha value for the HSBA color (from 0 to 255)

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the hue is not between 0 and 360 or
the saturation or brightness is not between 0 and 1 or if the alpha
is not between 0 and 255</li>
</ul>

/
public RGBA(float hue, float saturation, float brightness, float alpha) {
if ((alpha > 255) || (alpha < 0)) SWT.error(SWT.ERROR_INVALID_ARGUMENT);
rgb = new RGB(hue, saturation, brightness);
this.alpha = (int)(alpha + 0.5);
}


Returns the hue, saturation, and brightness of the color.

@return color space values in float format:<ul>
<li>hue (from 0 to 360)</li>
<li>saturation (from 0 to 1)</li>
<li>brightness (from 0 to 1)</li>
<li>alpha (from 0 to 255)</li>
</ul>
@see #RGBA(float, float, float, float)
------------
Compares the argument to the receiver, and returns true
if they represent the <em>same</em> object using a class
specific comparison.

@param object the object to compare with this object
@return <code>true</code> if the object is the same as this object and <code>false</code> otherwise

@see #hashCode()
------------
Returns an integer hash code for the receiver. Any two
objects that return <code>true</code> when passed to
<code>equals</code> must return the same value for this
method.

@return the receiver's hash

@see #equals(Object)
------------
Returns a string containing a concise, human-readable
description of the receiver.

@return a string representation of the <code>RGBA</code>

====== RowData.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Each control controlled by a <code>RowLayout</code> can have its initial
width and height specified by setting a <code>RowData</code> object
into the control.
<p>
The following code uses a <code>RowData</code> object to change the initial
size of a <code>Button</code> in a <code>Shell</code>:
<pre>
Display display = new Display();
Shell shell = new Shell(display);
shell.setLayout(new RowLayout());
Button button1 = new Button(shell, SWT.PUSH);
button1.setText("Button 1");
button1.setLayoutData(new RowData(50, 40));
</pre>
</p>

@see RowLayout
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
------------
width specifies the desired width in pixels. This value
is the wHint passed into Control.computeSize(int, int, boolean)
to determine the preferred size of the control.
*
The default value is SWT.DEFAULT.
*
@see org.eclipse.swt.widgets.Control#computeSize(int, int, boolean)

public int width = SWT.DEFAULT;

height specifies the preferred height in pixels. This value
is the hHint passed into Control.computeSize(int, int, boolean)
to determine the preferred size of the control.
*
The default value is SWT.DEFAULT.
*
@see org.eclipse.swt.widgets.Control#computeSize(int, int, boolean)

public int height = SWT.DEFAULT;


exclude informs the layout to ignore this control when sizing
and positioning controls.  If this value is <code>true</code>,
the size and position of the control will not be managed by the
layout.  If this	value is <code>false</code>, the size and
position of the control will be computed and assigned.
*
The default value is <code>false</code>.
*
@since 3.1

public boolean exclude = false;


Constructs a new instance of RowData using
default values.
------------
Constructs a new instance of RowData according to the parameters.
A value of SWT.DEFAULT indicates that no minimum width or
no minimum height is specified.

@param width a minimum width for the control
@param height a minimum height for the control
------------
Constructs a new instance of RowData according to the parameter.
A value of SWT.DEFAULT indicates that no minimum width or
no minimum height is specified.

@param point a point whose x coordinate specifies a minimum width for the control
and y coordinate specifies a minimum height for the control
------------
Returns a string containing a concise, human-readable
description of the receiver.

@return a string representation of the RowData object

====== RowLayout.java ======
Copyright (c) 2000, 2013 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class determine the size and position of the
children of a <code>Composite</code> by placing them either in
horizontal rows or vertical columns within the parent <code>Composite</code>.
<p>
<code>RowLayout</code> aligns all controls in one row if the
<code>type</code> is set to horizontal, and one column if it is
set to vertical. It has the ability to wrap, and provides configurable
margins and spacing. <code>RowLayout</code> has a number of configuration
fields. In addition, the height and width of each control in a
<code>RowLayout</code> can be specified by setting a <code>RowData</code>
object into the control using <code>setLayoutData ()</code>.
</p>
<p>
The following example code creates a <code>RowLayout</code>, sets all
of its fields to non-default values, and then sets it into a
<code>Shell</code>.
<pre>
RowLayout rowLayout = new RowLayout();
rowLayout.wrap = false;
rowLayout.pack = false;
rowLayout.justify = true;
rowLayout.type = SWT.VERTICAL;
rowLayout.marginLeft = 5;
rowLayout.marginTop = 5;
rowLayout.marginRight = 5;
rowLayout.marginBottom = 5;
rowLayout.spacing = 0;
shell.setLayout(rowLayout);
</pre>
If you are using the default field values, you only need one line of code:
<pre>
shell.setLayout(new RowLayout());
</pre>
</p>

@see RowData
@see <a href="http://www.eclipse.org/swt/snippets/#rowlayout">RowLayout snippets</a>
@see <a href="http://www.eclipse.org/swt/examples.php">SWT Example: LayoutExample</a>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
------------
type specifies whether the layout places controls in rows or
columns.
*
The default value is HORIZONTAL.
*
Possible values are: <ul>
   <li>HORIZONTAL: Position the controls horizontally from left to right</li>
   <li>VERTICAL: Position the controls vertically from top to bottom</li>
</ul>
*
@since 2.0

public int type = SWT.HORIZONTAL;


marginWidth specifies the number of pixels of horizontal margin
that will be placed along the left and right edges of the layout.
*
The default value is 0.
*
@since 3.0

public int marginWidth = 0;


marginHeight specifies the number of pixels of vertical margin
that will be placed along the top and bottom edges of the layout.
*
The default value is 0.
*
@since 3.0

public int marginHeight = 0;


spacing specifies the number of pixels between the edge of one cell
and the edge of its neighbouring cell.
*
The default value is 3.

public int spacing = 3;


wrap specifies whether a control will be wrapped to the next
row if there is insufficient space on the current row.
*
The default value is true.

public boolean wrap = true;


pack specifies whether all controls in the layout take
their preferred size.  If pack is false, all controls will
have the same size which is the size required to accommodate the
largest preferred height and the largest preferred width of all
the controls in the layout.
*
The default value is true.

public boolean pack = true;


fill specifies whether the controls in a row should be
all the same height for horizontal layouts, or the same
width for vertical layouts.
*
The default value is false.
*
@since 3.0

public boolean fill = false;


center specifies whether the controls in a row should be
centered vertically in each cell for horizontal layouts,
or centered horizontally in each cell for vertical layouts.
*
The default value is false.
*
@since 3.4

public boolean center = false;


justify specifies whether the controls in a row should be
fully justified, with any extra space placed between the controls.
*
The default value is false.

public boolean justify = false;


marginLeft specifies the number of pixels of horizontal margin
that will be placed along the left edge of the layout.
*
The default value is 3.

public int marginLeft = 3;


marginTop specifies the number of pixels of vertical margin
that will be placed along the top edge of the layout.
*
The default value is 3.

public int marginTop = 3;


marginRight specifies the number of pixels of horizontal margin
that will be placed along the right edge of the layout.
*
The default value is 3.

public int marginRight = 3;


marginBottom specifies the number of pixels of vertical margin
that will be placed along the bottom edge of the layout.
*
The default value is 3.

public int marginBottom = 3;


Constructs a new instance of this class with type HORIZONTAL.
------------
Constructs a new instance of this class given the type.

@param type the type of row layout

@since 2.0
------------
Returns a string containing a concise, human-readable
description of the receiver.

@return a string representation of the layout

====== RunnableLock.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class are used to ensure that an
application cannot interfere with the locking mechanism
used to implement asynchronous and synchronous communication
between widgets and background threads.

====== Sash.java ======
Copyright (c) 2000, 2012 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of the receiver represent a selectable user interface object
that allows the user to drag a rubber banded outline of the sash within
the parent control.
<dl>
<dt><b>Styles:</b></dt>
<dd>HORIZONTAL, VERTICAL, SMOOTH</dd>
<dt><b>Events:</b></dt>
<dd>Selection</dd>
</dl>
<p>
Note: Only one of the styles HORIZONTAL and VERTICAL may be specified.
</p><p>
IMPORTANT: This class is <em>not</em> intended to be subclassed.
</p>

@see <a href="http://www.eclipse.org/swt/snippets/#sash">Sash snippets</a>
@see <a href="http://www.eclipse.org/swt/examples.php">SWT Example: ControlExample</a>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
@noextend This class is not intended to be subclassed by clients.
------------
Constructs a new instance of this class given its parent
and a style value describing its behavior and appearance.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.
</p>

@param parent a composite control which will be the parent of the new instance (cannot be null)
@param style the style of control to construct

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see SWT#HORIZONTAL
@see SWT#VERTICAL
@see SWT#SMOOTH
@see Widget#checkSubclass
@see Widget#getStyle
------------
Adds the listener to the collection of listeners who will
be notified when the control is selected by the user, by sending
it one of the messages defined in the <code>SelectionListener</code>
interface.
<p>
When <code>widgetSelected</code> is called, the x, y, width, and height fields of the event object are valid.
If the receiver is being dragged, the event object detail field contains the value <code>SWT.DRAG</code>.
<code>widgetDefaultSelected</code> is not called.
</p>

@param listener the listener which should be notified when the control is selected by the user

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see SelectionListener
@see #removeSelectionListener
@see SelectionEvent
------------
Removes the listener from the collection of listeners who will
be notified when the control is selected by the user.

@param listener the listener which should no longer be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see SelectionListener
@see #addSelectionListener

====== Scale.java ======
Copyright (c) 2000, 2012 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of the receiver represent a selectable user
interface object that present a range of continuous
numeric values.
<dl>
<dt><b>Styles:</b></dt>
<dd>HORIZONTAL, VERTICAL</dd>
<dt><b>Events:</b></dt>
<dd>Selection</dd>
</dl>
<p>
Note: Only one of the styles HORIZONTAL and VERTICAL may be specified.
</p><p>
<p>
IMPORTANT: This class is <em>not</em> intended to be subclassed.
</p>

@see <a href="http://www.eclipse.org/swt/snippets/#scale">Scale snippets</a>
@see <a href="http://www.eclipse.org/swt/examples.php">SWT Example: ControlExample</a>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
@noextend This class is not intended to be subclassed by clients.
------------
Constructs a new instance of this class given its parent
and a style value describing its behavior and appearance.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.
</p>

@param parent a composite control which will be the parent of the new instance (cannot be null)
@param style the style of control to construct

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see SWT#HORIZONTAL
@see SWT#VERTICAL
@see Widget#checkSubclass
@see Widget#getStyle
------------
Adds the listener to the collection of listeners who will
be notified when the user changes the receiver's value, by sending
it one of the messages defined in the <code>SelectionListener</code>
interface.
<p>
<code>widgetSelected</code> is called when the user changes the receiver's value.
<code>widgetDefaultSelected</code> is not called.
</p>

@param listener the listener which should be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see SelectionListener
@see #removeSelectionListener
------------
Returns the amount that the receiver's value will be
modified by when the up/down (or right/left) arrows
are pressed.

@return the increment

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the maximum value which the receiver will allow.

@return the maximum

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the minimum value which the receiver will allow.

@return the minimum

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the amount that the receiver's value will be
modified by when the page increment/decrement areas
are selected.

@return the page increment

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the 'selection', which is the receiver's position.

@return the selection

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Removes the listener from the collection of listeners who will
be notified when the user changes the receiver's value.

@param listener the listener which should no longer be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see SelectionListener
@see #addSelectionListener
------------
Sets the amount that the receiver's value will be
modified by when the up/down (or right/left) arrows
are pressed to the argument, which must be at least
one.

@param increment the new increment (must be greater than zero)

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the maximum value that the receiver will allow.  This new
value will be ignored if it is not greater than the receiver's current
minimum value.  If the new maximum is applied then the receiver's
selection value will be adjusted if necessary to fall within its new range.

@param value the new maximum, which must be greater than the current minimum

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the minimum value that the receiver will allow.  This new
value will be ignored if it is negative or is not less than the receiver's
current maximum value.  If the new minimum is applied then the receiver's
selection value will be adjusted if necessary to fall within its new range.

@param value the new minimum, which must be nonnegative and less than the current maximum

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the amount that the receiver's value will be
modified by when the page increment/decrement areas
are selected to the argument, which must be at least
one.

@param pageIncrement the page increment (must be greater than zero)

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the 'selection', which is the receiver's value,
to the argument which must be greater than or equal to zero.

@param value the new selection (must be zero or greater)

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

====== Scrollable.java ======
Copyright (c) 2000, 2015 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
This class is the abstract superclass of all classes which
represent controls that have standard scroll bars.
<dl>
<dt><b>Styles:</b></dt>
<dd>H_SCROLL, V_SCROLL</dd>
<dt><b>Events:</b>
<dd>(none)</dd>
</dl>
<p>
IMPORTANT: This class is intended to be subclassed <em>only</em>
within the SWT implementation.
</p>

@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
@noextend This class is not intended to be subclassed by clients.
------------
The regular expression used to determine the string which should be deleted
when Ctrl+Bs is hit.

static final java.util.regex.Pattern CTRL_BS_PATTERN =
java.util.regex.Pattern.compile ("\\r?\\n\\z|[\\p{Punct}]+[\\t ]*\\z|[^\\p{Punct}\\s\\n\\r]*[\\t ]*\\z");


Prevents uninitialized instances from being created outside the package.
------------
Constructs a new instance of this class given its parent
and a style value describing its behavior and appearance.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.
</p>

@param parent a composite control which will be the parent of the new instance (cannot be null)
@param style the style of control to construct

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see SWT#H_SCROLL
@see SWT#V_SCROLL
@see Widget#checkSubclass
@see Widget#getStyle
------------
Given a desired <em>client area</em> for the receiver
(as described by the arguments), returns the bounding
rectangle which would be required to produce that client
area.
<p>
In other words, it returns a rectangle such that, if the
receiver's bounds were set to that rectangle, the area
of the receiver which is capable of displaying data
(that is, not covered by the "trimmings") would be the
rectangle described by the arguments (relative to the
receiver's parent).
</p>

@param x the desired x coordinate of the client area
@param y the desired y coordinate of the client area
@param width the desired width of the client area
@param height the desired height of the client area
@return the required bounds to produce the given client area

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #getClientArea
------------
@return
<li>0 to remove THEME_BACKGROUND</li>
<li>1 to apply THEME_BACKGROUND</li>
<li>otherwise don't change THEME_BACKGROUND state</li>
------------
Returns a rectangle which describes the area of the
receiver which is capable of displaying data (that is,
not covered by the "trimmings").

@return the client area

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #computeTrim
------------
Returns the receiver's horizontal scroll bar if it has
one, and null if it does not.

@return the horizontal scroll bar (or null)

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the mode of the receiver's scrollbars. This will be
<em>bitwise</em> OR of one or more of the constants defined in class
<code>SWT</code>.<br>
<li><code>SWT.SCROLLBAR_OVERLAY</code> - if receiver
uses overlay scrollbars</li>
<li><code>SWT.NONE</code> - otherwise</li>

@return the mode of scrollbars

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been
disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the
thread that created the receiver</li>
</ul>

@see SWT#SCROLLBAR_OVERLAY

@since 3.8
------------
Returns the receiver's vertical scroll bar if it has
one, and null if it does not.

@return the vertical scroll bar (or null)

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

====== ScrollBar.java ======
Copyright (c) 2000, 2013 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class are selectable user interface
objects that represent a range of positive, numeric values.
<p>
At any given moment, a given scroll bar will have a
single 'selection' that is considered to be its
value, which is constrained to be within the range of
values the scroll bar represents (that is, between its
<em>minimum</em> and <em>maximum</em> values).
</p><p>
Typically, scroll bars will be made up of five areas:
<ol>
<li>an arrow button for decrementing the value</li>
<li>a page decrement area for decrementing the value by a larger amount</li>
<li>a <em>thumb</em> for modifying the value by mouse dragging</li>
<li>a page increment area for incrementing the value by a larger amount</li>
<li>an arrow button for incrementing the value</li>
</ol>
Based on their style, scroll bars are either <code>HORIZONTAL</code>
(which have a left facing button for decrementing the value and a
right facing button for incrementing it) or <code>VERTICAL</code>
(which have an upward facing button for decrementing the value
and a downward facing buttons for incrementing it).
</p><p>
On some platforms, the size of the scroll bar's thumb can be
varied relative to the magnitude of the range of values it
represents (that is, relative to the difference between its
maximum and minimum values). Typically, this is used to
indicate some proportional value such as the ratio of the
visible area of a document to the total amount of space that
it would take to display it. SWT supports setting the thumb
size even if the underlying platform does not, but in this
case the appearance of the scroll bar will not change.
</p><p>
Scroll bars are created by specifying either <code>H_SCROLL</code>,
<code>V_SCROLL</code> or both when creating a <code>Scrollable</code>.
They are accessed from the <code>Scrollable</code> using
<code>getHorizontalBar</code> and <code>getVerticalBar</code>.
</p><p>
Note: Scroll bars are not Controls.  On some platforms, scroll bars
that appear as part of some standard controls such as a text or list
have no operating system resources and are not children of the control.
For this reason, scroll bars are treated specially.  To create a control
that looks like a scroll bar but has operating system resources, use
<code>Slider</code>.
</p>
<dl>
<dt><b>Styles:</b></dt>
<dd>HORIZONTAL, VERTICAL</dd>
<dt><b>Events:</b></dt>
<dd>Selection</dd>
</dl>
<p>
Note: Only one of the styles HORIZONTAL and VERTICAL may be specified.
</p><p>
IMPORTANT: This class is <em>not</em> intended to be subclassed.
</p>

@see Slider
@see Scrollable
@see Scrollable#getHorizontalBar
@see Scrollable#getVerticalBar
@see <a href="http://www.eclipse.org/swt/examples.php">SWT Example: ControlExample</a>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
@noextend This class is not intended to be subclassed by clients.
------------
Constructs a new instance of this class given its parent
and a style value describing its behavior and appearance.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.
</p>

@param parent a composite control which will be the parent of the new instance (cannot be null)
@param style the style of control to construct

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see SWT#HORIZONTAL
@see SWT#VERTICAL
@see Widget#checkSubclass
@see Widget#getStyle
------------
Adds the listener to the collection of listeners who will
be notified when the user changes the receiver's value, by sending
it one of the messages defined in the <code>SelectionListener</code>
interface.
<p>
When <code>widgetSelected</code> is called, the event object detail field contains one of the following values:
<code>SWT.NONE</code> - for the end of a drag.
<code>SWT.DRAG</code>.
<code>SWT.HOME</code>.
<code>SWT.END</code>.
<code>SWT.ARROW_DOWN</code>.
<code>SWT.ARROW_UP</code>.
<code>SWT.PAGE_DOWN</code>.
<code>SWT.PAGE_UP</code>.
<code>widgetDefaultSelected</code> is not called.
</p>

@param listener the listener which should be notified when the user changes the receiver's value

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see SelectionListener
@see #removeSelectionListener
@see SelectionEvent
------------
Returns <code>true</code> if the receiver is enabled, and
<code>false</code> otherwise. A disabled control is typically
not selectable from the user interface and draws with an
inactive or "grayed" look.

@return the receiver's enabled state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #isEnabled
------------
Returns the amount that the receiver's value will be
modified by when the up/down (or right/left) arrows
are pressed.

@return the increment

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the maximum value which the receiver will allow.

@return the maximum

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the minimum value which the receiver will allow.

@return the minimum

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the amount that the receiver's value will be
modified by when the page increment/decrement areas
are selected.

@return the page increment

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the receiver's parent, which must be a Scrollable.

@return the receiver's parent

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the single 'selection' that is the receiver's value.

@return the selection

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns a point describing the receiver's size. The
x coordinate of the result is the width of the receiver.
The y coordinate of the result is the height of the
receiver.

@return the receiver's size

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the receiver's thumb value.

@return the thumb value

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see ScrollBar
------------
Returns a rectangle describing the size and location of the
receiver's thumb relative to its parent.

@return the thumb bounds, relative to the {@link #getParent() parent}

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.6
------------
Returns a rectangle describing the size and location of the
receiver's thumb track relative to its parent. This rectangle
comprises the areas 2, 3, and 4 as described in {@link ScrollBar}.

@return the thumb track bounds, relative to the {@link #getParent() parent}

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.6
------------
Returns <code>true</code> if the receiver is visible, and
<code>false</code> otherwise.
<p>
If one of the receiver's ancestors is not visible or some
other condition makes the receiver not visible, this method
may still indicate that it is considered visible even though
it may not actually be showing.
</p>

@return the receiver's visibility state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns <code>true</code> if the receiver is enabled and all
of the receiver's ancestors are enabled, and <code>false</code>
otherwise. A disabled control is typically not selectable from the
user interface and draws with an inactive or "grayed" look.

@return the receiver's enabled state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #getEnabled
------------
Returns <code>true</code> if the receiver is visible and all
of the receiver's ancestors are visible and <code>false</code>
otherwise.

@return the receiver's visibility state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #getVisible
------------
Removes the listener from the collection of listeners who will
be notified when the user changes the receiver's value.

@param listener the listener which should no longer be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see SelectionListener
@see #addSelectionListener
------------
Enables the receiver if the argument is <code>true</code>,
and disables it otherwise. A disabled control is typically
not selectable from the user interface and draws with an
inactive or "grayed" look.

@param enabled the new enabled state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the amount that the receiver's value will be
modified by when the up/down (or right/left) arrows
are pressed to the argument, which must be at least
one.

@param value the new increment (must be greater than zero)

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the maximum. If this value is negative or less than or
equal to the minimum, the value is ignored. If necessary, first
the thumb and then the selection are adjusted to fit within the
new range.

@param value the new maximum

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the minimum value. If this value is negative or greater
than or equal to the maximum, the value is ignored. If necessary,
first the thumb and then the selection are adjusted to fit within
the new range.

@param value the new minimum

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the amount that the receiver's value will be
modified by when the page increment/decrement areas
are selected to the argument, which must be at least
one.

@param value the page increment (must be greater than zero)

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the single <em>selection</em> that is the receiver's
value to the argument which must be greater than or equal
to zero.

@param selection the new selection (must be zero or greater)

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the thumb value. The thumb value should be used to represent
the size of the visual portion of the current range. This value is
usually the same as the page increment value.
<p>
This new value will be ignored if it is less than one, and will be
clamped if it exceeds the receiver's current range.
</p>

@param value the new thumb value, which must be at least one and not
larger than the size of the current range

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the receiver's selection, minimum value, maximum
value, thumb, increment and page increment all at once.
<p>
Note: This is similar to setting the values individually
using the appropriate methods, but may be implemented in a
more efficient fashion on some platforms.
</p>

@param selection the new selection value
@param minimum the new minimum value
@param maximum the new maximum value
@param thumb the new thumb value
@param increment the new increment value
@param pageIncrement the new pageIncrement value

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Marks the receiver as visible if the argument is <code>true</code>,
and marks it invisible otherwise.
<p>
If one of the receiver's ancestors is not visible or some
other condition makes the receiver not visible, marking
it visible may not actually cause it to be displayed.
</p>

@param visible the new visibility state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

====== SegmentEvent.java ======
Copyright (c) 2000, 2012 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
This event is sent to SegmentListeners when a text content is to be modified.
The segments field can be used in conjunction with the segmentsChars field or
by itself. Setting only the segmentsChars field has no effect. When used by
itself, the segments field specify text ranges that should be treated as
separate segments.
<p>
The elements in the segments field specify the start offset of a segment
relative to the start of the text. They must follow the following rules:
<ul>
<li>elements must be in ascending order and must not have duplicates
<li>elements must not exceed the text length
</ul>
In addition, the first element may be set to zero and the last element may
be set to the end of the line but this is not required.

The segments field may be left null if the entire text content doesn't
require segmentation.
</p>
A SegmentListener may be used when adjacent segments of right-to-left text
should not be reordered relative to each other. For example, within a Java
editor, you may wish multiple right-to-left string literals to be reordered
differently than the bidi algorithm specifies.

Example:
<pre>
stored text = "R1R2R3" + "R4R5R6"
R1 to R6 are right-to-left characters. The quotation marks
are part of the text. The text is 13 characters long.

segments = null:
entire text content will be reordered and thus the two R2L segments
swapped (as per the bidi algorithm).
visual display (rendered on screen) = "R6R5R4" + "R3R2R1"

segments = [0, 5, 8]
"R1R2R3" will be reordered, followed by [blank]+[blank] and
"R4R5R6".
visual display = "R3R2R1" + "R6R5R4"
</pre>

<p>
The segments and segmentsChars fields can be used together to obtain different
types of bidi reordering and text display. The application can use these two fields
to insert Unicode Control Characters in specific offsets in the text, the character
at segmentsChars[i] is inserted at the offset specified by segments[i]. When both fields
are set, the rules for the segments field are less restrictive:
<ul>
<li>elements must be in ascending order, duplicates are allowed
<li>elements must not exceed the text length
</ul>
</p>

@since 3.8

====== SegmentListener.java ======
Copyright (c) 2000, 2016s IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
Lars Vogel <Lars.Vogel@vogella.com> - Bug 502576
------------
This listener interface may be implemented in order to receive
SegmentEvents.
@see SegmentEvent

@since 3.8
------------
This method is called when text content is being modified.
<p>
The following event fields are used:<ul>
<li>event.lineText text content (input)</li>
<li>event.segments text offsets for segment characters (output)</li>
<li>event.segmentsChars characters that should be inserted (output, optional)</li>
</ul>

@param event the given event
@see SegmentEvent

====== SelectionAdapter.java ======
Copyright (c) 2000, 2016 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
This adapter class provides default implementations for the
methods described by the <code>SelectionListener</code> interface.
<p>
Classes that wish to deal with <code>SelectionEvent</code>s can
extend this class and override only the methods which they are
interested in.
</p>

@see SelectionListener
@see SelectionEvent
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
------------
Sent when selection occurs in the control.
The default behavior is to do nothing.

@param e an event containing information about the selection
------------
Sent when default selection occurs in the control.
The default behavior is to do nothing.

@param e an event containing information about the default selection

====== SelectionEvent.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class are sent as a result of
widgets being selected.
<p>
Note: The fields that are filled in depend on the widget.
</p>

@see SelectionListener
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
------------
The item that was selected.

public Widget item;


Extra detail information about the selection, depending on the widget.
*
<p><b>Sash</b><ul>
<li>{@link org.eclipse.swt.SWT#DRAG}</li>
</ul></p><p><b>ScrollBar and Slider</b><ul>
<li>{@link org.eclipse.swt.SWT#DRAG}</li>
<li>{@link org.eclipse.swt.SWT#HOME}</li>
<li>{@link org.eclipse.swt.SWT#END}</li>
<li>{@link org.eclipse.swt.SWT#ARROW_DOWN}</li>
<li>{@link org.eclipse.swt.SWT#ARROW_UP}</li>
<li>{@link org.eclipse.swt.SWT#PAGE_DOWN}</li>
<li>{@link org.eclipse.swt.SWT#PAGE_UP}</li>
</ul></p><p><b>Table and Tree</b><ul>
<li>{@link org.eclipse.swt.SWT#CHECK}</li>
</ul></p><p><b>Text</b><ul>
<li>{@link org.eclipse.swt.SWT#CANCEL}</li>
</ul></p><p><b>CoolItem and ToolItem</b><ul>
<li>{@link org.eclipse.swt.SWT#ARROW}</li>
</ul></p>

public int detail;


The x location of the selected area.

public int x;


The y location of selected area.

public int y;


The width of selected area.

public int width;


The height of selected area.

public int height;


The state of the keyboard modifier keys and mouse masks
at the time the event was generated.
<p>
<b>Note:</b> Mouse button states are currently not included consistently
for all widgets on all platforms. Clients should be prepared to receive
button states, but should not rely on getting them everywhere.
</p>
*
@see org.eclipse.swt.SWT#MODIFIER_MASK
@see org.eclipse.swt.SWT#BUTTON_MASK

public int stateMask;


The text of the hyperlink that was selected.
This will be either the text of the hyperlink or the value of its HREF,
if one was specified.
*
@see org.eclipse.swt.widgets.Link#setText(String)
@since 3.1

public String text;


A flag indicating whether the operation should be allowed.
Setting this field to <code>false</code> will cancel the
operation, depending on the widget.

public boolean doit;

static final long serialVersionUID = 3976735856884987953L;


Constructs a new instance of this class based on the
information in the given untyped event.

@param e the untyped event containing the information
------------
Returns a string containing a concise, human-readable
description of the receiver.

@return a string representation of the event

====== SelectionListener.java ======
Copyright (c) 2000, 2016 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
Lars Vogel <Lars.Vogel@vogella.com>  - Bug 441116
------------
Classes which implement this interface provide methods
that deal with the events that are generated when selection
occurs in a control.
<p>
After creating an instance of a class that implements
this interface it can be added to a control using the
<code>addSelectionListener</code> method and removed using
the <code>removeSelectionListener</code> method. When
selection occurs in a control the appropriate method
will be invoked.
</p>

@see SelectionAdapter
@see SelectionEvent
------------
Sent when selection occurs in the control.
<p>
For example, selection occurs in a List when the user selects
an item or items with the keyboard or mouse.  On some platforms,
the event occurs when a mouse button or key is pressed.  On others,
it happens when the mouse or key is released.  The exact key or
mouse gesture that causes this event is platform specific.
</p>

@param e an event containing information about the selection
------------
Sent when default selection occurs in the control.
<p>
For example, on some platforms default selection occurs in a List
when the user double-clicks an item or types return in a Text.
On some platforms, the event occurs when a mouse button or key is
pressed.  On others, it happens when the mouse or key is released.
The exact key or mouse gesture that causes this event is platform
specific.
</p>

@param e an event containing information about the default selection
------------
Static helper method to create a selection listener for the
{@link #widgetSelected(SelectionEvent e)}) method with a lambda expression.

@param c the consumer of the event
@return SelectionListener
@since 3.106

====== Shell.java ======
Copyright (c) 2000, 2016 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class represent the "windows"
which the desktop or "window manager" is managing.
Instances that do not have a parent (that is, they
are built using the constructor, which takes a
<code>Display</code> as the argument) are described
as <em>top level</em> shells. Instances that do have
a parent are described as <em>secondary</em> or
<em>dialog</em> shells.
<p>
Instances are always displayed in one of the maximized,
minimized or normal states:
<ul>
<li>
When an instance is marked as <em>maximized</em>, the
window manager will typically resize it to fill the
entire visible area of the display, and the instance
is usually put in a state where it can not be resized
(even if it has style <code>RESIZE</code>) until it is
no longer maximized.
</li><li>
When an instance is in the <em>normal</em> state (neither
maximized or minimized), its appearance is controlled by
the style constants which were specified when it was created
and the restrictions of the window manager (see below).
</li><li>
When an instance has been marked as <em>minimized</em>,
its contents (client area) will usually not be visible,
and depending on the window manager, it may be
"iconified" (that is, replaced on the desktop by a small
simplified representation of itself), relocated to a
distinguished area of the screen, or hidden. Combinations
of these changes are also possible.
</li>
</ul>
</p><p>
The <em>modality</em> of an instance may be specified using
style bits. The modality style bits are used to determine
whether input is blocked for other shells on the display.
The <code>PRIMARY_MODAL</code> style allows an instance to block
input to its parent. The <code>APPLICATION_MODAL</code> style
allows an instance to block input to every other shell in the
display. The <code>SYSTEM_MODAL</code> style allows an instance
to block input to all shells, including shells belonging to
different applications.
</p><p>
Note: The styles supported by this class are treated
as <em>HINT</em>s, since the window manager for the
desktop on which the instance is visible has ultimate
control over the appearance and behavior of decorations
and modality. For example, some window managers only
support resizable windows and will always assume the
RESIZE style, even if it is not set. In addition, if a
modality style is not supported, it is "upgraded" to a
more restrictive modality style that is supported. For
example, if <code>PRIMARY_MODAL</code> is not supported,
it would be upgraded to <code>APPLICATION_MODAL</code>.
A modality style may also be "downgraded" to a less
restrictive style. For example, most operating systems
no longer support <code>SYSTEM_MODAL</code> because
it can freeze up the desktop, so this is typically
downgraded to <code>APPLICATION_MODAL</code>.
<dl>
<dt><b>Styles:</b></dt>
<dd>BORDER, CLOSE, MIN, MAX, NO_MOVE, NO_TRIM, RESIZE, TITLE, ON_TOP, TOOL, SHEET</dd>
<dd>APPLICATION_MODAL, MODELESS, PRIMARY_MODAL, SYSTEM_MODAL</dd>
<dt><b>Events:</b></dt>
<dd>Activate, Close, Deactivate, Deiconify, Iconify</dd>
</dl>
Class <code>SWT</code> provides two "convenience constants"
for the most commonly required style combinations:
<dl>
<dt><code>SHELL_TRIM</code></dt>
<dd>
the result of combining the constants which are required
to produce a typical application top level shell: (that
is, <code>CLOSE | TITLE | MIN | MAX | RESIZE</code>)
</dd>
<dt><code>DIALOG_TRIM</code></dt>
<dd>
the result of combining the constants which are required
to produce a typical application dialog shell: (that
is, <code>TITLE | CLOSE | BORDER</code>)
</dd>
</dl>
</p>
<p>
Note: Only one of the styles APPLICATION_MODAL, MODELESS,
PRIMARY_MODAL and SYSTEM_MODAL may be specified.
</p><p>
IMPORTANT: This class is <em>not</em> intended to be subclassed.
</p>

@see Decorations
@see SWT
@see <a href="http://www.eclipse.org/swt/snippets/#shell">Shell snippets</a>
@see <a href="http://www.eclipse.org/swt/examples.php">SWT Example: ControlExample</a>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
@noextend This class is not intended to be subclassed by clients.
------------
Constructs a new instance of this class. This is equivalent
to calling <code>Shell((Display) null)</code>.

@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>
------------
Constructs a new instance of this class given only the style
value describing its behavior and appearance. This is equivalent
to calling <code>Shell((Display) null, style)</code>.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.
</p>

@param style the style of control to construct

@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see SWT#BORDER
@see SWT#CLOSE
@see SWT#MIN
@see SWT#MAX
@see SWT#RESIZE
@see SWT#TITLE
@see SWT#TOOL
@see SWT#NO_TRIM
@see SWT#NO_MOVE
@see SWT#SHELL_TRIM
@see SWT#DIALOG_TRIM
@see SWT#ON_TOP
@see SWT#MODELESS
@see SWT#PRIMARY_MODAL
@see SWT#APPLICATION_MODAL
@see SWT#SYSTEM_MODAL
@see SWT#SHEET
------------
Constructs a new instance of this class given only the display
to create it on. It is created with style <code>SWT.SHELL_TRIM</code>.
<p>
Note: Currently, null can be passed in for the display argument.
This has the effect of creating the shell on the currently active
display if there is one. If there is no current display, the
shell is created on a "default" display. <b>Passing in null as
the display argument is not considered to be good coding style,
and may not be supported in a future release of SWT.</b>
</p>

@param display the display to create the shell on

@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>
------------
Constructs a new instance of this class given the display
to create it on and a style value describing its behavior
and appearance.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.
</p><p>
Note: Currently, null can be passed in for the display argument.
This has the effect of creating the shell on the currently active
display if there is one. If there is no current display, the
shell is created on a "default" display. <b>Passing in null as
the display argument is not considered to be good coding style,
and may not be supported in a future release of SWT.</b>
</p>

@param display the display to create the shell on
@param style the style of control to construct

@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see SWT#BORDER
@see SWT#CLOSE
@see SWT#MIN
@see SWT#MAX
@see SWT#RESIZE
@see SWT#TITLE
@see SWT#TOOL
@see SWT#NO_TRIM
@see SWT#NO_MOVE
@see SWT#SHELL_TRIM
@see SWT#DIALOG_TRIM
@see SWT#ON_TOP
@see SWT#MODELESS
@see SWT#PRIMARY_MODAL
@see SWT#APPLICATION_MODAL
@see SWT#SYSTEM_MODAL
@see SWT#SHEET
------------
Constructs a new instance of this class given only its
parent. It is created with style <code>SWT.DIALOG_TRIM</code>.
<p>
Note: Currently, null can be passed in for the parent.
This has the effect of creating the shell on the currently active
display if there is one. If there is no current display, the
shell is created on a "default" display. <b>Passing in null as
the parent is not considered to be good coding style,
and may not be supported in a future release of SWT.</b>
</p>

@param parent a shell which will be the parent of the new instance

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the parent is disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>
------------
Constructs a new instance of this class given its parent
and a style value describing its behavior and appearance.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.
</p><p>
Note: Currently, null can be passed in for the parent.
This has the effect of creating the shell on the currently active
display if there is one. If there is no current display, the
shell is created on a "default" display. <b>Passing in null as
the parent is not considered to be good coding style,
and may not be supported in a future release of SWT.</b>
</p>

@param parent a shell which will be the parent of the new instance
@param style the style of control to construct

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the parent is disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see SWT#BORDER
@see SWT#CLOSE
@see SWT#MIN
@see SWT#MAX
@see SWT#RESIZE
@see SWT#TITLE
@see SWT#NO_TRIM
@see SWT#NO_MOVE
@see SWT#SHELL_TRIM
@see SWT#DIALOG_TRIM
@see SWT#ON_TOP
@see SWT#TOOL
@see SWT#MODELESS
@see SWT#PRIMARY_MODAL
@see SWT#APPLICATION_MODAL
@see SWT#SYSTEM_MODAL
@see SWT#SHEET
------------
Invokes platform specific functionality to allocate a new shell
that is embedded.
<p>
<b>IMPORTANT:</b> This method is <em>not</em> part of the public
API for <code>Shell</code>. It is marked public only so that it
can be shared within the packages provided by SWT. It is not
available on all platforms, and should never be called from
application code.
</p>

@param display the display for the shell
@param handle the handle for the shell
@return a new shell object containing the specified display and handle

@noreference This method is not intended to be referenced by clients.
------------
Invokes platform specific functionality to allocate a new shell
that is not embedded.
<p>
<b>IMPORTANT:</b> This method is <em>not</em> part of the public
API for <code>Shell</code>. It is marked public only so that it
can be shared within the packages provided by SWT. It is not
available on all platforms, and should never be called from
application code.
</p>

@param display the display for the shell
@param handle the handle for the shell
@return a new shell object containing the specified display and handle

@noreference This method is not intended to be referenced by clients.

@since 3.3
------------
Adds the listener to the collection of listeners who will
be notified when operations are performed on the receiver,
by sending the listener one of the messages defined in the
<code>ShellListener</code> interface.

@param listener the listener which should be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see ShellListener
@see #removeShellListener
------------
Requests that the window manager close the receiver in
the same way it would be closed when the user clicks on
the "close box" or performs some other platform specific
key or mouse combination that indicates the window
should be removed.

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see SWT#Close
@see #dispose
------------
If the receiver is visible, moves it to the top of the
drawing order for the display on which it was created
(so that all other shells on that display, which are not
the receiver's children will be drawn behind it) and forces
the window manager to make the shell active.

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 2.0
@see Control#moveAbove
@see Control#setFocus
@see Control#setVisible
@see Display#getActiveShell
@see Decorations#setDefaultButton(Button)
@see Shell#open
@see Shell#setActive
------------
Returns the receiver's alpha value. The alpha value
is between 0 (transparent) and 255 (opaque).

@return the alpha value

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.4
------------
Returns <code>true</code> if the receiver is currently
in fullscreen state, and false otherwise.
<p>

@return the fullscreen state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.4
------------
Returns the receiver's input method editor mode. This
will be the result of bitwise OR'ing together one or
more of the following constants defined in class
<code>SWT</code>:
<code>NONE</code>, <code>ROMAN</code>, <code>DBCS</code>,
<code>PHONETIC</code>, <code>NATIVE</code>, <code>ALPHA</code>.

@return the IME mode

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see SWT
------------
Returns a point describing the minimum receiver's size. The
x coordinate of the result is the minimum width of the receiver.
The y coordinate of the result is the minimum height of the
receiver.

@return the receiver's size

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.1
------------
Gets the receiver's modified state.

@return <code>true</code> if the receiver is marked as modified, or <code>false</code> otherwise

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.5
------------
Returns the region that defines the shape of the shell,
or <code>null</code> if the shell has the default shape.

@return the region that defines the shape of the shell, or <code>null</code>

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.0
------------
Returns an array containing all shells which are
descendants of the receiver.
<p>
@return the dialog shells

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns a ToolBar object representing the tool bar that can be shown in the receiver's
trim. This will return <code>null</code> if the platform does not support tool bars that
are not part of the content area of the shell, or if the Shell's style does not support
having a tool bar.
<p>

@return a ToolBar object representing the Shell's tool bar, or <code>null</code>.

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.7
------------
Moves the receiver to the top of the drawing order for
the display on which it was created (so that all other
shells on that display, which are not the receiver's
children will be drawn behind it), marks it visible,
sets the focus and asks the window manager to make the
shell active.

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see Control#moveAbove
@see Control#setFocus
@see Control#setVisible
@see Display#getActiveShell
@see Decorations#setDefaultButton(Button)
@see Shell#setActive
@see Shell#forceActive
------------
Removes the listener from the collection of listeners who will
be notified when operations are performed on the receiver.

@param listener the listener which should no longer be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see ShellListener
@see #addShellListener
------------
If the receiver is visible, moves it to the top of the
drawing order for the display on which it was created
(so that all other shells on that display, which are not
the receiver's children will be drawn behind it) and asks
the window manager to make the shell active

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 2.0
@see Control#moveAbove
@see Control#setFocus
@see Control#setVisible
@see Display#getActiveShell
@see Decorations#setDefaultButton(Button)
@see Shell#open
@see Shell#setActive
------------
Sets the receiver's alpha value which must be
between 0 (transparent) and 255 (opaque).
<p>
This operation requires the operating system's advanced
widgets subsystem which may not be available on some
platforms.
</p>
@param alpha the alpha value

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.4
------------
Sets the full screen state of the receiver.
If the argument is <code>true</code> causes the receiver
to switch to the full screen state, and if the argument is
<code>false</code> and the receiver was previously switched
into full screen state, causes the receiver to switch back
to either the maximized or normal states.
<p>
Note: The result of intermixing calls to <code>setFullScreen(true)</code>,
<code>setMaximized(true)</code> and <code>setMinimized(true)</code> will
vary by platform. Typically, the behavior will match the platform user's
expectations, but not always. This should be avoided if possible.
</p>

@param fullScreen the new fullscreen state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.4
------------
Sets the input method editor mode to the argument which
should be the result of bitwise OR'ing together one or more
of the following constants defined in class <code>SWT</code>:
<code>NONE</code>, <code>ROMAN</code>, <code>DBCS</code>,
<code>PHONETIC</code>, <code>NATIVE</code>, <code>ALPHA</code>.

@param mode the new IME mode

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see SWT
------------
Sets the receiver's minimum size to the size specified by the arguments.
If the new minimum size is larger than the current size of the receiver,
the receiver is resized to the new minimum size.

@param width the new minimum width for the receiver
@param height the new minimum height for the receiver

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.1
------------
Sets the receiver's minimum size to the size specified by the argument.
If the new minimum size is larger than the current size of the receiver,
the receiver is resized to the new minimum size.

@param size the new minimum size for the receiver

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the point is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.1
------------
Sets the receiver's modified state as specified by the argument.

@param modified the new modified state for the receiver

</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.5
------------
Sets the shape of the shell to the region specified
by the argument.  When the argument is null, the
default shape of the shell is restored.  The shell
must be created with the style SWT.NO_TRIM in order
to specify a region.
<p>
NOTE: This method also sets the size of the shell. Clients should
not call {@link #setSize} or {@link #setBounds} on this shell.
Furthermore, the passed region should not be modified any more.
</p>

@param region the region that defines the shape of the shell (or null)

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the region has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.0

====== ShellAdapter.java ======
Copyright (c) 2000, 2016 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
This adapter class provides default implementations for the
methods described by the <code>ShellListener</code> interface.
<p>
Classes that wish to deal with <code>ShellEvent</code>s can
extend this class and override only the methods which they are
interested in.
</p>

@see ShellListener
@see ShellEvent
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
------------
Sent when a shell becomes the active window.
The default behavior is to do nothing.

@param e an event containing information about the activation
------------
Sent when a shell is closed.
The default behavior is to do nothing.

@param e an event containing information about the close
------------
Sent when a shell stops being the active window.
The default behavior is to do nothing.

@param e an event containing information about the deactivation
------------
Sent when a shell is un-minimized.
The default behavior is to do nothing.

@param e an event containing information about the un-minimization
------------
Sent when a shell is minimized.
The default behavior is to do nothing.

@param e an event containing information about the minimization

====== ShellEvent.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class are sent as a result of
operations being performed on shells.

@see ShellListener
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
------------
A flag indicating whether the operation should be allowed.
Setting this field to <code>false</code> will cancel the operation.

public boolean doit;

static final long serialVersionUID = 3257569490479888441L;


Constructs a new instance of this class based on the
information in the given untyped event.

@param e the untyped event containing the information
------------
Returns a string containing a concise, human-readable
description of the receiver.

@return a string representation of the event

====== ShellListener.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Classes which implement this interface provide methods
that deal with changes in state of <code>Shell</code>s.
<p>
After creating an instance of a class that implements
this interface it can be added to a shell using the
<code>addShellListener</code> method and removed using
the <code>removeShellListener</code> method. When the
state of the shell changes, the appropriate method will
be invoked.
</p>

@see ShellAdapter
@see ShellEvent
------------
Sent when a shell becomes the active window.

@param e an event containing information about the activation
------------
Sent when a shell is closed.

@param e an event containing information about the close
------------
Sent when a shell stops being the active window.

@param e an event containing information about the deactivation
------------
Sent when a shell is un-minimized.

@param e an event containing information about the un-minimization
------------
Sent when a shell is minimized.

@param e an event containing information about the minimization

====== Slider.java ======
Copyright (c) 2000, 2012 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class are selectable user interface
objects that represent a range of positive, numeric values.
<p>
At any given moment, a given slider will have a
single 'selection' that is considered to be its
value, which is constrained to be within the range of
values the slider represents (that is, between its
<em>minimum</em> and <em>maximum</em> values).
</p><p>
Typically, sliders will be made up of five areas:
<ol>
<li>an arrow button for decrementing the value</li>
<li>a page decrement area for decrementing the value by a larger amount</li>
<li>a <em>thumb</em> for modifying the value by mouse dragging</li>
<li>a page increment area for incrementing the value by a larger amount</li>
<li>an arrow button for incrementing the value</li>
</ol>
Based on their style, sliders are either <code>HORIZONTAL</code>
(which have a left facing button for decrementing the value and a
right facing button for incrementing it) or <code>VERTICAL</code>
(which have an upward facing button for decrementing the value
and a downward facing buttons for incrementing it).
</p><p>
On some platforms, the size of the slider's thumb can be
varied relative to the magnitude of the range of values it
represents (that is, relative to the difference between its
maximum and minimum values). Typically, this is used to
indicate some proportional value such as the ratio of the
visible area of a document to the total amount of space that
it would take to display it. SWT supports setting the thumb
size even if the underlying platform does not, but in this
case the appearance of the slider will not change.
</p>
<dl>
<dt><b>Styles:</b></dt>
<dd>HORIZONTAL, VERTICAL</dd>
<dt><b>Events:</b></dt>
<dd>Selection</dd>
</dl>
<p>
Note: Only one of the styles HORIZONTAL and VERTICAL may be specified.
</p><p>
IMPORTANT: This class is <em>not</em> intended to be subclassed.
</p>

@see ScrollBar
@see <a href="http://www.eclipse.org/swt/snippets/#slider">Slider snippets</a>
@see <a href="http://www.eclipse.org/swt/examples.php">SWT Example: ControlExample</a>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
@noextend This class is not intended to be subclassed by clients.
------------
Constructs a new instance of this class given its parent
and a style value describing its behavior and appearance.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.
</p>

@param parent a composite control which will be the parent of the new instance (cannot be null)
@param style the style of control to construct

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see SWT#HORIZONTAL
@see SWT#VERTICAL
@see Widget#checkSubclass
@see Widget#getStyle
------------
Adds the listener to the collection of listeners who will
be notified when the user changes the receiver's value, by sending
it one of the messages defined in the <code>SelectionListener</code>
interface.
<p>
When <code>widgetSelected</code> is called, the event object detail field contains one of the following values:
<code>SWT.NONE</code> - for the end of a drag.
<code>SWT.DRAG</code>.
<code>SWT.HOME</code>.
<code>SWT.END</code>.
<code>SWT.ARROW_DOWN</code>.
<code>SWT.ARROW_UP</code>.
<code>SWT.PAGE_DOWN</code>.
<code>SWT.PAGE_UP</code>.
<code>widgetDefaultSelected</code> is not called.
</p>

@param listener the listener which should be notified when the user changes the receiver's value

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see SelectionListener
@see #removeSelectionListener
@see SelectionEvent
------------
Returns the amount that the receiver's value will be
modified by when the up/down (or right/left) arrows
are pressed.

@return the increment

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the maximum value which the receiver will allow.

@return the maximum

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the minimum value which the receiver will allow.

@return the minimum

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the amount that the receiver's value will be
modified by when the page increment/decrement areas
are selected.

@return the page increment

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the 'selection', which is the receiver's value.

@return the selection

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the receiver's thumb value.

@return the thumb value

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Removes the listener from the collection of listeners who will
be notified when the user changes the receiver's value.

@param listener the listener which should no longer be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see SelectionListener
@see #addSelectionListener
------------
Sets the amount that the receiver's value will be
modified by when the up/down (or right/left) arrows
are pressed to the argument, which must be at least
one.

@param value the new increment (must be greater than zero)

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the maximum. If this value is negative or less than or
equal to the minimum, the value is ignored. If necessary, first
the thumb and then the selection are adjusted to fit within the
new range.

@param value the new maximum, which must be greater than the current minimum

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the minimum value. If this value is negative or greater
than or equal to the maximum, the value is ignored. If necessary,
first the thumb and then the selection are adjusted to fit within
the new range.

@param value the new minimum

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the amount that the receiver's value will be
modified by when the page increment/decrement areas
are selected to the argument, which must be at least
one.

@param value the page increment (must be greater than zero)

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the 'selection', which is the receiver's
value, to the argument which must be greater than or equal
to zero.

@param value the new selection (must be zero or greater)

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the thumb value. The thumb value should be used to represent
the size of the visual portion of the current range. This value is
usually the same as the page increment value.
<p>
This new value will be ignored if it is less than one, and will be
clamped if it exceeds the receiver's current range.
</p>

@param value the new thumb value, which must be at least one and not
larger than the size of the current range

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the receiver's selection, minimum value, maximum
value, thumb, increment and page increment all at once.
<p>
Note: This is similar to setting the values individually
using the appropriate methods, but may be implemented in a
more efficient fashion on some platforms.
</p>

@param selection the new selection value
@param minimum the new minimum value
@param maximum the new maximum value
@param thumb the new thumb value
@param increment the new increment value
@param pageIncrement the new pageIncrement value

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

====== Spinner.java ======
Copyright (c) 2000, 2012 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class are selectable user interface
objects that allow the user to enter and modify numeric
values.
<p>
Note that although this class is a subclass of <code>Composite</code>,
it does not make sense to add children to it, or set a layout on it.
</p><p>
<dl>
<dt><b>Styles:</b></dt>
<dd>READ_ONLY, WRAP</dd>
<dt><b>Events:</b></dt>
<dd>Selection, Modify, Verify</dd>
</dl>
</p><p>
IMPORTANT: This class is <em>not</em> intended to be subclassed.
</p>

@see <a href="http://www.eclipse.org/swt/snippets/#spinner">Spinner snippets</a>
@see <a href="http://www.eclipse.org/swt/examples.php">SWT Example: ControlExample</a>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>

@since 3.1
@noextend This class is not intended to be subclassed by clients.
------------
the operating system limit for the number of characters
that the text field in an instance of this class can hold
*
@since 3.4

public static final int LIMIT;

/*
These values can be different on different platforms.
Therefore they are not initialized in the declaration
to stop the compiler from inlining.

static {
LIMIT = OS.IsWinNT ? 0x7FFFFFFF : 0x7FFF;
}


Constructs a new instance of this class given its parent
and a style value describing its behavior and appearance.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.
</p>

@param parent a composite control which will be the parent of the new instance (cannot be null)
@param style the style of control to construct

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see SWT#READ_ONLY
@see SWT#WRAP
@see Widget#checkSubclass
@see Widget#getStyle
------------
Adds the listener to the collection of listeners who will
be notified when the receiver's text is modified, by sending
it one of the messages defined in the <code>ModifyListener</code>
interface.

@param listener the listener which should be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see ModifyListener
@see #removeModifyListener
------------
Adds the listener to the collection of listeners who will
be notified when the control is selected by the user, by sending
it one of the messages defined in the <code>SelectionListener</code>
interface.
<p>
<code>widgetSelected</code> is not called for texts.
<code>widgetDefaultSelected</code> is typically called when ENTER is pressed in a single-line text.
</p>

@param listener the listener which should be notified when the control is selected by the user

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see SelectionListener
@see #removeSelectionListener
@see SelectionEvent
------------
Adds the listener to the collection of listeners who will
be notified when the receiver's text is verified, by sending
it one of the messages defined in the <code>VerifyListener</code>
interface.

@param listener the listener which should be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see VerifyListener
@see #removeVerifyListener
------------
Copies the selected text.
<p>
The current selection is copied to the clipboard.
</p>

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Cuts the selected text.
<p>
The current selection is first copied to the
clipboard and then deleted from the widget.
</p>

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the number of decimal places used by the receiver.

@return the digits

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the amount that the receiver's value will be
modified by when the up/down arrows are pressed.

@return the increment

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the maximum value which the receiver will allow.

@return the maximum

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the minimum value which the receiver will allow.

@return the minimum

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the amount that the receiver's position will be
modified by when the page up/down keys are pressed.

@return the page increment

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the <em>selection</em>, which is the receiver's position.

@return the selection

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns a string containing a copy of the contents of the
receiver's text field, or an empty string if there are no
contents.

@return the receiver's text

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.4
------------
Returns the maximum number of characters that the receiver's
text field is capable of holding. If this has not been changed
by <code>setTextLimit()</code>, it will be the constant
<code>Spinner.LIMIT</code>.

@return the text limit

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #LIMIT

@since 3.4
------------
Pastes text from clipboard.
<p>
The selected text is deleted from the widget
and new text inserted from the clipboard.
</p>

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Removes the listener from the collection of listeners who will
be notified when the receiver's text is modified.

@param listener the listener which should no longer be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see ModifyListener
@see #addModifyListener
------------
Removes the listener from the collection of listeners who will
be notified when the control is selected by the user.

@param listener the listener which should no longer be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see SelectionListener
@see #addSelectionListener
------------
Removes the listener from the collection of listeners who will
be notified when the control is verified.

@param listener the listener which should no longer be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see VerifyListener
@see #addVerifyListener
------------
Sets the number of decimal places used by the receiver.
<p>
The digit setting is used to allow for floating point values in the receiver.
For example, to set the selection to a floating point value of 1.37 call setDigits() with
a value of 2 and setSelection() with a value of 137. Similarly, if getDigits() has a value
of 2 and getSelection() returns 137 this should be interpreted as 1.37. This applies to all
numeric APIs.
</p>

@param value the new digits (must be greater than or equal to zero)

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the value is less than zero</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the amount that the receiver's value will be
modified by when the up/down arrows are pressed to
the argument, which must be at least one.

@param value the new increment (must be greater than zero)

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the maximum value that the receiver will allow.  This new
value will be ignored if it is less than the receiver's current
minimum value.  If the new maximum is applied then the receiver's
selection value will be adjusted if necessary to fall within its new range.

@param value the new maximum, which must be greater than or equal to the current minimum

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the minimum value that the receiver will allow.  This new
value will be ignored if it is greater than the receiver's
current maximum value.  If the new minimum is applied then the receiver's
selection value will be adjusted if necessary to fall within its new range.

@param value the new minimum, which must be less than or equal to the current maximum

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the amount that the receiver's position will be
modified by when the page up/down keys are pressed
to the argument, which must be at least one.

@param value the page increment (must be greater than zero)

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the <em>selection</em>, which is the receiver's
position, to the argument. If the argument is not within
the range specified by minimum and maximum, it will be
adjusted to fall within this range.

@param value the new selection (must be zero or greater)

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the maximum number of characters that the receiver's
text field is capable of holding to be the argument.
<p>
To reset this value to the default, use <code>setTextLimit(Spinner.LIMIT)</code>.
Specifying a limit value larger than <code>Spinner.LIMIT</code> sets the
receiver's limit to <code>Spinner.LIMIT</code>.
</p>
@param limit new text limit

@exception IllegalArgumentException <ul>
<li>ERROR_CANNOT_BE_ZERO - if the limit is zero</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #LIMIT

@since 3.4
------------
Sets the receiver's selection, minimum value, maximum
value, digits, increment and page increment all at once.
<p>
Note: This is similar to setting the values individually
using the appropriate methods, but may be implemented in a
more efficient fashion on some platforms.
</p>

@param selection the new selection value
@param minimum the new minimum value
@param maximum the new maximum value
@param digits the new digits value
@param increment the new increment value
@param pageIncrement the new pageIncrement value

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.2

====== SWT.java ======
Copyright (c) 2000, 2015 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
Lars Vogel <Lars.Vogel@vogella.com> - Bug 455263
------------
This class provides access to a small number of SWT system-wide
methods, and in addition defines the public constants provided
by SWT.
<p>
By defining constants like UP and DOWN in a single class, SWT
can share common names and concepts at the same time minimizing
the number of classes, names and constants for the application
programmer.
</p><p>
Note that some of the constants provided by this class represent
optional, appearance related aspects of widgets which are available
either only on some window systems, or for a differing set of
widgets on each window system. These constants are marked
as <em>HINT</em>s. The set of widgets which support a particular
<em>HINT</em> may change from release to release, although we typically
will not withdraw support for a <em>HINT</em> once it is made available.
</p>

@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
------------
The null event type (value is 0).
*
@since 3.0

public static final int None = 0;


The key down event type (value is 1).
*
@see org.eclipse.swt.widgets.Widget#addListener
@see org.eclipse.swt.widgets.Display#addFilter
@see org.eclipse.swt.widgets.Event
*
@see org.eclipse.swt.widgets.Control#addKeyListener
@see org.eclipse.swt.widgets.Tracker#addKeyListener
@see org.eclipse.swt.events.KeyListener#keyPressed
@see org.eclipse.swt.events.KeyEvent

public static final int KeyDown = 1;


The key up event type (value is 2).
*
@see org.eclipse.swt.widgets.Widget#addListener
@see org.eclipse.swt.widgets.Display#addFilter
@see org.eclipse.swt.widgets.Event
*
@see org.eclipse.swt.widgets.Control#addKeyListener
@see org.eclipse.swt.widgets.Tracker#addKeyListener
@see org.eclipse.swt.events.KeyListener#keyReleased
@see org.eclipse.swt.events.KeyEvent

public static final int KeyUp = 2;


The mouse down event type (value is 3).
*
@see org.eclipse.swt.widgets.Widget#addListener
@see org.eclipse.swt.widgets.Display#addFilter
@see org.eclipse.swt.widgets.Event
*
@see org.eclipse.swt.widgets.Control#addMouseListener
@see org.eclipse.swt.events.MouseListener#mouseDown
@see org.eclipse.swt.events.MouseEvent

public static final int MouseDown = 3;


The mouse up event type (value is 4).
*
@see org.eclipse.swt.widgets.Widget#addListener
@see org.eclipse.swt.widgets.Display#addFilter
@see org.eclipse.swt.widgets.Event
*
@see org.eclipse.swt.widgets.Control#addMouseListener
@see org.eclipse.swt.events.MouseListener#mouseUp
@see org.eclipse.swt.events.MouseEvent

public static final int MouseUp = 4;


The mouse move event type (value is 5).
*
@see org.eclipse.swt.widgets.Widget#addListener
@see org.eclipse.swt.widgets.Display#addFilter
@see org.eclipse.swt.widgets.Event
*
@see org.eclipse.swt.widgets.Control#addMouseMoveListener
@see org.eclipse.swt.events.MouseMoveListener#mouseMove
@see org.eclipse.swt.events.MouseEvent

public static final int MouseMove = 5;


The mouse enter event type (value is 6).
*
@see org.eclipse.swt.widgets.Widget#addListener
@see org.eclipse.swt.widgets.Display#addFilter
@see org.eclipse.swt.widgets.Event
*
@see org.eclipse.swt.widgets.Control#addMouseTrackListener
@see org.eclipse.swt.events.MouseTrackListener#mouseEnter
@see org.eclipse.swt.events.MouseEvent

public static final int MouseEnter = 6;


The mouse exit event type (value is 7).
*
@see org.eclipse.swt.widgets.Widget#addListener
@see org.eclipse.swt.widgets.Display#addFilter
@see org.eclipse.swt.widgets.Event
*
@see org.eclipse.swt.widgets.Control#addMouseTrackListener
@see org.eclipse.swt.events.MouseTrackListener#mouseExit
@see org.eclipse.swt.events.MouseEvent

public static final int MouseExit = 7;


The mouse double click event type (value is 8).
*
@see org.eclipse.swt.widgets.Widget#addListener
@see org.eclipse.swt.widgets.Display#addFilter
@see org.eclipse.swt.widgets.Event
*
@see org.eclipse.swt.widgets.Control#addMouseListener
@see org.eclipse.swt.events.MouseListener#mouseDoubleClick
@see org.eclipse.swt.events.MouseEvent

public static final int MouseDoubleClick = 8;


The paint event type (value is 9).
*
@see org.eclipse.swt.widgets.Widget#addListener
@see org.eclipse.swt.widgets.Display#addFilter
@see org.eclipse.swt.widgets.Event
*
@see org.eclipse.swt.widgets.Control#addPaintListener
@see org.eclipse.swt.events.PaintListener#paintControl
@see org.eclipse.swt.events.PaintEvent

public static final int Paint = 9;


The move event type (value is 10).
*
@see org.eclipse.swt.widgets.Widget#addListener
@see org.eclipse.swt.widgets.Display#addFilter
@see org.eclipse.swt.widgets.Event
*
@see org.eclipse.swt.widgets.Control#addControlListener
@see org.eclipse.swt.widgets.TableColumn#addControlListener
@see org.eclipse.swt.widgets.Tracker#addControlListener
@see org.eclipse.swt.widgets.TreeColumn#addControlListener
@see org.eclipse.swt.events.ControlListener#controlMoved
@see org.eclipse.swt.events.ControlEvent

public static final int Move = 10;


The resize event type (value is 11).
*
@see org.eclipse.swt.widgets.Widget#addListener
@see org.eclipse.swt.widgets.Display#addFilter
@see org.eclipse.swt.widgets.Event
*
@see org.eclipse.swt.widgets.Control#addControlListener
@see org.eclipse.swt.widgets.TableColumn#addControlListener
@see org.eclipse.swt.widgets.Tracker#addControlListener
@see org.eclipse.swt.widgets.TreeColumn#addControlListener
@see org.eclipse.swt.events.ControlListener#controlResized
@see org.eclipse.swt.events.ControlEvent

public static final int Resize = 11;


The dispose event type (value is 12).
*
@see org.eclipse.swt.widgets.Widget#addListener
@see org.eclipse.swt.widgets.Display#addListener
@see org.eclipse.swt.widgets.Display#addFilter
@see org.eclipse.swt.widgets.Event
*
@see org.eclipse.swt.widgets.Widget#addDisposeListener
@see org.eclipse.swt.events.DisposeListener#widgetDisposed
@see org.eclipse.swt.events.DisposeEvent

public static final int Dispose = 12;


The selection event type (value is 13).
*
@see org.eclipse.swt.widgets.Widget#addListener
@see org.eclipse.swt.widgets.Display#addFilter
@see org.eclipse.swt.widgets.Event
*
@see org.eclipse.swt.widgets.Button#addSelectionListener
@see org.eclipse.swt.widgets.Combo#addSelectionListener
@see org.eclipse.swt.widgets.CoolItem#addSelectionListener
@see org.eclipse.swt.widgets.Link#addSelectionListener
@see org.eclipse.swt.widgets.List#addSelectionListener
@see org.eclipse.swt.widgets.MenuItem#addSelectionListener
@see org.eclipse.swt.widgets.Sash#addSelectionListener
@see org.eclipse.swt.widgets.Scale#addSelectionListener
@see org.eclipse.swt.widgets.ScrollBar#addSelectionListener
@see org.eclipse.swt.widgets.Slider#addSelectionListener
@see org.eclipse.swt.widgets.TabFolder#addSelectionListener
@see org.eclipse.swt.widgets.Table#addSelectionListener
@see org.eclipse.swt.widgets.TableColumn#addSelectionListener
@see org.eclipse.swt.widgets.ToolItem#addSelectionListener
@see org.eclipse.swt.widgets.TrayItem#addSelectionListener
@see org.eclipse.swt.widgets.Tree#addSelectionListener
@see org.eclipse.swt.widgets.TreeColumn#addSelectionListener
@see org.eclipse.swt.events.SelectionListener#widgetSelected
@see org.eclipse.swt.events.SelectionEvent

public static final int Selection = 13;


The default selection event type (value is 14).
*
@see org.eclipse.swt.widgets.Widget#addListener
@see org.eclipse.swt.widgets.Display#addFilter
@see org.eclipse.swt.widgets.Event
*
@see org.eclipse.swt.widgets.Combo#addSelectionListener
@see org.eclipse.swt.widgets.List#addSelectionListener
@see org.eclipse.swt.widgets.Spinner#addSelectionListener
@see org.eclipse.swt.widgets.Table#addSelectionListener
@see org.eclipse.swt.widgets.Text#addSelectionListener
@see org.eclipse.swt.widgets.TrayItem#addSelectionListener
@see org.eclipse.swt.widgets.Tree#addSelectionListener
@see org.eclipse.swt.events.SelectionListener#widgetDefaultSelected
@see org.eclipse.swt.events.SelectionEvent

public static final int DefaultSelection = 14;


The focus in event type (value is 15).
*
@see org.eclipse.swt.widgets.Widget#addListener
@see org.eclipse.swt.widgets.Display#addFilter
@see org.eclipse.swt.widgets.Event
*
@see org.eclipse.swt.widgets.Control#addFocusListener
@see org.eclipse.swt.events.FocusListener#focusGained
@see org.eclipse.swt.events.FocusEvent

public static final int FocusIn = 15;


The focus out event type (value is 16).
*
@see org.eclipse.swt.widgets.Widget#addListener
@see org.eclipse.swt.widgets.Display#addFilter
@see org.eclipse.swt.widgets.Event
*
@see org.eclipse.swt.widgets.Control#addFocusListener
@see org.eclipse.swt.events.FocusListener#focusLost
@see org.eclipse.swt.events.FocusEvent

public static final int FocusOut = 16;


The expand event type (value is 17).
*
@see org.eclipse.swt.widgets.Widget#addListener
@see org.eclipse.swt.widgets.Display#addFilter
@see org.eclipse.swt.widgets.Event
*
@see org.eclipse.swt.widgets.Tree#addTreeListener
@see org.eclipse.swt.events.TreeListener#treeExpanded
@see org.eclipse.swt.events.TreeEvent

public static final int Expand = 17;


The collapse event type (value is 18).
*
@see org.eclipse.swt.widgets.Widget#addListener
@see org.eclipse.swt.widgets.Display#addFilter
@see org.eclipse.swt.widgets.Event
*
@see org.eclipse.swt.widgets.Tree#addTreeListener
@see org.eclipse.swt.events.TreeListener#treeCollapsed
@see org.eclipse.swt.events.TreeEvent

public static final int Collapse = 18;


The iconify event type (value is 19).
*
@see org.eclipse.swt.widgets.Widget#addListener
@see org.eclipse.swt.widgets.Display#addFilter
@see org.eclipse.swt.widgets.Event
*
@see org.eclipse.swt.widgets.Shell#addShellListener
@see org.eclipse.swt.events.ShellListener#shellIconified
@see org.eclipse.swt.events.ShellEvent

public static final int Iconify = 19;


The de-iconify event type (value is 20).
*
@see org.eclipse.swt.widgets.Widget#addListener
@see org.eclipse.swt.widgets.Display#addFilter
@see org.eclipse.swt.widgets.Event
*
@see org.eclipse.swt.widgets.Shell#addShellListener
@see org.eclipse.swt.events.ShellListener#shellDeiconified
@see org.eclipse.swt.events.ShellEvent

public static final int Deiconify = 20;


The close event type (value is 21).
*
@see org.eclipse.swt.widgets.Widget#addListener
@see org.eclipse.swt.widgets.Display#addListener
@see org.eclipse.swt.widgets.Display#addFilter
@see org.eclipse.swt.widgets.Event
*
@see org.eclipse.swt.widgets.Shell#addShellListener
@see org.eclipse.swt.events.ShellListener#shellClosed
@see org.eclipse.swt.events.ShellEvent

public static final int Close = 21;


The show event type (value is 22).
*
@see org.eclipse.swt.widgets.Widget#addListener
@see org.eclipse.swt.widgets.Display#addFilter
@see org.eclipse.swt.widgets.Event
*
@see org.eclipse.swt.widgets.Menu#addMenuListener
@see org.eclipse.swt.events.MenuListener#menuShown
@see org.eclipse.swt.events.MenuEvent

public static final int Show = 22;


The hide event type (value is 23).
*
@see org.eclipse.swt.widgets.Widget#addListener
@see org.eclipse.swt.widgets.Display#addFilter
@see org.eclipse.swt.widgets.Event
*
@see org.eclipse.swt.widgets.Menu#addMenuListener
@see org.eclipse.swt.events.MenuListener#menuHidden
@see org.eclipse.swt.events.MenuEvent

public static final int Hide = 23;


The modify event type (value is 24).
*
@see org.eclipse.swt.widgets.Widget#addListener
@see org.eclipse.swt.widgets.Display#addFilter
@see org.eclipse.swt.widgets.Event
*
@see org.eclipse.swt.widgets.Combo#addModifyListener
@see org.eclipse.swt.widgets.Spinner#addModifyListener
@see org.eclipse.swt.widgets.Text#addModifyListener
@see org.eclipse.swt.events.ModifyListener#modifyText
@see org.eclipse.swt.events.ModifyEvent

public static final int Modify = 24;


The verify event type (value is 25).
*
@see org.eclipse.swt.widgets.Widget#addListener
@see org.eclipse.swt.widgets.Display#addFilter
@see org.eclipse.swt.widgets.Event
*
@see org.eclipse.swt.custom.CCombo#addVerifyListener
@see org.eclipse.swt.widgets.Combo#addVerifyListener
@see org.eclipse.swt.custom.StyledText#addVerifyListener
@see org.eclipse.swt.widgets.Text#addVerifyListener
@see org.eclipse.swt.events.VerifyListener#verifyText
@see org.eclipse.swt.events.VerifyEvent

public static final int Verify = 25;


The activate event type (value is 26).
*
@see org.eclipse.swt.widgets.Widget#addListener
@see org.eclipse.swt.widgets.Display#addFilter
@see org.eclipse.swt.widgets.Event
*
@see org.eclipse.swt.widgets.Shell#addShellListener
@see org.eclipse.swt.events.ShellListener#shellActivated
@see org.eclipse.swt.events.ShellEvent

public static final int Activate = 26;


The deactivate event type (value is 27).
*
@see org.eclipse.swt.widgets.Widget#addListener
@see org.eclipse.swt.widgets.Display#addFilter
@see org.eclipse.swt.widgets.Event
*
@see org.eclipse.swt.widgets.Shell#addShellListener
@see org.eclipse.swt.events.ShellListener#shellDeactivated
@see org.eclipse.swt.events.ShellEvent

public static final int Deactivate = 27;


The help event type (value is 28).
*
@see org.eclipse.swt.widgets.Widget#addListener
@see org.eclipse.swt.widgets.Display#addFilter
@see org.eclipse.swt.widgets.Event
*
@see org.eclipse.swt.widgets.Control#addHelpListener
@see org.eclipse.swt.widgets.Menu#addHelpListener
@see org.eclipse.swt.widgets.MenuItem#addHelpListener
@see org.eclipse.swt.events.HelpListener#helpRequested
@see org.eclipse.swt.events.HelpEvent

public static final int Help = 28;


The drag detect event type (value is 29).
*
@see org.eclipse.swt.widgets.Widget#addListener
@see org.eclipse.swt.widgets.Display#addFilter
@see org.eclipse.swt.widgets.Event
*
@see org.eclipse.swt.widgets.Control#addDragDetectListener
@see org.eclipse.swt.events.DragDetectListener#dragDetected
@see org.eclipse.swt.events.DragDetectEvent
@see org.eclipse.swt.dnd.DragSource

public static final int DragDetect = 29;


The arm event type (value is 30).
*
@see org.eclipse.swt.widgets.Widget#addListener
@see org.eclipse.swt.widgets.Display#addFilter
@see org.eclipse.swt.widgets.Event
*
@see org.eclipse.swt.widgets.MenuItem#addArmListener
@see org.eclipse.swt.events.ArmListener#widgetArmed
@see org.eclipse.swt.events.ArmEvent

public static final int Arm = 30;


The traverse event type (value is 31).
*
@see org.eclipse.swt.widgets.Widget#addListener
@see org.eclipse.swt.widgets.Display#addFilter
@see org.eclipse.swt.widgets.Event
*
@see org.eclipse.swt.widgets.Control#addTraverseListener
@see org.eclipse.swt.events.TraverseListener#keyTraversed
@see org.eclipse.swt.events.TraverseEvent

public static final int Traverse = 31;


The mouse hover event type (value is 32).
*
@see org.eclipse.swt.widgets.Widget#addListener
@see org.eclipse.swt.widgets.Display#addFilter
@see org.eclipse.swt.widgets.Event
*
@see org.eclipse.swt.widgets.Control#addMouseTrackListener
@see org.eclipse.swt.events.MouseTrackListener#mouseHover
@see org.eclipse.swt.events.MouseEvent

public static final int MouseHover = 32;


The hardware key down event type (value is 33).
*
@see org.eclipse.swt.widgets.Widget#addListener
@see org.eclipse.swt.widgets.Display#addFilter
@see org.eclipse.swt.widgets.Event

public static final int HardKeyDown = 33;


The hardware key up event type (value is 34).
*
@see org.eclipse.swt.widgets.Widget#addListener
@see org.eclipse.swt.widgets.Display#addFilter
@see org.eclipse.swt.widgets.Event

public static final int HardKeyUp = 34;


The menu detect event type (value is 35).
*
@see org.eclipse.swt.widgets.Widget#addListener
@see org.eclipse.swt.widgets.Display#addFilter
@see org.eclipse.swt.widgets.Event
*
@see org.eclipse.swt.widgets.Control#addMenuDetectListener
@see org.eclipse.swt.widgets.TrayItem#addMenuDetectListener
@see org.eclipse.swt.events.MenuDetectListener#menuDetected
@see org.eclipse.swt.events.MenuDetectEvent
*
@since 3.0

public static final int MenuDetect = 35;


The set data event type (value is 36).
*
@see org.eclipse.swt.widgets.Widget#addListener
@see org.eclipse.swt.widgets.Display#addFilter
@see org.eclipse.swt.widgets.Event
*
@see org.eclipse.swt.widgets.Table
@see org.eclipse.swt.widgets.Tree
*
@since 3.0

public static final int SetData = 36;


The mouse vertical wheel event type (value is 37).
*
@see org.eclipse.swt.widgets.Control#addMouseWheelListener
@see org.eclipse.swt.widgets.Display#addFilter
@see org.eclipse.swt.widgets.Event
*
@since 3.6

public static final int MouseVerticalWheel = 37;


The mouse horizontal wheel event type (value is 38).
*
@see org.eclipse.swt.widgets.Widget#addListener
@see org.eclipse.swt.widgets.Display#addFilter
@see org.eclipse.swt.widgets.Event
*
@since 3.6

public static final int MouseHorizontalWheel = 38;


The mouse wheel event type (value is 37).
This is a synonym for {@link #MouseVerticalWheel} (value is 37).
Newer applications should use {@link #MouseVerticalWheel} instead
of {@link #MouseWheel} to make code more understandable.
*
@see org.eclipse.swt.widgets.Control#addMouseWheelListener
@see org.eclipse.swt.widgets.Display#addFilter
@see org.eclipse.swt.widgets.Event
*
@since 3.1

public static final int MouseWheel = MouseVerticalWheel;


The settings changed event type (value is 39).
<p>
The settings changed event is sent when an operating system
property, such as a system font or color, has been changed.
The event occurs after the property has been changed, but
before any widget is redrawn.  Applications that cache operating
system properties can use this event to update their caches.
A specific property change can be detected by querying the
new value of a property and comparing it with the equivalent
cached value.  The operating system automatically redraws and
lays out all widgets after this event is sent.
</p>
*
@see org.eclipse.swt.widgets.Display#addListener
@see org.eclipse.swt.widgets.Event
*
@since 3.2

public static final int Settings = 39;


The erase item event type (value is 40).
*
@see org.eclipse.swt.widgets.Widget#addListener
@see org.eclipse.swt.widgets.Display#addFilter
@see org.eclipse.swt.widgets.Event
*
@since 3.2

public static final int EraseItem = 40;


The measure item event type (value is 41).
*
@see org.eclipse.swt.widgets.Widget#addListener
@see org.eclipse.swt.widgets.Display#addFilter
@see org.eclipse.swt.widgets.Event
*
@since 3.2

public static final int MeasureItem = 41;


The paint item event type (value is 42).
*
@see org.eclipse.swt.widgets.Widget#addListener
@see org.eclipse.swt.widgets.Display#addFilter
@see org.eclipse.swt.widgets.Event
*
@since 3.2

public static final int PaintItem = 42;


The IME composition event type (value is 43).
<p>
The IME composition event is sent to allow
custom text editors to implement in-line
editing of international text.
</p>
*
The detail field indicates the action to be taken:
<p><ul>
<li>{@link SWT#COMPOSITION_CHANGED}</li>
<li>{@link SWT#COMPOSITION_OFFSET}</li>
<li>{@link SWT#COMPOSITION_SELECTION}</li>
</ul></p>
*
@see org.eclipse.swt.widgets.Widget#addListener
@see org.eclipse.swt.widgets.Display#addFilter
@see org.eclipse.swt.widgets.Event
*
@since 3.4

public static final int ImeComposition = 43;


The orientation change event type (value is 44).
<p>
On some platforms the orientation of text widgets
can be changed by keyboard shortcut.
The application can use the <code>doit</code> field
of the event to stop the change from happening.
</p>
*
@see org.eclipse.swt.widgets.Widget#addListener
@see org.eclipse.swt.widgets.Display#addFilter
@see org.eclipse.swt.widgets.Event
*
@since 3.6

public static final int OrientationChange = 44;


The skin event type (value is 45).
*
<p>
The skin event is sent by the display when a widget needs to
be skinned.
</p>
*
@see org.eclipse.swt.widgets.Widget#addListener
@see org.eclipse.swt.widgets.Display#addFilter
@see org.eclipse.swt.widgets.Event
@see org.eclipse.swt.widgets.Widget#reskin(int)
*
@since 3.6

public static final int Skin = 45;


The open document event type (value is 46).
*
<p>
This event is sent when SWT receives notification that a document
should be opened.
</p>
*
@see org.eclipse.swt.widgets.Display#addListener
@see org.eclipse.swt.widgets.Event

@since 3.6

public static final int OpenDocument = 46;


The touch event type (value is 47).
*
<p>
This event is sent when a touch has been performed
on a touch-based input source.
</p>
*
@see org.eclipse.swt.widgets.Display#addListener
@see org.eclipse.swt.widgets.Event

@since 3.7

public static final int Touch = 47;


The gesture event type (value is 48).
*
<p>
This event is sent when a gesture has been performed.
</p>
*
@see org.eclipse.swt.widgets.Display#addListener
@see org.eclipse.swt.widgets.Event
@see SWT#GESTURE_MAGNIFY
@see SWT#GESTURE_PAN
@see SWT#GESTURE_ROTATE
@see SWT#GESTURE_SWIPE

@since 3.7

public static final int Gesture = 48;


The segments event type (value is 49).
*
<p>
This event is sent when text content has been changed.
</p>
*
@see org.eclipse.swt.widgets.Widget#addListener
@see org.eclipse.swt.widgets.Display#addFilter
@see org.eclipse.swt.widgets.Event
*
@see org.eclipse.swt.widgets.Text#addSegmentListener
@see org.eclipse.swt.events.SegmentEvent

@since 3.8

public static final int Segments = 49;


The PreEvent event type (value is 50).
*
<p>
This event is sent before an event other than {@link #PreExternalEventDispatch} or
{@link #PostExternalEventDispatch} is dispatched.
</p>
<p>
The detail field of the event contains the type of the following event.
</p>
*
@since 3.103

public static final int PreEvent = 50;


The PostEvent event type (value is 51).
*
<p>
This event is sent after an event other than {@link #PreExternalEventDispatch} or
{@link #PostExternalEventDispatch} is dispatched.
</p>
<p>
The detail field of the event contains the type of the prior event.
</p>
*
@since 3.103

public static final int PostEvent = 51;


The PreExternalEventDispatch event type (value is 52).
*
<p>
This event is sent before calling a blocking method that does its own event dispatch outside
of the SWT code.
</p>
*
@since 3.104

public static final int PreExternalEventDispatch = 52;


The PostExternalEventDispatch event type (value is 53).
*
<p>
This event is sent after calling a blocking method that does its own event dispatch outside
of the SWT code.
</p>
*
@since 3.104

public static final int PostExternalEventDispatch = 53;


@deprecated The same as PreExternalEventDispatch (value is 52).
@since 3.103

@Deprecated
public static final int Sleep = PreExternalEventDispatch;


@deprecated The same as PostExternalEventDispatch (value is 53).
@since 3.103

@Deprecated
public static final int Wakeup = PostExternalEventDispatch;

/* Event Details */


The IME composition event detail that indicates
a change in the IME composition. The text field
of the event is the new composition text.
The start and end indicate the offsets where the
composition text should be inserted.
The styles and ranges are stored in the IME
object (value is 1).
*
@see SWT#ImeComposition
*
@since 3.4

public static final int COMPOSITION_CHANGED = 1;


The IME composition event detail that indicates
that the IME needs the offset for a given location.
The x and y fields of the event are used by the
application to determine the offset.
*
The index field of the event should be set to the
text offset at that location. The count field should
be set to indicate whether the location is closer to
the leading edge (0) or the trailing edge (1) (value is 2).
*
@see SWT#ImeComposition
@see org.eclipse.swt.graphics.TextLayout#getOffset(int, int, int[])
*
@since 3.4

public static final int COMPOSITION_OFFSET = 2;


The IME composition event detail that indicates
that IME needs the selected text and its start
and end offsets (value is 3).
*
@see SWT#ImeComposition
*
@since 3.4

public static final int COMPOSITION_SELECTION = 3;


Indicates that a user-interface component is being dragged,
for example dragging the thumb of a scroll bar (value is 1).

public static final int DRAG = 1;


Event detail field that indicates a user-interface component
state is selected (value is 1<<1).
*
@since 3.2

public static final int SELECTED = 1 << 1;


Event detail field that indicates a user-interface component
state is focused (value is 1<<2).
*
@since 3.2

public static final int FOCUSED = 1 << 2;


Event detail field that indicates a user-interface component
draws the background (value is 1<<3).
*
@since 3.2

public static final int BACKGROUND = 1 << 3;


Event detail field that indicates a user-interface component
draws the foreground (value is 1<<4).
*
@since 3.2

public static final int FOREGROUND = 1 << 4;


Event detail field that indicates a user-interface component
state is hot (value is 1<<5).
*
@since 3.3

public static final int HOT = 1 << 5;

/* This code is intentionally commented */
//public static final int PRESSED = 1 << 3;
//public static final int ACTIVE = 1 << 4;
//public static final int DISABLED = 1 << 5;
//public static final int HOT = 1 << 6;
//public static final int DEFAULTED = 1 << 7;


Traversal event detail field value indicating that no
traversal action should be taken
(value is 0).

public static final int TRAVERSE_NONE = 0;


Traversal event detail field value indicating that the
key which designates that a dialog should be cancelled was
pressed; typically, this is the ESC key
(value is 1<<1).

public static final int TRAVERSE_ESCAPE = 1 << 1;


Traversal event detail field value indicating that the
key which activates the default button in a dialog was
pressed; typically, this is the ENTER key
(value is 1<<2).

public static final int TRAVERSE_RETURN = 1 << 2;


Traversal event detail field value indicating that the
key which designates that focus should be given to the
previous tab group was pressed; typically, this is the
SHIFT-TAB key sequence
(value is 1<<3).

public static final int TRAVERSE_TAB_PREVIOUS = 1 << 3;


Traversal event detail field value indicating that the
key which designates that focus should be given to the
next tab group was pressed; typically, this is the
TAB key
(value is 1<<4).

public static final int TRAVERSE_TAB_NEXT = 1 << 4;


Traversal event detail field value indicating that the
key which designates that focus should be given to the
previous tab item was pressed; typically, this is either
the LEFT-ARROW or UP-ARROW keys
(value is 1<<5).

public static final int TRAVERSE_ARROW_PREVIOUS = 1 << 5;


Traversal event detail field value indicating that the
key which designates that focus should be given to the
previous tab item was pressed; typically, this is either
the RIGHT-ARROW or DOWN-ARROW keys
(value is 1<<6).

public static final int TRAVERSE_ARROW_NEXT = 1 << 6;


Traversal event detail field value indicating that a
mnemonic key sequence was pressed
(value is 1<<7).

public static final int TRAVERSE_MNEMONIC = 1 << 7;


Traversal event detail field value indicating that the
key which designates that the previous page of a multi-page
window should be shown was pressed; typically, this
is the CTRL-PAGEUP key sequence
(value is 1<<8).

public static final int TRAVERSE_PAGE_PREVIOUS = 1 << 8;


Traversal event detail field value indicating that the
key which designates that the next page of a multi-page
window should be shown was pressed; typically, this
is the CTRL-PAGEDOWN key sequence
(value is 1<<9).

public static final int TRAVERSE_PAGE_NEXT = 1 << 9;


Gesture event detail field value indicating that a continuous
gesture is about to begin.
*
@since 3.7

public static final int GESTURE_BEGIN = 1 << 1;


Gesture event detail field value indicating that a continuous
gesture has ended.
*
@since 3.7

public static final int GESTURE_END = 1 << 2;


Gesture event detail field value indicating that a
rotation gesture has happened. Only the rotation field
of the event is valid.
*
@since 3.7

public static final int GESTURE_ROTATE = 1 << 3;


Gesture event detail field value indicating that a
swipe gesture has happened.
*
@since 3.7

public static final int GESTURE_SWIPE = 1 << 4;


Gesture event detail field value indicating that a
magnification gesture has happened.
*
@since 3.7

public static final int GESTURE_MAGNIFY = 1 << 5;


Gesture event detail field value indicating that a
panning (two-finger scroll) gesture has happened.
*
@since 3.7

public static final int GESTURE_PAN = 1 << 6;


A constant indicating that a finger touched the device.
*
@see org.eclipse.swt.widgets.Touch#state
*
@since 3.7

public static final int TOUCHSTATE_DOWN = 1 << 0;


A constant indicating that a finger moved on the device.
*
@see org.eclipse.swt.widgets.Touch#state
*
@since 3.7

public static final int TOUCHSTATE_MOVE = 1 << 1;


A constant indicating that a finger was lifted from the device.
*
@see org.eclipse.swt.widgets.Touch#state
*
@since 3.7

public static final int TOUCHSTATE_UP = 1 << 2;


MenuDetect event detail value indicating that a context menu
was requested by a mouse or other pointing device (value is 0).
*
@since 3.8

public static final int MENU_MOUSE = 0;


MenuDetect event detail value indicating that a context menu
was requested by a keyboard or other focus-based device (value is 1).
*
@since 3.8

public static final int MENU_KEYBOARD = 1;


A constant indicating that widgets have changed.
(value is 1<<1).
*
<p><b>Used By:</b><ul>
<li><code>Composite</code> layout</li>
</ul></p>
*
@see org.eclipse.swt.widgets.Composite#layout(org.eclipse.swt.widgets.Control[], int)
*
@since 3.6

public static final int CHANGED = 1 << 1;


A constant indicating that a given operation should be deferred.
(value is 1<<2).
*
<p><b>Used By:</b><ul>
<li><code>Composite</code> layout</li>
</ul></p>
*
@see org.eclipse.swt.widgets.Composite#layout(org.eclipse.swt.widgets.Control[], int)
*
@since 3.6

public static final int DEFER = 1 << 2;


A constant known to be zero (0), typically used in operations
which take bit flags to indicate that "no bits are set".

public static final int NONE = 0;


A constant known to be zero (0), used in operations which
take pointers to indicate a null argument.

public static final int NULL = 0;


Indicates that a default should be used (value is -1).

public static final int DEFAULT = -1;


Indicates that a property is off (value is 0).
*
@since 3.1

public static final int OFF = 0;


Indicates that a property is on (value is 1).
*
@since 3.1

public static final int ON = 1;


Indicates low quality (value is 1).
*
@since 3.1

public static final int LOW = 1;


Indicates high quality (value is 2).
*
@since 3.1

public static final int HIGH = 2;


Style constant for menu bar behavior (value is 1<<1).
<p><b>Used By:</b><ul>
<li><code>Menu</code></li>
</ul></p>

public static final int BAR = 1 << 1;


Style constant for drop down menu/list behavior (value is 1<<2).
<p><b>Used By:</b><ul>
<li><code>Menu</code></li>
<li><code>ToolItem</code></li>
<li><code>CoolItem</code></li>
<li><code>Combo</code></li>
<li><code>DateTime</code></li>
</ul></p>

public static final int DROP_DOWN = 1 << 2;


Style constant for pop up menu behavior (value is 1<<3).
<p><b>Used By:</b><ul>
<li><code>Menu</code></li>
</ul></p>

public static final int POP_UP = 1 << 3;


Style constant for line separator behavior (value is 1<<1).
<p><b>Used By:</b><ul>
<li><code>Label</code></li>
<li><code>MenuItem</code></li>
<li><code>ToolItem</code></li>
</ul></p>

public static final int SEPARATOR = 1 << 1;


Constant representing a flexible space separator in a ToolBar.
<p><b>Used By:</b><ul>
<li><code>ToolItem.setWidth()</code></li>
</ul></p>
*
@since 3.7
/
public static final int SEPARATOR_FILL = -2;


Style constant for toggle button behavior (value is 1<<1).
<p><b>Used By:</b><ul>
<li><code>Button</code></li>
</ul></p>

public static final int TOGGLE = 1 << 1;


Style constant for arrow button behavior (value is 1<<2).
<p><b>Used By:</b><ul>
<li><code>Button</code></li>
</ul></p>

public static final int ARROW = 1 << 2;


Style constant for push button behavior (value is 1<<3).
<p><b>Used By:</b><ul>
<li><code>Button</code></li>
<li><code>MenuItem</code></li>
<li><code>ToolItem</code></li>
</ul></p>

public static final int PUSH = 1 << 3;


Style constant for radio button behavior (value is 1<<4).
<p><b>Used By:</b><ul>
<li><code>Button</code></li>
<li><code>MenuItem</code></li>
<li><code>ToolItem</code></li>
</ul></p>

public static final int RADIO = 1 << 4;


Style constant for check box behavior (value is 1<<5).
<p><b>Used By:</b><ul>
<li><code>Button</code></li>
<li><code>MenuItem</code></li>
<li><code>ToolItem</code></li>
<li><code>Table</code></li>
<li><code>Tree</code></li>
</ul></p>

public static final int CHECK = 1 << 5;


Style constant for cascade behavior (value is 1<<6).
<p><b>Used By:</b><ul>
<li><code>MenuItem</code></li>
</ul></p>

public static final int CASCADE = 1 << 6;


Style constant for multi-selection behavior in lists
and multiple line support on text fields (value is 1<<1).
<p><b>Used By:</b><ul>
<li><code>Text</code></li>
<li><code>List</code></li>
<li><code>Table</code></li>
<li><code>Tree</code></li>
<li><code>FileDialog</code></li>
</ul></p>

public static final int MULTI = 1 << 1;


Style constant for single selection behavior in lists
and single line support on text fields (value is 1<<2).
<p><b>Used By:</b><ul>
<li><code>Text</code></li>
<li><code>List</code></li>
<li><code>Table</code></li>
<li><code>Tree</code></li>
</ul></p>

public static final int SINGLE = 1 << 2;


Style constant for read-only behavior (value is 1<<3).
<p><b>Used By:</b><ul>
<li><code>Combo</code></li>
<li><code>Text</code></li>
</ul></p>

public static final int READ_ONLY = 1 << 3;


Style constant for automatic line wrap behavior (value is 1<<6).
<p><b>Used By:</b><ul>
<li><code>Button</code></li>
<li><code>Label</code></li>
<li><code>Text</code></li>
<li><code>ToolBar</code></li>
<li><code>Spinner</code></li>
</ul></p>

public static final int WRAP = 1 << 6;


Style constant for search behavior (value is 1<<7).
<p><b>Used By:</b><ul>
<li><code>Text</code></li>
</ul></p>
*
@since 3.3

public static final int SEARCH = 1 << 7;


Style constant for simple (not drop down) behavior (value is 1<<6).
<br>Note that this is a <em>HINT</em>.
<p><b>Used By:</b><ul>
<li><code>Combo</code></li>
</ul></p>

public static final int SIMPLE = 1 << 6;


Style constant for password behavior (value is 1<<22).
<p><b>Used By:</b><ul>
<li><code>Text</code></li>
</ul></p>
*
@since 3.0

public static final int PASSWORD = 1 << 22;


Style constant for shadow in behavior (value is 1<<2).
<br>Note that this is a <em>HINT</em>.
<p><b>Used By:</b><ul>
<li><code>Label</code></li>
<li><code>Group</code></li>
</ul></p>

public static final int SHADOW_IN = 1 << 2;


Style constant for shadow out behavior (value is 1<<3).
<br>Note that this is a <em>HINT</em>.
<p><b>Used By:</b><ul>
<li><code>Label</code></li>
<li><code>Group</code></li>
<li><code>ToolBar</code></li>
</ul></p>

public static final int SHADOW_OUT = 1 << 3;


Style constant for shadow etched in behavior (value is 1<<4).
<br>Note that this is a <em>HINT</em>. It is currently ignored on all platforms.
<p><b>Used By:</b><ul>
<li><code>Group</code></li>
</ul></p>

public static final int SHADOW_ETCHED_IN = 1 << 4;


Style constant for shadow etched out behavior (value is 1<<6).
<br>Note that this is a <em>HINT</em>. It is currently ignored on all platforms.
<p><b>Used By:</b><ul>
<li><code>Group</code></li>
</ul></p>

public static final int SHADOW_ETCHED_OUT = 1 << 6;


Style constant for no shadow behavior (value is 1<<5).
<br>Note that this is a <em>HINT</em>.
<p><b>Used By:</b><ul>
<li><code>Label</code></li>
<li><code>Group</code></li>
</ul></p>

public static final int SHADOW_NONE = 1 << 5;


Style constant for progress bar behavior (value is 1<<1).
<p><b>Used By:</b><ul>
<li><code>ProgressBar</code></li>
</ul></p>

public static final int INDETERMINATE = 1 << 1;


Style constant for tool window behavior (value is 1<<2).
<p>
A tool window is a window intended to be used as a floating toolbar.
It typically has a title bar that is shorter than a normal title bar,
and the window title is typically drawn using a smaller font.
<br>Note that this is a <em>HINT</em>.
</p><p><b>Used By:</b><ul>
<li><code>Decorations</code> and subclasses</li>
</ul></p>

public static final int TOOL = 1 << 2;


Style constant to ensure no trimmings are used (value is 1<<3).
<br>Note that this overrides all other trim styles.
<p><b>Used By:</b><ul>
<li><code>Decorations</code> and subclasses</li>
</ul></p>

public static final int NO_TRIM = 1 << 3;


Style constant for resize box trim (value is 1<<4).
<p><b>Used By:</b><ul>
<li><code>Decorations</code> and subclasses</li>
<li><code>Tracker</code></li>
</ul></p>

public static final int RESIZE = 1 << 4;


Style constant for title area trim (value is 1<<5).
<p><b>Used By:</b><ul>
<li><code>Decorations</code> and subclasses</li>
</ul></p>

public static final int TITLE = 1 << 5;


Style constant for close box trim (value is 1<<6,
since we do not distinguish between CLOSE style and MENU style).
<p><b>Used By:</b><ul>
<li><code>Decorations</code> and subclasses</li>
</ul></p>

public static final int CLOSE = 1 << 6;


Style constant for shell menu trim (value is 1<<6,
since we do not distinguish between CLOSE style and MENU style).
<p><b>Used By:</b><ul>
<li><code>Decorations</code> and subclasses</li>
</ul></p>

public static final int MENU = CLOSE;


Style constant for minimize box trim (value is 1<<7).
<p><b>Used By:</b><ul>
<li><code>Decorations</code> and subclasses</li>
</ul></p>

public static final int MIN = 1 << 7;


Style constant for maximize box trim (value is 1<<10).
<p><b>Used By:</b><ul>
<li><code>Decorations</code> and subclasses</li>
</ul></p>

public static final int MAX = 1 << 10;


Style constant for the no move behavior (value is 1<<23).
Creates the title trim when no other trim style is specified.
Doesn't create the title trim when NO_TRIM is specified.
<p>Note that this is a <em>HINT</em>.
<p><b>Used By:</b><ul>
<li><code>Shell</code></li>
</ul></p>
@since 3.105

public static final int NO_MOVE = 1 << 23;


Style constant for horizontal scrollbar behavior (value is 1<<8).
<p><b>Used By:</b><ul>
<li><code>Scrollable</code> and subclasses</li>
</ul></p>

public static final int H_SCROLL = 1 << 8;


Style constant for vertical scrollbar behavior (value is 1<<9).
<p><b>Used By:</b><ul>
<li><code>Scrollable</code> and subclasses</li>
</ul></p>

public static final int V_SCROLL = 1 << 9;


Style constant for no scrollbar behavior (value is 1<<4).
<p>
When neither H_SCROLL or V_SCROLL are specified, controls
are free to create the default scroll bars for the control.
Using NO_SCROLL overrides the default and forces the control
to have no scroll bars.
*
<b>Used By:</b><ul>
<li><code>Tree</code></li>
<li><code>Table</code></li>
</ul></p>
*
@since 3.4

public static final int NO_SCROLL = 1 << 4;


Style constant for bordered behavior (value is 1<<11).
<br>Note that this is a <em>HINT</em>.
<p><b>Used By:</b><ul>
<li><code>Control</code> and subclasses</li>
</ul></p>

public static final int BORDER = 1 << 11;


Style constant indicating that the window manager should clip
a widget's children with respect to its viewable area. (value is 1<<12).
<br>Note that this is a <em>HINT</em>.
<p><b>Used By:</b><ul>
<li><code>Control</code> and subclasses</li>
</ul></p>

public static final int CLIP_CHILDREN = 1 << 12;


Style constant indicating that the window manager should clip
a widget's siblings with respect to its viewable area. (value is 1<<13).
<br>Note that this is a <em>HINT</em>.
<p><b>Used By:</b><ul>
<li><code>Control</code> and subclasses</li>
</ul></p>

public static final int CLIP_SIBLINGS = 1 << 13;


Style constant for always on top behavior (value is 1<<14).
<br>Note that this is a <em>HINT</em>.
<p><b>Used By:</b><ul>
<li><code>Shell</code> and subclasses</li>
</ul></p>

public static final int ON_TOP = 1 << 14;


Style constant for sheet window behavior (value is 1<<28).
<p>
A sheet window is a window intended to be used as a temporary modal
dialog that is attached to a parent window. It is typically used to
prompt the user before proceeding. The window trim, positioning and
general look of a sheet window is platform specific. For example,
on the Macintosh, at the time this documentation was written, the
window title is not visible.
<br>Note that this is a <em>HINT</em>.
</p><p><b>Used By:</b><ul>
<li><code>Dialog</code> and subclasses</li>
<li><code>Shell</code> and subclasses</li>
</ul></p>
*
@since 3.5

public static final int SHEET = 1 << 28;


Trim style convenience constant for the most common top level shell appearance
(value is CLOSE|TITLE|MIN|MAX|RESIZE).
<p><b>Used By:</b><ul>
<li><code>Shell</code></li>
</ul></p>

public static final int SHELL_TRIM = CLOSE | TITLE | MIN | MAX | RESIZE;


Trim style convenience constant for the most common dialog shell appearance
(value is CLOSE|TITLE|BORDER).
<p><b>Used By:</b><ul>
<li><code>Shell</code></li>
</ul></p>

public static final int DIALOG_TRIM = TITLE | CLOSE | BORDER;


Style constant for modeless behavior (value is 0).
<br>Note that this is a <em>HINT</em>.
<p><b>Used By:</b><ul>
<li><code>Dialog</code></li>
<li><code>Shell</code></li>
</ul></p>

public static final int MODELESS = 0;


Style constant for primary modal behavior (value is 1<<15).
<br>Note that this is a <em>HINT</em>.
<p><b>Used By:</b><ul>
<li><code>Dialog</code></li>
<li><code>Shell</code></li>
</ul></p>

public static final int PRIMARY_MODAL = 1 << 15;


Style constant for application modal behavior (value is 1<<16).
<br>Note that this is a <em>HINT</em>.
<p><b>Used By:</b><ul>
<li><code>Dialog</code></li>
<li><code>Shell</code></li>
</ul></p>

public static final int APPLICATION_MODAL = 1 << 16;


Style constant for system modal behavior (value is 1<<17).
<br>Note that this is a <em>HINT</em>.
<p><b>Used By:</b><ul>
<li><code>Dialog</code></li>
<li><code>Shell</code></li>
</ul></p>

public static final int SYSTEM_MODAL = 1 << 17;


Style constant for selection hiding behavior when the widget loses focus (value is 1<<15).
<br>Note that this is a <em>HINT</em>.
<p><b>Used By:</b><ul>
<li><code>Table</code></li>
</ul></p>

public static final int HIDE_SELECTION = 1 << 15;


Style constant for full row selection behavior and
selection constant indicating that a full line should be
drawn. (value is 1<<16).
<br>Note that for some widgets this is a <em>HINT</em>.
<p><b>Used By:</b><ul>
<li><code>Table</code></li>
<li><code>Tree</code></li>
<li><code>StyledText</code></li>
<li><code>TextLayout</code></li>
</ul></p>

public static final int FULL_SELECTION = 1 << 16;


Style constant for flat appearance. (value is 1<<23).
<br>Note that this is a <em>HINT</em>.
<p><b>Used By:</b><ul>
<li><code>Button</code></li>
<li><code>ToolBar</code></li>
</ul></p>

public static final int FLAT = 1 << 23;


Style constant for smooth appearance. (value is 1<<16).
<br>Note that this is a <em>HINT</em>.
<p><b>Used By:</b><ul>
<li><code>ProgressBar</code></li>
<li><code>Sash</code></li>
</ul></p>

public static final int SMOOTH = 1 << 16;


Style constant for no background behavior (value is 1<<18).
<p>
By default, before a widget paints, the client area is filled with the current background.
When this style is specified, the background is not filled, and the application is responsible
for filling every pixel of the client area.
This style might be used as an alternative to "double-buffering" in order to reduce flicker.
This style does not mean "transparent" - widgets that are obscured will not draw through.
</p><p><b>Used By:</b><ul>
<li><code>Composite</code></li>
</ul></p>

public static final int NO_BACKGROUND = 1 << 18;


Style constant for no focus from the mouse behavior (value is 1<<19).
<p>
Normally, when the user clicks on a control, focus is assigned to that
control, providing the control has no children.  Some controls, such as
tool bars and sashes, don't normally take focus when the mouse is clicked
or accept focus when assigned from within the program.  This style allows
Composites to implement "no focus" mouse behavior.
*
<br>Note that this is a <em>HINT</em>.
</p>
<p><b>Used By:</b><ul>
<li><code>Composite</code></li>
</ul></p>

public static final int NO_FOCUS = 1 << 19;


Style constant for no redraw on resize behavior (value is 1<<20).
<p>
This style stops the entire client area from being invalidated when the size
of the Canvas changes. Specifically, when the size of the Canvas gets smaller,
the SWT.Paint event is not sent. When it gets bigger, an SWT.Paint event is
sent with a GC clipped to only the new areas to be painted. Without this
style, the entire client area will be repainted.
*
<br>Note that this is a <em>HINT</em>.
</p><p><b>Used By:</b><ul>
<li><code>Composite</code></li>
</ul></p>

public static final int NO_REDRAW_RESIZE = 1 << 20;


Style constant for no paint event merging behavior (value is 1<<21).
*
<br>Note that this is a <em>HINT</em>.
<p><b>Used By:</b><ul>
<li><code>Composite</code></li>
</ul></p>

public static final int NO_MERGE_PAINTS = 1 << 21;


Style constant for preventing child radio group behavior (value is 1<<22).
<p><b>Used By:</b><ul>
<li><code>Composite</code></li>
<li><code>Menu</code></li>
</ul></p>

public static final int NO_RADIO_GROUP = 1 << 22;


Style constant for left to right orientation (value is 1<<25).
<p>
When orientation is not explicitly specified, orientation is
inherited.  This means that children will be assigned the
orientation of their parent.  To override this behavior and
force an orientation for a child, explicitly set the orientation
of the child when that child is created.
<br>Note that this is a <em>HINT</em>.
</p>
<p><b>Used By:</b><ul>
<li><code>Control</code></li>
<li><code>Menu</code></li>
<li><code>GC</code></li>
</ul></p>
*
@since 2.1.2

public static final int LEFT_TO_RIGHT = 1 << 25;


Style constant for right to left orientation (value is 1<<26).
<p>
When orientation is not explicitly specified, orientation is
inherited.  This means that children will be assigned the
orientation of their parent.  To override this behavior and
force an orientation for a child, explicitly set the orientation
of the child when that child is created.
<br>Note that this is a <em>HINT</em>.
</p>
<p><b>Used By:</b><ul>
<li><code>Control</code></li>
<li><code>Menu</code></li>
<li><code>GC</code></li>
</ul></p>
*
@since 2.1.2

public static final int RIGHT_TO_LEFT = 1 << 26;


Style constant to indicate coordinate mirroring (value is 1<<27).
<p><b>Used By:</b><ul>
<li><code>Control</code></li>
<li><code>Menu</code></li>
</ul></p>
*
@since 2.1.2

public static final int MIRRORED = 1 << 27;


Style constant to allow embedding (value is 1<<24).
<p><b>Used By:</b><ul>
<li><code>Composite</code></li>
</ul></p>
*
@since 3.0

public static final int EMBEDDED = 1 << 24;


Style constant to allow virtual data (value is 1<<28).
<p><b>Used By:</b><ul>
<li><code>Table</code></li>
<li><code>Tree</code></li>
</ul></p>
*
@since 3.0

public static final int VIRTUAL = 1 << 28;


Style constant to indicate double buffering (value is 1<<29).
<p><b>Used By:</b><ul>
<li><code>Control</code></li>
</ul></p>
*
@since 3.1

public static final int DOUBLE_BUFFERED = 1 << 29;


Style constant for transparent behavior (value is 1<<30).
<p>
By default, before a widget paints, the client area is filled with the current background.
When this style is specified, the background is not filled and widgets that are obscured
will draw through.
</p><p><b>Used By:</b><ul>
<li><code>Composite</code></li>
</ul></p>
*
@since 3.4
*
WARNING: THIS API IS UNDER CONSTRUCTION AND SHOULD NOT BE USED

public static final int TRANSPARENT = 1 << 30;


Style constant to indicate base text direction (value is 1<<31).
<p>
When the bit is set, text direction mismatches the widget orientation.
<br>Note that this is a <em>HINT</em>.
</p>
<p><b>Used By:</b><ul>
<li><code>Control</code></li>
</ul></p>
*
@see org.eclipse.swt.widgets.Control#setTextDirection(int)
@see org.eclipse.swt.widgets.Control#getTextDirection()
*
@since 3.102

public static final int FLIP_TEXT_DIRECTION = 1 << 31;


A bit mask to indicate Bidi "auto" text direction.
<p>
When the bit is set, text direction is derived from the direction of the
first strong Bidi character.
</p>
<br>Note that this is a <em>HINT</em> and it works on Windows only.
<p><b>Used By:</b><ul>
<li><code>Control</code></li>
<li><code>TextLayout</code></li>
</ul></p>
*
@see org.eclipse.swt.widgets.Control#setTextDirection(int)
@see org.eclipse.swt.graphics.TextLayout#setTextDirection(int)
*
@since 3.105

public static final int AUTO_TEXT_DIRECTION = SWT.LEFT_TO_RIGHT | SWT.RIGHT_TO_LEFT;


Style constant for align up behavior (value is 1<<7,
since align UP and align TOP are considered the same).
<p><b>Used By:</b><ul>
<li><code>Button</code> with <code>ARROW</code> style</li>
<li><code>Tracker</code></li>
<li><code>Table</code></li>
<li><code>Tree</code></li>
</ul></p>

public static final int UP = 1 << 7;


Style constant to indicate single underline (value is 0).
<p><b>Used By:</b><ul>
<li><code>TextStyle</code></li>
</ul></p>
*
@since 3.4

public static final int UNDERLINE_SINGLE = 0;


Style constant to indicate double underline (value is 1).
<p><b>Used By:</b><ul>
<li><code>TextStyle</code></li>
</ul></p>
*
@since 3.4

public static final int UNDERLINE_DOUBLE = 1;


Style constant to indicate error underline (value is 2).
<p><b>Used By:</b><ul>
<li><code>TextStyle</code></li>
</ul></p>
*
@since 3.4

public static final int UNDERLINE_ERROR = 2;


Style constant to indicate squiggle underline (value is 3).
<p><b>Used By:</b><ul>
<li><code>TextStyle</code></li>
</ul></p>
*
@since 3.4

public static final int UNDERLINE_SQUIGGLE = 3;


Style constant to indicate link underline (value is 0).
<p>
If the text color or the underline color are not set in the range
the usage of <code>UNDERLINE_LINK</code> will change these colors
to the preferred link color of the platform.<br>
Note that clients that use this style, such as <code>StyledText</code>,
will include code to track the mouse and change the cursor to the hand
cursor when mouse is over the link.
</p>
<p><b>Used By:</b><ul>
<li><code>TextStyle</code></li>
</ul></p>
*
@since 3.5

public static final int UNDERLINE_LINK = 4;


Style constant to indicate solid border (value is 1).
<p><b>Used By:</b><ul>
<li><code>TextStyle</code></li>
</ul></p>
*
@since 3.4

public static final int BORDER_SOLID = 1;


Style constant to indicate dashed border (value is 2).
<p><b>Used By:</b><ul>
<li><code>TextStyle</code></li>
</ul></p>
*
@since 3.4

public static final int BORDER_DASH = 2;


Style constant to indicate dotted border (value is 4).
<p><b>Used By:</b><ul>
<li><code>TextStyle</code></li>
</ul></p>
*
@since 3.4

public static final int BORDER_DOT = 4;


Style constant for align top behavior (value is 1<<7,
since align UP and align TOP are considered the same).
<p><b>Used By:</b><ul>
<li><code>FormAttachment</code> in a <code>FormLayout</code></li>
</ul></p>

public static final int TOP = UP;


Style constant for align down behavior (value is 1<<10,
since align DOWN and align BOTTOM are considered the same).
<p><b>Used By:</b><ul>
<li><code>Button</code> with <code>ARROW</code> style</li>
<li><code>Tracker</code></li>
<li><code>Table</code></li>
<li><code>Tree</code></li>
</ul></p>

public static final int DOWN               = 1 << 10;


Style constant for align bottom behavior (value is 1<<10,
since align DOWN and align BOTTOM are considered the same).
<p><b>Used By:</b><ul>
<li><code>FormAttachment</code> in a <code>FormLayout</code></li>
<li><code>TabFolder</code></li>
</ul></p>

public static final int BOTTOM             = DOWN;


Style constant for leading alignment (value is 1<<14).
<p><b>Used By:</b><ul>
<li><code>Button</code></li>
<li><code>Label</code></li>
<li><code>Text</code></li>
<li><code>TableColumn</code></li>
<li><code>TreeColumn</code></li>
<li><code>Tracker</code></li>
<li><code>FormAttachment</code> in a <code>FormLayout</code></li>
</ul></p>
*
@since 2.1.2

public static final int LEAD               = 1 << 14;


Style constant for align left behavior (value is 1<<14).
This is a synonym for {@link #LEAD} (value is 1<<14).  Newer
applications should use {@link #LEAD} instead of {@link #LEFT} to make code more
understandable on right-to-left platforms.
<p>
This constant can also be used to representing the left keyboard
location during a key event.
</p>

public static final int LEFT               = LEAD;


Style constant for trailing alignment (value is 1<<17).
<p><b>Used By:</b><ul>
<li><code>Button</code></li>
<li><code>Label</code></li>
<li><code>Text</code></li>
<li><code>TableColumn</code></li>
<li><code>TreeColumn</code></li>
<li><code>Tracker</code></li>
<li><code>FormAttachment</code> in a <code>FormLayout</code></li>
</ul></p>
*
@since 2.1.2

public static final int TRAIL              = 1 << 17;


Style constant for align right behavior (value is 1<<17).
This is a synonym for {@link #TRAIL} (value is 1<<17).  Newer
applications should use {@link #TRAIL} instead of {@link #RIGHT} to make code more
understandable on right-to-left platforms.
<p>
This constant can also be used to representing the right keyboard
location during a key event.
</p>

public static final int RIGHT              = TRAIL;


Style constant for align center behavior (value is 1<<24).
<p><b>Used By:</b><ul>
<li><code>Button</code></li>
<li><code>Label</code></li>
<li><code>TableColumn</code></li>
<li><code>FormAttachment</code> in a <code>FormLayout</code></li>
</ul></p>

public static final int CENTER = 1 << 24;


Style constant for horizontal alignment or orientation behavior (value is 1<<8).
<p><b>Used By:</b><ul>
<li><code>Label</code></li>
<li><code>ProgressBar</code></li>
<li><code>Sash</code></li>
<li><code>Scale</code></li>
<li><code>ScrollBar</code></li>
<li><code>Slider</code></li>
<li><code>ToolBar</code></li>
<li><code>FillLayout</code> type</li>
<li><code>RowLayout</code> type</li>
</ul></p>

public static final int HORIZONTAL = 1 << 8;


Style constant for vertical alignment or orientation behavior (value is 1<<9).
<p><b>Used By:</b><ul>
<li><code>Label</code></li>
<li><code>ProgressBar</code></li>
<li><code>Sash</code></li>
<li><code>Scale</code></li>
<li><code>ScrollBar</code></li>
<li><code>Slider</code></li>
<li><code>ToolBar</code></li>
<li><code>CoolBar</code></li>
<li><code>FillLayout</code> type</li>
<li><code>RowLayout</code> type</li>
</ul></p>

public static final int VERTICAL = 1 << 9;


Style constant for date display (value is 1<<5).
<p><b>Used By:</b><ul>
<li><code>DateTime</code></li>
</ul></p>
*
@since 3.3

public static final int DATE = 1 << 5;


Style constant for time display (value is 1<<7).
<p><b>Used By:</b><ul>
<li><code>DateTime</code></li>
</ul></p>
*
@since 3.3

public static final int TIME = 1 << 7;


Style constant for calendar display (value is 1<<10).
<p><b>Used By:</b><ul>
<li><code>DateTime</code></li>
</ul></p>
*
@since 3.3

public static final int CALENDAR = 1 << 10;


Style constant for short date/time format (value is 1<<15).
<p>
A short date displays the month and year.
A short time displays hours and minutes.
<br>Note that this is a <em>HINT</em>.
</p>
<p><b>Used By:</b><ul>
<li><code>DateTime</code></li>
</ul></p>
*
@since 3.3

public static final int SHORT = 1 << 15;


Style constant for medium date/time format (value is 1<<16).
<p>
A medium date displays the day, month and year.
A medium time displays hours, minutes, and seconds.
<br>Note that this is a <em>HINT</em>.
</p>
<p><b>Used By:</b><ul>
<li><code>DateTime</code></li>
</ul></p>
*
@since 3.3

public static final int MEDIUM = 1 << 16;


Style constant for long date/time format (value is 1<<28).
<p>
A long date displays the day, month and year.
A long time displays hours, minutes, and seconds.
The day and month names may be displayed.
<br>Note that this is a <em>HINT</em>.
</p>
<p><b>Used By:</b><ul>
<li><code>DateTime</code></li>
</ul></p>
*
@since 3.3

public static final int LONG = 1 << 28;


Style constant specifying that a Browser should use a Mozilla GRE
for rendering its content (value is 1<<15).
<p>
<p><b>Used By:</b><ul>
<li><code>Browser</code></li>
</ul></p>
*
@since 3.3

public static final int MOZILLA = 1 << 15;


Style constant specifying that a Browser should use WebKit
for rendering its content (value is 1<<16).
<p>
<p><b>Used By:</b><ul>
<li><code>Browser</code></li>
</ul></p>
*
@since 3.7

public static final int WEBKIT = 1 << 16;


Style constant for balloon behavior (value is 1<<12).
<p><b>Used By:</b><ul>
<li><code>ToolTip</code></li>
</ul></p>
*
@since 3.2

public static final int BALLOON = 1 << 12;


Style constant for vertical alignment or orientation behavior (value is 1).
<p><b>Used By:</b><ul>
<li><code>GridLayout</code> type</li>
</ul></p>

public static final int BEGINNING = 1;


Style constant for vertical alignment or orientation behavior (value is 4).
<p><b>Used By:</b><ul>
<li><code>GridLayout</code> type</li>
</ul></p>

public static final int FILL = 4;


Input Method Editor style constant for double byte
input behavior (value is 1<<1).

public static final int DBCS = 1 << 1;


Input Method Editor style constant for alpha
input behavior (value is 1<<2).

public static final int ALPHA = 1 << 2;


Input Method Editor style constant for native
input behavior (value is 1<<3).

public static final int NATIVE = 1 << 3;


Input Method Editor style constant for phonetic
input behavior (value is 1<<4).

public static final int PHONETIC = 1 << 4;


Input Method Editor style constant for romanicized
input behavior (value is 1<<5).

public static final int ROMAN = 1 << 5;


ASCII character convenience constant for the backspace character
(value is the <code>char</code> '\b').

public static final char BS = '\b';


ASCII character convenience constant for the carriage return character
(value is the <code>char</code> '\r').

public static final char CR = '\r';


ASCII character convenience constant for the delete character
(value is the <code>char</code> with value 127).

public static final char DEL = 0x7F;


ASCII character convenience constant for the escape character
(value is the <code>char</code> with value 27).

public static final char ESC = 0x1B;


ASCII character convenience constant for the line feed character
(value is the <code>char</code> '\n').

public static final char LF = '\n';


ASCII character convenience constant for the tab character
(value is the <code>char</code> '\t').
*
@since 2.1

public static final char TAB = '\t';


ASCII character convenience constant for the space character
(value is the <code>char</code> ' ').
*
@since 3.7

public static final char SPACE = ' ';


keyboard and/or mouse event mask indicating that the ALT key
was pushed on the keyboard when the event was generated
(value is 1<<16).

public static final int ALT = 1 << 16;


Keyboard and/or mouse event mask indicating that the SHIFT key
was pushed on the keyboard when the event was generated
(value is 1<<17).

public static final int SHIFT = 1 << 17;


Keyboard and/or mouse event mask indicating that the CTRL key
was pushed on the keyboard when the event was generated
(value is 1<<18).

public static final int CTRL = 1 << 18;


Keyboard and/or mouse event mask indicating that the CTRL key
was pushed on the keyboard when the event was generated. This
is a synonym for CTRL (value is 1<<18).

public static final int CONTROL = CTRL;


Keyboard and/or mouse event mask indicating that the COMMAND key
was pushed on the keyboard when the event was generated
(value is 1<<22).
*
@since 2.1

public static final int COMMAND = 1 << 22;


Keyboard and/or mouse event mask indicating all possible
keyboard modifiers.
*
To allow for the future, this mask  is intended to be used in
place of code that references  each individual keyboard mask.
 For example, the following expression will determine whether
any modifier is pressed and will continue to work as new modifier
masks are added.
*
<code>(stateMask & SWT.MODIFIER_MASK) != 0</code>.
*
@since 2.1

public static final int MODIFIER_MASK;


Keyboard and/or mouse event mask indicating that mouse button one (usually 'left')
was pushed when the event was generated. (value is 1<<19).

public static final int BUTTON1 = 1 << 19;


Keyboard and/or mouse event mask indicating that mouse button two (usually 'middle')
was pushed when the event was generated. (value is 1<<20).

public static final int BUTTON2 = 1 << 20;


Keyboard and/or mouse event mask indicating that mouse button three (usually 'right')
was pushed when the event was generated. (value is 1<<21).

public static final int BUTTON3 = 1 << 21;


Keyboard and/or mouse event mask indicating that mouse button four
was pushed when the event was generated. (value is 1<<23).
*
@since 3.1

public static final int BUTTON4 = 1 << 23;


Keyboard and/or mouse event mask indicating that mouse button five
was pushed when the event was generated. (value is 1<<25).
*
@since 3.1

public static final int BUTTON5 = 1 << 25;


Keyboard and/or mouse event mask indicating all possible
mouse buttons.
*
To allow for the future, this mask  is intended to be used
in place of code that references each individual button mask.
For example, the following expression will determine whether
any button is pressed and will continue to work as new button
masks are added.
*
<code>(stateMask & SWT.BUTTON_MASK) != 0</code>.
*
@since 2.1

public static final int BUTTON_MASK;


Keyboard and/or mouse event mask indicating that the MOD1 key
was pushed on the keyboard when the event was generated.
*
This is the primary keyboard modifier for the platform.
<p>
{@link #CTRL} on most platforms ({@link #COMMAND} on the Mac).
</p>
*
@since 2.1

public static final int MOD1;


Keyboard and/or mouse event mask indicating that the MOD2 key
was pushed on the keyboard when the event was generated.
*
This is the secondary keyboard modifier for the platform.
<p>
{@link #SHIFT} on most platforms.
</p>
*
@since 2.1

public static final int MOD2;


Keyboard and/or mouse event mask indicating that the MOD3 key
was pushed on the keyboard when the event was generated.
<p>
{@link #ALT} on most platforms.
</p>
*
@since 2.1

public static final int MOD3;


Keyboard and/or mouse event mask indicating that the MOD4 key
was pushed on the keyboard when the event was generated.
<p>
Undefined on most platforms ({@link #CTRL} on the Mac).
</p>
*
@since 2.1

public static final int MOD4;


Constants to indicate line scrolling (value is 1).
<p><b>Used By:</b><ul>
<li><code>Control</code></li>
</ul></p>
*
@since 3.1

public static final int SCROLL_LINE = 1;


Constants to indicate page scrolling (value is 2).
<p><b>Used By:</b><ul>
<li><code>Control</code></li>
</ul></p>
*
@since 3.1

public static final int SCROLL_PAGE = 2;


Accelerator constant used to differentiate a key code from a
unicode character.
*
If this bit is set, then the key stroke
portion of an accelerator represents a key code.  If this bit
is not set, then the key stroke portion of an accelerator is
a unicode character.
*
The following expression is false:
*
<code>((SWT.MOD1 | SWT.MOD2 | 'T') & SWT.KEYCODE_BIT) != 0</code>.
*
The following expression is true:
*
<code>((SWT.MOD3 | SWT.F2) & SWT.KEYCODE_BIT) != 0</code>.
*
(value is (1<<24))
*
@since 2.1

public static final int KEYCODE_BIT = (1 << 24);


Accelerator constant used to extract the key stroke portion of
an accelerator.
*
The key stroke may be a key code or a unicode
value.  If the key stroke is a key code <code>KEYCODE_BIT</code>
will be set.
*
@since 2.1

public static final int KEY_MASK = KEYCODE_BIT + 0xFFFF;


Keyboard event constant representing the UP ARROW key
(value is (1<<24)+1).

public static final int ARROW_UP = KEYCODE_BIT + 1;


Keyboard event constant representing the DOWN ARROW key
(value is (1<<24)+2).

public static final int ARROW_DOWN = KEYCODE_BIT + 2;


Keyboard event constant representing the LEFT ARROW key
(value is (1<<24)+3).

public static final int ARROW_LEFT = KEYCODE_BIT + 3;


Keyboard event constant representing the RIGHT ARROW key
(value is (1<<24)+4).

public static final int ARROW_RIGHT = KEYCODE_BIT + 4;


Keyboard event constant representing the PAGE UP key
(value is (1<<24)+5).

public static final int PAGE_UP = KEYCODE_BIT + 5;


Keyboard event constant representing the PAGE DOWN key
(value is (1<<24)+6).

public static final int PAGE_DOWN = KEYCODE_BIT + 6;


Keyboard event constant representing the HOME key
(value is (1<<24)+7).

public static final int HOME = KEYCODE_BIT + 7;


Keyboard event constant representing the END key
(value is (1<<24)+8).

public static final int END = KEYCODE_BIT + 8;


Keyboard event constant representing the INSERT key
(value is (1<<24)+9).

public static final int INSERT = KEYCODE_BIT + 9;


Keyboard event constant representing the F1 key
(value is (1<<24)+10).

public static final int F1 = KEYCODE_BIT + 10;


Keyboard event constant representing the F2 key
(value is (1<<24)+11).

public static final int F2 = KEYCODE_BIT + 11;


Keyboard event constant representing the F3 key
(value is (1<<24)+12).

public static final int F3 = KEYCODE_BIT + 12;


Keyboard event constant representing the F4 key
(value is (1<<24)+13).

public static final int F4 = KEYCODE_BIT + 13;


Keyboard event constant representing the F5 key
(value is (1<<24)+14).

public static final int F5 = KEYCODE_BIT + 14;


Keyboard event constant representing the F6 key
(value is (1<<24)+15).

public static final int F6 = KEYCODE_BIT + 15;


Keyboard event constant representing the F7 key
(value is (1<<24)+16).

public static final int F7 = KEYCODE_BIT + 16;


Keyboard event constant representing the F8 key
(value is (1<<24)+17).

public static final int F8 = KEYCODE_BIT + 17;


Keyboard event constant representing the F9 key
(value is (1<<24)+18).

public static final int F9 = KEYCODE_BIT + 18;


Keyboard event constant representing the F10 key
(value is (1<<24)+19).

public static final int F10 = KEYCODE_BIT + 19;


Keyboard event constant representing the F11 key
(value is (1<<24)+20).

public static final int F11 = KEYCODE_BIT + 20;


Keyboard event constant representing the F12 key
(value is (1<<24)+21).

public static final int F12 = KEYCODE_BIT + 21;


Keyboard event constant representing the F13 key
(value is (1<<24)+22).
*
@since 3.0

public static final int F13 = KEYCODE_BIT + 22;


Keyboard event constant representing the F14 key
(value is (1<<24)+23).
*
@since 3.0

public static final int F14 = KEYCODE_BIT + 23;


Keyboard event constant representing the F15 key
(value is (1<<24)+24).
*
@since 3.0

public static final int F15 = KEYCODE_BIT + 24;


Keyboard event constant representing the F16 key
(value is (1<<25)+25).
*
@since 3.6

public static final int F16 = KEYCODE_BIT + 25;


Keyboard event constant representing the F17 key
(value is (1<<26)+26).
*
@since 3.6

public static final int F17 = KEYCODE_BIT + 26;


Keyboard event constant representing the F18 key
(value is (1<<27)+27).
*
@since 3.6

public static final int F18 = KEYCODE_BIT + 27;


Keyboard event constant representing the F19 key
(value is (1<<28)+28).
*
@since 3.6

public static final int F19 = KEYCODE_BIT + 28;


Keyboard event constant representing the F20 key
(value is (1<<29)+29).
*
@since 3.6

public static final int F20 = KEYCODE_BIT + 29;


Keyboard event constant representing the keypad location.
(value is 1<<1).
*
@since 3.6

public static final int KEYPAD = 1 << 1;


Keyboard event constant representing the numeric key
pad multiply key (value is (1<<24)+42).
*
@since 3.0

public static final int KEYPAD_MULTIPLY = KEYCODE_BIT + 42;


Keyboard event constant representing the numeric key
pad add key (value is (1<<24)+43).
*
@since 3.0

public static final int KEYPAD_ADD = KEYCODE_BIT + 43;


Keyboard event constant representing the numeric key
pad subtract key (value is (1<<24)+45).
*
@since 3.0

public static final int KEYPAD_SUBTRACT = KEYCODE_BIT + 45;


Keyboard event constant representing the numeric key
pad decimal key (value is (1<<24)+46).
*
@since 3.0

public static final int KEYPAD_DECIMAL = KEYCODE_BIT + 46;


Keyboard event constant representing the numeric key
pad divide key (value is (1<<24)+47).
*
@since 3.0

public static final int KEYPAD_DIVIDE = KEYCODE_BIT + 47;


Keyboard event constant representing the numeric key
pad zero key (value is (1<<24)+48).
*
@since 3.0

public static final int KEYPAD_0 = KEYCODE_BIT + 48;


Keyboard event constant representing the numeric key
pad one key (value is (1<<24)+49).
*
@since 3.0

public static final int KEYPAD_1 = KEYCODE_BIT + 49;


Keyboard event constant representing the numeric key
pad two key (value is (1<<24)+50).
*
@since 3.0

public static final int KEYPAD_2 = KEYCODE_BIT + 50;


Keyboard event constant representing the numeric key
pad three key (value is (1<<24)+51).
*
@since 3.0

public static final int KEYPAD_3 = KEYCODE_BIT + 51;


Keyboard event constant representing the numeric key
pad four key (value is (1<<24)+52).
*
@since 3.0

public static final int KEYPAD_4 = KEYCODE_BIT + 52;


Keyboard event constant representing the numeric key
pad five key (value is (1<<24)+53).
*
@since 3.0

public static final int KEYPAD_5 = KEYCODE_BIT + 53;


Keyboard event constant representing the numeric key
pad six key (value is (1<<24)+54).
*
@since 3.0

public static final int KEYPAD_6 = KEYCODE_BIT + 54;


Keyboard event constant representing the numeric key
pad seven key (value is (1<<24)+55).
*
@since 3.0

public static final int KEYPAD_7 = KEYCODE_BIT + 55;


Keyboard event constant representing the numeric key
pad eight key (value is (1<<24)+56).
*
@since 3.0

public static final int KEYPAD_8 = KEYCODE_BIT + 56;


Keyboard event constant representing the numeric key
pad nine key (value is (1<<24)+57).
*
@since 3.0

public static final int KEYPAD_9 = KEYCODE_BIT + 57;


Keyboard event constant representing the numeric key
pad equal key (value is (1<<24)+61).
*
@since 3.0

public static final int KEYPAD_EQUAL = KEYCODE_BIT + 61;


Keyboard event constant representing the numeric key
pad enter key (value is (1<<24)+80).
*
@since 3.0

public static final int KEYPAD_CR = KEYCODE_BIT + 80;


Keyboard event constant representing the help
key (value is (1<<24)+81).
*
NOTE: The HELP key maps to the key labeled "help",
not "F1". If your keyboard does not have a HELP key,
you will never see this key press.  To listen for
help on a control, use SWT.Help.
*
@since 3.0
*
@see SWT#Help

public static final int HELP = KEYCODE_BIT + 81;


Keyboard event constant representing the caps
lock key (value is (1<<24)+82).
*
@since 3.0

public static final int CAPS_LOCK = KEYCODE_BIT + 82;


Keyboard event constant representing the num
lock key (value is (1<<24)+83).
*
@since 3.0

public static final int NUM_LOCK = KEYCODE_BIT + 83;


Keyboard event constant representing the scroll
lock key (value is (1<<24)+84).
*
@since 3.0

public static final int SCROLL_LOCK = KEYCODE_BIT + 84;


Keyboard event constant representing the pause
key (value is (1<<24)+85).
*
@since 3.0

public static final int PAUSE = KEYCODE_BIT + 85;


Keyboard event constant representing the break
key (value is (1<<24)+86).
*
@since 3.0

public static final int BREAK = KEYCODE_BIT + 86;


Keyboard event constant representing the print screen
key (value is (1<<24)+87).
*
@since 3.0

public static final int PRINT_SCREEN = KEYCODE_BIT + 87;


The <code>MessageBox</code> style constant for error icon
behavior (value is 1).

public static final int ICON_ERROR = 1;


The <code>MessageBox</code> style constant for information icon
behavior (value is 1<<1).

public static final int ICON_INFORMATION = 1 << 1;


The <code>MessageBox</code> style constant for question icon
behavior (value is 1<<2).

public static final int ICON_QUESTION = 1 << 2;


The <code>MessageBox</code> style constant for warning icon
behavior (value is 1<<3).

public static final int ICON_WARNING = 1 << 3;


The <code>MessageBox</code> style constant for "working" icon
behavior (value is 1<<4).

public static final int ICON_WORKING = 1 << 4;


The style constant for "search" icon. This style constant is
used with <code>Text</code> in combination with <code>SWT.SEARCH
</code> (value is 1<<9).
<br>Note that this is a <em>HINT</em>.
*
<p><b>Used By:</b><ul>
<li><code>Text</code></li>
</ul></p>
*
@see #SEARCH
@see #ICON_CANCEL
*
@since 3.5

public static final int ICON_SEARCH = 1 << 9;


The style constant for "cancel" icon. This style constant is
used with <code>Text</code> in combination with <code>SWT.SEARCH
</code> (value is 1<<8).
<br>Note that this is a <em>HINT</em>.
*
<p><b>Used By:</b><ul>
<li><code>Text</code></li>
</ul></p>
*
@see #SEARCH
@see #ICON_SEARCH
*
@since 3.5

public static final int ICON_CANCEL = 1 << 8;


The <code>MessageBox</code> style constant for an OK button;
valid combinations are OK, OK|CANCEL
(value is 1<<5).

public static final int OK = 1 << 5;


The <code>MessageBox</code> style constant for YES button;
valid combinations are YES|NO, YES|NO|CANCEL
(value is 1<<6).

public static final int YES = 1 << 6;


The <code>MessageBox</code> style constant for NO button;
valid combinations are YES|NO, YES|NO|CANCEL
(value is 1<<7).

public static final int NO = 1 << 7;


The <code>MessageBox</code> style constant for a CANCEL button;
valid combinations are OK|CANCEL, YES|NO|CANCEL, RETRY|CANCEL
(value is 1<<8).
*
<p><b>Used By:</b><ul>
<li><code>MessageBox</code></li>
</ul></p>

public static final int CANCEL = 1 << 8;


The <code>MessageBox</code> style constant for an ABORT button;
the only valid combination is ABORT|RETRY|IGNORE
(value is 1<<9).

public static final int ABORT = 1 << 9;


The <code>MessageBox</code> style constant for a RETRY button;
 valid combinations are ABORT|RETRY|IGNORE, RETRY|CANCEL
(value is 1<<10).

public static final int RETRY = 1 << 10;


The <code>MessageBox</code> style constant for an IGNORE button;
the only valid combination is ABORT|RETRY|IGNORE
(value is 1<<11).

public static final int	IGNORE = 1 << 11;


The <code>FileDialog</code> style constant for open file dialog behavior
(value is 1<<12).

public static final int OPEN = 1 << 12;


The <code>FileDialog</code> style constant for save file dialog behavior
(value is 1<<13).

public static final int SAVE = 1 << 13;


The <code>Composite</code> constant to indicate that
an attribute (such as background) is not inherited
by the children (value is 0).
*
@since 3.2

public static final int INHERIT_NONE = 0;


The <code>Composite</code> constant to indicate that
an attribute (such as background) is inherited by
children who choose this value as their "default"
(value is 1).  For example, a label child will
typically choose to inherit the background color
of a composite while a list or table will not.
*
@since 3.2

public static final int INHERIT_DEFAULT = 1;


The <code>Composite</code> constant to indicate that
an attribute (such as background) is inherited by
all children.
*
@since 3.2

public static final int INHERIT_FORCE = 2;


Default color white (value is 1).

public static final int COLOR_WHITE = 1;


Default color black (value is 2).

public static final int COLOR_BLACK = 2;


Default color red (value is 3).

public static final int COLOR_RED = 3;


Default color dark red (value is 4).

public static final int COLOR_DARK_RED = 4;


Default color green (value is 5).

public static final int COLOR_GREEN = 5;


Default color dark green (value is 6).

public static final int COLOR_DARK_GREEN = 6;


Default color yellow (value is 7).

public static final int COLOR_YELLOW = 7;


Default color dark yellow (value is 8).

public static final int COLOR_DARK_YELLOW = 8;


Default color blue (value is 9).

public static final int COLOR_BLUE = 9;


Default color dark blue (value is 10).

public static final int COLOR_DARK_BLUE = 10;


Default color magenta (value is 11).

public static final int COLOR_MAGENTA = 11;


Default color dark magenta (value is 12).

public static final int COLOR_DARK_MAGENTA = 12;


Default color cyan (value is 13).

public static final int COLOR_CYAN = 13;


Default color dark cyan (value is 14).

public static final int COLOR_DARK_CYAN = 14;


Default color gray (value is 15).

public static final int COLOR_GRAY = 15;


Default color dark gray (value is 16).

public static final int COLOR_DARK_GRAY = 16;

/*
System Colors
*
Dealing with system colors is an area where there are
many platform differences.  On some platforms, system
colors can change dynamically while the program is
running.  On other platforms, system colors can be
changed for all instances of a particular widget.
Therefore, the only truly portable method to obtain
a widget color query is to query the color from an
instance of the widget.
*
*	It is expected that the list of supported colors
will grow over time.



System color used to paint dark shadow areas (value is 17).

public static final int COLOR_WIDGET_DARK_SHADOW = 17;


System color used to paint normal shadow areas (value is 18).

public static final int COLOR_WIDGET_NORMAL_SHADOW = 18;


System color used to paint light shadow areas (value is 19).

public static final int COLOR_WIDGET_LIGHT_SHADOW = 19;


System color used to paint highlight shadow areas (value is 20).

public static final int COLOR_WIDGET_HIGHLIGHT_SHADOW = 20;


System color used to paint foreground areas (value is 21).

public static final int COLOR_WIDGET_FOREGROUND = 21;


System color used to paint background areas (value is 22).

public static final int COLOR_WIDGET_BACKGROUND = 22;


System color used to paint border areas (value is 23).

public static final int COLOR_WIDGET_BORDER = 23;


System color used to paint list foreground areas (value is 24).

public static final int COLOR_LIST_FOREGROUND = 24;


System color used to paint list background areas (value is 25).

public static final int COLOR_LIST_BACKGROUND = 25;


System color used to paint list selection background areas (value is 26).

public static final int COLOR_LIST_SELECTION = 26;


System color used to paint list selected text (value is 27).

public static final int COLOR_LIST_SELECTION_TEXT = 27;


System color used to paint tooltip text (value is 28).

public static final int COLOR_INFO_FOREGROUND = 28;


System color used to paint tooltip background areas (value is 29).

public static final int COLOR_INFO_BACKGROUND = 29;


System color used to paint title text (value is 30).

public static final int COLOR_TITLE_FOREGROUND = 30;


System color used to paint title background areas (value is 31).

public static final int COLOR_TITLE_BACKGROUND = 31;


System color used to paint title background gradient (value is 32).

public static final int COLOR_TITLE_BACKGROUND_GRADIENT = 32;


System color used to paint inactive title text (value is 33).

public static final int COLOR_TITLE_INACTIVE_FOREGROUND = 33;


System color used to paint inactive title background areas (value is 34).

public static final int COLOR_TITLE_INACTIVE_BACKGROUND = 34;


System color used to paint inactive title background gradient (value is 35).

public static final int COLOR_TITLE_INACTIVE_BACKGROUND_GRADIENT = 35;


System color used to paint link text (value is 36).
*
@since 3.102

public static final int COLOR_LINK_FOREGROUND = 36;


System color used to paint with alpha 0 (value is 37).
<p>
This pseudo-color can be used to set a transparent background on SWT
controls. <br>
Note that this is a <em>HINT</em> and may be overridden by the platform.
For example:
<ul>
<li>{@link org.eclipse.swt.widgets.Combo Combo},
{@link org.eclipse.swt.widgets.List List} and
{@link org.eclipse.swt.widgets.Tree Tree} support transparent background
on GTK3 and Windows only.</li>
<li>{@link org.eclipse.swt.widgets.Text Text} supports transparent
background on Windows only whereas {@link org.eclipse.swt.widgets.Table
Table} supports transparent background on GTK3 only.</li>
</ul>
*
@since 3.104

public static final int COLOR_TRANSPARENT = 37;


Draw constant indicating whether the drawing operation
should fill the background (value is 1<<0).

public static final int DRAW_TRANSPARENT = 1 << 0;


Draw constant indicating whether the string drawing operation
should handle line-delimiters (value is 1<<1).

public static final int DRAW_DELIMITER = 1 << 1;


Draw constant indicating whether the string drawing operation
should expand TAB characters (value is 1<<2).

public static final int DRAW_TAB = 1 << 2;


Draw constant indicating whether the string drawing operation
should handle mnemonics (value is 1<<3).

public static final int DRAW_MNEMONIC = 1 << 3;


Selection constant indicating that a line delimiter should be
drawn (value is 1<<17).
*
<p><b>Used By:</b><ul>
<li><code>TextLayout</code></li>
</ul></p>
*
@see #FULL_SELECTION
@see #LAST_LINE_SELECTION
*
@since 3.3

public static final int DELIMITER_SELECTION = 1 << 17;


Selection constant indicating that the last line is selected
to the end and should be drawn using either a line delimiter
or full line selection (value is 1<<20).
*
<p><b>Used By:</b><ul>
<li><code>TextLayout</code></li>
</ul></p>
*
@see #DELIMITER_SELECTION
@see #FULL_SELECTION
*
@since 3.3

public static final int LAST_LINE_SELECTION = 1 << 20;


SWT error constant indicating that no error number was specified
(value is 1).

public static final int ERROR_UNSPECIFIED = 1;


SWT error constant indicating that no more handles for an
operating system resource are available
(value is 2).

public static final int ERROR_NO_HANDLES = 2;


SWT error constant indicating that no more callback resources are available
(value is 3).

public static final int ERROR_NO_MORE_CALLBACKS = 3;


SWT error constant indicating that a null argument was passed in
(value is 4).

public static final int ERROR_NULL_ARGUMENT = 4;


SWT error constant indicating that an invalid argument was passed in
(value is 5).

public static final int ERROR_INVALID_ARGUMENT = 5;


SWT error constant indicating that a value was found to be
outside the allowable range
(value is 6).

public static final int ERROR_INVALID_RANGE = 6;


SWT error constant indicating that a value which can not be
zero was found to be
(value is 7).

public static final int ERROR_CANNOT_BE_ZERO = 7;


SWT error constant indicating that the underlying operating
system was unable to provide the value of an item
(value is 8).

public static final int ERROR_CANNOT_GET_ITEM = 8;


SWT error constant indicating that the underlying operating
system was unable to provide the selection
(value is 9).

public static final int ERROR_CANNOT_GET_SELECTION = 9;


SWT error constant indicating that the matrix is not invertible
(value is 10).
*
@since 3.1

public static final int ERROR_CANNOT_INVERT_MATRIX = 10;


SWT error constant indicating that the underlying operating
system was unable to provide the height of an item
(value is 11).

public static final int ERROR_CANNOT_GET_ITEM_HEIGHT = 11;


SWT error constant indicating that the underlying operating
system was unable to provide the text of a widget
(value is 12).

public static final int ERROR_CANNOT_GET_TEXT = 12;


SWT error constant indicating that the underlying operating
system was unable to set the text of a widget
(value is 13).

public static final int ERROR_CANNOT_SET_TEXT = 13;


SWT error constant indicating that the underlying operating
system was unable to add an item
(value is 14).

public static final int ERROR_ITEM_NOT_ADDED = 14;


SWT error constant indicating that the underlying operating
system was unable to remove an item
(value is 15).

public static final int ERROR_ITEM_NOT_REMOVED = 15;


SWT error constant indicating that the graphics library
is not available
(value is 16).

public static final int ERROR_NO_GRAPHICS_LIBRARY = 16;


SWT error constant indicating that a particular feature has
not been implemented on this platform
(value is 20).

public static final int ERROR_NOT_IMPLEMENTED = 20;


SWT error constant indicating that a menu which needed
to have the drop down style had some other style instead
(value is 21).

public static final int ERROR_MENU_NOT_DROP_DOWN = 21;


SWT error constant indicating that an attempt was made to
invoke an SWT operation which can only be executed by the
user-interface thread from some other thread
(value is 22).

public static final int ERROR_THREAD_INVALID_ACCESS = 22;


SWT error constant indicating that an attempt was made to
invoke an SWT operation using a widget which had already
been disposed
(value is 24).

public static final int ERROR_WIDGET_DISPOSED = 24;


SWT error constant indicating that a menu item which needed
to have the cascade style had some other style instead
(value is 27).

public static final int ERROR_MENUITEM_NOT_CASCADE = 27;


SWT error constant indicating that the underlying operating
system was unable to set the selection of a widget
(value is 28).

public static final int ERROR_CANNOT_SET_SELECTION = 28;


SWT error constant indicating that the underlying operating
system was unable to set the menu
(value is 29).

public static final int ERROR_CANNOT_SET_MENU = 29;


SWT error constant indicating that the underlying operating
system was unable to set the enabled state
(value is 30).

public static final int ERROR_CANNOT_SET_ENABLED = 30;


SWT error constant indicating that the underlying operating
system was unable to provide enabled/disabled state information
(value is 31).

public static final int ERROR_CANNOT_GET_ENABLED = 31;


SWT error constant indicating that a provided widget can
not be used as a parent in the current operation
(value is 32).

public static final int ERROR_INVALID_PARENT = 32;


SWT error constant indicating that a menu which needed
to have the menu bar style had some other style instead
(value is 33).

public static final int ERROR_MENU_NOT_BAR = 33;


SWT error constant indicating that the underlying operating
system was unable to provide count information
(value is 36).

public static final int ERROR_CANNOT_GET_COUNT = 36;


SWT error constant indicating that a menu which needed
to have the pop up menu style had some other style instead
(value is 37).

public static final int ERROR_MENU_NOT_POP_UP = 37;


SWT error constant indicating that a graphics operation
was attempted with an image of an unsupported depth
(value is 38).

public static final int ERROR_UNSUPPORTED_DEPTH = 38;


SWT error constant indicating that an input/output operation
failed during the execution of an SWT operation
(value is 39).

public static final int ERROR_IO = 39;


SWT error constant indicating that a graphics operation
was attempted with an image having an invalid format
(value is 40).

public static final int ERROR_INVALID_IMAGE = 40;


SWT error constant indicating that a graphics operation
was attempted with an image having a valid but unsupported
format
(value is 42).

public static final int ERROR_UNSUPPORTED_FORMAT = 42;


SWT error constant indicating that an attempt was made
to subclass an SWT widget class without implementing the
<code>checkSubclass()</code> method
(value is 43).
*
For additional information see the comment in
<code>Widget.checkSubclass()</code>.
*
@see org.eclipse.swt.widgets.Widget#checkSubclass

public static final int ERROR_INVALID_SUBCLASS = 43;


SWT error constant indicating that an attempt was made to
invoke an SWT operation using a graphics object which had
already been disposed
(value is 44).

public static final int ERROR_GRAPHIC_DISPOSED = 44;


SWT error constant indicating that an attempt was made to
invoke an SWT operation using a device which had already
been disposed
(value is 45).

public static final int ERROR_DEVICE_DISPOSED = 45;


SWT error constant indicating that an exception happened
when executing a runnable
(value is 46).

public static final int ERROR_FAILED_EXEC = 46;


SWT error constant indicating that an unsatisfied link
error occurred while attempting to load a library
(value is 47).
*
@since 3.1

public static final int ERROR_FAILED_LOAD_LIBRARY = 47;


SWT error constant indicating that a font is not valid
(value is 48).
*
@since 3.1

public static final int ERROR_INVALID_FONT = 48;


SWT error constant indicating that an attempt was made to
use an BrowserFunction object which had already been disposed
(value is 49).
*
@since 3.5

public static final int ERROR_FUNCTION_DISPOSED = 49;


SWT error constant indicating that an exception happened
when evaluating a javascript expression
(value is 50).
*
@since 3.5

public static final int ERROR_FAILED_EVALUATE = 50;


SWT error constant indicating that an invalid value was returned
(value is 51).
*
@since 3.5

public static final int ERROR_INVALID_RETURN_VALUE = 51;


Constant indicating that an image or operation is of type bitmap  (value is 0).

public static final int BITMAP = 0;


Constant indicating that an image or operation is of type icon  (value is 1).

public static final int ICON = 1;


The <code>Image</code> constructor argument indicating that
the new image should be a copy of the image provided as
an argument  (value is 0).

public static final int IMAGE_COPY = 0;


The <code>Image</code> constructor argument indicating that
the new image should have the appearance of a "disabled"
(using the platform's rules for how this should look)
copy of the image provided as an argument  (value is 1).

public static final int IMAGE_DISABLE = 1;


The <code>Image</code> constructor argument indicating that
the new image should have the appearance of a "gray scaled"
copy of the image provided as an argument  (value is 2).

public static final int IMAGE_GRAY = 2;


Constant to indicate an error state (value is 1).
<p><b>Used By:</b><ul>
<li><code>ProgressBar</code></li>
</ul></p>
*
@since 3.4

public static final int ERROR = 1;


Constant to a indicate a paused state (value is 4).
<p><b>Used By:</b><ul>
<li><code>ProgressBar</code></li>
</ul></p>
*
@since 3.4

public static final int PAUSED = 1 << 2;


The font style constant indicating a normal weight, non-italic font
(value is 0). This constant is also used with <code>ProgressBar</code>
to indicate a normal state.
<p><b>Used By:</b><ul>
<li><code>ProgressBar</code></li>
</ul></p>

public static final int NORMAL = 0;


The font style constant indicating a bold weight font
(value is 1<<0).

public static final int BOLD = 1 << 0;


The font style constant indicating an italic font
(value is 1<<1).

public static final int ITALIC = 1 << 1;


System arrow cursor  (value is 0).

public static final int CURSOR_ARROW = 0;


System wait cursor  (value is 1).

public static final int CURSOR_WAIT = 1;


System cross hair cursor  (value is 2).

public static final int CURSOR_CROSS = 2;


System app startup cursor  (value is 3).

public static final int CURSOR_APPSTARTING = 3;


System help cursor  (value is 4).

public static final int CURSOR_HELP = 4;


System resize all directions cursor (value is 5).

public static final int CURSOR_SIZEALL = 5;


System resize north-east-south-west cursor  (value is 6).

public static final int CURSOR_SIZENESW = 6;


System resize north-south cursor  (value is 7).

public static final int CURSOR_SIZENS = 7;


System resize north-west-south-east cursor  (value is 8).

public static final int CURSOR_SIZENWSE = 8;


System resize west-east cursor  (value is 9).

public static final int CURSOR_SIZEWE = 9;


System resize north cursor  (value is 10).

public static final int CURSOR_SIZEN = 10;


System resize south cursor  (value is 11).

public static final int CURSOR_SIZES = 11;


System resize east cursor  (value is 12).

public static final int CURSOR_SIZEE = 12;


System resize west cursor  (value is 13).

public static final int CURSOR_SIZEW = 13;


System resize north-east cursor (value is 14).

public static final int CURSOR_SIZENE = 14;


System resize south-east cursor (value is 15).

public static final int CURSOR_SIZESE = 15;


System resize south-west cursor (value is 16).

public static final int CURSOR_SIZESW = 16;


System resize north-west cursor (value is 17).

public static final int CURSOR_SIZENW = 17;


System up arrow cursor  (value is 18).

public static final int CURSOR_UPARROW = 18;


System i-beam cursor (value is 19).

public static final int CURSOR_IBEAM = 19;


System "not allowed" cursor (value is 20).

public static final int CURSOR_NO = 20;


System hand cursor (value is 21).

public static final int CURSOR_HAND = 21;


Line drawing style for flat end caps (value is 1).
*
@see org.eclipse.swt.graphics.GC#setLineCap(int)
@see org.eclipse.swt.graphics.GC#getLineCap()
*
@since 3.1

public static final int CAP_FLAT = 1;


Line drawing style for rounded end caps (value is 2).
*
@see org.eclipse.swt.graphics.GC#setLineCap(int)
@see org.eclipse.swt.graphics.GC#getLineCap()
*
@since 3.1

public static final int CAP_ROUND = 2;


Line drawing style for square end caps (value is 3).
*
@see org.eclipse.swt.graphics.GC#setLineCap(int)
@see org.eclipse.swt.graphics.GC#getLineCap()
*
@since 3.1

public static final int CAP_SQUARE = 3;


Line drawing style for miter joins (value is 1).
*
@see org.eclipse.swt.graphics.GC#setLineJoin(int)
@see org.eclipse.swt.graphics.GC#getLineJoin()
*
@since 3.1

public static final int JOIN_MITER = 1;


Line drawing  style for rounded joins (value is 2).
*
@see org.eclipse.swt.graphics.GC#setLineJoin(int)
@see org.eclipse.swt.graphics.GC#getLineJoin()
*
@since 3.1

public static final int JOIN_ROUND = 2;


Line drawing style for bevel joins (value is 3).
*
@see org.eclipse.swt.graphics.GC#setLineJoin(int)
@see org.eclipse.swt.graphics.GC#getLineJoin()
*
@since 3.1

public static final int JOIN_BEVEL = 3;


Line drawing style for solid lines  (value is 1).

public static final int LINE_SOLID = 1;


Line drawing style for dashed lines (value is 2).

public static final int LINE_DASH = 2;


Line drawing style for dotted lines (value is 3).

public static final int LINE_DOT = 3;


Line drawing style for alternating dash-dot lines (value is 4).

public static final int LINE_DASHDOT = 4;


Line drawing style for dash-dot-dot lines (value is 5).

public static final int LINE_DASHDOTDOT = 5;


Line drawing style for custom dashed lines (value is 6).
*
@see org.eclipse.swt.graphics.GC#setLineDash(int[])
@see org.eclipse.swt.graphics.GC#getLineDash()
*
@since 3.1

public static final int LINE_CUSTOM = 6;


Path constant that represents a "move to" operation (value is 1).
*
@since 3.1

public static final int PATH_MOVE_TO = 1;


Path constant that represents a "line to" operation (value is 2).
*
@since 3.1

public static final int PATH_LINE_TO = 2;


Path constant that represents a "quadratic curve to" operation (value is 3).
*
@since 3.1

public static final int PATH_QUAD_TO = 3;


Path constant that represents a "cubic curve to" operation (value is 4).
*
@since 3.1

public static final int PATH_CUBIC_TO = 4;


Path constant that represents a "close" operation (value is 5).
*
@since 3.1

public static final int PATH_CLOSE = 5;


Even odd rule for filling operations (value is 1).
*
@since 3.1

public static final int FILL_EVEN_ODD = 1;


Winding rule for filling operations (value is 2).
*
@since 3.1

public static final int FILL_WINDING = 2;


Image format constant indicating an unknown image type (value is -1).

public static final int IMAGE_UNDEFINED = -1;


Image format constant indicating a Windows BMP format image (value is 0).

public static final int IMAGE_BMP = 0;


Image format constant indicating a run-length encoded
Windows BMP format image (value is 1).

public static final int IMAGE_BMP_RLE = 1;


Image format constant indicating a GIF format image (value is 2).

public static final int IMAGE_GIF = 2;


Image format constant indicating a ICO format image (value is 3).

public static final int IMAGE_ICO = 3;


Image format constant indicating a JPEG format image (value is 4).

public static final int IMAGE_JPEG = 4;


Image format constant indicating a PNG format image (value is 5).

public static final int IMAGE_PNG = 5;


Image format constant indicating a TIFF format image (value is 6).

public static final int IMAGE_TIFF = 6;


Image format constant indicating an OS/2 BMP format image (value is 7).

public static final int IMAGE_OS2_BMP = 7;


GIF image disposal method constants indicating that the
disposal method is unspecified (value is 0).

public static final int DM_UNSPECIFIED = 0x0;


GIF image disposal method constants indicating that the
disposal method is to do nothing; that is, to leave the
previous image in place (value is 1).

public static final int DM_FILL_NONE = 0x1;


GIF image disposal method constants indicating that the
the previous images should be covered with the background
color before displaying the next image (value is 2).

public static final int DM_FILL_BACKGROUND = 0x2;


GIF image disposal method constants indicating that the
disposal method is to restore the previous picture
(value is 3).

public static final int DM_FILL_PREVIOUS = 0x3;


Image transparency constant indicating that the image
contains no transparency information (value is 0).

public static final int TRANSPARENCY_NONE = 0x0;


Image transparency constant indicating that the image
contains alpha transparency information (value is 1<<0).

public static final int TRANSPARENCY_ALPHA = 1 << 0;


Image transparency constant indicating that the image
contains a transparency mask (value is 1<<1).

public static final int TRANSPARENCY_MASK = 1 << 1;


Image transparency constant indicating that the image
contains a transparent pixel (value is 1<<2).

public static final int TRANSPARENCY_PIXEL = 1 << 2;


The character movement type (value is 1<<0).
This constant is used to move a text offset over a character.
*
@see org.eclipse.swt.graphics.TextLayout#getNextOffset(int, int)
@see org.eclipse.swt.graphics.TextLayout#getPreviousOffset(int, int)
*
@since 3.0

public static final int MOVEMENT_CHAR = 1 << 0;


The cluster movement type (value is 1<<1).
This constant is used to move a text offset over a cluster.
A cluster groups one or more characters. A cluster is
undivisible, this means that a caret offset can not be placed in the
middle of a cluster.
*
@see org.eclipse.swt.graphics.TextLayout#getNextOffset(int, int)
@see org.eclipse.swt.graphics.TextLayout#getPreviousOffset(int, int)
*
@since 3.0

public static final int MOVEMENT_CLUSTER = 1 << 1;


The word movement type (value is 1<<2).
This constant is used to move a text offset over a word.
The behavior of this constant depends on the platform and on the
direction of the movement. For example, on Windows the stop is
always at the start of the word. On GTK and Mac the stop is at the end
of the word if the direction is next and at the start of the word if the
direction is previous.
*
@see org.eclipse.swt.graphics.TextLayout#getNextOffset(int, int)
@see org.eclipse.swt.graphics.TextLayout#getPreviousOffset(int, int)
*
@since 3.0

public static final int MOVEMENT_WORD = 1 << 2;


The word end movement type (value is 1<<3).
This constant is used to move a text offset to the next or previous
word end. The behavior of this constant does not depend on the platform.
*
*
@see org.eclipse.swt.graphics.TextLayout#getNextOffset(int, int)
@see org.eclipse.swt.graphics.TextLayout#getPreviousOffset(int, int)
*
@since 3.3

public static final int MOVEMENT_WORD_END = 1 << 3;


The word start movement type (value is 1<<4).
This constant is used to move a text offset to the next or previous
word start. The behavior of this constant does not depend on the platform.
*
@see org.eclipse.swt.graphics.TextLayout#getNextOffset(int, int)
@see org.eclipse.swt.graphics.TextLayout#getPreviousOffset(int, int)
*
@since 3.3

public static final int MOVEMENT_WORD_START = 1 << 4;


A constant indicating that a given operation should be performed on
all widgets (value is 1<<0).
*
<p><b>Used By:</b><ul>
<li><code>Composite</code> layout</li>
</ul></p>
*
@see org.eclipse.swt.widgets.Composite#layout(org.eclipse.swt.widgets.Control[], int)
*
@since 3.6

public static final int ALL = 1 << 0;


ID for the About menu item (value is -1).
*
@see org.eclipse.swt.widgets.MenuItem#setID(int)
@see org.eclipse.swt.widgets.MenuItem#getID()
*
@since 3.7

public static final int ID_ABOUT = -1;


ID for the Preferences menu item (value is -2).
*
@see org.eclipse.swt.widgets.MenuItem#setID(int)
@see org.eclipse.swt.widgets.MenuItem#getID()
*
@since 3.7

public static final int ID_PREFERENCES = -2;


ID for the Hide menu item (value is -3).
*
@see org.eclipse.swt.widgets.MenuItem#setID(int)
@see org.eclipse.swt.widgets.MenuItem#getID()
*
@since 3.7

public static final int ID_HIDE = -3;


ID for the Hide Others menu item (value is -4).
*
@see org.eclipse.swt.widgets.MenuItem#setID(int)
@see org.eclipse.swt.widgets.MenuItem#getID()
*
@since 3.7

public static final int ID_HIDE_OTHERS = -4;


ID for the Show All menu item (value is -5).
*
@see org.eclipse.swt.widgets.MenuItem#setID(int)
@see org.eclipse.swt.widgets.MenuItem#getID()
*
@since 3.7

public static final int ID_SHOW_ALL = -5;


ID for the Quit menu item (value is -6).
*
@see org.eclipse.swt.widgets.MenuItem#setID(int)
@see org.eclipse.swt.widgets.MenuItem#getID()
*
@since 3.7

public static final int ID_QUIT = -6;


Key name for setting and getting the skin class of a widget.
<p>
Note: SWT currently doesn't read or process this property. The only
effect of setting this property is to trigger a call to
{@link Widget#reskin(int) Widget#reskin(SWT.ALL)}.
</p>
*
@see org.eclipse.swt.widgets.Widget#getData(String)
@see org.eclipse.swt.widgets.Widget#setData(String, Object)
*
@since 3.6

public static final String SKIN_CLASS = "org.eclipse.swt.skin.class"; //$NON-NLS-1$


Key name for setting and getting the skin id of a widget.
<p>
Note: SWT currently doesn't read or process this property. The only
effect of setting this property is to trigger a call to
{@link Widget#reskin(int) Widget#reskin(SWT.ALL)}.
</p>
*
@see org.eclipse.swt.widgets.Widget#getData(String)
@see org.eclipse.swt.widgets.Widget#setData(String, Object)
*
@since 3.6

public static final String SKIN_ID = "org.eclipse.swt.skin.id"; //$NON-NLS-1$


The <code>Scrollable</code> constant to indicate that
the receiver is using overlay scrollbars. (value is 1)
*
@since 3.8

public static final int SCROLLBAR_OVERLAY = 1 << 1;


Returns a boolean indicating whether this SWT implementation can
be loaded.  Examples of criteria that may be used to determine this
include the OS and architecture of the JRE that is being used.

@return <code>true</code> if this SWT implementation can be loaded
and <code>false</code> otherwise

@since 3.8
------------
Answers a concise, human readable description of the error code.

@param code the SWT error code.
@return a description of the error code.

@see SWT
------------
Returns the NLS'ed message for the given argument.

@param key the key to look up
@return the message for the given key

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the key is null</li>
</ul>
------------
Returns the NLS'ed message for the given arguments.

@param key the key to look up
@param args the parameters to insert into the message
@return the message for the given parameterized key

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the key or args are null</li>
</ul>

@since 3.8
------------
Returns the SWT platform name.
Examples: "win32", "gtk", "cocoa"

@return the SWT platform name
------------
Returns the SWT version number as an integer.
Example: "SWT051" == 51

@return the SWT version number
------------
Throws an appropriate exception based on the passed in error code.

@param code the SWT error code
------------
Throws an appropriate exception based on the passed in error code.
The <code>throwable</code> argument should be either null, or the
throwable which caused SWT to throw an exception.
<p>
In SWT, errors are reported by throwing one of three exceptions:
<dl>
<dd>java.lang.IllegalArgumentException</dd>
<dt>thrown whenever one of the API methods is invoked with an illegal argument</dt>
<dd>org.eclipse.swt.SWTException (extends java.lang.RuntimeException)</dd>
<dt>thrown whenever a recoverable error happens internally in SWT</dt>
<dd>org.eclipse.swt.SWTError (extends java.lang.Error)</dd>
<dt>thrown whenever a <b>non-recoverable</b> error happens internally in SWT</dt>
</dl>
This method provides the logic which maps between error codes
and one of the above exceptions.
</p>

@param code the SWT error code.
@param throwable the exception which caused the error to occur.

@see SWTError
@see SWTException
@see IllegalArgumentException
------------
Throws an appropriate exception based on the passed in error code.
The <code>throwable</code> argument should be either null, or the
throwable which caused SWT to throw an exception.
<p>
In SWT, errors are reported by throwing one of three exceptions:
<dl>
<dd>java.lang.IllegalArgumentException</dd>
<dt>thrown whenever one of the API methods is invoked with an illegal argument</dt>
<dd>org.eclipse.swt.SWTException (extends java.lang.RuntimeException)</dd>
<dt>thrown whenever a recoverable error happens internally in SWT</dt>
<dd>org.eclipse.swt.SWTError (extends java.lang.Error)</dd>
<dt>thrown whenever a <b>non-recoverable</b> error happens internally in SWT</dt>
</dl>
This method provides the logic which maps between error codes
and one of the above exceptions.
</p>

@param code the SWT error code.
@param throwable the exception which caused the error to occur.
@param detail more information about error.

@see SWTError
@see SWTException
@see IllegalArgumentException

@since 3.0

====== SWTError.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
This error is thrown whenever an unrecoverable error
occurs internally in SWT. The message text and error code
provide a further description of the problem. The exception
has a <code>throwable</code> field which holds the underlying
throwable that caused the problem (if this information is
available (i.e. it may be null)).
<p>
SWTErrors are thrown when something fails internally which
either leaves SWT in an unknown state (eg. the o/s call to
remove an item from a list returns an error code) or when SWT
is left in a known-to-be-unrecoverable state (eg. it runs out
of callback resources). SWTErrors should not occur in typical
programs, although "high reliability" applications should
still catch them.
</p><p>
This class also provides support methods used by SWT to match
error codes to the appropriate exception class (SWTError,
SWTException, or IllegalArgumentException) and to provide
human readable strings for SWT error codes.
</p>

@see SWTException
@see SWT#error(int)
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
------------
The SWT error code, one of SWT.ERROR_*.
/
public int code;


The underlying throwable that caused the problem,
or null if this information is not available.

public Throwable throwable;

static final long serialVersionUID = 3833467327105808433L;


Constructs a new instance of this class with its
stack trace filled in. The error code is set to an
unspecified value.
------------
Constructs a new instance of this class with its
stack trace and message filled in. The error code is
set to an unspecified value.  Specifying <code>null</code>
as the message is equivalent to specifying an empty string.

@param message the detail message for the exception
------------
Constructs a new instance of this class with its
stack trace and error code filled in.

@param code the SWT error code
------------
Constructs a new instance of this class with its
stack trace, error code and message filled in.
Specifying <code>null</code> as the message is
equivalent to specifying an empty string.

@param code the SWT error code
@param message the detail message for the exception
------------
Returns the underlying throwable that caused the problem,
or null if this information is not available.
<p>
NOTE: This method overrides Throwable.getCause() that was
added to JDK1.4. It is necessary to override this method
in order for inherited printStackTrace() methods to work.
</p>
@return the underlying throwable

@since 3.1
------------
Returns the string describing this SWTError object.
<p>
It is combined with the message string of the Throwable
which caused this SWTError (if this information is available).
</p>
@return the error message string of this SWTError object
------------
Outputs a printable representation of this error's
stack trace on the standard error stream.
<p>
Note: printStackTrace(PrintStream) and printStackTrace(PrintWriter)
are not provided in order to maintain compatibility with CLDC.
</p>

====== SWTEventListener.java ======
Copyright (c) 2000, 2014 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
This interface is the cross-platform version of the
java.util.EventListener interface.
<p>
It is part of our effort to provide support for both J2SE
and J2ME platforms. Under this scheme, classes need to
implement SWTEventListener instead of java.util.EventListener.
</p>
<p>
Note: java.util.EventListener is not part of CDC and CLDC.
</p>
@noreference This interface is not intended to be referenced by clients.

====== SWTException.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
This runtime exception is thrown whenever a recoverable error
occurs internally in SWT. The message text and error code
provide a further description of the problem. The exception
has a <code>throwable</code> field which holds the underlying
exception that caused the problem (if this information is
available (i.e. it may be null)).
<p>
SWTExceptions are thrown when something fails internally,
but SWT is left in a known stable state (eg. a widget call
was made from a non-u/i thread, or there is failure while
reading an Image because the source file was corrupt).
</p>

@see SWTError
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
------------
The SWT error code, one of SWT.ERROR_*.

public int code;


The underlying throwable that caused the problem,
or null if this information is not available.

public Throwable throwable;

static final long serialVersionUID = 3257282552304842547L;


Constructs a new instance of this class with its
stack trace filled in. The error code is set to an
unspecified value.
------------
Constructs a new instance of this class with its
stack trace and message filled in. The error code is
set to an unspecified value.  Specifying <code>null</code>
as the message is equivalent to specifying an empty string.

@param message the detail message for the exception
------------
Constructs a new instance of this class with its
stack trace and error code filled in.

@param code the SWT error code
------------
Constructs a new instance of this class with its
stack trace, error code and message filled in.
Specifying <code>null</code> as the message is
equivalent to specifying an empty string.

@param code the SWT error code
@param message the detail message for the exception
------------
Returns the underlying throwable that caused the problem,
or null if this information is not available.
<p>
NOTE: This method overrides Throwable.getCause() that was
added to JDK1.4. It is necessary to override this method
in order for inherited printStackTrace() methods to work.
</p>
@return the underlying throwable

@since 3.1
------------
Returns the string describing this SWTException object.
<p>
It is combined with the message string of the Throwable
which caused this SWTException (if this information is available).
</p>
@return the error message string of this SWTException object
------------
Outputs a printable representation of this exception's
stack trace on the standard error stream.
<p>
Note: printStackTrace(PrintStream) and printStackTrace(PrintWriter)
are not provided in order to maintain compatibility with CLDC.
</p>

====== Synchronizer.java ======
Copyright (c) 2000, 2014 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class provide synchronization support
for displays. A default instance is created automatically
for each display, and this instance is sufficient for almost
all applications.
<p>
<b>IMPORTANT:</b> Typical application code <em>never</em>
needs to deal with this class. It is provided only to
allow applications which require non-standard
synchronization behavior to plug in the support they
require. <em>Subclasses which override the methods in
this class must ensure that the superclass methods are
invoked in their implementations</em>
</p>

@see Display#setSynchronizer
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
------------
Constructs a new instance of this class.

@param display the display to create the synchronizer on
------------
Removes all pending events from the receiver and inserts them into the beginning of the given
synchronizer's queue

@param toReceiveTheEvents the synchronizer that will receive the events
------------
Adds the given events to the beginning of the message queue, to
be processed in order.

@param toAdd events to add. Permits null if and only if numToAdd is 0.
@param numToAdd number of events to add from the beginning of the given array.
------------
Causes the <code>run()</code> method of the runnable to
be invoked by the user-interface thread at the next
reasonable opportunity. The caller of this method continues
to run in parallel, and is not notified when the
runnable has completed.

@param runnable code to run on the user-interface thread.

@see #syncExec
------------
Causes the <code>run()</code> method of the runnable to
be invoked by the user-interface thread at the next
reasonable opportunity. The thread which calls this method
is suspended until the runnable completes.

@param runnable code to run on the user-interface thread.

@exception SWTException <ul>
<li>ERROR_FAILED_EXEC - if an exception occurred when executing the runnable</li>
</ul>

@see #asyncExec

====== TabFolder.java ======
Copyright (c) 2000, 2016 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class implement the notebook user interface
metaphor.  It allows the user to select a notebook page from
set of pages.
<p>
The item children that may be added to instances of this class
must be of type <code>TabItem</code>.
<code>Control</code> children are created and then set into a
tab item using <code>TabItem#setControl</code>.
</p><p>
Note that although this class is a subclass of <code>Composite</code>,
it does not make sense to set a layout on it.
</p><p>
<dl>
<dt><b>Styles:</b></dt>
<dd>TOP, BOTTOM</dd>
<dt><b>Events:</b></dt>
<dd>Selection</dd>
</dl>
<p>
Note: Only one of the styles TOP and BOTTOM may be specified.
</p><p>
IMPORTANT: This class is <em>not</em> intended to be subclassed.
</p>

@see <a href="http://www.eclipse.org/swt/snippets/#tabfolder">TabFolder, TabItem snippets</a>
@see <a href="http://www.eclipse.org/swt/examples.php">SWT Example: ControlExample</a>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
@noextend This class is not intended to be subclassed by clients.
------------
Constructs a new instance of this class given its parent
and a style value describing its behavior and appearance.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.
</p>

@param parent a composite control which will be the parent of the new instance (cannot be null)
@param style the style of control to construct

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see SWT
@see SWT#TOP
@see SWT#BOTTOM
@see Widget#checkSubclass
@see Widget#getStyle
------------
Adds the listener to the collection of listeners who will
be notified when the user changes the receiver's selection, by sending
it one of the messages defined in the <code>SelectionListener</code>
interface.
<p>
When <code>widgetSelected</code> is called, the item field of the event object is valid.
<code>widgetDefaultSelected</code> is not called.
</p>

@param listener the listener which should be notified when the user changes the receiver's selection

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see SelectionListener
@see #removeSelectionListener
@see SelectionEvent
------------
Returns the item at the given, zero-relative index in the
receiver. Throws an exception if the index is out of range.

@param index the index of the item to return
@return the item at the given index

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list minus 1 (inclusive)</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the tab item at the given point in the receiver
or null if no such item exists. The point is in the
coordinate system of the receiver.

@param point the point used to locate the item
@return the tab item at the given point, or null if the point is not in a tab item

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the point is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.4
------------
Returns the number of items contained in the receiver.

@return the number of items

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns an array of <code>TabItem</code>s which are the items
in the receiver.
<p>
Note: This is not the actual structure used by the receiver
to maintain its list of items, so modifying the array will
not affect the receiver.
</p>

@return the items in the receiver

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns an array of <code>TabItem</code>s that are currently
selected in the receiver. An empty array indicates that no
items are selected.
<p>
Note: This is not the actual structure used by the receiver
to maintain its selection, so modifying the array will
not affect the receiver.
</p>
@return an array representing the selection

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the zero-relative index of the item which is currently
selected in the receiver, or -1 if no item is selected.

@return the index of the selected item

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Searches the receiver's list starting at the first item
(index 0) until an item is found that is equal to the
argument, and returns the index of that item. If no item
is found, returns -1.

@param item the search item
@return the index of the item

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the item is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Removes the listener from the collection of listeners who will
be notified when the user changes the receiver's selection.

@param listener the listener which should no longer be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see SelectionListener
@see #addSelectionListener
------------
Sets the receiver's selection to the given item.
The current selected is first cleared, then the new item is
selected.

@param item the item to select

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the item is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.2
------------
Sets the receiver's selection to be the given array of items.
The current selected is first cleared, then the new items are
selected.

@param items the array of items

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the items array is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Selects the item at the given zero-relative index in the receiver.
If the item at the index was already selected, it remains selected.
The current selection is first cleared, then the new items are
selected. Indices that are out of range are ignored.

@param index the index of the item to select

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

====== TabItem.java ======
Copyright (c) 2000, 2013 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class represent a selectable user interface object
corresponding to a tab for a page in a tab folder.
<dl>
<dt><b>Styles:</b></dt>
<dd>(none)</dd>
<dt><b>Events:</b></dt>
<dd>(none)</dd>
</dl>
<p>
IMPORTANT: This class is <em>not</em> intended to be subclassed.
</p>

@see <a href="http://www.eclipse.org/swt/snippets/#tabfolder">TabFolder, TabItem snippets</a>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
@noextend This class is not intended to be subclassed by clients.
------------
Constructs a new instance of this class given its parent
(which must be a <code>TabFolder</code>) and a style value
describing its behavior and appearance. The item is added
to the end of the items maintained by its parent.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.
</p>

@param parent a composite control which will be the parent of the new instance (cannot be null)
@param style the style of control to construct

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see SWT
@see Widget#checkSubclass
@see Widget#getStyle
------------
Constructs a new instance of this class given its parent
(which must be a <code>TabFolder</code>), a style value
describing its behavior and appearance, and the index
at which to place it in the items maintained by its parent.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.
</p>

@param parent a composite control which will be the parent of the new instance (cannot be null)
@param style the style of control to construct
@param index the zero-relative index to store the receiver in its parent

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
<li>ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the parent (inclusive)</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see SWT
@see Widget#checkSubclass
@see Widget#getStyle
------------
Returns the control that is used to fill the client area of
the tab folder when the user selects the tab item.  If no
control has been set, return <code>null</code>.
<p>
@return the control

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns a rectangle describing the receiver's size and location
relative to its parent.

@return the receiver's bounding rectangle

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.4
------------
Returns the receiver's parent, which must be a <code>TabFolder</code>.

@return the receiver's parent

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the receiver's tool tip text, or null if it has
not been set.

@return the receiver's tool tip text

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the control that is used to fill the client area of
the tab folder when the user selects the tab item.
<p>
@param control the new control (or null)

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the control has been disposed</li>
<li>ERROR_INVALID_PARENT - if the control is not in the same widget tree</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the receiver's text.  The string may include
the mnemonic character.
</p>
<p>
Mnemonics are indicated by an '&amp;' that causes the next
character to be the mnemonic.  When the user presses a
key sequence that matches the mnemonic, a selection
event occurs. On most platforms, the mnemonic appears
underlined but may be emphasised in a platform specific
manner.  The mnemonic indicator character '&amp;' can be
escaped by doubling it in the string, causing a single
'&amp;' to be displayed.
</p>

@param string the new text

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the text is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the receiver's tool tip text to the argument, which
may be null indicating that the default tool tip for the
control will be shown. For a control that has a default
tool tip, such as the Tree control on Windows, setting
the tool tip text to an empty string replaces the default,
causing no tool tip text to be shown.
<p>
The mnemonic indicator (character '&amp;') is not displayed in a tool tip.
To display a single '&amp;' in the tool tip, the character '&amp;' can be
escaped by doubling it in the string.
</p>

@param string the new tool tip text (or null)

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

====== Table.java ======
Copyright (c) 2000, 2016 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
Roland Oldenburg <r.oldenburg@hsp-software.de> - Bug 292199
------------
Instances of this class implement a selectable user interface
object that displays a list of images and strings and issues
notification when selected.
<p>
The item children that may be added to instances of this class
must be of type <code>TableItem</code>.
</p><p>
Style <code>VIRTUAL</code> is used to create a <code>Table</code> whose
<code>TableItem</code>s are to be populated by the client on an on-demand basis
instead of up-front.  This can provide significant performance improvements for
tables that are very large or for which <code>TableItem</code> population is
expensive (for example, retrieving values from an external source).
</p><p>
Here is an example of using a <code>Table</code> with style <code>VIRTUAL</code>:
<code><pre>
final Table table = new Table (parent, SWT.VIRTUAL | SWT.BORDER);
table.setItemCount (1000000);
table.addListener (SWT.SetData, new Listener () {
public void handleEvent (Event event) {
TableItem item = (TableItem) event.item;
int index = table.indexOf (item);
item.setText ("Item " + index);
System.out.println (item.getText ());
}
});
</pre></code>
</p><p>
Note that although this class is a subclass of <code>Composite</code>,
it does not normally make sense to add <code>Control</code> children to
it, or set a layout on it, unless implementing something like a cell
editor.
</p><p>
<dl>
<dt><b>Styles:</b></dt>
<dd>SINGLE, MULTI, CHECK, FULL_SELECTION, HIDE_SELECTION, VIRTUAL, NO_SCROLL</dd>
<dt><b>Events:</b></dt>
<dd>Selection, DefaultSelection, SetData, MeasureItem, EraseItem, PaintItem</dd>
</dl>
</p><p>
Note: Only one of the styles SINGLE, and MULTI may be specified.
</p><p>
IMPORTANT: This class is <em>not</em> intended to be subclassed.
</p>

@see <a href="http://www.eclipse.org/swt/snippets/#table">Table, TableItem, TableColumn snippets</a>
@see <a href="http://www.eclipse.org/swt/examples.php">SWT Example: ControlExample</a>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
@noextend This class is not intended to be subclassed by clients.
------------
Constructs a new instance of this class given its parent
and a style value describing its behavior and appearance.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.
</p>

@param parent a composite control which will be the parent of the new instance (cannot be null)
@param style the style of control to construct

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see SWT#SINGLE
@see SWT#MULTI
@see SWT#CHECK
@see SWT#FULL_SELECTION
@see SWT#HIDE_SELECTION
@see SWT#VIRTUAL
@see SWT#NO_SCROLL
@see Widget#checkSubclass
@see Widget#getStyle
------------
Adds the listener to the collection of listeners who will
be notified when the user changes the receiver's selection, by sending
it one of the messages defined in the <code>SelectionListener</code>
interface.
<p>
When <code>widgetSelected</code> is called, the item field of the event object is valid.
If the receiver has the <code>SWT.CHECK</code> style and the check selection changes,
the event object detail field contains the value <code>SWT.CHECK</code>.
<code>widgetDefaultSelected</code> is typically called when an item is double-clicked.
The item field of the event object is valid for default selection, but the detail field is not used.
</p>

@param listener the listener which should be notified when the user changes the receiver's selection

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see SelectionListener
@see #removeSelectionListener
@see SelectionEvent
------------
Clears the item at the given zero-relative index in the receiver.
The text, icon and other attributes of the item are set to the default
value.  If the table was created with the <code>SWT.VIRTUAL</code> style,
these attributes are requested again as needed.

@param index the index of the item to clear

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list minus 1 (inclusive)</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see SWT#VIRTUAL
@see SWT#SetData

@since 3.0
------------
Removes the items from the receiver which are between the given
zero-relative start and end indices (inclusive).  The text, icon
and other attributes of the items are set to their default values.
If the table was created with the <code>SWT.VIRTUAL</code> style,
these attributes are requested again as needed.

@param start the start index of the item to clear
@param end the end index of the item to clear

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_RANGE - if either the start or end are not between 0 and the number of elements in the list minus 1 (inclusive)</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see SWT#VIRTUAL
@see SWT#SetData

@since 3.0
------------
Clears the items at the given zero-relative indices in the receiver.
The text, icon and other attributes of the items are set to their default
values.  If the table was created with the <code>SWT.VIRTUAL</code> style,
these attributes are requested again as needed.

@param indices the array of indices of the items

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list minus 1 (inclusive)</li>
<li>ERROR_NULL_ARGUMENT - if the indices array is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see SWT#VIRTUAL
@see SWT#SetData

@since 3.0
------------
Clears all the items in the receiver. The text, icon and other
attributes of the items are set to their default values. If the
table was created with the <code>SWT.VIRTUAL</code> style, these
attributes are requested again as needed.

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see SWT#VIRTUAL
@see SWT#SetData

@since 3.0
------------
Deselects the items at the given zero-relative indices in the receiver.
If the item at the given zero-relative index in the receiver
is selected, it is deselected.  If the item at the index
was not selected, it remains deselected. Indices that are out
of range and duplicate indices are ignored.

@param indices the array of indices for the items to deselect

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the set of indices is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Deselects the item at the given zero-relative index in the receiver.
If the item at the index was already deselected, it remains
deselected. Indices that are out of range are ignored.

@param index the index of the item to deselect

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Deselects the items at the given zero-relative indices in the receiver.
If the item at the given zero-relative index in the receiver
is selected, it is deselected.  If the item at the index
was not selected, it remains deselected.  The range of the
indices is inclusive. Indices that are out of range are ignored.

@param start the start index of the items to deselect
@param end the end index of the items to deselect

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Deselects all selected items in the receiver.

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the column at the given, zero-relative index in the
receiver. Throws an exception if the index is out of range.
Columns are returned in the order that they were created.
If no <code>TableColumn</code>s were created by the programmer,
this method will throw <code>ERROR_INVALID_RANGE</code> despite
the fact that a single column of data may be visible in the table.
This occurs when the programmer uses the table like a list, adding
items but never creating a column.

@param index the index of the column to return
@return the column at the given index

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list minus 1 (inclusive)</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see Table#getColumnOrder()
@see Table#setColumnOrder(int[])
@see TableColumn#getMoveable()
@see TableColumn#setMoveable(boolean)
@see SWT#Move
------------
Returns the number of columns contained in the receiver.
If no <code>TableColumn</code>s were created by the programmer,
this value is zero, despite the fact that visually, one column
of items may be visible. This occurs when the programmer uses
the table like a list, adding items but never creating a column.

@return the number of columns

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns an array of zero-relative integers that map
the creation order of the receiver's items to the
order in which they are currently being displayed.
<p>
Specifically, the indices of the returned array represent
the current visual order of the items, and the contents
of the array represent the creation order of the items.
</p><p>
Note: This is not the actual structure used by the receiver
to maintain its list of items, so modifying the array will
not affect the receiver.
</p>

@return the current visual order of the receiver's items

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see Table#setColumnOrder(int[])
@see TableColumn#getMoveable()
@see TableColumn#setMoveable(boolean)
@see SWT#Move

@since 3.1
------------
Returns an array of <code>TableColumn</code>s which are the
columns in the receiver.  Columns are returned in the order
that they were created.  If no <code>TableColumn</code>s were
created by the programmer, the array is empty, despite the fact
that visually, one column of items may be visible. This occurs
when the programmer uses the table like a list, adding items but
never creating a column.
<p>
Note: This is not the actual structure used by the receiver
to maintain its list of items, so modifying the array will
not affect the receiver.
</p>

@return the items in the receiver

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see Table#getColumnOrder()
@see Table#setColumnOrder(int[])
@see TableColumn#getMoveable()
@see TableColumn#setMoveable(boolean)
@see SWT#Move
------------
Returns the width in pixels of a grid line.

@return the width of a grid line in pixels

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the height of the receiver's header

@return the height of the header or zero if the header is not visible

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 2.0
------------
Returns <code>true</code> if the receiver's header is visible,
and <code>false</code> otherwise.
<p>
If one of the receiver's ancestors is not visible or some
other condition makes the receiver not visible, this method
may still indicate that it is considered visible even though
it may not actually be showing.
</p>

@return the receiver's header's visibility state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the item at the given, zero-relative index in the
receiver. Throws an exception if the index is out of range.

@param index the index of the item to return
@return the item at the given index

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list minus 1 (inclusive)</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the item at the given point in the receiver
or null if no such item exists. The point is in the
coordinate system of the receiver.
<p>
The item that is returned represents an item that could be selected by the user.
For example, if selection only occurs in items in the first column, then null is
returned if the point is outside of the item.
Note that the SWT.FULL_SELECTION style hint, which specifies the selection policy,
determines the extent of the selection.
</p>

@param point the point used to locate the item
@return the item at the given point, or null if the point is not in a selectable item

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the point is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the number of items contained in the receiver.

@return the number of items

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the height of the area which would be used to
display <em>one</em> of the items in the receiver.

@return the height of one item

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns a (possibly empty) array of <code>TableItem</code>s which
are the items in the receiver.
<p>
Note: This is not the actual structure used by the receiver
to maintain its list of items, so modifying the array will
not affect the receiver.
</p>

@return the items in the receiver

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns <code>true</code> if the receiver's lines are visible,
and <code>false</code> otherwise. Note that some platforms draw
grid lines while others may draw alternating row colors.
<p>
If one of the receiver's ancestors is not visible or some
other condition makes the receiver not visible, this method
may still indicate that it is considered visible even though
it may not actually be showing.
</p>

@return the visibility state of the lines

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns an array of <code>TableItem</code>s that are currently
selected in the receiver. The order of the items is unspecified.
An empty array indicates that no items are selected.
<p>
Note: This is not the actual structure used by the receiver
to maintain its selection, so modifying the array will
not affect the receiver.
</p>
@return an array representing the selection

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the number of selected items contained in the receiver.

@return the number of selected items

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the zero-relative index of the item which is currently
selected in the receiver, or -1 if no item is selected.

@return the index of the selected item

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the zero-relative indices of the items which are currently
selected in the receiver. The order of the indices is unspecified.
The array is empty if no items are selected.
<p>
Note: This is not the actual structure used by the receiver
to maintain its selection, so modifying the array will
not affect the receiver.
</p>
@return the array of indices of the selected items

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the column which shows the sort indicator for
the receiver. The value may be null if no column shows
the sort indicator.

@return the sort indicator

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #setSortColumn(TableColumn)

@since 3.2
------------
Returns the direction of the sort indicator for the receiver.
The value will be one of <code>UP</code>, <code>DOWN</code>
or <code>NONE</code>.

@return the sort direction

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #setSortDirection(int)

@since 3.2
------------
Returns the zero-relative index of the item which is currently
at the top of the receiver. This index can change when items are
scrolled or new items are added or removed.

@return the index of the top item

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Searches the receiver's list starting at the first column
(index 0) until a column is found that is equal to the
argument, and returns the index of that column. If no column
is found, returns -1.

@param column the search column
@return the index of the column

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the column is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Searches the receiver's list starting at the first item
(index 0) until an item is found that is equal to the
argument, and returns the index of that item. If no item
is found, returns -1.

@param item the search item
@return the index of the item

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the item is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns <code>true</code> if the item is selected,
and <code>false</code> otherwise.  Indices out of
range are ignored.

@param index the index of the item
@return the selection state of the item at the index

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Removes the items from the receiver's list at the given
zero-relative indices.

@param indices the array of indices of the items

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list minus 1 (inclusive)</li>
<li>ERROR_NULL_ARGUMENT - if the indices array is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Removes the item from the receiver at the given
zero-relative index.

@param index the index for the item

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list minus 1 (inclusive)</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Removes the items from the receiver which are
between the given zero-relative start and end
indices (inclusive).

@param start the start of the range
@param end the end of the range

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_RANGE - if either the start or end are not between 0 and the number of elements in the list minus 1 (inclusive)</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Removes all of the items from the receiver.

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Removes the listener from the collection of listeners who will
be notified when the user changes the receiver's selection.

@param listener the listener which should no longer be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see SelectionListener
@see #addSelectionListener(SelectionListener)
------------
Selects the items at the given zero-relative indices in the receiver.
The current selection is not cleared before the new items are selected.
<p>
If the item at a given index is not selected, it is selected.
If the item at a given index was already selected, it remains selected.
Indices that are out of range and duplicate indices are ignored.
If the receiver is single-select and multiple indices are specified,
then all indices are ignored.
</p>

@param indices the array of indices for the items to select

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the array of indices is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see Table#setSelection(int[])
------------
Selects the item at the given zero-relative index in the receiver.
If the item at the index was already selected, it remains
selected. Indices that are out of range are ignored.

@param index the index of the item to select

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Selects the items in the range specified by the given zero-relative
indices in the receiver. The range of indices is inclusive.
The current selection is not cleared before the new items are selected.
<p>
If an item in the given range is not selected, it is selected.
If an item in the given range was already selected, it remains selected.
Indices that are out of range are ignored and no items will be selected
if start is greater than end.
If the receiver is single-select and there is more than one item in the
given range, then all indices are ignored.
</p>

@param start the start of the range
@param end the end of the range

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see Table#setSelection(int,int)
------------
Selects all of the items in the receiver.
<p>
If the receiver is single-select, do nothing.
</p>

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the order that the items in the receiver should
be displayed in to the given argument which is described
in terms of the zero-relative ordering of when the items
were added.

@param order the new order to display the items

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the item order is null</li>
<li>ERROR_INVALID_ARGUMENT - if the item order is not the same length as the number of items</li>
</ul>

@see Table#getColumnOrder()
@see TableColumn#getMoveable()
@see TableColumn#setMoveable(boolean)
@see SWT#Move

@since 3.1
------------
Marks the receiver's header as visible if the argument is <code>true</code>,
and marks it invisible otherwise.
<p>
If one of the receiver's ancestors is not visible or some
other condition makes the receiver not visible, marking
it visible may not actually cause it to be displayed.
</p>

@param show the new visibility state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the number of items contained in the receiver.

@param count the number of items

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.0
------------
Sets the height of the area which would be used to
display <em>one</em> of the items in the table.

@param itemHeight the height of one item

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.2
------------
Marks the receiver's lines as visible if the argument is <code>true</code>,
and marks it invisible otherwise. Note that some platforms draw grid lines
while others may draw alternating row colors.
<p>
If one of the receiver's ancestors is not visible or some
other condition makes the receiver not visible, marking
it visible may not actually cause it to be displayed.
</p>

@param show the new visibility state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Selects the items at the given zero-relative indices in the receiver.
The current selection is cleared before the new items are selected,
and if necessary the receiver is scrolled to make the new selection visible.
<p>
Indices that are out of range and duplicate indices are ignored.
If the receiver is single-select and multiple indices are specified,
then all indices are ignored.
</p>

@param indices the indices of the items to select

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the array of indices is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see Table#deselectAll()
@see Table#select(int[])
------------
Sets the receiver's selection to the given item.
The current selection is cleared before the new item is selected,
and if necessary the receiver is scrolled to make the new selection visible.
<p>
If the item is not in the receiver, then it is ignored.
</p>

@param item the item to select

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the item is null</li>
<li>ERROR_INVALID_ARGUMENT - if the item has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.2
------------
Sets the receiver's selection to be the given array of items.
The current selection is cleared before the new items are selected,
and if necessary the receiver is scrolled to make the new selection visible.
<p>
Items that are not in the receiver are ignored.
If the receiver is single-select and multiple items are specified,
then all items are ignored.
</p>

@param items the array of items

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the array of items is null</li>
<li>ERROR_INVALID_ARGUMENT - if one of the items has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see Table#deselectAll()
@see Table#select(int[])
@see Table#setSelection(int[])
------------
Selects the item at the given zero-relative index in the receiver.
The current selection is first cleared, then the new item is selected,
and if necessary the receiver is scrolled to make the new selection visible.

@param index the index of the item to select

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see Table#deselectAll()
@see Table#select(int)
------------
Selects the items in the range specified by the given zero-relative
indices in the receiver. The range of indices is inclusive.
The current selection is cleared before the new items are selected,
and if necessary the receiver is scrolled to make the new selection visible.
<p>
Indices that are out of range are ignored and no items will be selected
if start is greater than end.
If the receiver is single-select and there is more than one item in the
given range, then all indices are ignored.
</p>

@param start the start index of the items to select
@param end the end index of the items to select

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see Table#deselectAll()
@see Table#select(int,int)
------------
Sets the column used by the sort indicator for the receiver. A null
value will clear the sort indicator.  The current sort column is cleared
before the new column is set.

@param column the column used by the sort indicator or <code>null</code>

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the column is disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.2
------------
Sets the direction of the sort indicator for the receiver. The value
can be one of <code>UP</code>, <code>DOWN</code> or <code>NONE</code>.

@param direction the direction of the sort indicator

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.2
------------
Sets the zero-relative index of the item which is currently
at the top of the receiver. This index can change when items
are scrolled or new items are added and removed.

@param index the index of the top item

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Shows the column.  If the column is already showing in the receiver,
this method simply returns.  Otherwise, the columns are scrolled until
the column is visible.

@param column the column to be shown

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the column is null</li>
<li>ERROR_INVALID_ARGUMENT - if the column has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.0
------------
Shows the item.  If the item is already showing in the receiver,
this method simply returns.  Otherwise, the items are scrolled until
the item is visible.

@param item the item to be shown

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the item is null</li>
<li>ERROR_INVALID_ARGUMENT - if the item has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see Table#showSelection()
------------
Shows the selection.  If the selection is already showing in the receiver,
this method simply returns.  Otherwise, the items are scrolled until
the selection is visible.

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see Table#showItem(TableItem)

====== TableColumn.java ======
Copyright (c) 2000, 2012 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class represent a column in a table widget.
<p><dl>
<dt><b>Styles:</b></dt>
<dd>LEFT, RIGHT, CENTER</dd>
<dt><b>Events:</b></dt>
<dd> Move, Resize, Selection</dd>
</dl>
</p><p>
Note: Only one of the styles LEFT, RIGHT and CENTER may be specified.
</p><p>
IMPORTANT: This class is <em>not</em> intended to be subclassed.
</p>

@see <a href="http://www.eclipse.org/swt/snippets/#table">Table, TableItem, TableColumn snippets</a>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
@noextend This class is not intended to be subclassed by clients.
------------
Constructs a new instance of this class given its parent
(which must be a <code>Table</code>) and a style value
describing its behavior and appearance. The item is added
to the end of the items maintained by its parent.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.
</p>

@param parent a composite control which will be the parent of the new instance (cannot be null)
@param style the style of control to construct

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see SWT#LEFT
@see SWT#RIGHT
@see SWT#CENTER
@see Widget#checkSubclass
@see Widget#getStyle
------------
Constructs a new instance of this class given its parent
(which must be a <code>Table</code>), a style value
describing its behavior and appearance, and the index
at which to place it in the items maintained by its parent.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.
</p>
<p>
Note that due to a restriction on some platforms, the first column
is always left aligned.
</p>
@param parent a composite control which will be the parent of the new instance (cannot be null)
@param style the style of control to construct
@param index the zero-relative index to store the receiver in its parent

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
<li>ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the parent (inclusive)</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see SWT#LEFT
@see SWT#RIGHT
@see SWT#CENTER
@see Widget#checkSubclass
@see Widget#getStyle
------------
Adds the listener to the collection of listeners who will
be notified when the control is moved or resized, by sending
it one of the messages defined in the <code>ControlListener</code>
interface.

@param listener the listener which should be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see ControlListener
@see #removeControlListener
------------
Adds the listener to the collection of listeners who will
be notified when the control is selected by the user, by sending
it one of the messages defined in the <code>SelectionListener</code>
interface.
<p>
<code>widgetSelected</code> is called when the column header is selected.
<code>widgetDefaultSelected</code> is not called.
</p>

@param listener the listener which should be notified when the control is selected by the user

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see SelectionListener
@see #removeSelectionListener
@see SelectionEvent
------------
Returns a value which describes the position of the
text or image in the receiver. The value will be one of
<code>LEFT</code>, <code>RIGHT</code> or <code>CENTER</code>.

@return the alignment

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the receiver's parent, which must be a <code>Table</code>.

@return the receiver's parent

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Gets the moveable attribute. A column that is
not moveable cannot be reordered by the user
by dragging the header but may be reordered
by the programmer.

@return the moveable attribute

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see Table#getColumnOrder()
@see Table#setColumnOrder(int[])
@see TableColumn#setMoveable(boolean)
@see SWT#Move

@since 3.1
------------
Gets the resizable attribute. A column that is
not resizable cannot be dragged by the user but
may be resized by the programmer.

@return the resizable attribute

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the receiver's tool tip text, or null if it has
not been set.

@return the receiver's tool tip text

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.2
------------
Gets the width of the receiver.

@return the width

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Causes the receiver to be resized to its preferred size.
For a composite, this involves computing the preferred size
from its layout, if there is one.

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Removes the listener from the collection of listeners who will
be notified when the control is moved or resized.

@param listener the listener which should no longer be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see ControlListener
@see #addControlListener
------------
Removes the listener from the collection of listeners who will
be notified when the control is selected by the user.

@param listener the listener which should no longer be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see SelectionListener
@see #addSelectionListener
------------
Controls how text and images will be displayed in the receiver.
The argument should be one of <code>LEFT</code>, <code>RIGHT</code>
or <code>CENTER</code>.
<p>
Note that due to a restriction on some platforms, the first column
is always left aligned.
</p>
@param alignment the new alignment

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the moveable attribute.  A column that is
moveable can be reordered by the user by dragging
the header. A column that is not moveable cannot be
dragged by the user but may be reordered
by the programmer.

@param moveable the moveable attribute

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see Table#setColumnOrder(int[])
@see Table#getColumnOrder()
@see TableColumn#getMoveable()
@see SWT#Move

@since 3.1
------------
Sets the resizable attribute.  A column that is
resizable can be resized by the user dragging the
edge of the header.  A column that is not resizable
cannot be dragged by the user but may be resized
by the programmer.

@param resizable the resize attribute

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the receiver's tool tip text to the argument, which
may be null indicating that the default tool tip for the
control will be shown. For a control that has a default
tool tip, such as the Tree control on Windows, setting
the tool tip text to an empty string replaces the default,
causing no tool tip text to be shown.
<p>
The mnemonic indicator (character '&amp;') is not displayed in a tool tip.
To display a single '&amp;' in the tool tip, the character '&amp;' can be
escaped by doubling it in the string.
</p>

@param string the new tool tip text (or null)

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.2
------------
Sets the width of the receiver.

@param width the new width

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

====== TableItem.java ======
Copyright (c) 2000, 2015 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class represent a selectable user interface object
that represents an item in a table.
<dl>
<dt><b>Styles:</b></dt>
<dd>(none)</dd>
<dt><b>Events:</b></dt>
<dd>(none)</dd>
</dl>
<p>
IMPORTANT: This class is <em>not</em> intended to be subclassed.
</p>

@see <a href="http://www.eclipse.org/swt/snippets/#table">Table, TableItem, TableColumn snippets</a>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
@noextend This class is not intended to be subclassed by clients.
------------
Constructs a new instance of this class given its parent
(which must be a <code>Table</code>) and a style value
describing its behavior and appearance. The item is added
to the end of the items maintained by its parent.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.
</p>

@param parent a composite control which will be the parent of the new instance (cannot be null)
@param style the style of control to construct

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see SWT
@see Widget#checkSubclass
@see Widget#getStyle
------------
Constructs a new instance of this class given its parent
(which must be a <code>Table</code>), a style value
describing its behavior and appearance, and the index
at which to place it in the items maintained by its parent.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.
</p>

@param parent a composite control which will be the parent of the new instance (cannot be null)
@param style the style of control to construct
@param index the zero-relative index to store the receiver in its parent

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
<li>ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the parent (inclusive)</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see SWT
@see Widget#checkSubclass
@see Widget#getStyle
------------
Returns the receiver's background color.

@return the background color

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 2.0
------------
Returns the background color at the given column index in the receiver.

@param index the column index
@return the background color

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.0
------------
Returns a rectangle describing the size and location of the receiver's
text relative to its parent.

@return the bounding rectangle of the receiver's text

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.2
------------
Returns a rectangle describing the receiver's size and location
relative to its parent at a column in the table.

@param index the index that specifies the column
@return the receiver's bounding column rectangle

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns <code>true</code> if the receiver is checked,
and false otherwise.  When the parent does not have
the <code>CHECK</code> style, return false.

@return the checked state of the checkbox

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the font that the receiver will use to paint textual information for this item.

@return the receiver's font

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.0
------------
Returns the font that the receiver will use to paint textual information
for the specified cell in this item.

@param index the column index
@return the receiver's font

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.0
------------
Returns the foreground color that the receiver will use to draw.

@return the receiver's foreground color

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 2.0
------------
Returns the foreground color at the given column index in the receiver.

@param index the column index
@return the foreground color

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.0
------------
Returns <code>true</code> if the receiver is grayed,
and false otherwise. When the parent does not have
the <code>CHECK</code> style, return false.

@return the grayed state of the checkbox

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the image stored at the given column index in the receiver,
or null if the image has not been set or if the column does not exist.

@param index the column index
@return the image stored at the given column index in the receiver

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns a rectangle describing the size and location
relative to its parent of an image at a column in the
table.  An empty rectangle is returned if index exceeds
the index of the table's last column.

@param index the index that specifies the column
@return the receiver's bounding image rectangle

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Gets the image indent.

@return the indent

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the receiver's parent, which must be a <code>Table</code>.

@return the receiver's parent

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the text stored at the given column index in the receiver,
or empty string if the text has not been set.

@param index the column index
@return the text stored at the given column index in the receiver

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns a rectangle describing the size and location
relative to its parent of the text at a column in the
table.  An empty rectangle is returned if index exceeds
the index of the table's last column.

@param index the index that specifies the column
@return the receiver's bounding text rectangle

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.3
------------
Sets the receiver's background color to the color specified
by the argument, or to the default system color for the item
if the argument is null.

@param color the new color (or null)

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the argument has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 2.0
------------
Sets the background color at the given column index in the receiver
to the color specified by the argument, or to the default system color for the item
if the argument is null.

@param index the column index
@param color the new color (or null)

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the argument has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.0
------------
Sets the checked state of the checkbox for this item.  This state change
only applies if the Table was created with the SWT.CHECK style.

@param checked the new checked state of the checkbox

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the font that the receiver will use to paint textual information
for this item to the font specified by the argument, or to the default font
for that kind of control if the argument is null.

@param font the new font (or null)

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the argument has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.0
------------
Sets the font that the receiver will use to paint textual information
for the specified cell in this item to the font specified by the
argument, or to the default font for that kind of control if the
argument is null.

@param index the column index
@param font the new font (or null)

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the argument has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.0
------------
Sets the receiver's foreground color to the color specified
by the argument, or to the default system color for the item
if the argument is null.

@param color the new color (or null)

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the argument has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 2.0
------------
Sets the foreground color at the given column index in the receiver
to the color specified by the argument, or to the default system color for the item
if the argument is null.

@param index the column index
@param color the new color (or null)

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the argument has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.0
------------
Sets the grayed state of the checkbox for this item.  This state change
only applies if the Table was created with the SWT.CHECK style.

@param grayed the new grayed state of the checkbox;

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the image for multiple columns in the table.

@param images the array of new images

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the array of images is null</li>
<li>ERROR_INVALID_ARGUMENT - if one of the images has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the receiver's image at a column.

@param index the column index
@param image the new image

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the image has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the indent of the first column's image, expressed in terms of the image's width.

@param indent the new indent

</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@deprecated this functionality is not supported on most platforms
------------
Sets the text for multiple columns in the table.
<p>
Note: If control characters like '\n', '\t' etc. are used
in the string, then the behavior is platform dependent.
</p>
@param strings the array of new strings

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the text is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the receiver's text at a column
<p>
Note: If control characters like '\n', '\t' etc. are used
in the string, then the behavior is platform dependent.
</p>
@param index the column index
@param string the new text

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the text is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

====== TaskBar.java ======
Copyright (c) 2010, 2012 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
Tasktop Technologies - initial API and implementation
------------
Instances of this class represent the system task bar.

<dl>
<dt><b>Styles:</b></dt>
<dd>(none)</dd>
<dt><b>Events:</b></dt>
<dd>(none)</dd>
</dl>

@see Display#getSystemTaskBar
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>

@since 3.6

@noextend This class is not intended to be subclassed by clients.
------------
Returns the item at the given, zero-relative index in the
receiver. Throws an exception if the index is out of range.

@param index the index of the item to return
@return the item at the given index

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list minus 1 (inclusive)</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the <code>TaskItem</code> for the given <code>Shell</code> or the <code>TaskItem</code>
for the application if the <code>Shell</code> parameter is <code>null</code>.
If the requested item is not supported by the platform it returns <code>null</code>.

@param shell the shell for which the task item is requested, or null to request the application item
@return the task item for the given shell or the application

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the number of items contained in the receiver.

@return the number of items

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns an array of <code>TaskItem</code>s which are the items
in the receiver.
<p>
Note: This is not the actual structure used by the receiver
to maintain its list of items, so modifying the array will
not affect the receiver.
</p>

@return the items in the receiver

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

====== TaskItem.java ======
Copyright (c) 2000, 2016 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
Tasktop Technologies - initial API and implementation
------------
Instances of this class represent a task item.

<dl>
<dt><b>Styles:</b></dt>
<dd>(none)</dd>
<dt><b>Events:</b></dt>
<dd>(none)</dd>
</dl>

@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>

@since 3.6

@noextend This class is not intended to be subclassed by clients.
------------
Constructs a new instance of this class given its parent
(which must be a <code>Tray</code>) and a style value
describing its behavior and appearance. The item is added
to the end of the items maintained by its parent.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.
</p>

@param parent a composite control which will be the parent of the new instance (cannot be null)
@param style the style of control to construct

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see SWT
@see Widget#checkSubclass
@see Widget#getStyle
------------
Returns the receiver's pop up menu if it has one, or null
if it does not.

@return the receiver's menu

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the receiver's overlay image if it has one, or null
if it does not.

@return the receiver's overlay image

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the receiver's overlay text, which will be an empty
string if it has never been set.

@return the receiver's overlay text

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the receiver's parent, which must be a <code>TaskBar</code>.

@return the receiver's parent

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the receiver's progress.

@return the receiver's progress

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the receiver's progress state.

@return the receiver's progress state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the receiver's pop up menu to the argument. The way the menu is
shown is platform specific.

<p>
This feature might not be available for the receiver on all
platforms. The application code can check if it is supported
by calling the respective get method. When the feature is not
available, the get method will always return the NULL.</p>

<p>
For better cross platform support, the application code should
set this feature on the <code>TaskItem</code> for application.<br>
On Windows, this feature will only work on RCP applications.</p>

<p>
The menu should be fully created before this method is called.
Dynamic changes to the menu after the method is called will not be reflected
in the native menu.</p>

@param menu the new pop up menu

@exception IllegalArgumentException <ul>
<li>ERROR_MENU_NOT_POP_UP - the menu is not a pop up menu</li>
<li>ERROR_INVALID_ARGUMENT - if the menu has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the receiver's overlay image, which may be null
indicating that no image should be displayed. The bounds
for the overlay image is determined by the platform and in
general it should be a small image.

<p>
This feature might not be available for the receiver on all
platforms. The application code can check if it is supported
by calling the respective get method. When the feature is not
available, the get method will always return the NULL.</p>

<p>
For better cross platform support, the application code should
first try to set this feature on the <code>TaskItem</code> for the
main shell then on the <code>TaskItem</code> for the application.</p>

@param overlayImage the new overlay image (may be null)

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the overlayImage has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the receiver's overlay text. The space available to display the
overlay text is platform dependent and in general it should be no longer
than a few characters.

<p>
This feature might not be available for the receiver on all
platforms. The application code can check if it is supported
by calling the respective get method. When the feature is not
available, the get method will always return an empty string.</p>

<p>
For better cross platform support, the application code should
first try to set this feature on the <code>TaskItem</code> for the
main shell then on the <code>TaskItem</code> for the application.</p>

@param overlayText the new overlay text

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the overlayText is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the receiver's progress, the progress represents a percentage and
should be in range from 0 to 100. The progress is only shown when the progress
state is different than <code>SWT#DEFAULT</code>.

<p>
This feature might not be available for the receiver on all
platforms. The application code can check if it is supported
by calling the respective get method. When the feature is not
available, the get method will always return zero.</p>

<p>
For better cross platform support, the application code should
first try to set this feature on the <code>TaskItem</code> for the
main shell then on the <code>TaskItem</code> for the application.</p>

@param progress the new progress

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

#see {@link #setProgressState(int)}
------------
Sets the receiver's progress state, the state can be one of
the following:
<p><ul>
<li>{@link SWT#DEFAULT}</li>
<li>{@link SWT#NORMAL}</li>
<li>{@link SWT#PAUSED}</li>
<li>{@link SWT#ERROR}</li>
<li>{@link SWT#INDETERMINATE}</li>
</ul></p>

The percentage of progress shown by the states <code>SWT#NORMAL</code>, <code>SWT#PAUSED</code>,
<code>SWT#ERROR</code> is set with <code>setProgress()</code>. <br>
The state <code>SWT#DEFAULT</code> indicates that no progress should be shown.

<p>
This feature might not be available for the receiver on all
platforms. The application code can check if it is supported
by calling the respective get method. When the feature is not
available, the get method will always return <code>SWT#DEFAULT</code>.</p>

<p>
For better cross platform support, the application code should
first try to set this feature on the <code>TaskItem</code> for the
main shell then on the <code>TaskItem</code> for the application.</p>

@param progressState the new progress state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

#see {@link #setProgress(int)}

====== Text.java ======
Copyright (c) 2000, 2016 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class are selectable user interface
objects that allow the user to enter and modify text.
Text controls can be either single or multi-line.
When a text control is created with a border, the
operating system includes a platform specific inset
around the contents of the control.  When created
without a border, an effort is made to remove the
inset such that the preferred size of the control
is the same size as the contents.
<p>
<dl>
<dt><b>Styles:</b></dt>
<dd>CENTER, ICON_CANCEL, ICON_SEARCH, LEFT, MULTI, PASSWORD, SEARCH, SINGLE, RIGHT, READ_ONLY, WRAP</dd>
<dt><b>Events:</b></dt>
<dd>DefaultSelection, Modify, Verify, OrientationChange</dd>
</dl>
<p>
Note: Only one of the styles MULTI and SINGLE may be specified,
and only one of the styles LEFT, CENTER, and RIGHT may be specified.
</p>
<p>
Note: The styles ICON_CANCEL and ICON_SEARCH are hints used in combination with SEARCH.
When the platform supports the hint, the text control shows these icons.  When an icon
is selected, a default selection event is sent with the detail field set to one of
ICON_CANCEL or ICON_SEARCH.  Normally, application code does not need to check the
detail.  In the case of ICON_CANCEL, the text is cleared before the default selection
event is sent causing the application to search for an empty string.
</p>
<p>
IMPORTANT: This class is <em>not</em> intended to be subclassed.
</p>

@see <a href="http://www.eclipse.org/swt/snippets/#text">Text snippets</a>
@see <a href="http://www.eclipse.org/swt/examples.php">SWT Example: ControlExample</a>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
@noextend This class is not intended to be subclassed by clients.
------------
The maximum number of characters that can be entered
into a text widget.
<p>
Note that this value is platform dependent, based upon
the native widget implementation.
</p>

public static final int LIMIT;


The delimiter used by multi-line text widgets.  When text
is queried and from the widget, it will be delimited using
this delimiter.

public static final String DELIMITER;

/*
This code is intentionally commented.

//	static final char PASSWORD;

/*
These values can be different on different platforms.
Therefore they are not initialized in the declaration
to stop the compiler from inlining.

static {
LIMIT = OS.IsWinNT ? 0x7FFFFFFF : 0x7FFF;
DELIMITER = "\r\n";
}

static final long /*int*/ EditProc;
static final TCHAR EditClass = new TCHAR (0, "EDIT", true);
static {
WNDCLASS lpWndClass = new WNDCLASS ();
OS.GetClassInfo (0, EditClass, lpWndClass);
EditProc = lpWndClass.lpfnWndProc;
/*
This code is intentionally commented.

//		long /*int*/ hwndText = OS.CreateWindowEx (0,
//			EditClass,
//			null,
//			OS.WS_OVERLAPPED | OS.ES_PASSWORD,
//			0, 0, 0, 0,
//			0,
//			0,
//			OS.GetModuleHandle (null),
//			null);
//		char echo = (char) OS.SendMessage (hwndText, OS.EM_GETPASSWORDCHAR, 0, 0);
//		OS.DestroyWindow (hwndText);
//		PASSWORD = echo != 0 ? echo : '*';
}


Constructs a new instance of this class given its parent
and a style value describing its behavior and appearance.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.
</p>

@param parent a composite control which will be the parent of the new instance (cannot be null)
@param style the style of control to construct

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see SWT#SINGLE
@see SWT#MULTI
@see SWT#READ_ONLY
@see SWT#WRAP
@see SWT#LEFT
@see SWT#RIGHT
@see SWT#CENTER
@see SWT#PASSWORD
@see SWT#SEARCH
@see SWT#ICON_SEARCH
@see SWT#ICON_CANCEL
@see Widget#checkSubclass
@see Widget#getStyle
------------
Adds the listener to the collection of listeners who will
be notified when the receiver's text is modified, by sending
it one of the messages defined in the <code>ModifyListener</code>
interface.

@param listener the listener which should be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see ModifyListener
@see #removeModifyListener
------------
Adds a segment listener.
<p>
A <code>SegmentEvent</code> is sent whenever text content is being modified or
a segment listener is added or removed. You can
customize the appearance of text by indicating certain characters to be inserted
at certain text offsets. This may be used for bidi purposes, e.g. when
adjacent segments of right-to-left text should not be reordered relative to
each other.
E.g., multiple Java string literals in a right-to-left language
should generally remain in logical order to each other, that is, the
way they are stored.
</p>
<p>
<b>Warning</b>: This API is currently only implemented on Windows and GTK.
<code>SegmentEvent</code>s won't be sent on Cocoa.
</p>

@param listener the listener which should be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see SegmentEvent
@see SegmentListener
@see #removeSegmentListener

@since 3.8
------------
Adds the listener to the collection of listeners who will
be notified when the control is selected by the user, by sending
it one of the messages defined in the <code>SelectionListener</code>
interface.
<p>
<code>widgetSelected</code> is not called for texts.
<code>widgetDefaultSelected</code> is typically called when ENTER is pressed in a single-line text,
or when ENTER is pressed in a search text. If the receiver has the <code>SWT.SEARCH | SWT.ICON_CANCEL</code> style
and the user cancels the search, the event object detail field contains the value <code>SWT.ICON_CANCEL</code>.
Likewise, if the receiver has the <code>SWT.ICON_SEARCH</code> style and the icon search is selected, the
event object detail field contains the value <code>SWT.ICON_SEARCH</code>.
</p>

@param listener the listener which should be notified when the control is selected by the user

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see SelectionListener
@see #removeSelectionListener
@see SelectionEvent
------------
Adds the listener to the collection of listeners who will
be notified when the receiver's text is verified, by sending
it one of the messages defined in the <code>VerifyListener</code>
interface.

@param listener the listener which should be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see VerifyListener
@see #removeVerifyListener
------------
Appends a string.
<p>
The new text is appended to the text at
the end of the widget.
</p>

@param string the string to be appended

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the string is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Clears the selection.

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Copies the selected text.
<p>
The current selection is copied to the clipboard.
</p>

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Cuts the selected text.
<p>
The current selection is first copied to the
clipboard and then deleted from the widget.
</p>

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the line number of the caret.
<p>
The line number of the caret is returned.
</p>

@return the line number

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns a point describing the location of the caret relative
to the receiver.

@return a point, the location of the caret

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the character position of the caret.
<p>
Indexing is zero based.
</p>

@return the position of the caret

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the number of characters.

@return number of characters in the widget

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the double click enabled flag.
<p>
The double click flag enables or disables the
default action of the text widget when the user
double clicks.
</p>

@return whether or not double click is enabled

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the echo character.
<p>
The echo character is the character that is
displayed when the user enters text or the
text is changed by the programmer.
</p>

@return the echo character

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #setEchoChar
------------
Returns the editable state.

@return whether or not the receiver is editable

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the number of lines.

@return the number of lines in the widget

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the line delimiter.

@return a string that is the line delimiter

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #DELIMITER
------------
Returns the height of a line.

@return the height of a row of text

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the orientation of the receiver, which will be one of the
constants <code>SWT.LEFT_TO_RIGHT</code> or <code>SWT.RIGHT_TO_LEFT</code>.

@return the orientation style

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 2.1.2
------------
Returns the widget message.  The message text is displayed
as a hint for the user, indicating the purpose of the field.
<p>
Typically this is used in conjunction with <code>SWT.SEARCH</code>.
</p>

@return the widget message

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.3
------------
Returns the character position at the given point in the receiver
or -1 if no such position exists. The point is in the coordinate
system of the receiver.
<p>
Indexing is zero based.
</p>

@return the position of the caret

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.3
------------
Returns a <code>Point</code> whose x coordinate is the
character position representing the start of the selected
text, and whose y coordinate is the character position
representing the end of the selection. An "empty" selection
is indicated by the x and y coordinates having the same value.
<p>
Indexing is zero based.  The range of a selection is from
0..N where N is the number of characters in the widget.
</p>

@return a point representing the selection start and end

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the number of selected characters.

@return the number of selected characters.

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Gets the selected text, or an empty string if there is no current selection.

@return the selected text

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the number of tabs.
<p>
Tab stop spacing is specified in terms of the
space (' ') character.  The width of a single
tab stop is the pixel width of the spaces.
</p>

@return the number of tab characters

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the widget text.
<p>
The text for a text widget is the characters in the widget, or
an empty string if this has never been set.
</p>

@return the widget text

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the widget's text as a character array.
<p>
The text for a text widget is the characters in the widget, or
a zero-length array if this has never been set.
</p>
<p>
Note: Use this API to prevent the text from being written into a String
object whose lifecycle is outside of your control. This can help protect
the text, for example, when the widget is used as a password field.
However, the text can't be protected if an {@link SWT#Segments} or
{@link SWT#Verify} listener has been added to the widget.
</p>

@return a character array that contains the widget's text

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #setTextChars(char[])

@since 3.7
------------
Returns a range of text.  Returns an empty string if the
start of the range is greater than the end.
<p>
Indexing is zero based.  The range of
a selection is from 0..N-1 where N is
the number of characters in the widget.
</p>

@param start the start of the range
@param end the end of the range
@return the range of text

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the maximum number of characters that the receiver is capable of holding.
<p>
If this has not been changed by <code>setTextLimit()</code>,
it will be the constant <code>Text.LIMIT</code>.
</p>

@return the text limit

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #LIMIT
------------
Returns the zero-relative index of the line which is currently
at the top of the receiver.
<p>
This index can change when lines are scrolled or new lines are added or removed.
</p>

@return the index of the top line

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the top pixel.
<p>
The top pixel is the pixel position of the line
that is currently at the top of the widget.  On
some platforms, a text widget can be scrolled by
pixels instead of lines so that a partial line
is displayed at the top of the widget.
</p><p>
The top pixel changes when the widget is scrolled.
The top pixel does not include the widget trimming.
</p>

@return the pixel position of the top line

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Inserts a string.
<p>
The old selection is replaced with the new text.
</p>

@param string the string

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the string is <code>null</code></li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Pastes text from clipboard.
<p>
The selected text is deleted from the widget
and new text inserted from the clipboard.
</p>

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Removes the listener from the collection of listeners who will
be notified when the receiver's text is modified.

@param listener the listener which should no longer be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see ModifyListener
@see #addModifyListener
------------
Removes the listener from the collection of listeners who will
be notified when the receiver's text is modified.

@param listener the listener which should no longer be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see SegmentEvent
@see SegmentListener
@see #addSegmentListener

@since 3.8
------------
Removes the listener from the collection of listeners who will
be notified when the control is selected by the user.

@param listener the listener which should no longer be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see SelectionListener
@see #addSelectionListener
------------
Removes the listener from the collection of listeners who will
be notified when the control is verified.

@param listener the listener which should no longer be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see VerifyListener
@see #addVerifyListener
------------
Selects all the text in the receiver.

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the double click enabled flag.
<p>
The double click flag enables or disables the
default action of the text widget when the user
double clicks.
</p><p>
Note: This operation is a hint and is not supported on
platforms that do not have this concept.
</p>

@param doubleClick the new double click flag

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the echo character.
<p>
The echo character is the character that is
displayed when the user enters text or the
text is changed by the programmer. Setting
the echo character to '\0' clears the echo
character and redraws the original text.
If for any reason the echo character is invalid,
or if the platform does not allow modification
of the echo character, the default echo character
for the platform is used.
</p>

@param echo the new echo character

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the editable state.

@param editable the new editable state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the widget message. The message text is displayed
as a hint for the user, indicating the purpose of the field.
<p>
Typically this is used in conjunction with <code>SWT.SEARCH</code>.
</p>

@param message the new message

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the message is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.3
------------
Sets the orientation of the receiver, which must be one
of the constants <code>SWT.LEFT_TO_RIGHT</code> or <code>SWT.RIGHT_TO_LEFT</code>.
<p>
Note: This operation is a hint and is not supported on
platforms that do not have this concept.
</p>

@param orientation new orientation style

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 2.1.2
------------
Sets the selection.
<p>
Indexing is zero based.  The range of
a selection is from 0..N where N is
the number of characters in the widget.
</p><p>
Text selections are specified in terms of
caret positions.  In a text widget that
contains N characters, there are N+1 caret
positions, ranging from 0..N.  This differs
from other functions that address character
position such as getText () that use the
regular array indexing rules.
</p>

@param start new caret position

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the selection to the range specified
by the given start and end indices.
<p>
Indexing is zero based.  The range of
a selection is from 0..N where N is
the number of characters in the widget.
</p><p>
Text selections are specified in terms of
caret positions.  In a text widget that
contains N characters, there are N+1 caret
positions, ranging from 0..N.  This differs
from other functions that address character
position such as getText () that use the
usual array indexing rules.
</p>

@param start the start of the range
@param end the end of the range

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the selection to the range specified
by the given point, where the x coordinate
represents the start index and the y coordinate
represents the end index.
<p>
Indexing is zero based.  The range of
a selection is from 0..N where N is
the number of characters in the widget.
</p><p>
Text selections are specified in terms of
caret positions.  In a text widget that
contains N characters, there are N+1 caret
positions, ranging from 0..N.  This differs
from other functions that address character
position such as getText () that use the
usual array indexing rules.
</p>

@param selection the point

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the point is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the number of tabs.
<p>
Tab stop spacing is specified in terms of the
space (' ') character.  The width of a single
tab stop is the pixel width of the spaces.
</p>

@param tabs the number of tabs

</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the contents of the receiver to the given string. If the receiver has style
SINGLE and the argument contains multiple lines of text, the result of this
operation is undefined and may vary from platform to platform.
<p>
Note: If control characters like '\n', '\t' etc. are used
in the string, then the behavior is platform dependent.
</p>
@param string the new text

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the string is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the contents of the receiver to the characters in the array. If the receiver
has style <code>SWT.SINGLE</code> and the argument contains multiple lines of text
then the result of this operation is undefined and may vary between platforms.
<p>
Note: Use this API to prevent the text from being written into a String
object whose lifecycle is outside of your control. This can help protect
the text, for example, when the widget is used as a password field.
However, the text can't be protected if an {@link SWT#Segments} or
{@link SWT#Verify} listener has been added to the widget.
</p>

@param text a character array that contains the new text

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the array is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #getTextChars()

@since 3.7
------------
Sets the maximum number of characters that the receiver
is capable of holding to be the argument.
<p>
Instead of trying to set the text limit to zero, consider
creating a read-only text widget.
</p><p>
To reset this value to the default, use <code>setTextLimit(Text.LIMIT)</code>.
Specifying a limit value larger than <code>Text.LIMIT</code> sets the
receiver's limit to <code>Text.LIMIT</code>.
</p>

@param limit new text limit

@exception IllegalArgumentException <ul>
<li>ERROR_CANNOT_BE_ZERO - if the limit is zero</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #LIMIT
------------
Sets the zero-relative index of the line which is currently
at the top of the receiver. This index can change when lines
are scrolled or new lines are added and removed.

@param index the index of the top item

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Shows the selection.
<p>
If the selection is already showing
in the receiver, this method simply returns.  Otherwise,
lines are scrolled until the selection is visible.
</p>

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

====== TextLayout.java ======
Copyright (c) 2000, 2015 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
<code>TextLayout</code> is a graphic object that represents
styled text.
<p>
Instances of this class provide support for drawing, cursor
navigation, hit testing, text wrapping, alignment, tab expansion
line breaking, etc.  These are aspects required for rendering internationalized text.
</p><p>
Application code must explicitly invoke the <code>TextLayout#dispose()</code>
method to release the operating system resources managed by each instance
when those instances are no longer required.
</p>

@see <a href="http://www.eclipse.org/swt/snippets/#textlayout">TextLayout, TextStyle snippets</a>
@see <a href="http://www.eclipse.org/swt/examples.php">SWT Example: CustomControlExample, StyledText tab</a>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>

@since 3.0
------------
Constructs a new instance of this class on the given device.
<p>
You must dispose the text layout when it is no longer required.
</p>

@param device the device on which to allocate the text layout

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if device is null and there is no current device</li>
</ul>

@see #dispose()
------------
Draws the receiver's text using the specified GC at the specified
point.

@param gc the GC to draw
@param x the x coordinate of the top left corner of the rectangular area where the text is to be drawn
@param y the y coordinate of the top left corner of the rectangular area where the text is to be drawn

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the gc is null</li>
</ul>
------------
Draws the receiver's text using the specified GC at the specified
point.

@param gc the GC to draw
@param x the x coordinate of the top left corner of the rectangular area where the text is to be drawn
@param y the y coordinate of the top left corner of the rectangular area where the text is to be drawn
@param selectionStart the offset where the selections starts, or -1 indicating no selection
@param selectionEnd the offset where the selections ends, or -1 indicating no selection
@param selectionForeground selection foreground, or NULL to use the system default color
@param selectionBackground selection background, or NULL to use the system default color

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the gc is null</li>
</ul>
------------
Draws the receiver's text using the specified GC at the specified
point.
<p>
The parameter <code>flags</code> can include one of <code>SWT.DELIMITER_SELECTION</code>
or <code>SWT.FULL_SELECTION</code> to specify the selection behavior on all lines except
for the last line, and can also include <code>SWT.LAST_LINE_SELECTION</code> to extend
the specified selection behavior to the last line.
</p>
@param gc the GC to draw
@param x the x coordinate of the top left corner of the rectangular area where the text is to be drawn
@param y the y coordinate of the top left corner of the rectangular area where the text is to be drawn
@param selectionStart the offset where the selections starts, or -1 indicating no selection
@param selectionEnd the offset where the selections ends, or -1 indicating no selection
@param selectionForeground selection foreground, or NULL to use the system default color
@param selectionBackground selection background, or NULL to use the system default color
@param flags drawing options

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the gc is null</li>
</ul>

@since 3.3
------------
Returns the receiver's horizontal text alignment, which will be one
of <code>SWT.LEFT</code>, <code>SWT.CENTER</code> or
<code>SWT.RIGHT</code>.

@return the alignment used to positioned text horizontally

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Returns the ascent of the receiver.

@return the ascent

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@see #getDescent()
@see #setDescent(int)
@see #setAscent(int)
@see #getLineMetrics(int)
------------
Returns the bounds of the receiver. The width returned is either the
width of the longest line or the width set using {@link TextLayout#setWidth(int)}.
To obtain the text bounds of a line use {@link TextLayout#getLineBounds(int)}.

@return the bounds of the receiver

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@see #setWidth(int)
@see #getLineBounds(int)
------------
Returns the bounds for the specified range of characters. The
bounds is the smallest rectangle that encompasses all characters
in the range. The start and end offsets are inclusive and will be
clamped if out of range.

@param start the start offset
@param end the end offset
@return the bounds of the character range

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Returns the descent of the receiver.

@return the descent

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@see #getAscent()
@see #setAscent(int)
@see #setDescent(int)
@see #getLineMetrics(int)
------------
Returns the default font currently being used by the receiver
to draw and measure text.

@return the receiver's font

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Returns the receiver's indent.

@return the receiver's indent

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@since 3.2
/
public int getIndent () {
checkLayout();
return DPIUtil.autoScaleDown(getDevice(), getIndentInPixels());
}

int getIndentInPixels () {
return indent;
}


Returns the receiver's justification.

@return the receiver's justification

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@since 3.2
/
public boolean getJustify () {
checkLayout();
return justify;
}

long /*int*/ getItemFont (StyleItem item) {
if (item.fallbackFont != 0) return item.fallbackFont;
if (item.style != null && item.style.font != null) {
return item.style.font.handle;
}
if (this.font != null) {
return this.font.handle;
}
return device.systemFont.handle;
}


Returns the embedding level for the specified character offset. The
embedding level is usually used to determine the directionality of a
character in bidirectional text.

@param offset the character offset
@return the embedding level

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the character offset is out of range</li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
------------
Returns the bounds of the line for the specified line index.

@param lineIndex the line index
@return the line bounds

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the line index is out of range</li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Returns the receiver's line count. This includes lines caused
by wrapping.

@return the line count

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Returns the index of the line that contains the specified
character offset.

@param offset the character offset
@return the line index

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the character offset is out of range</li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Returns the font metrics for the specified line index.

@param lineIndex the line index
@return the font metrics

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the line index is out of range</li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Returns the line offsets.  Each value in the array is the
offset for the first character in a line except for the last
value, which contains the length of the text.

@return the line offsets

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Returns the location for the specified character offset. The
<code>trailing</code> argument indicates whether the offset
corresponds to the leading or trailing edge of the cluster.

@param offset the character offset
@param trailing the trailing flag
@return the location of the character offset

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@see #getOffset(Point, int[])
@see #getOffset(int, int, int[])
------------
Returns the next offset for the specified offset and movement
type.  The movement is one of <code>SWT.MOVEMENT_CHAR</code>,
<code>SWT.MOVEMENT_CLUSTER</code>, <code>SWT.MOVEMENT_WORD</code>,
<code>SWT.MOVEMENT_WORD_END</code> or <code>SWT.MOVEMENT_WORD_START</code>.

@param offset the start offset
@param movement the movement type
@return the next offset

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the offset is out of range</li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@see #getPreviousOffset(int, int)
------------
Returns the character offset for the specified point.
For a typical character, the trailing argument will be filled in to
indicate whether the point is closer to the leading edge (0) or
the trailing edge (1).  When the point is over a cluster composed
of multiple characters, the trailing argument will be filled with the
position of the character in the cluster that is closest to
the point.

@param point the point
@param trailing the trailing buffer
@return the character offset

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the trailing length is less than <code>1</code></li>
<li>ERROR_NULL_ARGUMENT - if the point is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@see #getLocation(int, boolean)
------------
Returns the character offset for the specified point.
For a typical character, the trailing argument will be filled in to
indicate whether the point is closer to the leading edge (0) or
the trailing edge (1).  When the point is over a cluster composed
of multiple characters, the trailing argument will be filled with the
position of the character in the cluster that is closest to
the point.

@param x the x coordinate of the point
@param y the y coordinate of the point
@param trailing the trailing buffer
@return the character offset

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the trailing length is less than <code>1</code></li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@see #getLocation(int, boolean)
------------
Returns the orientation of the receiver.

@return the orientation style

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Returns the previous offset for the specified offset and movement
type.  The movement is one of <code>SWT.MOVEMENT_CHAR</code>,
<code>SWT.MOVEMENT_CLUSTER</code> or <code>SWT.MOVEMENT_WORD</code>,
<code>SWT.MOVEMENT_WORD_END</code> or <code>SWT.MOVEMENT_WORD_START</code>.

@param offset the start offset
@param movement the movement type
@return the previous offset

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the offset is out of range</li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@see #getNextOffset(int, int)
------------
Gets the ranges of text that are associated with a <code>TextStyle</code>.

@return the ranges, an array of offsets representing the start and end of each
text style.

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@see #getStyles()

@since 3.2
------------
Returns the text segments offsets of the receiver.

@return the text segments offsets

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Returns the segments characters of the receiver.

@return the segments characters

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@since 3.6
------------
Returns the line spacing of the receiver.

@return the line spacing

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Gets the style of the receiver at the specified character offset.

@param offset the text offset
@return the style or <code>null</code> if not set

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the character offset is out of range</li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Gets all styles of the receiver.

@return the styles

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@see #getRanges()

@since 3.2
------------
Returns the tab list of the receiver.

@return the tab list

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Gets the receiver's text, which will be an empty
string if it has never been set.

@return the receiver's text

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Returns the text direction of the receiver.

@return the text direction value

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
@since 3.103
------------
Returns the width of the receiver.

@return the width

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Returns the receiver's wrap indent.

@return the receiver's wrap indent

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@since 3.6
/
public int getWrapIndent () {
checkLayout();
return DPIUtil.autoScaleDown(getDevice(), getWrapIndentInPixels());
}

int getWrapIndentInPixels () {
return wrapIndent;
}


Returns <code>true</code> if the text layout has been disposed,
and <code>false</code> otherwise.
<p>
This method gets the dispose state for the text layout.
When a text layout has been disposed, it is an error to
invoke any other method (except {@link #dispose()}) using the text layout.
</p>

@return <code>true</code> when the text layout is disposed and <code>false</code> otherwise
------------
Sets the text alignment for the receiver. The alignment controls
how a line of text is positioned horizontally. The argument should
be one of <code>SWT.LEFT</code>, <code>SWT.RIGHT</code> or <code>SWT.CENTER</code>.
<p>
The default alignment is <code>SWT.LEFT</code>.  Note that the receiver's
width must be set in order to use <code>SWT.RIGHT</code> or <code>SWT.CENTER</code>
alignment.
</p>

@param alignment the new alignment

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@see #setWidth(int)
------------
Sets the ascent of the receiver. The ascent is distance in pixels
from the baseline to the top of the line and it is applied to all
lines. The default value is <code>-1</code> which means that the
ascent is calculated from the line fonts.

@param ascent the new ascent

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the ascent is less than <code>-1</code></li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@see #setDescent(int)
@see #getLineMetrics(int)
------------
Sets the descent of the receiver. The descent is distance in pixels
from the baseline to the bottom of the line and it is applied to all
lines. The default value is <code>-1</code> which means that the
descent is calculated from the line fonts.

@param descent the new descent

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the descent is less than <code>-1</code></li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@see #setAscent(int)
@see #getLineMetrics(int)
------------
Sets the default font which will be used by the receiver
to draw and measure text. If the
argument is null, then a default font appropriate
for the platform will be used instead. Note that a text
style can override the default font.

@param font the new font for the receiver, or null to indicate a default font

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the font has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Sets the indent of the receiver. This indent is applied to the first line of
each paragraph.

@param indent new indent

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@see #setWrapIndent(int)

@since 3.2
------------
Sets the justification of the receiver. Note that the receiver's
width must be set in order to use justification.

@param justify new justify

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@since 3.2
------------
Sets the orientation of the receiver, which must be one
of <code>SWT.LEFT_TO_RIGHT</code> or <code>SWT.RIGHT_TO_LEFT</code>.

@param orientation new orientation style

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Sets the offsets of the receiver's text segments. Text segments are used to
override the default behavior of the bidirectional algorithm.
Bidirectional reordering can happen within a text segment but not
between two adjacent segments.
<p>
Each text segment is determined by two consecutive offsets in the
<code>segments</code> arrays. The first element of the array should
always be zero and the last one should always be equals to length of
the text.
</p>
<p>
When segments characters are set, the segments are the offsets where
the characters are inserted in the text.
<p>

@param segments the text segments offset

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@see #setSegmentsChars(char[])
------------
Sets the characters to be used in the segments boundaries. The segments
are set by calling <code>setSegments(int[])</code>. The application can
use this API to insert Unicode Control Characters in the text to control
the display of the text and bidi reordering. The characters are not
accessible by any other API in <code>TextLayout</code>.

@param segmentsChars the segments characters

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@see #setSegments(int[])

@since 3.6
------------
Sets the line spacing of the receiver.  The line spacing
is the space left between lines.

@param spacing the new line spacing

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the spacing is negative</li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Sets the style of the receiver for the specified range.  Styles previously
set for that range will be overwritten.  The start and end offsets are
inclusive and will be clamped if out of range.

@param style the style
@param start the start offset
@param end the end offset

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Sets the receiver's tab list. Each value in the tab list specifies
the space in points from the origin of the text layout to the respective
tab stop.  The last tab stop width is repeated continuously.

@param tabs the new tab list

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Sets the receiver's text.
<p>
Note: Setting the text also clears all the styles. This method
returns without doing anything if the new text is the same as
the current text.
</p>

@param text the new text

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the text is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Sets the text direction of the receiver, which must be one
of <code>SWT.LEFT_TO_RIGHT</code>, <code>SWT.RIGHT_TO_LEFT</code>
or <code>SWT.AUTO_TEXT_DIRECTION</code>.

<p>
<b>Warning</b>: This API is currently only implemented on Windows.
It doesn't set the base text direction on GTK and Cocoa.
</p>

@param textDirection the new text direction

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
@since 3.103
------------
Sets the line width of the receiver, which determines how
text should be wrapped and aligned. The default value is
<code>-1</code> which means wrapping is disabled.

@param width the new width

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the width is <code>0</code> or less than <code>-1</code></li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@see #setAlignment(int)
------------
Sets the wrap indent of the receiver. This indent is applied to all lines
in the paragraph except the first line.

@param wrapIndent new wrap indent

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@see #setIndent(int)

@since 3.6
------------
Returns a string containing a concise, human-readable
description of the receiver.

@return a string representation of the receiver

====== TextStyle.java ======
Copyright (c) 2000, 2010 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
<code>TextStyle</code> defines a set of styles that can be applied
to a range of text.
<p>
The hashCode() method in this class uses the values of the public
fields to compute the hash value. When storing instances of the
class in hashed collections, do not modify these fields after the
object has been inserted.
</p>
<p>
Application code does <em>not</em> need to explicitly release the
resources managed by each instance when those instances are no longer
required, and thus no <code>dispose()</code> method is provided.
</p>

@see TextLayout
@see Font
@see Color
@see <a href="http://www.eclipse.org/swt/snippets/#textlayout">TextLayout, TextStyle snippets</a>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>

@since 3.0
------------
the font of the style

public Font font;


the foreground of the style

public Color foreground;


the background of the style

public Color background;


the underline flag of the style. The default underline
style is <code>SWT.UNDERLINE_SINGLE</code>.
*
*
@since 3.1

public boolean underline;


the underline color of the style
*
@since 3.4

public Color underlineColor;


the underline style. This style is ignored when
<code>underline</code> is false.
<p>
This value should be one of <code>SWT.UNDERLINE_SINGLE</code>,
<code>SWT.UNDERLINE_DOUBLE</code>, <code>SWT.UNDERLINE_ERROR</code>,
<code>SWT.UNDERLINE_SQUIGGLE</code>, or <code>SWT.UNDERLINE_LINK</code>.
</p>
*
@see SWT#UNDERLINE_SINGLE
@see SWT#UNDERLINE_DOUBLE
@see SWT#UNDERLINE_ERROR
@see SWT#UNDERLINE_SQUIGGLE
@see SWT#UNDERLINE_LINK
*
@since 3.4

public int underlineStyle;


the strikeout flag of the style
*
@since 3.1

public boolean strikeout;


the strikeout color of the style
*
@since 3.4

public Color strikeoutColor;


the border style. The default border style is <code>SWT.NONE</code>.
<p>
This value should be one of <code>SWT.BORDER_SOLID</code>,
<code>SWT.BORDER_DASH</code>,<code>SWT.BORDER_DOT</code> or
<code>SWT.NONE</code>.
</p>
*
@see SWT#BORDER_SOLID
@see SWT#BORDER_DASH
@see SWT#BORDER_DOT
@see SWT#NONE
*
@since 3.4

public int borderStyle;


the border color of the style
*
@since 3.4

public Color borderColor;


the GlyphMetrics of the style
*
@since 3.2

public GlyphMetrics metrics;


the baseline rise of the style.
*
@since 3.2

public int rise;


the data. An user data field. It can be used to hold the HREF when the range
is used as a link or the embed object when the range is used with <code>GlyphMetrics</code>.
<p>
*
@since 3.5

public Object data;


Create an empty text style.

@since 3.4
------------
Create a new text style with the specified font, foreground
and background.

@param font the font of the style, <code>null</code> if none
@param foreground the foreground color of the style, <code>null</code> if none
@param background the background color of the style, <code>null</code> if none
------------
Create a new text style from an existing text style.

@param style the style to copy

@since 3.4
------------
Compares the argument to the receiver, and returns true
if they represent the <em>same</em> object using a class
specific comparison.

@param object the object to compare with this object
@return <code>true</code> if the object is the same as this object and <code>false</code> otherwise

@see #hashCode()
------------
Returns an integer hash code for the receiver. Any two
objects that return <code>true</code> when passed to
<code>equals</code> must return the same value for this
method.

@return the receiver's hash

@see #equals(Object)
------------
Returns a string containing a concise, human-readable
description of the receiver.

@return a string representation of the <code>TextStyle</code>

====== TIFFDirectory.java ======
Copyright (c) 2000, 2009 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation

====== TIFFFileFormat.java ======
Copyright (c) 2000, 2009 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Baseline TIFF decoder revision 6.0
Extension T4-encoding CCITT T.4 1D

====== TIFFModifiedHuffmanCodec.java ======
Copyright (c) 2000, 2005 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation

====== TIFFRandomFileAccess.java ======
Copyright (c) 2000, 2005 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation

====== ToolBar.java ======
Copyright (c) 2000, 2014 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class support the layout of selectable
tool bar items.
<p>
The item children that may be added to instances of this class
must be of type <code>ToolItem</code>.
</p><p>
Note that although this class is a subclass of <code>Composite</code>,
it does not make sense to add <code>Control</code> children to it,
or set a layout on it.
</p><p>
<dl>
<dt><b>Styles:</b></dt>
<dd>FLAT, WRAP, RIGHT, HORIZONTAL, VERTICAL, SHADOW_OUT</dd>
<dt><b>Events:</b></dt>
<dd>(none)</dd>
</dl>
<p>
Note: Only one of the styles HORIZONTAL and VERTICAL may be specified.
</p><p>
IMPORTANT: This class is <em>not</em> intended to be subclassed.
</p>

@see <a href="http://www.eclipse.org/swt/snippets/#toolbar">ToolBar, ToolItem snippets</a>
@see <a href="http://www.eclipse.org/swt/examples.php">SWT Example: ControlExample</a>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
@noextend This class is not intended to be subclassed by clients.
------------
Constructs a new instance of this class given its parent
and a style value describing its behavior and appearance.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.
</p>

@param parent a composite control which will be the parent of the new instance (cannot be null)
@param style the style of control to construct

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see SWT#FLAT
@see SWT#WRAP
@see SWT#RIGHT
@see SWT#HORIZONTAL
@see SWT#SHADOW_OUT
@see SWT#VERTICAL
@see Widget#checkSubclass()
@see Widget#getStyle()
------------
Returns the item at the given, zero-relative index in the
receiver. Throws an exception if the index is out of range.

@param index the index of the item to return
@return the item at the given index

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list minus 1 (inclusive)</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the item at the given point in the receiver
or null if no such item exists. The point is in the
coordinate system of the receiver.

@param point the point used to locate the item
@return the item at the given point

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the point is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the number of items contained in the receiver.

@return the number of items

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns an array of <code>ToolItem</code>s which are the items
in the receiver.
<p>
Note: This is not the actual structure used by the receiver
to maintain its list of items, so modifying the array will
not affect the receiver.
</p>

@return the items in the receiver

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the number of rows in the receiver. When
the receiver has the <code>WRAP</code> style, the
number of rows can be greater than one.  Otherwise,
the number of rows is always one.

@return the number of items

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Searches the receiver's list starting at the first item
(index 0) until an item is found that is equal to the
argument, and returns the index of that item. If no item
is found, returns -1.

@param item the search item
@return the index of the item

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the tool item is null</li>
<li>ERROR_INVALID_ARGUMENT - if the tool item has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

====== ToolItem.java ======
Copyright (c) 2000, 2015 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class represent a selectable user interface object
that represents a button in a tool bar.
<dl>
<dt><b>Styles:</b></dt>
<dd>PUSH, CHECK, RADIO, SEPARATOR, DROP_DOWN</dd>
<dt><b>Events:</b></dt>
<dd>Selection</dd>
</dl>
<p>
Note: Only one of the styles CHECK, PUSH, RADIO, SEPARATOR and DROP_DOWN
may be specified.
</p><p>
IMPORTANT: This class is <em>not</em> intended to be subclassed.
</p>

@see <a href="http://www.eclipse.org/swt/snippets/#toolbar">ToolBar, ToolItem snippets</a>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
@noextend This class is not intended to be subclassed by clients.
------------
Constructs a new instance of this class given its parent
(which must be a <code>ToolBar</code>) and a style value
describing its behavior and appearance. The item is added
to the end of the items maintained by its parent.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.
</p>

@param parent a composite control which will be the parent of the new instance (cannot be null)
@param style the style of control to construct

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see SWT#PUSH
@see SWT#CHECK
@see SWT#RADIO
@see SWT#SEPARATOR
@see SWT#DROP_DOWN
@see Widget#checkSubclass
@see Widget#getStyle
------------
Constructs a new instance of this class given its parent
(which must be a <code>ToolBar</code>), a style value
describing its behavior and appearance, and the index
at which to place it in the items maintained by its parent.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.
</p>

@param parent a composite control which will be the parent of the new instance (cannot be null)
@param style the style of control to construct
@param index the zero-relative index to store the receiver in its parent

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
<li>ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the parent (inclusive)</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see SWT#PUSH
@see SWT#CHECK
@see SWT#RADIO
@see SWT#SEPARATOR
@see SWT#DROP_DOWN
@see Widget#checkSubclass
@see Widget#getStyle
------------
Adds the listener to the collection of listeners who will
be notified when the control is selected by the user, by sending
it one of the messages defined in the <code>SelectionListener</code>
interface.
<p>
When <code>widgetSelected</code> is called when the mouse is over the arrow portion of a drop-down tool,
the event object detail field contains the value <code>SWT.ARROW</code>.
<code>widgetDefaultSelected</code> is not called.
</p>
<p>
When the <code>SWT.RADIO</code> style bit is set, the <code>widgetSelected</code> method is
also called when the receiver loses selection because another item in the same radio group
was selected by the user. During <code>widgetSelected</code> the application can use
<code>getSelection()</code> to determine the current selected state of the receiver.
</p>

@param listener the listener which should be notified when the control is selected by the user,

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see SelectionListener
@see #removeSelectionListener
@see SelectionEvent
------------
Returns a rectangle describing the receiver's size and location
relative to its parent.

@return the receiver's bounding rectangle

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the control that is used to fill the bounds of
the item when the item is a <code>SEPARATOR</code>.

@return the control

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the receiver's disabled image if it has one, or null
if it does not.
<p>
The disabled image is displayed when the receiver is disabled.
</p>

@return the receiver's disabled image

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns <code>true</code> if the receiver is enabled, and
<code>false</code> otherwise. A disabled control is typically
not selectable from the user interface and draws with an
inactive or "grayed" look.

@return the receiver's enabled state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #isEnabled
------------
Returns the receiver's hot image if it has one, or null
if it does not.
<p>
The hot image is displayed when the mouse enters the receiver.
</p>

@return the receiver's hot image

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the receiver's parent, which must be a <code>ToolBar</code>.

@return the receiver's parent

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns <code>true</code> if the receiver is selected,
and false otherwise.
<p>
When the receiver is of type <code>CHECK</code> or <code>RADIO</code>,
it is selected when it is checked (which some platforms draw as a
pushed in button). If the receiver is of any other type, this method
returns false.
</p>

@return the selection state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the receiver's tool tip text, or null if it has not been set.

@return the receiver's tool tip text

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Gets the width of the receiver.

@return the width

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns <code>true</code> if the receiver is enabled and all
of the receiver's ancestors are enabled, and <code>false</code>
otherwise. A disabled control is typically not selectable from the
user interface and draws with an inactive or "grayed" look.

@return the receiver's enabled state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #getEnabled
------------
Removes the listener from the collection of listeners who will
be notified when the control is selected by the user.

@param listener the listener which should no longer be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see SelectionListener
@see #addSelectionListener
------------
Sets the control that is used to fill the bounds of
the item when the item is a <code>SEPARATOR</code>.

@param control the new control

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the control has been disposed</li>
<li>ERROR_INVALID_PARENT - if the control is not in the same widget tree</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Enables the receiver if the argument is <code>true</code>,
and disables it otherwise.
<p>
A disabled control is typically
not selectable from the user interface and draws with an
inactive or "grayed" look.
</p>

@param enabled the new enabled state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the receiver's disabled image to the argument, which may be
null indicating that no disabled image should be displayed.
<p>
The disabled image is displayed when the receiver is disabled.
</p>

@param image the disabled image to display on the receiver (may be null)

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the image has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the receiver's hot image to the argument, which may be
null indicating that no hot image should be displayed.
<p>
The hot image is displayed when the mouse enters the receiver.
</p>

@param image the hot image to display on the receiver (may be null)

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the image has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the selection state of the receiver.
<p>
When the receiver is of type <code>CHECK</code> or <code>RADIO</code>,
it is selected when it is checked (which some platforms draw as a
pushed in button).
</p>

@param selected the new selection state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the receiver's text. The string may include
the mnemonic character.
</p>
<p>
Mnemonics are indicated by an '&amp;' that causes the next
character to be the mnemonic.  When the user presses a
key sequence that matches the mnemonic, a selection
event occurs. On most platforms, the mnemonic appears
underlined but may be emphasised in a platform specific
manner.  The mnemonic indicator character '&amp;' can be
escaped by doubling it in the string, causing a single
'&amp;' to be displayed.
</p><p>
Note: If control characters like '\n', '\t' etc. are used
in the string, then the behavior is platform dependent.
</p>

@param string the new text

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the text is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the receiver's tool tip text to the argument, which
may be null indicating that the default tool tip for the
control will be shown. For a control that has a default
tool tip, such as the Tree control on Windows, setting
the tool tip text to an empty string replaces the default,
causing no tool tip text to be shown.
<p>
The mnemonic indicator (character '&amp;') is not displayed in a tool tip.
To display a single '&amp;' in the tool tip, the character '&amp;' can be
escaped by doubling it in the string.
</p>

@param string the new tool tip text (or null)

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the width of the receiver, for <code>SEPARATOR</code> ToolItems.

@param width the new width. If the new value is <code>SWT.DEFAULT</code>,
the width is a fixed-width area whose amount is determined by the platform.
If the new value is 0 a vertical or horizontal line will be drawn, depending
on the setting of the corresponding style bit (<code>SWT.VERTICAL</code> or
<code>SWT.HORIZONTAL</code>). If the new value is <code>SWT.SEPARATOR_FILL</code>
a variable-width space is inserted that acts as a spring between the two adjoining
items which will push them out to the extent of the containing ToolBar.

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

====== ToolTip.java ======
Copyright (c) 2000, 2016 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class represent popup windows that are used
to inform or warn the user.
<p>
<dl>
<dt><b>Styles:</b></dt>
<dd>BALLOON, ICON_ERROR, ICON_INFORMATION, ICON_WARNING</dd>
<dt><b>Events:</b></dt>
<dd>Selection</dd>
</dl>
</p><p>
Note: Only one of the styles ICON_ERROR, ICON_INFORMATION,
and ICON_WARNING may be specified.
</p><p>
IMPORTANT: This class is <em>not</em> intended to be subclassed.
</p>

@see <a href="http://www.eclipse.org/swt/snippets/#tooltips">Tool Tips snippets</a>
@see <a href="http://www.eclipse.org/swt/examples.php">SWT Example: ControlExample</a>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>

@since 3.2
@noextend This class is not intended to be subclassed by clients.
------------
Constructs a new instance of this class given its parent
and a style value describing its behavior and appearance.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.
</p>

@param parent a composite control which will be the parent of the new instance (cannot be null)
@param style the style of control to construct

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see SWT#BALLOON
@see SWT#ICON_ERROR
@see SWT#ICON_INFORMATION
@see SWT#ICON_WARNING
@see Widget#checkSubclass
@see Widget#getStyle
------------
Adds the listener to the collection of listeners who will
be notified when the receiver is selected by the user, by sending
it one of the messages defined in the <code>SelectionListener</code>
interface.
<p>
<code>widgetSelected</code> is called when the receiver is selected.
<code>widgetDefaultSelected</code> is not called.
</p>

@param listener the listener which should be notified when the receiver is selected by the user

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see SelectionListener
@see #removeSelectionListener
@see SelectionEvent
------------
Returns <code>true</code> if the receiver is automatically
hidden by the platform, and <code>false</code> otherwise.

@return the receiver's auto hide state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the receiver's message, which will be an empty
string if it has never been set.

@return the receiver's message

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the receiver's parent, which must be a <code>Shell</code>.

@return the receiver's parent

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the receiver's text, which will be an empty
string if it has never been set.

@return the receiver's text

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns <code>true</code> if the receiver is visible, and
<code>false</code> otherwise.
<p>
If one of the receiver's ancestors is not visible or some
other condition makes the receiver not visible, this method
may still indicate that it is considered visible even though
it may not actually be showing.
</p>

@return the receiver's visibility state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns <code>true</code> if the receiver is visible and all
of the receiver's ancestors are visible and <code>false</code>
otherwise.

@return the receiver's visibility state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #getVisible
------------
Removes the listener from the collection of listeners who will
be notified when the receiver is selected by the user.

@param listener the listener which should no longer be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see SelectionListener
@see #addSelectionListener
------------
Makes the receiver hide automatically when <code>true</code>,
and remain visible when <code>false</code>.

@param autoHide the auto hide state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #getVisible
@see #setVisible
------------
Sets the location of the receiver, which must be a tooltip,
to the point specified by the arguments which are relative
to the display.
<p>
Note that this is different from most widgets where the
location of the widget is relative to the parent.
</p>

@param x the new x coordinate for the receiver
@param y the new y coordinate for the receiver

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the location of the receiver, which must be a tooltip,
to the point specified by the argument which is relative
to the display.
<p>
Note that this is different from most widgets where the
location of the widget is relative to the parent.
</p><p>
Note that the platform window manager ultimately has control
over the location of tooltips.
</p>

@param location the new location for the receiver

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the point is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the receiver's message.

@param string the new message

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the text is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the receiver's text.

@param string the new text

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the text is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Marks the receiver as visible if the argument is <code>true</code>,
and marks it invisible otherwise.
<p>
If one of the receiver's ancestors is not visible or some
other condition makes the receiver not visible, marking
it visible may not actually cause it to be displayed.
</p>

@param visible the new visibility state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

====== Touch.java ======
Copyright (c) 2010, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class are created in response to a
touch-based input device being touched. They are found
in the <code>touches</code> field of an Event or TouchEvent.

@see org.eclipse.swt.events.TouchEvent
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>

@since 3.7
------------
The unique identity of the touch. Use this value to track changes to a touch
during the touch's life. Two touches may have the same identity even if they
come from different sources.

public long id;


The object representing the input source that generated the touch.

public TouchSource source;


The state of this touch at the time it was generated. If this field is 0
then the finger is still touching the device but has not moved
since the last <code>TouchEvent</code> was generated.
*
@see org.eclipse.swt.SWT#TOUCHSTATE_DOWN
@see org.eclipse.swt.SWT#TOUCHSTATE_MOVE
@see org.eclipse.swt.SWT#TOUCHSTATE_UP

public int state;


A flag indicating that the touch is the first touch from a previous
state of no touch points. Once designated as such, the touch remains
the primary touch until all fingers are removed from the device.

public boolean primary;


The x location of the touch in TouchSource coordinates.

public int x;


The y location of the touch in TouchSource coordinates.

public int y;


Constructs a new touch state from the given inputs.

@param identity Identity of the touch
@param source Object representing the device that generated the touch
@param state One of the state constants representing the state of this touch
@param primary Whether or not the touch is the primary touch
@param x X location of the touch in screen coordinates
@param y Y location of the touch in screen coordinates
------------
Returns a string containing a concise, human-readable
description of the receiver.

@return a string representation of the event

====== TouchEvent.java ======
Copyright (c) 2010, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class are sent in response to
a touch-based input source being touched.

@see TouchListener
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>

@since 3.7
------------
The set of touches representing the state of all contacts with touch input
device at the time the event was generated.
*
@see org.eclipse.swt.widgets.Touch

public Touch[] touches;


The state of the keyboard modifier keys and mouse masks
at the time the event was generated.
*
@see org.eclipse.swt.SWT#MODIFIER_MASK
@see org.eclipse.swt.SWT#BUTTON_MASK

public int stateMask;


The widget-relative x coordinate of the pointer
at the time the touch occurred.

public int x;


The widget-relative y coordinate of the pointer
at the time the touch occurred.

public int y;

static final long serialVersionUID = -8348741538373572182L;


Constructs a new instance of this class based on the
information in the given untyped event.

@param e the untyped event containing the information
------------
Returns a string containing a concise, human-readable
description of the receiver.

@return a string representation of the event

====== TouchListener.java ======
Copyright (c) 2010, 2016 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
Lars Vogel <Lars.Vogel@vogella.com> - Bug 502576
------------
Classes which implement this interface provide methods
that deal with the events that are generated as touches
occur on a touch-aware input surface.
<p>
After creating an instance of a class that implements
this interface it can be added to a control using the
<code>addTouchListener</code> method and removed using
the <code>removeTouchListener</code> method. When a
touch occurs or changes state, the <code>touch</code> method
will be invoked.
</p>
<p>
<b>Warning</b>: This API is currently only implemented on Windows and Cocoa.
SWT doesn't send Gesture or Touch events on GTK.
</p>

@see TouchEvent

@since 3.7
------------
Sent when a touch sequence begins, changes state, or ends.

@param e an event containing information about the touch

====== TouchSource.java ======
Copyright (c) 2010, 2012 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class represent sources of touch input that generate <code>Touch</code> objects.
They also provide information about the input source, which is important for interpreting the
information in the <code>Touch</code> object.
<p>
Instances of this class can be marked as direct or indirect:
<ul>
<li>When an instance is <em>direct</em>, the touch source is a touch-sensitive digitizer surface such
as a tablet or a touch screen. There is a one-to-one mapping between a touch point and a location in
a window.
</li><li>
When an instance is <em>indirect</em> (more precisely, not direct), the touch source is a track pad or
other device that normally moves the cursor, but is also able to interpret multiple touches on its surface.
In this case there is not a one-to-one mapping between the location of the touch on the device and a
location on the display because the user can remove their finger or stylus and touch another part of
the device and resume what they were doing.
</li>
</ul>

@see Touch
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>

@since 3.7
------------
Constructs a new touch source from the given inputs.

@param direct Is the touch source direct or indirect?
@param height height of the source in pixels.
@param width width of the source in pixels.
------------
Returns the type of touch input this source generates, <code>true</code> for direct or <code>false</code> for indirect.

@return <code>true</code> if the input source is direct, or <code>false</code> otherwise
------------
Returns the bounding rectangle of the device. For a direct source, this corresponds to the bounds of
the display device in pixels. For an indirect source, this contains the size of the device in pixels.
<p>
Note that the x and y values may not necessarily be 0 if the TouchSource is a direct source.

@return the bounding rectangle of the input source
------------
Returns a string containing a concise, human-readable
description of the receiver.

@return a string representation of the event

====== Tracker.java ======
Copyright (c) 2000, 2013 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class implement rubber banding rectangles that are
drawn onto a parent <code>Composite</code> or <code>Display</code>.
These rectangles can be specified to respond to mouse and key events
by either moving or resizing themselves accordingly.  Trackers are
typically used to represent window geometries in a lightweight manner.

<dl>
<dt><b>Styles:</b></dt>
<dd>LEFT, RIGHT, UP, DOWN, RESIZE</dd>
<dt><b>Events:</b></dt>
<dd>Move, Resize</dd>
</dl>
<p>
Note: Rectangle move behavior is assumed unless RESIZE is specified.
</p><p>
IMPORTANT: This class is <em>not</em> intended to be subclassed.
</p>

@see <a href="http://www.eclipse.org/swt/snippets/#tracker">Tracker snippets</a>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
@noextend This class is not intended to be subclassed by clients.
------------
Constructs a new instance of this class given its parent
and a style value describing its behavior and appearance.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.
</p>

@param parent a widget which will be the parent of the new instance (cannot be null)
@param style the style of widget to construct

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see SWT#LEFT
@see SWT#RIGHT
@see SWT#UP
@see SWT#DOWN
@see SWT#RESIZE
@see Widget#checkSubclass
@see Widget#getStyle
------------
Constructs a new instance of this class given the display
to create it on and a style value describing its behavior
and appearance.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.
</p><p>
Note: Currently, null can be passed in for the display argument.
This has the effect of creating the tracker on the currently active
display if there is one. If there is no current display, the
tracker is created on a "default" display. <b>Passing in null as
the display argument is not considered to be good coding style,
and may not be supported in a future release of SWT.</b>
</p>

@param display the display to create the tracker on
@param style the style of control to construct

@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see SWT#LEFT
@see SWT#RIGHT
@see SWT#UP
@see SWT#DOWN
@see SWT#RESIZE
------------
Adds the listener to the collection of listeners who will
be notified when the control is moved or resized, by sending
it one of the messages defined in the <code>ControlListener</code>
interface.

@param listener the listener which should be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see ControlListener
@see #removeControlListener
------------
Adds the listener to the collection of listeners who will
be notified when keys are pressed and released on the system keyboard, by sending
it one of the messages defined in the <code>KeyListener</code>
interface.

@param listener the listener which should be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see KeyListener
@see #removeKeyListener
------------
Stops displaying the tracker rectangles.  Note that this is not considered
to be a cancelation by the user.

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Draw the rectangles displayed by the tracker.
------------
Returns the bounds that are being drawn, expressed relative to the parent
widget.  If the parent is a <code>Display</code> then these are screen
coordinates.

@return the bounds of the Rectangles being drawn

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns <code>true</code> if the rectangles are drawn with a stippled line, <code>false</code> otherwise.

@return the stippled effect of the rectangles

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Displays the Tracker rectangles for manipulation by the user.  Returns when
the user has either finished manipulating the rectangles or has cancelled the
Tracker.

@return <code>true</code> if the user did not cancel the Tracker, <code>false</code> otherwise

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Removes the listener from the collection of listeners who will
be notified when the control is moved or resized.

@param listener the listener which should no longer be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see ControlListener
@see #addControlListener
------------
Removes the listener from the collection of listeners who will
be notified when keys are pressed and released on the system keyboard.

@param listener the listener which should no longer be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see KeyListener
@see #addKeyListener
------------
Sets the <code>Cursor</code> of the Tracker.  If this cursor is <code>null</code>
then the cursor reverts to the default.

@param newCursor the new <code>Cursor</code> to display

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Specifies the rectangles that should be drawn, expressed relative to the parent
widget.  If the parent is a Display then these are screen coordinates.

@param rectangles the bounds of the rectangles to be drawn

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the set of rectangles is null or contains a null rectangle</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Changes the appearance of the line used to draw the rectangles.

@param stippled <code>true</code> if rectangle should appear stippled

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

====== Transform.java ======
Copyright (c) 2000, 2014 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class represent transformation matrices for
points expressed as (x, y) pairs of floating point numbers.
<p>
Application code must explicitly invoke the <code>Transform.dispose()</code>
method to release the operating system resources managed by each instance
when those instances are no longer required.
</p>
<p>
This class requires the operating system's advanced graphics subsystem
which may not be available on some platforms.
</p>

@see <a href="http://www.eclipse.org/swt/examples.php">SWT Example: GraphicsExample</a>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>

@since 3.1
------------
the OS resource for the Transform
(Warning: This field is platform dependent)
<p>
<b>IMPORTANT:</b> This field is <em>not</em> part of the SWT
public API. It is marked public only so that it can be shared
within the packages provided by SWT. It is not available on all
platforms and should never be accessed from application code.
</p>
*
@noreference This field is not intended to be referenced by clients.

public long /*int*/ handle;


Constructs a new identity Transform.
<p>
This operation requires the operating system's advanced
graphics subsystem which may not be available on some
platforms.
</p>
<p>
You must dispose the transform when it is no longer required.
</p>

@param device the device on which to allocate the Transform

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if device is null and there is no current device</li>
</ul>
@exception SWTException <ul>
<li>ERROR_NO_GRAPHICS_LIBRARY - if advanced graphics are not available</li>
</ul>
@exception SWTError <ul>
<li>ERROR_NO_HANDLES if a handle for the Transform could not be obtained</li>
</ul>

@see #dispose()
------------
Constructs a new Transform given an array of elements that represent the
matrix that describes the transformation.
<p>
This operation requires the operating system's advanced
graphics subsystem which may not be available on some
platforms.
</p>
<p>
You must dispose the transform when it is no longer required.
</p>

@param device the device on which to allocate the Transform
@param elements an array of floats that describe the transformation matrix

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if device is null and there is no current device, or the elements array is null</li>
<li>ERROR_INVALID_ARGUMENT - if the elements array is too small to hold the matrix values</li>
</ul>
@exception SWTException <ul>
<li>ERROR_NO_GRAPHICS_LIBRARY - if advanced graphics are not available</li>
</ul>
@exception SWTError <ul>
<li>ERROR_NO_HANDLES if a handle for the Transform could not be obtained</li>
</ul>

@see #dispose()
------------
Constructs a new Transform given all of the elements that represent the
matrix that describes the transformation.
<p>
This operation requires the operating system's advanced
graphics subsystem which may not be available on some
platforms.
</p>
<p>
You must dispose the transform when it is no longer required.
</p>

@param device the device on which to allocate the Transform
@param m11 the first element of the first row of the matrix
@param m12 the second element of the first row of the matrix
@param m21 the first element of the second row of the matrix
@param m22 the second element of the second row of the matrix
@param dx the third element of the first row of the matrix
@param dy the third element of the second row of the matrix

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if device is null and there is no current device</li>
</ul>
@exception SWTException <ul>
<li>ERROR_NO_GRAPHICS_LIBRARY - if advanced graphics are not available</li>
</ul>
@exception SWTError <ul>
<li>ERROR_NO_HANDLES if a handle for the Transform could not be obtained</li>
</ul>

@see #dispose()
------------
Fills the parameter with the values of the transformation matrix
that the receiver represents, in the order {m11, m12, m21, m22, dx, dy}.

@param elements array to hold the matrix values

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parameter is null</li>
<li>ERROR_INVALID_ARGUMENT - if the parameter is too small to hold the matrix values</li>
</ul>
------------
Modifies the receiver such that the matrix it represents becomes the
identity matrix.

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@since 3.4
------------
Modifies the receiver such that the matrix it represents becomes
the mathematical inverse of the matrix it previously represented.

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_CANNOT_INVERT_MATRIX - if the matrix is not invertible</li>
</ul>
------------
Returns <code>true</code> if the Transform has been disposed,
and <code>false</code> otherwise.
<p>
This method gets the dispose state for the Transform.
When a Transform has been disposed, it is an error to
invoke any other method (except {@link #dispose()}) using the Transform.

@return <code>true</code> when the Transform is disposed, and <code>false</code> otherwise
------------
Returns <code>true</code> if the Transform represents the identity matrix
and false otherwise.

@return <code>true</code> if the receiver is an identity Transform, and <code>false</code> otherwise
------------
Modifies the receiver such that the matrix it represents becomes the
the result of multiplying the matrix it previously represented by the
argument.

@param matrix the matrix to multiply the receiver by

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parameter is null</li>
<li>ERROR_INVALID_ARGUMENT - if the parameter has been disposed</li>
</ul>
------------
Modifies the receiver so that it represents a transformation that is
equivalent to its previous transformation rotated by the specified angle.
The angle is specified in degrees and for the identity transform 0 degrees
is at the 3 o'clock position. A positive value indicates a clockwise rotation
while a negative value indicates a counter-clockwise rotation.

@param angle the angle to rotate the transformation by

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Modifies the receiver so that it represents a transformation that is
equivalent to its previous transformation scaled by (scaleX, scaleY).

@param scaleX the amount to scale in the X direction
@param scaleY the amount to scale in the Y direction

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Modifies the receiver to represent a new transformation given all of
the elements that represent the matrix that describes that transformation.

@param m11 the first element of the first row of the matrix
@param m12 the second element of the first row of the matrix
@param m21 the first element of the second row of the matrix
@param m22 the second element of the second row of the matrix
@param dx the third element of the first row of the matrix
@param dy the third element of the second row of the matrix

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Modifies the receiver so that it represents a transformation that is
equivalent to its previous transformation sheared by (shearX, shearY).

@param shearX the shear factor in the X direction
@param shearY the shear factor in the Y direction

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>

@since 3.4
------------
Given an array containing points described by alternating x and y values,
modify that array such that each point has been replaced with the result of
applying the transformation represented by the receiver to that point.

@param pointArray an array of alternating x and y values to be transformed

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the point array is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Modifies the receiver so that it represents a transformation that is
equivalent to its previous transformation translated by (offsetX, offsetY).

@param offsetX the distance to translate in the X direction
@param offsetY the distance to translate in the Y direction

@exception SWTException <ul>
<li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Returns a string containing a concise, human-readable
description of the receiver.

@return a string representation of the receiver

====== TraverseEvent.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class are sent as a result of
widget traversal actions.
<p>
The traversal event allows fine control over keyboard traversal
in a control both to implement traversal and override the default
traversal behavior defined by the system.  This is achieved using
two fields, <code>detail</code> and <code>doit</code>.
</p><p>
When a control is traversed, a traverse event is sent.  The detail
describes the type of traversal and the doit field indicates the default
behavior of the system.  For example, when a right arrow key is pressed
in a text control, the detail field is <code>TRAVERSE_ARROW_NEXT</code>
and the doit field is <code>false</code>, indicating that the system
will not traverse to the next tab item and the arrow key will be
delivered to the text control.  If the same key is pressed in a radio
button, the doit field will be <code>true</code>, indicating that
traversal is to proceed to the next tab item, possibly another radio
button in the group and that the arrow key is not to be delivered
to the radio button.
</p><p>
How can the traversal event be used to implement traversal?
When a tab key is pressed in a canvas, the detail field will be
<code>TRAVERSE_TAB_NEXT</code> and the doit field will be
<code>false</code>.  The default behavior of the system is to
provide no traversal for canvas controls.  This means that by
default in a canvas, a key listener will see every key that the
user types, including traversal keys.  To understand why this
is so, it is important to understand that only the widget implementor
can decide which traversal is appropriate for the widget.  Returning
to the <code>TRAVERSE_TAB_NEXT</code> example, a text widget implemented
by a canvas would typically want to use the tab key to insert a
tab character into the widget.  A list widget implementation, on the
other hand, would like the system default traversal behavior.  Using
only the doit flag, both implementations are possible.  The text widget
implementor sets doit to <code>false</code>, ensuring that the system
will not traverse and that the tab key will be delivered to key listeners.
The list widget implementor sets doit to <code>true</code>, indicating
that the system should perform tab traversal and that the key should not
be delivered to the list widget.
</p><p>
How can the traversal event be used to override system traversal?
When the return key is pressed in a single line text control, the
detail field is <code>TRAVERSE_RETURN</code> and the doit field
is <code>true</code>.  This means that the return key will be processed
by the default button, not the text widget.  If the text widget has
a default selection listener, it will not run because the return key
will be processed by the default button.  Imagine that the text control
is being used as an in-place editor and return is used to dispose the
widget.  Setting doit to <code>false</code> will stop the system from
activating the default button but the key will be delivered to the text
control, running the key and selection listeners for the text.  How
can <code>TRAVERSE_RETURN</code> be implemented so that the default button
will not be activated and the text widget will not see the return key?
This is achieved by setting doit to <code>true</code>, and the detail
to <code>TRAVERSE_NONE</code>.
</p><p>
Note: A widget implementor will typically implement traversal using
only the doit flag to either enable or disable system traversal.
</p>

@see TraverseListener
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
------------
The traversal type.
<p><ul>
<li>{@link org.eclipse.swt.SWT#TRAVERSE_NONE}</li>
<li>{@link org.eclipse.swt.SWT#TRAVERSE_ESCAPE}</li>
<li>{@link org.eclipse.swt.SWT#TRAVERSE_RETURN}</li>
<li>{@link org.eclipse.swt.SWT#TRAVERSE_TAB_NEXT}</li>
<li>{@link org.eclipse.swt.SWT#TRAVERSE_TAB_PREVIOUS}</li>
<li>{@link org.eclipse.swt.SWT#TRAVERSE_ARROW_NEXT}</li>
<li>{@link org.eclipse.swt.SWT#TRAVERSE_ARROW_PREVIOUS}</li>
<li>{@link org.eclipse.swt.SWT#TRAVERSE_MNEMONIC}</li>
<li>{@link org.eclipse.swt.SWT#TRAVERSE_PAGE_NEXT}</li>
<li>{@link org.eclipse.swt.SWT#TRAVERSE_PAGE_PREVIOUS}</li>
</ul></p>
*
Setting this field will change the type of traversal.
For example, setting the detail to <code>TRAVERSE_NONE</code>
causes no traversal action to be taken.
*
When used in conjunction with the <code>doit</code> field, the
traversal detail field can be useful when overriding the default
traversal mechanism for a control. For example, setting the doit
field to <code>false</code> will cancel the operation and allow
the traversal key stroke to be delivered to the control. Setting
the doit field to <code>true</code> indicates that the traversal
described by the detail field is to be performed.

public int detail;

static final long serialVersionUID = 3257565105301239349L;


Constructs a new instance of this class based on the
information in the given untyped event.

@param e the untyped event containing the information
------------
Returns a string containing a concise, human-readable
description of the receiver.

@return a string representation of the event

====== TraverseListener.java ======
Copyright (c) 2000, 2016 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
Lars Vogel <Lars.Vogel@vogella.com> - Bug 502576
------------
Classes which implement this interface provide a method
that deals with the events that are generated when a
traverse event occurs in a control.
<p>
After creating an instance of a class that implements
this interface it can be added to a control using the
<code>addTraverseListener</code> method and removed using
the <code>removeTraverseListener</code> method. When a
traverse event occurs in a control, the keyTraversed method
will be invoked.
</p>

@see TraverseEvent
------------
Sent when a traverse event occurs in a control.
<p>
A traverse event occurs when the user presses a traversal
key. Traversal keys are typically tab and arrow keys, along
with certain other keys on some platforms. Traversal key
constants beginning with <code>TRAVERSE_</code> are defined
in the <code>SWT</code> class.
</p>

@param e an event containing information about the traverse

====== Tray.java ======
Copyright (c) 2000, 2009 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class represent the system tray that is part
of the task bar status area on some operating systems.

<dl>
<dt><b>Styles:</b></dt>
<dd>(none)</dd>
<dt><b>Events:</b></dt>
<dd>(none)</dd>
</dl>
<p>
IMPORTANT: This class is <em>not</em> intended to be subclassed.
</p>

@see Display#getSystemTray
@see <a href="http://www.eclipse.org/swt/snippets/#tray">Tray, TrayItem snippets</a>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>

@since 3.0
@noextend This class is not intended to be subclassed by clients.
------------
Returns the item at the given, zero-relative index in the
receiver. Throws an exception if the index is out of range.

@param index the index of the item to return
@return the item at the given index

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list minus 1 (inclusive)</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the number of items contained in the receiver.

@return the number of items

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns an array of <code>TrayItem</code>s which are the items
in the receiver.
<p>
Note: This is not the actual structure used by the receiver
to maintain its list of items, so modifying the array will
not affect the receiver.
</p>

@return the items in the receiver

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

====== TrayItem.java ======
Copyright (c) 2000, 2016 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class represent icons that can be placed on the
system tray or task bar status area.
<p>
<dl>
<dt><b>Styles:</b></dt>
<dd>(none)</dd>
<dt><b>Events:</b></dt>
<dd>DefaultSelection, MenuDetect, Selection</dd>
</dl>
</p><p>
IMPORTANT: This class is <em>not</em> intended to be subclassed.
</p>

@see <a href="http://www.eclipse.org/swt/snippets/#tray">Tray, TrayItem snippets</a>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>

@since 3.0
@noextend This class is not intended to be subclassed by clients.
------------
Constructs a new instance of this class given its parent
(which must be a <code>Tray</code>) and a style value
describing its behavior and appearance. The item is added
to the end of the items maintained by its parent.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.
</p>

@param parent a composite control which will be the parent of the new instance (cannot be null)
@param style the style of control to construct

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see SWT
@see Widget#checkSubclass
@see Widget#getStyle
------------
Adds the listener to the collection of listeners who will
be notified when the receiver is selected by the user, by sending
it one of the messages defined in the <code>SelectionListener</code>
interface.
<p>
<code>widgetSelected</code> is called when the receiver is selected
<code>widgetDefaultSelected</code> is called when the receiver is double-clicked
</p>

@param listener the listener which should be notified when the receiver is selected by the user

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see SelectionListener
@see #removeSelectionListener
@see SelectionEvent
------------
Adds the listener to the collection of listeners who will
be notified when the platform-specific context menu trigger
has occurred, by sending it one of the messages defined in
the <code>MenuDetectListener</code> interface.

@param listener the listener which should be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see MenuDetectListener
@see #removeMenuDetectListener

@since 3.3
------------
Returns the receiver's highlight image if it has one, or null
if it does not.

@return the receiver's highlight image

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.8
------------
Returns the receiver's parent, which must be a <code>Tray</code>.

@return the receiver's parent

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.2
------------
Returns the receiver's tool tip, or null if it has
not been set.

@return the receiver's tool tip text

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.2
------------
Returns the receiver's tool tip text, or null if it has
not been set.

@return the receiver's tool tip text

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns <code>true</code> if the receiver is visible and
<code>false</code> otherwise.

@return the receiver's visibility

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Removes the listener from the collection of listeners who will
be notified when the receiver is selected by the user.

@param listener the listener which should no longer be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see SelectionListener
@see #addSelectionListener
------------
Removes the listener from the collection of listeners who will
be notified when the platform-specific context menu trigger has
occurred.

@param listener the listener which should no longer be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see MenuDetectListener
@see #addMenuDetectListener

@since 3.3
------------
Sets the receiver's highlight image.

@param image the new highlight image

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the image has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.8
------------
Sets the receiver's image.

@param image the new image

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the image has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the receiver's tool tip to the argument, which
may be null indicating that no tool tip should be shown.

@param toolTip the new tool tip (or null)

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.2
------------
Sets the receiver's tool tip text to the argument, which
may be null indicating that the default tool tip for the
control will be shown. For a control that has a default
tool tip, such as the Tree control on Windows, setting
the tool tip text to an empty string replaces the default,
causing no tool tip text to be shown.
<p>
The mnemonic indicator (character '&amp;') is not displayed in a tool tip.
To display a single '&amp;' in the tool tip, the character '&amp;' can be
escaped by doubling it in the string.
</p>

@param string the new tool tip text (or null)

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Makes the receiver visible if the argument is <code>true</code>,
and makes it invisible otherwise.

@param visible the new visibility state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

====== Tree.java ======
Copyright (c) 2000, 2016 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class provide a selectable user interface object
that displays a hierarchy of items and issues notification when an
item in the hierarchy is selected.
<p>
The item children that may be added to instances of this class
must be of type <code>TreeItem</code>.
</p><p>
Style <code>VIRTUAL</code> is used to create a <code>Tree</code> whose
<code>TreeItem</code>s are to be populated by the client on an on-demand basis
instead of up-front.  This can provide significant performance improvements for
trees that are very large or for which <code>TreeItem</code> population is
expensive (for example, retrieving values from an external source).
</p><p>
Here is an example of using a <code>Tree</code> with style <code>VIRTUAL</code>:
<code><pre>
final Tree tree = new Tree(parent, SWT.VIRTUAL | SWT.BORDER);
tree.setItemCount(20);
tree.addListener(SWT.SetData, new Listener() {
public void handleEvent(Event event) {
TreeItem item = (TreeItem)event.item;
TreeItem parentItem = item.getParentItem();
String text = null;
if (parentItem == null) {
text = "node " + tree.indexOf(item);
} else {
text = parentItem.getText() + " - " + parentItem.indexOf(item);
}
item.setText(text);
System.out.println(text);
item.setItemCount(10);
}
});
</pre></code>
</p><p>
Note that although this class is a subclass of <code>Composite</code>,
it does not normally make sense to add <code>Control</code> children to
it, or set a layout on it, unless implementing something like a cell
editor.
</p><p>
<dl>
<dt><b>Styles:</b></dt>
<dd>SINGLE, MULTI, CHECK, FULL_SELECTION, VIRTUAL, NO_SCROLL</dd>
<dt><b>Events:</b></dt>
<dd>Selection, DefaultSelection, Collapse, Expand, SetData, MeasureItem, EraseItem, PaintItem</dd>
</dl>
</p><p>
Note: Only one of the styles SINGLE and MULTI may be specified.
</p><p>
IMPORTANT: This class is <em>not</em> intended to be subclassed.
</p>

@see <a href="http://www.eclipse.org/swt/snippets/#tree">Tree, TreeItem, TreeColumn snippets</a>
@see <a href="http://www.eclipse.org/swt/examples.php">SWT Example: ControlExample</a>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
@noextend This class is not intended to be subclassed by clients.
------------
Constructs a new instance of this class given its parent
and a style value describing its behavior and appearance.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.
</p>

@param parent a composite control which will be the parent of the new instance (cannot be null)
@param style the style of control to construct

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see SWT#SINGLE
@see SWT#MULTI
@see SWT#CHECK
@see SWT#FULL_SELECTION
@see SWT#VIRTUAL
@see SWT#NO_SCROLL
@see Widget#checkSubclass
@see Widget#getStyle
------------
If H_SCROLL is set, reverting the TVS_NOHSCROLL settings which
was applied while adding SWT.MeasureItem event Listener.

if ((style & SWT.H_SCROLL) != 0 && (state & DISPOSE_SENT) == 0) {
int bits = OS.GetWindowLong (handle, OS.GWL_STYLE);
bits &= ~OS.TVS_NOHSCROLL;
OS.SetWindowLong (handle, OS.GWL_STYLE, bits);
OS.InvalidateRect (handle, null, true);
}
break;
}
}
}

void _setBackgroundPixel (int newPixel) {
int oldPixel = (int)/*64*/OS.SendMessage (handle, OS.TVM_GETBKCOLOR, 0, 0);
if (oldPixel != newPixel) {
/*
Bug in Windows.  When TVM_SETBKCOLOR is used more
than once to set the background color of a tree,
the background color of the lines and the plus/minus
does not change to the new color.  The fix is to set
the background color to the default before setting
the new color.

if (oldPixel != -1) {
OS.SendMessage (handle, OS.TVM_SETBKCOLOR, 0, -1);
}

/* Set the background color */
OS.SendMessage (handle, OS.TVM_SETBKCOLOR, 0, newPixel);

/*
Feature in Windows.  When TVM_SETBKCOLOR is used to
set the background color of a tree, the plus/minus
animation draws badly.  The fix is to clear the effect.

if (explorerTheme && ENABLE_TVS_EX_FADEINOUTEXPANDOS) {
int bits2 = (int)/*64*/OS.SendMessage (handle, OS.TVM_GETEXTENDEDSTYLE, 0, 0);
if (newPixel == -1 && findImageControl () == null) {
bits2 |= OS.TVS_EX_FADEINOUTEXPANDOS;
} else {
bits2 &= ~OS.TVS_EX_FADEINOUTEXPANDOS;
}
OS.SendMessage (handle, OS.TVM_SETEXTENDEDSTYLE, 0, bits2);
}

/* Set the checkbox image list */
if ((style & SWT.CHECK) != 0) setCheckboxImageList ();
}
}


Adds the listener to the collection of listeners who will
be notified when the user changes the receiver's selection, by sending
it one of the messages defined in the <code>SelectionListener</code>
interface.
<p>
When <code>widgetSelected</code> is called, the item field of the event object is valid.
If the receiver has the <code>SWT.CHECK</code> style and the check selection changes,
the event object detail field contains the value <code>SWT.CHECK</code>.
<code>widgetDefaultSelected</code> is typically called when an item is double-clicked.
The item field of the event object is valid for default selection, but the detail field is not used.
</p>

@param listener the listener which should be notified when the user changes the receiver's selection

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see SelectionListener
@see #removeSelectionListener
@see SelectionEvent
------------
Adds the listener to the collection of listeners who will
be notified when an item in the receiver is expanded or collapsed
by sending it one of the messages defined in the <code>TreeListener</code>
interface.

@param listener the listener which should be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see TreeListener
@see #removeTreeListener
------------
Clears the item at the given zero-relative index in the receiver.
The text, icon and other attributes of the item are set to the default
value.  If the tree was created with the <code>SWT.VIRTUAL</code> style,
these attributes are requested again as needed.

@param index the index of the item to clear
@param all <code>true</code> if all child items of the indexed item should be
cleared recursively, and <code>false</code> otherwise

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list minus 1 (inclusive)</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see SWT#VIRTUAL
@see SWT#SetData

@since 3.2
------------
Clears all the items in the receiver. The text, icon and other
attributes of the items are set to their default values. If the
tree was created with the <code>SWT.VIRTUAL</code> style, these
attributes are requested again as needed.

@param all <code>true</code> if all child items should be cleared
recursively, and <code>false</code> otherwise

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see SWT#VIRTUAL
@see SWT#SetData

@since 3.2
------------
Deselects an item in the receiver.  If the item was already
deselected, it remains deselected.

@param item the item to be deselected

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the item is null</li>
<li>ERROR_INVALID_ARGUMENT - if the item has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.4
------------
Deselects all selected items in the receiver.

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the width in pixels of a grid line.

@return the width of a grid line in pixels

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.1
------------
Returns the height of the receiver's header

@return the height of the header or zero if the header is not visible

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.1
------------
Returns <code>true</code> if the receiver's header is visible,
and <code>false</code> otherwise.
<p>
If one of the receiver's ancestors is not visible or some
other condition makes the receiver not visible, this method
may still indicate that it is considered visible even though
it may not actually be showing.
</p>

@return the receiver's header's visibility state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.1
------------
Returns the column at the given, zero-relative index in the
receiver. Throws an exception if the index is out of range.
Columns are returned in the order that they were created.
If no <code>TreeColumn</code>s were created by the programmer,
this method will throw <code>ERROR_INVALID_RANGE</code> despite
the fact that a single column of data may be visible in the tree.
This occurs when the programmer uses the tree like a list, adding
items but never creating a column.

@param index the index of the column to return
@return the column at the given index

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list minus 1 (inclusive)</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see Tree#getColumnOrder()
@see Tree#setColumnOrder(int[])
@see TreeColumn#getMoveable()
@see TreeColumn#setMoveable(boolean)
@see SWT#Move

@since 3.1
------------
Returns the number of columns contained in the receiver.
If no <code>TreeColumn</code>s were created by the programmer,
this value is zero, despite the fact that visually, one column
of items may be visible. This occurs when the programmer uses
the tree like a list, adding items but never creating a column.

@return the number of columns

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.1
------------
Returns an array of zero-relative integers that map
the creation order of the receiver's items to the
order in which they are currently being displayed.
<p>
Specifically, the indices of the returned array represent
the current visual order of the items, and the contents
of the array represent the creation order of the items.
</p><p>
Note: This is not the actual structure used by the receiver
to maintain its list of items, so modifying the array will
not affect the receiver.
</p>

@return the current visual order of the receiver's items

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see Tree#setColumnOrder(int[])
@see TreeColumn#getMoveable()
@see TreeColumn#setMoveable(boolean)
@see SWT#Move

@since 3.2
------------
Returns an array of <code>TreeColumn</code>s which are the
columns in the receiver. Columns are returned in the order
that they were created.  If no <code>TreeColumn</code>s were
created by the programmer, the array is empty, despite the fact
that visually, one column of items may be visible. This occurs
when the programmer uses the tree like a list, adding items but
never creating a column.
<p>
Note: This is not the actual structure used by the receiver
to maintain its list of items, so modifying the array will
not affect the receiver.
</p>

@return the items in the receiver

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see Tree#getColumnOrder()
@see Tree#setColumnOrder(int[])
@see TreeColumn#getMoveable()
@see TreeColumn#setMoveable(boolean)
@see SWT#Move

@since 3.1
------------
Returns the item at the given, zero-relative index in the
receiver. Throws an exception if the index is out of range.

@param index the index of the item to return
@return the item at the given index

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list minus 1 (inclusive)</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.1
------------
Returns the item at the given point in the receiver
or null if no such item exists. The point is in the
coordinate system of the receiver.
<p>
The item that is returned represents an item that could be selected by the user.
For example, if selection only occurs in items in the first column, then null is
returned if the point is outside of the item.
Note that the SWT.FULL_SELECTION style hint, which specifies the selection policy,
determines the extent of the selection.
</p>

@param point the point used to locate the item
@return the item at the given point, or null if the point is not in a selectable item

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the point is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the number of items contained in the receiver
that are direct item children of the receiver.  The
number that is returned is the number of roots in the
tree.

@return the number of items

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the height of the area which would be used to
display <em>one</em> of the items in the tree.

@return the height of one item

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns a (possibly empty) array of items contained in the
receiver that are direct item children of the receiver.  These
are the roots of the tree.
<p>
Note: This is not the actual structure used by the receiver
to maintain its list of items, so modifying the array will
not affect the receiver.
</p>

@return the items

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns <code>true</code> if the receiver's lines are visible,
and <code>false</code> otherwise. Note that some platforms draw
grid lines while others may draw alternating row colors.
<p>
If one of the receiver's ancestors is not visible or some
other condition makes the receiver not visible, this method
may still indicate that it is considered visible even though
it may not actually be showing.
</p>

@return the visibility state of the lines

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.1
------------
Returns the receiver's parent item, which must be a
<code>TreeItem</code> or null when the receiver is a
root.

@return the receiver's parent item

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns an array of <code>TreeItem</code>s that are currently
selected in the receiver. The order of the items is unspecified.
An empty array indicates that no items are selected.
<p>
Note: This is not the actual structure used by the receiver
to maintain its selection, so modifying the array will
not affect the receiver.
</p>
@return an array representing the selection

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the number of selected items contained in the receiver.

@return the number of selected items

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the column which shows the sort indicator for
the receiver. The value may be null if no column shows
the sort indicator.

@return the sort indicator

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #setSortColumn(TreeColumn)

@since 3.2
------------
Returns the direction of the sort indicator for the receiver.
The value will be one of <code>UP</code>, <code>DOWN</code>
or <code>NONE</code>.

@return the sort direction

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #setSortDirection(int)

@since 3.2
------------
Returns the item which is currently at the top of the receiver.
This item can change when items are expanded, collapsed, scrolled
or new items are added or removed.

@return the item at the top of the receiver

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 2.1
------------
Searches the receiver's list starting at the first column
(index 0) until a column is found that is equal to the
argument, and returns the index of that column. If no column
is found, returns -1.

@param column the search column
@return the index of the column

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the column is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.1
------------
Searches the receiver's list starting at the first item
(index 0) until an item is found that is equal to the
argument, and returns the index of that item. If no item
is found, returns -1.

@param item the search item
@return the index of the item

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the item is null</li>
<li>ERROR_INVALID_ARGUMENT - if the item has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.1
------------
Removes all of the items from the receiver.

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Removes the listener from the collection of listeners who will
be notified when the user changes the receiver's selection.

@param listener the listener which should no longer be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see SelectionListener
@see #addSelectionListener
------------
Removes the listener from the collection of listeners who will
be notified when items in the receiver are expanded or collapsed.

@param listener the listener which should no longer be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see TreeListener
@see #addTreeListener
------------
Display a mark indicating the point at which an item will be inserted.
The drop insert item has a visual hint to show where a dragged item
will be inserted when dropped on the tree.

@param item the insert item.  Null will clear the insertion mark.
@param before true places the insert mark above 'item'. false places
the insert mark below 'item'.

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the item has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the number of root-level items contained in the receiver.

@param count the number of items

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.2
------------
Sets the height of the area which would be used to
display <em>one</em> of the items in the tree.

@param itemHeight the height of one item

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.2
------------
Marks the receiver's lines as visible if the argument is <code>true</code>,
and marks it invisible otherwise. Note that some platforms draw
grid lines while others may draw alternating row colors.
<p>
If one of the receiver's ancestors is not visible or some
other condition makes the receiver not visible, marking
it visible may not actually cause it to be displayed.
</p>

@param show the new visibility state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.1
------------
Selects an item in the receiver.  If the item was already
selected, it remains selected.

@param item the item to be selected

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the item is null</li>
<li>ERROR_INVALID_ARGUMENT - if the item has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.4
------------
Selects all of the items in the receiver.
<p>
If the receiver is single-select, do nothing.
</p>

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the order that the items in the receiver should
be displayed in to the given argument which is described
in terms of the zero-relative ordering of when the items
were added.

@param order the new order to display the items

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the item order is null</li>
<li>ERROR_INVALID_ARGUMENT - if the item order is not the same length as the number of items</li>
</ul>

@see Tree#getColumnOrder()
@see TreeColumn#getMoveable()
@see TreeColumn#setMoveable(boolean)
@see SWT#Move

@since 3.2
------------
Marks the receiver's header as visible if the argument is <code>true</code>,
and marks it invisible otherwise.
<p>
If one of the receiver's ancestors is not visible or some
other condition makes the receiver not visible, marking
it visible may not actually cause it to be displayed.
</p>

@param show the new visibility state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.1
------------
Sets the receiver's selection to the given item.
The current selection is cleared before the new item is selected,
and if necessary the receiver is scrolled to make the new selection visible.
<p>
If the item is not in the receiver, then it is ignored.
</p>

@param item the item to select

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the item is null</li>
<li>ERROR_INVALID_ARGUMENT - if the item has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.2
------------
Sets the receiver's selection to be the given array of items.
The current selection is cleared before the new items are selected,
and if necessary the receiver is scrolled to make the new selection visible.
<p>
Items that are not in the receiver are ignored.
If the receiver is single-select and multiple items are specified,
then all items are ignored.
</p>

@param items the array of items

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the array of items is null</li>
<li>ERROR_INVALID_ARGUMENT - if one of the items has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see Tree#deselectAll()
------------
Sets the column used by the sort indicator for the receiver. A null
value will clear the sort indicator.  The current sort column is cleared
before the new column is set.

@param column the column used by the sort indicator or <code>null</code>

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the column is disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.2
------------
Sets the direction of the sort indicator for the receiver. The value
can be one of <code>UP</code>, <code>DOWN</code> or <code>NONE</code>.

@param direction the direction of the sort indicator

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.2
------------
Sets the item which is currently at the top of the receiver.
This item can change when items are expanded, collapsed, scrolled
or new items are added or removed.

@param item the item to be shown

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the item is null</li>
<li>ERROR_INVALID_ARGUMENT - if the item has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see Tree#getTopItem()

@since 2.1
------------
Shows the column.  If the column is already showing in the receiver,
this method simply returns.  Otherwise, the columns are scrolled until
the column is visible.

@param column the column to be shown

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the item is null</li>
<li>ERROR_INVALID_ARGUMENT - if the item has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.1
------------
Shows the item.  If the item is already showing in the receiver,
this method simply returns.  Otherwise, the items are scrolled
and expanded until the item is visible.

@param item the item to be shown

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the item is null</li>
<li>ERROR_INVALID_ARGUMENT - if the item has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see Tree#showSelection()
------------
Shows the selection.  If the selection is already showing in the receiver,
this method simply returns.  Otherwise, the items are scrolled until
the selection is visible.

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see Tree#showItem(TreeItem)

====== TreeAdapter.java ======
Copyright (c) 2000, 2016 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
This adapter class provides default implementations for the
methods described by the <code>TreeListener</code> interface.
<p>
Classes that wish to deal with <code>TreeEvent</code>s can
extend this class and override only the methods which they are
interested in.
</p>

@see TreeListener
@see TreeEvent
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
------------
Sent when a tree branch is collapsed.
The default behavior is to do nothing.

@param e an event containing information about the tree operation
------------
Sent when a tree branch is expanded.
The default behavior is to do nothing.

@param e an event containing information about the tree operation

====== TreeColumn.java ======
Copyright (c) 2000, 2012 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class represent a column in a tree widget.
<p><dl>
<dt><b>Styles:</b></dt>
<dd>LEFT, RIGHT, CENTER</dd>
<dt><b>Events:</b></dt>
<dd> Move, Resize, Selection</dd>
</dl>
</p><p>
Note: Only one of the styles LEFT, RIGHT and CENTER may be specified.
</p><p>
IMPORTANT: This class is <em>not</em> intended to be subclassed.
</p>

@see <a href="http://www.eclipse.org/swt/snippets/#tree">Tree, TreeItem, TreeColumn snippets</a>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>

@since 3.1
@noextend This class is not intended to be subclassed by clients.
------------
Constructs a new instance of this class given its parent
(which must be a <code>Tree</code>) and a style value
describing its behavior and appearance. The item is added
to the end of the items maintained by its parent.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.
</p>

@param parent a composite control which will be the parent of the new instance (cannot be null)
@param style the style of control to construct

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see SWT#LEFT
@see SWT#RIGHT
@see SWT#CENTER
@see Widget#checkSubclass
@see Widget#getStyle
------------
Constructs a new instance of this class given its parent
(which must be a <code>Tree</code>), a style value
describing its behavior and appearance, and the index
at which to place it in the items maintained by its parent.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.
</p>
<p>
Note that due to a restriction on some platforms, the first column
is always left aligned.
</p>
@param parent a composite control which will be the parent of the new instance (cannot be null)
@param style the style of control to construct
@param index the zero-relative index to store the receiver in its parent

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
<li>ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the parent (inclusive)</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see SWT#LEFT
@see SWT#RIGHT
@see SWT#CENTER
@see Widget#checkSubclass
@see Widget#getStyle
------------
Adds the listener to the collection of listeners who will
be notified when the control is moved or resized, by sending
it one of the messages defined in the <code>ControlListener</code>
interface.

@param listener the listener which should be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see ControlListener
@see #removeControlListener
------------
Adds the listener to the collection of listeners who will
be notified when the control is selected by the user, by sending
it one of the messages defined in the <code>SelectionListener</code>
interface.
<p>
<code>widgetSelected</code> is called when the column header is selected.
<code>widgetDefaultSelected</code> is not called.
</p>

@param listener the listener which should be notified when the control is selected by the user

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see SelectionListener
@see #removeSelectionListener
@see SelectionEvent
------------
Returns a value which describes the position of the
text or image in the receiver. The value will be one of
<code>LEFT</code>, <code>RIGHT</code> or <code>CENTER</code>.

@return the alignment

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Gets the moveable attribute. A column that is
not moveable cannot be reordered by the user
by dragging the header but may be reordered
by the programmer.

@return the moveable attribute

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see Tree#getColumnOrder()
@see Tree#setColumnOrder(int[])
@see TreeColumn#setMoveable(boolean)
@see SWT#Move

@since 3.2
------------
Returns the receiver's parent, which must be a <code>Tree</code>.

@return the receiver's parent

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Gets the resizable attribute. A column that is
not resizable cannot be dragged by the user but
may be resized by the programmer.

@return the resizable attribute

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the receiver's tool tip text, or null if it has
not been set.

@return the receiver's tool tip text

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.2
------------
Gets the width of the receiver.

@return the width

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Causes the receiver to be resized to its preferred size.
For a composite, this involves computing the preferred size
from its layout, if there is one.

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Removes the listener from the collection of listeners who will
be notified when the control is moved or resized.

@param listener the listener which should no longer be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see ControlListener
@see #addControlListener
------------
Removes the listener from the collection of listeners who will
be notified when the control is selected by the user.

@param listener the listener which should no longer be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see SelectionListener
@see #addSelectionListener
------------
Controls how text and images will be displayed in the receiver.
The argument should be one of <code>LEFT</code>, <code>RIGHT</code>
or <code>CENTER</code>.
<p>
Note that due to a restriction on some platforms, the first column
is always left aligned.
</p>
@param alignment the new alignment

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the moveable attribute.  A column that is
moveable can be reordered by the user by dragging
the header. A column that is not moveable cannot be
dragged by the user but may be reordered
by the programmer.

@param moveable the moveable attribute

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see Tree#setColumnOrder(int[])
@see Tree#getColumnOrder()
@see TreeColumn#getMoveable()
@see SWT#Move

@since 3.2
------------
Sets the resizable attribute.  A column that is
not resizable cannot be dragged by the user but
may be resized by the programmer.

@param resizable the resize attribute

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the receiver's tool tip text to the argument, which
may be null indicating that the default tool tip for the
control will be shown. For a control that has a default
tool tip, such as the Tree control on Windows, setting
the tool tip text to an empty string replaces the default,
causing no tool tip text to be shown.
<p>
The mnemonic indicator (character '&amp;') is not displayed in a tool tip.
To display a single '&amp;' in the tool tip, the character '&amp;' can be
escaped by doubling it in the string.
</p>

@param string the new tool tip text (or null)

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.2
------------
Sets the width of the receiver.

@param width the new width

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

====== TreeEvent.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class are sent as a result of
trees being expanded and collapsed.

@see TreeListener
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
------------
Constructs a new instance of this class based on the
information in the given untyped event.

@param e the untyped event containing the information

====== TreeItem.java ======
Copyright (c) 2000, 2015 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class represent a selectable user interface object
that represents a hierarchy of tree items in a tree widget.

<dl>
<dt><b>Styles:</b></dt>
<dd>(none)</dd>
<dt><b>Events:</b></dt>
<dd>(none)</dd>
</dl>
<p>
IMPORTANT: This class is <em>not</em> intended to be subclassed.
</p>

@see <a href="http://www.eclipse.org/swt/snippets/#tree">Tree, TreeItem, TreeColumn snippets</a>
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
@noextend This class is not intended to be subclassed by clients.
------------
the handle to the OS resource
(Warning: This field is platform dependent)
<p>
<b>IMPORTANT:</b> This field is <em>not</em> part of the SWT
public API. It is marked public only so that it can be shared
within the packages provided by SWT. It is not available on all
platforms and should never be accessed from application code.
</p>
*
@noreference This field is not intended to be referenced by clients.

public long /*int*/ handle;
Tree parent;
String [] strings;
Image [] images;
Font font;
Font [] cellFont;
boolean cached;
int background = -1, foreground = -1;
int [] cellBackground, cellForeground;


Constructs a new instance of this class given its parent
(which must be a <code>Tree</code> or a <code>TreeItem</code>)
and a style value describing its behavior and appearance.
The item is added to the end of the items maintained by its parent.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.
</p>

@param parent a tree control which will be the parent of the new instance (cannot be null)
@param style the style of control to construct

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see SWT
@see Widget#checkSubclass
@see Widget#getStyle
------------
Constructs a new instance of this class given its parent
(which must be a <code>Tree</code> or a <code>TreeItem</code>),
a style value describing its behavior and appearance, and the index
at which to place it in the items maintained by its parent.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.
</p>

@param parent a tree control which will be the parent of the new instance (cannot be null)
@param style the style of control to construct
@param index the zero-relative index to store the receiver in its parent

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
<li>ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the parent (inclusive)</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see SWT
@see Widget#checkSubclass
@see Widget#getStyle
------------
Constructs a new instance of this class given its parent
(which must be a <code>Tree</code> or a <code>TreeItem</code>)
and a style value describing its behavior and appearance.
The item is added to the end of the items maintained by its parent.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.
</p>

@param parentItem a tree control which will be the parent of the new instance (cannot be null)
@param style the style of control to construct

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see SWT
@see Widget#checkSubclass
@see Widget#getStyle
------------
Constructs a new instance of this class given its parent
(which must be a <code>Tree</code> or a <code>TreeItem</code>),
a style value describing its behavior and appearance, and the index
at which to place it in the items maintained by its parent.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.
</p>

@param parentItem a tree control which will be the parent of the new instance (cannot be null)
@param style the style of control to construct
@param index the zero-relative index to store the receiver in its parent

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
<li>ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the parent (inclusive)</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see SWT
@see Widget#checkSubclass
@see Widget#getStyle
------------
Clears the item at the given zero-relative index in the receiver.
The text, icon and other attributes of the item are set to the default
value.  If the tree was created with the <code>SWT.VIRTUAL</code> style,
these attributes are requested again as needed.

@param index the index of the item to clear
@param all <code>true</code> if all child items of the indexed item should be
cleared recursively, and <code>false</code> otherwise

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list minus 1 (inclusive)</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see SWT#VIRTUAL
@see SWT#SetData

@since 3.2
------------
Clears all the items in the receiver. The text, icon and other
attributes of the items are set to their default values. If the
tree was created with the <code>SWT.VIRTUAL</code> style, these
attributes are requested again as needed.

@param all <code>true</code> if all child items should be cleared
recursively, and <code>false</code> otherwise

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see SWT#VIRTUAL
@see SWT#SetData

@since 3.2
------------
Returns the receiver's background color.

@return the background color

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 2.0
------------
Returns the background color at the given column index in the receiver.

@param index the column index
@return the background color

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.1
------------
Returns a rectangle describing the size and location of the receiver's
text relative to its parent.

@return the bounding rectangle of the receiver's text

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns a rectangle describing the receiver's size and location
relative to its parent at a column in the tree.

@param index the index that specifies the column
@return the receiver's bounding column rectangle

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.1
------------
Returns <code>true</code> if the receiver is checked,
and false otherwise.  When the parent does not have
the <code>CHECK style, return false.
<p>

@return the checked state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns <code>true</code> if the receiver is expanded,
and false otherwise.
<p>

@return the expanded state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the font that the receiver will use to paint textual information for this item.

@return the receiver's font

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.0
------------
Returns the font that the receiver will use to paint textual information
for the specified cell in this item.

@param index the column index
@return the receiver's font

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.1
------------
Returns the foreground color that the receiver will use to draw.

@return the receiver's foreground color

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 2.0
------------
Returns the foreground color at the given column index in the receiver.

@param index the column index
@return the foreground color

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.1
------------
Returns <code>true</code> if the receiver is grayed,
and false otherwise. When the parent does not have
the <code>CHECK style, return false.
<p>

@return the grayed state of the checkbox

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the item at the given, zero-relative index in the
receiver. Throws an exception if the index is out of range.

@param index the index of the item to return
@return the item at the given index

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list minus 1 (inclusive)</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.1
------------
Returns the number of items contained in the receiver
that are direct item children of the receiver.

@return the number of items

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns a (possibly empty) array of <code>TreeItem</code>s which
are the direct item children of the receiver.
<p>
Note: This is not the actual structure used by the receiver
to maintain its list of items, so modifying the array will
not affect the receiver.
</p>

@return the receiver's items

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the image stored at the given column index in the receiver,
or null if the image has not been set or if the column does not exist.

@param index the column index
@return the image stored at the given column index in the receiver

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.1
------------
Returns a rectangle describing the size and location
relative to its parent of an image at a column in the
tree.

@param index the index that specifies the column
@return the receiver's bounding image rectangle

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.1
------------
Returns the receiver's parent, which must be a <code>Tree</code>.

@return the receiver's parent

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the receiver's parent item, which must be a
<code>TreeItem</code> or null when the receiver is a
root.

@return the receiver's parent item

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns the text stored at the given column index in the receiver,
or empty string if the text has not been set.

@param index the column index
@return the text stored at the given column index in the receiver

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.1
------------
Returns a rectangle describing the size and location
relative to its parent of the text at a column in the
tree.

@param index the index that specifies the column
@return the receiver's bounding text rectangle

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.3
------------
Searches the receiver's list starting at the first item
(index 0) until an item is found that is equal to the
argument, and returns the index of that item. If no item
is found, returns -1.

@param item the search item
@return the index of the item

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the item is null</li>
<li>ERROR_INVALID_ARGUMENT - if the item has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.1
------------
Removes all of the items from the receiver.
<p>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.1
------------
Sets the receiver's background color to the color specified
by the argument, or to the default system color for the item
if the argument is null.

@param color the new color (or null)

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the argument has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 2.0
------------
Sets the background color at the given column index in the receiver
to the color specified by the argument, or to the default system color for the item
if the argument is null.

@param index the column index
@param color the new color (or null)

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the argument has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.1
------------
Sets the checked state of the receiver.
<p>

@param checked the new checked state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the expanded state of the receiver.
<p>

@param expanded the new expanded state

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the font that the receiver will use to paint textual information
for this item to the font specified by the argument, or to the default font
for that kind of control if the argument is null.

@param font the new font (or null)

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the argument has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.0
------------
Sets the font that the receiver will use to paint textual information
for the specified cell in this item to the font specified by the
argument, or to the default font for that kind of control if the
argument is null.

@param index the column index
@param font the new font (or null)

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the argument has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.1
------------
Sets the receiver's foreground color to the color specified
by the argument, or to the default system color for the item
if the argument is null.

@param color the new color (or null)

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the argument has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 2.0
------------
Sets the foreground color at the given column index in the receiver
to the color specified by the argument, or to the default system color for the item
if the argument is null.

@param index the column index
@param color the new color (or null)

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the argument has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.1
------------
Sets the grayed state of the checkbox for this item.  This state change
only applies if the Tree was created with the SWT.CHECK style.

@param grayed the new grayed state of the checkbox

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Sets the image for multiple columns in the tree.

@param images the array of new images

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the array of images is null</li>
<li>ERROR_INVALID_ARGUMENT - if one of the images has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.1
------------
Sets the receiver's image at a column.

@param index the column index
@param image the new image

@exception IllegalArgumentException <ul>
<li>ERROR_INVALID_ARGUMENT - if the image has been disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.1
------------
Sets the number of child items contained in the receiver.

@param count the number of items

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.2
------------
Sets the text for multiple columns in the tree.
<p>
Note: If control characters like '\n', '\t' etc. are used
in the string, then the behavior is platform dependent.
</p>
@param strings the array of new strings

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the text is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.1
------------
Sets the receiver's text at a column
<p>
Note: If control characters like '\n', '\t' etc. are used
in the string, then the behavior is platform dependent.
</p>
@param index the column index
@param string the new text

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the text is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@since 3.1

====== TreeListener.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Classes which implement this interface provide methods
that deal with the expanding and collapsing of tree
branches.
<p>
After creating an instance of a class that implements
this interface it can be added to a tree control using the
<code>addTreeListener</code> method and removed using
the <code>removeTreeListener</code> method. When a branch
of the tree is expanded or collapsed, the appropriate method
will be invoked.
</p>

@see TreeAdapter
@see TreeEvent
------------
Sent when a tree branch is collapsed.

@param e an event containing information about the tree operation
------------
Sent when a tree branch is expanded.

@param e an event containing information about the tree operation

====== TypedEvent.java ======
Copyright (c) 2000, 2017 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
This is the super class for all typed event classes provided
by SWT. Typed events contain particular information which is
applicable to the event occurrence.

@see org.eclipse.swt.widgets.Event
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
------------
the display where the event occurred
*
@since 2.0

public Display display;


the widget that issued the event

public Widget widget;


the time that the event occurred.
*
NOTE: This field is an unsigned integer and should
be AND'ed with 0xFFFFFFFFL so that it can be treated
as a signed long.

public int time;


a field for application use

public Object data;

static final long serialVersionUID = 3257285846578377524L;


Constructs a new instance of this class.

@param object the object that fired the event
------------
Constructs a new instance of this class based on the
information in the argument.

@param e the low level event to initialize the receiver with
------------
Returns the name of the event. This is the name of
the class without the package name.

@return the name of the event
------------
Returns a string containing a concise, human-readable
description of the receiver.

@return a string representation of the event

====== TypedListener.java ======
Copyright (c) 2000, 2016 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class are <em>internal SWT implementation</em>
objects which provide a mapping between the typed and untyped
listener mechanisms that SWT supports.
<p>
<b>IMPORTANT:</b> This class is <em>not</em> part of the SWT
public API. It is marked public only so that it can be shared
within the packages provided by SWT. It should never be
referenced from application code.
</p>

@see Listener
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
------------
The receiver's event listener

protected SWTEventListener eventListener;


Constructs a new instance of this class for the given event listener.
<p>
<b>IMPORTANT:</b> This method is <em>not</em> part of the SWT
public API. It is marked public only so that it can be shared
within the packages provided by SWT. It should never be
referenced from application code.
</p>

@param listener the event listener to store in the receiver

@noreference This method is not intended to be referenced by clients.
------------
Returns the receiver's event listener.
<p>
<b>IMPORTANT:</b> This method is <em>not</em> part of the SWT
public API. It is marked public only so that it can be shared
within the packages provided by SWT. It should never be
referenced from application code.
</p>

@return the receiver's event listener

@noreference This method is not intended to be referenced by clients.
------------
Handles the given event.
<p>
<b>IMPORTANT:</b> This method is <em>not</em> part of the SWT
public API. It is marked public only so that it can be shared
within the packages provided by SWT. It should never be
referenced from application code.
</p>
@param e the event to handle

@noreference This method is not intended to be referenced by clients.

====== VerifyEvent.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Instances of this class are sent as a result of
widgets handling keyboard events

@see VerifyListener
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
------------
the range of text being modified.
Setting these fields has no effect.

public int start, end;


the new text that will be inserted.
Setting this field will change the text that is about to
be inserted or deleted.

public String text;

static final long serialVersionUID = 3257003246269577014L;


Constructs a new instance of this class based on the
information in the given untyped event.

@param e the untyped event containing the information
------------
Returns a string containing a concise, human-readable
description of the receiver.

@return a string representation of the event

====== VerifyListener.java ======
Copyright (c) 2000, 2016 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
Lars Vogel <Lars.Vogel@vogella.com> - Bug 502576
------------
Classes which implement this interface provide a method
that deals with the events that are generated when text
is about to be modified.
<p>
After creating an instance of a class that implements
this interface it can be added to a text control using the
<code>addVerifyListener</code> method and removed using
the <code>removeVerifyListener</code> method. When the
text is about to be modified, the verifyText method
will be invoked.
</p>

@see VerifyEvent
------------
Sent when the text is about to be modified.
<p>
A verify event occurs after the user has done something
to modify the text (typically typed a key), but before
the text is modified. The doit field in the verify event
indicates whether or not to modify the text.
</p>

@param e an event containing information about the verify

====== Widget.java ======
Copyright (c) 2000, 2015 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
This class is the abstract superclass of all user interface objects.
Widgets are created, disposed and issue notification to listeners
when events occur which affect them.
<dl>
<dt><b>Styles:</b></dt>
<dd>(none)</dd>
<dt><b>Events:</b></dt>
<dd>Dispose</dd>
</dl>
<p>
IMPORTANT: This class is intended to be subclassed <em>only</em>
within the SWT implementation. However, it has not been marked
final to allow those outside of the SWT development team to implement
patched versions of the class in order to get around specific
limitations in advance of when those limitations can be addressed
by the team.  Any class built using subclassing to access the internals
of this class will likely fail to compile or run between releases and
may be strongly platform specific. Subclassing should not be attempted
without an intimate and detailed understanding of the workings of the
hierarchy. No support is provided for user-written classes which are
implemented as subclasses of this class.
</p>

@see #checkSubclass
@see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
------------
Prevents uninitialized instances from being created outside the package.
------------
Constructs a new instance of this class given its parent
and a style value describing its behavior and appearance.
<p>
The style value is either one of the style constants defined in
class <code>SWT</code> which is applicable to instances of this
class, or must be built by <em>bitwise OR</em>'ing together
(that is, using the <code>int</code> "|" operator) two or more
of those <code>SWT</code> style constants. The class description
lists the style constants that are applicable to the class.
Style bits are also inherited from superclasses.
</p>

@param parent a widget which will be the parent of the new instance (cannot be null)
@param style the style of widget to construct

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
<li>ERROR_INVALID_ARGUMENT - if the parent is disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>

@see SWT
@see #checkSubclass
@see #getStyle
------------
Adds the listener to the collection of listeners who will
be notified when an event of the given type occurs. When the
event does occur in the widget, the listener is notified by
sending it the <code>handleEvent()</code> message. The event
type is one of the event constants defined in class <code>SWT</code>.

@param eventType the type of event to listen for
@param listener the listener which should be notified when the event occurs

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see Listener
@see SWT
@see #getListeners(int)
@see #removeListener(int, Listener)
@see #notifyListeners
------------
Adds the listener to the collection of listeners who will
be notified when the widget is disposed. When the widget is
disposed, the listener is notified by sending it the
<code>widgetDisposed()</code> message.

@param listener the listener which should be notified when the receiver is disposed

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see DisposeListener
@see #removeDisposeListener
------------
Returns a style with exactly one style bit set out of
the specified set of exclusive style bits. All other
possible bits are cleared when the first matching bit
is found. Bits that are not part of the possible set
are untouched.

@param style the original style bits
@param int0 the 0th possible style bit
@param int1 the 1st possible style bit
@param int2 the 2nd possible style bit
@param int3 the 3rd possible style bit
@param int4 the 4th possible style bit
@param int5 the 5th possible style bit

@return the new style bits
------------
Throws an exception if the specified widget can not be
used as a parent for the receiver.

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the parent is null</li>
<li>ERROR_INVALID_ARGUMENT - if the parent is disposed</li>
</ul>
@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
</ul>
------------
Checks that this class can be subclassed.
<p>
The SWT class library is intended to be subclassed
only at specific, controlled points (most notably,
<code>Composite</code> and <code>Canvas</code> when
implementing new widgets). This method enforces this
rule unless it is overridden.
</p><p>
<em>IMPORTANT:</em> By providing an implementation of this
method that allows a subclass of a class which does not
normally allow subclassing to be created, the implementer
agrees to be fully responsible for the fact that any such
subclass will likely fail between SWT releases and will be
strongly platform specific. No support is provided for
user-written classes which are implemented in this fashion.
</p><p>
The ability to subclass outside of the allowed SWT classes
is intended purely to enable those not on the SWT development
team to implement patches in order to get around specific
limitations in advance of when those limitations can be
addressed by the team. Subclassing should not be attempted
without an intimate and detailed understanding of the hierarchy.
</p>

@exception SWTException <ul>
<li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
</ul>
------------
Throws an <code>SWTException</code> if the receiver can not
be accessed by the caller. This may include both checks on
the state of the receiver and more generally on the entire
execution context. This method <em>should</em> be called by
widget implementors to enforce the standard SWT invariants.
<p>
Currently, it is an error to invoke any method (other than
<code>isDisposed()</code>) on a widget that has had its
<code>dispose()</code> method called. It is also an error
to call widget methods from any thread that is different
from the thread that created the widget.
</p><p>
In future releases of SWT, there may be more or fewer error
checks and exceptions may be thrown for different reasons.
</p>

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Destroys the widget in the operating system and releases
the widget's handle.  If the widget does not have a handle,
this method may hide the widget, mark the widget as destroyed
or do nothing, depending on the widget.
<p>
When a widget is destroyed in the operating system, its
descendants are also destroyed by the operating system.
This means that it is only necessary to call <code>destroyWidget</code>
on the root of the widget tree.
</p><p>
This method is called after <code>releaseWidget()</code>.
</p><p>
See also <code>releaseChild()</code>, <code>releaseWidget()</code>
and <code>releaseHandle()</code>.
</p>

@see #dispose
------------
Disposes of the operating system resources associated with
the receiver and all its descendants. After this method has
been invoked, the receiver and all descendants will answer
<code>true</code> when sent the message <code>isDisposed()</code>.
Any internal connections between the widgets in the tree will
have been removed to facilitate garbage collection.
This method does nothing if the widget is already disposed.
<p>
NOTE: This method is not called recursively on the descendants
of the receiver. This means that, widget implementers can not
detect when a widget is being disposed of by re-implementing
this method, but should instead listen for the <code>Dispose</code>
event.
</p>

@exception SWTException <ul>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #addDisposeListener
@see #removeDisposeListener
@see #checkWidget
------------
Does whatever widget specific cleanup is required, and then
uses the code in <code>SWTError.error</code> to handle the error.

@param code the descriptive error code

@see SWT#error(int)
------------
Returns the application defined widget data associated
with the receiver, or null if it has not been set. The
<em>widget data</em> is a single, unnamed field that is
stored with every widget.
<p>
Applications may put arbitrary objects in this field. If
the object stored in the widget data needs to be notified
when the widget is disposed of, it is the application's
responsibility to hook the Dispose event on the widget and
do so.
</p>

@return the widget data

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - when the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - when called from the wrong thread</li>
</ul>

@see #setData(Object)
------------
Returns the application defined property of the receiver
with the specified name, or null if it has not been set.
<p>
Applications may have associated arbitrary objects with the
receiver in this fashion. If the objects stored in the
properties need to be notified when the widget is disposed
of, it is the application's responsibility to hook the
Dispose event on the widget and do so.
</p>

@param	key the name of the property
@return the value of the property or null if it has not been set

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the key is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #setData(String, Object)
------------
Returns the <code>Display</code> that is associated with
the receiver.
<p>
A widget's display is either provided when it is created
(for example, top level <code>Shell</code>s) or is the
same as its parent's display.
</p>

@return the receiver's display

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
</ul>
------------
Returns an array of listeners who will be notified when an event
of the given type occurs. The event type is one of the event constants
defined in class <code>SWT</code>.

@param eventType the type of event to listen for
@return an array of listeners that will be notified when the event occurs

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see Listener
@see SWT
@see #addListener(int, Listener)
@see #removeListener(int, Listener)
@see #notifyListeners

@since 3.4
------------
Returns the name of the widget. This is the name of
the class without the package name.

@return the name of the widget
------------
Returns the receiver's style information.
<p>
Note that the value which is returned by this method <em>may
not match</em> the value which was provided to the constructor
when the receiver was created. This can occur when the underlying
operating system does not support a particular combination of
requested styles. For example, if the platform widget used to
implement a particular SWT widget always has scroll bars, the
result of calling this method would always have the
<code>SWT.H_SCROLL</code> and <code>SWT.V_SCROLL</code> bits set.
</p>

@return the style bits

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
------------
Returns <code>true</code> if the widget has auto text direction,
and <code>false</code> otherwise.

@return <code>true</code> when the widget has auto direction and <code>false</code> otherwise

@see SWT#AUTO_TEXT_DIRECTION

@since 3.105
------------
Returns <code>true</code> if the widget has been disposed,
and <code>false</code> otherwise.
<p>
This method gets the dispose state for the widget.
When a widget has been disposed, it is an error to
invoke any other method (except {@link #dispose()}) using the widget.
</p>

@return <code>true</code> when the widget is disposed and <code>false</code> otherwise
------------
Returns <code>true</code> if there are any listeners
for the specified event type associated with the receiver,
and <code>false</code> otherwise. The event type is one of
the event constants defined in class <code>SWT</code>.

@param eventType the type of event
@return true if the event is hooked

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see SWT
------------
Notifies all of the receiver's listeners for events
of the given type that one such event has occurred by
invoking their <code>handleEvent()</code> method.  The
event type is one of the event constants defined in class
<code>SWT</code>.

@param eventType the type of event which has occurred
@param event the event data

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see SWT
@see #addListener
@see #getListeners(int)
@see #removeListener(int, Listener)
------------
Removes the listener from the collection of listeners who will
be notified when an event of the given type occurs. The event
type is one of the event constants defined in class <code>SWT</code>.

@param eventType the type of event to listen for
@param listener the listener which should no longer be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see Listener
@see SWT
@see #addListener
@see #getListeners(int)
@see #notifyListeners
------------
Removes the listener from the collection of listeners who will
be notified when an event of the given type occurs.
<p>
<b>IMPORTANT:</b> This method is <em>not</em> part of the SWT
public API. It is marked public only so that it can be shared
within the packages provided by SWT. It should never be
referenced from application code.
</p>

@param eventType the type of event to listen for
@param listener the listener which should no longer be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see Listener
@see #addListener

@noreference This method is not intended to be referenced by clients.
@nooverride This method is not intended to be re-implemented or extended by clients.
------------
Removes the listener from the collection of listeners who will
be notified when the widget is disposed.

@param listener the listener which should no longer be notified

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the listener is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see DisposeListener
@see #addDisposeListener
------------
Marks the widget to be skinned.
<p>
The skin event is sent to the receiver's display when appropriate (usually before the next event
is handled). Widgets are automatically marked for skinning upon creation as well as when its skin
id or class changes. The skin id and/or class can be changed by calling {@link Display#setData(String, Object)}
with the keys {@link SWT#SKIN_ID} and/or {@link SWT#SKIN_CLASS}. Once the skin event is sent to a widget, it
will not be sent again unless <code>reskin(int)</code> is called on the widget or on an ancestor
while specifying the <code>SWT.ALL</code> flag.
</p>
<p>
The parameter <code>flags</code> may be either:
<dl>
<dt><b>{@link SWT#ALL}</b></dt>
<dd>all children in the receiver's widget tree should be skinned</dd>
<dt><b>{@link SWT#NONE}</b></dt>
<dd>only the receiver should be skinned</dd>
</dl>
</p>
@param flags the flags specifying how to reskin

@exception SWTException
<ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>
@since 3.6
------------
Sets the application defined widget data associated
with the receiver to be the argument. The <em>widget
data</em> is a single, unnamed field that is stored
with every widget.
<p>
Applications may put arbitrary objects in this field. If
the object stored in the widget data needs to be notified
when the widget is disposed of, it is the application's
responsibility to hook the Dispose event on the widget and
do so.
</p>

@param data the widget data

@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - when the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - when called from the wrong thread</li>
</ul>

@see #getData()
------------
Sets the application defined property of the receiver
with the specified name to the given value.
<p>
Applications may associate arbitrary objects with the
receiver in this fashion. If the objects stored in the
properties need to be notified when the widget is disposed
of, it is the application's responsibility to hook the
Dispose event on the widget and do so.
</p>

@param key the name of the property
@param value the new value for the property

@exception IllegalArgumentException <ul>
<li>ERROR_NULL_ARGUMENT - if the key is null</li>
</ul>
@exception SWTException <ul>
<li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>
<li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>
</ul>

@see #getData(String)
------------
Returns a string containing a concise, human-readable
description of the receiver.

@return a string representation of the receiver

====== WinBMPFileFormat.java ======
Copyright (c) 2000, 2011 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Compress numBytes bytes of image data from src, storing in dest
(starting at 0), using the technique specified by comp.
If last is true, this indicates the last line of the image.
Answer the size of the compressed data.
------------
Answer a byte array containing the BMP representation of
the given device independent palette.
------------
Unload the given image's data into the given byte stream
using the given compression strategy.
Answer the number of bytes written.
Method modified to use the passed data if it is not null.
------------
Prepare the given image's data for unloading into a byte stream
using no compression strategy.
Answer the number of bytes written.
Method modified to use the passed data if it is not null.
------------
Unload a DeviceIndependentImage using Windows .BMP format into the given
byte stream.

====== WinICOFileFormat.java ======
Copyright (c) 2000, 2012 IBM Corporation and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
IBM Corporation - initial API and implementation
------------
Answer the size in bytes of the file representation of the given
icon
------------
Load one icon from the byte stream.
------------
Unload a single icon
------------
Unload the icon header for the given icon, calculating the offset.
------------
Unload the mask data for an icon. The data is flipped vertically
and inverted.
------------
Unload the shape data for an icon. The data is flipped vertically.
]]></plainxml>
