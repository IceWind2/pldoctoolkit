<?xml version="1.0" encoding="utf-8" ?>
<plainxml>ADMIN(1P)                                           POSIX Programmer's Manual                                          ADMIN(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->

NAME
       admin — create and administer SCCS files (DEVELOPMENT)

SYNOPSIS
       admin −i[name] [−n] [−a login] [−d flag] [−e login] [−f flag]
           [−m mrlist] [−r rel] [−t[name] [−y[comment]] newfile

       admin −n [−a login] [−d flag] [−e login] [−f flag] [−m mrlist]
           [−t[name]] [−y[comment]] newfile...

       admin [−a login] [−d flag] [−m mrlist] [−r rel] [−t[name]] file...

       admin −h file...

       admin −z file...

DESCRIPTION
       The  admin  utility shall create new SCCS files or change parameters of existing ones. If a named file does not exist, it
       shall be created, and its parameters shall be initialized according to the specified options.  Parameters not initialized
       by an option shall be assigned a default value. If a named file does exist, parameters corresponding to specified options
       shall be changed, and other parameters shall be left as is.

       All SCCS filenames supplied by the application shall be of the form s.filename. New SCCS files shall be  given  read-only
       permission  mode.  Write permission in the parent directory is required to create a file. All writing done by admin shall
       be to a temporary x-file, named x.filename (see get) created with read-only mode if admin is creating a new SCCS file, or
       created  with the same mode as that of the SCCS file if the file already exists. After successful execution of admin, the
       SCCS file shall be removed (if it exists), and the x-file shall be renamed with the name of the SCCS file.  This  ensures
       that changes are made to the SCCS file only if no errors occur.

       The  admin utility shall also use a transient lock file (named z.filename), which is used to prevent simultaneous updates
       to the SCCS file; see get.

OPTIONS
       The admin utility shall conform to the Base Definitions volume of POSIX.1‐2008, Section 12.2, Utility Syntax  Guidelines,
       except  that the −i, −t, and −y options have optional option-arguments. These optional option-arguments shall not be pre‐
       sented as separate arguments. The following options are supported:

       −n        Create a new SCCS file. When −n is used without −i, the SCCS file shall be created with control information but
                 without any file data.

       −i[name]  Specify  the  name  of  a file from which the text for a new SCCS file shall be taken. The text constitutes the
                 first delta of the file (see the −r option for the delta numbering scheme). If the −i option is used,  but  the
                 name  option-argument  is  omitted, the text shall be obtained by reading the standard input. If this option is
                 omitted, the SCCS file shall be created with control information but without  any  file  data.  The  −i  option
                 implies the −n option.

       −r SID    Specify  the  SID  of  the initial delta to be inserted. This SID shall be a trunk SID; that is, the branch and
                 sequence numbers shall be zero or missing. The level number is optional, and defaults to 1.

       −t[name]  Specify the name of a file from which descriptive text for the SCCS file shall be taken.  In the case of exist‐
                 ing SCCS files (neither −i nor −n is specified):

                  *  A  −t  option without a name option-argument shall cause the removal of descriptive text (if any) currently
                     in the SCCS file.

                  *  A −t option with a name option-argument shall cause the text (if any) in the  named  file  to  replace  the
                     descriptive text (if any) currently in the SCCS file.

       −f flag   Specify  a  flag, and, possibly, a value for the flag, to be placed in the SCCS file. Several −f options may be
                 supplied on a single admin command line. Implementations shall recognize the  following  flags  and  associated
                 values:

                 b       Allow use of the −b option on a get command to create branch deltas.

                 cceil   Specify  the  highest  release  (that  is,  ceiling), a number less than or equal to 9999, which may be
                         retrieved by a get command for editing. The default value for an unspecified c flag shall be 9999.

                 ffloor  Specify the lowest release (that is, floor), a number greater than 0 but less than 9999, which  may  be
                         retrieved by a get command for editing. The default value for an unspecified f flag shall be 1.

                 dSID    Specify the default delta number (SID) to be used by a get command.

                 istr    Treat  the  ``No  ID keywords'' message issued by get or delta as a fatal error. In the absence of this
                         flag, the message is only a warning. The message is issued if no SCCS identification keywords (see get)
                         are  found  in  the  text retrieved or stored in the SCCS file. If a value is supplied, the application
                         shall ensure that the keywords exactly match the given string; however, the string shall contain a key‐
                         word, and no embedded &amp;lt;newline&amp;gt; characters.

                 j       Allow concurrent get commands for editing on the same SID of an SCCS file. This allows multiple concur‐
                         rent updates to the same version of the SCCS file.

                 llist   Specify a list of releases to which deltas can no longer be made (that is, get −e against one of  these
                         locked  releases  fails).  Conforming  applications  shall  use the following syntax to specify a list.
                         Implementations may accept additional forms as an extension:

                             &amp;lt;list&amp;gt; ::= a | &amp;lt;range-list&amp;gt;
                             &amp;lt;range-list&amp;gt; ::= &amp;lt;range&amp;gt; | &amp;lt;range-list&amp;gt;, &amp;lt;range&amp;gt;
                             &amp;lt;range&amp;gt; ::= &amp;lt;SID&amp;gt;

                         The character a in the list shall be equivalent to specifying all releases for  the  named  SCCS  file.
                         The non-terminal &amp;lt;SID&amp;gt; in range shall be the delta number of an existing delta associated with the SCCS
                         file.

                 n       Cause delta to create a null delta in each of those releases (if any) being skipped  when  a  delta  is
                         made in a new release (for example, in making delta 5.1 after delta 2.7, releases 3 and 4 are skipped).
                         These null deltas shall serve as anchor points so that branch deltas may later be  created  from  them.
                         The  absence  of  this flag shall cause skipped releases to be nonexistent in the SCCS file, preventing
                         branch deltas from being created from them in the future. During the initial creation of an SCCS  file,
                         the  n  flag may be ignored; that is, if the −r option is used to set the release number of the initial
                         SID to a value greater than 1, null deltas need not be created for the ``skipped'' releases.

                 qtext   Substitute user-definable text for all occurrences of the %Q% keyword in the SCCS file  text  retrieved
                         by get.

                 mmod    Specify the module name of the SCCS file substituted for all occurrences of the %M% keyword in the SCCS
                         file text retrieved by get.  If the m flag is not specified, the value assigned shall be  the  name  of
                         the SCCS file with the leading '.'  removed.

                 ttype   Specify  the  type of module in the SCCS file substituted for all occurrences of the %Y% keyword in the
                         SCCS file text retrieved by get.

                 vpgm    Cause delta to prompt for modification request (MR) numbers as the reason for  creating  a  delta.  The
                         optional  value specifies the name of an MR number validation program. (If this flag is set when creat‐
                         ing an SCCS file, the application shall ensure that the m option is also used  even  if  its  value  is
                         null.)

       −d flag   Remove (delete) the specified flag from an SCCS file. Several −d options may be supplied on a single admin com‐
                 mand. See the −f option for allowable flag names. (The llist flag gives a list of releases to be unlocked.  See
                 the −f option for further description of the l flag and the syntax of a list.)

       −a login  Specify  a login name, or numerical group ID, to be added to the list of users who may make deltas (changes) to
                 the SCCS file. A group ID shall be equivalent to specifying all login names common to that group ID. Several −a
                 options  may  be used on a single admin command line. As many logins, or numerical group IDs, as desired may be
                 on the list simultaneously.  If the list of users is empty, then anyone may add deltas. If login or group ID is
                 preceded by a '!', the users so specified shall be denied permission to make deltas.

       −e login  Specify  a  login  name,  or  numerical  group  ID,  to be erased from the list of users allowed to make deltas
                 (changes) to the SCCS file. Specifying a group ID is equivalent to specifying all login names  common  to  that
                 group ID. Several −e options may be used on a single admin command line.

       −y[comment]
                 Insert  the comment text into the SCCS file as a comment for the initial delta in a manner identical to that of
                 delta.  In the POSIX locale, omission of the −y option shall result in a default comment line being inserted in
                 the form:

                     "date and time created %s %s by %s", &amp;lt;date&amp;gt;, &amp;lt;time&amp;gt;, &amp;lt;login&amp;gt;

                 where  &amp;lt;date&amp;gt; is expressed in the format of the date utility's %y/%m/%d conversion specification, &amp;lt;time&amp;gt; in the
                 format of the date utility's %T conversion specification format, and &amp;lt;login&amp;gt; is the login name of the user cre‐
                 ating the file.

       −m mrlist Insert  the list of modification request (MR) numbers into the SCCS file as the reason for creating the initial
                 delta in a manner identical to delta.  The application shall ensure that the v flag is set and the  MR  numbers
                 are  validated  if  the v flag has a value (the name of an MR number validation program).  A diagnostic message
                 shall be written if the v flag is not set or MR validation fails.

       −h        Check the structure of the SCCS file and compare the newly computed checksum with the checksum that  is  stored
                 in  the  SCCS  file.  If the newly computed checksum does not match the checksum in the SCCS file, a diagnostic
                 message shall be written.

       −z        Recompute the SCCS file checksum and store it in the first line of the SCCS file (see  the  −h  option  above).
                 Note that use of this option on a truly corrupted file may prevent future detection of the corruption.

OPERANDS
       The following operands shall be supported:

       file      A  pathname  of an existing SCCS file or a directory. If file is a directory, the admin utility shall behave as
                 though each file in the directory were specified as a named file, except that non-SCCS files (last component of
                 the pathname does not begin with s.)  and unreadable files shall be silently ignored.

       newfile   A pathname of an SCCS file to be created.

       If  exactly  one file or newfile operand appears, and it is '−', the standard input shall be read; each line of the stan‐
       dard input shall be taken to be the name of an SCCS file to be processed. Non-SCCS files and unreadable  files  shall  be
       silently ignored.

STDIN
       The  standard  input shall be a text file used only if −i is specified without an option-argument or if a file or newfile
       operand is specified as '−'.  If the first character of any standard input line is &amp;lt;SOH&amp;gt; in the POSIX locale, the results
       are unspecified.

INPUT FILES
       The existing SCCS files shall be text files of an unspecified format.

       The  application  shall  ensure  that the file named by the −i option's name option-argument shall be a text file; if the
       first character of any line in this file is &amp;lt;SOH&amp;gt; in the POSIX locale, the results are unspecified. If this file contains
       more than 99999 lines, the number of lines recorded in the header for this file shall be 99999 for this delta.

<!-- 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 <=< ACCEPT -->ENVIRONMENT VARIABLES
       The following environment variables shall affect the execution of admin:

       LANG      Provide  a  default  value for the internationalization variables that are unset or null. (See the Base Defini‐
                 tions volume of POSIX.1‐2008, Section 8.2, Internationalization Variables for the precedence of  international‐
                 ization variables used to determine the values of locale categories.)

       LC_ALL    If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_CTYPE  Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, sin‐
                 gle-byte as opposed to multi-byte characters in arguments and input files).

       LC_MESSAGES
                 Determine the locale that should be used to affect the format and contents of diagnostic  messages  written  to
                 standard error and the contents of the default −y comment.

       NLSPATH   Determine the location of message catalogs for the processing of LC_MESSAGES.<!-- ACCEPT >=> 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 -->

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       Not used.

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       Any  SCCS  files created shall be text files of an unspecified format.  During processing of a file, a locking z-file, as
       described in get, may be created and deleted.

EXTENDED DESCRIPTION
       None.

<!-- a42f9355-e63b-4205-ac0b-0b19b24faf9d <=< ACCEPT -->EXIT STATUS
       The following exit values shall be returned:

        0    Successful completion.

       &amp;gt;0    An error occurred.<!-- ACCEPT >=> a42f9355-e63b-4205-ac0b-0b19b24faf9d -->

CONSEQUENCES OF ERRORS
       Default.

       The following sections are informative.

APPLICATION USAGE
       It is recommended that directories containing SCCS files be writable by the owner only, and that SCCS files themselves be
       read-only. The mode of the directories should allow only the owner to modify SCCS files contained in the directories. The
       mode of the SCCS files prevents any modification at all except by SCCS commands.

EXAMPLES
       None.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       delta, get, prs, what

       The Base Definitions volume of POSIX.1‐2008, Chapter 8, Environment Variables, Section 12.2, Utility Syntax Guidelines

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013  Edition,  Standard  for
       Information  Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7, Copy‐
       right (C) 2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This  is  POSIX.1-2008
       with  the  2013  Technical  Corrigendum 1 applied.) In the event of any discrepancy between this version and the original
       IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the  referee  document.  The  original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any  typographical  or formatting errors that appear in this page are most likely to have been introduced during the con‐
       version of the source files to man page format. To report such errors,  see  https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                     ADMIN(1P)
ALIAS(1P)                                           POSIX Programmer's Manual                                          ALIAS(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->

NAME
       alias — define or display aliases

SYNOPSIS
       alias [alias-name[=string]...]

DESCRIPTION
       The  alias  utility shall create or redefine alias definitions or write the values of existing alias definitions to stan‐
       dard output. An alias definition provides a string value that shall replace a command name when it  is  encountered;  see
       Section 2.3.1, Alias Substitution.

       An  alias definition shall affect the current shell execution environment and the execution environments of the subshells
       of the current shell. When used as specified by this volume of POSIX.1‐2008, the alias definition shall  not  affect  the
       parent  process  of the current shell nor any utility environment invoked by the shell; see Section 2.12, Shell Execution
       Environment.

OPTIONS
       None.

OPERANDS
       The following operands shall be supported:

       alias-name
                 Write the alias definition to standard output.

       alias-name=string
                 Assign the value of string to the alias alias-name.

       If no operands are given, all alias definitions shall be written to standard output.

STDIN
       Not used.

INPUT FILES
       None.

<!-- 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 <=< ACCEPT -->ENVIRONMENT VARIABLES
       The following environment variables shall affect the execution of alias:

       LANG      Provide a default value for the internationalization variables that are unset or null. (See  the  Base  Defini‐
                 tions  volume of POSIX.1‐2008, Section 8.2, Internationalization Variables for the precedence of international‐
                 ization variables used to determine the values of locale categories.)

       LC_ALL    If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_CTYPE  Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, sin‐
                 gle-byte as opposed to multi-byte characters in arguments).

       LC_MESSAGES
                 Determine  the  locale  that should be used to affect the format and contents of diagnostic messages written to
                 standard error.

       NLSPATH   Determine the location of message catalogs for the processing of LC_MESSAGES.<!-- ACCEPT >=> 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 -->

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       The format for displaying aliases (when no operands or only name operands are specified) shall be:

           "%s=%s\n", name, value

       The value string shall be written with appropriate quoting so that it is suitable for  reinput  to  the  shell.  See  the
       description of shell quoting in Section 2.2, Quoting.

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       None.

<!-- a42f9355-e63b-4205-ac0b-0b19b24faf9d <=< ACCEPT -->EXIT STATUS
       The following exit values shall be returned:

        0    Successful completion.

       &amp;gt;0    One of the name operands specified did not have an alias definition, or an error occurred.<!-- ACCEPT >=> a42f9355-e63b-4205-ac0b-0b19b24faf9d -->

CONSEQUENCES OF ERRORS
       Default.

       The following sections are informative.

APPLICATION USAGE
       None.

EXAMPLES
        1. Create a short alias for a commonly used ls command:

               alias lf="ls −CF"

        2. Create a simple ``redo'' command to repeat previous entries in the command history file:

               alias r='fc −s'

        3. Use 1K units for du:

               alias du=du\ −k

        4. Set up nohup so that it can deal with an argument that is itself an alias name:

               alias nohup="nohup "

RATIONALE
       The  alias  description  is based on historical KornShell implementations. Known differences exist between that and the C
       shell. The KornShell version was adopted to be consistent with all  the  other  KornShell  features  in  this  volume  of
       POSIX.1‐2008, such as command line editing.

       Since alias affects the current shell execution environment, it is generally provided as a shell regular built-in.

       Historical  versions  of the KornShell have allowed aliases to be exported to scripts that are invoked by the same shell.
       This is triggered by the alias −x flag; it is allowed by this volume of POSIX.1‐2008 only when an explicit extension such
       as  −x  is used. The standard developers considered that aliases were of use primarily to interactive users and that they
       should normally not affect shell scripts called by those users; functions are available to such scripts.

       Historical versions of the KornShell had not written aliases in a quoted manner suitable for reentry to  the  shell,  but
       this  volume  of  POSIX.1‐2008 has made this a requirement for all similar output. Therefore, consistency was chosen over
       this detail of historical practice.

FUTURE DIRECTIONS
       None.

SEE ALSO
       Section 2.9.5, Function Definition Command

       The Base Definitions volume of POSIX.1‐2008, Chapter 8, Environment Variables

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013  Edition,  Standard  for
       Information  Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7, Copy‐
       right (C) 2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This  is  POSIX.1-2008
       with  the  2013  Technical  Corrigendum 1 applied.) In the event of any discrepancy between this version and the original
       IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the  referee  document.  The  original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any  typographical  or formatting errors that appear in this page are most likely to have been introduced during the con‐
       version of the source files to man page format. To report such errors,  see  https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                     ALIAS(1P)
AR(1)                                                 GNU Development Tools                                                AR(1)

NAME
       ar - create, modify, and extract from archives

SYNOPSIS
       ar [-X32_64] [-]p[mod] [--plugin name] [--target bfdname] [relpos] [count] archive [member...]

DESCRIPTION
       The GNU ar program creates, modifies, and extracts from archives.  An archive is a single file holding a collection of
       other files in a structure that makes it possible to retrieve the original individual files (called members of the
       archive).

       The original files' contents, mode (permissions), timestamp, owner, and group are preserved in the archive, and can be
       restored on extraction.

       GNU ar can maintain archives whose members have names of any length; however, depending on how ar is configured on your
       system, a limit on member-name length may be imposed for compatibility with archive formats maintained with other tools.
       If it exists, the limit is often 15 characters (typical of formats related to a.out) or 16 characters (typical of formats
       related to coff).

       ar is considered a binary utility because archives of this sort are most often used as libraries holding commonly needed
       subroutines.

       ar creates an index to the symbols defined in relocatable object modules in the archive when you specify the modifier s.
       Once created, this index is updated in the archive whenever ar makes a change to its contents (save for the q update
       operation).  An archive with such an index speeds up linking to the library, and allows routines in the library to call
       each other without regard to their placement in the archive.

       You may use nm -s or nm --print-armap to list this index table.  If an archive lacks the table, another form of ar called
       ranlib can be used to add just the table.

       GNU ar can optionally create a thin archive, which contains a symbol index and references to the original copies of the
       member files of the archive.  This is useful for building libraries for use within a local build tree, where the
       relocatable objects are expected to remain available, and copying the contents of each object would only waste time and
       space.

       An archive can either be thin or it can be normal.  It cannot be both at the same time.  Once an archive is created its
       format cannot be changed without first deleting it and then creating a new archive in its place.

       Thin archives are also flattened, so that adding one thin archive to another thin archive does not nest it, as would
       happen with a normal archive.  Instead the elements of the first archive are added individually to the second archive.

       The paths to the elements of the archive are stored relative to the archive itself.

       GNU ar is designed to be compatible with two different facilities.  You can control its activity using command-line
       options, like the different varieties of ar on Unix systems; or, if you specify the single command-line option -M, you
       can control it with a script supplied via standard input, like the MRI "librarian" program.

OPTIONS
       GNU ar allows you to mix the operation code p and modifier flags mod in any order, within the first command-line
       argument.

       If you wish, you may begin the first command-line argument with a dash.

       The p keyletter specifies what operation to execute; it may be any of the following, but you must specify only one of
       them:

       d   Delete modules from the archive.  Specify the names of modules to be deleted as member...; the archive is untouched
           if you specify no files to delete.

           If you specify the v modifier, ar lists each module as it is deleted.

       m   Use this operation to move members in an archive.

           The ordering of members in an archive can make a difference in how programs are linked using the library, if a symbol
           is defined in more than one member.

           If no modifiers are used with "m", any members you name in the member arguments are moved to the end of the archive;
           you can use the a, b, or i modifiers to move them to a specified place instead.

       p   Print the specified members of the archive, to the standard output file.  If the v modifier is specified, show the
           member name before copying its contents to standard output.

           If you specify no member arguments, all the files in the archive are printed.

       q   Quick append; Historically, add the files member... to the end of archive, without checking for replacement.

           The modifiers a, b, and i do not affect this operation; new members are always placed at the end of the archive.

           The modifier v makes ar list each file as it is appended.

           Since the point of this operation is speed, implementations of ar have the option of not updating the archive's
           symbol table if one exists.  Too many different systems however assume that symbol tables are always up-to-date, so
           GNU ar will rebuild the table even with a quick append.

           Note - GNU ar treats the command qs as a synonym for r - replacing already existing files in the archive and
           appending new ones at the end.

       r   Insert the files member... into archive (with replacement). This operation differs from q in that any previously
           existing members are deleted if their names match those being added.

           If one of the files named in member... does not exist, ar displays an error message, and leaves undisturbed any
           existing members of the archive matching that name.

           By default, new members are added at the end of the file; but you may use one of the modifiers a, b, or i to request
           placement relative to some existing member.

           The modifier v used with this operation elicits a line of output for each file inserted, along with one of the
           letters a or r to indicate whether the file was appended (no old member deleted) or replaced.

       s   Add an index to the archive, or update it if it already exists.  Note this command is an exception to the rule that
           there can only be one command letter, as it is possible to use it as either a command or a modifier.  In either case
           it does the same thing.

       t   Display a table listing the contents of archive, or those of the files listed in member... that are present in the
           archive.  Normally only the member name is shown; if you also want to see the modes (permissions), timestamp, owner,
           group, and size, you can request that by also specifying the v modifier.

           If you do not specify a member, all files in the archive are listed.

           If there is more than one file with the same name (say, fie) in an archive (say b.a), ar t b.a fie lists only the
           first instance; to see them all, you must ask for a complete listing---in our example, ar t b.a.

       x   Extract members (named member) from the archive.  You can use the v modifier with this operation, to request that ar
           list each name as it extracts it.

           If you do not specify a member, all files in the archive are extracted.

           Files cannot be extracted from a thin archive.

       --help
           Displays the list of command line options supported by ar and then exits.

       --version
           Displays the version information of ar and then exits.

       A number of modifiers (mod) may immediately follow the p keyletter, to specify variations on an operation's behavior:

       a   Add new files after an existing member of the archive.  If you use the modifier a, the name of an existing archive
           member must be present as the relpos argument, before the archive specification.

       b   Add new files before an existing member of the archive.  If you use the modifier b, the name of an existing archive
           member must be present as the relpos argument, before the archive specification.  (same as i).

       c   Create the archive.  The specified archive is always created if it did not exist, when you request an update.  But a
           warning is issued unless you specify in advance that you expect to create it, by using this modifier.

       D   Operate in deterministic mode.  When adding files and the archive index use zero for UIDs, GIDs, timestamps, and use
           consistent file modes for all files.  When this option is used, if ar is used with identical options and identical
           input files, multiple runs will create identical output files regardless of the input files' owners, groups, file
           modes, or modification times.

           If binutils was configured with --enable-deterministic-archives, then this mode is on by default.  It can be disabled
           with the U modifier, below.

       f   Truncate names in the archive.  GNU ar will normally permit file names of any length.  This will cause it to create
           archives which are not compatible with the native ar program on some systems.  If this is a concern, the f modifier
           may be used to truncate file names when putting them in the archive.

       i   Insert new files before an existing member of the archive.  If you use the modifier i, the name of an existing
           archive member must be present as the relpos argument, before the archive specification.  (same as b).

       l   This modifier is accepted but not used.

       N   Uses the count parameter.  This is used if there are multiple entries in the archive with the same name.  Extract or
           delete instance count of the given name from the archive.

       o   Preserve the original dates of members when extracting them.  If you do not specify this modifier, files extracted
           from the archive are stamped with the time of extraction.

       P   Use the full path name when matching names in the archive.  GNU ar can not create an archive with a full path name
           (such archives are not POSIX complaint), but other archive creators can.  This option will cause GNU ar to match file
           names using a complete path name, which can be convenient when extracting a single file from an archive created by
           another tool.

       s   Write an object-file index into the archive, or update an existing one, even if no other change is made to the
           archive.  You may use this modifier flag either with any operation, or alone.  Running ar s on an archive is
           equivalent to running ranlib on it.

       S   Do not generate an archive symbol table.  This can speed up building a large library in several steps.  The resulting
           archive can not be used with the linker.  In order to build a symbol table, you must omit the S modifier on the last
           execution of ar, or you must run ranlib on the archive.

       T   Make the specified archive a thin archive.  If it already exists and is a regular archive, the existing members must
           be present in the same directory as archive.

       u   Normally, ar r... inserts all files listed into the archive.  If you would like to insert only those of the files you
           list that are newer than existing members of the same names, use this modifier.  The u modifier is allowed only for
           the operation r (replace).  In particular, the combination qu is not allowed, since checking the timestamps would
           lose any speed advantage from the operation q.

       U   Do not operate in deterministic mode.  This is the inverse of the D modifier, above: added files and the archive
           index will get their actual UID, GID, timestamp, and file mode values.

           This is the default unless binutils was configured with --enable-deterministic-archives.

       v   This modifier requests the verbose version of an operation.  Many operations display additional information, such as
           filenames processed, when the modifier v is appended.

       V   This modifier shows the version number of ar.

       ar ignores an initial option spelt -X32_64, for compatibility with AIX.  The behaviour produced by this option is the
       default for GNU ar.  ar does not support any of the other -X options; in particular, it does not support -X32 which is
       the default for AIX ar.

       The optional command line switch --plugin name causes ar to load the plugin called name which adds support for more file
       formats.  This option is only available if the toolchain has been built with plugin support enabled.

       The optional command line switch --target bfdname specifies that the archive members are in an object code format
       different from your system's default format.  See

       @file
           Read command-line options from file.  The options read are inserted in place of the original @file option.  If file
           does not exist, or cannot be read, then the option will be treated literally, and not removed.

           Options in file are separated by whitespace.  A whitespace character may be included in an option by surrounding the
           entire option in either single or double quotes.  Any character (including a backslash) may be included by prefixing
           the character to be included with a backslash.  The file may itself contain additional @file options; any such
           options will be processed recursively.

SEE ALSO
       nm(1), ranlib(1), and the Info entries for binutils.

COPYRIGHT
       Copyright (c) 1991-2016 Free Software Foundation, Inc.

       Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation
       License, Version 1.3 or any later version published by the Free Software Foundation; with no Invariant Sections, with no
       Front-Cover Texts, and with no Back-Cover Texts.  A copy of the license is included in the section entitled "GNU Free
       Documentation License".

binutils-2.27                                              2016-08-06                                                      AR(1)
ASA(1P)                                             POSIX Programmer's Manual                                            ASA(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->

NAME
       asa — interpret carriage-control characters

SYNOPSIS
       asa [file...]

DESCRIPTION
       The  asa  utility shall write its input files to standard output, mapping carriage-control characters from the text files
       to line-printer control sequences in an implementation-defined manner.

       The first character of every line shall be removed from the input, and the following actions are performed.

       If the character removed is:

       &amp;lt;space&amp;gt;   The rest of the line is output without change.

       0         A &amp;lt;newline&amp;gt; is output, then the rest of the input line.

       1         One or more implementation-defined characters that causes an advance to the next page shall be output, followed
                 by the rest of the input line.

       +         The  &amp;lt;newline&amp;gt;  of  the previous line shall be replaced with one or more implementation-defined characters that
                 causes printing to return to column position 1, followed by the rest of the input line. If the '+' is the first
                 character in the input, it shall be equivalent to &amp;lt;space&amp;gt;.

       The  action  of the asa utility is unspecified upon encountering any character other than those listed above as the first
       character in a line.

OPTIONS
       None.

OPERANDS
       file      A pathname of a text file used for input. If no file operands are specified, the standard input shall be used.

STDIN
       The standard input shall be used if no file operands are specified, and shall be used if a file operand is  '−'  and  the
       implementation treats the '−' as meaning standard input.  Otherwise, the standard input shall not be used.  See the INPUT
       FILES section.

INPUT FILES
       The input files shall be text files.

<!-- 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 <=< ACCEPT -->ENVIRONMENT VARIABLES
       The following environment variables shall affect the execution of asa:

       LANG      Provide a default value for the internationalization variables that are unset or null. (See  the  Base  Defini‐
                 tions  volume of POSIX.1‐2008, Section 8.2, Internationalization Variables for the precedence of international‐
                 ization variables used to determine the values of locale categories.)

       LC_ALL    If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_CTYPE  Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, sin‐
                 gle-byte as opposed to multi-byte characters in arguments and input files).

       LC_MESSAGES
                 Determine  the  locale  that should be used to affect the format and contents of diagnostic messages written to
                 standard error.

       NLSPATH   Determine the location of message catalogs for the processing of LC_MESSAGES.
<!-- ACCEPT >=> 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 -->
ASYNCHRONOUS EVENTS
       Default.

STDOUT
       The standard output shall be the text from the input file modified as described in the DESCRIPTION section.

STDERR
       None.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       None.

<!-- a42f9355-e63b-4205-ac0b-0b19b24faf9d <=< ACCEPT -->EXIT STATUS
       The following exit values shall be returned:

        0    All input files were output successfully.

       &amp;gt;0    An error occurred.<!-- ACCEPT >=> a42f9355-e63b-4205-ac0b-0b19b24faf9d -->

CONSEQUENCES OF ERRORS
       Default.

       The following sections are informative.

APPLICATION USAGE
       None.

EXAMPLES
        1. The following command:

               asa file

           permits the viewing of file (created by a program using FORTRAN-style carriage-control characters) on a terminal.

        2. The following command:

               a.out | asa | lp

           formats the FORTRAN output of a.out and directs it to the printer.

RATIONALE
       The asa utility is needed to map ``standard'' FORTRAN 77 output into a form acceptable to contemporary printers. Usually,
       asa is used to pipe data to the lp utility; see lp.

       This  utility is generally used only by FORTRAN programs. The standard developers decided to retain asa to avoid breaking
       the historical large base of FORTRAN applications that put carriage-control characters in their output files. There is no
       requirement that a system have a FORTRAN compiler in order to run applications that need asa.

       Historical  implementations  have used an ASCII &amp;lt;form-feed&amp;gt; in response to a 1 and an ASCII &amp;lt;carriage-return&amp;gt; in response
       to a '+'.  It is suggested that implementations treat characters other than 0, 1, and '+' as &amp;lt;space&amp;gt; in  the  absence  of
       any  compelling  reason to do otherwise. However, the action is listed here as ``unspecified'', permitting an implementa‐
       tion to provide extensions to access fast multiple-line slewing and channel seeking in a non-portable manner.

FUTURE DIRECTIONS
       None.

SEE ALSO
       fort77, lp

       The Base Definitions volume of POSIX.1‐2008, Chapter 8, Environment Variables

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013  Edition,  Standard  for
       Information  Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7, Copy‐
       right (C) 2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This  is  POSIX.1-2008
       with  the  2013  Technical  Corrigendum 1 applied.) In the event of any discrepancy between this version and the original
       IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the  referee  document.  The  original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any  typographical  or formatting errors that appear in this page are most likely to have been introduced during the con‐
       version of the source files to man page format. To report such errors,  see  https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                       ASA(1P)
AT(1P)                                              POSIX Programmer's Manual                                             AT(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->

NAME
       at — execute commands at a later time

SYNOPSIS
       at [−m] [−f file] [−q queuename] −t time_arg

       at [−m] [−f file] [−q queuename] timespec...

       at −r at_job_id...

       at −l −q queuename

       at −l [at_job_id...]

DESCRIPTION
       The  at  utility  shall read commands from standard input and group them together as an at-job, to be executed at a later
       time.

       The at-job shall be executed in a separate invocation of the shell, running in a separate process group with no  control‐
       ling  terminal, except that the environment variables, current working directory, file creation mask, and other implemen‐
       tation-defined execution-time attributes in effect when the at utility is executed shall be retained and  used  when  the
       at-job is executed.

       When  the  at-job  is submitted, the at_job_id and scheduled time shall be written to standard error. The at_job_id is an
       identifier that shall be a string consisting solely of alphanumeric characters and the &amp;lt;period&amp;gt; character. The  at_job_id
       shall be assigned by the system when the job is scheduled such that it uniquely identifies a particular job.

       User notification and the processing of the job's standard output and standard error are described under the −m option.

       Users  shall  be  permitted  to  use at if their name appears in the file at.allow which is located in an implementation-
       defined directory.  If that file does not exist, the file at.deny, which is located in an  implementation-defined  direc‐
       tory,  shall  be  checked  to  determine  whether  the user shall be denied access to at.  If neither file exists, only a
       process with appropriate privileges shall be allowed to submit a job. If only at.deny exists and is empty,  global  usage
       shall be permitted. The at.allow and at.deny files shall consist of one user name per line.

OPTIONS
       The at utility shall conform to the Base Definitions volume of POSIX.1‐2008, Section 12.2, Utility Syntax Guidelines.

       The following options shall be supported:

       −f file   Specify the pathname of a file to be used as the source of the at-job, instead of standard input.

       −l        (The  letter  ell.)  Report all jobs scheduled for the invoking user if no at_job_id operands are specified. If
                 at_job_ids are specified, report only information for these jobs. The output shall be written to standard  out‐
                 put.

       −m        Send  mail  to the invoking user after the at-job has run, announcing its completion. Standard output and stan‐
                 dard error produced by the at-job shall be mailed to the user as well, unless redirected elsewhere. Mail  shall
                 be sent even if the job produces no output.

                 If −m is not used, the job's standard output and standard error shall be provided to the user by means of mail,
                 unless they are redirected elsewhere; if there is no such output to provide, the implementation need not notify
                 the user of the job's completion.

       −q queuename
                 Specify in which queue to schedule a job for submission. When used with the −l option, limit the search to that
                 particular queue. By default, at-jobs shall be scheduled in queue a.  In contrast, queue b  shall  be  reserved
                 for batch jobs; see batch.  The meanings of all other queuenames are implementation-defined. If −q is specified
                 along with either of the −t time_arg or timespec arguments, the results are unspecified.

       −r        Remove the jobs with the specified at_job_id operands that were previously scheduled by the at utility.

       −t time_arg
                 Submit the job to be run at the time specified by the time option-argument, which the application shall  ensure
                 has the format as specified by the touch −t time utility.

OPERANDS
       The following operands shall be supported:

       at_job_id The name reported by a previous invocation of the at utility at the time the job was scheduled.

       timespec  Submit  the  job  to  be run at the date and time specified. All of the timespec operands are interpreted as if
                 they were separated by &amp;lt;space&amp;gt; characters and concatenated, and shall be parsed as described in the grammar  at
                 the end of this section. The date and time shall be interpreted as being in the timezone of the user (as deter‐
                 mined by the TZ variable), unless a timezone name appears as part of time, below.

                 In the POSIX locale, the following describes the three parts of the time specification string. All of the  val‐
                 ues from the LC_TIME categories in the POSIX locale shall be recognized in a case-insensitive manner.

                 time      The time can be specified as one, two, or four digits. One-digit and two-digit numbers shall be taken
                           to be hours; four-digit numbers to be hours and minutes. The time can alternatively be  specified  as
                           two  numbers separated by a &amp;lt;colon&amp;gt;, meaning hour:minute. An AM/PM indication (one of the values from
                           the am_pm keywords in the LC_TIME locale category) can follow the time; otherwise,  a  24-hour  clock
                           time shall be understood. A timezone name can also follow to further qualify the time. The acceptable
                           timezone names are implementation-defined, except that they shall be case-insensitive and the  string
                           utc  is  supported  to  indicate the time is in Coordinated Universal Time.  In the POSIX locale, the
                           time field can also be one of the following tokens:

                           midnight  Indicates the time 12:00 am (00:00).

                           noon      Indicates the time 12:00 pm.

                           now       Indicates the current day and time. Invoking at &amp;lt;now&amp;gt; shall submit  an  at-job  for  poten‐
                                     tially immediate execution (that is, subject only to unspecified scheduling delays).

                 date      An  optional  date  can  be specified as either a month name (one of the values from the mon or abmon
                           keywords in the LC_TIME locale category) followed by a day number (and possibly year number  preceded
                           by  a  comma),  or a day of the week (one of the values from the day or abday keywords in the LC_TIME
                           locale category). In the POSIX locale, two special days shall be recognized:

                           today     Indicates the current day.

                           tomorrow  Indicates the day following the current day.

                           If no date is given, today shall be assumed if the given time is greater than the current  time,  and
                           tomorrow  shall  be  assumed if it is less. If the given month is less than the current month (and no
                           year is given), next year shall be assumed.

                 increment The optional increment shall be a number preceded by a &amp;lt;plus-sign&amp;gt; ('+') and suffixed by one  of  the
                           following:  minutes,  hours,  days,  weeks,  months,  or  years.   (The  singular forms shall also be
                           accepted.) The keyword next shall be equivalent to an increment number of +1. For example,  the  fol‐
                           lowing are equivalent commands:

                               at 2pm + 1 week
                               at 2pm next week

       The  following  grammar  describes  the  precise format of timespec in the POSIX locale. The general conventions for this
       style of grammar are described in Section 1.3, Grammar Conventions.  This formal syntax shall take  precedence  over  the
       preceding  text  syntax  description.  The longest possible token or delimiter shall be recognized at a given point. When
       used in a timespec, white space shall also delimit tokens.

           %token hr24clock_hr_min
           %token hr24clock_hour
           /*
             An hr24clock_hr_min is a one, two, or four-digit number. A one-digit
             or two-digit number constitutes an hr24clock_hour. An hr24clock_hour
             may be any of the single digits [0,9], or may be double digits, ranging
             from [00,23]. If an hr24clock_hr_min is a four-digit number, the
             first two digits shall be a valid hr24clock_hour, while the last two
             represent the number of minutes, from [00,59].
           */

           %token wallclock_hr_min
           %token wallclock_hour
           /*
             A wallclock_hr_min is a one, two-digit, or four-digit number.
             A one-digit or two-digit number constitutes a wallclock_hour.
             A wallclock_hour may be any of the single digits [1,9], or may
             be double digits, ranging from [01,12]. If a wallclock_hr_min
             is a four-digit number, the first two digits shall be a valid
             wallclock_hour, while the last two represent the number of
             minutes, from [00,59].
           */

           %token minute
           /*
             A minute is a one or two-digit number whose value can be [0,9]
             or [00,59].
           */

           %token day_number
           /*
             A day_number is a number in the range appropriate for the particular
             month and year specified by month_name and year_number, respectively.
             If no year_number is given, the current year is assumed if the given
             date and time are later this year. If no year_number is given and
             the date and time have already occurred this year and the month is
             not the current month, next year is the assumed year.
           */

           %token year_number
           /*
             A year_number is a four-digit number representing the year A.D., in
             which the at_job is to be run.
           */

           %token inc_number
           /*
             The inc_number is the number of times the succeeding increment
             period is to be added to the specified date and time.
           */

           %token timezone_name
           /*
             The name of an optional timezone suffix to the time field, in an
             implementation-defined format.
           */

           %token month_name
           /*
             One of the values from the mon or abmon keywords in the LC_TIME
             locale category.
           */

           %token day_of_week
           /*
             One of the values from the day or abday keywords in the LC_TIME
             locale category.
           */

           %token am_pm
           /*
             One of the values from the am_pm keyword in the LC_TIME locale
             category.
           */

           %start timespec
           %%
           timespec    : time
                       | time date
                       | time increment
                       | time date increment
                       | nowspec
                       ;

           nowspec     : "now"
                       | "now" increment
                       ;

           time        : hr24clock_hr_min
                       | hr24clock_hr_min timezone_name
                       | hr24clock_hour ":" minute
                       | hr24clock_hour ":" minute timezone_name
                       | wallclock_hr_min am_pm
                       | wallclock_hr_min am_pm timezone_name
                       | wallclock_hour ":" minute am_pm
                       | wallclock_hour ":" minute am_pm timezone_name
                       | "noon"
                       | "midnight"
                       ;

           date        : month_name day_number
                       | month_name day_number "," year_number
                       | day_of_week
                       | "today"
                       | "tomorrow"
                       ;

           increment   : "+" inc_number inc_period
                       | "next" inc_period
                       ;

           inc_period  : "minute" | "minutes"
                       | "hour" | "hours"
                       | "day" | "days"
                       | "week" | "weeks"
                       | "month" | "months"
                       | "year" | "years"
                       ;

STDIN
       The standard input shall be a text file consisting of commands acceptable to the  shell  command  language  described  in
       Chapter 2, Shell Command Language.  The standard input shall only be used if no −f file option is specified.

INPUT FILES
       See the STDIN section.

       The text files at.allow and at.deny, which are located in an implementation-defined directory, shall contain zero or more
       user names, one per line, of users who are, respectively, authorized or denied access to the at and batch utilities.

<!-- 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 <=< ACCEPT -->ENVIRONMENT VARIABLES
       The following environment variables shall affect the execution of at:

       LANG      Provide a default value for the internationalization variables that are unset or null. (See  the  Base  Defini‐
                 tions  volume of POSIX.1‐2008, Section 8.2, Internationalization Variables for the precedence of international‐
                 ization variables used to determine the values of locale categories.)

       LC_ALL    If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_CTYPE  Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, sin‐
                 gle-byte as opposed to multi-byte characters in arguments and input files).

       LC_MESSAGES
                 Determine  the  locale  that should be used to affect the format and contents of diagnostic messages written to
                 standard error and informative messages written to standard output.

       NLSPATH   Determine the location of message catalogs for the processing of LC_MESSAGES.<!-- ACCEPT >=> 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 -->

       LC_TIME   Determine the format and contents for date and time strings written and accepted by at.

       SHELL     Determine a name of a command interpreter to be used to invoke the at-job. If the variable is unset or null, sh
                 shall be used. If it is set to a value other than a name for sh, the implementation shall do one of the follow‐
                 ing: use that shell; use sh; use the login shell from the user database; or any of the preceding accompanied by
                 a warning diagnostic about which was chosen.

       TZ        Determine  the  timezone. The job shall be submitted for execution at the time specified by timespec or −t time
                 relative to the timezone specified by the TZ variable. If timespec specifies a timezone, it shall override  TZ.
                 If timespec does not specify a timezone and TZ is unset or null, an unspecified default timezone shall be used.

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       When  standard  input is a terminal, prompts of unspecified format for each line of the user input described in the STDIN
       section may be written to standard output.

       In the POSIX locale, the following shall be written to the standard output for each job when jobs are listed in  response
       to the −l option:

           "%s\t%s\n", at_job_id, &amp;lt;date&amp;gt;

       where date shall be equivalent in format to the output of:

           date +"%a %b %e %T %Y"

       The  date  and  time  written  shall be adjusted so that they appear in the timezone of the user (as determined by the TZ
       variable).

STDERR
       In the POSIX locale, the following shall be written to standard error when a job has been successfully submitted:

           "job %s at %s\n", at_job_id, &amp;lt;date&amp;gt;

       where date has the same format as that described in the STDOUT section. Neither this, nor warning messages concerning the
       selection of the command interpreter, shall be considered a diagnostic that changes the exit status.

       Diagnostic messages, if any, shall be written to standard error.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       None.

<!-- a42f9355-e63b-4205-ac0b-0b19b24faf9d <=< ACCEPT -->EXIT STATUS
       The following exit values shall be returned:

        0    The at utility successfully submitted, removed, or listed a job or jobs.

       &amp;gt;0    An error occurred.
<!-- ACCEPT >=> a42f9355-e63b-4205-ac0b-0b19b24faf9d -->
CONSEQUENCES OF ERRORS
       The job shall not be scheduled, removed, or listed.

       The following sections are informative.

APPLICATION USAGE
       The  format  of  the  at command line shown here is guaranteed only for the POSIX locale. Other cultures may be supported
       with substantially different interfaces, although implementations are encouraged to provide comparable  levels  of  func‐
       tionality.

       Since  the commands run in a separate shell invocation, running in a separate process group with no controlling terminal,
       open file descriptors, traps, and priority inherited from the invoking environment are lost.

       Some implementations do not allow substitution of different shells using SHELL.  System V systems, for example, have used
       the login shell value for the user in /etc/passwd.  To select reliably another command interpreter, the user must include
       it as part of the script, such as:

           $ at 1800
           myshell myscript
           EOT
           job ... at ...
           $

EXAMPLES
        1. This sequence can be used at a terminal:

               at −m 0730 tomorrow
               sort &amp;lt; file &amp;gt;outfile
               EOT

        2. This sequence, which demonstrates redirecting standard error to a  pipe,  is  useful  in  a  command  procedure  (the
           sequence of output redirection specifications is significant):

               at now + 1 hour &amp;lt;&amp;lt;!
               diff file1 file2 2&amp;gt;&amp;1 &amp;gt;outfile | mailx mygroup
               !

        3. To  have a job reschedule itself, at can be invoked from within the at-job. For example, this daily processing script
           named my.daily runs every day (although crontab is a more appropriate vehicle for such work):

               # my.daily runs every day
               daily processing
               at now tomorrow &amp;lt; my.daily

        4. The spacing of the three portions of the POSIX locale timespec is quite flexible as long as there are no ambiguities.
           Examples of various times and operand presentation include:

               at 0815am Jan 24
               at 8 :15amjan24
               at now "+ 1day"
               at 5 pm FRIday
               at '17
                   utc+
                   30minutes'

RATIONALE
       The  at utility reads from standard input the commands to be executed at a later time. It may be useful to redirect stan‐
       dard output and standard error within the specified commands.

       The −t time option was added as a new capability to support an internationalized way of specifying a time  for  execution
       of the submitted job.

       Early  proposals added a ``jobname'' concept as a way of giving submitted jobs names that are meaningful to the user sub‐
       mitting them.  The historical, system-specified at_job_id gives no indication of what the job is.  Upon  further  reflec‐
       tion,  it  was decided that the benefit of this was not worth the change in historical interface. The at functionality is
       useful in simple environments, but in large or complex situations, the  functionality  provided  by  the  Batch  Services
       option is more suitable.

       The −q option historically has been an undocumented option, used mainly by the batch utility.

       The  System  V −m option was added to provide a method for informing users that an at-job had completed. Otherwise, users
       are only informed when output to standard error or standard output are not redirected.

       The behavior of at &amp;lt;now&amp;gt; was changed in an early proposal from being unspecified to  submitting  a  job  for  potentially
       immediate execution. Historical BSD at implementations support this. Historical System V implementations give an error in
       that case, but a change to the System V versions should have no backwards-compatibility ramifications.

       On BSD-based systems, a −u user option has allowed those with appropriate privileges to access the work of  other  users.
       Since  this  is  primarily a system administration feature and is not universally implemented, it has been omitted. Simi‐
       larly, a specification for the output format for a user with appropriate privileges viewing the queues of other users has
       been omitted.

       The  −f  file  option  from System V is used instead of the BSD method of using the last operand as the pathname. The BSD
       method is ambiguous—does:

           at 1200 friday

       mean the same thing if there is a file named friday in the current directory?

       The at_job_id is composed of a limited character set in historical practice, and it is mandated here to  invalidate  sys‐
       tems that might try using characters that require shell quoting or that could not be easily parsed by shell scripts.

       The  at  utility varies between System V and BSD systems in the way timezones are used. On System V systems, the TZ vari‐
       able affects the at-job submission times and the times displayed for the user. On BSD  systems,  TZ  is  not  taken  into
       account.  The  BSD  behavior  is  easily achieved with the current specification. If the user wishes to have the timezone
       default to that of the system, they merely need to issue the at  command  immediately  following  an  unsetting  or  null
       assignment to TZ.  For example:

           TZ= at noon ...

       gives the desired BSD result.

       While the yacc-like grammar specified in the OPERANDS section is lexically unambiguous with respect to the digit strings,
       a lexical analyzer would probably be written to look for and return digit strings in those cases. The parser  could  then
       check whether the digit string returned is a valid day_number, year_number, and so on, based on the context.

FUTURE DIRECTIONS
       None.

SEE ALSO
       batch, crontab

       The Base Definitions volume of POSIX.1‐2008, Chapter 8, Environment Variables, Section 12.2, Utility Syntax Guidelines

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions  of  this  text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013 Edition, Standard for
       Information Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7,  Copy‐
       right  (C)  2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This is POSIX.1-2008
       with the 2013 Technical Corrigendum 1 applied.) In the event of any discrepancy between this  version  and  the  original
       IEEE  and  The  Open  Group Standard, the original IEEE and The Open Group Standard is the referee document. The original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any typographical or formatting errors that appear in this page are most likely to have been introduced during  the  con‐
       version  of  the source files to man page format. To report such errors, see https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                        AT(1P)
AWK(1P)                                             POSIX Programmer's Manual                                            AWK(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->

NAME
       awk — pattern scanning and processing language

SYNOPSIS
       awk [−F sepstring] [−v assignment]... program [argument...]

       awk [−F sepstring] −f progfile [−f progfile]... [−v assignment]...
            [argument...]

DESCRIPTION
       The  awk  utility  shall  execute programs written in the awk programming language, which is specialized for textual data
       manipulation. An awk program is a sequence of patterns and corresponding actions. When input is read that matches a  pat‐
       tern, the action associated with that pattern is carried out.

       Input  shall be interpreted as a sequence of records. By default, a record is a line, less its terminating &amp;lt;newline&amp;gt;, but
       this can be changed by using the RS built-in variable. Each record of input shall be matched in turn against each pattern
       in the program. For each pattern matched, the associated action shall be executed.

       The  awk  utility  shall  interpret  each  input record as a sequence of fields where, by default, a field is a string of
       non-&amp;lt;blank&amp;gt; non-&amp;lt;newline&amp;gt; characters. This default &amp;lt;blank&amp;gt; and &amp;lt;newline&amp;gt; field delimiter can be changed by using  the  FS
       built-in variable or the −F sepstring option. The awk utility shall denote the first field in a record $1, the second $2,
       and so on. The symbol $0 shall refer to the entire record; setting any  other  field  causes  the  re-evaluation  of  $0.
       Assigning to $0 shall reset the values of all other fields and the NF built-in variable.

OPTIONS
       The awk utility shall conform to the Base Definitions volume of POSIX.1‐2008, Section 12.2, Utility Syntax Guidelines.

       The following options shall be supported:

       −F sepstring
                 Define the input field separator. This option shall be equivalent to:

                     -v FS=sepstring

                 except  that  if  −F  sepstring  and −v FS=sepstring are both used, it is unspecified whether the FS assignment
                 resulting from −F sepstring is processed in command line order or is processed after the last −v  FS=sepstring.
                 See the description of the FS built-in variable, and how it is used, in the EXTENDED DESCRIPTION section.

       −f progfile
                 Specify  the  pathname of the file progfile containing an awk program. A pathname of '−' shall denote the stan‐
                 dard input. If multiple instances of this option are specified, the concatenation of  the  files  specified  as
                 progfile in the order specified shall be the awk program. The awk program can alternatively be specified in the
                 command line as a single argument.

       −v assignment
                 The application shall ensure that the assignment argument is in the same form as  an  assignment  operand.  The
                 specified  variable assignment shall occur prior to executing the awk program, including the actions associated
                 with BEGIN patterns (if any). Multiple occurrences of this option can be specified.

OPERANDS
       The following operands shall be supported:

       program   If no −f option is specified, the first operand to awk shall be the text of the awk  program.  The  application
                 shall  supply  the  program  operand as a single argument to awk.  If the text does not end in a &amp;lt;newline&amp;gt;, awk
                 shall interpret the text as if it did.

       argument  Either of the following two types of argument can be intermixed:

                 file      A pathname of a file that contains the input to be read, which is matched against the set of patterns
                           in  the  program.  If no file operands are specified, or if a file operand is '−', the standard input
                           shall be used.

                 assignment
                           An operand that begins with an &amp;lt;underscore&amp;gt; or alphabetic character from the portable  character  set
                           (see  the table in the Base Definitions volume of POSIX.1‐2008, Section 6.1, Portable Character Set),
                           followed by a sequence of underscores, digits, and alphabetics from the portable character set,  fol‐
                           lowed  by the '=' character, shall specify a variable assignment rather than a pathname.  The charac‐
                           ters before the '=' represent the name of an awk variable; if that name is an awk reserved word  (see
                           Grammar)  the  behavior is undefined. The characters following the &amp;lt;equals-sign&amp;gt; shall be interpreted
                           as if they appeared in the awk program preceded and followed by a double-quote ('"') character, as  a
                           STRING  token  (see Grammar), except that if the last character is an unescaped &amp;lt;backslash&amp;gt;, it shall
                           be interpreted as a literal &amp;lt;backslash&amp;gt; rather than as the first character of the sequence "\"".  The
                           variable  shall be assigned the value of that STRING token and, if appropriate, shall be considered a
                           numeric string (see Expressions in awk), the variable shall also be assigned its numeric value.  Each
                           such  variable  assignment  shall  occur  just prior to the processing of the following file, if any.
                           Thus, an assignment before the first file argument shall be executed  after  the  BEGIN  actions  (if
                           any),  while  an assignment after the last file argument shall occur before the END actions (if any).
                           If there are no file arguments, assignments shall be executed before processing the standard input.

STDIN
       The standard input shall be used only if no file operands are specified, or if a file operand is '−', or  if  a  progfile
       option-argument  is '−'; see the INPUT FILES section. If the awk program contains no actions and no patterns, but is oth‐
       erwise a valid awk program, standard input and any file operands shall not be read and awk shall exit with a return  sta‐
       tus of zero.

INPUT FILES
       Input files to the awk program from any of the following sources shall be text files:

        *  Any file operands or their equivalents, achieved by modifying the awk variables ARGV and ARGC

        *  Standard input in the absence of any file operands

        *  Arguments to the getline function

       Whether  the  variable RS is set to a value other than a &amp;lt;newline&amp;gt; or not, for these files, implementations shall support
       records terminated with the specified separator up to {LINE_MAX} bytes and may support longer records.

       If −f progfile is specified, the application shall ensure that the files named by each of the  progfile  option-arguments
       are text files and their concatenation, in the same order as they appear in the arguments, is an awk program.

<!-- 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 <=< ACCEPT -->ENVIRONMENT VARIABLES
       The following environment variables shall affect the execution of awk:

       LANG      Provide  a  default  value for the internationalization variables that are unset or null. (See the Base Defini‐
                 tions volume of POSIX.1‐2008, Section 8.2, Internationalization Variables for the precedence of  international‐
                 ization variables used to determine the values of locale categories.)

       LC_ALL    If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_COLLATE
                 Determine  the  locale  for the behavior of ranges, equivalence classes, and multi-character collating elements
                 within regular expressions and in comparisons of string values.

       LC_CTYPE  Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, sin‐
                 gle-byte  as  opposed to multi-byte characters in arguments and input files), the behavior of character classes
                 within regular expressions, the identification of characters as letters, and the mapping of uppercase and  low‐
                 ercase characters for the toupper and tolower functions.

       LC_MESSAGES
                 Determine  the  locale  that should be used to affect the format and contents of diagnostic messages written to
                 standard error.

       LC_NUMERIC
                 Determine the radix character used when interpreting numeric input, performing conversions between numeric  and
                 string  values,  and formatting numeric output. Regardless of locale, the &amp;lt;period&amp;gt; character (the decimal-point
                 character of the POSIX locale) is the decimal-point character recognized in processing awk programs  (including
                 assignments in command line arguments).

       NLSPATH   Determine the location of message catalogs for the processing of LC_MESSAGES.<!-- ACCEPT >=> 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 -->

       PATH      Determine  the  search  path when looking for commands executed by system(expr), or input and output pipes; see
                 the Base Definitions volume of POSIX.1‐2008, Chapter 8, Environment Variables.

       In addition, all environment variables shall be visible via the awk variable ENVIRON.

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       The nature of the output files depends on the awk program.

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       The nature of the output files depends on the awk program.

EXTENDED DESCRIPTION
   Overall Program Structure
       An awk program is composed of pairs of the form:

           pattern { action }

       Either the pattern or the action (including the enclosing brace characters) can be omitted.

       A missing pattern shall match any record of input, and a missing action shall be equivalent to:

           { print }

       Execution of the awk program shall start by first executing the actions associated with all BEGIN patterns in  the  order
       they  occur  in  the program. Then each file operand (or standard input if no files were specified) shall be processed in
       turn by reading data from the file until a record separator is seen (&amp;lt;newline&amp;gt; by default). Before the first reference to
       a field in the record is evaluated, the record shall be split into fields, according to the rules in Regular Expressions,
       using the value of FS that was current at the time the record was read. Each pattern in the program then shall be  evalu‐
       ated  in  the  order of occurrence, and the action associated with each pattern that matches the current record executed.
       The action for a matching pattern shall be executed before evaluating subsequent patterns. Finally, the  actions  associ‐
       ated with all END patterns shall be executed in the order they occur in the program.

   Expressions in awk
       Expressions  describe computations used in patterns and actions.  In the following table, valid expression operations are
       given in groups from highest precedence first to lowest precedence last, with equal-precedence operators grouped  between
       horizontal lines. In expression evaluation, where the grammar is formally ambiguous, higher precedence operators shall be
       evaluated before lower precedence operators. In this table expr, expr1, expr2, and expr3 represent any expression,  while
       lvalue  represents any entity that can be assigned to (that is, on the left side of an assignment operator).  The precise
       syntax of expressions is given in Grammar.

                                        Table 4-1: Expressions in Decreasing Precedence in awk

                           ┌─────────────────────┬─────────────────────────┬────────────────┬──────────────┐
                           │       Syntax        │          Name           │ Type of Result │Associativity │
                           ├─────────────────────┼─────────────────────────┼────────────────┼──────────────┤
                           │( expr )             │Grouping                 │Type of expr    │N/A           │
                           ├─────────────────────┼─────────────────────────┼────────────────┼──────────────┤
                           │$expr                │Field reference          │String          │N/A           │
                           ├─────────────────────┼─────────────────────────┼────────────────┼──────────────┤
                           │lvalue ++            │Post-increment           │Numeric         │N/A           │
                           │lvalue −−            │Post-decrement           │Numeric         │N/A           │
                           ├─────────────────────┼─────────────────────────┼────────────────┼──────────────┤
                           │++ lvalue            │Pre-increment            │Numeric         │N/A           │
                           │−− lvalue            │Pre-decrement            │Numeric         │N/A           │
                           ├─────────────────────┼─────────────────────────┼────────────────┼──────────────┤
                           │expr ^ expr          │Exponentiation           │Numeric         │Right         │
                           ├─────────────────────┼─────────────────────────┼────────────────┼──────────────┤
                           │! expr               │Logical not              │Numeric         │N/A           │
                           │+ expr               │Unary plus               │Numeric         │N/A           │
                           │− expr               │Unary minus              │Numeric         │N/A           │
                           ├─────────────────────┼─────────────────────────┼────────────────┼──────────────┤
                           │expr * expr          │Multiplication           │Numeric         │Left          │
                           │expr / expr          │Division                 │Numeric         │Left          │
                           │expr % expr          │Modulus                  │Numeric         │Left          │
                           ├─────────────────────┼─────────────────────────┼────────────────┼──────────────┤
                           │expr + expr          │Addition                 │Numeric         │Left          │
                           │expr − expr          │Subtraction              │Numeric         │Left          │
                           ├─────────────────────┼─────────────────────────┼────────────────┼──────────────┤
                           │expr expr            │String concatenation     │String          │Left          │
                           ├─────────────────────┼─────────────────────────┼────────────────┼──────────────┤
                           │expr &amp;lt; expr          │Less than                │Numeric         │None          │
                           │expr &amp;lt;= expr         │Less than or equal to    │Numeric         │None          │
                           │expr != expr         │Not equal to             │Numeric         │None          │
                           │expr == expr         │Equal to                 │Numeric         │None          │
                           │expr &amp;gt; expr          │Greater than             │Numeric         │None          │
                           │expr &amp;gt;= expr         │Greater than or equal to │Numeric         │None          │
                           ├─────────────────────┼─────────────────────────┼────────────────┼──────────────┤
                           │expr ~ expr          │ERE match                │Numeric         │None          │
                           │expr !~ expr         │ERE non-match            │Numeric         │None          │
                           ├─────────────────────┼─────────────────────────┼────────────────┼──────────────┤
                           │expr in array        │Array membership         │Numeric         │Left          │
                           │( index ) in array   │Multi-dimension array    │Numeric         │Left          │
                           │                     │membership               │                │              │
                           ├─────────────────────┼─────────────────────────┼────────────────┼──────────────┤
                           │expr &amp;&amp; expr         │Logical AND              │Numeric         │Left          │
                           ├─────────────────────┼─────────────────────────┼────────────────┼──────────────┤
                           │expr || expr         │Logical OR               │Numeric         │Left          │
                           ├─────────────────────┼─────────────────────────┼────────────────┼──────────────┤
                           │expr1 ? expr2 : expr3│Conditional expression   │Type of selected│Right         │
                           │                     │                         │expr2 or expr3  │              │
                           ├─────────────────────┼─────────────────────────┼────────────────┼──────────────┤
                           │lvalue ^= expr       │Exponentiation assignment│Numeric         │Right         │
                           │lvalue %= expr       │Modulus assignment       │Numeric         │Right         │
                           │lvalue *= expr       │Multiplication assignment│Numeric         │Right         │
                           │lvalue /= expr       │Division assignment      │Numeric         │Right         │
                           │lvalue += expr       │Addition assignment      │Numeric         │Right         │
                           │lvalue −= expr       │Subtraction assignment   │Numeric         │Right         │
                           │lvalue = expr        │Assignment               │Type of expr    │Right         │
                           └─────────────────────┴─────────────────────────┴────────────────┴──────────────┘
       Each expression shall have either a string value, a numeric value, or both. Except as stated for specific  contexts,  the
       value  of  an  expression  shall be implicitly converted to the type needed for the context in which it is used. A string
       value shall be converted to a numeric value either by the equivalent of the following calls to functions defined  by  the
       ISO C standard:

           setlocale(LC_NUMERIC, "");
           numeric_value = atof(string_value);

       or by converting the initial portion of the string to type double representation as follows:

              The  input string is decomposed into two parts: an initial, possibly empty, sequence of white-space characters (as
              specified by isspace()) and a subject sequence interpreted as a floating-point constant.

              The expected form of the subject sequence is an optional '+' or '−' sign, then  a  non-empty  sequence  of  digits
              optionally  containing  a  &amp;lt;period&amp;gt;, then an optional exponent part. An exponent part consists of 'e' or 'E', fol‐
              lowed by an optional sign, followed by one or more decimal digits.

              The sequence starting with the first digit or the &amp;lt;period&amp;gt; (whichever occurs first) is interpreted as  a  floating
              constant  of the C language, and if neither an exponent part nor a &amp;lt;period&amp;gt; appears, a &amp;lt;period&amp;gt; is assumed to fol‐
              low the last digit in the string. If the subject sequence begins with a minus-sign, the value resulting  from  the
              conversion is negated.

       A  numeric  value  that  is  exactly equal to the value of an integer (see Section 1.1.2, Concepts Derived from the ISO C
       Standard) shall be converted to a string by the equivalent of a call to the sprintf function (see String Functions)  with
       the  string "%d" as the fmt argument and the numeric value being converted as the first and only expr argument. Any other
       numeric value shall be converted to a string by the equivalent of a call to the sprintf function with the  value  of  the
       variable  CONVFMT  as  the  fmt  argument  and the numeric value being converted as the first and only expr argument. The
       result of the conversion is unspecified if the value of CONVFMT is not a floating-point format specification. This volume
       of  POSIX.1‐2008 specifies no explicit conversions between numbers and strings. An application can force an expression to
       be treated as a number by adding zero to it, or can force it to be treated as a string by concatenating the  null  string
       ("") to it.

       A string value shall be considered a numeric string if it comes from one of the following:

        1. Field variables

        2. Input from the getline() function

        3. FILENAME

        4. ARGV array elements

        5. ENVIRON array elements

        6. Array elements created by the split() function

        7. A command line variable assignment

        8. Variable assignment from another numeric string variable

       and an implementation-dependent condition corresponding to either case (a) or (b) below is met.

        a. After the equivalent of the following calls to functions defined by the ISO C standard, string_value_end would differ
           from string_value, and any characters before the terminating null character  in  string_value_end  would  be  &amp;lt;blank&amp;gt;
           characters:

               char *string_value_end;
               setlocale(LC_NUMERIC, "");
               numeric_value = strtod (string_value, &amp;string_value_end);

        b. After all the following conversions have been applied, the resulting string would lexically be recognized as a NUMBER
           token as described by the lexical conventions in Grammar:

           --  All leading and trailing &amp;lt;blank&amp;gt; characters are discarded.

           --  If the first non-&amp;lt;blank&amp;gt; is '+' or '−', it is discarded.

           --  Each occurrence of the decimal point character from the current locale is changed to a &amp;lt;period&amp;gt;.
       In case (a) the numeric value of the numeric string shall be the value that would be returned by the  strtod()  call.  In
       case  (b)  if  the first non-&amp;lt;blank&amp;gt; is '−', the numeric value of the numeric string shall be the negation of the numeric
       value of the recognized NUMBER token; otherwise, the numeric value of the numeric string shall be the  numeric  value  of
       the  recognized  NUMBER  token. Whether or not a string is a numeric string shall be relevant only in contexts where that
       term is used in this section.

       When an expression is used in a Boolean context, if it has a numeric value, a value of zero shall be treated as false and
       any  other value shall be treated as true. Otherwise, a string value of the null string shall be treated as false and any
       other value shall be treated as true.  A Boolean context shall be one of the following:

        *  The first subexpression of a conditional expression

        *  An expression operated on by logical NOT, logical AND, or logical OR

        *  The second expression of a for statement

        *  The expression of an if statement

        *  The expression of the while clause in either a while or do...while statement

        *  An expression used as a pattern (as in Overall Program Structure)

       All arithmetic shall follow the semantics of floating-point arithmetic as specified by the ISO C  standard  (see  Section
       1.1.2, Concepts Derived from the ISO C Standard).

       The value of the expression:

           expr1 ^ expr2

       shall be equivalent to the value returned by the ISO C standard function call:

           pow(expr1, expr2)

       The expression:

           lvalue ^= expr

       shall be equivalent to the ISO C standard expression:

           lvalue = pow(lvalue, expr)

       except that lvalue shall be evaluated only once. The value of the expression:

           expr1 % expr2

       shall be equivalent to the value returned by the ISO C standard function call:

           fmod(expr1, expr2)

       The expression:

           lvalue %= expr

       shall be equivalent to the ISO C standard expression:

           lvalue = fmod(lvalue, expr)

       except that lvalue shall be evaluated only once.

       Variables and fields shall be set by the assignment statement:

           lvalue = expression

       and  the  type  of expression shall determine the resulting variable type. The assignment includes the arithmetic assign‐
       ments ("+=", "−=", "*=", "/=", "%=", "^=", "++", "−−") all of which shall produce a numeric result. The left-hand side of
       an  assignment  and  the  target of increment and decrement operators can be one of a variable, an array with index, or a
       field selector.

       The awk language supplies arrays that are used for storing numbers or strings.  Arrays need not be declared.  They  shall
       initially  be  empty, and their sizes shall change dynamically. The subscripts, or element identifiers, are strings, pro‐
       viding a type of associative array capability. An array name followed by a subscript within square brackets can  be  used
       as  an lvalue and thus as an expression, as described in the grammar; see Grammar.  Unsubscripted array names can be used
       in only the following contexts:

        *  A parameter in a function definition or function call

        *  The NAME token following any use of the keyword in as specified in the grammar (see Grammar); if  the  name  used  in
           this context is not an array name, the behavior is undefined

       A  valid array index shall consist of one or more &amp;lt;comma&amp;gt;-separated expressions, similar to the way in which multi-dimen‐
       sional arrays are indexed in  some  programming  languages.  Because  awk  arrays  are  really  one-dimensional,  such  a
       &amp;lt;comma&amp;gt;-separated  list  shall be converted to a single string by concatenating the string values of the separate expres‐
       sions, each separated from the other by the value of the SUBSEP variable. Thus, the following two index operations  shall
       be equivalent:

           var[expr1, expr2, ... exprn]

           var[expr1 SUBSEP expr2 SUBSEP ... SUBSEP exprn]

       The  application shall ensure that a multi-dimensioned index used with the in operator is parenthesized. The in operator,
       which tests for the existence of a particular array element, shall not cause that element to exist. Any  other  reference
       to a nonexistent array element shall automatically create it.

       Comparisons  (with  the  '&amp;lt;',  "&amp;lt;=",  "!=", "==", '&amp;gt;', and "&amp;gt;=" operators) shall be made numerically if both operands are
       numeric, if one is numeric and the other has a string value that is a numeric string, or if one is numeric and the  other
       has the uninitialized value.  Otherwise, operands shall be converted to strings as required and a string comparison shall
       be made using the locale-specific collation sequence. The value of the comparison expression shall be 1 if  the  relation
       is true, or 0 if the relation is false.

   Variables and Special Variables
       Variables  can be used in an awk program by referencing them. With the exception of function parameters (see User-Defined
       Functions), they are not explicitly declared. Function parameter names shall be local to the function; all other variable
       names shall be global. The same name shall not be used as both a function parameter name and as the name of a function or
       a special awk variable. The same name shall not be used both as a variable name with global scope and as the  name  of  a
       function. The same name shall not be used within the same scope both as a scalar variable and as an array.  Uninitialized
       variables, including scalar variables, array elements, and field variables, shall have an uninitialized value. An  unini‐
       tialized  value  shall  have both a numeric value of zero and a string value of the empty string. Evaluation of variables
       with an uninitialized value, to either string or numeric, shall be determined by the context in which they are used.

       Field variables shall be designated by a '$' followed by a number or numerical expression. The effect of the field number
       expression  evaluating  to  anything  other than a non-negative integer is unspecified; uninitialized variables or string
       values need not be converted to numeric values in this context. New field variables can be created by assigning  a  value
       to  them.  References  to nonexistent fields (that is, fields after $NF), shall evaluate to the uninitialized value. Such
       references shall not create new fields. However, assigning to a nonexistent field (for example, $(NF+2)=5) shall increase
       the  value of NF; create any intervening fields with the uninitialized value; and cause the value of $0 to be recomputed,
       with the fields being separated by the value of OFS.  Each field variable shall have a string value or  an  uninitialized
       value  when  created.  Field  variables shall have the uninitialized value when created from $0 using FS and the variable
       does not contain any characters. If appropriate, the field variable shall be considered a numeric string (see Expressions
       in awk).

       Implementations shall support the following other special variables that are set by awk:

       ARGC      The number of elements in the ARGV array.

       ARGV      An array of command line arguments, excluding options and the program argument, numbered from zero to ARGC−1.

                 The  arguments  in  ARGV  can  be modified or added to; ARGC can be altered. As each input file ends, awk shall
                 treat the next non-null element of ARGV, up to the current value of ARGC−1, inclusive, as the name of the  next
                 input  file.  Thus, setting an element of ARGV to null means that it shall not be treated as an input file. The
                 name '−' indicates the standard input. If an argument matches the format of an assignment operand,  this  argu‐
                 ment shall be treated as an assignment rather than a file argument.

       CONVFMT   The  printf format for converting numbers to strings (except for output statements, where OFMT is used); "%.6g"
                 by default.

       ENVIRON   An array representing the value of the environment, as described in the exec functions defined  in  the  System
                 Interfaces  volume  of  POSIX.1‐2008.  The indices of the array shall be strings consisting of the names of the
                 environment variables, and the value of each array element shall be a string consisting of the  value  of  that
                 variable.  If  appropriate,  the  environment variable shall be considered a numeric string (see Expressions in
                 awk); the array element shall also have its numeric value.

                 In all cases where the behavior of awk is affected by environment variables (including the environment  of  any
                 commands  that  awk executes via the system function or via pipeline redirections with the print statement, the
                 printf statement, or the getline function), the environment used shall be the environment at the time awk began
                 executing; it is implementation-defined whether any modification of ENVIRON affects this environment.

       FILENAME  A  pathname  of  the current input file. Inside a BEGIN action the value is undefined. Inside an END action the
                 value shall be the name of the last input file processed.

       FNR       The ordinal number of the current record in the current file. Inside a BEGIN action the value  shall  be  zero.
                 Inside an END action the value shall be the number of the last record processed in the last file processed.

       FS        Input field separator regular expression; a &amp;lt;space&amp;gt; by default.

       NF        The  number of fields in the current record. Inside a BEGIN action, the use of NF is undefined unless a getline
                 function without a var argument is executed previously. Inside an END action, NF shall retain the value it  had
                 for the last record read, unless a subsequent, redirected, getline function without a var argument is performed
                 prior to entering the END action.

       NR        The ordinal number of the current record from the start of input.  Inside a BEGIN action  the  value  shall  be
                 zero. Inside an END action the value shall be the number of the last record processed.

       OFMT      The  printf  format  for  converting numbers to strings in output statements (see Output Statements); "%.6g" by
                 default. The result of the conversion is unspecified if the value of OFMT is not a floating-point format speci‐
                 fication.

       OFS       The print statement output field separator; &amp;lt;space&amp;gt; by default.

       ORS       The print statement output record separator; a &amp;lt;newline&amp;gt; by default.

       RLENGTH   The length of the string matched by the match function.

       RS        The  first  character of the string value of RS shall be the input record separator; a &amp;lt;newline&amp;gt; by default. If
                 RS contains more than one character, the results are unspecified. If RS is null, then records are separated  by
                 sequences  consisting  of  a  &amp;lt;newline&amp;gt; plus one or more blank lines, leading or trailing blank lines shall not
                 result in empty records at the beginning or end of the input, and a &amp;lt;newline&amp;gt; shall always be a  field  separa‐
                 tor, no matter what the value of FS is.

       RSTART    The  starting  position  of  the  string  matched by the match function, numbering from 1. This shall always be
                 equivalent to the return value of the match function.

       SUBSEP    The subscript separator string for multi-dimensional arrays; the default value is implementation-defined.

   Regular Expressions
       The awk utility shall make use of  the  extended  regular  expression  notation  (see  the  Base  Definitions  volume  of
       POSIX.1‐2008, Section 9.4, Extended Regular Expressions) except that it shall allow the use of C-language conventions for
       escaping special characters within the EREs, as specified in the table in the Base Definitions  volume  of  POSIX.1‐2008,
       Chapter  5,  File  Format Notation ('\\', '\a', '\b', '\f', '\n', '\r', '\t', '\v') and the following table; these escape
       sequences shall be recognized both inside and outside bracket expressions. Note that records need  not  be  separated  by
       &amp;lt;newline&amp;gt;  characters  and  string  constants can contain &amp;lt;newline&amp;gt; characters, so even the "\n" sequence is valid in awk
       EREs. Using a &amp;lt;slash&amp;gt; character within an ERE requires the escaping shown in the following table.

                                                  Table 4-2: Escape Sequences in awk

                         ┌─────────┬────────────────────────────────────┬────────────────────────────────────┐
                         │ Escape  │                                    │                                    │
                         │Sequence │            Description             │              Meaning               │
                         ├─────────┼────────────────────────────────────┼────────────────────────────────────┤
                         │\"       │ &amp;lt;backslash&amp;gt; &amp;lt;quotation-mark&amp;gt;       │ &amp;lt;quotation-mark&amp;gt; character         │
                         ├─────────┼────────────────────────────────────┼────────────────────────────────────┤
                         │\/       │ &amp;lt;backslash&amp;gt; &amp;lt;slash&amp;gt;                │ &amp;lt;slash&amp;gt; character                  │
                         ├─────────┼────────────────────────────────────┼────────────────────────────────────┤
                         │\ddd     │ A &amp;lt;backslash&amp;gt; character followed   │ The character whose encoding is    │
                         │         │ by the longest sequence of one,    │ represented by the one, two, or    │
                         │         │ two, or three octal-digit charac‐  │ three-digit octal integer. Multi-  │
                         │         │ ters (01234567). If all of the     │ byte characters require multiple,  │
                         │         │ digits are 0 (that is, representa‐ │ concatenated escape sequences of   │
                         │         │ tion of the NUL character), the    │ this type, including the leading   │
                         │         │ behavior is undefined.             │ &amp;lt;backslash&amp;gt; for each byte.         │
                         ├─────────┼────────────────────────────────────┼────────────────────────────────────┤
                         │\c       │ A &amp;lt;backslash&amp;gt; character followed   │ Undefined                          │
                         │         │ by any character not described in  │                                    │
                         │         │ this table or in the table in the  │                                    │
                         │         │ Base Definitions volume of         │                                    │
                         │         │ POSIX.1‐2008, Chapter 5, File For‐ │                                    │
                         │         │ mat Notation ('\\', '\a', '\b',    │                                    │
                         │         │ '\f', '\n', '\r', '\t', '\v').     │                                    │
                         └─────────┴────────────────────────────────────┴────────────────────────────────────┘
       A regular expression can be matched against a specific field or string by using one of the two regular expression  match‐
       ing  operators, '~' and "!~".  These operators shall interpret their right-hand operand as a regular expression and their
       left-hand operand as a string. If the regular expression matches the string, the '~' expression shall evaluate to a value
       of 1, and the "!~" expression shall evaluate to a value of 0. (The regular expression matching operation is as defined by
       the term matched in the Base Definitions volume of POSIX.1‐2008, Section 9.1, Regular  Expression  Definitions,  where  a
       match  occurs  on  any part of the string unless the regular expression is limited with the &amp;lt;circumflex&amp;gt; or &amp;lt;dollar-sign&amp;gt;
       special characters.) If the regular expression does not match the string, the '~' expression shall evaluate to a value of
       0,  and  the  "!~"  expression shall evaluate to a value of 1. If the right-hand operand is any expression other than the
       lexical token ERE, the string value of the expression shall be interpreted as an extended regular  expression,  including
       the escape conventions described above.  Note that these same escape conventions shall also be applied in determining the
       value of a string literal (the lexical token STRING), and thus shall be applied a second time when a  string  literal  is
       used in this context.

       When  an ERE token appears as an expression in any context other than as the right-hand of the '~' or "!~" operator or as
       one of the built-in function arguments described below, the value of the resulting expression shall be the equivalent of:

           $0  " "  /ere/

       The ere argument to the gsub, match, sub functions, and the fs argument to the  split  function  (see  String  Functions)
       shall  be interpreted as extended regular expressions. These can be either ERE tokens or arbitrary expressions, and shall
       be interpreted in the same manner as the right-hand side of the '~' or "!~" operator.

       An extended regular expression can be used to separate fields by assigning a string  containing  the  expression  to  the
       built-in  variable FS, either directly or as a consequence of using the −F sepstring option.  The default value of the FS
       variable shall be a single &amp;lt;space&amp;gt;.  The following describes FS behavior:

        1. If FS is a null string, the behavior is unspecified.

        2. If FS is a single character:

            a. If FS is &amp;lt;space&amp;gt;, skip leading and trailing &amp;lt;blank&amp;gt; and &amp;lt;newline&amp;gt; characters; fields shall be delimited  by  sets
               of one or more &amp;lt;blank&amp;gt; or &amp;lt;newline&amp;gt; characters.

            b. Otherwise, if FS is any other character c, fields shall be delimited by each single occurrence of c.

        3. Otherwise,  the  string  value  of  FS shall be considered to be an extended regular expression. Each occurrence of a
           sequence matching the extended regular expression shall delimit fields.

       Except for the '~' and "!~" operators, and in the gsub, match, split, and sub built-in functions, ERE matching  shall  be
       based  on input records; that is, record separator characters (the first character of the value of the variable RS, &amp;lt;new‐
       line&amp;gt; by default) cannot be embedded in the expression, and no expression shall match the record separator character.  If
       the  record  separator  is not &amp;lt;newline&amp;gt;, &amp;lt;newline&amp;gt; characters embedded in the expression can be matched. For the '~' and
       "!~" operators, and in those four built-in functions, ERE matching shall be based on text strings; that is, any character
       (including &amp;lt;newline&amp;gt; and the record separator) can be embedded in the pattern, and an appropriate pattern shall match any
       character. However, in all awk ERE matching, the use of one or more NUL characters in the pattern, input record, or  text
       string produces undefined results.

   Patterns
       A  pattern  is any valid expression, a range specified by two expressions separated by a comma, or one of the two special
       patterns BEGIN or END.

   Special Patterns
       The awk utility shall recognize two special patterns, BEGIN and END.  Each BEGIN pattern shall be matched  once  and  its
       associated  action  executed before the first record of input is read—except possibly by use of the getline function (see
       Input/Output and General Functions) in a prior BEGIN action—and before command line assignment is done. Each END  pattern
       shall be matched once and its associated action executed after the last record of input has been read. These two patterns
       shall have associated actions.

       BEGIN and END shall not combine with other patterns. Multiple BEGIN and END patterns shall be allowed. The actions  asso‐
       ciated  with  the  BEGIN patterns shall be executed in the order specified in the program, as are the END actions. An END
       pattern can precede a BEGIN pattern in a program.

       If an awk program consists of only actions with the pattern BEGIN, and the BEGIN action contains no getline function, awk
       shall exit without reading its input when the last statement in the last BEGIN action is executed. If an awk program con‐
       sists of only actions with the pattern END or only actions with the patterns BEGIN and  END,  the  input  shall  be  read
       before the statements in the END actions are executed.

   Expression Patterns
       An  expression  pattern  shall  be evaluated as if it were an expression in a Boolean context. If the result is true, the
       pattern shall be considered to match, and the associated action (if any) shall be executed. If the result is  false,  the
       action shall not be executed.

   Pattern Ranges
       A  pattern  range  consists  of two expressions separated by a comma; in this case, the action shall be performed for all
       records between a match of the first expression and the following match of the  second  expression,  inclusive.  At  this
       point, the pattern range can be repeated starting at input records subsequent to the end of the matched range.

   Actions
       An  action  is  a  sequence  of statements as shown in the grammar in Grammar.  Any single statement can be replaced by a
       statement list enclosed in curly braces. The application shall ensure that statements in a statement list  are  separated
       by  &amp;lt;newline&amp;gt;  or &amp;lt;semicolon&amp;gt; characters. Statements in a statement list shall be executed sequentially in the order that
       they appear.

       The expression acting as the conditional in an if statement shall be evaluated and if it is  non-zero  or  non-null,  the
       following statement shall be executed; otherwise, if else is present, the statement following the else shall be executed.

       The  if,  while, do...while, for, break, and continue statements are based on the ISO C standard (see Section 1.1.2, Con‐
       cepts Derived from the ISO C Standard), except that the Boolean expressions shall be treated as described in  Expressions
       in awk, and except in the case of:

           for (variable in array)

       which  shall  iterate,  assigning each index of array to variable in an unspecified order. The results of adding new ele‐
       ments to array within such a for loop are undefined. If a break or continue statement  occurs  outside  of  a  loop,  the
       behavior is undefined.

       The delete statement shall remove an individual array element. Thus, the following code deletes an entire array:

           for (index in array)
               delete array[index]

       The  next statement shall cause all further processing of the current input record to be abandoned. The behavior is unde‐
       fined if a next statement appears or is invoked in a BEGIN or END action.

       The exit statement shall invoke all END actions in the order in which they occur in the program source and then terminate
       the  program  without  reading  further input. An exit statement inside an END action shall terminate the program without
       further execution of END actions. If an expression is specified in an exit statement, its numeric value shall be the exit
       status of awk, unless subsequent errors are encountered or a subsequent exit statement with an expression is executed.

   Output Statements
       Both  print  and printf statements shall write to standard output by default. The output shall be written to the location
       specified by output_redirection if one is supplied, as follows:

           &amp;gt; expression
           &amp;gt;&amp;gt; expression
           | expression

       In all cases, the expression shall be evaluated to produce a string that is used as a pathname into which to  write  (for
       '&amp;gt;'  or  "&amp;gt;&amp;gt;") or as a command to be executed (for '|').  Using the first two forms, if the file of that name is not cur‐
       rently open, it shall be opened, creating it if necessary and using the first form, truncating the file. The output  then
       shall  be  appended  to the file. As long as the file remains open, subsequent calls in which expression evaluates to the
       same string value shall simply append output to the file. The file remains open until the close function (see  Input/Out‐
       put and General Functions) is called with an expression that evaluates to the same string value.

       The third form shall write output onto a stream piped to the input of a command. The stream shall be created if no stream
       is currently open with the value of expression as its command name. The stream created shall be equivalent to one created
       by a call to the popen() function defined in the System Interfaces volume of POSIX.1‐2008 with the value of expression as
       the command argument and a value of w as the mode argument. As long as the stream remains open, subsequent calls in which
       expression  evaluates  to  the  same string value shall write output to the existing stream. The stream shall remain open
       until the close function (see Input/Output and General Functions) is called with an expression that evaluates to the same
       string  value.   At  that time, the stream shall be closed as if by a call to the pclose() function defined in the System
       Interfaces volume of POSIX.1‐2008.

       As described in detail by the grammar in Grammar, these output statements shall take a &amp;lt;comma&amp;gt;-separated list of  expres‐
       sions  referred  to  in the grammar by the non-terminal symbols expr_list, print_expr_list, or print_expr_list_opt.  This
       list is referred to here as the expression list, and each member is referred to as an expression argument.

       The print statement shall write the value of each expression argument onto the indicated output stream separated  by  the
       current  output field separator (see variable OFS above), and terminated by the output record separator (see variable ORS
       above). All expression arguments shall be taken as strings, being converted if necessary; this  conversion  shall  be  as
       described  in Expressions in awk, with the exception that the printf format in OFMT shall be used instead of the value in
       CONVFMT.  An empty expression list shall stand for the whole input record ($0).

       The printf statement shall produce output based on a notation similar to the File Format Notation used to  describe  file
       formats  in  this  volume  of POSIX.1‐2008 (see the Base Definitions volume of POSIX.1‐2008, Chapter 5, File Format Nota‐
       tion).  Output shall be produced as specified with the first expression argument as  the  string  format  and  subsequent
       expression arguments as the strings arg1 to argn, inclusive, with the following exceptions:

        1. The  format  shall be an actual character string rather than a graphical representation. Therefore, it cannot contain
           empty character positions. The &amp;lt;space&amp;gt; in the format string, in any context other than a flag of a conversion  speci‐
           fication, shall be treated as an ordinary character that is copied to the output.

        2. If  the character set contains a '' character and that character appears in the format string, it shall be treated as
           an ordinary character that is copied to the output.

        3. The escape sequences beginning with a &amp;lt;backslash&amp;gt; character shall be treated as sequences of ordinary characters that
           are  copied  to  the output. Note that these same sequences shall be interpreted lexically by awk when they appear in
           literal strings, but they shall not be treated specially by the printf statement.

        4. A field width or precision can be specified as the '*' character instead of a digit string. In  this  case  the  next
           argument from the expression list shall be fetched and its numeric value taken as the field width or precision.

        5. The  implementation  shall  not precede or follow output from the d or u conversion specifier characters with &amp;lt;blank&amp;gt;
           characters not specified by the format string.

        6. The implementation shall not precede output from the o conversion specifier character with leading zeros  not  speci‐
           fied by the format string.

        7. For  the  c conversion specifier character: if the argument has a numeric value, the character whose encoding is that
           value shall be output. If the value is zero or is not the encoding of any character in the character set, the  behav‐
           ior  is  undefined.  If  the argument does not have a numeric value, the first character of the string value shall be
           output; if the string does not contain any characters, the behavior is undefined.

        8. For each conversion specification that consumes an argument, the next expression argument shall  be  evaluated.  With
           the exception of the c conversion specifier character, the value shall be converted (according to the rules specified
           in Expressions in awk) to the appropriate type for the conversion specification.

        9. If there are insufficient expression arguments to satisfy all the conversion specifications in the format string, the
           behavior is undefined.

       10. If  any  character  sequence  in  the format string begins with a '%' character, but does not form a valid conversion
           specification, the behavior is unspecified.

       Both print and printf can output at least {LINE_MAX} bytes.

   Functions
       The awk language has a variety of built-in functions: arithmetic, string, input/output, and general.

   Arithmetic Functions
       The arithmetic functions, except for int, shall be based on the ISO C standard (see Section 1.1.2, Concepts Derived  from
       the  ISO C Standard).  The behavior is undefined in cases where the ISO C standard specifies that an error be returned or
       that the behavior is undefined. Although the grammar (see Grammar) permits built-in functions to appear with no arguments
       or  parentheses,  unless  the argument or parentheses are indicated as optional in the following list (by displaying them
       within the "[]" brackets), such use is undefined.

       atan2(y,x)
                 Return arctangent of y/x in radians in the range [−π,π].

       cos(x)    Return cosine of x, where x is in radians.

       sin(x)    Return sine of x, where x is in radians.

       exp(x)    Return the exponential function of x.

       log(x)    Return the natural logarithm of x.

       sqrt(x)   Return the square root of x.

       int(x)    Return the argument truncated to an integer. Truncation shall be toward 0 when x&amp;gt;0.

       rand()    Return a random number n, such that 0≤n&amp;lt;1.

       srand([expr])
                 Set the seed value for rand to expr or use the time of day if expr is omitted. The previous seed value shall be
                 returned.

   String Functions
       The string functions in the following list shall be supported.  Although the grammar (see Grammar) permits built-in func‐
       tions to appear with no arguments or parentheses, unless the argument or parentheses are indicated  as  optional  in  the
       following list (by displaying them within the "[]" brackets), such use is undefined.

       gsub(ere, repl[, in])
                 Behave  like  sub (see below), except that it shall replace all occurrences of the regular expression (like the
                 ed utility global substitute) in $0 or in the in argument, when specified.

       index(s, t)
                 Return the position, in characters, numbering from 1, in string s where string t first occurs, or  zero  if  it
                 does not occur at all.

       length[([s])]
                 Return the length, in characters, of its argument taken as a string, or of the whole record, $0, if there is no
                 argument.

       match(s, ere)
                 Return the position, in characters, numbering from 1, in string s where the  extended  regular  expression  ere
                 occurs, or zero if it does not occur at all. RSTART shall be set to the starting position (which is the same as
                 the returned value), zero if no match is found; RLENGTH shall be set to the length of the matched string, −1 if
                 no match is found.

       split(s, a[, fs ])
                 Split the string s into array elements a[1], a[2], ..., a[n], and return n.  All elements of the array shall be
                 deleted before the split is performed. The separation shall be done with the ERE fs or with the field separator
                 FS if fs is not given. Each array element shall have a string value when created and, if appropriate, the array
                 element shall be considered a numeric string (see Expressions in awk).  The effect of  a  null  string  as  the
                 value of fs is unspecified.

       sprintf(fmt, expr, expr, ...)
                 Format the expressions according to the printf format given by fmt and return the resulting string.

       sub(ere, repl[, in ])
                 Substitute  the  string repl in place of the first instance of the extended regular expression ERE in string in
                 and return the number of substitutions. An &amp;lt;ampersand&amp;gt; ('&amp;') appearing in the string repl shall be replaced  by
                 the string from in that matches the ERE. An &amp;lt;ampersand&amp;gt; preceded with a &amp;lt;backslash&amp;gt; shall be interpreted as the
                 literal &amp;lt;ampersand&amp;gt; character. An occurrence of two consecutive &amp;lt;backslash&amp;gt; characters shall be interpreted  as
                 just  a single literal &amp;lt;backslash&amp;gt; character. Any other occurrence of a &amp;lt;backslash&amp;gt; (for example, preceding any
                 other character) shall be treated as a literal &amp;lt;backslash&amp;gt; character. Note that if repl  is  a  string  literal
                 (the  lexical  token  STRING;  see Grammar), the handling of the &amp;lt;ampersand&amp;gt; character occurs after any lexical
                 processing, including any lexical &amp;lt;backslash&amp;gt;-escape sequence processing. If in is specified and it is  not  an
                 lvalue  (see Expressions in awk), the behavior is undefined. If in is omitted, awk shall use the current record
                 ($0) in its place.

       substr(s, m[, n ])
                 Return the at most n-character substring of s that begins at position m, numbering from 1. If n is omitted,  or
                 if n specifies more characters than are left in the string, the length of the substring shall be limited by the
                 length of the string s.

       tolower(s)
                 Return a string based on the string s.  Each character in s that is an uppercase letter  specified  to  have  a
                 tolower  mapping by the LC_CTYPE category of the current locale shall be replaced in the returned string by the
                 lowercase letter specified by the mapping. Other characters in s shall be unchanged in the returned string.

       toupper(s)
                 Return a string based on the string s.  Each character in s that is a lowercase  letter  specified  to  have  a
                 toupper mapping by the LC_CTYPE category of the current locale is replaced in the returned string by the upper‐
                 case letter specified by the mapping. Other characters in s are unchanged in the returned string.

       All of the preceding functions that take ERE as a parameter expect a pattern or a string valued expression that is a reg‐
       ular expression as defined in Regular Expressions.

   Input/Output and General Functions
       The input/output and general functions are:

       close(expression)
                 Close  the  file or pipe opened by a print or printf statement or a call to getline with the same string-valued
                 expression.  The limit on the number of open expression arguments is implementation-defined. If the  close  was
                 successful, the function shall return zero; otherwise, it shall return non-zero.

       expression | getline [var]
                 Read  a  record  of  input  from a stream piped from the output of a command. The stream shall be created if no
                 stream is currently open with the value of expression as its command name. The stream created shall be  equiva‐
                 lent  to one created by a call to the popen() function with the value of expression as the command argument and
                 a value of r as the mode argument. As long as the stream remains open, subsequent  calls  in  which  expression
                 evaluates  to the same string value shall read subsequent records from the stream. The stream shall remain open
                 until the close function is called with an expression that evaluates to the same string value.  At  that  time,
                 the stream shall be closed as if by a call to the pclose() function. If var is omitted, $0 and NF shall be set;
                 otherwise, var shall be set and, if appropriate, it shall be considered a numeric string  (see  Expressions  in
                 awk).

                 The getline operator can form ambiguous constructs when there are unparenthesized operators (including concate‐
                 nate) to the left of the '|' (to the beginning of the expression containing getline).  In the  context  of  the
                 '$' operator, '|' shall behave as if it had a lower precedence than '$'.  The result of evaluating other opera‐
                 tors is unspecified, and conforming applications shall parenthesize properly all such usages.

       getline   Set $0 to the next input record from the current input file. This form of getline shall set the NF, NR, and FNR
                 variables.

       getline var
                 Set variable var to the next input record from the current input file and, if appropriate, var shall be consid‐
                 ered a numeric string (see Expressions in awk).  This form of getline shall set the FNR and NR variables.

       getline [var] &amp;lt; expression
                 Read the next record of input from a named file. The expression shall be evaluated to produce a string that  is
                 used  as a pathname.  If the file of that name is not currently open, it shall be opened. As long as the stream
                 remains open, subsequent calls in which expression evaluates to the same string  value  shall  read  subsequent
                 records  from  the  file. The file shall remain open until the close function is called with an expression that
                 evaluates to the same string value. If var is omitted, $0 and NF shall be set; otherwise, var shall be set and,
                 if appropriate, it shall be considered a numeric string (see Expressions in awk).

                 The  getline  operator can form ambiguous constructs when there are unparenthesized binary operators (including
                 concatenate) to the right of the '&amp;lt;' (up to the end of the expression containing the getline).  The  result  of
                 evaluating  such  a  construct is unspecified, and conforming applications shall parenthesize properly all such
                 usages.

       system(expression)
                 Execute the command given by expression in a manner equivalent to the system() function defined in  the  System
                 Interfaces volume of POSIX.1‐2008 and return the exit status of the command.

       All forms of getline shall return 1 for successful input, zero for end-of-file, and −1 for an error.

       Where  strings  are  used  as the name of a file or pipeline, the application shall ensure that the strings are textually
       identical. The terminology ``same string value'' implies that ``equivalent strings'', even  those  that  differ  only  by
       &amp;lt;space&amp;gt; characters, represent different files.

   User-Defined Functions
       The awk language also provides user-defined functions. Such functions can be defined as:

           function name([parameter, ...]) { statements }

       A function can be referred to anywhere in an awk program; in particular, its use can precede its definition. The scope of
       a function is global.

       Function parameters, if present, can be either scalars or arrays; the behavior is undefined if an array name is passed as
       a parameter that the function uses as a scalar, or if a scalar expression is passed as a parameter that the function uses
       as an array. Function parameters shall be passed by value if scalar and by reference if array name.

       The number of parameters in the function definition need not match the number of parameters in the function call.  Excess
       formal  parameters  can  be  used  as local variables. If fewer arguments are supplied in a function call than are in the
       function definition, the extra parameters that are used in the function body as scalars shall evaluate to the  uninitial‐
       ized  value  until  they are otherwise initialized, and the extra parameters that are used in the function body as arrays
       shall be treated as uninitialized arrays where each element evaluates to the uninitialized value until otherwise initial‐
       ized.

       When  invoking  a  function, no white space can be placed between the function name and the opening parenthesis. Function
       calls can be nested and recursive calls can be made upon functions. Upon return from any  nested  or  recursive  function
       call,  the  values  of all of the calling function's parameters shall be unchanged, except for array parameters passed by
       reference. The return statement can be used to return a value. If a return statement appears outside of a function  defi‐
       nition, the behavior is undefined.

       In  the function definition, &amp;lt;newline&amp;gt; characters shall be optional before the opening brace and after the closing brace.
       Function definitions can appear anywhere in the program where a pattern-action pair is allowed.

   Grammar
       The grammar in this section and the lexical conventions in the following section shall together describe the  syntax  for
       awk  programs.  The  general  conventions for this style of grammar are described in Section 1.3, Grammar Conventions.  A
       valid program can be represented as the non-terminal symbol program in the grammar. This formal syntax shall take  prece‐
       dence over the preceding text syntax description.

           %token NAME NUMBER STRING ERE
           %token FUNC_NAME   /* Name followed by '(' without white space. */

           /* Keywords */
           %token       Begin   End
           /*          'BEGIN' 'END'                            */

           %token       Break   Continue   Delete   Do   Else
           /*          'break' 'continue' 'delete' 'do' 'else'  */

           %token       Exit   For   Function   If   In
           /*          'exit' 'for' 'function' 'if' 'in'        */

           %token       Next   Print   Printf   Return   While
           /*          'next' 'print' 'printf' 'return' 'while' */

           /* Reserved function names */
           %token BUILTIN_FUNC_NAME
                       /* One token for the following:
                        * atan2 cos sin exp log sqrt int rand srand
                        * gsub index length match split sprintf sub
                        * substr tolower toupper close system
                        */
           %token GETLINE
                       /* Syntactically different from other built-ins. */

           /* Two-character tokens. */
           %token ADD_ASSIGN SUB_ASSIGN MUL_ASSIGN DIV_ASSIGN MOD_ASSIGN POW_ASSIGN
           /*     '+='       '−='       '*='       '/='       '%='       '^=' */

           %token OR   AND  NO_MATCH   EQ   LE   GE   NE   INCR  DECR  APPEND
           /*     '||' '&amp;&amp;' '!~' '==' '&amp;lt;=' '&amp;gt;=' '!=' '++'  '−−'  '&amp;gt;&amp;gt;'   */

           /* One-character tokens. */
           %token '{' '}' '(' ')' '[' ']' ',' ';' NEWLINE
           %token '+' '−' '*' '%' '^' '!' '&amp;gt;' '&amp;lt;' '|' '?' ':' ' " " ' '$' '='

           %start program
           %%

           program          : item_list
                            | actionless_item_list
                            ;

           item_list        : newline_opt
                            | actionless_item_list item terminator
                            | item_list            item terminator
                            | item_list          action terminator
                            ;

           actionless_item_list : item_list            pattern terminator
                            | actionless_item_list pattern terminator
                            ;

           item             : pattern action
                            | Function NAME      '(' param_list_opt ')'
                                  newline_opt action
                            | Function FUNC_NAME '(' param_list_opt ')'
                                  newline_opt action
                            ;

           param_list_opt   : /* empty */
                            | param_list
                            ;

           param_list       : NAME
                            | param_list ',' NAME
                            ;

           pattern          : Begin
                            | End
                            | expr
                            | expr ',' newline_opt expr
                            ;

           action           : '{' newline_opt                             '}'
                            | '{' newline_opt terminated_statement_list   '}'
                            | '{' newline_opt unterminated_statement_list '}'
                            ;

           terminator       : terminator ';'
                            | terminator NEWLINE
                            |            ';'
                            |            NEWLINE
                            ;

           terminated_statement_list : terminated_statement
                            | terminated_statement_list terminated_statement
                            ;

           unterminated_statement_list : unterminated_statement
                            | terminated_statement_list unterminated_statement
                            ;

           terminated_statement : action newline_opt
                            | If '(' expr ')' newline_opt terminated_statement
                            | If '(' expr ')' newline_opt terminated_statement
                                  Else newline_opt terminated_statement
                            | While '(' expr ')' newline_opt terminated_statement
                            | For '(' simple_statement_opt ';'
                                 expr_opt ';' simple_statement_opt ')' newline_opt
                                 terminated_statement
                            | For '(' NAME In NAME ')' newline_opt
                                 terminated_statement
                            | ';' newline_opt
                            | terminatable_statement NEWLINE newline_opt
                            | terminatable_statement ';'     newline_opt
                            ;

           unterminated_statement : terminatable_statement
                            | If '(' expr ')' newline_opt unterminated_statement
                            | If '(' expr ')' newline_opt terminated_statement
                                 Else newline_opt unterminated_statement
                            | While '(' expr ')' newline_opt unterminated_statement
                            | For '(' simple_statement_opt ';'
                             expr_opt ';' simple_statement_opt ')' newline_opt
                                 unterminated_statement
                            | For '(' NAME In NAME ')' newline_opt
                                 unterminated_statement
                            ;

           terminatable_statement : simple_statement
                            | Break
                            | Continue
                            | Next
                            | Exit expr_opt
                            | Return expr_opt
                            | Do newline_opt terminated_statement While '(' expr ')'
                            ;

           simple_statement_opt : /* empty */
                            | simple_statement
                            ;

           simple_statement : Delete NAME '[' expr_list ']'
                            | expr
                            | print_statement
                            ;

           print_statement  : simple_print_statement
                            | simple_print_statement output_redirection
                            ;

           simple_print_statement : Print  print_expr_list_opt
                            | Print  '(' multiple_expr_list ')'
                            | Printf print_expr_list
                            | Printf '(' multiple_expr_list ')'
                            ;

           output_redirection : '&amp;gt;'    expr
                            | APPEND expr
                            | '|'    expr
                            ;

           expr_list_opt    : /* empty */
                            | expr_list
                            ;

           expr_list        : expr
                            | multiple_expr_list
                            ;

           multiple_expr_list : expr ',' newline_opt expr
                            | multiple_expr_list ',' newline_opt expr
                            ;

           expr_opt         : /* empty */
                            | expr
                            ;

           expr             : unary_expr
                            | non_unary_expr
                            ;

           unary_expr       : '+' expr
                            | '−' expr
                            | unary_expr '^'      expr
                            | unary_expr '*'      expr
                            | unary_expr '/'      expr
                            | unary_expr '%'      expr
                            | unary_expr '+'      expr
                            | unary_expr '−'      expr
                            | unary_expr          non_unary_expr
                            | unary_expr '&amp;lt;'      expr
                            | unary_expr LE       expr
                            | unary_expr NE       expr
                            | unary_expr EQ       expr
                            | unary_expr '&amp;gt;'      expr
                            | unary_expr GE       expr
                            | unary_expr '~'      expr
                            | unary_expr NO_MATCH expr
                            | unary_expr In NAME
                            | unary_expr AND newline_opt expr
                            | unary_expr OR  newline_opt expr
                            | unary_expr '?' expr ':' expr
                            | unary_input_function
                            ;

           non_unary_expr   : '(' expr ')'
                            | '!' expr
                            | non_unary_expr '^'      expr
                            | non_unary_expr '*'      expr
                            | non_unary_expr '/'      expr
                            | non_unary_expr '%'      expr
                            | non_unary_expr '+'      expr
                            | non_unary_expr '−'      expr
                            | non_unary_expr          non_unary_expr
                            | non_unary_expr '&amp;lt;'      expr
                            | non_unary_expr LE       expr
                            | non_unary_expr NE       expr
                            | non_unary_expr EQ       expr
                            | non_unary_expr '&amp;gt;'      expr
                            | non_unary_expr GE       expr
                            | non_unary_expr '~'      expr
                            | non_unary_expr NO_MATCH expr
                            | non_unary_expr In NAME
                            | '(' multiple_expr_list ')' In NAME
                            | non_unary_expr AND newline_opt expr
                            | non_unary_expr OR  newline_opt expr
                            | non_unary_expr '?' expr ':' expr
                            | NUMBER
                            | STRING
                            | lvalue
                            | ERE
                            | lvalue INCR
                            | lvalue DECR
                            | INCR lvalue
                            | DECR lvalue
                            | lvalue POW_ASSIGN expr
                            | lvalue MOD_ASSIGN expr
                            | lvalue MUL_ASSIGN expr
                            | lvalue DIV_ASSIGN expr
                            | lvalue ADD_ASSIGN expr
                            | lvalue SUB_ASSIGN expr
                            | lvalue '=' expr
                            | FUNC_NAME '(' expr_list_opt ')'
                                 /* no white space allowed before '(' */
                            | BUILTIN_FUNC_NAME '(' expr_list_opt ')'
                            | BUILTIN_FUNC_NAME
                            | non_unary_input_function
                            ;

           print_expr_list_opt : /* empty */
                            | print_expr_list
                            ;

           print_expr_list  : print_expr
                            | print_expr_list ',' newline_opt print_expr
                            ;

           print_expr       : unary_print_expr
                            | non_unary_print_expr
                            ;

           unary_print_expr : '+' print_expr
                            | '−' print_expr
                            | unary_print_expr '^'      print_expr
                            | unary_print_expr '*'      print_expr
                            | unary_print_expr '/'      print_expr
                            | unary_print_expr '%'      print_expr
                            | unary_print_expr '+'      print_expr
                            | unary_print_expr '−'      print_expr
                            | unary_print_expr          non_unary_print_expr
                            | unary_print_expr '~'      print_expr
                            | unary_print_expr NO_MATCH print_expr
                            | unary_print_expr In NAME
                            | unary_print_expr AND newline_opt print_expr
                            | unary_print_expr OR  newline_opt print_expr
                            | unary_print_expr '?' print_expr ':' print_expr
                            ;

           non_unary_print_expr : '(' expr ')'
                            | '!' print_expr
                            | non_unary_print_expr '^'      print_expr
                            | non_unary_print_expr '*'      print_expr
                            | non_unary_print_expr '/'      print_expr
                            | non_unary_print_expr '%'      print_expr
                            | non_unary_print_expr '+'      print_expr
                            | non_unary_print_expr '−'      print_expr
                            | non_unary_print_expr          non_unary_print_expr
                            | non_unary_print_expr '~'      print_expr
                            | non_unary_print_expr NO_MATCH print_expr
                            | non_unary_print_expr In NAME
                            | '(' multiple_expr_list ')' In NAME
                            | non_unary_print_expr AND newline_opt print_expr
                            | non_unary_print_expr OR  newline_opt print_expr
                            | non_unary_print_expr '?' print_expr ':' print_expr
                            | NUMBER
                            | STRING
                            | lvalue
                            | ERE
                            | lvalue INCR
                            | lvalue DECR
                            | INCR lvalue
                            | DECR lvalue
                            | lvalue POW_ASSIGN print_expr
                            | lvalue MOD_ASSIGN print_expr
                            | lvalue MUL_ASSIGN print_expr
                            | lvalue DIV_ASSIGN print_expr
                            | lvalue ADD_ASSIGN print_expr
                            | lvalue SUB_ASSIGN print_expr
                            | lvalue '=' print_expr
                            | FUNC_NAME '(' expr_list_opt ')'
                                /* no white space allowed before '(' */
                            | BUILTIN_FUNC_NAME '(' expr_list_opt ')'
                            | BUILTIN_FUNC_NAME
                            ;

           lvalue           : NAME
                            | NAME '[' expr_list ']'
                            | '$' expr
                            ;

           non_unary_input_function : simple_get
                            | simple_get '&amp;lt;' expr
                            | non_unary_expr '|' simple_get
                            ;

           unary_input_function : unary_expr '|' simple_get
                            ;

           simple_get       : GETLINE
                            | GETLINE lvalue
                            ;

           newline_opt      : /* empty */
                            | newline_opt NEWLINE
                            ;

       This grammar has several ambiguities that shall be resolved as follows:

        *  Operator  precedence  and  associativity  shall be as described in Table 4-1, Expressions in Decreasing Precedence in
           awk.

        *  In case of ambiguity, an else shall be associated with the most immediately preceding if that would satisfy the gram‐
           mar.

        *  In some contexts, a &amp;lt;slash&amp;gt; ('/') that is used to surround an ERE could also be the division operator.  This shall be
           resolved in such a way that wherever the division operator could appear, a &amp;lt;slash&amp;gt; is  assumed  to  be  the  division
           operator. (There is no unary division operator.)

       Each  expression  in an awk program shall conform to the precedence and associativity rules, even when this is not needed
       to resolve an ambiguity. For example, because '$' has higher precedence than '++', the string "$x++−−" is not a valid awk
       expression, even though it is unambiguously parsed by the grammar as "$(x++)−−".

       One  convention that might not be obvious from the formal grammar is where &amp;lt;newline&amp;gt; characters are acceptable. There are
       several obvious placements such as terminating a statement, and a &amp;lt;backslash&amp;gt; can be used to escape &amp;lt;newline&amp;gt;  characters
       between  any lexical tokens. In addition, &amp;lt;newline&amp;gt; characters without &amp;lt;backslash&amp;gt; characters can follow a comma, an open
       brace, logical AND operator ("&amp;&amp;"), logical OR operator ("||"), the do keyword, the else keyword, and the closing  paren‐
       thesis of an if, for, or while statement. For example:

           { print  $1,
                    $2 }

   Lexical Conventions
       The lexical conventions for awk programs, with respect to the preceding grammar, shall be as follows:

        1. Except as noted, awk shall recognize the longest possible token or delimiter beginning at a given point.

        2. A comment shall consist of any characters beginning with the &amp;lt;number-sign&amp;gt; character and terminated by, but excluding
           the next occurrence of, a &amp;lt;newline&amp;gt;.  Comments shall have no effect, except to delimit lexical tokens.

        3. The &amp;lt;newline&amp;gt; shall be recognized as the token NEWLINE.

        4. A &amp;lt;backslash&amp;gt; character immediately followed by a &amp;lt;newline&amp;gt; shall have no effect.

        5. The token STRING shall represent a string constant. A string constant shall begin with the character '"'.   Within  a
           string constant, a &amp;lt;backslash&amp;gt; character shall be considered to begin an escape sequence as specified in the table in
           the Base Definitions volume of POSIX.1‐2008, Chapter 5, File Format Notation ('\\', '\a',  '\b',  '\f',  '\n',  '\r',
           '\t',  '\v').   In  addition, the escape sequences in Table 4-2, Escape Sequences in awk shall be recognized. A &amp;lt;new‐
           line&amp;gt; shall not occur within a string constant. A string constant shall be terminated by the first  unescaped  occur‐
           rence  of  the  character  '"'  after  the  one that begins the string constant. The value of the string shall be the
           sequence of all unescaped characters and values of escape sequences between, but not including,  the  two  delimiting
           '"' characters.

        6. The  token ERE represents an extended regular expression constant. An ERE constant shall begin with the &amp;lt;slash&amp;gt; char‐
           acter. Within an ERE constant, a &amp;lt;backslash&amp;gt; character shall be considered to begin an escape sequence  as  specified
           in  the  table  in  the  Base  Definitions volume of POSIX.1‐2008, Chapter 5, File Format Notation.  In addition, the
           escape sequences in Table 4-2, Escape Sequences in awk shall be recognized. The application shall ensure that a &amp;lt;new‐
           line&amp;gt; does not occur within an ERE constant. An ERE constant shall be terminated by the first unescaped occurrence of
           the &amp;lt;slash&amp;gt; character after the one that begins the ERE constant. The extended regular expression represented by  the
           ERE  constant  shall  be  the  sequence  of  all unescaped characters and values of escape sequences between, but not
           including, the two delimiting &amp;lt;slash&amp;gt; characters.

        7. A &amp;lt;blank&amp;gt; shall have no effect, except to delimit lexical tokens or within STRING or ERE tokens.

        8. The token NUMBER shall represent a numeric constant. Its form and numeric value shall either  be  equivalent  to  the
           decimal-floating-constant  token  as specified by the ISO C standard, or it shall be a sequence of decimal digits and
           shall be evaluated as an integer constant in decimal. In addition, implementations may accept numeric constants  with
           the  form and numeric value equivalent to the hexadecimal-constant and hexadecimal-floating-constant tokens as speci‐
           fied by the ISO C standard.

           If the value is too large or too small to be representable (see Section 1.1.2, Concepts Derived from the ISO C  Stan‐
           dard), the behavior is undefined.

        9. A  sequence  of underscores, digits, and alphabetics from the portable character set (see the Base Definitions volume
           of POSIX.1‐2008, Section 6.1, Portable Character Set), beginning with an &amp;lt;underscore&amp;gt; or alphabetic character,  shall
           be considered a word.

       10. The  following words are keywords that shall be recognized as individual tokens; the name of the token is the same as
           the keyword:

           BEGIN      delete     END        function   in         printf
           break      do         exit       getline    next       return
           continue   else       for        if         print      while

       11. The following words are names of built-in functions and shall be recognized as the token BUILTIN_FUNC_NAME:

           atan2     gsub      log       split     sub       toupper
           close     index     match     sprintf   substr
           cos       int       rand      sqrt      system
           exp       length    sin       srand     tolower

           The above-listed keywords and names of built-in functions are considered reserved words.

       12. The token NAME shall consist of a word that is not a keyword or a name of a built-in function  and  is  not  followed
           immediately (without any delimiters) by the '(' character.

       13. The  token FUNC_NAME shall consist of a word that is not a keyword or a name of a built-in function, followed immedi‐
           ately (without any delimiters) by the '(' character. The '(' character shall not be included as part of the token.

       14. The following two-character sequences shall be recognized as the named tokens:

                                              ┌───────────┬──────────┬────────────┬──────────┐
                                              │Token Name │ Sequence │ Token Name │ Sequence │
                                              ├───────────┼──────────┼────────────┼──────────┤
                                              │ADD_ASSIGN │    +=    │ NO_MATCH   │    !~    │
                                              │SUB_ASSIGN │    −=    │ EQ         │    ==    │
                                              │MUL_ASSIGN │    *=    │ LE         │    &amp;lt;=    │
                                              │DIV_ASSIGN │    /=    │ GE         │    &amp;gt;=    │
                                              │MOD_ASSIGN │    %=    │ NE         │    !=    │
                                              │POW_ASSIGN │    ^=    │ INCR       │    ++    │
                                              │OR         │    ||    │ DECR       │    −−    │
                                              │AND        │    &amp;&amp;    │ APPEND     │    &amp;gt;&amp;gt;    │
                                              └───────────┴──────────┴────────────┴──────────┘
       15. The following single characters shall be recognized as tokens whose names are the character:

               &amp;lt;newline&amp;gt; { } ( ) [ ] , ; + − * % ^ ! &amp;gt; &amp;lt; | ? :  " "  $ =

       There is a lexical ambiguity between the token ERE and the tokens '/' and DIV_ASSIGN.  When an input sequence begins with
       a  &amp;lt;slash&amp;gt; character in any syntactic context where the token '/' or DIV_ASSIGN could appear as the next token in a valid
       program, the longer of those two tokens that can be recognized shall be recognized. In any other syntactic context  where
       the token ERE could appear as the next token in a valid program, the token ERE shall be recognized.

<!-- a42f9355-e63b-4205-ac0b-0b19b24faf9d <=< ACCEPT -->EXIT STATUS
       The following exit values shall be returned:

        0    All input files were processed successfully.

       &amp;gt;0    An error occurred.<!-- ACCEPT >=> a42f9355-e63b-4205-ac0b-0b19b24faf9d -->

       The exit status can be altered within the program by using an exit expression.

CONSEQUENCES OF ERRORS
       If  any file operand is specified and the named file cannot be accessed, awk shall write a diagnostic message to standard
       error and terminate without any further action.

       If the program specified by either the program operand or a progfile operand is not a valid awk program (as specified  in
       the EXTENDED DESCRIPTION section), the behavior is undefined.

       The following sections are informative.

APPLICATION USAGE
       The  index,  length, match, and substr functions should not be confused with similar functions in the ISO C standard; the
       awk versions deal with characters, while the ISO C standard deals with bytes.

       Because the concatenation operation is represented by adjacent expressions rather than an explicit operator, it is  often
       necessary to use parentheses to enforce the proper evaluation precedence.

EXAMPLES
       The  awk program specified in the command line is most easily specified within single-quotes (for example, 'program') for
       applications using sh, because awk programs commonly contain characters that are special to the shell, including  double-
       quotes.  In the cases where an awk program contains single-quote characters, it is usually easiest to specify most of the
       program as strings within single-quotes concatenated by the shell with quoted single-quote characters. For example:

           awk '/'\''/ { print "quote:", $0 }'

       prints all lines from the standard input containing a single-quote character, prefixed with quote:.

       The following are examples of simple awk programs:

        1. Write to the standard output all input lines for which field 3 is greater than 5:

               $3 &amp;gt; 5

        2. Write every tenth line:

               (NR % 10) == 0

        3. Write any line with a substring matching the regular expression:

               /(G|D)(2[0−9][[:alpha:]]*)/

        4. Print any line with a substring containing a 'G' or 'D', followed by a sequence of digits and characters. This  exam‐
           ple  uses  character  classes  digit  and alpha to match language-independent digit and alphabetic characters respec‐
           tively:

               /(G|D)([[:digit:][:alpha:]]*)/

        5. Write any line in which the second field matches the regular expression and the fourth field does not:

               $2  " "  /xyz/ &amp;&amp; $4 ! " "  /xyz/

        6. Write any line in which the second field contains a &amp;lt;backslash&amp;gt;:

               $2  " "  /\\/

        7. Write any line in which the second field contains a  &amp;lt;backslash&amp;gt;.   Note  that  &amp;lt;backslash&amp;gt;-escapes  are  interpreted
           twice; once in lexical processing of the string and once in processing the regular expression:

               $2  " "  "\\\\"

        8. Write the second to the last and the last field in each line. Separate the fields by a &amp;lt;colon&amp;gt;:

               {OFS=":";print $(NF−1), $NF}

        9. Write the line number and number of fields in each line. The three strings representing the line number, the &amp;lt;colon&amp;gt;,
           and the number of fields are concatenated and that string is written to standard output:

               {print NR ":" NF}

       10. Write lines longer than 72 characters:

               length($0) &amp;gt; 72

       11. Write the first two fields in opposite order separated by OFS:

               { print $2, $1 }

       12. Same, with input fields separated by a &amp;lt;comma&amp;gt; or &amp;lt;space&amp;gt; and &amp;lt;tab&amp;gt; characters, or both:

               BEGIN { FS = ",[ \t]*|[ \t]+" }
                     { print $2, $1 }

       13. Add up the first column, print sum, and average:

                     {s += $1 }
               END   {print "sum is ", s, " average is", s/NR}

       14. Write fields in reverse order, one per line (many lines out for each line in):

               { for (i = NF; i &amp;gt; 0; −−i) print $i }

       15. Write all lines between occurrences of the strings start and stop:

               /start/, /stop/

       16. Write all lines whose first field is different from the previous one:

               $1 != prev { print; prev = $1 }

       17. Simulate echo:

               BEGIN  {
                       for (i = 1; i &amp;lt; ARGC; ++i)
                       printf("%s%s", ARGV[i], i==ARGC−1?"\n":" ")
               }

       18. Write the path prefixes contained in the PATH environment variable, one per line:

               BEGIN  {
                       n = split (ENVIRON["PATH"], path, ":")
                       for (i = 1; i &amp;lt;= n; ++i)
                       print path[i]
               }

       19. If there is a file named input containing page headers of the form: Page #

           and a file named program that contains:

               /Page/   { $2 = n++; }
                        { print }

           then the command line:

               awk −f program n=5 input

           prints the file input, filling in page numbers starting at 5.

RATIONALE
       This description is based on the new awk, ``nawk'', (see the referenced The AWK Programming Language), which introduced a
       number of new features to the historical awk:

        1. New keywords: delete, do, function, return

        2. New built-in functions: atan2, close, cos, gsub, match, rand, sin, srand, sub, system

        3. New predefined variables: FNR, ARGC, ARGV, RSTART, RLENGTH, SUBSEP

        4. New expression operators: ?, :, ,, ^

        5. The FS variable and the third argument to split, now treated as extended regular expressions.

        6. The operator precedence, changed to more closely match the C language.  Two examples of code that operate differently
           are:

               while ( n /= 10 &amp;gt; 1) ...
               if (!"wk" ~ /bwk/) ...

       Several features have been added based on newer implementations of awk:

        *  Multiple instances of −f progfile are permitted.

        *  The new option −v assignment.

        *  The new predefined variable ENVIRON.

        *  New built-in functions toupper and tolower.

        *  More formatting capabilities are added to printf to match the ISO C standard.

       The overall awk syntax has always been based on the C language, with a few features from the shell command  language  and
       other  sources.  Because of this, it is not completely compatible with any other language, which has caused confusion for
       some users. It is not the intent of the standard developers to address such issues. A few relatively minor changes toward
       making the language more compatible with the ISO C standard were made; most of these changes are based on similar changes
       in recent implementations, as described above. There remain several C-language conventions that are not in awk.   One  of
       the  notable  ones  is the &amp;lt;comma&amp;gt; operator, which is commonly used to specify multiple expressions in the C language for
       statement. Also, there are various places where awk is more restrictive than the C language regarding the type of expres‐
       sion  that can be used in a given context. These limitations are due to the different features that the awk language does
       provide.

       Regular expressions in awk have been extended somewhat from historical implementations to make them a  pure  superset  of
       extended  regular  expressions, as defined by POSIX.1‐2008 (see the Base Definitions volume of POSIX.1‐2008, Section 9.4,
       Extended Regular Expressions).  The main extensions are internationalization features and interval expressions.  Histori‐
       cal  implementations  of awk have long supported &amp;lt;backslash&amp;gt;-escape sequences as an extension to extended regular expres‐
       sions, and this extension has been retained despite inconsistency with other utilities. The number  of  escape  sequences
       recognized in both extended regular expressions and strings has varied (generally increasing with time) among implementa‐
       tions. The set specified by POSIX.1‐2008 includes most sequences known to be supported by popular implementations and  by
       the  ISO C  standard.  One  sequence  that is not supported is hexadecimal value escapes beginning with '\x'.  This would
       allow values expressed in more than 9 bits to be used within awk as in the ISO C standard. However, because  this  syntax
       has  a  non-deterministic  length, it does not permit the subsequent character to be a hexadecimal digit. This limitation
       can be dealt with in the C language by the use of lexical string concatenation. In the awk language, concatenation  could
       also  be  a  solution  for  strings,  but not for extended regular expressions (either lexical ERE tokens or strings used
       dynamically as regular expressions). Because of this limitation, the feature has not been added to POSIX.1‐2008.

       When a string variable is used in a context where an extended regular expression  normally  appears  (where  the  lexical
       token ERE is used in the grammar) the string does not contain the literal &amp;lt;slash&amp;gt; characters.

       Some versions of awk allow the form:

           func name(args, ... ) { statements }

       This has been deprecated by the authors of the language, who asked that it not be specified.

       Historical  implementations  of  awk produce an error if a next statement is executed in a BEGIN action, and cause awk to
       terminate if a next statement is executed in an END action. This behavior  has  not  been  documented,  and  it  was  not
       believed that it was necessary to standardize it.

       The  specification  of  conversions  between string and numeric values is much more detailed than in the documentation of
       historical implementations or in the referenced The AWK Programming Language. Although most of the behavior  is  designed
       to  be  intuitive,  the details are necessary to ensure compatible behavior from different implementations. This is espe‐
       cially important in relational expressions since the types of the operands determine whether a string or numeric compari‐
       son is performed. From the perspective of an application developer, it is usually sufficient to expect intuitive behavior
       and to force conversions (by adding zero or concatenating a null string) when the type of an expression  does  not  obvi‐
       ously  match what is needed. The intent has been to specify historical practice in almost all cases. The one exception is
       that, in historical implementations, variables and constants maintain both string and numeric values after their original
       value  is  converted by any use. This means that referencing a variable or constant can have unexpected side-effects. For
       example, with historical implementations the following program:

           {
               a = "+2"
               b = 2
               if (NR % 2)
                   c = a + b
               if (a == b)
                   print "numeric comparison"
               else
                   print "string comparison"
           }

       would perform a numeric comparison (and output numeric comparison) for each odd-numbered line, but perform a string  com‐
       parison (and output string comparison) for each even-numbered line. POSIX.1‐2008 ensures that comparisons will be numeric
       if necessary. With historical implementations, the following program:

           BEGIN {
               OFMT = "%e"
               print 3.14
               OFMT = "%f"
               print 3.14
           }

       would output "3.140000e+00" twice, because in the second print statement the constant "3.14" would have  a  string  value
       from  the  previous  conversion.  POSIX.1‐2008 requires that the output of the second print statement be "3.140000".  The
       behavior of historical implementations was seen as too unintuitive and unpredictable.

       It was pointed out that with the rules contained in early drafts, the following script would print nothing:

           BEGIN {
               y[1.5] = 1
               OFMT = "%e"
               print y[1.5]
           }

       Therefore, a new variable, CONVFMT, was introduced. The OFMT variable is now restricted to affecting  output  conversions
       of  numbers  to  strings and CONVFMT is used for internal conversions, such as comparisons or array indexing. The default
       value is the same as that for OFMT, so unless a program changes CONVFMT (which no historical program would do),  it  will
       receive the historical behavior associated with internal string conversions.

       The  POSIX  awk lexical and syntactic conventions are specified more formally than in other sources. Again the intent has
       been to specify historical practice. One convention that may not be obvious from the formal grammar as  in  other  verbal
       descriptions  is  where  &amp;lt;newline&amp;gt;  characters are acceptable. There are several obvious placements such as terminating a
       statement, and a &amp;lt;backslash&amp;gt; can be used to escape &amp;lt;newline&amp;gt; characters between any lexical tokens.  In  addition,  &amp;lt;new‐
       line&amp;gt; characters without &amp;lt;backslash&amp;gt; characters can follow a comma, an open brace, a logical AND operator ("&amp;&amp;"), a logi‐
       cal OR operator ("||"), the do keyword, the else keyword, and the closing parenthesis of an if, for, or while  statement.
       For example:

           { print $1,
                   $2 }

       The  requirement  that  awk  add  a trailing &amp;lt;newline&amp;gt; to the program argument text is to simplify the grammar, making it
       match a text file in form. There is no way for an application or test suite to determine whether a literal  &amp;lt;newline&amp;gt;  is
       added or whether awk simply acts as if it did.

       POSIX.1‐2008  requires several changes from historical implementations in order to support internationalization. Probably
       the most subtle of these is the use of the decimal-point character, defined by the LC_NUMERIC category of the locale,  in
       representations  of floating-point numbers.  This locale-specific character is used in recognizing numeric input, in con‐
       verting between strings and numeric values, and in formatting output. However, regardless of locale, the &amp;lt;period&amp;gt; charac‐
       ter  (the  decimal-point  character of the POSIX locale) is the decimal-point character recognized in processing awk pro‐
       grams (including assignments in command line arguments). This is essentially the same convention as the one used  in  the
       ISO C  standard. The difference is that the C language includes the setlocale() function, which permits an application to
       modify its locale. Because of this capability, a C application begins executing with its locale set to the C locale,  and
       only  executes in the environment-specified locale after an explicit call to setlocale().  However, adding such an elabo‐
       rate new feature to the awk language was seen as inappropriate for POSIX.1‐2008. It is possible to execute an awk program
       explicitly in any desired locale by setting the environment in the shell.

       The undefined behavior resulting from NULs in extended regular expressions allows future extensions for the GNU gawk pro‐
       gram to process binary data.

       The behavior in the case of invalid awk programs (including lexical, syntactic, and semantic errors) is undefined because
       it  was  considered overly limiting on implementations to specify. In most cases such errors can be expected to produce a
       diagnostic and a non-zero exit status. However, some implementations may choose to extend the language in ways that  make
       use of certain invalid constructs. Other invalid constructs might be deemed worthy of a warning, but otherwise cause some
       reasonable behavior. Still other constructs may be very difficult to detect in  some  implementations.   Also,  different
       implementations  might  detect  a  given  error during an initial parsing of the program (before reading any input files)
       while others might detect it when executing the program after reading some input. Implementors should be aware that diag‐
       nosing  errors as early as possible and producing useful diagnostics can ease debugging of applications, and thus make an
       implementation more usable.

       The unspecified behavior from using multi-character RS values is to allow possible future extensions  based  on  extended
       regular  expressions  used  for  record separators. Historical implementations take the first character of the string and
       ignore the others.

       Unspecified behavior when split(string,array,&amp;lt;null&amp;gt;) is used is to allow a proposed future extension that would split  up
       a string into an array of individual characters.

       In  the context of the getline function, equally good arguments for different precedences of the | and &amp;lt; operators can be
       made. Historical practice has been that:

           getline &amp;lt; "a" "b"

       is parsed as:

           ( getline &amp;lt; "a" ) "b"

       although many would argue that the intent was that the file ab should be read. However:

           getline &amp;lt; "x" + 1

       parses as:

           getline &amp;lt; ( "x" + 1 )

       Similar problems occur with the | version of getline, particularly in combination with $.  For example:

           $"echo hi" | getline

       (This situation is particularly problematic when used in a print statement, where the |getline part might be a  redirect‐
       ion of the print.)

       Since  in  most cases such constructs are not (or at least should not) be used (because they have a natural ambiguity for
       which there is no conventional parsing), the meaning of these constructs  has  been  made  explicitly  unspecified.  (The
       effect  is  that  a conforming application that runs into the problem must parenthesize to resolve the ambiguity.)  There
       appeared to be few if any actual uses of such constructs.

       Grammars can be written that would cause an error under these circumstances. Where backwards-compatibility is not a large
       consideration, implementors may wish to use such grammars.

       Some  historical  implementations  have allowed some built-in functions to be called without an argument list, the result
       being a default argument list chosen in some ``reasonable'' way. Use of length as a synonym for length($0)  is  the  only
       one  of  these  forms  that  is  thought to be widely known or widely used; this particular form is documented in various
       places (for example, most historical awk reference pages, although not in the referenced The AWK Programming Language) as
       legitimate  practice.  With this exception, default argument lists have always been undocumented and vaguely defined, and
       it is not at all clear how (or if) they should be generalized to user-defined functions. They add no useful functionality
       and  preclude  possible  future extensions that might need to name functions without calling them. Not standardizing them
       seems the simplest course. The standard developers considered that length merited special treatment,  however,  since  it
       has  been  documented  in the past and sees possibly substantial use in historical programs.  Accordingly, this usage has
       been made legitimate, but Issue 5 removed the obsolescent marking for XSI-conforming implementations and  many  otherwise
       conforming applications depend on this feature.

       In  sub  and  gsub,  if  repl is a string literal (the lexical token STRING), then two consecutive &amp;lt;backslash&amp;gt; characters
       should be used in the string to ensure a single &amp;lt;backslash&amp;gt; will precede the &amp;lt;ampersand&amp;gt; when  the  resultant  string  is
       passed  to  the  function.  (For  example,  to  specify  one literal &amp;lt;ampersand&amp;gt; in the replacement string, use gsub(ERE,
       "\\&amp;").)

       Historically, the only special character in the repl argument of sub and gsub string functions was the &amp;lt;ampersand&amp;gt;  ('&amp;')
       character and preceding it with the &amp;lt;backslash&amp;gt; character was used to turn off its special meaning.

       The description in the ISO POSIX‐2:1993 standard introduced behavior such that the &amp;lt;backslash&amp;gt; character was another spe‐
       cial character and it was unspecified whether there were any other special characters. This description  introduced  sev‐
       eral  portability  problems,  some  of  which  are  described below, and so it has been replaced with the more historical
       description. Some of the problems include:

        *  Historically, to create the replacement string, a script could use gsub(ERE, "\\&amp;"), but  with  the  ISO POSIX‐2:1993
           standard  wording,  it  was necessary to use gsub(ERE, "\\\\&amp;").  The &amp;lt;backslash&amp;gt; characters are doubled here because
           all string literals are subject to lexical analysis, which would reduce each pair of &amp;lt;backslash&amp;gt; characters to a sin‐
           gle &amp;lt;backslash&amp;gt; before being passed to gsub.

        *  Since  it  was  unspecified  what  the special characters were, for portable scripts to guarantee that characters are
           printed literally, each character had to be preceded with a &amp;lt;backslash&amp;gt;.  (For example, a portable script had to  use
           gsub(ERE, "\\h\\i") to produce a replacement string of "hi".)

       The description for comparisons in the ISO POSIX‐2:1993 standard did not properly describe historical practice because of
       the way numeric strings are compared as numbers. The current rules cause the following code:

           if (0 == "000")
               print "strange, but true"
           else
               print "not true"

       to do a numeric comparison, causing the if to succeed. It should be intuitively obvious that this is incorrect  behavior,
       and indeed, no historical implementation of awk actually behaves this way.

       To  fix  this  problem, the definition of numeric string was enhanced to include only those values obtained from specific
       circumstances (mostly external sources) where it is not possible to determine unambiguously whether the value is intended
       to be a string or a numeric.

       Variables  that are assigned to a numeric string shall also be treated as a numeric string. (For example, the notion of a
       numeric string can be propagated across assignments.) In comparisons, all variables having the uninitialized value are to
       be treated as a numeric operand evaluating to the numeric value zero.

       Uninitialized  variables  include all types of variables including scalars, array elements, and fields. The definition of
       an uninitialized value in Variables and Special Variables is necessary to describe  the  value  placed  on  uninitialized
       variables  and  on  fields  that  are valid (for example, &amp;lt; $NF) but have no characters in them and to describe how these
       variables are to be used in comparisons. A valid field, such as $1, that has no characters in it can be obtained from  an
       input  line of "\t\t" when FS='\t'.  Historically, the comparison ($1&amp;lt;10) was done numerically after evaluating $1 to the
       value zero.

       The phrase ``... also shall have the numeric value of the numeric string'' was  removed  from  several  sections  of  the
       ISO POSIX‐2:1993 standard because is specifies an unnecessary implementation detail. It is not necessary for POSIX.1‐2008
       to specify that these objects be assigned two different values.  It is only necessary to specify that these  objects  may
       evaluate to two different values depending on context.

       Historical implementations of awk did not parse hexadecimal integer or floating constants like "0xa" and "0xap0".  Due to
       an oversight, the 2001 through 2004 editions of this standard required support for hexadecimal floating  constants.  This
       was  due  to  the  reference  to atof().  This version of the standard allows but does not require implementations to use
       atof() and includes a description of how floating-point numbers are recognized as an alternative to match historic behav‐
       ior.  The intent of this change is to allow implementations to recognize floating-point constants according to either the
       ISO/IEC 9899:1990 standard or ISO/IEC 9899:1999 standard, and to allow (but not  require)  implementations  to  recognize
       hexadecimal integer constants.

       Historical implementations of awk did not support floating-point infinities and NaNs in numeric strings; e.g., "−INF" and
       "NaN".  However, implementations that use the atof() or strtod() functions to do the conversion  picked  up  support  for
       these  values  if  they used a ISO/IEC 9899:1999 standard version of the function instead of a ISO/IEC 9899:1990 standard
       version. Due to an oversight, the 2001 through 2004 editions of this standard did not allow support  for  infinities  and
       NaNs,  but  in  this  revision support is allowed (but not required). This is a silent change to the behavior of awk pro‐
       grams; for example, in the POSIX locale the expression:

           ("-INF" + 0 &amp;lt; 0)

       formerly had the value 0 because "−INF" converted to 0, but now it may have the value 0 or 1.

FUTURE DIRECTIONS
       None.

SEE ALSO
       Section 1.3, Grammar Conventions, grep, lex, sed

       The Base Definitions volume of POSIX.1‐2008, Chapter 5, File Format Notation, Section 6.1, Portable Character Set,  Chap‐
       ter 8, Environment Variables, Chapter 9, Regular Expressions, Section 12.2, Utility Syntax Guidelines

       The System Interfaces volume of POSIX.1‐2008, atof(), exec, isspace(), popen(), setlocale(), strtod()

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions  of  this  text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013 Edition, Standard for
       Information Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7,  Copy‐
       right  (C)  2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This is POSIX.1-2008
       with the 2013 Technical Corrigendum 1 applied.) In the event of any discrepancy between this  version  and  the  original
       IEEE  and  The  Open  Group Standard, the original IEEE and The Open Group Standard is the referee document. The original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any typographical or formatting errors that appear in this page are most likely to have been introduced during  the  con‐
       version  of  the source files to man page format. To report such errors, see https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                       AWK(1P)
BASENAME(1)                                               User Commands                                              BASENAME(1)

NAME
       basename - strip directory and suffix from filenames

SYNOPSIS
       basename NAME [SUFFIX]
       basename OPTION... NAME...

DESCRIPTION
       Print NAME with any leading directory components removed.  If specified, also remove a trailing SUFFIX.

       Mandatory arguments to long options are mandatory for short options too.

       -a, --multiple
              support multiple arguments and treat each as a NAME

       -s, --suffix=SUFFIX
              remove a trailing SUFFIX; implies -a

       -z, --zero
              end each output line with NUL, not newline

       --help display this help and exit

       --version
              output version information and exit

EXAMPLES
       basename /usr/bin/sort
              -&amp;gt; "sort"

       basename include/stdio.h .h
              -&amp;gt; "stdio"

       basename -s .h include/stdio.h
              -&amp;gt; "stdio"

       basename -a any/str1 any/str2
              -&amp;gt; "str1" followed by "str2"

AUTHOR
       Written by David MacKenzie.

<!-- 30b0cf8a-458a-435b-a2e0-993472636e53 <=< ACCEPT -->REPORTING BUGS
       GNU coreutils online help: &amp;lt;http://www.gnu.org/software/coreutils/&amp;gt;
       Report basename translation bugs to &amp;lt;http://translationproject.org/team/&amp;gt;

COPYRIGHT
       Copyright    ©    2016   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3   or   later
       &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.<!-- ACCEPT >=> 30b0cf8a-458a-435b-a2e0-993472636e53 -->

SEE ALSO
       dirname(1), readlink(1)

       Full documentation at: &amp;lt;http://www.gnu.org/software/coreutils/basename&amp;gt;
       or available locally via: info '(coreutils) basename invocation'

GNU coreutils 8.26                                        November 2016                                              BASENAME(1)
BATCH(1P)                                           POSIX Programmer's Manual                                          BATCH(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->

NAME
       batch — schedule commands to be executed in a batch queue

SYNOPSIS
       batch

DESCRIPTION
       The  batch  utility shall read commands from standard input and schedule them for execution in a batch queue. It shall be
       the equivalent of the command:

           at −q b −m now

       where queue b is a special at queue, specifically for batch jobs. Batch jobs shall be submitted to the batch  queue  with
       no  time  constraints  and  shall be run by the system using algorithms, based on unspecified factors, that may vary with
       each invocation of batch.

       Users shall be permitted to use batch if their name appears in the file at.allow which is located in  an  implementation-
       defined  directory.   If that file does not exist, the file at.deny, which is located in an implementation-defined direc‐
       tory, shall be checked to determine whether the user shall be denied access to batch.  If neither  file  exists,  only  a
       process  with  appropriate privileges shall be allowed to submit a job. If only at.deny exists and is empty, global usage
       shall be permitted. The at.allow and at.deny files shall consist of one user name per line.

OPTIONS
       None.

OPERANDS
       None.

STDIN
       The standard input shall be a text file consisting of commands acceptable to the  shell  command  language  described  in
       Chapter 2, Shell Command Language.

INPUT FILES
       The text files at.allow and at.deny, which are located in an implementation-defined directory, shall contain zero or more
       user names, one per line, of users who are, respectively, authorized or denied access to the at and batch utilities.

<!-- 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 <=< ACCEPT -->ENVIRONMENT VARIABLES
       The following environment variables shall affect the execution of batch:

       LANG      Provide a default value for the internationalization variables that are unset or null. (See  the  Base  Defini‐
                 tions  volume of POSIX.1‐2008, Section 8.2, Internationalization Variables for the precedence of international‐
                 ization variables used to determine the values of locale categories.)

       LC_ALL    If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_CTYPE  Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, sin‐
                 gle-byte as opposed to multi-byte characters in arguments and input files).

       LC_MESSAGES
                 Determine  the  locale  that should be used to affect the format and contents of diagnostic messages written to
                 standard error and informative messages written to standard output.

       LC_TIME   Determine the format and contents for date and time strings written by batch.

       NLSPATH   Determine the location of message catalogs for the processing of LC_MESSAGES.
<!-- ACCEPT >=> 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 -->
       SHELL     Determine the name of a command interpreter to be used to invoke the at-job. If the variable is unset or  null,
                 sh shall be used. If it is set to a value other than a name for sh, the implementation shall do one of the fol‐
                 lowing: use that shell; use sh; use the login shell from the user database; any of the preceding accompanied by
                 a warning diagnostic about which was chosen.

       TZ        Determine  the  timezone. The job shall be submitted for execution at the time specified by timespec or −t time
                 relative to the timezone specified by the TZ variable. If timespec specifies a timezone, it overrides  TZ.   If
                 timespec does not specify a timezone and TZ is unset or null, an unspecified default timezone shall be used.

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       When  standard  input is a terminal, prompts of unspecified format for each line of the user input described in the STDIN
       section may be written to standard output.

STDERR
       The following shall be written to standard error when a job has been successfully submitted:

           "job %s at %s\n", at_job_id, &amp;lt;date&amp;gt;

       where date shall be equivalent in format to the output of:

           date +"%a %b %e %T %Y"

       The date and time written shall be adjusted so that they appear in the timezone of the user  (as  determined  by  the  TZ
       variable).

       Neither  this, nor warning messages concerning the selection of the command interpreter, are considered a diagnostic that
       changes the exit status.

       Diagnostic messages, if any, shall be written to standard error.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       None.

<!-- a42f9355-e63b-4205-ac0b-0b19b24faf9d <=< ACCEPT -->EXIT STATUS
       The following exit values shall be returned:

        0    Successful completion.

       &amp;gt;0    An error occurred.<!-- ACCEPT >=> a42f9355-e63b-4205-ac0b-0b19b24faf9d -->

CONSEQUENCES OF ERRORS
       The job shall not be scheduled.

       The following sections are informative.

APPLICATION USAGE
       It may be useful to redirect standard output within the specified commands.

EXAMPLES
        1. This sequence can be used at a terminal:

               batch
               sort &amp;lt; file &amp;gt;outfile
               EOT

        2. This sequence, which demonstrates redirecting standard error to a  pipe,  is  useful  in  a  command  procedure  (the
           sequence of output redirection specifications is significant):

               batch &amp;lt;&amp;lt;!
               diff file1 file2 2&amp;gt;&amp;1 &amp;gt;outfile | mailx mygroup
               !

RATIONALE
       Early proposals described batch in a manner totally separated from at, even though the historical model treated it almost
       as a synonym for at −qb.  A number of features were added to list and control batch work separately  from  those  in  at.
       Upon further reflection, it was decided that the benefit of this did not merit the change to the historical interface.

       The  −m option was included on the equivalent at command because it is historical practice to mail results to the submit‐
       ter, even if all job-produced output is redirected. As explained in the RATIONALE for at, the now keyword submits the job
       for  immediate  execution (after scheduling delays), despite some historical systems where at now would have been consid‐
       ered an error.

FUTURE DIRECTIONS
       None.

SEE ALSO
       at

       The Base Definitions volume of POSIX.1‐2008, Chapter 8, Environment Variables

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013  Edition,  Standard  for
       Information  Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7, Copy‐
       right (C) 2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This  is  POSIX.1-2008
       with  the  2013  Technical  Corrigendum 1 applied.) In the event of any discrepancy between this version and the original
       IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the  referee  document.  The  original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any  typographical  or formatting errors that appear in this page are most likely to have been introduced during the con‐
       version of the source files to man page format. To report such errors,  see  https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                     BATCH(1P)
bc(1)                                                General Commands Manual                                               bc(1)

NAME
       bc - An arbitrary precision calculator language

SYNTAX
       bc [ -hlwsqv ] [long-options] [  file ... ]

DESCRIPTION
       bc is a language that supports arbitrary precision numbers with interactive execution of statements.  There are some sim‐
       ilarities in the syntax to the C programming language.  A standard math library is available by command line option.   If
       requested,  the  math  library  is  defined before processing any files.  bc starts by processing code from all the files
       listed on the command line in the order listed.  After all files have been processed, bc reads from the  standard  input.
       All  code  is  executed  as it is read.  (If a file contains a command to halt the processor, bc will never read from the
       standard input.)

       This version of bc contains several extensions beyond traditional bc implementations and the POSIX draft standard.   Com‐
       mand  line options can cause these extensions to print a warning or to be rejected.  This document describes the language
       accepted by this processor.  Extensions will be identified as such.

   OPTIONS
       -h, --help
              Print the usage and exit.

       -i, --interactive
              Force interactive mode.

       -l, --mathlib
              Define the standard math library.

       -w, --warn
              Give warnings for extensions to POSIX bc.

       -s, --standard
              Process exactly the POSIX bc language.

       -q, --quiet
              Do not print the normal GNU bc welcome.

       -v, --version
              Print the version number and copyright and quit.

   NUMBERS
       The most basic element in bc is the number.  Numbers are arbitrary precision numbers.  This  precision  is  both  in  the
       integer  part  and the fractional part.  All numbers are represented internally in decimal and all computation is done in
       decimal.  (This version truncates results from divide and multiply operations.)  There are two attributes of numbers, the
       length  and  the  scale.   The  length is the total number of significant decimal digits in a number and the scale is the
       total number of decimal digits after the decimal point.  For example:
               .000001 has a length of 6 and scale of 6.
               1935.000 has a length of 7 and a scale of 3.

   VARIABLES
       Numbers are stored in two types of variables, simple variables and arrays.  Both simple variables and array variables are
       named.   Names  begin with a letter followed by any number of letters, digits and underscores.  All letters must be lower
       case.  (Full alpha-numeric names are an extension. In POSIX bc all names are a single lower case letter.)   The  type  of
       variable is clear by the context because all array variable names will be followed by brackets ([]).

       There  are four special variables, scale, ibase, obase, and last.  scale defines how some operations use digits after the
       decimal point.  The default value of scale is 0. ibase and obase define the conversion base for input and output numbers.
       The  default  for  both  input  and  output is base 10.  last (an extension) is a variable that has the value of the last
       printed number.  These will be discussed in further detail where appropriate.  All of these  variables  may  have  values
       assigned to them as well as used in expressions.

   COMMENTS
       Comments  in bc start with the characters /* and end with the characters */.  Comments may start anywhere and appear as a
       single space in the input.  (This causes comments to delimit other input items.  For example, a comment can not be  found
       in the middle of a variable name.)  Comments include any newlines (end of line) between the start and the end of the com‐
       ment.

       To support the use of scripts for bc, a single line comment has been added as an extension.  A single line comment starts
       at  a # character and continues to the next end of the line.  The end of line character is not part of the comment and is
       processed normally.

   EXPRESSIONS
       The numbers are manipulated by expressions and statements.  Since the language was designed to be interactive, statements
       and  expressions  are  executed  as  soon  as  possible.  There is no "main" program.  Instead, code is executed as it is
       encountered.  (Functions, discussed in detail later, are defined when encountered.)

       A simple expression is just a constant. bc converts constants into internal decimal numbers using the current input base,
       specified  by  the  variable  ibase.  (There  is an exception in functions.)  The legal values of ibase are 2 through 16.
       Assigning a value outside this range to ibase will result in a value of 2 or 16.  Input numbers may contain  the  charac‐
       ters  0-9  and  A-F.  (Note: They must be capitals.  Lower case letters are variable names.)  Single digit numbers always
       have the value of the digit regardless of the value of ibase. (i.e. A = 10.)  For multi-digit  numbers,  bc  changes  all
       input  digits greater or equal to ibase to the value of ibase-1.  This makes the number FFF always be the largest 3 digit
       number of the input base.

       Full expressions are similar to many other high level languages.  Since there is only one kind of number,  there  are  no
       rules  for  mixing  types.  Instead, there are rules on the scale of expressions.  Every expression has a scale.  This is
       derived from the scale of original numbers, the operation performed and in many cases, the value of the  variable  scale.
       Legal values of the variable scale are 0 to the maximum number representable by a C integer.

       In  the  following descriptions of legal expressions, "expr" refers to a complete expression and "var" refers to a simple
       or an array variable.  A simple variable is just a
              name
       and an array variable is specified as
              name[expr]
       Unless specifically mentioned the scale of the result is the maximum scale of the expressions involved.

       - expr The result is the negation of the expression.

       ++ var The variable is incremented by one and the new value is the result of the expression.

       -- var The variable is decremented by one and the new value is the result of the expression.

       var ++
               The result of the expression is the value of the variable and then the variable is incremented by one.

       var -- The result of the expression is the value of the variable and then the variable is decremented by one.

       expr + expr
              The result of the expression is the sum of the two expressions.

       expr - expr
              The result of the expression is the difference of the two expressions.

       expr * expr
              The result of the expression is the product of the two expressions.

       expr / expr
              The result of the expression is the quotient of the two expressions.  The scale of the result is the value of  the
              variable scale.

       expr % expr
              The  result  of  the expression is the "remainder" and it is computed in the following way.  To compute a%b, first
              a/b is computed to scale digits.  That result is used to  compute  a-(a/b)*b  to  the  scale  of  the  maximum  of
              scale+scale(b)  and  scale(a).   If  scale is set to zero and both expressions are integers this expression is the
              integer remainder function.

       expr ^ expr
              The result of the expression is the value of the first raised to the second. The  second  expression  must  be  an
              integer.   (If  the second expression is not an integer, a warning is generated and the expression is truncated to
              get an integer value.)  The scale of the result is scale if the exponent is negative.  If the exponent is positive
              the  scale  of  the result is the minimum of the scale of the first expression times the value of the exponent and
              the maximum of scale and the scale of the first  expression.   (e.g.  scale(a^b)  =  min(scale(a)*b,  max(  scale,
              scale(a))).)  It should be noted that expr^0 will always return the value of 1.

       ( expr )
              This alters the standard precedence to force the evaluation of the expression.

       var = expr
              The variable is assigned the value of the expression.

       var &amp;lt;op&amp;gt;= expr
              This  is  equivalent to "var = var &amp;lt;op&amp;gt; expr" with the exception that the "var" part is evaluated only once.  This
              can make a difference if "var" is an array.

       Relational expressions are a special kind of expression that always evaluate to 0 or 1, 0 if the relation is false and  1
       if  the  relation is true.  These may appear in any legal expression.  (POSIX bc requires that relational expressions are
       used only in if, while, and for statements and that only one relational test may be done in them.)  The relational opera‐
       tors are

       expr1 &amp;lt; expr2
              The result is 1 if expr1 is strictly less than expr2.

       expr1 &amp;lt;= expr2
              The result is 1 if expr1 is less than or equal to expr2.

       expr1 &amp;gt; expr2
              The result is 1 if expr1 is strictly greater than expr2.

       expr1 &amp;gt;= expr2
              The result is 1 if expr1 is greater than or equal to expr2.

       expr1 == expr2
              The result is 1 if expr1 is equal to expr2.

       expr1 != expr2
              The result is 1 if expr1 is not equal to expr2.

       Boolean operations are also legal.  (POSIX bc does NOT have boolean operations). The result of all boolean operations are
       0 and 1 (for false and true) as in relational expressions.  The boolean operators are:

       !expr  The result is 1 if expr is 0.

       expr &amp;&amp; expr
              The result is 1 if both expressions are non-zero.

       expr || expr
              The result is 1 if either expression is non-zero.

       The expression precedence is as follows: (lowest to highest)
              || operator, left associative
              &amp;&amp; operator, left associative
              ! operator, nonassociative
              Relational operators, left associative
              Assignment operator, right associative
              + and - operators, left associative
              *, / and % operators, left associative
              ^ operator, right associative
              unary - operator, nonassociative
              ++ and -- operators, nonassociative

       This precedence was chosen so that POSIX compliant bc programs will run correctly. This will cause the use of  the  rela‐
       tional  and  logical operators to have some unusual behavior when used with assignment expressions.  Consider the expres‐
       sion:
              a = 3 &amp;lt; 5

       Most C programmers would assume this would assign the result of "3 &amp;lt; 5" (the value 1) to the  variable  "a".   What  this
       does  in  bc is assign the value 3 to the variable "a" and then compare 3 to 5.  It is best to use parenthesis when using
       relational and logical operators with the assignment operators.

       There are a few more special expressions that are provided in bc.  These have to do with user defined functions and stan‐
       dard  functions.   They  all appear as "name(parameters)".  See the section on functions for user defined functions.  The
       standard functions are:

       length ( expression )
              The value of the length function is the number of significant digits in the expression.

       read ( )
              The read function (an extension) will read a number from the standard input,  regardless  of  where  the  function
              occurs.   Beware, this can cause problems with the mixing of data and program in the standard input.  The best use
              for this function is in a previously written program that needs input from the user, but never allows program code
              to  be  input  from the user.  The value of the read function is the number read from the standard input using the
              current value of the variable ibase for the conversion base.

       scale ( expression )
              The value of the scale function is the number of digits after the decimal point in the expression.

       sqrt ( expression )
              The value of the sqrt function is the square root of the expression.  If the expression is negative,  a  run  time
              error is generated.

   STATEMENTS
       Statements  (as  in most algebraic languages) provide the sequencing of expression evaluation.  In bc statements are exe‐
       cuted "as soon as possible."  Execution happens when a newline in encountered and there is one or  more  complete  state‐
       ments.   Due  to this immediate execution, newlines are very important in bc. In fact, both a semicolon and a newline are
       used as statement separators.  An improperly placed newline will cause a syntax error.  Because  newlines  are  statement
       separators,  it  is possible to hide a newline by using the backslash character.  The sequence "\&amp;lt;nl&amp;gt;", where &amp;lt;nl&amp;gt; is the
       newline appears to bc as whitespace instead of a newline.  A statement list is a series of statements separated by  semi‐
       colons  and  newlines.   The following is a list of bc statements and what they do: (Things enclosed in brackets ([]) are
       optional parts of the statement.)

       expression
              This statement does one of two things.  If the expression starts with "&amp;lt;variable&amp;gt; &amp;lt;assignment&amp;gt; ...", it is consid‐
              ered to be an assignment statement.  If the expression is not an assignment statement, the expression is evaluated
              and printed to the output.  After the number is printed, a newline is printed.  For example, "a=1" is  an  assign‐
              ment  statement  and  "(a=1)"  is an expression that has an embedded assignment.  All numbers that are printed are
              printed in the base specified by the variable obase. The legal values for obase are 2 through  BC_BASE_MAX.   (See
              the section LIMITS.)  For bases 2 through 16, the usual method of writing numbers is used.  For bases greater than
              16, bc uses a multi-character digit method of printing the numbers where each higher base digit is  printed  as  a
              base 10 number.  The multi-character digits are separated by spaces.  Each digit contains the number of characters
              required to represent the base ten value of "obase-1".  Since numbers are of arbitrary precision, some numbers may
              not be printable on a single output line.  These long numbers will be split across lines using the "\" as the last
              character on a line.  The maximum number of characters printed per line is 70.  Due to the interactive  nature  of
              bc,  printing  a  number  causes the side effect of assigning the printed value to the special variable last. This
              allows the user to recover the last value printed without having to retype the expression that printed the number.
              Assigning  to last is legal and will overwrite the last printed value with the assigned value.  The newly assigned
              value will remain until the next number is printed or another value is assigned to last.  (Some installations  may
              allow the use of a single period (.) which is not part of a number as a short hand notation for for last.)

       string The string is printed to the output.  Strings start with a double quote character and contain all characters until
              the next double quote character.  All characters are take literally, including any newline.  No newline  character
              is printed after the string.

       print list
              The print statement (an extension) provides another method of output.  The "list" is a list of strings and expres‐
              sions separated by commas.  Each string or expression is printed in the order of the list.  No terminating newline
              is  printed.   Expressions  are evaluated and their value is printed and assigned to the variable last. Strings in
              the print statement are printed to the output and may contain special characters.  Special characters  start  with
              the  backslash  character  (\).  The special characters recognized by bc are "a" (alert or bell), "b" (backspace),
              "f" (form feed), "n" (newline), "r" (carriage return), "q" (double quote), "t" (tab), and  "\"  (backslash).   Any
              other character following the backslash will be ignored.

       { statement_list }
              This is the compound statement.  It allows multiple statements to be grouped together for execution.

       if ( expression ) statement1 [else statement2]
              The  if  statement  evaluates  the  expression and executes statement1 or statement2 depending on the value of the
              expression.  If the expression is non-zero, statement1 is executed.  If statement2 is present and the value of the
              expression is 0, then statement2 is executed.  (The else clause is an extension.)

       while ( expression ) statement
              The  while  statement  will  execute  the statement while the expression is non-zero.  It evaluates the expression
              before each execution of the statement.   Termination of the loop is caused by a zero expression value or the exe‐
              cution of a break statement.

       for ( [expression1] ; [expression2] ; [expression3] ) statement
              The  for  statement  controls  repeated  execution  of  the  statement.  Expression1 is evaluated before the loop.
              Expression2 is evaluated before each execution of the statement.  If it is non-zero, the statement  is  evaluated.
              If it is zero, the loop is terminated.  After each execution of the statement, expression3 is evaluated before the
              reevaluation of expression2.  If expression1 or expression3 are missing, nothing is evaluated at  the  point  they
              would  be evaluated.  If expression2 is missing, it is the same as substituting the value 1 for expression2.  (The
              optional expressions are an extension. POSIX bc requires all three expressions.)  The following is equivalent code
              for the for statement:
              expression1;
              while (expression2) {
                 statement;
                 expression3;
              }

       break  This statement causes a forced exit of the most recent enclosing while statement or for statement.

       continue
              The continue statement (an extension)  causes the most recent enclosing for statement to start the next iteration.

       halt   The  halt  statement  (an extension) is an executed statement that causes the bc processor to quit only when it is
              executed.  For example, "if (0 == 1) halt" will not cause bc to terminate because the halt is not executed.

       return Return the value 0 from a function.  (See the section on functions.)

       return ( expression )
              Return the value of the expression from a function.  (See the section on functions.)  As an extension, the  paren‐
              thesis are not required.

   PSEUDO STATEMENTS
       These  statements are not statements in the traditional sense.  They are not executed statements.  Their function is per‐
       formed at "compile" time.

       limits Print the local limits enforced by the local version of bc.  This is an extension.

       quit   When the quit statement is read, the bc processor is terminated, regardless of where the quit statement is  found.
              For example, "if (0 == 1) quit" will cause bc to terminate.

       warranty
              Print a longer warranty notice.  This is an extension.

   FUNCTIONS
       Functions  provide a method of defining a computation that can be executed later.  Functions in bc always compute a value
       and return it to the caller.  Function definitions are "dynamic" in the sense that a function is undefined until a  defi‐
       nition  is encountered in the input.  That definition is then used until another definition function for the same name is
       encountered.  The new definition then replaces the older definition.  A function is defined as follows:
              define name ( parameters ) { newline
                  auto_list   statement_list }
       A function call is just an expression of the form "name(parameters)".

       Parameters are numbers or arrays (an extension).  In the function definition, zero or  more  parameters  are  defined  by
       listing  their  names  separated  by  commas.   All parameters are call by value parameters.  Arrays are specified in the
       parameter definition by the notation "name[]".   In the function call, actual parameters are full expressions for  number
       parameters.  The same notation is used for passing arrays as for defining array parameters.  The named array is passed by
       value to the function.  Since function definitions are dynamic, parameter numbers and types are checked when  a  function
       is  called.   Any  mismatch in number or types of parameters will cause a runtime error.  A runtime error will also occur
       for the call to an undefined function.

       The auto_list is an optional list of variables that are for "local" use.  The syntax of the auto  list  (if  present)  is
       "auto name, ... ;".  (The semicolon is optional.)  Each name is the name of an auto variable.  Arrays may be specified by
       using the same notation as used in parameters.  These variables have their values pushed onto a stack at the start of the
       function.   The  variables  are  then initialized to zero and used throughout the execution of the function.  At function
       exit, these variables are popped so that the original value (at the time of the function call)  of  these  variables  are
       restored.   The parameters are really auto variables that are initialized to a value provided in the function call.  Auto
       variables are different than traditional local variables because if function A calls function B, B  may  access  function
       A's  auto  variables by just using the same name, unless function B has called them auto variables.  Due to the fact that
       auto variables and parameters are pushed onto a stack, bc supports recursive functions.

       The function body is a list of bc statements.  Again, statements are separated by semicolons or newlines.  Return  state‐
       ments  cause  the  termination  of a function and the return of a value.  There are two versions of the return statement.
       The first form, "return", returns the value 0 to the calling expression.  The second form, "return ( expression )",  com‐
       putes  the value of the expression and returns that value to the calling expression.  There is an implied "return (0)" at
       the end of every function.  This allows a function to terminate and return 0 without an explicit return statement.

       Functions also change the usage of the variable ibase.  All constants in the function body will be  converted  using  the
       value  of  ibase at the time of the function call.  Changes of ibase will be ignored during the execution of the function
       except for the standard function read, which will always use the current value of ibase for conversion of numbers.

       Several extensions have been added to functions.  First, the format of the definition has  been  slightly  relaxed.   The
       standard  requires  the  opening brace be on the same line as the define keyword and all other parts must be on following
       lines.  This version of bc will allow any number of newlines before and after the opening brace  of  the  function.   For
       example, the following definitions are legal.
              define d (n) { return (2*n); }
              define d (n)
                { return (2*n); }

       Functions  may  be  defined  as void.  A void funtion returns no value and thus may not be used in any place that needs a
       value.  A void function does not produce any output when called by itself on an input line.  The key word void is  placed
       between the key word define and the function name.  For example, consider the following session.
              define py (y) { print "---&amp;gt;", y, "&amp;lt;---", "0; }
              define void px (x) { print "---&amp;gt;", x, "&amp;lt;---", "0; }
              py(1)
              ---&amp;gt;1&amp;lt;---
              0
              px(1)
              ---&amp;gt;1&amp;lt;---
       Since  py  is  not a void function, the call of py(1) prints the desired output and then prints a second line that is the
       value of the function.  Since the value of a function that is not given an explicit return statement is zero, the zero is
       printed.  For px(1), no zero is printed because the function is a void function.

       Also, call by variable for arrays was added.  To declare a call by variable array, the declaration of the array parameter
       in the function definition looks like "*name[]".  The call to the function remains the same as call by value arrays.

   MATH LIBRARY
       If bc is invoked with the -l option, a math library is preloaded and the default scale is set to 20.   The math functions
       will  calculate  their  results to the scale set at the time of their call.  The math library defines the following func‐
       tions:

       s (x)  The sine of x, x is in radians.

       c (x)  The cosine of x, x is in radians.

       a (x)  The arctangent of x, arctangent returns radians.

       l (x)  The natural logarithm of x.

       e (x)  The exponential function of raising e to the value x.

       j (n,x)
              The Bessel function of integer order n of x.

   EXAMPLES
       In /bin/sh,  the following will assign the value of "pi" to the shell variable pi.
               pi=$(echo "scale=10; 4*a(1)" | bc -l)

       The following is the definition of the exponential function used in the math library.  This function is written in  POSIX
       bc.
              scale = 20

              /* Uses the fact that e^x = (e^(x/2))^2
                 When x is small enough, we use the series:
                   e^x = 1 + x + x^2/2! + x^3/3! + ...
              */

              define e(x) {
                auto  a, d, e, f, i, m, v, z

                /* Check the sign of x. */
                if (x&amp;lt;0) {
                  m = 1
                  x = -x
                }

                /* Precondition x. */
                z = scale;
                scale = 4 + z + .44*x;
                while (x &amp;gt; 1) {
                  f += 1;
                  x /= 2;
                }

                /* Initialize the variables. */
                v = 1+x
                a = x
                d = 1

                for (i=2; 1; i++) {
                  e = (a *= x) / (d *= i)
                  if (e == 0) {
                    if (f&amp;gt;0) while (f--)  v = v*v;
                    scale = z
                    if (m) return (1/v);
                    return (v/1);
                  }
                  v += e
                }
              }

       The  following is code that uses the extended features of bc to implement a simple program for calculating checkbook bal‐
       ances.  This program is best kept in a file so that it can be used many times without having to retype it at every use.
              scale=2
              print "\nCheck book program!\n"
              print "  Remember, deposits are negative transactions.\n"
              print "  Exit by a 0 transaction.\n\n"

              print "Initial balance? "; bal = read()
              bal /= 1
              print "\n"
              while (1) {
                "current balance = "; bal
                "transaction? "; trans = read()
                if (trans == 0) break;
                bal -= trans
                bal /= 1
              }
              quit

       The following is the definition of the recursive factorial function.
              define f (x) {
                if (x &amp;lt;= 1) return (1);
                return (f(x-1) * x);
              }

   READLINE AND LIBEDIT OPTIONS
       GNU bc can be compiled (via a configure option) to use the GNU readline input editor library or the BSD libedit  library.
       This  allows  the  user to do editing of lines before sending them to bc.  It also allows for a history of previous lines
       typed.  When this option is selected, bc has one more special variable.  This special variable, history is the number  of
       lines  of  history  retained.   For readline, a value of -1 means that an unlimited number of history lines are retained.
       Setting the value of history to a positive number restricts the number of history lines to the number given.   The  value
       of  0  disables  the  history feature.  The default value is 100. For more information, read the user manuals for the GNU
       readline, history and BSD libedit libraries.  One can not enable both readline and libedit at the same time.

   DIFFERENCES
       This version of bc was implemented from the POSIX P1003.2/D11 draft and contains several differences and extensions rela‐
       tive  to the draft and traditional implementations.  It is not implemented in the traditional way using dc(1).  This ver‐
       sion is a single process which parses and runs a byte code translation of the program.  There is an "undocumented" option
       (-c)  that  causes  the program to output the byte code to the standard output instead of running it.  It was mainly used
       for debugging the parser and preparing the math library.

       A major source of differences is extensions, where a feature is extended to add more functionality and  additions,  where
       new features are added.  The following is the list of differences and extensions.

       LANG environment
              This  version  does  not  conform to the POSIX standard in the processing of the LANG environment variable and all
              environment variables starting with LC_.

       names  Traditional and POSIX bc have single letter names for functions, variables and arrays.  They have been extended to
              be multi-character names that start with a letter and may contain letters, numbers and the underscore character.

       Strings
              Strings are not allowed to contain NUL characters.  POSIX says all characters must be included in strings.

       last   POSIX bc does not have a last variable.  Some implementations of bc use the period (.) in a similar way.

       comparisons
              POSIX  bc  allows  comparisons only in the if statement, the while statement, and the second expression of the for
              statement.  Also, only one relational operation is allowed in each of those statements.

       if statement, else clause
              POSIX bc does not have an else clause.

       for statement
              POSIX bc requires all expressions to be present in the for statement.

       &amp;&amp;, ||, !
              POSIX bc does not have the logical operators.

       read function
              POSIX bc does not have a read function.

       print statement
              POSIX bc does not have a print statement .

       continue statement
              POSIX bc does not have a continue statement.

       return statement
              POSIX bc requires parentheses around the return expression.

       array parameters
              POSIX bc does not (currently) support array parameters in full.  The POSIX grammar allows for arrays  in  function
              definitions,  but  does  not provide a method to specify an array as an actual parameter.  (This is most likely an
              oversight in the grammar.)  Traditional implementations of bc have only call by value array parameters.

       function format
              POSIX bc requires the opening brace on the same line as the define key word and the auto  statement  on  the  next
              line.

       =+, =-, =*, =/, =%, =^
              POSIX bc does not require these "old style" assignment operators to be defined.  This version may allow these "old
              style" assignments.  Use the limits statement to see if the installed version supports them.  If it  does  support
              the  "old  style"  assignment  operators, the statement "a =- 1" will decrement a by 1 instead of setting a to the
              value -1.

       spaces in numbers
              Other implementations of bc allow spaces in numbers.  For example, "x=1 3" would assign the value 13 to the  vari‐
              able x.  The same statement would cause a syntax error in this version of bc.

       errors and execution
              This implementation varies from other implementations in terms of what code will be executed when syntax and other
              errors are found in the program.  If a syntax error is found in a function definition,  error  recovery  tries  to
              find  the  beginning of a statement and continue to parse the function.  Once a syntax error is found in the func‐
              tion, the function will not be callable and becomes undefined.  Syntax errors in the  interactive  execution  code
              will  invalidate  the  current  execution block.  The execution block is terminated by an end of line that appears
              after a complete sequence of statements.  For example,
              a = 1
              b = 2
       has two execution blocks and
              { a = 1
                b = 2 }
       has one execution block.  Any runtime error will terminate the execution of the current execution block.  A runtime warn‐
       ing will not terminate the current execution block.

       Interrupts
              During  an interactive session, the SIGINT signal (usually generated by the control-C character from the terminal)
              will cause execution of the current execution block to be interrupted.  It will display a "runtime" error indicat‐
              ing  which function was interrupted.  After all runtime structures have been cleaned up, a message will be printed
              to notify the user that bc is ready for more input.  All previously defined functions remain defined and the value
              of  all non-auto variables are the value at the point of interruption.  All auto variables and function parameters
              are removed during the clean up process.  During a non-interactive session, the SIGINT signal will  terminate  the
              entire run of bc.

   LIMITS
       The  following are the limits currently in place for this bc processor.  Some of them may have been changed by an instal‐
       lation.  Use the limits statement to see the actual values.

       BC_BASE_MAX
              The maximum output base is currently set at 999.  The maximum input base is 16.

       BC_DIM_MAX
              This is currently an arbitrary limit of 65535 as distributed.  Your installation may be different.

       BC_SCALE_MAX
              The number of digits after the decimal point is limited to INT_MAX digits.  Also, the number of digits before  the
              decimal point is limited to INT_MAX digits.

       BC_STRING_MAX
              The limit on the number of characters in a string is INT_MAX characters.

       exponent
              The value of the exponent in the raise operation (^) is limited to LONG_MAX.

       variable names
              The current limit on the number of unique names is 32767 for each of simple variables, arrays and functions.

ENVIRONMENT VARIABLES
       The following environment variables are processed by bc:

       POSIXLY_CORRECT
              This is the same as the -s option.

       BC_ENV_ARGS
              This  is  another  mechanism to get arguments to bc.  The format is the same as the command line arguments.  These
              arguments are processed first, so any files listed in the environment arguments are processed before  any  command
              line argument files.  This allows the user to set up "standard" options and files to be processed at every invoca‐
              tion of bc.  The files in the environment variables would typically contain function definitions for functions the
              user wants defined every time bc is run.

       BC_LINE_LENGTH
              This  should  be  an  integer specifying the number of characters in an output line for numbers. This includes the
              backslash and newline characters for long numbers.  As an extension, the value of  zero  disables  the  multi-line
              feature.  Any other value of this variable that is less than 3 sets the line length to 70.

DIAGNOSTICS
       If  any  file  on  the  command line can not be opened, bc will report that the file is unavailable and terminate.  Also,
       there are compile and run time diagnostics that should be self-explanatory.

BUGS
       Error recovery is not very good yet.

       Email bug reports to bug-bc@gnu.org.  Be sure to include the word ``bc'' somewhere in the ``Subject:'' field.

AUTHOR
       Philip A. Nelson
       philnelson@acm.org

ACKNOWLEDGEMENTS
       The author would like to thank Steve Sommars (Steve.Sommars@att.com) for his extensive help in  testing  the  implementa‐
       tion.  Many great suggestions were given.  This is a much better product due to his involvement.

GNU Project                                                2006-06-11                                                      bc(1)
BG(1P)                                              POSIX Programmer's Manual                                             BG(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->

NAME
       bg — run jobs in the background

SYNOPSIS
       bg [job_id...]

DESCRIPTION
       If  job  control  is enabled (see the description of set −m), the bg utility shall resume suspended jobs from the current
       environment (see Section 2.12, Shell Execution Environment) by running them as background jobs. If the job  specified  by
       job_id is already a running background job, the bg utility shall have no effect and shall exit successfully.

       Using  bg  to place a job into the background shall cause its process ID to become ``known in the current shell execution
       environment'', as if it had been started as an asynchronous list; see Section 2.9.3.1, Examples.

OPTIONS
       None.

OPERANDS
       The following operand shall be supported:

       job_id    Specify the job to be resumed as a background job. If no job_id operand is given, the most  recently  suspended
                 job  shall  be  used. The format of job_id is described in the Base Definitions volume of POSIX.1‐2008, Section
                 3.204, Job Control Job ID.

STDIN
       Not used.

INPUT FILES
       None.

<!-- 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 <=< ACCEPT -->ENVIRONMENT VARIABLES
       The following environment variables shall affect the execution of bg:

       LANG      Provide a default value for the internationalization variables that are unset or null. (See  the  Base  Defini‐
                 tions  volume of POSIX.1‐2008, Section 8.2, Internationalization Variables for the precedence of international‐
                 ization variables used to determine the values of locale categories.)

       LC_ALL    If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_CTYPE  Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, sin‐
                 gle-byte as opposed to multi-byte characters in arguments).

       LC_MESSAGES
                 Determine  the  locale  that should be used to affect the format and contents of diagnostic messages written to
                 standard error.

       NLSPATH   Determine the location of message catalogs for the processing of LC_MESSAGES.<!-- ACCEPT >=> 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 -->

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       The output of bg shall consist of a line in the format:

           "[%d] %s\n", &amp;lt;job-number&amp;gt;, &amp;lt;command&amp;gt;

       where the fields are as follows:

       &amp;lt;job-number&amp;gt;
                 A number that can be used to identify the job to the wait, fg, and kill utilities. Using these  utilities,  the
                 job can be identified by prefixing the job number with '%'.

       &amp;lt;command&amp;gt; The associated command that was given to the shell.

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       None.

<!-- a42f9355-e63b-4205-ac0b-0b19b24faf9d <=< ACCEPT -->EXIT STATUS
       The following exit values shall be returned:

        0    Successful completion.

       &amp;gt;0    An error occurred.<!-- ACCEPT >=> a42f9355-e63b-4205-ac0b-0b19b24faf9d -->

CONSEQUENCES OF ERRORS
       If job control is disabled, the bg utility shall exit with an error and no job shall be placed in the background.

       The following sections are informative.

APPLICATION USAGE
       A  job is generally suspended by typing the SUSP character (&amp;lt;control&amp;gt;‐Z on most systems); see the Base Definitions volume
       of POSIX.1‐2008, Chapter 11, General Terminal Interface.  At that point, bg can put the job into the background. This  is
       most  effective  when  the job is expecting no terminal input and its output has been redirected to non-terminal files. A
       background job can be forced to stop when it has terminal output by issuing the command:

           stty tostop

       A background job can be stopped with the command:

           kill −s stop job ID

       The bg utility does not work as expected when it is operating in its own utility execution environment because that envi‐
       ronment has no suspended jobs. In the following examples:

           ... | xargs bg
           (bg)

       each bg operates in a different environment and does not share its parent shell's understanding of jobs. For this reason,
       bg is generally implemented as a shell regular built-in.

EXAMPLES
       None.

RATIONALE
       The extensions to the shell specified in this volume of POSIX.1‐2008 have mostly been based on features provided  by  the
       KornShell. The job control features provided by bg, fg, and jobs are also based on the KornShell. The standard developers
       examined the characteristics of the C shell versions of these utilities and found that differences exist.  Despite  wide‐
       spread  use  of the C shell, the KornShell versions were selected for this volume of POSIX.1‐2008 to maintain a degree of
       uniformity with the rest of the KornShell features selected (such as the very popular command line editing features).

       The bg utility is expected to wrap its output if the output exceeds the number of display columns.

FUTURE DIRECTIONS
       None.

SEE ALSO
       Section 2.9.3.1, Examples, fg, kill, jobs, wait

       The Base Definitions volume of POSIX.1‐2008, Section 3.204, Job Control Job ID, Chapter 8, Environment Variables, Chapter
       11, General Terminal Interface

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions  of  this  text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013 Edition, Standard for
       Information Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7,  Copy‐
       right  (C)  2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This is POSIX.1-2008
       with the 2013 Technical Corrigendum 1 applied.) In the event of any discrepancy between this  version  and  the  original
       IEEE  and  The  Open  Group Standard, the original IEEE and The Open Group Standard is the referee document. The original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any typographical or formatting errors that appear in this page are most likely to have been introduced during  the  con‐
       version  of  the source files to man page format. To report such errors, see https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                        BG(1P)
BREAK(1P)                                           POSIX Programmer's Manual                                          BREAK(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->

NAME
       break — exit from for, while, or until loop

SYNOPSIS
       break [n]

DESCRIPTION
       The  break  utility  shall  exit from the smallest enclosing for, while, or until loop, if any; or from the nth enclosing
       loop if n is specified. The value of n is an unsigned decimal integer greater than or equal to 1. The  default  shall  be
       equivalent  to  n=1.   If  n is greater than the number of enclosing loops, the outermost enclosing loop shall be exited.
       Execution shall continue with the command immediately following the loop.

OPTIONS
       None.

OPERANDS
       See the DESCRIPTION.

<!-- fe96d119-27ce-4a62-99a9-ff5840fe1a84 <=< ACCEPT -->STDIN
       Not used.

INPUT FILES
       None.

ENVIRONMENT VARIABLES
       None.

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       Not used.

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       None.

EXIT STATUS
        0    Successful completion.

       &amp;gt;0    The n value was not an unsigned decimal integer greater than or equal to 1.

CONSEQUENCES OF ERRORS
       Default.

       The following sections are informative.<!-- ACCEPT >=> fe96d119-27ce-4a62-99a9-ff5840fe1a84 -->

APPLICATION USAGE
       None.

EXAMPLES
       for i in *
       do
           if test −d "$i"
           then break
           fi
       done

RATIONALE
       In early proposals, consideration was given to expanding the syntax of break and continue to refer to a label  associated
       with  the appropriate loop as a preferable alternative to the n method. However, this volume of POSIX.1‐2008 does reserve
       the name space of command names ending with a &amp;lt;colon&amp;gt;.  It is anticipated that a future implementation could take  advan‐
       tage of this and provide something like:

           outofloop: for i in a b c d e
           do
               for j in 0 1 2 3 4 5 6 7 8 9
               do
                   if test −r "${i}${j}"
                   then break outofloop
                   fi
               done
           done

       and that this might be standardized after implementation experience is achieved.

FUTURE DIRECTIONS
       None.

SEE ALSO
       Section 2.14, Special Built-In Utilities

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions  of  this  text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013 Edition, Standard for
       Information Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7,  Copy‐
       right  (C)  2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This is POSIX.1-2008
       with the 2013 Technical Corrigendum 1 applied.) In the event of any discrepancy between this  version  and  the  original
       IEEE  and  The  Open  Group Standard, the original IEEE and The Open Group Standard is the referee document. The original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any typographical or formatting errors that appear in this page are most likely to have been introduced during  the  con‐
       version  of  the source files to man page format. To report such errors, see https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                     BREAK(1P)
C99(1P)                                             POSIX Programmer's Manual                                            C99(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->

NAME
       c99 — compile standard C programs

SYNOPSIS
       c99 [options...] pathname [[pathname] [−I directory]
           [−L directory] [−l library]]...

DESCRIPTION
       The c99 utility is an interface to the standard C compilation system; it shall accept source code conforming to the ISO C
       standard. The system conceptually consists of a compiler and link editor. The input files referenced by pathname operands
       and  −l option-arguments shall be compiled and linked to produce an executable file. (It is unspecified whether the link‐
       ing occurs entirely within the operation of c99; some implementations may produce objects that  are  not  fully  resolved
       until the file is executed.)

       If the −c option is specified, for all pathname operands of the form file.c, the files:

           $(basename pathname .c).o

       shall  be  created  as the result of successful compilation. If the −c option is not specified, it is unspecified whether
       such .o files are created or deleted for the file.c operands.

       If there are no options that prevent link editing (such as −c or −E), and all input files compile and link without error,
       the resulting executable file shall be written according to the −o outfile option (if present) or to the file a.out.

       The  executable  file  shall  be created as specified in Section 1.1.1.4, File Read, Write, and Creation, except that the
       file permission bits shall be set to: S_IRWXO | S_IRWXG | S_IRWXU

       and the bits specified by the umask of the process shall be cleared.

OPTIONS
       The c99 utility shall conform to the Base Definitions volume of POSIX.1‐2008, Section 12.2,  Utility  Syntax  Guidelines,
       except that:

        *  Options can be interspersed with operands.

        *  The  order of specifying the −L and −l options, and the order of specifying −l options with respect to pathname oper‐
           ands is significant.

        *  Conforming applications shall specify each option separately; that is, grouping option  letters  (for  example,  −cO)
           need not be recognized by all implementations.

       The following options shall be supported:

       −c        Suppress the link-edit phase of the compilation, and do not remove any object files that are produced.

       −D name[=value]
                 Define  name as if by a C-language #define directive. If no =value is given, a value of 1 shall be used. The −D
                 option has lower precedence than the −U option. That is, if name is used in both a −U and  a  −D  option,  name
                 shall  be undefined regardless of the order of the options. Additional implementation-defined names may be pro‐
                 vided by the compiler. Implementations shall support at least 2048 bytes of −D definitions and 256 names.

       −E        Copy C-language source files to standard output, expanding all preprocessor directives; no compilation shall be
                 performed. If any operand is not a text file, the effects are unspecified.

       −g        Produce  symbolic information in the object or executable files; the nature of this information is unspecified,
                 and may be modified by implementation-defined interactions with other options.

       −I directory
                 Change the algorithm for searching for headers whose names are not absolute pathnames to look in the  directory
                 named  by  the directory pathname before looking in the usual places. Thus, headers whose names are enclosed in
                 double-quotes ("") shall be searched for first in the directory of the file with the  #include  line,  then  in
                 directories  named  in  −I options, and last in the usual places. For headers whose names are enclosed in angle
                 brackets ("&amp;lt;&amp;gt;"), the header shall be searched for only in directories named in −I options and then in the usual
                 places.  Directories  named in −I options shall be searched in the order specified. If the −I option is used to
                 specify a directory that is one of the usual places searched by default, the results are unspecified. Implemen‐
                 tations shall support at least ten instances of this option in a single c99 command invocation.

       −L directory
                 Change  the  algorithm of searching for the libraries named in the −l objects to look in the directory named by
                 the directory pathname before looking in the usual places. Directories named in −L options shall be searched in
                 the  order  specified. If the −L option is used to specify a directory that is one of the usual places searched
                 by default, the results are unspecified. Implementations shall support at least ten instances of this option in
                 a  single  c99  command  invocation. If a directory specified by a −L option contains files with names starting
                 with any of the strings  "libc.",  "libl.",  "libpthread.",  "libm.",  "librt.",  "libtrace.",  "libxnet.",  or
                 "liby.", the results are unspecified.

       −l library
                 Search the library named liblibrary.a.  A library shall be searched when its name is encountered, so the place‐
                 ment of a −l option is significant. Several standard libraries can be specified in this manner, as described in
                 the  EXTENDED  DESCRIPTION section. Implementations may recognize implementation-defined suffixes other than .a
                 as denoting libraries.

       −O optlevel
                 Specify the level of code optimization. If the optlevel option-argument is the  digit  '0',  all  special  code
                 optimizations  shall be disabled. If it is the digit '1', the nature of the optimization is unspecified. If the
                 −O option is omitted, the nature of the system's default optimization is unspecified. It is unspecified whether
                 code  generated  in  the  presence  of  the −O 0 option is the same as that generated when −O is omitted. Other
                 optlevel values may be supported.

       −o outfile
                 Use the pathname outfile, instead of the default a.out, for the executable file produced. If the −o  option  is
                 present with −c or −E, the result is unspecified.

       −s        Produce  object or executable files, or both, from which symbolic and other information not required for proper
                 execution using the exec family defined in the System  Interfaces  volume  of  POSIX.1‐2008  has  been  removed
                 (stripped). If both −g and −s options are present, the action taken is unspecified.

       −U name   Remove any initial definition of name.

       Multiple instances of the −D, −I, −L, −l, and −U options can be specified.

OPERANDS
       The  application  shall ensure that at least one pathname operand is specified. The following forms for pathname operands
       shall be supported:

       file.c    A C-language source file to be compiled and optionally linked. The application shall ensure that the operand is
                 of this form if the −c option is used.

       file.a    A  library of object files typically produced by the ar utility, and passed directly to the link editor. Imple‐
                 mentations may recognize implementation-defined suffixes other than .a as denoting object file libraries.

       file.o    An object file produced by c99 −c and passed directly to the link editor. Implementations may recognize  imple‐
                 mentation-defined suffixes other than .o as denoting object files.

       The processing of other files is implementation-defined.

STDIN
       Not used.

<!-- 28219fd0-cd47-42f7-b894-82913d24537b <=< ACCEPT -->INPUT FILES
       Each  input file shall be one of the following: a text file containing a C-language source program, an object file in the
       format produced by c99 −c, or a library of object files, in the format produced by archiving zero or more  object  files,
       using  ar.   Implementations  may  supply additional utilities that produce files in these formats. Additional input file
       formats are implementation-defined.<!-- ACCEPT >=> 28219fd0-cd47-42f7-b894-82913d24537b -->

<!-- 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 <=< ACCEPT -->ENVIRONMENT VARIABLES
       The following environment variables shall affect the execution of c99:

       LANG      Provide a default value for the internationalization variables that are unset or null. (See  the  Base  Defini‐
                 tions  volume of POSIX.1‐2008, Section 8.2, Internationalization Variables for the precedence of international‐
                 ization variables used to determine the values of locale categories.)

       LC_ALL    If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_CTYPE  Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, sin‐
                 gle-byte as opposed to multi-byte characters in arguments and input files).

       LC_MESSAGES
                 Determine  the  locale  that should be used to affect the format and contents of diagnostic messages written to
                 standard error.

       NLSPATH   Determine the location of message catalogs for the processing of LC_MESSAGES.<!-- ACCEPT >=> 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 -->

       TMPDIR    Provide a pathname that should override the default directory for temporary files, if any.   On  XSI-conforming
                 systems, provide a pathname that shall override the default directory for temporary files, if any.

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       If more than one pathname operand ending in .c (or possibly other unspecified suffixes) is given, for each such file:

           "%s:\n", &amp;lt;pathname&amp;gt;

       may be written. These messages, if written, shall precede the processing of each input file; they shall not be written to
       the standard output if they are written to the standard error, as described in the STDERR section.

       If the −E option is specified, the standard output shall be a text file that represents the results of the  preprocessing
       stage of the language; it may contain extra information appropriate for subsequent compilation passes.

STDERR
       The standard error shall be used only for diagnostic messages.  If more than one pathname operand ending in .c (or possi‐
       bly other unspecified suffixes) is given, for each such file:

           "%s:\n", &amp;lt;pathname&amp;gt;

       may be written to allow identification of the diagnostic and warning messages with the appropriate input file. These mes‐
       sages,  if  written,  shall precede the processing of each input file; they shall not be written to the standard error if
       they are written to the standard output, as described in the STDOUT section.

       This utility may produce warning messages about certain conditions that do not warrant returning an error (non-zero) exit
       value.

OUTPUT FILES
       Object  files  or executable files or both are produced in unspecified formats. If the pathname of an object file or exe‐
       cutable file to be created by c99 resolves to an existing directory entry for a file that is not a regular  file,  it  is
       unspecified  whether  c99 shall attempt to create the file or shall issue a diagnostic and exit with a non-zero exit sta‐
       tus.

EXTENDED DESCRIPTION
   Standard Libraries
       The c99 utility shall recognize the following −l options for standard libraries:

       −l c      This option shall make available all interfaces referenced in the System  Interfaces  volume  of  POSIX.1‐2008,
                 with  the  possible  exception  of  those interfaces listed as residing in &amp;lt;aio.h&amp;gt;, &amp;lt;arpa/inet.h&amp;gt;, &amp;lt;complex.h&amp;gt;,
                 &amp;lt;fenv.h&amp;gt;, &amp;lt;math.h&amp;gt;, &amp;lt;mqueue.h&amp;gt;, &amp;lt;netdb.h&amp;gt;, &amp;lt;net/if.h&amp;gt;, &amp;lt;netinet/in.h&amp;gt;, &amp;lt;pthread.h&amp;gt;,  &amp;lt;sched.h&amp;gt;,  &amp;lt;semaphore.h&amp;gt;,
                 &amp;lt;spawn.h&amp;gt;, &amp;lt;sys/socket.h&amp;gt;, pthread_kill(), and pthread_sigmask() in &amp;lt;signal.h&amp;gt;, &amp;lt;trace.h&amp;gt;, interfaces marked as
                 optional in &amp;lt;sys/mman.h&amp;gt;, interfaces marked as ADV (Advisory Information) in &amp;lt;fcntl.h&amp;gt;, and  interfaces  begin‐
                 ning  with  the prefix clock_ or time_ in &amp;lt;time.h&amp;gt;.  This option shall not be required to be present to cause a
                 search of this library.

       −l l      This option shall make available all interfaces required by the C-language output of  lex  that  are  not  made
                 available through the −l c option.

       −l pthread
                 This  option  shall make available all interfaces referenced in &amp;lt;pthread.h&amp;gt; and pthread_kill() and pthread_sig‐
                 mask() referenced in &amp;lt;signal.h&amp;gt;.  An implementation may search this library in the absence of this option.

       −l m      This option shall make available all interfaces referenced in &amp;lt;math.h&amp;gt;, &amp;lt;complex.h&amp;gt;, and &amp;lt;fenv.h&amp;gt;.   An  imple‐
                 mentation may search this library in the absence of this option.

       −l rt     This  option  shall  make available all interfaces referenced in &amp;lt;aio.h&amp;gt;, &amp;lt;mqueue.h&amp;gt;, &amp;lt;sched.h&amp;gt;, &amp;lt;semaphore.h&amp;gt;,
                 and &amp;lt;spawn.h&amp;gt;, interfaces marked as optional in &amp;lt;sys/mman.h&amp;gt;, interfaces marked as ADV  (Advisory  Information)
                 in  &amp;lt;fcntl.h&amp;gt;,  and  interfaces  beginning with the prefix clock_ and time_ in &amp;lt;time.h&amp;gt;.  An implementation may
                 search this library in the absence of this option.

       −l trace  This option shall make available all interfaces referenced in &amp;lt;trace.h&amp;gt;.  An  implementation  may  search  this
                 library in the absence of this option.

       −l xnet   This   option  shall  make  available  all  interfaces  referenced  in  &amp;lt;arpa/inet.h&amp;gt;,  &amp;lt;netdb.h&amp;gt;,  &amp;lt;net/if.h&amp;gt;,
                 &amp;lt;netinet/in.h&amp;gt;, and &amp;lt;sys/socket.h&amp;gt;.  An implementation may search this library in the absence of this option.

       −l y      This option shall make available all interfaces required by the C-language output of yacc  that  are  not  made
                 available through the −l c option.

       In  the  absence of options that inhibit invocation of the link editor, such as −c or −E, the c99 utility shall cause the
       equivalent of a −l c option to be passed to the link editor after the last pathname operand or −l option, causing  it  to
       be searched after all other object files and libraries are loaded.

       It  is  unspecified whether the libraries libc.a, libl.a, libm.a, libpthread.a, librt.a, libtrace.a, libxnet.a, or liby.a
       exist as regular files. The implementation may accept as −l option-arguments names of objects that do not exist as  regu‐
       lar files.

   External Symbols
       The  C  compiler  and link editor shall support the significance of external symbols up to a length of at least 31 bytes;
       the action taken upon encountering symbols exceeding the implementation-defined maximum symbol length is unspecified.

       The compiler and link editor shall support a minimum of 511 external symbols per source or object file, and a minimum  of
       4095  external  symbols  in  total.  A  diagnostic message shall be written to the standard output if the implementation-
       defined limit is exceeded; other actions are unspecified.

   Header Search
       If a file with the same name as one of the standard headers defined in the Base Definitions volume of POSIX.1‐2008, Chap‐
       ter  13,  Headers,  not provided as part of the implementation, is placed in any of the usual places that are searched by
       default for headers, the results are unspecified.

   Programming Environments
       All implementations shall support one of the following programming environments as a default. Implementations may support
       more  than  one  of  the following programming environments. Applications can use sysconf() or getconf to determine which
       programming environments are supported.

                                            Table 4-4: Programming Environments: Type Sizes

                                   ┌────────────────────────┬─────────┬─────────┬─────────┬─────────┐
                                   │Programming Environment │ Bits in │ Bits in │ Bits in │ Bits in │
                                   │     getconf Name       │   int   │  long   │ pointer │  off_t  │
                                   ├────────────────────────┼─────────┼─────────┼─────────┼─────────┤
                                   │_POSIX_V7_ILP32_OFF32   │    32   │    32   │    32   │    32   │
                                   │_POSIX_V7_ILP32_OFFBIG  │    32   │    32   │    32   │   ≥64   │
                                   │_POSIX_V7_LP64_OFF64    │    32   │    64   │    64   │    64   │
                                   │_POSIX_V7_LPBIG_OFFBIG  │   ≥32   │   ≥64   │   ≥64   │   ≥64   │
                                   └────────────────────────┴─────────┴─────────┴─────────┴─────────┘
       All implementations shall support one or more environments where the widths of the following types are  no  greater  than
       the width of type long:

                                                  blksize_t   ptrdiff_t     tcflag_t
                                                  cc_t        size_t        wchar_t
                                                  mode_t      speed_t       wint_t
                                                  nfds_t      ssize_t
                                                  pid_t       suseconds_t

       The  executable  files created when these environments are selected shall be in a proper format for execution by the exec
       family of functions. Each environment may be one of the ones in Table 4-4, Programming Environments: Type  Sizes,  or  it
       may  be  another environment. The names for the environments that meet this requirement shall be output by a getconf com‐
       mand using the POSIX_V7_WIDTH_RESTRICTED_ENVS argument, as a &amp;lt;newline&amp;gt;-separated list of names suitable for use with  the
       getconf −v option. If more than one environment meets the requirement, the names of all such environments shall be output
       on separate lines. Any of these names can then be used in a subsequent getconf command to obtain the  flags  specific  to
       that environment with the following suffixes added as appropriate:

       _CFLAGS   To get the C compiler flags.

       _LDFLAGS  To get the linker/loader flags.

       _LIBS     To get the libraries.

       This requirement may be removed in a future version.

       When this utility processes a file containing a function called main(), it shall be defined with a return type equivalent
       to int.  Using return from the initial call to main() shall be equivalent (other than  with  respect  to  language  scope
       issues)  to calling exit() with the returned value. Reaching the end of the initial call to main() shall be equivalent to
       calling exit(0).  The implementation shall not declare a prototype for this function.

       Implementations provide configuration strings for C compiler flags, linker/loader flags, and libraries for each supported
       environment.   When an application needs to use a specific programming environment rather than the implementation default
       programming environment while compiling, the application shall first verify that the implementation supports the  desired
       environment.  If  the desired programming environment is supported, the application shall then invoke c99 with the appro‐
       priate C compiler flags as the first options for the compile, the appropriate linker/loader flags after any other options
       except −l but before any operands or −l options, and the appropriate libraries at the end of the operands and −l options.

       Conforming applications shall not attempt to link together object files compiled for different programming models. Appli‐
       cations shall also be aware that binary data placed in shared memory or in files might not be recognized by  applications
       built for other programming models.

                                          Table 4-5: Programming Environments: c99 Arguments

                            ┌────────────────────────┬─────────────────────┬───────────────────────────────┐
                            │Programming Environment │                     │         c99 Arguments         │
                            │     getconf Name       │         Use         │         getconf Name          │
                            ├────────────────────────┼─────────────────────┼───────────────────────────────┤
                            │_POSIX_V7_ILP32_OFF32   │ C Compiler Flags    │ POSIX_V7_ILP32_OFF32_CFLAGS   │
                            │                        │ Linker/Loader Flags │ POSIX_V7_ILP32_OFF32_LDFLAGS  │
                            │                        │ Libraries           │ POSIX_V7_ILP32_OFF32_LIBS     │
                            ├────────────────────────┼─────────────────────┼───────────────────────────────┤
                            │_POSIX_V7_ILP32_OFFBIG  │ C Compiler Flags    │ POSIX_V7_ILP32_OFFBIG_CFLAGS  │
                            │                        │ Linker/Loader Flags │ POSIX_V7_ILP32_OFFBIG_LDFLAGS │
                            │                        │ Libraries           │ POSIX_V7_ILP32_OFFBIG_LIBS    │
                            ├────────────────────────┼─────────────────────┼───────────────────────────────┤
                            │_POSIX_V7_LP64_OFF64    │ C Compiler Flags    │ POSIX_V7_LP64_OFF64_CFLAGS    │
                            │                        │ Linker/Loader Flags │ POSIX_V7_LP64_OFF64_LDFLAGS   │
                            │                        │ Libraries           │ POSIX_V7_LP64_OFF64_LIBS      │
                            ├────────────────────────┼─────────────────────┼───────────────────────────────┤
                            │_POSIX_V7_LPBIG_OFFBIG  │ C Compiler Flags    │ POSIX_V7_LPBIG_OFFBIG_CFLAGS  │
                            │                        │ Linker/Loader Flags │ POSIX_V7_LPBIG_OFFBIG_LDFLAGS │
                            │                        │ Libraries           │ POSIX_V7_LPBIG_OFFBIG_LIBS    │
                            └────────────────────────┴─────────────────────┴───────────────────────────────┘
       In  addition  to the type size programming environments above, all implementations also support a multi-threaded program‐
       ming environment that is orthogonal to all of the programming environments listed above.  The getconf utility can be used
       to  get  flags for the threaded programming environment, as indicated in Table 4-6, Threaded Programming Environment: c99
       Arguments.

                                      Table 4-6: Threaded Programming Environment: c99 Arguments

                              ┌────────────────────────┬─────────────────────┬──────────────────────────┐
                              │Programming Environment │                     │      c99 Arguments       │
                              │     getconf Name       │         Use         │       getconf Name       │
                              ├────────────────────────┼─────────────────────┼──────────────────────────┤
                              │_POSIX_THREADS          │ C Compiler Flags    │ POSIX_V7_THREADS_CFLAGS  │
                              │                        │ Linker/Loader Flags │ POSIX_V7_THREADS_LDFLAGS │
                              └────────────────────────┴─────────────────────┴──────────────────────────┘
       These programming environment flags may be used in conjunction with any of the type size  programming  environments  sup‐
       ported by the implementation.

<!-- a42f9355-e63b-4205-ac0b-0b19b24faf9d <=< ACCEPT -->EXIT STATUS
       The following exit values shall be returned:

        0    Successful compilation or link edit.

       &amp;gt;0    An error occurred.<!-- ACCEPT >=> a42f9355-e63b-4205-ac0b-0b19b24faf9d -->

CONSEQUENCES OF ERRORS
       When  c99  encounters  a  compilation  error that causes an object file not to be created, it shall write a diagnostic to
       standard error and continue to compile other source code operands, but it shall not perform the link phase and  return  a
       non-zero  exit  status. If the link edit is unsuccessful, a diagnostic message shall be written to standard error and c99
       exits with a non-zero status. A conforming application shall rely on the exit status of c99, rather than on the existence
       or mode of the executable file.

       The following sections are informative.

APPLICATION USAGE
       Since the c99 utility usually creates files in the current directory during the compilation process, it is typically nec‐
       essary to run the c99 utility in a directory in which a file can be created.

       On systems providing POSIX Conformance (see the Base Definitions volume of POSIX.1‐2008, Chapter 2, Conformance), c99  is
       required only with the C-Language Development option; XSI-conformant systems always provide c99.

       Some  historical  implementations  have created .o files when −c is not specified and more than one source file is given.
       Since this area is left unspecified, the application cannot rely on .o files being created, but it also must be  prepared
       for any related .o files that already exist being deleted at the completion of the link edit.

       There  is  the  possible  implication  that  if  a user supplies versions of the standard functions (before they would be
       encountered by an implicit −l c or explicit −l m), that those versions would be used in place of the  standard  versions.
       There are various reasons this might not be true (functions defined as macros, manipulations for clean name space, and so
       on), so the existence of files named in the same manner as the standard libraries within the −L directories is explicitly
       stated to produce unspecified behavior.

       All  of  the  functions  specified in the System Interfaces volume of POSIX.1‐2008 may be made visible by implementations
       when the Standard C Library is searched. Conforming applications must explicitly request  searching  the  other  standard
       libraries when functions made visible by those libraries are used.

       In  the  ISO C  standard  the  mapping  from  physical source characters to the C source character set is implementation-
       defined. Implementations may strip white-space characters before the terminating &amp;lt;newline&amp;gt; of a (physical) line  as  part
       of  this  mapping  and,  as a consequence of this, one or more white-space characters (and no other characters) between a
       &amp;lt;backslash&amp;gt; character and the &amp;lt;newline&amp;gt; character that terminates the line produces implementation-defined results.  Por‐
       table applications should not use such constructs.

       Some c99 compilers not conforming to POSIX.1‐2008 do not support trigraphs by default.

EXAMPLES
        1. The following usage example compiles foo.c and creates the executable file foo:

               c99 −o foo foo.c

           The following usage example compiles foo.c and creates the object file foo.o:

               c99 −c foo.c

           The following usage example compiles foo.c and creates the executable file a.out:

               c99 foo.c

           The  following usage example compiles foo.c, links it with bar.o, and creates the executable file a.out.  It may also
           create and leave foo.o:

               c99 foo.c bar.o

        2. The following example shows how an application using threads interfaces can test for support of and use a programming
           environment supporting 32-bit int, long, and pointer types and an off_t type using at least 64 bits:

               offbig_env=$(getconf _POSIX_V7_ILP32_OFFBIG)
               if [ $offbig_env != "-1" ] &amp;&amp; [ $offbig_env != "undefined" ]
               then
                   c99 $(getconf POSIX_V7_ILP32_OFFBIG_CFLAGS) \
                   $(getconf POSIX_V7_THREADS_CFLAGS) -D_XOPEN_SOURCE=700 \
                   $(getconf POSIX_V7_ILP32_OFFBIG_LDFLAGS) \
                   $(getconf POSIX_V7_THREADS_LDFLAGS) foo.c -o foo \
                   $(getconf POSIX_V7_ILP32_OFFBIG_LIBS) \
                   -l pthread
               else
                   echo ILP32_OFFBIG programming environment not supported
                   exit 1
               fi

        3. The following examples clarify the use and interactions of −L and −l options.

           Consider  the  case  in  which  module a.c calls function f() in library libQ.a, and module b.c calls function g() in
           library libp.a.  Assume that both libraries reside in /a/b/c.  The command line to compile and link  in  the  desired
           way is:

               c99 −L /a/b/c main.o a.c −l Q b.c −l p

           In  this  case  the  −L option need only precede the first −l option, since both libQ.a and libp.a reside in the same
           directory.

           Multiple −L options can be used when library name collisions occur. Building on the previous  example,  suppose  that
           the user wants to use a new libp.a, in /a/a/a, but still wants f() from /a/b/c/libQ.a:

               c99 −L /a/a/a −L /a/b/c main.o a.c −l Q b.c −l p

           In  this  example,  the  linker  searches  the  −L  options  in  the  order specified, and finds /a/a/a/libp.a before
           /a/b/c/libp.a when resolving references for b.c.  The order of the −l options is still important, however.

        4. The following example shows how an application can use a programming environment where the widths  of  the  following
           types:  blksize_t,  cc_t, mode_t, nfds_t, pid_t, ptrdiff_t, size_t, speed_t, ssize_t, suseconds_t, tcflag_t, wchar_t,
           wint_t

           are no greater than the width of type long:

               # First choose one of the listed environments ...

               # ... if there are no additional constraints, the first one will do:
               CENV=$(getconf POSIX_V7_WIDTH_RESTRICTED_ENVS | head -n l)

               # ... or, if an environment that supports large files is preferred,
               # look for names that contain "OFF64" or "OFFBIG". (This chooses
               # the last one in the list if none match.)
               for CENV in $(getconf POSIX_V7_WIDTH_RESTRICTED_ENVS)
               do
                   case $CENV in
                   *OFF64*|*OFFBIG*) break ;;
                   esac
               done

               # The chosen environment name can now be used like this:

               c99 $(getconf ${CENV}_CFLAGS) -D _POSIX_C_SOURCE=200809L \
               $(getconf ${CENV}_LDFLAGS) foo.c -o foo \
               $(getconf ${CENV}_LIBS)

RATIONALE
       The c99 utility is based on the c89 utility originally introduced in the ISO POSIX‐2:1993 standard.

       Some of the changes from c89 include the ability to intersperse options and  operands  (which  many  c89  implementations
       allowed  despite  it not being specified), the description of −l as an option instead of an operand, and the modification
       to the contents of the Standard Libraries section to account for new headers and options; for example, &amp;lt;spawn.h&amp;gt; added to
       the description of −l rt, and −l trace added for the Tracing option.

       POSIX.1‐2008  specifies  that the c99 utility must be able to use regular files for *.o files and for a.out files. Imple‐
       mentations are free to overwrite existing files of other types when attempting to  create  object  files  and  executable
       files, but are not required to do so. If something other than a regular file is specified and using it fails for any rea‐
       son, c99 is required to issue a diagnostic message and exit with a non-zero exit status. But for  some  file  types,  the
       problem  may  not be noticed for a long time. For example, if a FIFO named a.out exists in the current directory, c99 may
       attempt to open a.out and will hang in the open() call until another process opens the FIFO for  reading.  Then  c99  may
       write  most of the a.out to the FIFO and fail when it tries to seek back close to the start of the file to insert a time‐
       stamp (FIFOs are not seekable files). The c99 utility is also allowed to issue a diagnostic immediately if it  encounters
       an  a.out or *.o file that is not a regular file. For portable use, applications should ensure that any a.out, −o option-
       argument, or *.o files corresponding to any *.c files do not conflict with names already in  use  that  are  not  regular
       files or symbolic links that point to regular files.

       On  many systems, multi-threaded applications run in a programming environment that is distinct from that used by single-
       threaded applications. This multi-threaded programming environment (in addition to needing to specify −l pthread at  link
       time) may require additional flags to be set when headers are processed at compile time (−D_REENTRANT being common). This
       programming environment is orthogonal to the type size programming environments discussed above and listed in Table  4-4,
       Programming  Environments: Type Sizes.  This version of the standard adds getconf utility calls to provide the C compiler
       flags and linker/loader flags needed to support multi-threaded applications. Note that on a system where  single-threaded
       applications  are a special case of a multi-threaded application, both of these getconf calls may return NULL strings; on
       other implementations both of these strings may be non-NULL strings.

       The C standardization committee invented trigraphs (e.g., "??!" to represent '|') to address character portability  prob‐
       lems  in  development  environments based on national variants of the 7-bit ISO/IEC 646:1991 standard character set. How‐
       ever, these environments were already obsolete by the time the first ISO C standard was published, and in  practice  tri‐
       graphs  have  not been used for their intended purpose, and usually are intended to have their original meaning in K&amp;R C.
       For example, in practice a C-language source string like "What??!" is usually intended  to  end  in  two  &amp;lt;question-mark&amp;gt;
       characters and an &amp;lt;exclamation-mark&amp;gt;, not in '|'.

FUTURE DIRECTIONS
       None.

SEE ALSO
       Section 1.1.1.4, File Read, Write, and Creation, ar, getconf, make, nm, strip, umask

       The  Base  Definitions volume of POSIX.1‐2008, Chapter 8, Environment Variables, Section 12.2, Utility Syntax Guidelines,
       Chapter 13, Headers

       The System Interfaces volume of POSIX.1‐2008, exec, sysconf()

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013  Edition,  Standard  for
       Information  Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7, Copy‐
       right (C) 2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This  is  POSIX.1-2008
       with  the  2013  Technical  Corrigendum 1 applied.) In the event of any discrepancy between this version and the original
       IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the  referee  document.  The  original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any  typographical  or formatting errors that appear in this page are most likely to have been introduced during the con‐
       version of the source files to man page format. To report such errors,  see  https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                       C99(1P)
CAL(1)                                                    User Commands                                                   CAL(1)

NAME
       cal - display a calendar

SYNOPSIS
       cal [options] [[[day] month] year]
       cal [options] &amp;lt;timestamp|monthname&amp;gt;

DESCRIPTION
       cal displays a simple calendar.  If no arguments are specified, the current month is displayed.

       The  month  may be specified as a number (1-12), as a month name or as an abbreviated month name according to the current
       locales.

OPTIONS
       -1, --one
              Display single month output.  (This is the default.)

       -3, --three
              Display three months spanning the date.

       -n , --months number
              Display number of months, starting from the month containing the date.

       -S, --span
              Display months spanning the date.

       -s, --sunday
              Display Sunday as the first day of the week.

       -m, --monday
              Display Monday as the first day of the week.

       -j, --julian
              Display Julian dates (days one-based, numbered from January 1).

       -y, --year
              Display a calendar for the whole year.

       -Y, --twelve
              Display a calendar for the next twelve months.

       -w, --week[=number]
              Display week numbers in the calendar (US or ISO-8601).

       --color[=when]
              Colorize the output.  The optional argument when can be auto, never or always.  If the when argument  is  omitted,
              it  defaults  to  auto.   The colors can be disabled; for the current built-in default see the --help output.  See
              also the COLORS section.

       -V, --version
              Display version information and exit.

       -h, --help
              Display help text and exit.

PARAMETERS
       Single digits-only parameter (e.g. 'cal 2020')
              Specifies the year to be displayed; note the year must be fully specified: cal 89 will not display a calendar  for
              1989.

       Single string parameter (e.g. 'cal tomorrow' or 'cal August')
              Specifies timestamp or a month name (or abbreviated name) according to the current locales.

              The  special  placeholders  are  accepted  when parsing timestamp, "now" may be used to refer to the current time,
              "today", "yesterday", "tomorrow" refer to of the current day, the day before or the next day, respectively.

              The relative date specifications are also accepted, in this case "+" is evaluated to the  current  time  plus  the
              specified time span. Correspondingly, a time span that is prefixed with "-" is evaluated to the current time minus
              the specified time span, for example '+2days'. Instead of prefixing the time span with "+" or "-", it may also  be
              suffixed with a space and the word "left" or "ago" (for example '1 week ago').

       Two parameters (e.g. 'cal 11 2020')
              Denote the month (1 - 12) and year.

       Three parameters (e.g. 'cal 25 11 2020')
              Denote the day (1-31), month and year, and the day will be highlighted if the calendar is displayed on a terminal.
              If no parameters are specified, the current month's calendar is displayed.

NOTES
       A year starts on January 1.  The first day of the week is determined by the locale.

       The week numbering depends on the choice of the first day of the week.  If Sunday (the default) is used for the first day
       of the week, then the customary North American numbering will be used, i.e. the first Sunday of the year starts the first
       week.  If Monday is selected, then the ISO-8601 standard week numbering is used, where the first Thursday of the year  is
       in week number 1.

COLORS
       Implicit coloring can be disabled as follows:

              touch /etc/terminal-colors.d/cal.disable

       See terminal-colors.d(5) for more details about colorization configuration.

BUGS
       The  cal program uses the 3rd of September 1752 as the date of the Gregorian calendar reformation -- that is when it hap‐
       pened in Great Britain and its colonies (including what is now the USA).  Starting at that date, eleven days were  elimi‐
       nated  by  this  reformation, so the calendar for that month is rather unusual.  The actual historical dates at which the
       calendar reform happened in all the different countries (locales) are ignored.

       Alternative calendars, such as the Umm al-Qura, the Solar Hijri, the Ge'ez, or the lunisolar Hindu, are not supported.

HISTORY
       A cal command appeared in Version 6 AT&amp;T UNIX.

AVAILABILITY
       The cal command is part of the util-linux package and is available from ftp://ftp.kernel.org/pub/linux/utils/util-linux/.

util-linux                                                  June 2015                                                     CAL(1)
CAT(1)                                                    User Commands                                                   CAT(1)

NAME
       cat - concatenate files and print on the standard output

SYNOPSIS
       cat [OPTION]... [FILE]...

DESCRIPTION
       Concatenate FILE(s) to standard output.

       With no FILE, or when FILE is -, read standard input.

       -A, --show-all
              equivalent to -vET

       -b, --number-nonblank
              number nonempty output lines, overrides -n

       -e     equivalent to -vE

       -E, --show-ends
              display $ at end of each line

       -n, --number
              number all output lines

       -s, --squeeze-blank
              suppress repeated empty output lines

       -t     equivalent to -vT

       -T, --show-tabs
              display TAB characters as ^I

       -u     (ignored)

       -v, --show-nonprinting
              use ^ and M- notation, except for LFD and TAB

       --help display this help and exit

       --version
              output version information and exit

EXAMPLES
       cat f - g
              Output f's contents, then standard input, then g's contents.

       cat    Copy standard input to standard output.

AUTHOR
       Written by Torbjorn Granlund and Richard M. Stallman.

<!-- 30b0cf8a-458a-435b-a2e0-993472636e53 <=< ACCEPT -->REPORTING BUGS
       GNU coreutils online help: &amp;lt;http://www.gnu.org/software/coreutils/&amp;gt;
       Report cat translation bugs to &amp;lt;http://translationproject.org/team/&amp;gt;

COPYRIGHT
       Copyright    ©    2016   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3   or   later
       &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.<!-- ACCEPT >=> 30b0cf8a-458a-435b-a2e0-993472636e53 -->

SEE ALSO
       tac(1)

       Full documentation at: &amp;lt;http://www.gnu.org/software/coreutils/cat&amp;gt;
       or available locally via: info '(coreutils) cat invocation'

GNU coreutils 8.26                                        November 2016                                                   CAT(1)
CD(1P)                                              POSIX Programmer's Manual                                             CD(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->

NAME
       cd — change the working directory

SYNOPSIS
       cd [−L|−P] [directory]

       cd −

DESCRIPTION
       The  cd  utility  shall  change the working directory of the current shell execution environment (see Section 2.12, Shell
       Execution Environment) by executing the following steps in sequence. (In the following steps, the symbol  curpath  repre‐
       sents  an  intermediate value used to simplify the description of the algorithm used by cd.  There is no requirement that
       curpath be made visible to the application.)

        1. If no directory operand is given and the HOME environment variable is empty or undefined,  the  default  behavior  is
           implementation-defined and no further steps shall be taken.

        2. If  no directory operand is given and the HOME environment variable is set to a non-empty value, the cd utility shall
           behave as if the directory named in the HOME environment variable was specified as the directory operand.

        3. If the directory operand begins with a &amp;lt;slash&amp;gt; character, set curpath to the operand and proceed to step 7.

        4. If the first component of the directory operand is dot or dot-dot, proceed to step 6.

        5. Starting with the first pathname in the &amp;lt;colon&amp;gt;-separated pathnames of CDPATH (see the ENVIRONMENT VARIABLES section)
           if the pathname is non-null, test if the concatenation of that pathname, a &amp;lt;slash&amp;gt; character if that pathname did not
           end with a &amp;lt;slash&amp;gt; character, and the directory operand names a directory. If the pathname is null, test if the  con‐
           catenation  of  dot,  a &amp;lt;slash&amp;gt; character, and the operand names a directory. In either case, if the resulting string
           names an existing directory, set curpath to that string and proceed to step 7. Otherwise, repeat this step  with  the
           next pathname in CDPATH until all pathnames have been tested.

        6. Set curpath to the directory operand.

        7. If the −P option is in effect, proceed to step 10. If curpath does not begin with a &amp;lt;slash&amp;gt; character, set curpath to
           the string formed by the concatenation of the value of PWD, a &amp;lt;slash&amp;gt; character if the value of PWD did not end  with
           a &amp;lt;slash&amp;gt; character, and curpath.

        8. The  curpath value shall then be converted to canonical form as follows, considering each component from beginning to
           end, in sequence:

            a. Dot components and any &amp;lt;slash&amp;gt; characters that separate them from the next component shall be deleted.

            b. For each dot-dot component, if there is a preceding component and it is neither root nor dot-dot, then:

                i.  If the preceding component does not refer (in the context of pathname resolution with  symbolic  links  fol‐
                    lowed)  to  a directory, then the cd utility shall display an appropriate error message and no further steps
                    shall be taken.

               ii.  The preceding component, all &amp;lt;slash&amp;gt; characters separating the preceding component  from  dot-dot,  dot-dot,
                    and all &amp;lt;slash&amp;gt; characters separating dot-dot from the following component (if any) shall be deleted.

            c. An  implementation  may  further  simplify  curpath by removing any trailing &amp;lt;slash&amp;gt; characters that are not also
               leading &amp;lt;slash&amp;gt; characters, replacing multiple non-leading consecutive &amp;lt;slash&amp;gt; characters with a single  &amp;lt;slash&amp;gt;,
               and replacing three or more leading &amp;lt;slash&amp;gt; characters with a single &amp;lt;slash&amp;gt;.  If, as a result of this canonical‐
               ization, the curpath variable is null, no further steps shall be taken.

        9. If curpath is longer than {PATH_MAX} bytes (including the terminating null) and the directory operand was not  longer
           than  {PATH_MAX} bytes (including the terminating null), then curpath shall be converted from an absolute pathname to
           an equivalent relative pathname if possible. This conversion shall always be considered possible if the value of PWD,
           with a trailing &amp;lt;slash&amp;gt; added if it does not already have one, is an initial substring of curpath.  Whether or not it
           is considered possible under other circumstances is unspecified. Implementations may also apply  this  conversion  if
           curpath is not longer than {PATH_MAX} bytes or the directory operand was longer than {PATH_MAX} bytes.

       10. The  cd  utility  shall then perform actions equivalent to the chdir() function called with curpath as the path argu‐
           ment. If these actions fail for any reason, the cd utility shall display an appropriate error message and the remain‐
           der  of this step shall not be executed. If the −P option is not in effect, the PWD environment variable shall be set
           to the value that curpath had on entry to step 9 (i.e., before conversion to a relative pathname). If the  −P  option
           is  in  effect,  the PWD environment variable shall be set to the string that would be output by pwd −P.  If there is
           insufficient permission on the new directory, or on any parent of that directory, to determine  the  current  working
           directory, the value of the PWD environment variable is unspecified.

       If,  during  the execution of the above steps, the PWD environment variable is set, the OLDPWD environment variable shall
       also be set to the value of the old working directory (that is the current working directory  immediately  prior  to  the
       call to cd).

OPTIONS
       The cd utility shall conform to the Base Definitions volume of POSIX.1‐2008, Section 12.2, Utility Syntax Guidelines.

       The following options shall be supported by the implementation:

       −L        Handle  the operand dot-dot logically; symbolic link components shall not be resolved before dot-dot components
                 are processed (see steps 8.  and 9. in the DESCRIPTION).

       −P        Handle the operand dot-dot physically; symbolic link components shall be resolved before dot-dot components are
                 processed (see step 7. in the DESCRIPTION).

       If  both  −L  and −P options are specified, the last of these options shall be used and all others ignored. If neither −L
       nor −P is specified, the operand shall be handled dot-dot logically; see the DESCRIPTION.

OPERANDS
       The following operands shall be supported:

       directory An absolute or relative pathname of the directory that shall become the new working directory. The  interpreta‐
                 tion  of  a  relative  pathname by cd depends on the −L option and the CDPATH and PWD environment variables. If
                 directory is an empty string, the results are unspecified.

       −         When a &amp;lt;hyphen&amp;gt; is used as the operand, this shall be equivalent to the command:

                     cd "$OLDPWD" &amp;&amp; pwd

                 which changes to the previous working directory and then writes its name.

STDIN
       Not used.

INPUT FILES
       None.

<!-- 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 <=< ACCEPT -->ENVIRONMENT VARIABLES
       The following environment variables shall affect the execution of cd:

       CDPATH    A &amp;lt;colon&amp;gt;-separated list of pathnames that refer to directories. The cd utility shall  use  this  list  in  its
                 attempt to change the directory, as described in the DESCRIPTION. An empty string in place of a directory path‐
                 name represents the current directory. If CDPATH is not set, it shall be treated as if it were an empty string.

       HOME      The name of the directory, used when no directory operand is specified.

       LANG      Provide a default value for the internationalization variables that are unset or null. (See  the  Base  Defini‐
                 tions  volume of POSIX.1‐2008, Section 8.2, Internationalization Variables for the precedence of international‐
                 ization variables used to determine the values of locale categories.)

       LC_ALL    If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_CTYPE  Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, sin‐
                 gle-byte as opposed to multi-byte characters in arguments).

       LC_MESSAGES
                 Determine  the  locale  that should be used to affect the format and contents of diagnostic messages written to
                 standard error.

       NLSPATH   Determine the location of message catalogs for the processing of LC_MESSAGES.<!-- ACCEPT >=> 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 -->

       OLDPWD    A pathname of the previous working directory, used by cd −.

       PWD       This variable shall be set as specified in the DESCRIPTION. If an application sets or unsets the value of  PWD,
                 the behavior of cd is unspecified.

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       If  a non-empty directory name from CDPATH is used, or if cd − is used, an absolute pathname of the new working directory
       shall be written to the standard output as follows:

           "%s\n", &amp;lt;new directory&amp;gt;

       Otherwise, there shall be no output.

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       None.

<!-- a42f9355-e63b-4205-ac0b-0b19b24faf9d <=< ACCEPT -->EXIT STATUS
       The following exit values shall be returned:

        0    The directory was successfully changed.

       &amp;gt;0    An error occurred.<!-- ACCEPT >=> a42f9355-e63b-4205-ac0b-0b19b24faf9d -->

CONSEQUENCES OF ERRORS
       The working directory shall remain unchanged.

       The following sections are informative.

APPLICATION USAGE
       Since cd affects the current shell execution environment, it is always provided as a shell regular  built-in.  If  it  is
       called in a subshell or separate utility execution environment, such as one of the following:

           (cd /tmp)
           nohup cd
           find . −exec cd {} \;

       it does not affect the working directory of the caller's environment.

       The user must have execute (search) permission in directory in order to change to it.

EXAMPLES
       The following template can be used to perform processing in the directory specified by location and end up in the current
       working directory in use before the first cd command was issued:

           cd location
           if [ $? -ne 0 ]
           then
               print error message
               exit 1
           fi
           ... do whatever is desired as long as the OLDPWD environment variable
               is not modified
           cd -

RATIONALE
       The use of the CDPATH was introduced in the System V shell. Its use is analogous to the use of the PATH variable  in  the
       shell. The BSD C shell used a shell parameter cdpath for this purpose.

       A  common  extension  when  HOME is undefined is to get the login directory from the user database for the invoking user.
       This does not occur on System V implementations.

       Some historical shells, such as the KornShell, took special actions when the directory name contained  a  dot-dot  compo‐
       nent,  selecting  the  logical parent of the directory, rather than the actual parent directory; that is, it moved up one
       level toward the '/' in the pathname, remembering what the user typed, rather than performing the equivalent of:

           chdir("..");

       In such a shell, the following commands would not necessarily produce equivalent output for all directories:

           cd .. &amp;&amp; ls      ls ..

       This behavior is now the default. It is not consistent with the definition of dot-dot in most historical  practice;  that
       is, while this behavior has been optionally available in the KornShell, other shells have historically not supported this
       functionality. The logical pathname is stored in the PWD environment variable when the  cd  utility  completes  and  this
       value is used to construct the next directory name if cd is invoked with the −L option.

FUTURE DIRECTIONS
       None.

SEE ALSO
       Section 2.12, Shell Execution Environment, pwd

       The Base Definitions volume of POSIX.1‐2008, Chapter 8, Environment Variables, Section 12.2, Utility Syntax Guidelines

       The System Interfaces volume of POSIX.1‐2008, chdir()

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions  of  this  text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013 Edition, Standard for
       Information Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7,  Copy‐
       right  (C)  2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This is POSIX.1-2008
       with the 2013 Technical Corrigendum 1 applied.) In the event of any discrepancy between this  version  and  the  original
       IEEE  and  The  Open  Group Standard, the original IEEE and The Open Group Standard is the referee document. The original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any typographical or formatting errors that appear in this page are most likely to have been introduced during  the  con‐
       version  of  the source files to man page format. To report such errors, see https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                        CD(1P)
CFLOW(1P)                                           POSIX Programmer's Manual                                          CFLOW(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->

NAME
       cflow — generate a C-language flowgraph (DEVELOPMENT)

SYNOPSIS
       cflow [−r] [−d num] [−D name[=def]]... [−i incl] [−I dir]...
           [−U dir]... file...

DESCRIPTION
       The  cflow  utility  shall  analyze a collection of object files or assembler, C-language, lex, or yacc source files, and
       attempt to build a graph, written to standard output, charting the external references.

OPTIONS
       The cflow utility shall conform to the Base Definitions volume of POSIX.1‐2008, Section 12.2, Utility Syntax  Guidelines,
       except that the order of the −D, −I, and −U options (which are identical to their interpretation by c99) is significant.

       The following options shall be supported:

       −d num    Indicate  the  depth at which the flowgraph is cut off. The application shall ensure that the argument num is a
                 decimal integer. By default this is a very large number (typically greater than 32000).  Attempts  to  set  the
                 cut-off depth to a non-positive integer shall be ignored.

       −i incl   Increase the number of included symbols. The incl option-argument is one of the following characters:

                 x     Include  external  and  static  data symbols. The default shall be to include only functions in the flow‐
                       graph.

                 _     (Underscore) Include names that begin with an &amp;lt;underscore&amp;gt;.  The default shall be to exclude these  func‐
                       tions (and data if −i x is used).

       −r        Reverse the caller:callee relationship, producing an inverted listing showing the callers of each function. The
                 listing shall also be sorted in lexicographical order by callee.

OPERANDS
       The following operand is supported:

       file      The pathname of a file for which a graph is to be generated.  Filenames suffixed by .l shall shall be taken  to
                 be lex input, .y as yacc input, .c as c99 input, and .i as the output of c99 −E.  Such files shall be processed
                 as appropriate, determined by their suffix.

                 Files suffixed by .s (conventionally assembler source) may have more limited information extracted from them.

STDIN
       Not used.

INPUT FILES
       The input files shall be object files or assembler, C-language, lex, or yacc source files.

<!-- 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 <=< ACCEPT -->ENVIRONMENT VARIABLES
       The following environment variables shall affect the execution of cflow:

       LANG      Provide a default value for the internationalization variables that are unset or null. (See  the  Base  Defini‐
                 tions  volume of POSIX.1‐2008, Section 8.2, Internationalization Variables for the precedence of international‐
                 ization variables used to determine the values of locale categories.)

       LC_ALL    If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_COLLATE
                 Determine the locale for the ordering of the output when the −r option is used.

       LC_CTYPE  Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, sin‐
                 gle-byte as opposed to multi-byte characters in arguments and input files).

       LC_MESSAGES
                 Determine  the  locale  that should be used to affect the format and contents of diagnostic messages written to
                 standard error.

       NLSPATH   Determine the location of message catalogs for the processing of LC_MESSAGES.<!-- ACCEPT >=> 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 -->

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       The flowgraph written to standard output shall be formatted as follows:

           "%d %s:%s\n", &amp;lt;reference number&amp;gt;, &amp;lt;global&amp;gt;, &amp;lt;definition&amp;gt;

       Each line of output begins with a reference (that is, line) number, followed by indentation of at least one column  posi‐
       tion  per  level.   This  is followed by the name of the global, a &amp;lt;colon&amp;gt;, and its definition. Normally globals are only
       functions not defined as an external or beginning with an &amp;lt;underscore&amp;gt;; see the OPTIONS  section  for  the  −i  inclusion
       option.  For  information  extracted from C-language source, the definition consists of an abstract type declaration (for
       example, char *) and, delimited by angle brackets, the name of the source file and the line number where  the  definition
       was  found.  Definitions  extracted  from  object files indicate the filename and location counter under which the symbol
       appeared (for example, text).

       Once a definition of a name has been written, subsequent references to that name contain only the reference number of the
       line where the definition can be found. For undefined references, only "&amp;lt;&amp;gt;" shall be written.

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       None.

<!-- a42f9355-e63b-4205-ac0b-0b19b24faf9d <=< ACCEPT -->EXIT STATUS
       The following exit values shall be returned:

        0    Successful completion.

       &amp;gt;0    An error occurred.<!-- ACCEPT >=> a42f9355-e63b-4205-ac0b-0b19b24faf9d -->

CONSEQUENCES OF ERRORS
       Default.

       The following sections are informative.

APPLICATION USAGE
       Files  produced  by lex and yacc cause the reordering of line number declarations, and this can confuse cflow.  To obtain
       proper results, the input of yacc or lex must be directed to cflow.

EXAMPLES
       Given the following in file.c:

           int i;
           int f();
           int g();
           int h();
           int
           main()
           {
               f();
               g();
               f();
           }
           int
           f()
           {
               i = h();
           }

       The command:

           cflow −i x file.c

       produces the output:

           1 main: int(), &amp;lt;file.c 6&amp;gt;
           2    f: int(), &amp;lt;file.c 13&amp;gt;
           3        h: &amp;lt;&amp;gt;
           4        i: int, &amp;lt;file.c 1&amp;gt;
           5    g: &amp;lt;&amp;gt;

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       c99, lex, yacc

       The Base Definitions volume of POSIX.1‐2008, Chapter 8, Environment Variables, Section 12.2, Utility Syntax Guidelines

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013  Edition,  Standard  for
       Information  Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7, Copy‐
       right (C) 2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This  is  POSIX.1-2008
       with  the  2013  Technical  Corrigendum 1 applied.) In the event of any discrepancy between this version and the original
       IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the  referee  document.  The  original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any  typographical  or formatting errors that appear in this page are most likely to have been introduced during the con‐
       version of the source files to man page format. To report such errors,  see  https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                     CFLOW(1P)
CHGRP(1)                                                  User Commands                                                 CHGRP(1)

NAME
       chgrp - change group ownership

SYNOPSIS
       chgrp [OPTION]... GROUP FILE...
       chgrp [OPTION]... --reference=RFILE FILE...

DESCRIPTION
       Change the group of each FILE to GROUP.  With --reference, change the group of each FILE to that of RFILE.

       -c, --changes
              like verbose but report only when a change is made

       -f, --silent, --quiet
              suppress most error messages

       -v, --verbose
              output a diagnostic for every file processed

       --dereference
              affect the referent of each symbolic link (this is the default), rather than the symbolic link itself

       -h, --no-dereference
              affect  symbolic  links  instead of any referenced file (useful only on systems that can change the ownership of a
              symlink)

       --no-preserve-root
              do not treat '/' specially (the default)

       --preserve-root
              fail to operate recursively on '/'

       --reference=RFILE
              use RFILE's group rather than specifying a GROUP value

       -R, --recursive
              operate on files and directories recursively

       The following options modify how a hierarchy is traversed when the -R option is also specified.   If  more  than  one  is
       specified, only the final one takes effect.

       -H     if a command line argument is a symbolic link to a directory, traverse it

       -L     traverse every symbolic link to a directory encountered

       -P     do not traverse any symbolic links (default)

       --help display this help and exit

       --version
              output version information and exit

EXAMPLES
       chgrp staff /u
              Change the group of /u to "staff".

       chgrp -hR staff /u
              Change the group of /u and subfiles to "staff".

AUTHOR
       Written by David MacKenzie and Jim Meyering.

<!-- 30b0cf8a-458a-435b-a2e0-993472636e53 <=< ACCEPT -->REPORTING BUGS
       GNU coreutils online help: &amp;lt;http://www.gnu.org/software/coreutils/&amp;gt;
       Report chgrp translation bugs to &amp;lt;http://translationproject.org/team/&amp;gt;

COPYRIGHT
       Copyright    ©    2016   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3   or   later
       &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.<!-- ACCEPT >=> 30b0cf8a-458a-435b-a2e0-993472636e53 -->

SEE ALSO
       chown(1), chown(2)

       Full documentation at: &amp;lt;http://www.gnu.org/software/coreutils/chgrp&amp;gt;
       or available locally via: info '(coreutils) chgrp invocation'

GNU coreutils 8.26                                        November 2016                                                 CHGRP(1)
CHMOD(1)                                                  User Commands                                                 CHMOD(1)

NAME
       chmod - change file mode bits

SYNOPSIS
       chmod [OPTION]... MODE[,MODE]... FILE...
       chmod [OPTION]... OCTAL-MODE FILE...
       chmod [OPTION]... --reference=RFILE FILE...

DESCRIPTION
       This  manual  page  documents the GNU version of chmod.  chmod changes the file mode bits of each given file according to
       mode, which can be either a symbolic representation of changes to make, or an octal number representing the  bit  pattern
       for the new mode bits.

       The  format  of a symbolic mode is [ugoa...][[-+=][perms...]...], where perms is either zero or more letters from the set
       rwxXst, or a single letter from the set ugo.  Multiple symbolic modes can be given, separated by commas.

       A combination of the letters ugoa controls which users' access to the file will be changed: the user  who  owns  it  (u),
       other  users  in  the  file's group (g), other users not in the file's group (o), or all users (a).  If none of these are
       given, the effect is as if (a) were given, but bits that are set in the umask are not affected.

       The operator + causes the selected file mode bits to be added to the existing file mode bits of each file; - causes  them
       to  be  removed; and = causes them to be added and causes unmentioned bits to be removed except that a directory's unmen‐
       tioned set user and group ID bits are not affected.

       The letters rwxXst select file mode bits for the affected users: read (r), write (w), execute (or search for directories)
       (x),  execute/search  only  if  the  file is a directory or already has execute permission for some user (X), set user or
       group ID on execution (s), restricted deletion flag or sticky bit (t).  Instead of one or more of these letters, you  can
       specify  exactly  one  of  the  letters  ugo:  the permissions granted to the user who owns the file (u), the permissions
       granted to other users who are members of the file's group (g), and the permissions granted to users that are in  neither
       of the two preceding categories (o).

       A  numeric  mode  is from one to four octal digits (0-7), derived by adding up the bits with values 4, 2, and 1.  Omitted
       digits are assumed to be leading zeros.  The first digit selects the set user ID (4) and set group ID (2) and  restricted
       deletion  or sticky (1) attributes.  The second digit selects permissions for the user who owns the file: read (4), write
       (2), and execute (1); the third selects permissions for other users in the file's group, with the same  values;  and  the
       fourth for other users not in the file's group, with the same values.

       chmod  never  changes  the permissions of symbolic links; the chmod system call cannot change their permissions.  This is
       not a problem since the permissions of symbolic links are never used.  However, for each symbolic link listed on the com‐
       mand  line,  chmod changes the permissions of the pointed-to file.  In contrast, chmod ignores symbolic links encountered
       during recursive directory traversals.

SETUID AND SETGID BITS
       chmod clears the set-group-ID bit of a regular file if the file's group ID does not match the user's effective  group  ID
       or  one  of  the user's supplementary group IDs, unless the user has appropriate privileges.  Additional restrictions may
       cause the set-user-ID and set-group-ID bits of MODE or RFILE to be ignored.  This behavior  depends  on  the  policy  and
       functionality of the underlying chmod system call.  When in doubt, check the underlying system behavior.

       chmod  preserves a directory's set-user-ID and set-group-ID bits unless you explicitly specify otherwise.  You can set or
       clear the bits with symbolic modes like u+s and g-s, and you can set (but not clear) the bits with a numeric mode.

RESTRICTED DELETION FLAG OR STICKY BIT
       The restricted deletion flag or sticky bit is a single bit, whose interpretation depends on the file type.  For  directo‐
       ries,  it  prevents  unprivileged users from removing or renaming a file in the directory unless they own the file or the
       directory; this is called the restricted deletion flag for the directory, and is commonly found on world-writable  direc‐
       tories  like /tmp.  For regular files on some older systems, the bit saves the program's text image on the swap device so
       it will load more quickly when run; this is called the sticky bit.

OPTIONS
       Change the mode of each FILE to MODE.  With --reference, change the mode of each FILE to that of RFILE.

       -c, --changes
              like verbose but report only when a change is made

       -f, --silent, --quiet
              suppress most error messages

       -v, --verbose
              output a diagnostic for every file processed

       --no-preserve-root
              do not treat '/' specially (the default)

       --preserve-root
              fail to operate recursively on '/'

       --reference=RFILE
              use RFILE's mode instead of MODE values

       -R, --recursive
              change files and directories recursively

       --help display this help and exit

       --version
              output version information and exit

       Each MODE is of the form '[ugoa]*([-+=]([rwxXst]*|[ugo]))+|[-+=][0-7]+'.

AUTHOR
       Written by David MacKenzie and Jim Meyering.

<!-- 30b0cf8a-458a-435b-a2e0-993472636e53 <=< ACCEPT -->REPORTING BUGS
       GNU coreutils online help: &amp;lt;http://www.gnu.org/software/coreutils/&amp;gt;
       Report chmod translation bugs to &amp;lt;http://translationproject.org/team/&amp;gt;

COPYRIGHT
       Copyright   ©   2016   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3    or    later
       &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.<!-- ACCEPT >=> 30b0cf8a-458a-435b-a2e0-993472636e53 -->

SEE ALSO
       chmod(2)

       Full documentation at: &amp;lt;http://www.gnu.org/software/coreutils/chmod&amp;gt;
       or available locally via: info '(coreutils) chmod invocation'

GNU coreutils 8.26                                        November 2016                                                 CHMOD(1)
CHOWN(1)                                                  User Commands                                                 CHOWN(1)

NAME
       chown - change file owner and group

SYNOPSIS
       chown [OPTION]... [OWNER][:[GROUP]] FILE...
       chown [OPTION]... --reference=RFILE FILE...

DESCRIPTION
       This  manual  page documents the GNU version of chown.  chown changes the user and/or group ownership of each given file.
       If only an owner (a user name or numeric user ID) is given, that user is made the owner  of  each  given  file,  and  the
       files'  group is not changed.  If the owner is followed by a colon and a group name (or numeric group ID), with no spaces
       between them, the group ownership of the files is changed as well.  If a colon but no group name follows the  user  name,
       that  user is made the owner of the files and the group of the files is changed to that user's login group.  If the colon
       and group are given, but the owner is omitted, only the group of the files is changed; in this case, chown  performs  the
       same  function as chgrp.  If only a colon is given, or if the entire operand is empty, neither the owner nor the group is
       changed.

OPTIONS
       Change the owner and/or group of each FILE to OWNER and/or GROUP.  With --reference, change the owner and group  of  each
       FILE to those of RFILE.

       -c, --changes
              like verbose but report only when a change is made

       -f, --silent, --quiet
              suppress most error messages

       -v, --verbose
              output a diagnostic for every file processed

       --dereference
              affect the referent of each symbolic link (this is the default), rather than the symbolic link itself

       -h, --no-dereference
              affect  symbolic  links  instead of any referenced file (useful only on systems that can change the ownership of a
              symlink)

       --from=CURRENT_OWNER:CURRENT_GROUP
              change the owner and/or group of each file only if its current owner and/or  group  match  those  specified  here.
              Either may be omitted, in which case a match is not required for the omitted attribute

       --no-preserve-root
              do not treat '/' specially (the default)

       --preserve-root
              fail to operate recursively on '/'

       --reference=RFILE
              use RFILE's owner and group rather than specifying OWNER:GROUP values

       -R, --recursive
              operate on files and directories recursively

       The  following  options  modify  how  a hierarchy is traversed when the -R option is also specified.  If more than one is
       specified, only the final one takes effect.

       -H     if a command line argument is a symbolic link to a directory, traverse it

       -L     traverse every symbolic link to a directory encountered

       -P     do not traverse any symbolic links (default)

       --help display this help and exit

       --version
              output version information and exit

       Owner is unchanged if missing.  Group is unchanged if missing, but changed to login group if implied by a ':' following a
       symbolic OWNER.  OWNER and GROUP may be numeric as well as symbolic.

EXAMPLES
       chown root /u
              Change the owner of /u to "root".

       chown root:staff /u
              Likewise, but also change its group to "staff".

       chown -hR root /u
              Change the owner of /u and subfiles to "root".

AUTHOR
       Written by David MacKenzie and Jim Meyering.

<!-- 30b0cf8a-458a-435b-a2e0-993472636e53 <=< ACCEPT -->REPORTING BUGS
       GNU coreutils online help: &amp;lt;http://www.gnu.org/software/coreutils/&amp;gt;
       Report chown translation bugs to &amp;lt;http://translationproject.org/team/&amp;gt;

COPYRIGHT
       Copyright    ©    2016   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3   or   later
       &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.<!-- ACCEPT >=> 30b0cf8a-458a-435b-a2e0-993472636e53 -->

SEE ALSO
       chown(2)

       Full documentation at: &amp;lt;http://www.gnu.org/software/coreutils/chown&amp;gt;
       or available locally via: info '(coreutils) chown invocation'

GNU coreutils 8.26                                        November 2016                                                 CHOWN(1)
CKSUM(1)                                                  User Commands                                                 CKSUM(1)

NAME
       cksum - checksum and count the bytes in a file

SYNOPSIS
       cksum [FILE]...
       cksum [OPTION]

DESCRIPTION
       Print CRC checksum and byte counts of each FILE.

       --help display this help and exit

       --version
              output version information and exit

AUTHOR
       Written by Q. Frank Xia.

<!-- 30b0cf8a-458a-435b-a2e0-993472636e53 <=< ACCEPT -->REPORTING BUGS
       GNU coreutils online help: &amp;lt;http://www.gnu.org/software/coreutils/&amp;gt;
       Report cksum translation bugs to &amp;lt;http://translationproject.org/team/&amp;gt;

COPYRIGHT
       Copyright    ©    2016   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3   or   later
       &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.<!-- ACCEPT >=> 30b0cf8a-458a-435b-a2e0-993472636e53 -->

SEE ALSO
       Full documentation at: &amp;lt;http://www.gnu.org/software/coreutils/cksum&amp;gt;
       or available locally via: info '(coreutils) cksum invocation'

GNU coreutils 8.26                                        November 2016                                                 CKSUM(1)
CMP(1)                                                    User Commands                                                   CMP(1)

NAME
       cmp - compare two files byte by byte

SYNOPSIS
       cmp [OPTION]... FILE1 [FILE2 [SKIP1 [SKIP2]]]

DESCRIPTION
       Compare two files byte by byte.

       The optional SKIP1 and SKIP2 specify the number of bytes to skip at the beginning of each file (zero by default).

       Mandatory arguments to long options are mandatory for short options too.

       -b, --print-bytes
              print differing bytes

       -i, --ignore-initial=SKIP
              skip first SKIP bytes of both inputs

       -i, --ignore-initial=SKIP1:SKIP2
              skip first SKIP1 bytes of FILE1 and first SKIP2 bytes of FILE2

       -l, --verbose
              output byte numbers and differing byte values

       -n, --bytes=LIMIT
              compare at most LIMIT bytes

       -s, --quiet, --silent
              suppress all normal output

       --help display this help and exit

       -v, --version
              output version information and exit

       SKIP  values  may  be  followed  by the following multiplicative suffixes: kB 1000, K 1024, MB 1,000,000, M 1,048,576, GB
       1,000,000,000, G 1,073,741,824, and so on for T, P, E, Z, Y.

       If a FILE is '-' or missing, read standard input.  Exit status is 0 if inputs are the same, 1 if different, 2 if trouble.

AUTHOR
       Written by Torbjorn Granlund and David MacKenzie.

REPORTING BUGS
       Report bugs to: bug-diffutils@gnu.org
       GNU diffutils home page: &amp;lt;http://www.gnu.org/software/diffutils/&amp;gt;
       General help using GNU software: &amp;lt;http://www.gnu.org/gethelp/&amp;gt;

COPYRIGHT
       Copyright   ©   2016   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3    or    later
       &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       diff(1), diff3(1), sdiff(1)

       The full documentation for cmp is maintained as a Texinfo manual.  If the info and cmp programs are properly installed at
       your site, the command

              info cmp

       should give you access to the complete manual.

diffutils 3.5                                              August 2016                                                    CMP(1)
COLON(1P)                                           POSIX Programmer's Manual                                          COLON(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->

NAME
       colon — null utility

SYNOPSIS
       : [argument...]

DESCRIPTION
       This utility shall only expand command arguments.  It is used when a command is needed, as in the then condition of an if
       command, but nothing is to be done by the command.

OPTIONS
       None.

OPERANDS
       See the DESCRIPTION.

<!-- fe96d119-27ce-4a62-99a9-ff5840fe1a84 <=< ACCEPT -->STDIN
       Not used.

INPUT FILES
       None.

ENVIRONMENT VARIABLES
       None.

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       Not used.

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       None.

EXIT STATUS
       Zero.

CONSEQUENCES OF ERRORS
       Default.
<!-- ACCEPT >=> fe96d119-27ce-4a62-99a9-ff5840fe1a84 -->
       The following sections are informative.

APPLICATION USAGE
       None.

EXAMPLES
       : ${X=abc}
       if     false
       then   :
       else   echo $X
       fi
       abc

       As with any of the special built-ins, the null utility can also have variable  assignments  and  redirections  associated
       with it, such as:

           x=y : &amp;gt; z

       which sets variable x to the value y (so that it persists after the null utility completes) and creates or truncates file
       z.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       Section 2.14, Special Built-In Utilities

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013  Edition,  Standard  for
       Information  Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7, Copy‐
       right (C) 2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This  is  POSIX.1-2008
       with  the  2013  Technical  Corrigendum 1 applied.) In the event of any discrepancy between this version and the original
       IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the  referee  document.  The  original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any  typographical  or formatting errors that appear in this page are most likely to have been introduced during the con‐
       version of the source files to man page format. To report such errors,  see  https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                     COLON(1P)
COMM(1)                                                   User Commands                                                  COMM(1)

NAME
       comm - compare two sorted files line by line

SYNOPSIS
       comm [OPTION]... FILE1 FILE2

DESCRIPTION
       Compare sorted files FILE1 and FILE2 line by line.

       When FILE1 or FILE2 (not both) is -, read standard input.

       With  no  options,  produce  three-column  output.   Column one contains lines unique to FILE1, column two contains lines
       unique to FILE2, and column three contains lines common to both files.

       -1     suppress column 1 (lines unique to FILE1)

       -2     suppress column 2 (lines unique to FILE2)

       -3     suppress column 3 (lines that appear in both files)

       --check-order
              check that the input is correctly sorted, even if all input lines are pairable

       --nocheck-order
              do not check that the input is correctly sorted

       --output-delimiter=STR
              separate columns with STR

       --total
              output a summary

       -z, --zero-terminated
              line delimiter is NUL, not newline

       --help display this help and exit

       --version
              output version information and exit

       Note, comparisons honor the rules specified by 'LC_COLLATE'.

EXAMPLES
       comm -12 file1 file2
              Print only lines present in both file1 and file2.

       comm -3 file1 file2
              Print lines in file1 not in file2, and vice versa.

AUTHOR
       Written by Richard M. Stallman and David MacKenzie.

<!-- 30b0cf8a-458a-435b-a2e0-993472636e53 <=< ACCEPT -->REPORTING BUGS
       GNU coreutils online help: &amp;lt;http://www.gnu.org/software/coreutils/&amp;gt;
       Report comm translation bugs to &amp;lt;http://translationproject.org/team/&amp;gt;

COPYRIGHT
       Copyright   ©   2016   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3    or    later
       &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.<!-- ACCEPT >=> 30b0cf8a-458a-435b-a2e0-993472636e53 -->

SEE ALSO
       join(1), uniq(1)

       Full documentation at: &amp;lt;http://www.gnu.org/software/coreutils/comm&amp;gt;
       or available locally via: info '(coreutils) comm invocation'

GNU coreutils 8.26                                        November 2016                                                  COMM(1)
COMMAND(1P)                                         POSIX Programmer's Manual                                        COMMAND(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->

NAME
       command — execute a simple command

SYNOPSIS
       command [−p] command_name [argument...]

       command [−p][−v|−V] command_name

DESCRIPTION
       The  command  utility  shall  cause  the shell to treat the arguments as a simple command, suppressing the shell function
       lookup that is described in Section 2.9.1.1, Command Search and Execution, item 1b.

       If the command_name is the same as the name of one of the special built-in utilities, the special properties in the  enu‐
       merated  list  at  the  beginning of Section 2.14, Special Built-In Utilities shall not occur. In every other respect, if
       command_name is not the name of a function, the effect of command (with no options) shall be the same  as  omitting  com‐
       mand.

       When  the  −v or −V option is used, the command utility shall provide information concerning how a command name is inter‐
       preted by the shell.

OPTIONS
       The command utility shall conform to the Base Definitions volume of POSIX.1‐2008, Section  12.2,  Utility  Syntax  Guide‐
       lines.

       The following options shall be supported:

       −p        Perform the command search using a default value for PATH that is guaranteed to find all of the standard utili‐
                 ties.

       −v        Write a string to standard output that indicates the pathname or command that will be used by the shell, in the
                 current  shell  execution  environment (see Section 2.12, Shell Execution Environment), to invoke command_name,
                 but do not invoke command_name.

                  *  Utilities, regular built-in utilities, command_names including a &amp;lt;slash&amp;gt; character, and any implementation-
                     defined  functions  that are found using the PATH variable (as described in Section 2.9.1.1, Command Search
                     and Execution), shall be written as absolute pathnames.

                  *  Shell functions, special built-in utilities, regular built-in utilities not associated with a PATH  search,
                     and shell reserved words shall be written as just their names.

                  *  An alias shall be written as a command line that represents its alias definition.

                  *  Otherwise, no output shall be written and the exit status shall reflect that the name was not found.

       −V        Write  a string to standard output that indicates how the name given in the command_name operand will be inter‐
                 preted by the shell, in the current shell execution environment (see Section  2.12,  Shell  Execution  Environ‐
                 ment), but do not invoke command_name.  Although the format of this string is unspecified, it shall indicate in
                 which of the following categories command_name falls and shall include the information stated:

                  *  Utilities, regular built-in utilities, and any implementation-defined functions that are  found  using  the
                     PATH  variable (as described in Section 2.9.1.1, Command Search and Execution), shall be identified as such
                     and include the absolute pathname in the string.

                  *  Other shell functions shall be identified as functions.

                  *  Aliases shall be identified as aliases and their definitions included in the string.

                  *  Special built-in utilities shall be identified as special built-in utilities.

                  *  Regular built-in utilities not associated with a PATH search shall be identified as regular built-in utili‐
                     ties. (The term ``regular'' need not be used.)

                  *  Shell reserved words shall be identified as reserved words.

OPERANDS
       The following operands shall be supported:

       argument  One of the strings treated as an argument to command_name.

       command_name
                 The name of a utility or a special built-in utility.

STDIN
       Not used.

INPUT FILES
       None.

<!-- 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 <=< ACCEPT -->ENVIRONMENT VARIABLES
       The following environment variables shall affect the execution of command:

       LANG      Provide  a  default  value for the internationalization variables that are unset or null. (See the Base Defini‐
                 tions volume of POSIX.1‐2008, Section 8.2, Internationalization Variables for the precedence of  international‐
                 ization variables used to determine the values of locale categories.)

       LC_ALL    If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_CTYPE  Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, sin‐
                 gle-byte as opposed to multi-byte characters in arguments).

       LC_MESSAGES
                 Determine the locale that should be used to affect the format and contents of diagnostic  messages  written  to
                 standard error and informative messages written to standard output.

       NLSPATH   Determine the location of message catalogs for the processing of LC_MESSAGES.<!-- ACCEPT >=> 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 -->

       PATH      Determine  the search path used during the command search described in Section 2.9.1.1, Command Search and Exe‐
                 cution, except as described under the −p option.

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       When the −v option is specified, standard output shall be formatted as:

           "%s\n", &amp;lt;pathname or command&amp;gt;

       When the −V option is specified, standard output shall be formatted as:

           "%s\n", &amp;lt;unspecified&amp;gt;

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       None.

EXIT STATUS
       When the −v or −V options are specified, the following exit values shall be returned:

        0    Successful completion.

       &amp;gt;0    The command_name could not be found or an error occurred.

       Otherwise, the following exit values shall be returned:

       126   The utility specified by command_name was found but could not be invoked.

       127   An error occurred in the command utility or the utility specified by command_name could not be found.

       Otherwise, the exit status of command shall be that of the simple command specified by the arguments to command.

CONSEQUENCES OF ERRORS
       Default.

       The following sections are informative.

APPLICATION USAGE
       The order for command search allows functions to override regular built-ins and path searches. This utility is  necessary
       to  allow  functions  that  have the same name as a utility to call the utility (instead of a recursive call to the func‐
       tion).

       The system default path is available using getconf; however, since getconf may need to have the PATH set up before it can
       be called itself, the following can be used:

           command −p getconf PATH

       There are some advantages to suppressing the special characteristics of special built-ins on occasion. For example:

           command exec &amp;gt; unwritable-file

       does not cause a non-interactive script to abort, so that the output status can be checked by the script.

       The  command,  env,  nohup, time, and xargs utilities have been specified to use exit code 127 if an error occurs so that
       applications can distinguish ``failure to find a utility'' from ``invoked utility exited with an error indication''.  The
       value  127  was  chosen  because it is not commonly used for other meanings; most utilities use small values for ``normal
       error conditions'' and the values above 128 can be confused with termination due to receipt of a signal.  The  value  126
       was  chosen  in a similar manner to indicate that the utility could be found, but not invoked. Some scripts produce mean‐
       ingful error messages differentiating the 126 and 127 cases. The distinction between exit codes 126 and 127 is  based  on
       KornShell  practice that uses 127 when all attempts to exec the utility fail with [ENOENT], and uses 126 when any attempt
       to exec the utility fails for any other reason.

       Since the −v and −V options of command produce output in relation to the current shell execution environment, command  is
       generally  provided as a shell regular built-in. If it is called in a subshell or separate utility execution environment,
       such as one of the following:

           (PATH=foo command −v)
            nohup command −v

       it does not necessarily produce correct results. For example, when called with nohup or an exec function, in  a  separate
       utility execution environment, most implementations are not able to identify aliases, functions, or special built-ins.

       Two  types  of  regular  built-ins  could  be encountered on a system and these are described separately by command.  The
       description of command search in Section 2.9.1.1, Command Search and Execution allows for a standard utility to be imple‐
       mented  as  a regular built-in as long as it is found in the appropriate place in a PATH search. So, for example, command
       −v true might yield /bin/true or some similar pathname. Other implementation-defined utilities that are  not  defined  by
       this volume of POSIX.1‐2008 might exist only as built-ins and have no pathname associated with them. These produce output
       identified as (regular) built-ins. Applications encountering these are not able to count on execing them, using them with
       nohup, overriding them with a different PATH, and so on.

EXAMPLES
        1. Make a version of cd that always prints out the new working directory exactly once:

               cd() {
                   command cd "$@" &amp;gt;/dev/null
                   pwd
               }

        2. Start off a ``secure shell script'' in which the script avoids being spoofed by its parent:

               IFS='
               '
               #    The preceding value should be &amp;lt;space&amp;gt;&amp;lt;tab&amp;gt;&amp;lt;newline&amp;gt;.
               #    Set IFS to its default value.

               \unalias −a
               #    Unset all possible aliases.
               #    Note that unalias is escaped to prevent an alias
               #    being used for unalias.

               unset −f command
               #    Ensure command is not a user function.

               PATH="$(command −p getconf PATH):$PATH"
               #    Put on a reliable PATH prefix.

               #    ...

           At this point, given correct permissions on the directories called by PATH, the script has the ability to ensure that
           any utility it calls is the intended one. It is being very cautious because it assumes that implementation extensions
           may  be present that would allow user functions to exist when it is invoked; this capability is not specified by this
           volume of POSIX.1‐2008, but it is not prohibited as an extension. For example, the ENV variable precedes the  invoca‐
           tion of the script with a user start-up script. Such a script could define functions to spoof the application.

RATIONALE
       Since command is a regular built-in utility it is always found prior to the PATH search.

       There  is  nothing in the description of command that implies the command line is parsed any differently from that of any
       other simple command. For example:

           command a | b ; c

       is not parsed in any special way that causes '|' or ';' to be treated other than a pipe operator or &amp;lt;semicolon&amp;gt;  or  that
       prevents function lookup on b or c.

       The  command  utility is somewhat similar to the Eighth Edition shell builtin command, but since command also goes to the
       file system to search for utilities, the name builtin would not be intuitive.

       The command utility is most likely to be provided as a regular built-in. It is not listed as a special built-in  for  the
       following reasons:

        *  The removal of exportable functions made the special precedence of a special built-in unnecessary.

        *  A  special built-in has special properties (see Section 2.14, Special Built-In Utilities) that were inappropriate for
           invoking other utilities. For example, two commands such as:

               date &amp;gt; unwritable-file

               command date &amp;gt; unwritable-file

           would have entirely different results; in a non-interactive script, the former would continue  to  execute  the  next
           command, the latter would abort. Introducing this semantic difference along with suppressing functions was seen to be
           non-intuitive.

       The −p option is present because it is useful to be able to ensure a safe path search that finds all the standard  utili‐
       ties. This search might not be identical to the one that occurs through one of the exec functions (as defined in the Sys‐
       tem Interfaces volume of POSIX.1‐2008) when PATH is unset. At the very least, this  feature  is  required  to  allow  the
       script to access the correct version of getconf so that the value of the default path can be accurately retrieved.

       The command −v and −V options were added to satisfy requirements from users that are currently accomplished by three dif‐
       ferent historical utilities: type in the System V shell, whence in the KornShell, and which in the C shell.  Since  there
       is  no historical agreement on how and what to accomplish here, the POSIX command utility was enhanced and the historical
       utilities were left unmodified.  The C shell which merely conducts a path search. The KornShell whence is more elaborate—
       in  addition  to  the  categories  required by POSIX, it also reports on tracked aliases, exported aliases, and undefined
       functions.

       The output format of −V was left mostly unspecified because human users are its only audience.  Applications  should  not
       be  written  to care about this information; they can use the output of −v to differentiate between various types of com‐
       mands, but the additional information that may be emitted by the more verbose −V is not needed and should  not  be  arbi‐
       trarily constrained in its verbosity or localization for application parsing reasons.

FUTURE DIRECTIONS
       None.

SEE ALSO
       Section  2.9.1.1, Command Search and Execution, Section 2.12, Shell Execution Environment, Section 2.14, Special Built-In
       Utilities, sh, type

       The Base Definitions volume of POSIX.1‐2008, Chapter 8, Environment Variables, Section 12.2, Utility Syntax Guidelines

       The System Interfaces volume of POSIX.1‐2008, exec

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013  Edition,  Standard  for
       Information  Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7, Copy‐
       right (C) 2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This  is  POSIX.1-2008
       with  the  2013  Technical  Corrigendum 1 applied.) In the event of any discrepancy between this version and the original
       IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the  referee  document.  The  original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any  typographical  or formatting errors that appear in this page are most likely to have been introduced during the con‐
       version of the source files to man page format. To report such errors,  see  https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                   COMMAND(1P)
COMPRESS(1P)                                        POSIX Programmer's Manual                                       COMPRESS(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->

NAME
       compress — compress data

SYNOPSIS
       compress [−fv] [−b bits] [file...]

       compress [−cfv] [−b bits] [file]

DESCRIPTION
       The compress utility shall attempt to reduce the size of the named files by using adaptive Lempel-Ziv coding algorithm.

       Note:     Lempel-Ziv  is  US  Patent 4464650, issued to William Eastman, Abraham Lempel, Jacob Ziv, Martin Cohn on August
                 7th, 1984, and assigned to Sperry Corporation.

                 Lempel-Ziv-Welch compression is covered by US Patent 4558302, issued to Terry A. Welch on December 10th,  1985,
                 and assigned to Sperry Corporation.

       On  systems  not supporting adaptive Lempel-Ziv coding algorithm, the input files shall not be changed and an error value
       greater than two shall be returned. Except when the output is to the standard output, each file shall be replaced by  one
       with  the extension .Z.  If the invoking process has appropriate privileges, the ownership, modes, access time, and modi‐
       fication time of the original file are preserved. If appending the  .Z  to  the  filename  would  make  the  name  exceed
       {NAME_MAX}  bytes, the command shall fail. If no files are specified, the standard input shall be compressed to the stan‐
       dard output.

OPTIONS
       The compress utility shall conform to the Base Definitions volume of POSIX.1‐2008, Section 12.2,  Utility  Syntax  Guide‐
       lines.

       The following options shall be supported:

       −b bits   Specify the maximum number of bits to use in a code. For a conforming application, the bits argument shall be:

                     9 &amp;lt;= bits &amp;lt;= 14

                 The implementation may allow bits values of greater than 14. The default is 14, 15, or 16.

       −c        Cause compress to write to the standard output; the input file is not changed, and no .Z files are created.

       −f        Force  compression  of  file, even if it does not actually reduce the size of the file, or if the corresponding
                 file.Z file already exists. If the −f option is not given, and the process is not running  in  the  background,
                 the  user  is prompted as to whether an existing file.Z file should be overwritten. If the response is affirma‐
                 tive, the existing file will be overwritten.

       −v        Write the percentage reduction of each file to standard error.

OPERANDS
       The following operand shall be supported:

       file      A pathname of a file to be compressed.

STDIN
       The standard input shall be used only if no file operands are specified, or if a file operand is '−'.

INPUT FILES
       If file operands are specified, the input files contain the data to be compressed.

<!-- 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 <=< ACCEPT -->ENVIRONMENT VARIABLES
       The following environment variables shall affect the execution of compress:

       LANG      Provide a default value for the internationalization variables that are unset or null. (See  the  Base  Defini‐
                 tions  volume of POSIX.1‐2008, Section 8.2, Internationalization Variables for the precedence of international‐
                 ization variables used to determine the values of locale categories.)

       LC_ALL    If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_COLLATE
                 Determine the locale for the behavior of ranges, equivalence classes, and  multi-character  collating  elements
                 used in the extended regular expression defined for the yesexpr locale keyword in the LC_MESSAGES category.

       LC_CTYPE  Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, sin‐
                 gle-byte as opposed to multi-byte characters in arguments), the behavior  of  character  classes  used  in  the
                 extended regular expression defined for the yesexpr locale keyword in the LC_MESSAGES category.

       LC_MESSAGES
                 Determine  the  locale used to process affirmative responses, and the locale used to affect the format and con‐
                 tents of diagnostic messages, prompts, and the output from the −v option written to standard error.

       NLSPATH   Determine the location of message catalogs for the processing of LC_MESSAGES.<!-- ACCEPT >=> 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 -->

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       If no file operands are specified, or if a file operand is '−', or if the −c option is  specified,  the  standard  output
       contains the compressed output.

STDERR
       The standard error shall be used only for diagnostic and prompt messages and the output from −v.

OUTPUT FILES
       The  output  files  shall contain the compressed output. The format of compressed files is unspecified and interchange of
       such files between implementations (including access  via  unspecified  file  sharing  mechanisms)  is  not  required  by
       POSIX.1‐2008.

EXTENDED DESCRIPTION
       None.

<!-- a42f9355-e63b-4205-ac0b-0b19b24faf9d <=< ACCEPT -->EXIT STATUS
       The following exit values shall be returned:

        0    Successful completion.

        1    An error occurred.

        2    One  or  more files were not compressed because they would have increased in size (and the −f option was not speci‐
             fied).

       &amp;gt;2    An error occurred.<!-- ACCEPT >=> a42f9355-e63b-4205-ac0b-0b19b24faf9d -->

CONSEQUENCES OF ERRORS
       The input file shall remain unmodified.

       The following sections are informative.

APPLICATION USAGE
       The amount of compression obtained depends on the size of the input, the number of bits per code, and the distribution of
       common  substrings.  Typically,  text  such as source code or English is reduced by 50‐60%. Compression is generally much
       better than that achieved by Huffman coding or adaptive Huffman coding (compact), and takes less time to compute.

       Although compress strictly follows the default actions upon receipt of a signal or when an error occurs, some  unexpected
       results  may occur. In some implementations it is likely that a partially compressed file is left in place, alongside its
       uncompressed input file. Since the general operation of compress is to delete the uncompressed file  only  after  the  .Z
       file  has been successfully filled, an application should always carefully check the exit status of compress before arbi‐
       trarily deleting files that have like-named neighbors with .Z suffixes.

       The limit of 14 on the bits option-argument is to achieve portability to all systems (within the restrictions imposed  by
       the  lack  of an explicit published file format). Some implementations based on 16-bit architectures cannot support 15 or
       16-bit uncompression.

EXAMPLES
       None.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       uncompress, zcat

       The Base Definitions volume of POSIX.1‐2008, Chapter 8, Environment Variables, Section 12.2, Utility Syntax Guidelines

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013  Edition,  Standard  for
       Information  Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7, Copy‐
       right (C) 2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This  is  POSIX.1-2008
       with  the  2013  Technical  Corrigendum 1 applied.) In the event of any discrepancy between this version and the original
       IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the  referee  document.  The  original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any  typographical  or formatting errors that appear in this page are most likely to have been introduced during the con‐
       version of the source files to man page format. To report such errors,  see  https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                  COMPRESS(1P)
CONTINUE(1P)                                        POSIX Programmer's Manual                                       CONTINUE(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->

NAME
       continue — continue for, while, or until loop

SYNOPSIS
       continue [n]

DESCRIPTION
       The  continue  utility  shall return to the top of the smallest enclosing for, while, or until loop, or to the top of the
       nth enclosing loop, if n is specified. This involves repeating the condition list of a while or until loop or  performing
       the next assignment of a for loop, and re-executing the loop if appropriate.

       The  value of n is a decimal integer greater than or equal to 1. The default shall be equivalent to n=1.  If n is greater
       than the number of enclosing loops, the outermost enclosing loop shall be used.

OPTIONS
       None.

OPERANDS
       See the DESCRIPTION.

<!-- fe96d119-27ce-4a62-99a9-ff5840fe1a84 <=< ACCEPT -->STDIN
       Not used.

INPUT FILES
       None.

ENVIRONMENT VARIABLES
       None.

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       Not used.

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       None.

EXIT STATUS
        0    Successful completion.

       &amp;gt;0    The n value was not an unsigned decimal integer greater than or equal to 1.

CONSEQUENCES OF ERRORS
       Default.

       The following sections are informative.<!-- ACCEPT >=> fe96d119-27ce-4a62-99a9-ff5840fe1a84 -->

APPLICATION USAGE
       None.

EXAMPLES
       for i in *
       do
           if test −d "$i"
           then continue
           fi
           printf '"%s" is not a directory.\n' "$i"
       done

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       Section 2.14, Special Built-In Utilities

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013  Edition,  Standard  for
       Information  Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7, Copy‐
       right (C) 2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This  is  POSIX.1-2008
       with  the  2013  Technical  Corrigendum 1 applied.) In the event of any discrepancy between this version and the original
       IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the  referee  document.  The  original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any  typographical  or formatting errors that appear in this page are most likely to have been introduced during the con‐
       version of the source files to man page format. To report such errors,  see  https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                  CONTINUE(1P)
CP(1)                                                     User Commands                                                    CP(1)

NAME
       cp - copy files and directories

SYNOPSIS
       cp [OPTION]... [-T] SOURCE DEST
       cp [OPTION]... SOURCE... DIRECTORY
       cp [OPTION]... -t DIRECTORY SOURCE...

DESCRIPTION
       Copy SOURCE to DEST, or multiple SOURCE(s) to DIRECTORY.

       Mandatory arguments to long options are mandatory for short options too.

       -a, --archive
              same as -dR --preserve=all

       --attributes-only
              don't copy the file data, just the attributes

       --backup[=CONTROL]
              make a backup of each existing destination file

       -b     like --backup but does not accept an argument

       --copy-contents
              copy contents of special files when recursive

       -d     same as --no-dereference --preserve=links

       -f, --force
              if  an  existing  destination  file  cannot be opened, remove it and try again (this option is ignored when the -n
              option is also used)

       -i, --interactive
              prompt before overwrite (overrides a previous -n option)

       -H     follow command-line symbolic links in SOURCE

       -l, --link
              hard link files instead of copying

       -L, --dereference
              always follow symbolic links in SOURCE

       -n, --no-clobber
              do not overwrite an existing file (overrides a previous -i option)

       -P, --no-dereference
              never follow symbolic links in SOURCE

       -p     same as --preserve=mode,ownership,timestamps

       --preserve[=ATTR_LIST]
              preserve the specified attributes (default: mode,ownership,timestamps), if possible  additional  attributes:  con‐
              text, links, xattr, all

       --no-preserve=ATTR_LIST
              don't preserve the specified attributes

       --parents
              use full source file name under DIRECTORY

       -R, -r, --recursive
              copy directories recursively

       --reflink[=WHEN]
              control clone/CoW copies. See below

       --remove-destination
              remove each existing destination file before attempting to open it (contrast with --force)

       --sparse=WHEN
              control creation of sparse files. See below

       --strip-trailing-slashes
              remove any trailing slashes from each SOURCE argument

       -s, --symbolic-link
              make symbolic links instead of copying

       -S, --suffix=SUFFIX
              override the usual backup suffix

       -t, --target-directory=DIRECTORY
              copy all SOURCE arguments into DIRECTORY

       -T, --no-target-directory
              treat DEST as a normal file

       -u, --update
              copy only when the SOURCE file is newer than the destination file or when the destination file is missing

       -v, --verbose
              explain what is being done

       -x, --one-file-system
              stay on this file system

       -Z     set SELinux security context of destination file to default type

       --context[=CTX]
              like -Z, or if CTX is specified then set the SELinux or SMACK security context to CTX

       --help display this help and exit

       --version
              output version information and exit

       By default, sparse SOURCE files are detected by a crude heuristic and the corresponding DEST file is made sparse as well.
       That is the behavior selected by --sparse=auto.  Specify --sparse=always to create a sparse DEST file whenever the SOURCE
       file contains a long enough sequence of zero bytes.  Use --sparse=never to inhibit creation of sparse files.

       When  --reflink[=always]  is  specified, perform a lightweight copy, where the data blocks are copied only when modified.
       If this is not possible the copy fails, or if --reflink=auto is specified, fall back to a standard copy.

       The backup suffix is '~', unless set with --suffix or SIMPLE_BACKUP_SUFFIX.  The version control method may  be  selected
       via the --backup option or through the VERSION_CONTROL environment variable.  Here are the values:

       none, off
              never make backups (even if --backup is given)

       numbered, t
              make numbered backups

       existing, nil
              numbered if numbered backups exist, simple otherwise

       simple, never
              always make simple backups

       As  a  special  case, cp makes a backup of SOURCE when the force and backup options are given and SOURCE and DEST are the
       same name for an existing, regular file.

AUTHOR
       Written by Torbjorn Granlund, David MacKenzie, and Jim Meyering.

<!-- 30b0cf8a-458a-435b-a2e0-993472636e53 <=< ACCEPT -->REPORTING BUGS
       GNU coreutils online help: &amp;lt;http://www.gnu.org/software/coreutils/&amp;gt;
       Report cp translation bugs to &amp;lt;http://translationproject.org/team/&amp;gt;

COPYRIGHT
       Copyright   ©   2016   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3    or    later
       &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.<!-- ACCEPT >=> 30b0cf8a-458a-435b-a2e0-993472636e53 -->

SEE ALSO
       Full documentation at: &amp;lt;http://www.gnu.org/software/coreutils/cp&amp;gt;
       or available locally via: info '(coreutils) cp invocation'

GNU coreutils 8.26                                        November 2016                                                    CP(1)
CRONTAB(1)                                                User Commands                                               CRONTAB(1)

NAME
       crontab - maintains crontab files for individual users

SYNOPSIS
       crontab [-u user] file
       crontab [-u user] [-l | -r | -e] [-i] [-s]
       crontab -n [ hostname ]
       crontab -c

DESCRIPTION
       Crontab is the program used to install a crontab table file, remove or list the existing tables used to serve the cron(8)
       daemon.  Each user can have their own crontab, and though these are files in /var/spool/, they are  not  intended  to  be
       edited  directly.   For  SELinux  in  MLS  mode,  you can define more crontabs for each range.  For more information, see
       selinux(8).

       In this version of Cron it is possible to use a network-mounted shared /var/spool/cron across  a  cluster  of  hosts  and
       specify that only one of the hosts should run the crontab jobs in the particular directory at any one time.  You may also
       use crontab(1) from any of these hosts to edit the same shared set of crontab files, and to  set  and  query  which  host
       should run the crontab jobs.

       Running  cron  jobs can be allowed or disallowed for different users.  For this purpose, use the cron.allow and cron.deny
       files.  If the cron.allow file exists, a user must be listed in it to be allowed to use cron If the cron.allow file  does
       not  exist  but the cron.deny file does exist, then a user must not be listed in the cron.deny file in order to use cron.
       If neither of these files exists, only the super user is allowed to use cron.  Another way to restrict access to cron  is
       to use PAM authentication in /etc/security/access.conf to set up users, which are allowed or disallowed to use crontab or
       modify system cron jobs in the /etc/cron.d/ directory.

       The temporary directory can be set in an environment variable.  If it is not set by the user, the /tmp directory is used.

OPTIONS
       -u     Appends the name of the user whose crontab is to be modified.  If this option is not used, crontab examines "your"
              crontab,  i.e.,  the crontab of the person executing the command.  Note that su(8) may confuse crontab, thus, when
              executing commands under su(8) you should always use the -u option.  If no crontab exists for a  particular  user,
              it is created for him the first time the crontab -u command is used under his username.

       -l     Displays the current crontab on standard output.

       -r     Removes the current crontab.

       -e     Edits  the  current  crontab  using the editor specified by the VISUAL or EDITOR environment variables.  After you
              exit from the editor, the modified crontab will be installed automatically.

       -i     This option modifies the -r option to prompt the user for a 'y/Y' response before actually removing the crontab.

       -s     Appends the current SELinux security context string as an MLS_LEVEL setting to the crontab file before  editing  /
              replacement occurs - see the documentation of MLS_LEVEL in crontab(5).

       -n     This  option is relevant only if cron(8) was started with the -c option, to enable clustering support.  It is used
              to set the host in the cluster which should run the jobs specified in the crontab  files  in  the  /var/spool/cron
              directory.   If  a  hostname  is supplied, the host whose hostname returned by gethostname(2) matches the supplied
              hostname, will be selected to run the selected cron jobs subsequently.  If there is no host in the cluster  match‐
              ing  the supplied hostname, or you explicitly specify an empty hostname, then the selected jobs will not be run at
              all.  If the hostname is omitted, the name of the local host returned  by  gethostname(2)  is  used.   Using  this
              option  has  no  effect on the /etc/crontab file and the files in the /etc/cron.d directory, which are always run,
              and considered host-specific.  For more information on clustering support, see cron(8).

       -c     This option is only relevant if cron(8) was started with the -c option, to enable clustering support.  It is  used
              to  query  which host in the cluster is currently set to run the jobs specified in the crontab files in the direc‐
              tory /var/spool/cron , as set using the -n option.

SEE ALSO
       crontab(5), cron(8)

FILES
       /etc/cron.allow
       /etc/cron.deny

STANDARDS
       The crontab command conforms to IEEE Std1003.2-1992 (``POSIX'').  This new command syntax differs from previous  versions
       of Vixie Cron, as well as from the classic SVR3 syntax.

DIAGNOSTICS
       An informative usage message appears if you run a crontab with a faulty command defined in it.

AUTHOR
       Paul Vixie ⟨vixie@isc.org⟩
       Colin Dean ⟨colin@colin-dean.org⟩

cronie                                                     2012-11-22                                                 CRONTAB(1)
CSPLIT(1)                                                 User Commands                                                CSPLIT(1)

NAME
       csplit - split a file into sections determined by context lines

SYNOPSIS
       csplit [OPTION]... FILE PATTERN...

DESCRIPTION
       Output pieces of FILE separated by PATTERN(s) to files 'xx00', 'xx01', ..., and output byte counts of each piece to stan‐
       dard output.

       Read standard input if FILE is -

       Mandatory arguments to long options are mandatory for short options too.

       -b, --suffix-format=FORMAT
              use sprintf FORMAT instead of %02d

       -f, --prefix=PREFIX
              use PREFIX instead of 'xx'

       -k, --keep-files
              do not remove output files on errors

       --suppress-matched
              suppress the lines matching PATTERN

       -n, --digits=DIGITS
              use specified number of digits instead of 2

       -s, --quiet, --silent
              do not print counts of output file sizes

       -z, --elide-empty-files
              remove empty output files

       --help display this help and exit

       --version
              output version information and exit

   Each PATTERN may be:
       INTEGER
              copy up to but not including specified line number

       /REGEXP/[OFFSET]
              copy up to but not including a matching line

       %REGEXP%[OFFSET]
              skip to, but not including a matching line

       {INTEGER}
              repeat the previous pattern specified number of times

       {*}    repeat the previous pattern as many times as possible

       A line OFFSET is a required '+' or '-' followed by a positive integer.

AUTHOR
       Written by Stuart Kemp and David MacKenzie.

<!-- 30b0cf8a-458a-435b-a2e0-993472636e53 <=< ACCEPT -->REPORTING BUGS
       GNU coreutils online help: &amp;lt;http://www.gnu.org/software/coreutils/&amp;gt;
       Report csplit translation bugs to &amp;lt;http://translationproject.org/team/&amp;gt;

COPYRIGHT
       Copyright   ©   2016   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3    or    later
       &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.<!-- ACCEPT >=> 30b0cf8a-458a-435b-a2e0-993472636e53 -->

SEE ALSO
       Full documentation at: &amp;lt;http://www.gnu.org/software/coreutils/csplit&amp;gt;
       or available locally via: info '(coreutils) csplit invocation'

GNU coreutils 8.26                                        November 2016                                                CSPLIT(1)
CTAGS(1P)                                           POSIX Programmer's Manual                                          CTAGS(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->

NAME
       ctags — create a tags file (DEVELOPMENT, FORTRAN)

SYNOPSIS
       ctags [−a] [−f tagsfile] pathname...

       ctags −x pathname...

DESCRIPTION
       The  ctags utility shall be provided on systems that support the the Software Development Utilities option, and either or
       both of the C-Language Development Utilities option and FORTRAN Development Utilities option. On  other  systems,  it  is
       optional.

       The  ctags utility shall write a tagsfile or an index of objects from C-language or FORTRAN source files specified by the
       pathname operands. The tagsfile shall list the locators of language-specific objects within the source files.  A  locator
       consists  of  a name, pathname, and either a search pattern or a line number that can be used in searching for the object
       definition. The objects that shall be recognized are specified in the EXTENDED DESCRIPTION section.

OPTIONS
       The ctags utility shall conform to the Base Definitions volume of POSIX.1‐2008, Section 12.2, Utility Syntax Guidelines.

       The following options shall be supported:

       −a        Append to tagsfile.

       −f tagsfile
                 Write the object locator lists into tagsfile instead of the default file named tags in the current directory.

       −x        Produce a list of object names, the line number, and filename in which each is defined, as well as the text  of
                 that line, and write this to the standard output. A tagsfile shall not be created when −x is specified.

OPERANDS
       The following pathname operands are supported:

       file.c    Files  with basenames ending with the .c suffix shall be treated as C-language source code. Such files that are
                 not valid input to c99 produce unspecified results.

       file.h    Files with basenames ending with the .h suffix shall be treated as C-language source code. Such files that  are
                 not valid input to c99 produce unspecified results.

       file.f    Files  with  basenames  ending  with the .f suffix shall be treated as FORTRAN-language source code. Such files
                 that are not valid input to fort77 produce unspecified results.

       The handling of other files is implementation-defined.

STDIN
       See the INPUT FILES section.

INPUT FILES
       The input files shall be text files containing source code in the language indicated by the operand filename suffixes.

<!-- 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 <=< ACCEPT -->ENVIRONMENT VARIABLES
       The following environment variables shall affect the execution of ctags:

       LANG      Provide a default value for the internationalization variables that are unset or null. (See  the  Base  Defini‐
                 tions  volume of POSIX.1‐2008, Section 8.2, Internationalization Variables for the precedence of international‐
                 ization variables used to determine the values of locale categories.)

       LC_ALL    If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_COLLATE
                 Determine the order in which output is sorted for the −x option. The POSIX locale determines the order in which
                 the tagsfile is written.

       LC_CTYPE  Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, sin‐
                 gle-byte as opposed to multi-byte characters in arguments and input files). When processing  C-language  source
                 code,  if  the  locale  is  not  compatible  with the C locale described by the ISO C standard, the results are
                 unspecified.

       LC_MESSAGES
                 Determine the locale that should be used to affect the format and contents of diagnostic  messages  written  to
                 standard error.

       NLSPATH   Determine the location of message catalogs for the processing of LC_MESSAGES.<!-- ACCEPT >=> 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 -->

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       The  list  of object name information produced by the −x option shall be written to standard output in the following for‐
       mat:

           "%s %d %s %s", &amp;lt;object-name&amp;gt;, &amp;lt;line-number&amp;gt;, &amp;lt;filename&amp;gt;, &amp;lt;text&amp;gt;

       where &amp;lt;text&amp;gt; is the text of line &amp;lt;line-number&amp;gt; of file &amp;lt;filename&amp;gt;.

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       When the −x option is not specified, the format of the output file shall be:

           "%s\t%s\t/%s/\n", &amp;lt;identifier&amp;gt;, &amp;lt;filename&amp;gt;, &amp;lt;pattern&amp;gt;

       where &amp;lt;pattern&amp;gt; is a search pattern that could be used by an editor to find the  defining  instance  of  &amp;lt;identifier&amp;gt;  in
       &amp;lt;filename&amp;gt; (where defining instance is indicated by the declarations listed in the EXTENDED DESCRIPTION).

       An  optional  &amp;lt;circumflex&amp;gt;  ('^') can be added as a prefix to &amp;lt;pattern&amp;gt;, and an optional &amp;lt;dollar-sign&amp;gt; can be appended to
       &amp;lt;pattern&amp;gt; to indicate that the pattern is anchored to the beginning (end) of a line of text. Any &amp;lt;slash&amp;gt;  or  &amp;lt;backslash&amp;gt;
       characters  in  &amp;lt;pattern&amp;gt;  shall  be  preceded by a &amp;lt;backslash&amp;gt; character. The anchoring &amp;lt;circumflex&amp;gt;, &amp;lt;dollar-sign&amp;gt;, and
       escaping &amp;lt;backslash&amp;gt; characters shall not be considered part of the search pattern. All other characters  in  the  search
       pattern shall be considered literal characters.

       An alternative format is:

           "%s\t%s\t?%s?\n", &amp;lt;identifier&amp;gt;, &amp;lt;filename&amp;gt;, &amp;lt;pattern&amp;gt;

       which  is  identical  to  the  first format except that &amp;lt;slash&amp;gt; characters in &amp;lt;pattern&amp;gt; shall not be preceded by escaping
       &amp;lt;backslash&amp;gt; characters, and &amp;lt;question-mark&amp;gt; characters in &amp;lt;pattern&amp;gt; shall be preceded by &amp;lt;backslash&amp;gt; characters.

       A second alternative format is:

           "%s\t%s\t%d\n", &amp;lt;identifier&amp;gt;, &amp;lt;filename&amp;gt;, &amp;lt;lineno&amp;gt;

       where &amp;lt;lineno&amp;gt; is a decimal line number that could be used by an editor to find &amp;lt;identifier&amp;gt; in &amp;lt;filename&amp;gt;.

       Neither alternative format shall be produced by ctags when it is used as described  by  POSIX.1‐2008,  but  the  standard
       utilities that process tags files shall be able to process those formats as well as the first format.

       In any of these formats, the file shall be sorted by identifier, based on the collation sequence in the POSIX locale.

EXTENDED DESCRIPTION
       If  the  operand  identifies C-language source, the ctags utility shall attempt to produce an output line for each of the
       following objects:

        *  Function definitions

        *  Type definitions

        *  Macros with arguments

       It may also produce output for any of the following objects:

        *  Function prototypes

        *  Structures

        *  Unions

        *  Global variable definitions

        *  Enumeration types

        *  Macros without arguments

        *  #define statements

        *  #line statements

       Any #if and #ifdef statements shall produce no output. The tag main is treated specially in C programs.  The  tag  formed
       shall  be  created by prefixing M to the name of the file, with the trailing .c, and leading pathname components (if any)
       removed.

       On systems that do not support the C-Language Development Utilities option, ctags produces unspecified results for C-lan‐
       guage source code files. It should write to standard error a message identifying this condition and cause a non-zero exit
       status to be produced.

       If the operand identifies FORTRAN source, the ctags utility shall produce an output line for each function definition. It
       may also produce output for any of the following objects:

        *  Subroutine definitions

        *  COMMON statements

        *  PARAMETER statements

        *  DATA and BLOCK DATA statements

        *  Statement numbers

       On  systems  that do not support the FORTRAN Development Utilities option, ctags produces unspecified results for FORTRAN
       source code files. It should write to standard error a message identifying this condition and cause a non-zero exit  sta‐
       tus to be produced.

       It is implementation-defined what other objects (including duplicate identifiers) produce output.

<!-- a42f9355-e63b-4205-ac0b-0b19b24faf9d <=< ACCEPT -->EXIT STATUS
       The following exit values shall be returned:

        0    Successful completion.

       &amp;gt;0    An error occurred.<!-- ACCEPT >=> a42f9355-e63b-4205-ac0b-0b19b24faf9d -->

CONSEQUENCES OF ERRORS
       Default.

       The following sections are informative.

APPLICATION USAGE
       The  output  with −x is meant to be a simple index that can be written out as an off-line readable function index. If the
       input files to ctags (such as .c files) were not created using the same locale as that in effect when ctags  −x  is  run,
       results might not be as expected.

       The  description of C-language processing says ``attempts to'' because the C language can be greatly confused, especially
       through the use of #defines, and this utility would be of no use if the real C preprocessor were run  to  identify  them.
       The output from ctags may be fooled and incorrect for various constructs.

EXAMPLES
       None.

RATIONALE
       The  option list was significantly reduced from that provided by historical implementations. The −F option was omitted as
       redundant, since it is the default. The −B option was omitted as being of very limited  usefulness.  The  −t  option  was
       omitted  since  the  recognition  of  typedefs  is now required for C source files. The −u option was omitted because the
       update function was judged to be not only inefficient, but also rarely needed.

       An early proposal included a −w option to suppress warning diagnostics. Since the types of such diagnostics could not  be
       described, the option was omitted as being not useful.

       The  text for LC_CTYPE about compatibility with the C locale acknowledges that the ISO C standard imposes requirements on
       the locale used to process C source. This could easily be a superset of that known as ``the C locale'' by way  of  imple‐
       mentation extensions, or one of a few alternative locales for systems supporting different codesets. No statement is made
       for FORTRAN because the ANSI X3.9‐1978 standard (FORTRAN 77) does not (yet) define a similar locale concept.  However,  a
       general  rule  in this volume of POSIX.1‐2008 is that any time that locales do not match (preparing a file for one locale
       and processing it in another), the results are suspect.

       The collation sequence of the tags file is not affected by LC_COLLATE because it is typically not used by human  readers,
       but  only by programs such as vi to locate the tag within the source files. Using the POSIX locale eliminates some of the
       problems of coordinating locales between the ctags file creator and the vi file reader.

       Historically, the tags file has been used only by ex and vi.  However, the format of the tags file has been published  to
       encourage other programs to use the tags in new ways. The format allows either patterns or line numbers to find the iden‐
       tifiers because the historical vi recognizes either. The ctags utility does not produce the  format  using  line  numbers
       because  it  is  not  useful  following any source file changes that add or delete lines.  The documented search patterns
       match historical practice. It should be noted that literal leading &amp;lt;circumflex&amp;gt; or trailing &amp;lt;dollar-sign&amp;gt;  characters  in
       the  search  pattern  will  only behave correctly if anchored to the beginning of the line or end of the line by an addi‐
       tional &amp;lt;circumflex&amp;gt; or &amp;lt;dollar-sign&amp;gt; character.

       Historical implementations also understand the objects used by the languages Pascal and sometimes LISP, and  they  under‐
       stand  the  C  source output by lex and yacc.  The ctags utility is not required to accommodate these languages, although
       implementors are encouraged to do so.

       The following historical option was not specified, as vgrind is not included in this volume of POSIX.1‐2008:

       −v        If the −v flag is given, an index of the form expected by vgrind is produced on the standard output. This list‐
                 ing  contains the function name, filename, and page number (assuming 64-line pages). Since the output is sorted
                 into lexicographic order, it may be desired to run the output through sort −f.  Sample use:

                     ctags −v files | sort −f &amp;gt; index vgrind −x index

       The special treatment of the tag main makes the use of ctags practical in directories with more than one program.

FUTURE DIRECTIONS
       None.

SEE ALSO
       c99, fort77, vi

       The Base Definitions volume of POSIX.1‐2008, Chapter 8, Environment Variables, Section 12.2, Utility Syntax Guidelines

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013  Edition,  Standard  for
       Information  Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7, Copy‐
       right (C) 2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This  is  POSIX.1-2008
       with  the  2013  Technical  Corrigendum 1 applied.) In the event of any discrepancy between this version and the original
       IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the  referee  document.  The  original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any  typographical  or formatting errors that appear in this page are most likely to have been introduced during the con‐
       version of the source files to man page format. To report such errors,  see  https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                     CTAGS(1P)
CUT(1)                                                    User Commands                                                   CUT(1)

NAME
       cut - remove sections from each line of files

SYNOPSIS
       cut OPTION... [FILE]...

DESCRIPTION
       Print selected parts of lines from each FILE to standard output.

       With no FILE, or when FILE is -, read standard input.

       Mandatory arguments to long options are mandatory for short options too.

       -b, --bytes=LIST
              select only these bytes

       -c, --characters=LIST
              select only these characters

       -d, --delimiter=DELIM
              use DELIM instead of TAB for field delimiter

       -f, --fields=LIST
              select only these fields;  also print any line that contains no delimiter character, unless the -s option is spec‐
              ified

       -n     (ignored)

       --complement
              complement the set of selected bytes, characters or fields

       -s, --only-delimited
              do not print lines not containing delimiters

       --output-delimiter=STRING
              use STRING as the output delimiter the default is to use the input delimiter

       -z, --zero-terminated
              line delimiter is NUL, not newline

       --help display this help and exit

       --version
              output version information and exit

       Use one, and only one of -b, -c or -f.  Each LIST is made up of one range, or many ranges separated by commas.   Selected
       input is written in the same order that it is read, and is written exactly once.  Each range is one of:

       N      N'th byte, character or field, counted from 1

       N-     from N'th byte, character or field, to end of line

       N-M    from N'th to M'th (included) byte, character or field

       -M     from first to M'th (included) byte, character or field

AUTHOR
       Written by David M. Ihnat, David MacKenzie, and Jim Meyering.

<!-- 30b0cf8a-458a-435b-a2e0-993472636e53 <=< ACCEPT -->REPORTING BUGS
       GNU coreutils online help: &amp;lt;http://www.gnu.org/software/coreutils/&amp;gt;
       Report cut translation bugs to &amp;lt;http://translationproject.org/team/&amp;gt;

COPYRIGHT
       Copyright    ©    2016   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3   or   later
       &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.<!-- ACCEPT >=> 30b0cf8a-458a-435b-a2e0-993472636e53 -->

SEE ALSO
       Full documentation at: &amp;lt;http://www.gnu.org/software/coreutils/cut&amp;gt;
       or available locally via: info '(coreutils) cut invocation'

GNU coreutils 8.26                                        November 2016                                                   CUT(1)
CXREF(1P)                                           POSIX Programmer's Manual                                          CXREF(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.
<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->
NAME
       cxref — generate a C-language program cross-reference table (DEVELOPMENT)

SYNOPSIS
       cxref [−cs] [−o file] [−w num] [−D name[=def]]... [−I dir]...
           [−U name]... file...

DESCRIPTION
       The  cxref  utility shall analyze a collection of C-language files and attempt to build a cross-reference table. Informa‐
       tion from #define lines shall be included in the symbol table. A sorted listing shall be written to  standard  output  of
       all  symbols (auto, static, and global) in each file separately, or with the −c option, in combination. Each symbol shall
       contain an &amp;lt;asterisk&amp;gt; before the declaring reference.

OPTIONS
       The cxref utility shall conform to the Base Definitions volume of POSIX.1‐2008, Section 12.2, Utility Syntax  Guidelines,
       except  that the order of the −D, −I, and −U options (which are identical to their interpretation by c99) is significant.
       The following options shall be supported:

       −c        Write a combined cross-reference of all input files.

       −s        Operate silently; do not print input filenames.

       −o file   Direct output to named file.

       −w num    Format output no wider than num (decimal) columns. This option defaults to 80 if num is  not  specified  or  is
                 less than 51.

       −D        Equivalent to c99.

       −I        Equivalent to c99.

       −U        Equivalent to c99.

OPERANDS
       The following operand shall be supported:

       file      A pathname of a C-language source file.

STDIN
       Not used.

INPUT FILES
       The input files are C-language source files.

<!-- 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 <=< ACCEPT -->ENVIRONMENT VARIABLES
       The following environment variables shall affect the execution of cxref:

       LANG      Provide  a  default  value for the internationalization variables that are unset or null. (See the Base Defini‐
                 tions volume of POSIX.1‐2008, Section 8.2, Internationalization Variables for the precedence of  international‐
                 ization variables used to determine the values of locale categories.)

       LC_ALL    If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_COLLATE
                 Determine the locale for the ordering of the output.

       LC_CTYPE  Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, sin‐
                 gle-byte as opposed to multi-byte characters in arguments and input files).

       LC_MESSAGES
                 Determine the locale that should be used to affect the format and contents of diagnostic  messages  written  to
                 standard error.

       NLSPATH   Determine the location of message catalogs for the processing of LC_MESSAGES.<!-- ACCEPT >=> 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 -->

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       The  standard  output  shall  be used for the cross-reference listing, unless the −o option is used to select a different
       output file.

       The format of standard output is unspecified, except that the following information shall be included:

        *  If the −c option is not specified, each portion of the listing shall start with the name of the input file on a sepa‐
           rate line.

        *  The  name line shall be followed by a sorted list of symbols, each with its associated location pathname, the name of
           the function in which it appears (if it is not a function name itself), and line number references.

        *  Each line number may be preceded by an &amp;lt;asterisk&amp;gt; ('*') flag, meaning that this is  the  declaring  reference.  Other
           single-character flags, with implementation-defined meanings, may be included.

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       The output file named by the −o option shall be used instead of standard output.

EXTENDED DESCRIPTION
       None.

<!-- a42f9355-e63b-4205-ac0b-0b19b24faf9d <=< ACCEPT -->EXIT STATUS
       The following exit values shall be returned:

        0    Successful completion.

       &amp;gt;0    An error occurred.<!-- ACCEPT >=> a42f9355-e63b-4205-ac0b-0b19b24faf9d -->

CONSEQUENCES OF ERRORS
       Default.

       The following sections are informative.

APPLICATION USAGE
       None.

EXAMPLES
       None.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       c99

       The Base Definitions volume of POSIX.1‐2008, Chapter 8, Environment Variables, Section 12.2, Utility Syntax Guidelines

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions  of  this  text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013 Edition, Standard for
       Information Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7,  Copy‐
       right  (C)  2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This is POSIX.1-2008
       with the 2013 Technical Corrigendum 1 applied.) In the event of any discrepancy between this  version  and  the  original
       IEEE  and  The  Open  Group Standard, the original IEEE and The Open Group Standard is the referee document. The original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any typographical or formatting errors that appear in this page are most likely to have been introduced during  the  con‐
       version  of  the source files to man page format. To report such errors, see https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                     CXREF(1P)
DATE(1)                                                   User Commands                                                  DATE(1)

NAME
       date - print or set the system date and time

SYNOPSIS
       date [OPTION]... [+FORMAT]
       date [-u|--utc|--universal] [MMDDhhmm[[CC]YY][.ss]]

DESCRIPTION
       Display the current time in the given FORMAT, or set the system date.

       Mandatory arguments to long options are mandatory for short options too.

       -d, --date=STRING
              display time described by STRING, not 'now'

       --debug
              annotate the parsed date, and warn about questionable usage to stderr

       -f, --file=DATEFILE
              like --date; once for each line of DATEFILE

       -I[FMT], --iso-8601[=FMT]
              output  date/time  in  ISO 8601 format.  FMT='date' for date only (the default), 'hours', 'minutes', 'seconds', or
              'ns' for date and time to the indicated precision.  Example: 2006-08-14T02:34:56-06:00

       -R, --rfc-2822
              output date and time in RFC 2822 format.  Example: Mon, 14 Aug 2006 02:34:56 -0600

       --rfc-3339=FMT
              output date/time in RFC 3339 format.  FMT='date', 'seconds', or 'ns' for date and time to the indicated precision.
              Example: 2006-08-14 02:34:56-06:00

       -r, --reference=FILE
              display the last modification time of FILE

       -s, --set=STRING
              set time described by STRING

       -u, --utc, --universal
              print or set Coordinated Universal Time (UTC)

       --help display this help and exit

       --version
              output version information and exit

       FORMAT controls the output.  Interpreted sequences are:

       %%     a literal %

       %a     locale's abbreviated weekday name (e.g., Sun)

       %A     locale's full weekday name (e.g., Sunday)

       %b     locale's abbreviated month name (e.g., Jan)

       %B     locale's full month name (e.g., January)

       %c     locale's date and time (e.g., Thu Mar  3 23:05:25 2005)

       %C     century; like %Y, except omit last two digits (e.g., 20)

       %d     day of month (e.g., 01)

       %D     date; same as %m/%d/%y

       %e     day of month, space padded; same as %_d

       %F     full date; same as %Y-%m-%d

       %g     last two digits of year of ISO week number (see %G)

       %G     year of ISO week number (see %V); normally useful only with %V

       %h     same as %b

       %H     hour (00..23)

       %I     hour (01..12)

       %j     day of year (001..366)

       %k     hour, space padded ( 0..23); same as %_H

       %l     hour, space padded ( 1..12); same as %_I

       %m     month (01..12)

       %M     minute (00..59)

       %n     a newline

       %N     nanoseconds (000000000..999999999)

       %p     locale's equivalent of either AM or PM; blank if not known

       %P     like %p, but lower case

       %q     quarter of year (1..4)

       %r     locale's 12-hour clock time (e.g., 11:11:04 PM)

       %R     24-hour hour and minute; same as %H:%M

       %s     seconds since 1970-01-01 00:00:00 UTC

       %S     second (00..60)

       %t     a tab

       %T     time; same as %H:%M:%S

       %u     day of week (1..7); 1 is Monday

       %U     week number of year, with Sunday as first day of week (00..53)

       %V     ISO week number, with Monday as first day of week (01..53)

       %w     day of week (0..6); 0 is Sunday

       %W     week number of year, with Monday as first day of week (00..53)

       %x     locale's date representation (e.g., 12/31/99)

       %X     locale's time representation (e.g., 23:13:48)

       %y     last two digits of year (00..99)

       %Y     year

       %z     +hhmm numeric time zone (e.g., -0400)

       %:z    +hh:mm numeric time zone (e.g., -04:00)

       %::z   +hh:mm:ss numeric time zone (e.g., -04:00:00)

       %:::z  numeric time zone with : to necessary precision (e.g., -04, +05:30)

       %Z     alphabetic time zone abbreviation (e.g., EDT)

       By default, date pads numeric fields with zeroes.  The following optional flags may follow '%':

       -      (hyphen) do not pad the field

       _      (underscore) pad with spaces

       0      (zero) pad with zeros

       ^      use upper case if possible

       #      use opposite case if possible

       After  any  flags comes an optional field width, as a decimal number; then an optional modifier, which is either E to use
       the locale's alternate representations if available, or O to use the locale's alternate numeric symbols if available.

EXAMPLES
       Convert seconds since the epoch (1970-01-01 UTC) to a date

              $ date --date='@2147483647'

       Show the time on the west coast of the US (use tzselect(1) to find TZ)

              $ TZ='America/Los_Angeles' date

       Show the local time for 9AM next Friday on the west coast of the US

              $ date --date='TZ="America/Los_Angeles" 09:00 next Fri'

DATE STRING
       The --date=STRING is a mostly free format human readable date string such  as  "Sun,  29  Feb  2004  16:21:42  -0800"  or
       "2004-02-29  16:21:42"  or  even "next Thursday".  A date string may contain items indicating calendar date, time of day,
       time zone, day of week, relative time, relative date, and numbers.  An empty string indicates the beginning of  the  day.
       The date string format is more complex than is easily documented here but is fully described in the info documentation.

AUTHOR
       Written by David MacKenzie.

<!-- 30b0cf8a-458a-435b-a2e0-993472636e53 <=< ACCEPT -->REPORTING BUGS
       GNU coreutils online help: &amp;lt;http://www.gnu.org/software/coreutils/&amp;gt;
       Report date translation bugs to &amp;lt;http://translationproject.org/team/&amp;gt;

COPYRIGHT
       Copyright    ©    2016   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3   or   later
       &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.<!-- ACCEPT >=> 30b0cf8a-458a-435b-a2e0-993472636e53 -->

SEE ALSO
       Full documentation at: &amp;lt;http://www.gnu.org/software/coreutils/date&amp;gt;
       or available locally via: info '(coreutils) date invocation'

GNU coreutils 8.26                                        November 2016                                                  DATE(1)
DD(1)                                                     User Commands                                                    DD(1)

NAME
       dd - convert and copy a file

SYNOPSIS
       dd [OPERAND]...
       dd OPTION

DESCRIPTION
       Copy a file, converting and formatting according to the operands.

       bs=BYTES
              read and write up to BYTES bytes at a time

       cbs=BYTES
              convert BYTES bytes at a time

       conv=CONVS
              convert the file as per the comma separated symbol list

       count=N
              copy only N input blocks

       ibs=BYTES
              read up to BYTES bytes at a time (default: 512)

       if=FILE
              read from FILE instead of stdin

       iflag=FLAGS
              read as per the comma separated symbol list

       obs=BYTES
              write BYTES bytes at a time (default: 512)

       of=FILE
              write to FILE instead of stdout

       oflag=FLAGS
              write as per the comma separated symbol list

       seek=N skip N obs-sized blocks at start of output

       skip=N skip N ibs-sized blocks at start of input

       status=LEVEL
              The  LEVEL of information to print to stderr; 'none' suppresses everything but error messages, 'noxfer' suppresses
              the final transfer statistics, 'progress' shows periodic transfer statistics

       N and BYTES may be followed by the following multiplicative suffixes: c  =1,  w  =2,  b  =512,  kB  =1000,  K  =1024,  MB
       =1000*1000, M =1024*1024, xM =M, GB =1000*1000*1000, G =1024*1024*1024, and so on for T, P, E, Z, Y.

       Each CONV symbol may be:

       ascii  from EBCDIC to ASCII

       ebcdic from ASCII to EBCDIC

       ibm    from ASCII to alternate EBCDIC

       block  pad newline-terminated records with spaces to cbs-size

       unblock
              replace trailing spaces in cbs-size records with newline

       lcase  change upper case to lower case

       ucase  change lower case to upper case

       sparse try to seek rather than write the output for NUL input blocks

       swab   swap every pair of input bytes

       sync   pad every input block with NULs to ibs-size; when used with block or unblock, pad with spaces rather than NULs

       excl   fail if the output file already exists

       nocreat
              do not create the output file

       notrunc
              do not truncate the output file

       noerror
              continue after read errors

       fdatasync
              physically write output file data before finishing

       fsync  likewise, but also write metadata

       Each FLAG symbol may be:

       append append mode (makes sense only for output; conv=notrunc suggested)

       direct use direct I/O for data

       directory
              fail unless a directory

       dsync  use synchronized I/O for data

       sync   likewise, but also for metadata

       fullblock
              accumulate full blocks of input (iflag only)

       nonblock
              use non-blocking I/O

       noatime
              do not update access time

       nocache
              Request to drop cache.  See also oflag=sync

       noctty do not assign controlling terminal from file

       nofollow
              do not follow symlinks

       count_bytes
              treat 'count=N' as a byte count (iflag only)

       skip_bytes
              treat 'skip=N' as a byte count (iflag only)

       seek_bytes
              treat 'seek=N' as a byte count (oflag only)

       Sending a USR1 signal to a running 'dd' process makes it print I/O statistics to standard error and then resume copying.

       Options are:

       --help display this help and exit

       --version
              output version information and exit

AUTHOR
       Written by Paul Rubin, David MacKenzie, and Stuart Kemp.

<!-- 30b0cf8a-458a-435b-a2e0-993472636e53 <=< ACCEPT -->REPORTING BUGS
       GNU coreutils online help: &amp;lt;http://www.gnu.org/software/coreutils/&amp;gt;
       Report dd translation bugs to &amp;lt;http://translationproject.org/team/&amp;gt;

COPYRIGHT
       Copyright    ©    2016   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3   or   later
       &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.<!-- ACCEPT >=> 30b0cf8a-458a-435b-a2e0-993472636e53 -->

SEE ALSO
       Full documentation at: &amp;lt;http://www.gnu.org/software/coreutils/dd&amp;gt;
       or available locally via: info '(coreutils) dd invocation'

GNU coreutils 8.26                                        November 2016                                                    DD(1)
DELTA(1P)                                           POSIX Programmer's Manual                                          DELTA(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.
<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->
NAME
       delta — make a delta (change) to an SCCS file (DEVELOPMENT)

SYNOPSIS
       delta [−nps] [−g list] [−m mrlist] [−r SID] [−y[comment]] file...

DESCRIPTION
       The  delta  utility  shall be used to permanently introduce into the named SCCS files changes that were made to the files
       retrieved by get (called the g-files, or generated files).

OPTIONS
       The delta utility shall conform to the Base Definitions volume of POSIX.1‐2008, Section 12.2, Utility Syntax  Guidelines,
       except that the −y option has an optional option-argument. This optional option-argument shall not be presented as a sep‐
       arate argument.

       The following options shall be supported:

       −r SID    Uniquely identify which delta is to be made to the SCCS file. The use of this option shall be necessary only if
                 two  or  more  outstanding get commands for editing (get −e) on the same SCCS file were done by the same person
                 (login name). The SID value specified with the −r option can be either the SID specified  on  the  get  command
                 line or the SID to be made as reported by the get utility; see get.

       −s        Suppress the report to standard output of the activity associated with each file.  See the STDOUT section.

       −n        Specify retention of the edited g-file (normally removed at completion of delta processing).

       −g list   Specify  a  list (see get for the definition of list) of deltas that shall be ignored when the file is accessed
                 at the change level (SID) created by this delta.

       −m mrlist Specify a modification request (MR) number that the application shall supply as the reason for creating the new
                 delta. This shall be used if the SCCS file has the v flag set; see admin.

                 If −m is not used and '−' is not specified as a file argument, and the standard input is a terminal, the prompt
                 described in the STDOUT section shall be written to standard output before the standard input is read;  if  the
                 standard input is not a terminal, no prompt shall be issued.

                 MRs  in a list shall be separated by &amp;lt;blank&amp;gt; characters or escaped &amp;lt;newline&amp;gt; characters. An unescaped &amp;lt;newline&amp;gt;
                 shall terminate the MR list. The escape character is &amp;lt;backslash&amp;gt;.

                 If the v flag has a value, it shall be taken to be the name of a program which validates the correctness of the
                 MR  numbers.  If  a  non-zero  exit status is returned from the MR number validation program, the delta utility
                 shall terminate. (It is assumed that the MR numbers were not all valid.)

       −y[comment]
                 Describe the reason for making the delta. The comment shall be an arbitrary group of lines that would meet  the
                 definition of a text file. Implementations shall support comments from zero to 512 bytes and may support longer
                 values. A null string (specified as either −y, −y"", or in response to a prompt for a comment) shall be consid‐
                 ered a valid comment.

                 If  −y  is not specified and '−' is not specified as a file argument, and the standard input is a terminal, the
                 prompt described in the STDOUT section shall be written to standard output before the standard input  is  read;
                 if  the standard input is not a terminal, no prompt shall be issued. An unescaped &amp;lt;newline&amp;gt; shall terminate the
                 comment text. The escape character is &amp;lt;backslash&amp;gt;.

                 The −y option shall be required if the file operand is specified as '−'.

       −p        Write (to standard output) the SCCS file differences before and after the delta is applied in diff format;  see
                 diff.

OPERANDS
       The following operand shall be supported:

       file      A  pathname  of an existing SCCS file or a directory. If file is a directory, the delta utility shall behave as
                 though each file in the directory were specified as a named file, except that non-SCCS files (last component of
                 the pathname does not begin with s.)  and unreadable files shall be silently ignored.

                 If exactly one file operand appears, and it is '−', the standard input shall be read; each line of the standard
                 input shall be taken to be the name of an SCCS file to be processed. Non-SCCS files and unreadable files  shall
                 be silently ignored.

STDIN
       The standard input shall be a text file used only in the following cases:

        *  To read an mrlist or a comment (see the −m and −y options).

        *  A  file  operand  shall be specified as '−'.  In this case, the −y option must be used to specify the comment, and if
           the SCCS file has the v flag set, the −m option must also be used to specify the MR list.

INPUT FILES
       Input files shall be text files whose data is to be included in the SCCS files. If the first character of any line of  an
       input  file  is  &amp;lt;SOH&amp;gt; in the POSIX locale, the results are unspecified. If this file contains more than 99999 lines, the
       number of lines recorded in the header for this file shall be 99999 for this delta.

<!-- 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 <=< ACCEPT -->ENVIRONMENT VARIABLES
       The following environment variables shall affect the execution of delta:

       LANG      Provide a default value for the internationalization variables that are unset or null. (See  the  Base  Defini‐
                 tions  volume of POSIX.1‐2008, Section 8.2, Internationalization Variables for the precedence of international‐
                 ization variables used to determine the values of locale categories.)

       LC_ALL    If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_CTYPE  Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, sin‐
                 gle-byte as opposed to multi-byte characters in arguments and input files).

       LC_MESSAGES
                 Determine  the  locale  that should be used to affect the format and contents of diagnostic messages written to
                 standard error, and informative messages written to standard output.

       NLSPATH   Determine the location of message catalogs for the processing of LC_MESSAGES.<!-- ACCEPT >=> 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 -->

       TZ        Determine the timezone in which the time and date are written in the SCCS file. If the TZ variable is unset  or
                 NULL, an unspecified system default timezone is used.

ASYNCHRONOUS EVENTS
       If  SIGINT  is  caught,  temporary files shall be cleaned up and delta shall exit with a non-zero exit code. The standard
       action shall be taken for all other signals; see Section 1.4, Utility Description Defaults.

STDOUT
       The standard output shall be used only for the following messages in the POSIX locale:

        *  Prompts (see the −m and −y options) in the following formats:

               "MRs? "

               "comments? "

           The MR prompt, if written, shall always precede the comments prompt.

        *  A report of each file's activities (unless the −s option is specified) in the following format:

               "%s\n%d inserted\n%d deleted\n%d unchanged\n", &amp;lt;New SID&amp;gt;,
                   &amp;lt;number of lines inserted&amp;gt;, &amp;lt;number of lines deleted&amp;gt;,
                   &amp;lt;number of lines unchanged&amp;gt;

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       Any SCCS files updated shall be files of an unspecified format.

EXTENDED DESCRIPTION
   System Date and Time
       When a delta is added to an SCCS file, the system date and time shall be recorded for the new delta. If  a  get  is  per‐
       formed using an SCCS file with a date recorded apparently in the future, the behavior is unspecified.

<!-- a42f9355-e63b-4205-ac0b-0b19b24faf9d <=< ACCEPT -->EXIT STATUS
       The following exit values shall be returned:

        0    Successful completion.

       &amp;gt;0    An error occurred.<!-- ACCEPT >=> a42f9355-e63b-4205-ac0b-0b19b24faf9d -->

CONSEQUENCES OF ERRORS
       Default.

       The following sections are informative.

APPLICATION USAGE
       Problems  can  arise  if  the  system  date and time have been modified (for example, put forward and then back again, or
       unsynchronized clocks across a network) and can also arise when different values of the TZ environment variable are used.

       Problems of a similar nature can also arise for the operation of the get utility, which records the date and time in  the
       file body.

EXAMPLES
       None.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       Section 1.4, Utility Description Defaults, admin, diff, get, prs, rmdel

       The Base Definitions volume of POSIX.1‐2008, Chapter 8, Environment Variables, Section 12.2, Utility Syntax Guidelines

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions  of  this  text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013 Edition, Standard for
       Information Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7,  Copy‐
       right  (C)  2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This is POSIX.1-2008
       with the 2013 Technical Corrigendum 1 applied.) In the event of any discrepancy between this  version  and  the  original
       IEEE  and  The  Open  Group Standard, the original IEEE and The Open Group Standard is the referee document. The original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any typographical or formatting errors that appear in this page are most likely to have been introduced during  the  con‐
       version  of  the source files to man page format. To report such errors, see https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                     DELTA(1P)
DF(1)                                                     User Commands                                                    DF(1)

NAME
       df - report file system disk space usage

SYNOPSIS
       df [OPTION]... [FILE]...

DESCRIPTION
       This manual page documents the GNU version of df.  df displays the amount of disk space available on the file system con‐
       taining each file name argument.  If no file name is given, the space available on all currently mounted file systems  is
       shown.   Disk  space  is  shown in 1K blocks by default, unless the environment variable POSIXLY_CORRECT is set, in which
       case 512-byte blocks are used.

       If an argument is the absolute file name of a disk device node containing a mounted  file  system,  df  shows  the  space
       available  on that file system rather than on the file system containing the device node.  This version of df cannot show
       the space available on unmounted file systems, because on most kinds of systems doing so requires very nonportable  inti‐
       mate knowledge of file system structures.

OPTIONS
       Show information about the file system on which each FILE resides, or all file systems by default.

       Mandatory arguments to long options are mandatory for short options too.

       -a, --all
              include pseudo, duplicate, inaccessible file systems

       -B, --block-size=SIZE
              scale  sizes  by  SIZE before printing them; e.g., '-BM' prints sizes in units of 1,048,576 bytes; see SIZE format
              below

       -h, --human-readable
              print sizes in powers of 1024 (e.g., 1023M)

       -H, --si
              print sizes in powers of 1000 (e.g., 1.1G)

       -i, --inodes
              list inode information instead of block usage

       -k     like --block-size=1K

       -l, --local
              limit listing to local file systems

       --no-sync
              do not invoke sync before getting usage info (default)

       --output[=FIELD_LIST]
              use the output format defined by FIELD_LIST, or print all fields if FIELD_LIST is omitted.

       -P, --portability
              use the POSIX output format

       --sync invoke sync before getting usage info

       --total
              elide all entries insignificant to available space, and produce a grand total

       -t, --type=TYPE
              limit listing to file systems of type TYPE

       -T, --print-type
              print file system type

       -x, --exclude-type=TYPE
              limit listing to file systems not of type TYPE

       -v     (ignored)

       --help display this help and exit

       --version
              output version information and exit

       Display values are in units of the first available SIZE from --block-size, and the DF_BLOCK_SIZE, BLOCK_SIZE  and  BLOCK‐
       SIZE environment variables.  Otherwise, units default to 1024 bytes (or 512 if POSIXLY_CORRECT is set).

       The  SIZE argument is an integer and optional unit (example: 10K is 10*1024).  Units are K,M,G,T,P,E,Z,Y (powers of 1024)
       or KB,MB,... (powers of 1000).

       FIELD_LIST is a comma-separated list of columns to be included.  Valid field names  are:  'source',  'fstype',  'itotal',
       'iused', 'iavail', 'ipcent', 'size', 'used', 'avail', 'pcent', 'file' and 'target' (see info page).

AUTHOR
       Written by Torbjorn Granlund, David MacKenzie, and Paul Eggert.

<!-- 30b0cf8a-458a-435b-a2e0-993472636e53 <=< ACCEPT -->REPORTING BUGS
       GNU coreutils online help: &amp;lt;http://www.gnu.org/software/coreutils/&amp;gt;
       Report df translation bugs to &amp;lt;http://translationproject.org/team/&amp;gt;

COPYRIGHT
       Copyright    ©    2016   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3   or   later
       &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.<!-- ACCEPT >=> 30b0cf8a-458a-435b-a2e0-993472636e53 -->

SEE ALSO
       Full documentation at: &amp;lt;http://www.gnu.org/software/coreutils/df&amp;gt;
       or available locally via: info '(coreutils) df invocation'

GNU coreutils 8.26                                        November 2016                                                    DF(1)
DIFF(1)                                                   User Commands                                                  DIFF(1)

NAME
       diff - compare files line by line

SYNOPSIS
       diff [OPTION]... FILES

DESCRIPTION
       Compare FILES line by line.

       Mandatory arguments to long options are mandatory for short options too.

       --normal
              output a normal diff (the default)

       -q, --brief
              report only when files differ

       -s, --report-identical-files
              report when two files are the same

       -c, -C NUM, --context[=NUM]
              output NUM (default 3) lines of copied context

       -u, -U NUM, --unified[=NUM]
              output NUM (default 3) lines of unified context

       -e, --ed
              output an ed script

       -n, --rcs
              output an RCS format diff

       -y, --side-by-side
              output in two columns

       -W, --width=NUM
              output at most NUM (default 130) print columns

       --left-column
              output only the left column of common lines

       --suppress-common-lines
              do not output common lines

       -p, --show-c-function
              show which C function each change is in

       -F, --show-function-line=RE
              show the most recent line matching RE

       --label LABEL
              use LABEL instead of file name and timestamp (can be repeated)

       -t, --expand-tabs
              expand tabs to spaces in output

       -T, --initial-tab
              make tabs line up by prepending a tab

       --tabsize=NUM
              tab stops every NUM (default 8) print columns

       --suppress-blank-empty
              suppress space or tab before empty output lines

       -l, --paginate
              pass output through 'pr' to paginate it

       -r, --recursive
              recursively compare any subdirectories found

       --no-dereference
              don't follow symbolic links

       -N, --new-file
              treat absent files as empty

       --unidirectional-new-file
              treat absent first files as empty

       --ignore-file-name-case
              ignore case when comparing file names

       --no-ignore-file-name-case
              consider case when comparing file names

       -x, --exclude=PAT
              exclude files that match PAT

       -X, --exclude-from=FILE
              exclude files that match any pattern in FILE

       -S, --starting-file=FILE
              start with FILE when comparing directories

       --from-file=FILE1
              compare FILE1 to all operands; FILE1 can be a directory

       --to-file=FILE2
              compare all operands to FILE2; FILE2 can be a directory

       -i, --ignore-case
              ignore case differences in file contents

       -E, --ignore-tab-expansion
              ignore changes due to tab expansion

       -Z, --ignore-trailing-space
              ignore white space at line end

       -b, --ignore-space-change
              ignore changes in the amount of white space

       -w, --ignore-all-space
              ignore all white space

       -B, --ignore-blank-lines
              ignore changes where lines are all blank

       -I, --ignore-matching-lines=RE
              ignore changes where all lines match RE

       -a, --text
              treat all files as text

       --strip-trailing-cr
              strip trailing carriage return on input

       -D, --ifdef=NAME
              output merged file with '#ifdef NAME' diffs

       --GTYPE-group-format=GFMT
              format GTYPE input groups with GFMT

       --line-format=LFMT
              format all input lines with LFMT

       --LTYPE-line-format=LFMT
              format LTYPE input lines with LFMT

              These format options provide fine-grained control over the output

              of diff, generalizing -D/--ifdef.

       LTYPE is 'old', 'new', or 'unchanged'.
              GTYPE is LTYPE or 'changed'.

              GFMT (only) may contain:

       %&amp;lt;     lines from FILE1

       %&amp;gt;     lines from FILE2

       %=     lines common to FILE1 and FILE2

       %[-][WIDTH][.[PREC]]{doxX}LETTER
              printf-style spec for LETTER

              LETTERs are as follows for new group, lower case for old group:

       F      first line number

       L      last line number

       N      number of lines = L-F+1

       E      F-1

       M      L+1

       %(A=B?T:E)
              if A equals B then T else E

              LFMT (only) may contain:

       %L     contents of line

       %l     contents of line, excluding any trailing newline

       %[-][WIDTH][.[PREC]]{doxX}n
              printf-style spec for input line number

              Both GFMT and LFMT may contain:

       %%     %

       %c'C'  the single character C

       %c'\OOO'
              the character with octal code OOO

       C      the character C (other characters represent themselves)

       -d, --minimal
              try hard to find a smaller set of changes

       --horizon-lines=NUM
              keep NUM lines of the common prefix and suffix

       --speed-large-files
              assume large files and many scattered small changes

       --color[=WHEN]
              colorize the output; WHEN can be 'never', 'always', or 'auto' (the default)

       --palette=PALETTE
              specify the colors to use when --color is active PALETTE is a colon-separated list terminfo capabilities

       --help display this help and exit

       -v, --version
              output version information and exit

       FILES  are  'FILE1 FILE2' or 'DIR1 DIR2' or 'DIR FILE' or 'FILE DIR'.  If --from-file or --to-file is given, there are no
       restrictions on FILE(s).  If a FILE is '-', read standard input.  Exit status is 0 if inputs are the same, 1  if  differ‐
       ent, 2 if trouble.

AUTHOR
       Written by Paul Eggert, Mike Haertel, David Hayes, Richard Stallman, and Len Tower.

REPORTING BUGS
       Report bugs to: bug-diffutils@gnu.org
       GNU diffutils home page: &amp;lt;http://www.gnu.org/software/diffutils/&amp;gt;
       General help using GNU software: &amp;lt;http://www.gnu.org/gethelp/&amp;gt;

COPYRIGHT
       Copyright    ©    2016   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3   or   later
       &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       wdiff(1), cmp(1), diff3(1), sdiff(1), patch(1)

       The full documentation for diff is maintained as a Texinfo manual.  If the info and diff programs are properly  installed
       at your site, the command

              info diff

       should give you access to the complete manual.

diffutils 3.5                                              August 2016                                                   DIFF(1)
DIRNAME(1)                                                User Commands                                               DIRNAME(1)

NAME
       dirname - strip last component from file name

SYNOPSIS
       dirname [OPTION] NAME...

DESCRIPTION
       Output  each  NAME  with  its  last non-slash component and trailing slashes removed; if NAME contains no /'s, output '.'
       (meaning the current directory).

       -z, --zero
              end each output line with NUL, not newline

       --help display this help and exit

       --version
              output version information and exit

EXAMPLES
       dirname /usr/bin/
              -&amp;gt; "/usr"

       dirname dir1/str dir2/str
              -&amp;gt; "dir1" followed by "dir2"

       dirname stdio.h
              -&amp;gt; "."

AUTHOR
       Written by David MacKenzie and Jim Meyering.

<!-- 30b0cf8a-458a-435b-a2e0-993472636e53 <=< ACCEPT -->REPORTING BUGS
       GNU coreutils online help: &amp;lt;http://www.gnu.org/software/coreutils/&amp;gt;
       Report dirname translation bugs to &amp;lt;http://translationproject.org/team/&amp;gt;

COPYRIGHT
       Copyright   ©   2016   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3    or    later
       &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.<!-- ACCEPT >=> 30b0cf8a-458a-435b-a2e0-993472636e53 -->

SEE ALSO
       basename(1), readlink(1)

       Full documentation at: &amp;lt;http://www.gnu.org/software/coreutils/dirname&amp;gt;
       or available locally via: info '(coreutils) dirname invocation'

GNU coreutils 8.26                                        November 2016                                               DIRNAME(1)
DOT(1)                                               General Commands Manual                                              DOT(1)

NAME
       dot - filter for drawing directed graphs
       neato - filter for drawing undirected graphs
       twopi - filter for radial layouts of graphs
       circo - filter for circular layout of graphs
       fdp - filter for drawing undirected graphs
       sfdp - filter for drawing large undirected graphs
       patchwork - filter for squarified tree maps
       osage - filter for array-based layouts

SYNOPSIS
       dot [options] [files]
       neato [options] [files]
       twopi [options] [files]
       circo [options] [files]
       fdp [options] [files]
       sfdp [options] [files]
       patchwork [options] [files]
       osage [options] [files]

DESCRIPTION
       These  are  a  collection  of  programs for drawing graphs.  There is actually only one main program; the specific layout
       algorithms are implemented as plugins. Thus, they largely share all of the same command-line options.

       dot draws directed graphs.  It works well on directed acyclic graphs and other graphs that can be drawn as hierarchies or
       have a natural ``flow.''

       neato draws undirected graphs using a ``spring'' model and reducing the related energy (see Kamada and Kawai, Information
       Processing Letters 31:1, April 1989).

       twopi draws graphs using a radial layout (see G. Wills, Symposium on Graph Drawing GD'97, September,  1997).   Basically,
       one  node is chosen as the center and put at the origin.  The remaining nodes are placed on a sequence of concentric cir‐
       cles centered about the origin, each a fixed radial distance from the previous circle.  All nodes  distance  1  from  the
       center are placed on the first circle; all nodes distance 1 from a node on the first circle are placed on the second cir‐
       cle; and so forth.

       circo draws graphs using a circular layout (see Six and Tollis, GD '99 and ALENEX '99, and Kaufmann and Wiese,  GD  '02.)
       The  tool  identifies biconnected components and draws the nodes of the component on a circle. The block‐cutpoint tree is
       then laid out using a recursive radial algorithm. Edge crossings within a circle are minimized by placing as  many  edges
       on  the circle's perimeter as possible.  In particular, if the component is outerplanar, the component will have a planar
       layout.  If a node belongs to multiple non‐trivial biconnected components, the layout puts the node in one  of  them.  By
       default, this is the first non‐trivial component found in the search from the root component.

       fdp draws undirected graphs using a ``spring'' model. It relies on a force‐directed approach in the spirit of Fruchterman
       and Reingold (cf. Software‐Practice &amp; Experience 21(11), 1991, pp. 1129‐1164).

       sfdp also draws undirected graphs using the ``spring'' model described above, but it uses a multi-scale approach to  pro‐
       duce layouts of large graphs in a reasonably short time.

       patchwork draws the graph as a squarified treemap (see M. Bruls et al., ``Squarified treemaps'', Proc. Joint Eurographics
       and IEEE TCVG Symp. on Visualization, 2000, pp. 33-42). The clusters of the graph are used to specify the tree.

       osage draws the graph using its cluster structure. For a given cluster, each of its subclusters is laid  out  internally.
       Then the subclusters, plus any remaining nodes, are repositioned based on the cluster's pack and packmode attributes.

OUTPUT FORMATS
       Graphviz uses an extensible plugin mechanism for its output renderers, so to see what output formats your installation of
       dot supports you can use ``dot -T:'' and check the warning message.  Also, The plugin mechanism supports multiple  imple‐
       mentations  of  the output formats, allowing variations in the renderers and formatters.  To see what variants are avail‐
       able for a particular output format, use, for example: ``dot -Tpng:'' and to force a particular variant, use,  for  exam‐
       ple: ``dot -Tpng:gd''

       Traditionally, Graphviz supports the following:
       -Tdot (Dot format containing layout infomation),
       -Txdot (Dot format containing complete layout infomation),
       -Tps (PostScript),
       -Tpdf (PDF),
       -Tsvg -Tsvgz (Structured Vector Graphics),
       -Tfig (XFIG graphics),
       -Tpng (png bitmap graphics),
       -Tgif (gif bitmap graphics),
       -Tjpg -Tjpeg (jpeg bitmap graphics),
       -Tjson (xdot information encoded in JSON),
       -Timap (imagemap files for httpd servers for each node or edge that has a non‐null href attribute.),
       -Tcmapx (client‐side imagemap for use in html and xhtml).
       Additional  less  common or more special‐purpose output formats can be found at //http://www.graphviz.org/content/output-
       formats.

       Alternative plugins providing support for a given output format can be  found  from  the  error  message  resulting  from
       appending a ':' to the format. e.g. -Tpng: The first plugin listed is always the default.

       The  -P  switch  can  be used to produce a graph of all output variants supported by plugins in the local installation of
       graphviz.

GRAPH FILE LANGUAGE
       Here is a synopsis of the graph file language, normally using the extension .gv, for graphs:

       [strict] (graph|digraph) name { statement‐list }
       is the top‐level graph. If the graph is strict, then multiple edges are not allowed between the same pairs of nodes.   If
       it  is a directed graph, indicated by digraph, then the edgeop must be "-&amp;gt;". If it is an undirected graph then the edgeop
       must be "--".

       Statements may be:

       name=val;
       node [name=val];
       edge [name=val];
       Set default graph, node, or edge attribute name to val.  Any subgraph, node, or edge appearing after  this  inherits  the
       new default attributes.

       n0  [name0=val0,name1=val1,...];  Creates node n0 (if it does not already exist) and sets its attributes according to the
       optional list.

       n0 edgeop n1 edgeop ... edgeop nn [name0=val0,name1=val1,...];
       Creates edges between nodes n0, n1, ..., nn and sets their attributes according to the optional list.  Creates  nodes  as
       necessary.

       [subgraph name] { statement‐list }
       Creates  a  subgraph.   Subgraphs may be used in place of n0, ..., nn in the above statements to create edges.  [subgraph
       name] is optional; if missing, the subgraph is assigned an internal name.

       The language accepts both C‐style comments /*C...*/ or //...

       Attribute names and values are ordinary (C‐style) strings.  The following sections describe attributes that control graph
       layout.

       A more complete description of the language can be found at http://www.graphviz.org/content/dot-language.

GRAPH, NODE AND EDGE ATTRIBUTES
       Graphviz uses the name=value attributes, attached to graphs, subgraphs, nodes and edges, to tailor the layout and render‐
       ing. We list the more prominent  attributes  below.  The  complete  list  is  available  at  http://www.graphviz.org/con‐
       tent/attrs.

  Attributes Common to Nodes, Edges, Clusters and Graphs
       href=url  the  default url for image map files; in PostScript files, the base URL for all relative URLs, as recognized by
       Acrobat Distiller 3.0 and up.

       URL=url (``URL'' is a synonym for ``href.'')

       fontcolor=colorvalue sets the label text color.

       A colorvalue may be "h,s,v" (hue, saturation, brightness) floating point numbers between 0 and 1, or an  X11  color  name
       such  as  white,  black,  red,  green, blue, yellow, magenta, or cyan, or a "#rrggbb" (red, green, blue, 2 hex characters
       each) value.  See http://www.graphviz.org/content/attrs#kcolor and http://www.graphviz.org/content/color-names  for  fur‐
       ther details.

       fontsize=n sets the label type size to n points.

       fontname=name sets the label font family name.

       label=text where text may include escaped newlines \n, \l, or \r for center, left, and right justified lines.  The string
       '\G' value will be replaced by the graph name.  For node labels, the string '\N' value will be replaced by the node name.
       For  edges, if the substring '\T' is found in a label, it will be replaced by the name of the tail node; if the substring
       '\H' is found in a label, it will be replaced by the name of the head node; if the substring '\E' value  is  found  in  a
       label it will be replaced by: tail_node_name-&amp;gt;head_node_name or by: tail_node_name--head_node_name for undirected graphs.

       Graphviz  also  supports  special  HTML-like labels for constructing complex node content. A full‐description of these is
       given at http://www.graphviz.org/content/node-shapes#html.

       If a node has shape=record, the label may contain recursive box lists delimited by { | }.  Port identifiers in labels are
       set off by angle brackets &amp;lt; &amp;gt;.

  Graph Attributes
       size="x,y" specifies the maximum bounding box of drawing in inches.

       ratio=f sets the aspect ratio to f which may be a floating point number, or one of the keywords fill, compress, or auto.

       layout=engine  indicates  the preferred layout engine (dot, neato, fdp, etc.) overriding the default from the basename of
       the command or the -K commandline option.

       margin=f sets the page margin (included in the page size).

       ordering=out constrains order of out‐edges in a subgraph according to their file sequence.

       rotate=90 sets landscape mode.  (orientation=land is backward compatible but obsolete.)

       center=n a non‐zero value centers the drawing on the page.

       color=colorvalue sets foreground color (bgcolor for background).

       overlap=mode. This specifies what algorithm should do if any nodes overlap. If mode is false, the program uses the  Prism
       algorithm to adjust the nodes to eliminate overlaps. If mode is scale, the layout is uniformly scaled up, preserving node
       sizes, until nodes no longer overlap. The latter technique removes overlaps  while  preserving  symmetry  and  structure,
       while  the former removes overlaps more compactly but destroys symmetries.  If mode is true (the default), no reposition‐
       ing is done.  Since the dot algorithm always produces a layout with no node overlaps, this attribute is only useful  with
       other layouts.

       stylesheet="file.css" includes a reference to a stylesheet in -Tsvg and -Tsvgz outputs.  Ignored by other formats.

       splines  If set to true, edges are drawn as splines.  If set to polyline, edges are drawn as polylines.  If set to ortho,
       edges are drawn as orthogonal polylines.  In all of these cases,  the  nodes  must  not  overlap.   If  splines=false  or
       splines=line, edges are drawn as line segments.  The default is true for dot, and false for all other layouts.

       (dot‐specific attributes)

       nodesep=f sets the minimum separation between nodes.

       ranksep=f sets the minimum separation between ranks.

       rankdir=LR|RL|BT requests a left‐to‐right, right‐to‐left, or bottom‐to‐top, drawing.

       rank=same  (or min or max) in a subgraph constrains the rank assignment of its nodes.   If a subgraph's name has the pre‐
       fix cluster, its nodes are drawn in a distinct rectangle of the layout.  Clusters may be nested.

       (neato‐specific attributes)
       mode=val.  Algorithm for minimizing energy in the layout. By default, neato uses stress majorization. If mode=KK, it uses
       a version of gradient descent.

       model=val.   The neato model computes the desired distances between all pairs of vertices. By default, it uses the length
       of the shortest path. If model is set to circuit, a circuit-resistance model is used.  If model is set to subset, it uses
       a model whereby the edge length is the number of nodes that are neighbors of exactly one of the edge's vertices.

       start=val.   Requests  random  initial  placement  and  seeds the random number generator.  If val is not an integer, the
       process ID or current time is used as the seed.

       epsilon=n.  Sets the cutoff for the solver.  The default is 0.1.

       (twopi‐specific attributes)
       root=ctr. This specifies the node to be used as the center of the layout. If not specified, twopi will randomly pick  one
       of  the  nodes  that  are furthest from a leaf node, where a leaf node is a node of degree 1. If no leaf nodes exists, an
       arbitrary node is picked as center.

       ranksep=val. Specifies the radial distance in inches between the sequence of rings. The default is 0.75.

       (circo‐specific attributes)
       root=nodename. Specifies the name of a node occurring in the root block. If the graph  is  disconnected,  the  root  node
       attribute can be used to specify additional root blocks.

       mindist=value. Sets the minimum separation between all nodes. If not specified then circo uses a default value of 1.0.

       (fdp‐specific attributes)
       K=val. Sets the default ideal node separation in the layout.

       maxiter=val. Sets the maximum number of iterations used to layout the graph.

       start=val. Adjusts the random initial placement of nodes with no specified position.  If val is is an integer, it is used
       as the seed for the random number generator.  If val is not an integer, a random system‐generated integer,  such  as  the
       process ID or current time, is used as the seed.

  Node Attributes
       height=d  or width=d sets minimum height or width.  Adding fixedsize=true forces these to be the actual size (text labels
       are ignored).

       shape=builtin_polygon record epsf
       builtin_polygon can be such values as plaintext, ellipse, oval, circle, egg, triangle, box, diamond, trapezium, parallel‐
       ogram,  house, hexagon, octagon, note, tab, box3d, or component,, among others.  (Polygons are defined or modified by the
       following node attributes: regular, peripheries, sides, orientation, distortion and skew.)  epsf uses the  node's  shape‐
       file attribute as the path name of an external EPSF file to be automatically loaded for the node shape.

       See http://www.graphviz.org/content/node-shapes for a complete description of node shapes.

       color=colorvalue sets the outline color, and the default fill color if style=filled and fillcolor is not specified.

       fillcolor=colorvalue  sets  the fill color when style=filled.  If not specified, the fillcolor when style=filled defaults
       to be the same as the outline color.

       style=filled solid dashed dotted bold invis

       xlabel="text" specifies a label that will be place near, but outside, of a node. The normal label string is placed within
       the node shape.

       target="target" is a target string for client‐side imagemaps and SVG, effective when nodes have a URL.  The target string
       is used to determine which window of the browser is used for the URL.  Setting it to "_graphviz" will open a  new  window
       if  it  doesn't  already  exist,  or  reuse  it  if  it does.  If the target string is empty, the default, then no target
       attribute is included in the output.  The substrings '\N' and '\G' are substituted in the same manner  as  for  the  node
       label attribute.  Additionally the substring '\L' is substituted with the node label string.

       tooltip="text"  is  a  tooltip  string  for  client‐side imagemaps and SVG, effective when nodes have a URL.  The tooltip
       string defaults to be the same as the label string, but this  attribute  permits  nodes  without  labels  to  still  have
       tooltips  thus permitting denser graphs.  The substrings '\N' and '\G' are substituted in the same manner as for the node
       label attribute.  Additionally the substring '\L' is substituted with the node label string.

       The following attributes apply only to polygon shape nodes:

       regular=n if n is non‐zero then the polygon is made regular, i.e. symmetric about the x and y axis, otherwise the polygon
       takes  on  the  aspect  ratio  of  the  label.   builtin_polygons  that  are not already regular are made regular by this
       attribute.  builtin_polygons that are already regular are not affected (i.e.  they cannot be made asymmetric).

       peripheries=n sets the number of periphery lines drawn around the polygon.  This value supersedes the number of periphery
       lines of builtin_polygons.

       sides=n  sets  the number of sides to the polygon. n&amp;lt;3 results in an ellipse.  This attribute is ignored by builtin_poly‐
       gons.

       orientation=f sets the orientation of the first apex of the polygon counterclockwise from the vertical,  in  degrees.   f
       may be a floating point number.  The orientation of labels is not affected by this attribute.  This attribute is added to
       the initial orientation of builtin_polygons.

       distortion=f sets the amount of broadening of the top and narrowing of the bottom of the polygon (relative to its  orien‐
       tation).  Floating point values between -1 and +1 are suggested.  This attribute is ignored by builtin_polygons.

       skew=f  sets  the amount of right‐displacement of the top and left‐displacement of the bottom of the polygon (relative to
       its orientation).  Floating point values between -1 and +1 are suggested.  This attribute is ignored by builtin_polygons.

       (circo‐specific attributes)
       root=true/false. This specifies that the block containing the given node be treated as the root of the spanning  tree  in
       the layout.

       (neato‐ and fdp‐specific attributes)
       pin=val. If val is true, the node will remain at its initial position.

  Edge Attributes
       weight=val  where  val  is  the cost of the edge.  For dot, weights must be non-negative integers.  Values greater than 1
       tend to shorten the edge;  weight 0 flat edges are ignored for ordering nodes.  In twopi, a weight of 0  will  cause  the
       edge to be ignored in constructing the underlying spanning tree. For neato and fdp, a heavier weight will put more empha‐
       sis on the algorithm achieving an edge length closer to that specified by the edge's len attribute.

       style=solid dashed dotted bold invis

       color=colorvalue sets the line color for edges.

       color=colorvaluelist a ':' separated list of colorvalue creates parallel edges, one edge for each color.

       dir=forward back both none controls arrow direction.

       tailclip,headclip=false disables endpoint shape clipping.

       target="text" is a target string for client‐side imagemaps and SVG, effective when edges  have  a  URL.   If  the  target
       string  is  empty,  the default, then no target attribute is included in the output.  The substrings '\T', '\H', '\E' and
       '\G' are substituted in the same manner as for the edge label attribute.  Additionally the substring '\L' is  substituted
       with the edge label string.

       tooltip="text"  is  a  tooltip  string  for  client‐side  imagemaps  effective when edges have a URL.  The tooltip string
       defaults to be the same as the edge label string.  The substrings '\T', '\H', '\E' and '\G' are substituted in  the  same
       manner as for the edge label attribute.  Additionally the substring '\L' is substituted with the edge label string.

       arrowhead,arrowtail=none,  normal,  inv, dot, odot, invdot, invodot, tee, empty, invempty, open, halfopen, diamond, odia‐
       mond, box, obox, crow.  Specifies the shape of the glyph occurring where the edge touches the head or tail node,  respec‐
       tively. Note that this only specifies the shape. The dir attribute determines whether or not the glyph is drawn.

       arrowsize=val     specifies     a     multiplicative     scale    factor    for    the    size    of    the    arrowhead.
       inv_length=6,inv_width=7,dot_radius=2)

       headlabel,taillabel=text for labels appearing near the head and tail nodes of an  edge.   labelfontcolor,  labelfontname,
       labelfontsize  for  head and tail labels.  The substrings '\T', '\H', '\E' and '\G' are substituted in the same manner as
       for the edge label attribute.  Additionally the substring '\L' is substituted with the edge label string.

       headhref="url" sets the url for the head port in imagemap, PostScript and SVG files.  The substrings '\T', '\H', '\E' and
       '\G'  are substituted in the same manner as for the edge label attribute.  Additionally the substring '\L' is substituted
       with the edge label string.

       headURL="url" (headURL is a synonym for headhref.)

       headtarget="headtarget" is a target string for client‐side imagemaps and SVG, effective when edge heads have a URL.   The
       headtarget  string  is  used  to  determine which window of the browser is used for the URL.  If the headtarget string is
       empty, the default, then headtarget defaults to the same value as target for the edge.  The substrings '\T',  '\H',  '\E'
       and  '\G' are substituted in the same manner as for the edge label attribute.  Additionally the substring '\L' is substi‐
       tuted with the edge label string.

       headtooltip="tooltip" is a tooltip string for client‐side imagemaps effective when head ports have a  URL.   The  tooltip
       string  defaults to be the same as the headlabel string.  The substrings '\T', '\H', and '\E' are substituted in the same
       manner as for the edge label attribute.  Additionally the substring '\L' is substituted with the edge label string.

       tailhref="url" sets the url for the tail port in imagemap, PostScript and SVG files.  The substrings '\T', '\H', '\E' and
       '\G'  are substituted in the same manner as for the edge label attribute.  Additionally the substring '\L' is substituted
       with the edge label string.

       tailURL="url" (tailURL is a synonym for tailhref.)

       tailtarget="tailtarget" is a target string for client‐side imagemaps and SVG, effective when edge tails have a URL.   The
       tailtarget  string  is  used  to  determine which window of the browser is used for the URL.  If the tailtarget string is
       empty, the default, then tailtarget defaults to the same value as target for the edge.  The substrings '\T',  '\H',  '\E'
       and  '\G' are substituted in the same manner as for the edge label attribute.  Additionally the substring '\L' is substi‐
       tuted with the edge label string.

       tailtooltip="tooltip" is a tooltip string for client‐side imagemaps effective when tail ports have a  URL.   The  tooltip
       string  defaults to be the same as the taillabel string.  The substrings '\T', '\H', '\E' and '\G' are substituted in the
       same manner as for the edge label attribute.  Additionally the substring '\L' is substituted with the edge label string.

       labeldistance and labelangle (in degrees CCW) specify the placement of head and tail labels.

       decorate draws line from edge to label.

       samehead,sametail aim edges having the same value to the same port, using the average landing point.

       (dot‐specific attributes)
       constraint=false causes an edge to be ignored for rank assignment.

       minlen=n where n is an integer factor that applies to the edge length (ranks for normal edges, or minimum node separation
       for flat edges).

       xlabel="text" Edge labels in dot are treated as special types of nodes, with space allocated for them during node layout.
       This can sometimes deform the edge routing. If an xlabel is used instead, the label is placed after all nodes  and  edges
       have been positioned. In turn, this may mean that there is some overlap among the labels.

       (neato and fdp‐specific attributes)
       len=f sets the optimal length of an edge.  The default is 1.0.

COMMAND‐LINE OPTIONS
       -G sets a default graph attribute.
       -N sets a default node attribute.
       -E sets a default edge attribute.  Example: -Gsize="7,8" -Nshape=box -Efontsize=8

       -lfile  loads  custom PostScript library files.  Usually these define custom shapes or styles.  If -l is given by itself,
       the standard library is omitted.

       -Tlang sets the output language as described above.

       -n[1|2] (no‐op) If set, neato assumes nodes have already been positioned and all nodes have a pos  attribute  giving  the
       positions.   It  then  performs an optional adjustment to remove node‐node overlap, depending on the value of the overlap
       attribute, computes the edge layouts, depending on the value of the splines attribute, and emits the graph in the  appro‐
       priate format.  If num is supplied, the following actions occur:
           num = 1
       Equivalent to -n.
           num &amp;gt; 1
       Use node positions as specified, with no adjustment to remove node‐node overlaps, and use any edge layouts already speci‐
       fied by the pos attribute.  neato computes an edge layout for any edge that does not have a  pos  attribute.   As  usual,
       edge layout is guided by the splines attribute.

       -Klayout override the default layout engine implied by the command name.

       -O automatically generate output filenames based on the input filename and the -T format.

       -P generate a graph of the currently available plugins.

       -v (verbose) prints various information useful for debugging.

       -c configure plugins.

       -m memory test (observe no growth with top, kill when done).

       -qlevel set level of message suppression. The default is 1.

       -sfscale scale input by fscale, the default is 72.

       -y invert y coordinate in output.

       -V (version) prints version information and exits.

       -? prints the usage and exits.

       A  complete  description  of  the available command‐line options can be found at http://www.graphviz.org/content/command-
       line-invocation.

EXAMPLES
       digraph test123 {
               a -&amp;gt; b -&amp;gt; c;
               a -&amp;gt; {x y};
               b [shape=box];
               c [label="hello\nworld",color=blue,fontsize=24,
                    fontname="Palatino-Italic",fontcolor=red,style=filled];
               a -&amp;gt; z [label="hi", weight=100];
               x -&amp;gt; z [label="multi-line\nlabel"];
               edge [style=dashed,color=red];
               b -&amp;gt; x;
               {rank=same; b x}
       }

       graph test123 {
               a -- b -- c;
               a -- {x y};
               x -- c [w=10.0];
               x -- y [w=5.0,len=3];
       }

CAVEATS
       Edge splines can overlap unintentionally.

       Flat edge labels are slightly broken.  Intercluster edge labels are totally broken.

       Because unconstrained optimization is employed, node boxes can possibly overlap or touch unrelated edges.   All  existing
       spring embedders seem to have this limitation.

       Apparently reasonable attempts to pin nodes or adjust edge lengths and weights can cause instability.

AUTHORS
       Stephen C. North &amp;lt;north@research.att.com&amp;gt;
       Emden R. Gansner &amp;lt;erg@graphviz.org&amp;gt;
       John C. Ellson &amp;lt;ellson@research.att.com&amp;gt;
       Yifan Hu &amp;lt;yifanhu@yahoo.com&amp;gt;

       The bitmap driver (PNG, GIF etc) is by Thomas Boutell, &amp;lt;http://www.boutell.com/gd&amp;gt;

       The  Truetype  font  renderer is from the Freetype Project (David Turner, Robert Wilhelm, and Werner Lemberg) (who can be
       contacted at freetype-devel@lists.lrz-muenchen.de).

SEE ALSO
       This man page contains only a small amount of the information related to the Graphviz layout programs. The most  complete
       information can be found at http://www.graphviz.org/Documentation.php, especially in the on‐line reference pages. Most of
       these documents are also available in the doc and doc/info subtrees in the source and binary distributions.

       dotty(1)
       tcldot(n)
       xcolors(1)
       libcgraph(3)

       E. R. Gansner, S. C. North,  K. P. Vo, "DAG ‐ A Program to Draw Directed Graphs",  Software  ‐  Practice  and  Experience
       17(1), 1988, pp. 1047‐1062.
       E.  R.  Gansner,  E.  Koutsofios, S. C. North,  K. P. Vo, "A Technique for Drawing Directed Graphs," IEEE Trans. on Soft.
       Eng. 19(3), 1993, pp. 214‐230.
       S. North and E. Koutsofios, "Applications of graph visualization", Graphics Interface 94, pp. 234‐245.
       E. R. Gansner and E. Koutsofios and S. C. North, "Drawing Graphs with dot," Available at http://www.graphviz.org/pdf/dot‐
       guide.pdf.
       S. C. North, "NEATO User's Manual".  Available http://www.graphviz.org/pdf/neatoguide.pdf.
       E.  R.  Gansner  and  Y. Hu, "Efficient, Proximity-Preserving Node Overlap Removal", J. Graph Algorithms Appl., 14(1) pp.
       53‐74, 2010.

                                                         12 January 2015                                                  DOT(1)
DU(1)                                                     User Commands                                                    DU(1)

NAME
       du - estimate file space usage

SYNOPSIS
       du [OPTION]... [FILE]...
       du [OPTION]... --files0-from=F

DESCRIPTION
       Summarize disk usage of the set of FILEs, recursively for directories.

       Mandatory arguments to long options are mandatory for short options too.

       -0, --null
              end each output line with NUL, not newline

       -a, --all
              write counts for all files, not just directories

       --apparent-size
              print  apparent sizes, rather than disk usage; although the apparent size is usually smaller, it may be larger due
              to holes in ('sparse') files, internal fragmentation, indirect blocks, and the like

       -B, --block-size=SIZE
              scale sizes by SIZE before printing them; e.g., '-BM' prints sizes in units of 1,048,576 bytes;  see  SIZE  format
              below

       -b, --bytes
              equivalent to '--apparent-size --block-size=1'

       -c, --total
              produce a grand total

       -D, --dereference-args
              dereference only symlinks that are listed on the command line

       -d, --max-depth=N
              print the total for a directory (or file, with --all) only if it is N or fewer levels below the command line argu‐
              ment;  --max-depth=0 is the same as --summarize

       --files0-from=F
              summarize disk usage of the NUL-terminated file names specified in file F; if F is -, then read names  from  stan‐
              dard input

       -H     equivalent to --dereference-args (-D)

       -h, --human-readable
              print sizes in human readable format (e.g., 1K 234M 2G)

       --inodes
              list inode usage information instead of block usage

       -k     like --block-size=1K

       -L, --dereference
              dereference all symbolic links

       -l, --count-links
              count sizes many times if hard linked

       -m     like --block-size=1M

       -P, --no-dereference
              don't follow any symbolic links (this is the default)

       -S, --separate-dirs
              for directories do not include size of subdirectories

       --si   like -h, but use powers of 1000 not 1024

       -s, --summarize
              display only a total for each argument

       -t, --threshold=SIZE
              exclude entries smaller than SIZE if positive, or entries greater than SIZE if negative

       --time show time of the last modification of any file in the directory, or any of its subdirectories

       --time=WORD
              show time as WORD instead of modification time: atime, access, use, ctime or status

       --time-style=STYLE
              show times using STYLE, which can be: full-iso, long-iso, iso, or +FORMAT; FORMAT is interpreted like in 'date'

       -X, --exclude-from=FILE
              exclude files that match any pattern in FILE

       --exclude=PATTERN
              exclude files that match PATTERN

       -x, --one-file-system
              skip directories on different file systems

       --help display this help and exit

       --version
              output version information and exit

       Display  values  are in units of the first available SIZE from --block-size, and the DU_BLOCK_SIZE, BLOCK_SIZE and BLOCK‐
       SIZE environment variables.  Otherwise, units default to 1024 bytes (or 512 if POSIXLY_CORRECT is set).

       The SIZE argument is an integer and optional unit (example: 10K is 10*1024).  Units are K,M,G,T,P,E,Z,Y (powers of  1024)
       or KB,MB,... (powers of 1000).

PATTERNS
       PATTERN  is  a shell pattern (not a regular expression).  The pattern ?  matches any one character, whereas * matches any
       string (composed of zero, one or multiple characters).  For example, *.o will match any files  whose  names  end  in  .o.
       Therefore, the command

              du --exclude='*.o'

       will skip all files and subdirectories ending in .o (including the file .o itself).

AUTHOR
       Written by Torbjorn Granlund, David MacKenzie, Paul Eggert, and Jim Meyering.

<!-- 30b0cf8a-458a-435b-a2e0-993472636e53 <=< ACCEPT -->REPORTING BUGS
       GNU coreutils online help: &amp;lt;http://www.gnu.org/software/coreutils/&amp;gt;
       Report du translation bugs to &amp;lt;http://translationproject.org/team/&amp;gt;

COPYRIGHT
       Copyright    ©    2016   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3   or   later
       &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.<!-- ACCEPT >=> 30b0cf8a-458a-435b-a2e0-993472636e53 -->

SEE ALSO
       Full documentation at: &amp;lt;http://www.gnu.org/software/coreutils/du&amp;gt;
       or available locally via: info '(coreutils) du invocation'

GNU coreutils 8.26                                        November 2016                                                    DU(1)
ECHO(1)                                                   User Commands                                                  ECHO(1)

NAME
       echo - display a line of text

SYNOPSIS
       echo [SHORT-OPTION]... [STRING]...
       echo LONG-OPTION

DESCRIPTION
       Echo the STRING(s) to standard output.

       -n     do not output the trailing newline

       -e     enable interpretation of backslash escapes

       -E     disable interpretation of backslash escapes (default)

       --help display this help and exit

       --version
              output version information and exit

       If -e is in effect, the following sequences are recognized:

       \\     backslash

       \a     alert (BEL)

       \b     backspace

       \c     produce no further output

       \e     escape

       \f     form feed

       \n     new line

       \r     carriage return

       \t     horizontal tab

       \v     vertical tab

       \0NNN  byte with octal value NNN (1 to 3 digits)

       \xHH   byte with hexadecimal value HH (1 to 2 digits)

       NOTE:  your shell may have its own version of echo, which usually supersedes the version described here.  Please refer to
       your shell's documentation for details about the options it supports.

AUTHOR
       Written by Brian Fox and Chet Ramey.

<!-- 30b0cf8a-458a-435b-a2e0-993472636e53 <=< ACCEPT -->REPORTING BUGS
       GNU coreutils online help: &amp;lt;http://www.gnu.org/software/coreutils/&amp;gt;
       Report echo translation bugs to &amp;lt;http://translationproject.org/team/&amp;gt;

COPYRIGHT
       Copyright   ©   2016   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3    or    later
       &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.<!-- ACCEPT >=> 30b0cf8a-458a-435b-a2e0-993472636e53 -->

SEE ALSO
       Full documentation at: &amp;lt;http://www.gnu.org/software/coreutils/echo&amp;gt;
       or available locally via: info '(coreutils) echo invocation'

GNU coreutils 8.26                                        November 2016                                                  ECHO(1)
ED(1)                                                     User Commands                                                    ED(1)

NAME
       ed - line-oriented text editor

SYNOPSIS
       ed [options] [file]

DESCRIPTION
       GNU Ed - The GNU line editor.

OPTIONS
       -h, --help
              display this help and exit

       -V, --version
              output version information and exit

       -G, --traditional
              run in compatibility mode

       -l, --loose-exit-status
              exit with 0 status even if a command fails

       -p, --prompt=STRING
              use STRING as an interactive prompt

       -r, --restricted
              run in restricted mode

       -s, --quiet, --silent
              don't print byte counts or '!' prompt

       -v, --verbose
              be verbose; equivalent to the 'H' command

       Start edit by reading in 'file' if given.  If 'file' begins with a '!', read output of shell command.

       Exit  status:  0  for  a normal exit, 1 for environmental problems (file not found, invalid flags, I/O errors, etc), 2 to
       indicate a corrupt or invalid input file, 3 for an internal consistency error (eg, bug) which caused ed to panic.

REPORTING BUGS
       Report bugs to bug-ed@gnu.org
       Ed home page: http://www.gnu.org/software/ed/ed.html
       General help using GNU software: http://www.gnu.org/gethelp

COPYRIGHT
       Copyright © 1994 Andrew L. Moore.
       Copyright © 2017 Antonio Diaz Diaz.  License GPLv3+: GNU GPL version 3 or later &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       The full documentation for ed is maintained as a Texinfo manual.  If the info and ed programs are properly  installed  at
       your site, the command

              info ed

       should give you access to the complete manual.

ed 1.14.1                                                 January 2017                                                     ED(1)
ENV(1)                                                    User Commands                                                   ENV(1)

NAME
       env - run a program in a modified environment

SYNOPSIS
       env [OPTION]... [-] [NAME=VALUE]... [COMMAND [ARG]...]

DESCRIPTION
       Set each NAME to VALUE in the environment and run COMMAND.

       Mandatory arguments to long options are mandatory for short options too.

       -i, --ignore-environment
              start with an empty environment

       -0, --null
              end each output line with NUL, not newline

       -u, --unset=NAME
              remove variable from the environment

       --help display this help and exit

       --version
              output version information and exit

       A mere - implies -i.  If no COMMAND, print the resulting environment.

AUTHOR
       Written by Richard Mlynarik and David MacKenzie.

<!-- 30b0cf8a-458a-435b-a2e0-993472636e53 <=< ACCEPT -->REPORTING BUGS
       GNU coreutils online help: &amp;lt;http://www.gnu.org/software/coreutils/&amp;gt;
       Report env translation bugs to &amp;lt;http://translationproject.org/team/&amp;gt;

COPYRIGHT
       Copyright    ©    2016   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3   or   later
       &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.<!-- ACCEPT >=> 30b0cf8a-458a-435b-a2e0-993472636e53 -->

SEE ALSO
       Full documentation at: &amp;lt;http://www.gnu.org/software/coreutils/env&amp;gt;
       or available locally via: info '(coreutils) env invocation'

GNU coreutils 8.26                                        November 2016                                                   ENV(1)
EVAL(1P)                                            POSIX Programmer's Manual                                           EVAL(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->

NAME
       eval — construct command by concatenating arguments

SYNOPSIS
       eval [argument...]

DESCRIPTION
       The eval utility shall construct a command by concatenating arguments together, separating each with a &amp;lt;space&amp;gt; character.
       The constructed command shall be read and executed by the shell.

OPTIONS
       None.

OPERANDS
       See the DESCRIPTION.

<!-- fe96d119-27ce-4a62-99a9-ff5840fe1a84 <=< ACCEPT -->STDIN
       Not used.

INPUT FILES
       None.

ENVIRONMENT VARIABLES
       None.

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       Not used.

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       None.

EXIT STATUS
       If there are no arguments, or only null arguments, eval shall return a zero exit status; otherwise, it shall  return  the
       exit status of the command defined by the string of concatenated arguments separated by &amp;lt;space&amp;gt; characters, or a non-zero
       exit status if the concatenation could not be parsed as a command and the shell is interactive  (and  therefore  did  not
       abort).

CONSEQUENCES OF ERRORS
       Default.

       The following sections are informative.<!-- ACCEPT >=> fe96d119-27ce-4a62-99a9-ff5840fe1a84 -->

APPLICATION USAGE
       Since  eval  is not required to recognize the "--" end of options delimiter, in cases where the argument(s) to eval might
       begin with '-' it is recommended that the first argument is prefixed by a string that will not alter the commands  to  be
       executed, such as a &amp;lt;space&amp;gt; character:

           eval " $commands"

       or:

           eval " $(some_command)"

EXAMPLES
       foo=10 x=foo
       y='$'$x
       echo $y
       $foo
       eval y='$'$x
       echo $y
       10

RATIONALE
       This  standard allows, but does not require, eval to recognize "--".  Although this means applications cannot use "--" to
       protect against options supported as an extension (or errors reported for unsupported options), the nature  of  the  eval
       utility is such that other means can be used to provide this protection (see APPLICATION USAGE above).

FUTURE DIRECTIONS
       None.

SEE ALSO
       Section 2.14, Special Built-In Utilities

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions  of  this  text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013 Edition, Standard for
       Information Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7,  Copy‐
       right  (C)  2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This is POSIX.1-2008
       with the 2013 Technical Corrigendum 1 applied.) In the event of any discrepancy between this  version  and  the  original
       IEEE  and  The  Open  Group Standard, the original IEEE and The Open Group Standard is the referee document. The original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any typographical or formatting errors that appear in this page are most likely to have been introduced during  the  con‐
       version  of  the source files to man page format. To report such errors, see https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                      EVAL(1P)
EX(1)                                                     User Commands                                                    EX(1)

NAME
       ex, edit - text editor

SYNOPSIS
       ex [-c command|+command] [-r [filename]] [-s|-] [-t tagstring] [-w size] [-lLRvV] [file ...]

       edit [-c command|+command] [-r [filename]] [-s|-] [-t tagstring] [-w size] [-lLRvV] [file ...]

DESCRIPTION
       Ex  is the root of a family of editors: edit, ex and vi.  Ex is a superset of ed, with the most notable extension being a
       display editing facility.  Display based editing on CRT terminals is the focus of vi.

       For those who have not used ed, or for casual users, the editor edit may be convenient.  It avoids some of the  complexi‐
       ties of ex used mostly by systems programmers and persons very familiar with ed.

       The following options are accepted:

       -c command or +command
              Execute command when editing begins.

       -l     Start in a special mode useful for the Lisp programming language.

       -r [filename] or -L
              When  no  argument is supplied with this option, all files to be recovered are listed and the editor exits immedi‐
              ately.  If a filename is specified, the corresponding temporary file is opened in recovery mode.

       -R     Files are opened read-only when this option is given.

       -s or -
              Script mode; all feedback for interactive editing is disabled.  EXINIT and .exrc files are not processed.

       -t tagstring
              Read the tags file, then choose the file and position specified by tagstring for editing.

       -v     Start in visual mode even if called as ex.

       -V     Echo command input to standard error, unless it originates from a terminal.

       -w size
              Specify the size of the editing window for visual mode.

   File manipulation
       Ex is normally editing the contents of a single file, whose name is recorded in the current file name.  Ex  performs  all
       editing  actions in a buffer (actually a temporary file) into which the text of the file is initially read.  Changes made
       to the buffer have no effect on the file being edited unless and until the buffer contents are written out  to  the  file
       with  a  write  command.   After the buffer contents are written, the previous contents of the written file are no longer
       accessible.  When a file is edited, its name becomes the current file name, and its contents are read into the buffer.

       The current file is almost always considered to be edited.  This means that the contents of the buffer are logically con‐
       nected  with  the  current file name, so that writing the current buffer contents onto that file, even if it exists, is a
       reasonable action.  If the current file is not edited then ex will not normally write on it if it already exists.

       For saving blocks of text while editing, and especially when editing more than one file, ex has a group of named buffers.
       These  are similar to the normal buffer, except that only a limited number of operations are available on them.  The buf‐
       fers have names a through z.

   Exceptional Conditions
       When errors occur ex (optionally) rings the terminal bell and, in any case, prints an error diagnostic.  If  the  primary
       input  is  from  a file, editor processing will terminate.  If an interrupt signal is received, ex prints “Interrupt” and
       returns to its command level.  If the primary input is a file, then ex will exit when this occurs.

       If a hangup signal is received and the buffer has been modified since it was last written out, or if the system  crashes,
       either the editor (in the first case) or the system (after it reboots in the second) will attempt to preserve the buffer.
       The next time the user logs in he should be able to recover the work he was doing, losing at most a few lines of  changes
       from  the last point before the hangup or editor crash.  To recover a file one can use the -r option.  If one was editing
       the file resume, then he should change to the directory where he were when the crash occurred, giving the command

              ex -r resume

       After checking that the retrieved file is indeed ok, he can write it over the previous contents of that file.

       The user will normally get mail from the system telling him when a file has been saved after a crash.  The command

              ex -r

       will print a list of the files which have been saved for the user.

   Editing modes
       Ex has five distinct modes.  The primary mode is command mode.  Commands are entered in command mode when a `:' prompt is
       present,  and  are executed each time a complete line is sent.  In text input mode ex gathers input lines and places them
       in the file.  The append, insert, and change commands use text input mode.  No prompt is printed when in text input mode.
       This mode is left by typing a `.' alone at the beginning of a line, and command mode resumes.

       The  last  three  modes  are open and visual modes, entered by the commands of the same name, and, within open and visual
       modes text insertion mode.  Open and visual modes allow local editing operations to be performed on the text in the file.
       The  open command displays one line at a time on any terminal while visual works on CRT terminals with random positioning
       cursors, using the screen as a (single) window for file editing changes.  These modes are described (only) in  An  Intro‐
       duction to Display Editing with Vi.

   Command structure
       Most  command  names are English words, and initial prefixes of the words are acceptable abbreviations.  The ambiguity of
       abbreviations is resolved in favor of the more commonly used commands.

       Most commands accept prefix addresses specifying the lines in the file upon which they are to have effect.  The forms  of
       these  addresses  will  be discussed below.  A number of commands also may take a trailing count specifying the number of
       lines to be involved in the command.  Thus the command “10p” will print the tenth line in the  buffer  while  “delete  5”
       will delete five lines from the buffer, starting with the current line.

       Some commands take other information or parameters, this information always being given after the command name.

       A  number  of  commands have two distinct variants.  The variant form of the command is invoked by placing an `!' immedi‐
       ately after the command name.  Some of the default variants may be controlled by options; in this case, the `!' serves to
       toggle the default.

       The characters `#', `p' and `l' may be placed after many commands (A `p' or `l' must be preceded by a blank or tab except
       in the single special case `dp').  In this case, the command abbreviated by these characters is executed after  the  com‐
       mand completes.  Since ex normally prints the new current line after each change, `p' is rarely necessary.  Any number of
       `+' or `-' characters may also be given with these flags.  If they appear, the specified offset is applied to the current
       line value before the printing command is executed.

       It  is  possible  to give editor commands which are ignored.  This is useful when making complex editor scripts for which
       comments are desired.  The comment character is the double quote: ".  Any command line beginning with " is ignored.  Com‐
       ments  beginning  with " may also be placed at the ends of commands, except in cases where they could be confused as part
       of text (shell escapes and the substitute and map commands).

       More than one command may be placed on a line by separating each pair of commands by a `|' character.  However the global
       commands, comments, and the shell escape `!'  must be the last command on a line, as they are not terminated by a `|'.

   Command addressing
       .                   The  current  line.   Most  commands  leave the current line as the last line which they affect.  The
                           default address for most commands is the current line, thus `.' is rarely used alone as an address.

       n                   The nth line in the editor's buffer, lines being numbered sequentially from 1.

       $                   The last line in the buffer.

       %                   An abbreviation for “1,$”, the entire buffer.

       +n -n               An offset relative to the current buffer line.  The forms `.+3' `+3' and `+++' are all equivalent; if
                           the current line is line 100 they all address line 103.

       /pat/ ?pat?         Scan  forward  and  backward respectively for a line containing pat, a regular expression (as defined
                           below).  The scans normally wrap around the end of the buffer.  If all that is desired  is  to  print
                           the  next line containing pat, then the trailing / or ? may be omitted.  If pat is omitted or explic‐
                           itly empty, then the last regular expression specified is located.  The forms \/ and  \?  scan  using
                           the last regular expression used in a scan; after a substitute // and ?? would scan using the substi‐
                           tute's regular expression.

       '' 'x               Before each non-relative motion of the current line `.', the previous current line is marked  with  a
                           tag,  subsequently  referred to as `'''.  This makes it easy to refer or return to this previous con‐
                           text.  Marks may also be established by the mark command, using single lower case letters x  and  the
                           marked lines referred to as `'x'.

       Addresses  to  commands  consist  of  a series of addressing primitives, separated by `,' or `;'.  Such address lists are
       evaluated left-to-right.  When addresses are separated by `;' the current line `.'  is set to the value of  the  previous
       addressing  expression  before  the  next address is interpreted.  If more addresses are given than the command requires,
       then all but the last one or two are ignored.  If the command takes two addresses, the first addressed line must  precede
       the second in the buffer.

       Null  address specifications are permitted in a list of addresses, the default in this case is the current line `.'; thus
       `,100' is equivalent to `.,100'.  It is an error to give a prefix address to a command which expects none.

   Command descriptions
       The following form is a prototype for all ex commands:

              address command ! parameters count flags

       All parts are optional; the degenerate case is the empty command which prints the next line in the file.  For sanity with
       use from within visual mode, ex ignores a “:” preceding any command.

       In  the  following  command descriptions, the default addresses are shown in parentheses, which are not, however, part of
       the command.

       abbreviate word rhs abbr: ab
              Add the named abbreviation to the current list.  When in input mode in visual, if word  is  typed  as  a  complete
              word, it will be changed to rhs .

       ( . ) append   abbr: a
       text
       .
              Reads  the  input  text  and  places it after the specified line.  After the command, `.'  addresses the last line
              input or the specified line if no lines were input.  If address `0' is given, text is placed at the  beginning  of
              the buffer.

       a!
       text
       .
              The variant flag to append toggles the setting for the autoindent option during the input of text.

       args   The members of the argument list are printed, with the current argument delimited by `[' and `]'.

       cd directory
              The cd command is a synonym for chdir.

       ( . , . ) change count   abbr: c
       text
       .
              Replaces  the specified lines with the input text.  The current line becomes the last line input; if no lines were
              input it is left as for a delete.

       c!
       text
       .
              The variant toggles autoindent during the change.

       chdir directory
              The specified directory becomes the current directory.  If no directory is specified, the  current  value  of  the
              home option is used as the target directory.  After a chdir the current file is not considered to have been edited
              so that write restrictions on pre-existing files apply.

       ( . , . )copy addr flags abbr: co
              A copy of the specified lines is placed after addr, which may be `0'.  The current line `.'   addresses  the  last
              line of the copy.  The command t is a synonym for copy.

       ( . , . )delete buffer count flags abbr: d
              Removes  the  specified  lines from the buffer.  The line after the last line deleted becomes the current line; if
              the lines deleted were originally at the end, the new last line becomes the current line.  If a  named  buffer  is
              specified  by  giving  a  letter, then the specified lines are saved in that buffer, or appended to it if an upper
              case letter is used.

       edit file abbr: e
       ex file
              Used to begin an editing session on a new file.  The editor first checks to see if the buffer  has  been  modified
              since  the  last  write  command was issued.  If it has been, a warning is issued and the command is aborted.  The
              command otherwise deletes the entire contents of the editor buffer, makes the named  file  the  current  file  and
              prints  the new filename.  After insuring that this file is sensible (i.e., that it is not a binary file such as a
              directory, a block or character special file other than /dev/tty, a terminal, or a binary or executable file), the
              editor reads the file into its buffer.

              If the read of the file completes without error, the number of lines and characters read is typed.  Any null char‐
              acters in the file are discarded.  If none of these errors occurred, the file is considered edited.  If  the  last
              line  of  the  input  file  is missing the trailing newline character, it will be supplied and a complaint will be
              issued.  This command leaves the current line `.' at the last line read.  If executed from within open or  visual,
              the current line is initially the first line of the file.

       e! file
              The  variant  form  suppresses  the complaint about modifications having been made and not written from the editor
              buffer, thus discarding all changes which have been made before editing the new file.

       e +n file
              Causes the editor to begin at line n rather than at the last line; n may also be an editor command  containing  no
              spaces, e.g.: “+/pat”.

       file abbr: f
              Prints  the  current  file name, whether it has been `[Modified]' since the last write command, whether it is read
              only , the current line, the number of lines in the buffer, and the percentage of the way through  the  buffer  of
              the  current  line.  In the rare case that the current file is `[Not edited]' this is noted also; in this case one
              has to use the form w! to write to the file, since the editor is not sure that a write will  not  destroy  a  file
              unrelated to the current contents of the buffer.

       file file
              The current file name is changed to file which is considered `[Not edited]'.

       ( 1 , $ ) global /pat/ cmds   abbr: g
              First  marks  each  line among those specified which matches the given regular expression.  Then the given command
              list is executed with `.' initially set to each marked line.

              The command list consists of the remaining commands on the current input line and may continue to  multiple  lines
              by ending all but the last such line with a `\'.  If cmds (and possibly the trailing / delimiter) is omitted, each
              line matching pat is printed.  Append, insert, and change commands and associated input  are  permitted;  the  `.'
              terminating  input  may  be omitted if it would be on the last line of the command list.  Open and visual commands
              are permitted in the command list and take input from the terminal.

              The global command itself may not appear in cmds.  The undo command is also not permitted there, as  undo  instead
              can  be  used  to  reverse the entire global command.  The options autoprint and autoindent are inhibited during a
              global, (and possibly the trailing / delimiter) and the value of the report option  is  temporarily  infinite,  in
              deference to a report for the entire global.  Finally, the context mark `''' is set to the value of `.' before the
              global command begins and is not changed during a global command, except perhaps by an open or visual  within  the
              global.

       g! /pat/ cmds  abbr: v
              The variant form of global runs cmds at each line not matching pat.

       ( . )insert    abbr: i
       text
       .
              Places  the  given text before the specified line.  The current line is left at the last line input; if there were
              none input it is left at the line before the addressed line.  This command differs from append only in the  place‐
              ment of text.

       i!
       text
       .
              The variant toggles autoindent during the insert.

       ( . , .+1 ) join count flags  abbr: j
              Places the text from a specified range of lines together on one line.  White space is adjusted at each junction to
              provide at least one blank character, two if there was a `.' at the end of the line, or none if the first  follow‐
              ing character is a `)'.  If there is already white space at the end of the line, then the white space at the start
              of the next line will be discarded.

       j!     The variant causes a simpler join with no white space processing; the characters in the lines are simply  concate‐
              nated.

       ( . ) k x
              The k command is a synonym for mark.  It does not require a blank or tab before the following letter.

       ( . , . ) list count flags
              Prints  the specified lines in a more unambiguous way: tabs are printed as `^I' and the end of each line is marked
              with a trailing `$'.  The current line is left at the last line printed.

       map[!] lhs rhs
              The map command is used to define macros for use in visual command mode.  Lhs should be a single character, or the
              sequence “#n”, for n a digit, referring to function key n.  When this character or function key is typed in visual
              mode, it will be as though the corresponding rhs had been typed.  On terminals without function keys, the user can
              type  “#n”.  If the `!' character follows the command name, the mapping is interpreted in input mode.  See section
              6.9 of the “Introduction to Display Editing with Vi” for more details.

       ( . ) mark x
              Gives the specified line mark x, a single lower case letter.  The x must be preceded by a blank  or  a  tab.   The
              addressing form `'x' then addresses this line.  The current line is not affected by this command.

       ( . , . ) move addr abbr: m
              The move command repositions the specified lines to be after addr .  The first of the moved lines becomes the cur‐
              rent line.

       next abbr: n
              The next file from the command line argument list is edited.

       n!     The variant suppresses warnings about the modifications to the buffer not  having  been  written  out,  discarding
              (irretrievably) any changes which may have been made.

       n filelist
       n +command filelist
              The  specified  filelist  is expanded and the resulting list replaces the current argument list; the first file in
              the new list is then edited.  If command is given (it must contain no spaces), then it is executed  after  editing
              the first such file.

       ( . , . ) number count flags  abbr: # or nu
              Prints each specified line preceded by its buffer line number.  The current line is left at the last line printed.

       ( . ) open flags    abbr: o
       ( . ) open /pat/ flags
              Enters  intraline  editing open mode at each addressed line.  If pat is given, then the cursor will be placed ini‐
              tially at the beginning of the string matched by the pattern.  To exit this mode use Q.  See  An  Introduction  to
              Display Editing with Vi for more details.

       preserve
              The  current  editor buffer is saved as though the system had just crashed.  This command is for use only in emer‐
              gencies when a write command has resulted in an error.

       ( . , . )print count     abbr: p or P
              Prints the specified lines with non-printing characters printed as control characters `^x'; delete (octal 177)  is
              represented as `^?'.  The current line is left at the last line printed.

       ( . )put buffer     abbr: pu
              Puts back previously deleted or yanked lines.  Normally used with delete to effect movement of lines, or with yank
              to effect duplication of lines.  If no buffer is specified, then the last deleted or yanked text is restored.  But
              no  modifying  commands may intervene between the delete or yank and the put, nor may lines be moved between files
              without using a named buffer.  By using a named buffer, text may be restored that was saved there at any  previous
              time.

       quit abbr: q
              Causes  ex  to  terminate.   No automatic write of the editor buffer to a file is performed.  However, ex issues a
              warning message if the file has changed since the last write command was issued, and does not quit.  Ex will  also
              issue  a  diagnostic  if  there  are  more  files  in the argument list.  Normally, the user will wish to save his
              changes, and he should give a write command; if he wishes to discard them, he should the q! command variant.

       q!     Quits from the editor, discarding changes to the buffer without complaint.

       ( . ) read file     abbr: r
              Places a copy of the text of the given file in the editing buffer after the specified line.  If no file  is  given
              the  current  file  name  is  used.   The current file name is not changed unless there is none in which case file
              becomes the current name.  The sensibility restrictions for the edit command apply here also.  If the file  buffer
              is empty and there is no current name then ex treats this as an edit command.

              Address  `0'  is legal for this command and causes the file to be read at the beginning of the buffer.  Statistics
              are given as for the edit command when the read successfully terminates.  After a read the  current  line  is  the
              last line read.  Within open and visual the current line is set to the first line read rather than the last.

       ( . ) read  !command
              Reads  the  output of the command command into the buffer after the specified line.  This is not a variant form of
              the command, rather a read specifying a command rather than a filename; a blank or tab before the ! is mandatory.

       recover file
              Recovers file from the system save area.  Used after a accidental hangup of the phone or a system  crash  or  pre‐
              serve command.  Except when preserve is used, the user will be notified by mail when a file is saved.

       rewind    abbr: rew
              The argument list is rewound, and the first file in the list is edited.

       rew!   Rewinds the argument list discarding any changes made to the current buffer.

       set parameter
              With  no arguments, prints those options whose values have been changed from their defaults; with parameter all it
              prints all of the option values.

              Giving an option name followed by a `?'  causes the current value of that option to be printed.  The `?' is unnec‐
              essary  unless  the option is Boolean valued.  Boolean options are given values either by the form `set option' to
              turn them on or `set nooption' to turn them off; string and  numeric  options  are  assigned  via  the  form  `set
              option=value'.

              More than one parameter may be given to set ; they are interpreted left-to-right.

              A list of options can be found below.

       shell     abbr: sh
              A new shell is created.  When it terminates, editing resumes.

       source file    abbr: so
              Reads and executes commands from the specified file.  Source commands may be nested.

       ( . , . ) substitute /pat/repl/ options count flags
              abbr: s
              On  each specified line, the first instance of pattern pat is replaced by replacement pattern repl.  If the global
              indicator option character `g' appears, then all instances are substituted; if the  confirm  indication  character
              `c'  appears,  then before each substitution the line to be substituted is typed with the string to be substituted
              marked with `^' characters.  By typing an `y' one can cause the substitution to  be  performed,  any  other  input
              causes no change to take place.  After a substitute the current line is the last line substituted.

              Lines  may be split by substituting new-line characters into them.  The newline in repl must be escaped by preced‐
              ing it with a `\'.  Other metacharacters available in pat and repl are described below.

       stop   Suspends the editor, returning control to the top level shell.  If autowrite is set and there are unsaved changes,
              a  write  is  done  first unless the form stop !  is used.  This commands is only available where supported by the
              teletype driver, shell and operating system.

       ( . , . ) substitute options count flags     abbr: s
              If pat and repl are omitted, then the last substitution is repeated.  This is a synonym for the &amp; command.

       ( . , . ) t addr flags
              The t command is a synonym for copy .

       ta tag The focus of editing switches to the location of tag, switching to a different line in the current file  where  it
              is defined, or if necessary to another file.

              The  tags file is normally created by a program such as ctags, and consists of a number of lines with three fields
              separated by blanks or tabs.  The first field gives the name of the tag, the second the name of the file where the
              tag resides, and the third gives an addressing form which can be used by the editor to find the tag; this field is
              usually a contextual scan using `/pat/' to be immune to minor changes in the file.  Such  scans  are  always  per‐
              formed as if nomagic was set.

              The tag names in the tags file must be sorted alphabetically.

       unabbreviate word   abbr: una
              Delete word from the list of abbreviations.

       undo abbr: u
              Reverses the changes made in the buffer by the last buffer editing command.  Note that global commands are consid‐
              ered a single command for the purpose of undo (as are open and visual.)  Also, the commands write and  edit  which
              interact with the file system cannot be undone.  Undo is its own inverse.

              Undo  always  marks  the  previous  value of the current line `.'  as `'''.  After an undo the current line is the
              first line restored or the line before the first line deleted if no lines were restored.  For commands  with  more
              global effect such as global and visual the current line regains it's pre-command value after an undo.

       unmap[!] lhs
              The macro expansion associated by map for lhs is removed.

       ( 1 , $ ) v /pat/ cmds
              A synonym for the global command variant g!, running the specified cmds on each line which does not match pat.

       version   abbr: ve
              Prints the current version number of the editor as well as the date the editor was last changed.

       ( . ) visual type count flags abbr: vi
              Enters  visual  mode  at the specified line.  Type is optional and may be `-' , `^' or `.'  as in the z command to
              specify the placement of the specified line on the screen.  By default, if type is omitted, the specified line  is
              placed  as  the  first  on  the screen.  A count specifies an initial window size; the default is the value of the
              option window.  See the document An Introduction to Display Editing with Vi for more details.  To exit this  mode,
              type Q.

       visual file
       visual +n file
              From visual mode, this command is the same as edit.

       ( 1 , $ ) write file     abbr: w
              Writes  changes  made back to file, printing the number of lines and characters written.  Normally file is omitted
              and the text goes back where it came from.  If a file is specified, then text will be written to  that  file.   If
              the  file  does  not exist it is created.  The current file name is changed only if there is no current file name;
              the current line is never changed.

              If an error occurs while writing the current and edited file, the editor considers that there has been  “No  write
              since last change” even if the buffer had not previously been modified.

       ( 1 , $ ) write&amp;gt;&amp;gt; file   abbr: w&amp;gt;&amp;gt;
              Writes the buffer contents at the end of an existing file.

       w! name
              Overrides the checking of the normal write command, and will write to any file which the system permits.

       ( 1 , $ ) w  !command
              Writes  the  specified  lines  into command.  Note the difference between w! which overrides checks and w  ! which
              writes to a command.

       wq name
              Like a write and then a quit command.

       wq! name
              The variant overrides checking on the sensibility of the write command, as w! does.

       xit name
              If any changes have been made and not written to any file, writes the buffer out.  Then, in any case, quits.

       ( . , . )yank buffer count    abbr: ya
              Places the specified lines in the named buffer, for later retrieval via put.  If no buffer name is specified,  the
              lines go to a more volatile place; see the put command description.

       ( .+1 ) z count
              Print the next count lines, default window.

       ( . ) z type count
              Prints  a  window  of text with the specified line at the top.  If type is `-' the line is placed at the bottom; a
              `.' causes the line to be placed in the center.  A count gives the number of lines to  be  displayed  rather  than
              double  the  number specified by the scroll option.  On a CRT the screen is cleared before display begins unless a
              count which is less than the screen size is given.  The current line is left at the last line printed.  Forms `z='
              and  `z^'  also  exist;  `z=' places the current line in the center, surrounds it with lines of `-' characters and
              leaves the current line at this line.  The form `z^' prints the window before `z-' would.  The characters `+', `^'
              and `-' may be repeated for cumulative effect.

       ! command
              The  remainder  of the line after the `!' character is sent to a shell to be executed.  Within the text of command
              the characters `%' and `#' are expanded as in filenames and the character `!' is replaced with  the  text  of  the
              previous  command.   Thus,  in particular, `!!' repeats the last such shell escape.  If any such expansion is per‐
              formed, the expanded line will be echoed.  The current line is unchanged by this command.

              If there has been “[No write]” of the buffer contents since the last change to the editing buffer, then a diagnos‐
              tic  will  be  printed before the command is executed as a warning.  A single `!' is printed when the command com‐
              pletes.

       ( addr , addr ) ! command
              Takes the specified address range and supplies it as standard input to command; the resulting output then replaces
              the input lines.

       ( $ ) =
              Prints the line number of the addressed line.  The current line is unchanged.

       ( . , . ) &amp;gt; count flags
       ( . , . ) &amp;lt; count flags
              Perform  intelligent  shifting  on the specified lines; &amp;lt; shifts left and &amp;gt; shift right.  The quantity of shift is
              determined by the shiftwidth option and the repetition of the specification character.  Only white  space  (blanks
              and  tabs)  is  shifted; no non-white characters are discarded in a left-shift.  The current line becomes the last
              line which changed due to the shifting.

       ^D     An end-of-file from a terminal input scrolls through the file.  The  scroll  option  specifies  the  size  of  the
              scroll, normally a half screen of text.

       ( .+1 , .+1 )
       ( .+1 , .+1 ) |
              An address alone causes the addressed lines to be printed.  A blank line prints the next line in the file.

       ( . , . ) &amp; options count flags
              Repeats the previous substitute command.

       ( . , . ) ~ options count flags
              Replaces the previous regular expression with the previous replacement pattern from a substitution.

   Regular expressions
       A  regular expression specifies a set of strings of characters.  A member of this set of strings is said to be matched by
       the regular expression.  Ex remembers two previous regular expressions: the previous regular expression used in a substi‐
       tute  command  and  the  previous regular expression used elsewhere (referred to as the previous scanning regular expres‐
       sion.)  The previous regular expression can always be referred to by a null re, e.g. `//' or `??'.

       The following basic constructs are used to construct magic mode regular expressions.

       char           An ordinary character matches itself.  The characters `^' at the beginning of a line, `$' at  the  end  of
                      line,  `*'  as  any character other than the first, `.', `\', `[', and `~' are not ordinary characters and
                      must be escaped (preceded) by `\' to be treated as such.

       ^              At the beginning of a pattern forces the match to succeed only at the beginning of a line.

       $              At the end of a regular expression forces the match to succeed only at the end of the line.

       .              Matches any single character except the new-line character.

       \&amp;lt;             Forces the match to occur only at the beginning of a “variable” or “word”; that is, either at  the  begin‐
                      ning of a line, or just before a letter, digit, or underline and after a character not one of these.

       \&amp;gt;             Similar to `\&amp;lt;', but matching the end of a “variable” or “word”, i.e. either the end of the line or before
                      character which is neither a letter, nor a digit, nor the underline character.

       [string]       Matches any (single) character in the class defined by string.  Most characters  in  string  define  them‐
                      selves.
                        A  pair  of  characters  separated  by `-' in string defines the set of characters collating between the
                      specified lower and upper bounds, thus `[a-z]' as a regular expression matches any (single)  ASCII  lower-
                      case letter.
                        If the sequence `[:class:]' appears in string, where class is one of `alnum', `alpha', `blank', `cntrl',
                      `digit', `graph', `lower', `print', `punct', `space', `upper', `xdigit', or  a  locale-specific  character
                      class,  all  characters that belong to the given class are matched.  Thus `[[:lower:]]' matches any lower-
                      case letter, possibly including characters beyond the scope of ASCII.
                        If the first character of string is an `^' then the construct matches those characters which  it  other‐
                      wise would not; thus `[^a-z]' matches anything but an ASCII lower-case letter (and of course a newline).
                        Backslash  `\'  is  interpreted  as  an  escape character.  To place a `\' character in string, write it
                      twice: `\\'; to place any of the characters `^', `[', or `-' in string, you escape them with  a  preceding
                      `\'.
                        Characters  also lose their special meaning by position: `^' is an ordinary character unless immediately
                      following the initial `[', `]' is an ordinary character if immediately following the initial `[' (or  `^',
                      if present), and `-' is an ordinary character if placed immediately behind `[' or `^', or before ']'.

       The  concatenation  of two regular expressions matches the leftmost and then longest string which can be divided with the
       first piece matching the first regular expression and the second piece matching the second.

       A regular expression may be enclosed between the sequences `\(' and `\)', which matches whatever the enclosed  expression
       matches.

       Any of the (single character matching) regular expressions mentioned above or a regular expression surrounded by `\(' and
       '\)' may be followed by the character `*' to form a regular expression which matches any number of  adjacent  occurrences
       (including 0) of characters matched by the regular expression it follows.

       A single character regular expression or a regular expression surrounded by `\(' and '\)' followed by `\{m,n\}' matches a
       sequence of m through n occurences, inclusive, of the single character expression.  The values of m and n  must  be  non-
       negative and smaller than 255.  The form `\{m\}' matches exactly m occurences, `\{m,\}' matches at least m occurences.

       The  character  `~'  may  be used in a regular expression, and matches the text which defined the replacement part of the
       last substitute command.

       The sequence `\n' matches the text that was matched by the n-th regular subexpression enclosed between `\(' and `\)' ear‐
       lier in the expression.

   Substitute replacement patterns
       The  basic  metacharacters for the replacement pattern are `&amp;', `~', and `#'; the first two of them are given as `\&amp;' and
       `\~' when nomagic is set.  Each instance of `&amp;' is replaced by the characters which the regular expression matched.   The
       metacharacter  `~' stands, in the replacement pattern, for the defining text of the previous replacement pattern.  If the
       entire replacement pattern is `#', the defining text of the previous replacement pattern is used.

       Other metasequences possible in the replacement pattern are  always  introduced  by  the  escaping  character  `\'.   The
       sequence  `\n'  is  replaced  by the text matched by the n-th regular subexpression enclosed between `\(' and `\)'.  When
       nested, parenthesized subexpressions are present, n is determined by counting occurrences of `\(' starting from the left.
       The  sequences  `\u'  and  `\l' cause the immediately following character in the replacement to be converted to upper- or
       lower-case respectively if this character is a letter.  The sequences `\U' and `\L' turn such conversion on, either until
       `\E' or `\e' is encountered, or until the end of the replacement pattern.

   Option descriptions
       autoindent, ai default: noai
              Can  be  used  to  ease  the  preparation of structured program text.  At the beginning of each append , change or
              insert command or when a new line is opened or created by an append , change , insert ,  or  substitute  operation
              within open or visual mode, ex looks at the line being appended after, the first line changed or the line inserted
              before and calculates the amount of white space at the start of the line.  It then aligns the cursor at the  level
              of indentation so determined.

              If  the user then types lines of text in, they will continue to be justified at the displayed indenting level.  If
              more white space is typed at the beginning of a line, the following line will start aligned with  the  first  non-
              white  character  of  the previous line.  To back the cursor up to the preceding tab stop one can hit ^D.  The tab
              stops going backwards are defined at multiples of the shiftwidth option.   The  user  cannot  backspace  over  the
              indent, except by sending an end-of-file with a ^D.

              Specially  processed  in  this  mode is a line with no characters added to it, which turns into a completely blank
              line (the white space provided for the autoindent is discarded.)  Also specially processed in this mode are  lines
              beginning with an `^' and immediately followed by a ^D.  This causes the input to be repositioned at the beginning
              of the line, but retaining the previous indent for the next line.  Similarly, a `0' followed by a  ^D  repositions
              at the beginning but without retaining the previous indent.

              Autoindent doesn't happen in global commands or when the input is not a terminal.

       autoprint, ap  default: ap
              Causes the current line to be printed after each delete , copy , join , move , substitute , t , undo or shift com‐
              mand.  This has the same effect as supplying a trailing `p' to each such  command.   Autoprint  is  suppressed  in
              globals, and only applies to the last of many commands on a line.

       autowrite, aw  default: noaw
              Causes  the contents of the buffer to be written to the current file if the user has modified it and gives a next,
              rewind, stop, tag, or !  command, or a ^^ (switch files) or ^] (tag goto) command in visual.  Note, that the  edit
              and  ex commands do not autowrite.  In each case, there is an equivalent way of switching when autowrite is set to
              avoid the autowrite (edit for next , rewind!  for .I rewind , stop!  for stop , tag!  for tag , shell for ! ,  and
              :e # and a :ta! command from within visual).

       beautify, bf   default: nobeautify
              Causes  all  control  characters except tab, newline and form-feed to be discarded from the input.  A complaint is
              registered the first time a backspace character is discarded.  Beautify does not apply to command input.

       directory, dir default: dir=/tmp
              Specifies the directory in which ex places its buffer file.  If this directory in not writable,  then  the  editor
              will exit abruptly when it fails to be able to create its buffer there.

       edcompatible   default: noedcompatible
              Causes  the  presence of absence of g and c suffixes on substitute commands to be remembered, and to be toggled by
              repeating the suffices.  The suffix r makes the substitution be as in the ~ command, instead of like &amp;.

       errorbells, eb default: noeb
              Error messages are preceded by a bell.  Bell ringing in open and visual on errors is  not  suppressed  by  setting
              noeb.   If possible the editor always places the error message in a standout mode of the terminal (such as inverse
              video) instead of ringing the bell.

       exrc           default: noexrc
              If set, the current directory is searched for a .exrc file on startup.  If this file  is  found,  its  content  is
              treated as ex commands and executed immediately after the contents of $HOME/.exrc on startup.

       flash, fl default: flash
              If the terminal provides the “visual bell” capability, ex will use it instead of the audible bell if flash is set.

       hardtabs, ht   default: ht=8
              Gives the boundaries on which terminal hardware tabs are set (or on which the system expands tabs).

       ignorecase, ic default: noic
              All  upper  case characters in the text are mapped to lower case in regular expression matching.  In addition, all
              upper case characters in regular expressions are mapped to lower case except in character class specifications.

       lisp default: nolisp
              Autoindent indents appropriately for lisp code, and the ( ) { } [[ and ]] commands in open and visual are modified
              to have meaning for lisp.

       list default: nolist
              All printed lines will be displayed (more) unambiguously, showing tabs and end-of-lines as in the list command.

       magic     default: magic for ex and vi, Nomagic for edit.
              If  nomagic is set, the number of regular expression metacharacters is greatly reduced, with only `^' and `$' hav‐
              ing special effects.  In addition the metacharacters `~' and `&amp;' of the replacement pattern are treated as  normal
              characters.  All the normal metacharacters may be made magic when nomagic is set by preceding them with a `\'.

       mesg default: mesg
              Causes write permission to be turned off to the terminal while the user is in visual mode, if nomesg is set.

       modelines, ml  default: nomodelines
              If  modelines  is  set,  then the first 5 lines and the last five lines of the file will be checked for ex command
              lines and the comands issued.  To be recognized as a command line, the line must have the string ex: or vi: in it.
              This  string  may  be anywhere in the line and anything after the : is interpeted as editor commands.  This option
              defaults to off because of unexpected behavior when editting files such as /etc/passwd.

       number, nu     default: nonumber
              Causes all output lines to be printed with their line numbers.  In addition each input line will be  prompted  for
              by supplying the line number it will have.

       open default: open
              If noopen, the commands open and visual are not permitted.

       optimize, opt  default: optimize
              Throughput  of  text  is expedited by setting the terminal to not do automatic carriage returns when printing more
              than one (logical) line of output, greatly speeding output on terminals without addressable cursors when text with
              leading white space is printed.

       paragraphs, para    default: para=IPLPPPQPP LIbp
              Specifies  the  paragraphs for the { and } operations in open and visual.  The pairs of characters in the option's
              value are the names of the macros which start paragraphs.

       prompt    default: prompt
              Command mode input is prompted for with a `:'.

       redraw    default: noredraw
              The editor simulates (using great amounts of output), an intelligent terminal on  a  dumb  terminal  (e.g.  during
              insertions  in  visual the characters to the right of the cursor position are refreshed as each input character is
              typed.)  Useful only at very high speed.

       remap     default: remap
              If on, macros are repeatedly tried until they are unchanged.  For example, if o is mapped to O , and O  is  mapped
              to I , then if remap is set, o will map to I , but if noremap is set, it will map to O .

       report    default: report=5, 2 for edit.
              Specifies  a  threshold  for feedback from commands.  Any command which modifies more than the specified number of
              lines will provide feedback as to the scope of its changes.  For commands such as global , open , undo , and  vis‐
              ual  which  have  potentially more far reaching scope, the net change in the number of lines in the buffer is pre‐
              sented at the end of the command, subject to this same threshold.  Thus notification is suppressed during a global
              command on the individual commands performed.

       scroll    default: scroll=½ window
              Determines  the  number of logical lines scrolled when an end-of-file is received from a terminal input in command
              mode, and the number of lines printed by a command mode z command (double the value of scroll ).

       sections  default: sections=SHNHH HU
              Specifies the section macros for the [[ and ]] operations in open and visual.  The  pairs  of  characters  in  the
              options's value are the names of the macros which start paragraphs.

       shell, sh default: sh=/bin/sh
              Gives  the  path name of the shell forked for the shell escape command `!', and by the shell command.  The default
              is taken from SHELL in the environment, if present.

       shiftwidth, sw default: sw=8
              Gives the width a software tab stop, used in reverse tabbing with ^D when using autoindent to append text, and  by
              the shift commands.

       showmatch, sm  default: nosm
              In  open  and  visual  mode, when a ) or } is typed, move the cursor to the matching ( or { for one second if this
              matching character is on the screen.  Extremely useful with lisp.

       showmode, smd  default: nosmd
              In visual mode, show a description of the current editing mode in the window's lower right corner.

       slowopen, slow terminal dependent
              Affects the display algorithm used in visual mode, holding off display  updating  during  input  of  new  text  to
              improve  throughput when the terminal in use is both slow and unintelligent.  See An Introduction to Display Edit‐
              ing with Vi for more details.

       tabstop, ts    default: ts=8
              The editor expands tabs in the input file to be on tabstop boundaries for the purposes of display.

       taglength, tl  default: tl=0
              Tags are not significant beyond this many characters.  A value of zero (the default) means that all characters are
              significant.

       tags default: tags=tags /usr/lib/tags
              A  path  of  files  to be used as tag files for the tag command.  A requested tag is searched for in the specified
              files, sequentially.  By default, files called tags are searched for in the current directory and in  /usr/lib  (a
              master file for the entire system).

       term from environment TERM
              The terminal type of the output device.

       terse     default: noterse
              Shorter error diagnostics are produced for the experienced user.

       warn default: warn
              Warn if there has been `[No write since last change]' before a `!'  command escape.

       window    default: window=speed dependent
              The  number  of lines in a text window in the visual command.  The default is 8 at slow speeds (600 baud or less),
              16 at medium speed (1200 baud), and the full screen (minus one line) at higher speeds.

       w300, w1200, w9600
              These are not true options but set window only if the speed is slow (300), medium (1200), or high (9600),  respec‐
              tively.  They are suitable for an EXINIT and make it easy to change the 8/16/full screen rule.

       wrapscan, ws   default: ws
              Searches using the regular expressions in addressing will wrap around past the end of the file.

       wrapmargin, wm default: wm=0
              Defines  a  margin  for  automatic wrapover of text during input in open and visual modes.  See An Introduction to
              Text Editing with Vi for details.

       writeany, wa   default: nowa

              Inhibit the checks normally made before write commands, allowing a write to any file which the  system  protection
              mechanism will allow.

ENVIRONMENT VARIABLES
       The following environment variables affect the behaviour of ex:

       COLUMNS
              Overrides the system-supplied number of terminal columns.

       EXINIT Contains  commands  to  execute at editor startup.  If this variable is present, the .exrc file in the user's home
              directory is ignored.

       HOME   Used to locate the editor startup file.

       LANG, LC_ALL
              See locale(7).

       LC_CTYPE
              Determines the mapping of bytes to characters, types of characters, case conversion and composition  of  character
              classes in regular expressions.

       LC_MESSAGES
              Sets the language used for diagnostic and informal messages.

       LINES  Overrides the system-supplied number of terminal lines.

       NLSPATH
              See catopen(3).

       SHELL  The program file used to execute external commands.

       TERM   Determines the terminal type.

FILES
       /usr/lib/ex/expreserve
              preserve command

       /usr/lib/ex/exrecover
              recover command

       /etc/termcap
              describes capabilities of terminals

       $HOME/.exrc
              editor startup file

       /var/tmp/Exnnnnnnnnnn
              editor temporary

       /var/tmp/Rxnnnnnnnnnn
              named buffer temporary

       /var/lib/ex
              preservation directory

DOCUMENTATION
       The  document  Edit:  A tutorial (USD:14) provides a comprehensive introduction to edit assuming no previous knowledge of
       computers or the UNIX system.

       The Ex Reference Manual – Version 3.7 (USD:16) is a comprehensive and complete manual for the command  mode  features  of
       ex.   The  USAGE  section  of  this page is taken from the manual.  For an introduction to more advanced forms of editing
       using the command mode of ex see the editing documents written by Brian Kernighan for the editor ed; the material in  the
       introductory and advanced documents works also with ex.

       An  Introduction  to Display Editing with Vi (USD:15) introduces the display editor vi and provides reference material on
       vi.  (This reference now forms the vi(1) manual page).  In addition, the Vi Quick Reference card summarizes the  commands
       of vi in a useful, functional way, and is useful with the Introduction.

SEE ALSO
       awk(1), ed(1), grep(1), sed(1), grep(1), vi(1), catopen(3), termcap(5), environ(7), locale(7), regex(7)

AUTHOR
       Originally written by William Joy.

       Mark  Horton  has  maintained  the editor since version 2.7, adding macros, support for many unusual terminals, and other
       features such as word abbreviation mode.

       This version incorporates changes by Gunnar Ritter.

NOTES
       Undo never clears the buffer modified condition.

       The z command prints a number of logical rather than physical lines.  More than a screen full of  output  may  result  if
       long lines are present.

       File input/output errors don't print a name if the command line `-' option is used.

       The editor does not warn if text is placed in named buffers and not used before exiting the editor.

       Null (00) characters are converted to 0200 characters when reading input files, and cannot appear in resultant files.

       LC_COLLATE  locales  are  ignored;  collating symbols `[.c.]'  and equivalence classes `[=c=]' in bracket expressions are
       recognized but useless since `c' is restricted to a single character and is the only character matched; range expressions
       `[a-m]' are always evaluated in byte order.

Ancient Unix Ports                                           12/1/04                                                       EX(1)
EXEC(1P)                                            POSIX Programmer's Manual                                           EXEC(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->

NAME
       exec — execute commands and open, close, or copy file descriptors

SYNOPSIS
       exec [command [argument...]]

DESCRIPTION
       The exec utility shall open, close, and/or copy file descriptors as specified by any redirections as part of the command.

       If  exec  is specified without command or arguments, and any file descriptors with numbers greater than 2 are opened with
       associated redirection statements, it is unspecified whether those file descriptors remain open when  the  shell  invokes
       another  utility.   Scripts  concerned that child shells could misuse open file descriptors can always close them explic‐
       itly, as shown in one of the following examples.

       If exec is specified with command, it shall replace the shell with command without creating a new process.  If  arguments
       are specified, they shall be arguments to command.  Redirection affects the current shell execution environment.

OPTIONS
       None.

OPERANDS
       See the DESCRIPTION.

<!-- fe96d119-27ce-4a62-99a9-ff5840fe1a84 <=< ACCEPT -->STDIN
       Not used.

INPUT FILES
       None.

ENVIRONMENT VARIABLES
       None.

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       Not used.

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       None.

EXIT STATUS
       If  command  is  specified,  exec shall not return to the shell; rather, the exit status of the process shall be the exit
       status of the program implementing command, which overlaid the shell. If command is not found, the exit status  shall  be
       127.  If  command  is  found,  but  it is not an executable utility, the exit status shall be 126. If a redirection error
       occurs (see Section 2.8.1, Consequences of Shell Errors), the shell shall exit with a value in the  range  1−125.  Other‐
       wise, exec shall return a zero exit status.

CONSEQUENCES OF ERRORS
       Default.<!-- ACCEPT >=> fe96d119-27ce-4a62-99a9-ff5840fe1a84 -->

       The following sections are informative.

APPLICATION USAGE
       None.

EXAMPLES
       Open readfile as file descriptor 3 for reading:

           exec 3&amp;lt; readfile

       Open writefile as file descriptor 4 for writing:

           exec 4&amp;gt; writefile

       Make file descriptor 5 a copy of file descriptor 0:

           exec 5&amp;lt;&amp;0

       Close file descriptor 3:

           exec 3&amp;lt;&amp;−

       Cat the file maggie by replacing the current shell with the cat utility:

           exec cat maggie

RATIONALE
       Most historical implementations were not conformant in that:

           foo=bar exec cmd

       did not pass foo to cmd.

FUTURE DIRECTIONS
       None.

SEE ALSO
       Section 2.14, Special Built-In Utilities

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions  of  this  text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013 Edition, Standard for
       Information Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7,  Copy‐
       right  (C)  2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This is POSIX.1-2008
       with the 2013 Technical Corrigendum 1 applied.) In the event of any discrepancy between this  version  and  the  original
       IEEE  and  The  Open  Group Standard, the original IEEE and The Open Group Standard is the referee document. The original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any typographical or formatting errors that appear in this page are most likely to have been introduced during  the  con‐
       version  of  the source files to man page format. To report such errors, see https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                      EXEC(1P)
EXIT(1P)                                            POSIX Programmer's Manual                                           EXIT(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.
<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->
NAME
       exit — cause the shell to exit

SYNOPSIS
       exit [n]

DESCRIPTION
       The exit utility shall cause the shell to exit with the exit status specified by the unsigned decimal integer n.  If n is
       specified, but its value is not between 0 and 255 inclusively, the exit status is undefined.

       A trap on EXIT shall be executed before the shell terminates, except when the  exit  utility  is  invoked  in  that  trap
       itself, in which case the shell shall exit immediately.

OPTIONS
       None.

OPERANDS
       See the DESCRIPTION.

<!-- fe96d119-27ce-4a62-99a9-ff5840fe1a84 <=< ACCEPT -->STDIN
       Not used.

INPUT FILES
       None.

ENVIRONMENT VARIABLES
       None.

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       Not used.

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       None.

EXIT STATUS
       The  exit  status shall be n, if specified. Otherwise, the value shall be the exit value of the last command executed, or
       zero if no command was executed. When exit is executed in a trap action, the last command is considered to be the command
       that executed immediately preceding the trap action.

CONSEQUENCES OF ERRORS
       Default.<!-- ACCEPT >=> fe96d119-27ce-4a62-99a9-ff5840fe1a84 -->

       The following sections are informative.

APPLICATION USAGE
       None.

EXAMPLES
       Exit with a true value:

           exit 0

       Exit with a false value:

           exit 1

RATIONALE
       As  explained  in  other  sections,  certain exit status values have been reserved for special uses and should be used by
       applications only for those purposes:

        126    A file to be executed was found, but it was not an executable utility.

        127    A utility to be executed was not found.

       &amp;gt;128    A command was interrupted by a signal.

FUTURE DIRECTIONS
       None.

SEE ALSO
       Section 2.14, Special Built-In Utilities

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013  Edition,  Standard  for
       Information  Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7, Copy‐
       right (C) 2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This  is  POSIX.1-2008
       with  the  2013  Technical  Corrigendum 1 applied.) In the event of any discrepancy between this version and the original
       IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the  referee  document.  The  original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any  typographical  or formatting errors that appear in this page are most likely to have been introduced during the con‐
       version of the source files to man page format. To report such errors,  see  https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                      EXIT(1P)
EXPAND(1)                                                 User Commands                                                EXPAND(1)

NAME
       expand - convert tabs to spaces

SYNOPSIS
       expand [OPTION]... [FILE]...

DESCRIPTION
       Convert tabs in each FILE to spaces, writing to standard output.

       With no FILE, or when FILE is -, read standard input.

       Mandatory arguments to long options are mandatory for short options too.

       -i, --initial
              do not convert tabs after non blanks

       -t, --tabs=NUMBER
              have tabs NUMBER characters apart, not 8

       -t, --tabs=LIST
              use comma separated list of explicit tab positions

       --help display this help and exit

       --version
              output version information and exit

AUTHOR
       Written by David MacKenzie.

<!-- 30b0cf8a-458a-435b-a2e0-993472636e53 <=< ACCEPT -->REPORTING BUGS
       GNU coreutils online help: &amp;lt;http://www.gnu.org/software/coreutils/&amp;gt;
       Report expand translation bugs to &amp;lt;http://translationproject.org/team/&amp;gt;

COPYRIGHT
       Copyright    ©    2016   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3   or   later
       &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.
<!-- ACCEPT >=> 30b0cf8a-458a-435b-a2e0-993472636e53 -->
SEE ALSO
       unexpand(1)

       Full documentation at: &amp;lt;http://www.gnu.org/software/coreutils/expand&amp;gt;
       or available locally via: info '(coreutils) expand invocation'

GNU coreutils 8.26                                        November 2016                                                EXPAND(1)
EXPORT(1P)                                          POSIX Programmer's Manual                                         EXPORT(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->

NAME
       export — set the export attribute for variables

SYNOPSIS
       export name[=word]...

       export −p

DESCRIPTION
       The  shell  shall give the export attribute to the variables corresponding to the specified names, which shall cause them
       to be in the environment of subsequently executed commands. If the name of a variable is  followed  by  =word,  then  the
       value of that variable shall be set to word.

       The  export  special  built-in  shall  support  the Base Definitions volume of POSIX.1‐2008, Section 12.2, Utility Syntax
       Guidelines.

       When −p is specified, export shall write to the standard output the names and values of all exported  variables,  in  the
       following format:

           "export %s=%s\n", &amp;lt;name&amp;gt;, &amp;lt;value&amp;gt;

       if name is set, and:

           "export %s\n", &amp;lt;name&amp;gt;

       if name is unset.

       The  shell  shall format the output, including the proper use of quoting, so that it is suitable for reinput to the shell
       as commands that achieve the same exporting results, except:

        1. Read-only variables with values cannot be reset.

        2. Variables that were unset at the time they were output need not be reset to the unset state if a value is assigned to
           the variable between the time the state was saved and the time at which the saved output is reinput to the shell.

       When  no  arguments  are given, the results are unspecified. If a variable assignment precedes the command name of export
       but that variable is not also listed as an operand of export, then that variable shall be set in the current shell execu‐
       tion  environment  after  the completion of the export command, but it is unspecified whether that variable is marked for
       export.

OPTIONS
       See the DESCRIPTION.

OPERANDS
       See the DESCRIPTION.

<!-- fe96d119-27ce-4a62-99a9-ff5840fe1a84 <=< ACCEPT -->STDIN
       Not used.

INPUT FILES
       None.

ENVIRONMENT VARIABLES
       None.

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       See the DESCRIPTION.

STDERR S
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       None.

EXIT STATUS
       Zero.

CONSEQUENCES OF ERRORS
       Default.

       The following sections are informative.<!-- ACCEPT >=> fe96d119-27ce-4a62-99a9-ff5840fe1a84 -->

APPLICATION USAGE
       None.

EXAMPLES
       Export PWD and HOME variables:

           export PWD HOME

       Set and export the PATH variable:

           export PATH=/local/bin:$PATH

       Save and restore all exported variables:

           export −p &amp;gt; temp-file
           unset a lot of variables
           ... processing
           . temp-file

RATIONALE
       Some historical shells use the no-argument case as the functional equivalent of what is required here with −p.  This fea‐
       ture  was  left  unspecified  because  it is not historical practice in all shells, and some scripts may rely on the now-
       unspecified results on their implementations. Attempts to specify the −p output as the default case were unsuccessful  in
       achieving  consensus.   The  −p  option was added to allow portable access to the values that can be saved and then later
       restored using; for example, a dot script.

FUTURE DIRECTIONS
       None.

SEE ALSO
       Section 2.14, Special Built-In Utilities

       The Base Definitions volume of POSIX.1‐2008, Section 12.2, Utility Syntax Guidelines

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013  Edition,  Standard  for
       Information  Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7, Copy‐
       right (C) 2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This  is  POSIX.1-2008
       with  the  2013  Technical  Corrigendum 1 applied.) In the event of any discrepancy between this version and the original
       IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the  referee  document.  The  original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any  typographical  or formatting errors that appear in this page are most likely to have been introduced during the con‐
       version of the source files to man page format. To report such errors,  see  https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                    EXPORT(1P)
EXPR(1)                                                   User Commands                                                  EXPR(1)

NAME
       expr - evaluate expressions

SYNOPSIS
       expr EXPRESSION
       expr OPTION

DESCRIPTION
       --help display this help and exit

       --version
              output version information and exit

       Print the value of EXPRESSION to standard output.  A blank line below separates increasing precedence groups.  EXPRESSION
       may be:

       ARG1 | ARG2
              ARG1 if it is neither null nor 0, otherwise ARG2

       ARG1 &amp; ARG2
              ARG1 if neither argument is null or 0, otherwise 0

       ARG1 &amp;lt; ARG2
              ARG1 is less than ARG2

       ARG1 &amp;lt;= ARG2
              ARG1 is less than or equal to ARG2

       ARG1 = ARG2
              ARG1 is equal to ARG2

       ARG1 != ARG2
              ARG1 is unequal to ARG2

       ARG1 &amp;gt;= ARG2
              ARG1 is greater than or equal to ARG2

       ARG1 &amp;gt; ARG2
              ARG1 is greater than ARG2

       ARG1 + ARG2
              arithmetic sum of ARG1 and ARG2

       ARG1 - ARG2
              arithmetic difference of ARG1 and ARG2

       ARG1 * ARG2
              arithmetic product of ARG1 and ARG2

       ARG1 / ARG2
              arithmetic quotient of ARG1 divided by ARG2

       ARG1 % ARG2
              arithmetic remainder of ARG1 divided by ARG2

       STRING : REGEXP
              anchored pattern match of REGEXP in STRING

       match STRING REGEXP
              same as STRING : REGEXP

       substr STRING POS LENGTH
              substring of STRING, POS counted from 1

       index STRING CHARS
              index in STRING where any CHARS is found, or 0

       length STRING
              length of STRING

       + TOKEN
              interpret TOKEN as a string, even if it is a

              keyword like 'match' or an operator like '/'

       ( EXPRESSION )
              value of EXPRESSION

       Beware that many operators need to be escaped or quoted for shells.  Comparisons are arithmetic if both ARGs are numbers,
       else  lexicographical.   Pattern  matches return the string matched between \( and \) or null; if \( and \) are not used,
       they return the number of characters matched or 0.

       Exit status is 0 if EXPRESSION is neither null nor 0, 1 if EXPRESSION is null or 0,  2  if  EXPRESSION  is  syntactically
       invalid, and 3 if an error occurred.

AUTHOR
       Written by Mike Parker, James Youngman, and Paul Eggert.

<!-- 30b0cf8a-458a-435b-a2e0-993472636e53 <=< ACCEPT -->REPORTING BUGS
       GNU coreutils online help: &amp;lt;http://www.gnu.org/software/coreutils/&amp;gt;
       Report expr translation bugs to &amp;lt;http://translationproject.org/team/&amp;gt;

COPYRIGHT
       Copyright    ©    2016   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3   or   later
       &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.<!-- ACCEPT >=> 30b0cf8a-458a-435b-a2e0-993472636e53 -->

SEE ALSO
       Full documentation at: &amp;lt;http://www.gnu.org/software/coreutils/expr&amp;gt;
       or available locally via: info '(coreutils) expr invocation'

GNU coreutils 8.26                                        November 2016                                                  EXPR(1)
FALSE(1)                                                  User Commands                                                 FALSE(1)

NAME
       false - do nothing, unsuccessfully

SYNOPSIS
       false [ignored command line arguments]
       false OPTION

DESCRIPTION
       Exit with a status code indicating failure.

       --help display this help and exit

       --version
              output version information and exit

       NOTE: your shell may have its own version of false, which usually supersedes the version described here.  Please refer to
       your shell's documentation for details about the options it supports.

AUTHOR
       Written by Jim Meyering.

<!-- 30b0cf8a-458a-435b-a2e0-993472636e53 <=< ACCEPT -->REPORTING BUGS
       GNU coreutils online help: &amp;lt;http://www.gnu.org/software/coreutils/&amp;gt;
       Report false translation bugs to &amp;lt;http://translationproject.org/team/&amp;gt;

COPYRIGHT
       Copyright   ©   2016   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3    or    later
       &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.<!-- ACCEPT >=> 30b0cf8a-458a-435b-a2e0-993472636e53 -->

SEE ALSO
       Full documentation at: &amp;lt;http://www.gnu.org/software/coreutils/false&amp;gt;
       or available locally via: info '(coreutils) false invocation'

GNU coreutils 8.26                                        November 2016                                                 FALSE(1)
FC(1P)                                              POSIX Programmer's Manual                                             FC(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.
<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->
NAME
       fc — process the command history list

SYNOPSIS
       fc [−r] [−e editor] [first [last]]

       fc −l [−nr] [first [last]]

       fc −s [old=new] [first]

DESCRIPTION
       The fc utility shall list, or shall edit and re-execute, commands previously entered to an interactive sh.

       The  command  history  list shall reference commands by number. The first number in the list is selected arbitrarily. The
       relationship of a number to its command shall not change except when the user logs in and no other process  is  accessing
       the  list,  at which time the system may reset the numbering to start the oldest retained command at another number (usu‐
       ally 1). When the number reaches an implementation-defined upper limit, which shall be no smaller than the value in HIST‐
       SIZE or 32767 (whichever is greater), the shell may wrap the numbers, starting the next command with a lower number (usu‐
       ally 1). However, despite this optional wrapping of numbers, fc shall maintain the time-ordering  sequence  of  the  com‐
       mands.  For example, if four commands in sequence are given the numbers 32766, 32767, 1 (wrapped), and 2 as they are exe‐
       cuted, command 32767 is considered the command previous to 1, even though its number is higher.

       When commands are edited (when the −l option is not specified), the resulting lines shall be entered at the  end  of  the
       history  list  and  then re-executed by sh.  The fc command that caused the editing shall not be entered into the history
       list. If the editor returns a non-zero exit status, this shall suppress the entry into the history list and  the  command
       re-execution.   Any command line variable assignments or redirection operators used with fc shall affect both the fc com‐
       mand itself as well as the command that results; for example:

           fc −s −− −1 2&amp;gt;/dev/null

       reinvokes the previous command, suppressing standard error for both fc and the previous command.

OPTIONS
       The fc utility shall conform to the Base Definitions volume of POSIX.1‐2008, Section 12.2, Utility Syntax Guidelines.

       The following options shall be supported:

       −e editor Use the editor named by editor to edit the commands. The editor string is a utility name, subject to search via
                 the  PATH  variable  (see  the Base Definitions volume of POSIX.1‐2008, Chapter 8, Environment Variables).  The
                 value in the FCEDIT variable shall be used as a default when −e is not specified. If FCEDIT is null  or  unset,
                 ed shall be used as the editor.

       −l        (The  letter  ell.)  List the commands rather than invoking an editor on them. The commands shall be written in
                 the sequence indicated by the first and last operands, as affected by −r, with each  command  preceded  by  the
                 command number.

       −n        Suppress command numbers when listing with −l.

       −r        Reverse the order of the commands listed (with −l) or edited (with neither −l nor −s).

       −s        Re-execute the command without invoking an editor.

OPERANDS
       The following operands shall be supported:

       first, last
                 Select  the  commands to list or edit. The number of previous commands that can be accessed shall be determined
                 by the value of the HISTSIZE variable. The value of first or last or both shall be one of the following:

                 [+]number A positive number representing a command number; command numbers can be displayed with the −l option.

                 −number   A negative decimal number representing the command that was executed number of  commands  previously.
                           For example, −1 is the immediately previous command.

                 string    A  string  indicating  the most recently entered command that begins with that string. If the old=new
                           operand is not also specified with −s, the string form of the first operand cannot contain an  embed‐
                           ded &amp;lt;equals-sign&amp;gt;.

                 When the synopsis form with −s is used:

                  *  If first is omitted, the previous command shall be used.

                 For the synopsis forms without −s:

                  *  If  last  is  omitted, last shall default to the previous command when −l is specified; otherwise, it shall
                     default to first.

                  *  If first and last are both omitted, the previous 16 commands shall be listed or the previous single command
                     shall be edited (based on the −l option).

                  *  If  first and last are both present, all of the commands from first to last shall be edited (without −l) or
                     listed (with −l).  Editing multiple commands shall be accomplished by presenting to the editor all  of  the
                     commands  at  one time, each command starting on a new line. If first represents a newer command than last,
                     the commands shall be listed or edited in reverse sequence, equivalent to using −r.  For example, the  fol‐
                     lowing commands on the first line are equivalent to the corresponding commands on the second:

                         fc −r 10 20    fc    30 40
                         fc    20 10    fc −r 40 30

                  *  When  a range of commands is used, it shall not be an error to specify first or last values that are not in
                     the history list; fc shall substitute the value representing the oldest or newest command in the  list,  as
                     appropriate. For example, if there are only ten commands in the history list, numbered 1 to 10:

                         fc −l
                         fc 1 99

                     shall list and edit, respectively, all ten commands.

       old=new   Replace the first occurrence of string old in the commands to be re-executed by the string new.

STDIN
       Not used.

INPUT FILES
       None.

<!-- 5d77cd22-07ec-4e89-93a7-99d49d8d9490 <=< ACCEPT -->ENVIRONMENT VARIABLES
       The following environment variables shall affect the execution of fc:

       FCEDIT    This  variable, when expanded by the shell, shall determine the default value for the −e editor option's editor
                 option-argument. If FCEDIT is null or unset, ed shall be used as the editor.

       HISTFILE  Determine a pathname naming a command history file. If the HISTFILE variable is not set, the shell may  attempt
                 to  access  or  create a file .sh_history in the directory referred to by the HOME environment variable. If the
                 shell cannot obtain both read and write access to, or create, the history file, it  shall  use  an  unspecified
                 mechanism that allows the history to operate properly. (References to history ``file'' in this section shall be
                 understood to mean this unspecified mechanism in such cases.) An implementation may choose to access this vari‐
                 able  only  when  initializing the history file; this initialization shall occur when fc or sh first attempt to
                 retrieve entries from, or add entries to, the file, as the result of commands issued  by  the  user,  the  file
                 named by the ENV variable, or implementation-defined system start-up files. In some historical shells, the his‐
                 tory file is initialized just after the ENV file has been processed. Therefore,  it  is  implementation-defined
                 whether  changes  made  to HISTFILE after the history file has been initialized are effective.  Implementations
                 may choose to disable the history list mechanism for users with appropriate privileges who do not set HISTFILE;
                 the specific circumstances under which this occurs are implementation-defined. If more than one instance of the
                 shell is using the same history file, it is unspecified how updates to  the  history  file  from  those  shells
                 interact.  As  entries are deleted from the history file, they shall be deleted oldest first. It is unspecified
                 when history file entries are physically removed from the history file.

       HISTSIZE  Determine a decimal number representing the limit to the number of previous commands that  are  accessible.  If
                 this  variable  is unset, an unspecified default greater than or equal to 128 shall be used. The maximum number
                 of commands in the history list is unspecified, but shall be at least 128.  An  implementation  may  choose  to
                 access  this  variable  only when initializing the history file, as described under HISTFILE.  Therefore, it is
                 unspecified whether changes made to HISTSIZE after the history file has been initialized are effective.<!-- ACCEPT >=> 5d77cd22-07ec-4e89-93a7-99d49d8d9490 -->

       LANG      Provide a default value for the internationalization variables that are unset or null. (See  the  Base  Defini‐
                 tions  volume of POSIX.1‐2008, Section 8.2, Internationalization Variables for the precedence of international‐
                 ization variables used to determine the values of locale categories.)

       LC_ALL    If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_CTYPE  Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, sin‐
                 gle-byte as opposed to multi-byte characters in arguments and input files).

       LC_MESSAGES
                 Determine  the  locale  that should be used to affect the format and contents of diagnostic messages written to
                 standard error.

       NLSPATH   Determine the location of message catalogs for the processing of LC_MESSAGES.

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       When the −l option is used to list commands, the format of each command in the list shall be as follows:

           "%d\t%s\n", &amp;lt;line number&amp;gt;, &amp;lt;command&amp;gt;

       If both the −l and −n options are specified, the format of each command shall be:

           "\t%s\n", &amp;lt;command&amp;gt;

       If the &amp;lt;command&amp;gt; consists of more than one line, the lines after the first shall be displayed as:

           "\t%s\n", &amp;lt;continued-command&amp;gt;

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       None.

<!-- a42f9355-e63b-4205-ac0b-0b19b24faf9d <=< ACCEPT -->EXIT STATUS
       The following exit values shall be returned:

        0    Successful completion of the listing.

       &amp;gt;0    An error occurred.<!-- ACCEPT >=> a42f9355-e63b-4205-ac0b-0b19b24faf9d -->

       Otherwise, the exit status shall be that of the commands executed by fc.

CONSEQUENCES OF ERRORS
       Default.

       The following sections are informative.

APPLICATION USAGE
       Since editors sometimes use file descriptors as integral parts of their editing, redirecting their  file  descriptors  as
       part of the fc command can produce unexpected results. For example, if vi is the FCEDIT editor, the command:

           fc −s | more

       does not work correctly on many systems.

       Users on windowing systems may want to have separate history files for each window by setting HISTFILE as follows:

           HISTFILE=$HOME/.sh_hist$$

EXAMPLES
       None.

RATIONALE
       This utility is based on the fc built-in of the KornShell.

       An  early proposal specified the −e option as [−e editor [old= new ]], which is not historical practice. Historical prac‐
       tice in fc of either [−e editor] or [−e − [ old= new ]] is acceptable, but not both together.  To  clarify  this,  a  new
       option  −s  was  introduced  replacing the [−e −].  This resolves the conflict and makes fc conform to the Utility Syntax
       Guidelines.

       HISTFILE  Some implementations of the KornShell check for the superuser and do not create a history file unless  HISTFILE
                 is  set. This is done primarily to avoid creating unlinked files in the root file system when logging in during
                 single-user mode.  HISTFILE must be set for the superuser to have history.

       HISTSIZE  Needed to limit the size of history files. It is the intent of the standard developers  that  when  two  shells
                 share  the  same  history  file, commands that are entered in one shell shall be accessible by the other shell.
                 Because of the difficulties of synchronization over a network, the exact nature of the interaction is  unspeci‐
                 fied.

       The  initialization  process for the history file can be dependent on the system start-up files, in that they may contain
       commands that effectively preempt the settings the user has for HISTFILE and HISTSIZE.  For example, function  definition
       commands  are  recorded  in  the  history  file. If the system administrator includes function definitions in some system
       start-up file called before the ENV file, the history file is initialized before the user can influence its  characteris‐
       tics.  In  some historical shells, the history file is initialized just after the ENV file has been processed. Because of
       these situations, the text requires the initialization process to be implementation-defined.

       Consideration was given to omitting the fc utility in favor of the command line editing feature in sh.  For  example,  in
       vi editing mode, typing "&amp;lt;ESC&amp;gt;v" is equivalent to:

           EDITOR=vi fc

       However,  the  fc utility allows the user the flexibility to edit multiple commands simultaneously (such as fc 10 20) and
       to use editors other than those supported by sh for command line editing.

       In the KornShell, the alias r (``re-do'') is preset to fc −e − (equivalent to the POSIX fc −s).  This is probably an eas‐
       ier  command name to remember than fc (``fix command''), but it does not meet the Utility Syntax Guidelines.  Renaming fc
       to hist or redo was considered, but since this description closely matches historical KornShell practice already, such  a
       renaming  was  seen  as gratuitous.  Users are free to create aliases whenever odd historical names such as fc, awk, cat,
       grep, or yacc are standardized by POSIX.

       Command numbers have no ordering effects; they are like serial numbers.  The −r option and −number  operand  address  the
       sequence  of command execution, regardless of serial numbers. So, for example, if the command number wrapped back to 1 at
       some arbitrary point, there would be no ambiguity associated with traversing the wrap point. For example, if the  command
       history were:

           32766: echo 1
           32767: echo 2
           1: echo 3

       the number −2 refers to command 32767 because it is the second previous command, regardless of serial number.

FUTURE DIRECTIONS
       None.

SEE ALSO
       sh

       The Base Definitions volume of POSIX.1‐2008, Chapter 8, Environment Variables, Section 12.2, Utility Syntax Guidelines

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions  of  this  text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013 Edition, Standard for
       Information Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7,  Copy‐
       right  (C)  2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This is POSIX.1-2008
       with the 2013 Technical Corrigendum 1 applied.) In the event of any discrepancy between this  version  and  the  original
       IEEE  and  The  Open  Group Standard, the original IEEE and The Open Group Standard is the referee document. The original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any typographical or formatting errors that appear in this page are most likely to have been introduced during  the  con‐
       version  of  the source files to man page format. To report such errors, see https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                        FC(1P)
FG(1P)                                              POSIX Programmer's Manual                                             FG(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->

NAME
       fg — run jobs in the foreground

SYNOPSIS
       fg [job_id]

DESCRIPTION
       If  job  control  is enabled (see the description of set −m), the fg utility shall move a background job from the current
       environment (see Section 2.12, Shell Execution Environment) into the foreground.

       Using fg to place a job into the foreground shall remove its process ID from the list of those  ``known  in  the  current
       shell execution environment''; see Section 2.9.3.1, Examples.

OPTIONS
       None.

OPERANDS
       The following operand shall be supported:

       job_id    Specify  the  job to be run as a foreground job. If no job_id operand is given, the job_id for the job that was
                 most recently suspended, placed in the background, or run as a background job shall  be  used.  The  format  of
                 job_id is described in the Base Definitions volume of POSIX.1‐2008, Section 3.204, Job Control Job ID.

STDIN
       Not used.

INPUT FILES
       None.

<!-- 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 <=< ACCEPT -->ENVIRONMENT VARIABLES
       The following environment variables shall affect the execution of fg:

       LANG      Provide  a  default  value for the internationalization variables that are unset or null. (See the Base Defini‐
                 tions volume of POSIX.1‐2008, Section 8.2, Internationalization Variables for the precedence of  international‐
                 ization variables used to determine the values of locale categories.)

       LC_ALL    If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_CTYPE  Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, sin‐
                 gle-byte as opposed to multi-byte characters in arguments).

       LC_MESSAGES
                 Determine the locale that should be used to affect the format and contents of diagnostic  messages  written  to
                 standard error.

       NLSPATH   Determine the location of message catalogs for the processing of LC_MESSAGES.<!-- ACCEPT >=> 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 -->

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       The fg utility shall write the command line of the job to standard output in the following format:

           "%s\n", &amp;lt;command&amp;gt;

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       None.

<!-- a42f9355-e63b-4205-ac0b-0b19b24faf9d <=< ACCEPT -->EXIT STATUS
       The following exit values shall be returned:

        0    Successful completion.

       &amp;gt;0    An error occurred.<!-- ACCEPT >=> a42f9355-e63b-4205-ac0b-0b19b24faf9d -->

CONSEQUENCES OF ERRORS
       If job control is disabled, the fg utility shall exit with an error and no job shall be placed in the foreground.

       The following sections are informative.

APPLICATION USAGE
       The fg utility does not work as expected when it is operating in its own utility execution environment because that envi‐
       ronment has no applicable jobs to manipulate. See the APPLICATION USAGE section for bg.  For this reason, fg is generally
       implemented as a shell regular built-in.

EXAMPLES
       None.

RATIONALE
       The  extensions  to the shell specified in this volume of POSIX.1‐2008 have mostly been based on features provided by the
       KornShell. The job control features provided by bg, fg, and jobs are also based on the KornShell. The standard developers
       examined  the  characteristics of the C shell versions of these utilities and found that differences exist. Despite wide‐
       spread use of the C shell, the KornShell versions were selected for this volume of POSIX.1‐2008 to maintain a  degree  of
       uniformity with the rest of the KornShell features selected (such as the very popular command line editing features).

FUTURE DIRECTIONS
       None.

SEE ALSO
       Section 2.9.3.1, Examples, Section 2.12, Shell Execution Environment, bg, kill, jobs, wait

       The Base Definitions volume of POSIX.1‐2008, Section 3.204, Job Control Job ID, Chapter 8, Environment Variables

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions  of  this  text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013 Edition, Standard for
       Information Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7,  Copy‐
       right  (C)  2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This is POSIX.1-2008
       with the 2013 Technical Corrigendum 1 applied.) In the event of any discrepancy between this  version  and  the  original
       IEEE  and  The  Open  Group Standard, the original IEEE and The Open Group Standard is the referee document. The original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any typographical or formatting errors that appear in this page are most likely to have been introduced during  the  con‐
       version  of  the source files to man page format. To report such errors, see https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                        FG(1P)
FILE(1)                                            BSD General Commands Manual                                           FILE(1)

NAME
     file — determine file type

SYNOPSIS
     file [-bcdEhiklLNnprsvzZ0] [--apple] [--extension] [--mime-encoding] [--mime-type] [-e testname] [-F separator]
          [-f namefile] [-m magicfiles] [-P name=value] file ...
     file -C [-m magicfiles]
     file [--help]

DESCRIPTION
     This manual page documents version 5.29 of the file command.

     file tests each argument in an attempt to classify it.  There are three sets of tests, performed in this order: filesystem
     tests, magic tests, and language tests.  The first test that succeeds causes the file type to be printed.

     The type printed will usually contain one of the words text (the file contains only printing characters and a few common
     control characters and is probably safe to read on an ASCII terminal), executable (the file contains the result of compil‐
     ing a program in a form understandable to some UNIX kernel or another), or data meaning anything else (data is usually
     “binary” or non-printable).  Exceptions are well-known file formats (core files, tar archives) that are known to contain
     binary data.  When modifying magic files or the program itself, make sure to preserve these keywords.  Users depend on
     knowing that all the readable files in a directory have the word “text” printed.  Don't do as Berkeley did and change
     “shell commands text” to “shell script”.

     The filesystem tests are based on examining the return from a stat(2) system call.  The program checks to see if the file
     is empty, or if it's some sort of special file.  Any known file types appropriate to the system you are running on (sock‐
     ets, symbolic links, or named pipes (FIFOs) on those systems that implement them) are intuited if they are defined in the
     system header file &amp;lt;sys/stat.h&amp;gt;.

     The magic tests are used to check for files with data in particular fixed formats.  The canonical example of this is a
     binary executable (compiled program) a.out file, whose format is defined in &amp;lt;elf.h&amp;gt;, &amp;lt;a.out.h&amp;gt; and possibly &amp;lt;exec.h&amp;gt; in the
     standard include directory.  These files have a “magic number” stored in a particular place near the beginning of the file
     that tells the UNIX operating system that the file is a binary executable, and which of several types thereof.  The concept
     of a “magic” has been applied by extension to data files.  Any file with some invariant identifier at a small fixed offset
     into the file can usually be described in this way.  The information identifying these files is read from the compiled
     magic file /usr/share/file/misc/magic.mgc, or the files in the directory /usr/share/file/misc/magic if the compiled file
     does not exist.  In addition, if $HOME/.magic.mgc or $HOME/.magic exists, it will be used in preference to the system magic
     files.

     If a file does not match any of the entries in the magic file, it is examined to see if it seems to be a text file.  ASCII,
     ISO-8859-x, non-ISO 8-bit extended-ASCII character sets (such as those used on Macintosh and IBM PC systems), UTF-8-encoded
     Unicode, UTF-16-encoded Unicode, and EBCDIC character sets can be distinguished by the different ranges and sequences of
     bytes that constitute printable text in each set.  If a file passes any of these tests, its character set is reported.
     ASCII, ISO-8859-x, UTF-8, and extended-ASCII files are identified as “text” because they will be mostly readable on nearly
     any terminal; UTF-16 and EBCDIC are only “character data” because, while they contain text, it is text that will require
     translation before it can be read.  In addition, file will attempt to determine other characteristics of text-type files.
     If the lines of a file are terminated by CR, CRLF, or NEL, instead of the Unix-standard LF, this will be reported.  Files
     that contain embedded escape sequences or overstriking will also be identified.

     Once file has determined the character set used in a text-type file, it will attempt to determine in what language the file
     is written.  The language tests look for particular strings (cf.  &amp;lt;names.h&amp;gt;) that can appear anywhere in the first few
     blocks of a file.  For example, the keyword .br indicates that the file is most likely a troff(1) input file, just as the
     keyword struct indicates a C program.  These tests are less reliable than the previous two groups, so they are performed
     last.  The language test routines also test for some miscellany (such as tar(1) archives).

     Any file that cannot be identified as having been written in any of the character sets listed above is simply said to be
     “data”.

OPTIONS
     --apple
             Causes the file command to output the file type and creator code as used by older MacOS versions. The code consists
             of eight letters, the first describing the file type, the latter the creator.

     -b, --brief
             Do not prepend filenames to output lines (brief mode).

     -C, --compile
             Write a magic.mgc output file that contains a pre-parsed version of the magic file or directory.

     -c, --checking-printout
             Cause a checking printout of the parsed form of the magic file.  This is usually used in conjunction with the -m
             flag to debug a new magic file before installing it.

     -d      Prints internal debugging information to stderr.

     -E      On filesystem errors (file not found etc), instead of handling the error as regular output as POSIX mandates and
             keep going, issue an error message and exit.

     -e, --exclude testname
             Exclude the test named in testname from the list of tests made to determine the file type.  Valid test names are:

             apptype   EMX application type (only on EMX).

             ascii     Various types of text files (this test will try to guess the text encoding, irrespective of the setting
                       of the ‘encoding’ option).

             encoding  Different text encodings for soft magic tests.

             tokens    Ignored for backwards compatibility.

             cdf       Prints details of Compound Document Files.

             compress  Checks for, and looks inside, compressed files.

             elf       Prints ELF file details, provided soft magic tests are enabled and the elf magic is found.

             soft      Consults magic files.

             tar       Examines tar files.

             text      A synonym for ‘ascii’.

     --extension
             Print a slash-separated list of valid extensions for the file type found.

     -F, --separator separator
             Use the specified string as the separator between the filename and the file result returned.  Defaults to ‘:’.

     -f, --files-from namefile
             Read the names of the files to be examined from namefile (one per line) before the argument list.  Either namefile
             or at least one filename argument must be present; to test the standard input, use ‘-’ as a filename argument.
             Please note that namefile is unwrapped and the enclosed filenames are processed when this option is encountered and
             before any further options processing is done.  This allows one to process multiple lists of files with different
             command line arguments on the same file invocation.  Thus if you want to set the delimiter, you need to do it
             before you specify the list of files, like: “-F @ -f namefile”, instead of: “-f namefile -F @”.

     -h, --no-dereference
             option causes symlinks not to be followed (on systems that support symbolic links).  This is the default if the
             environment variable POSIXLY_CORRECT is not defined.

     -i, --mime
             Causes the file command to output mime type strings rather than the more traditional human readable ones.  Thus it
             may say ‘text/plain; charset=us-ascii’ rather than “ASCII text”.

     --mime-type, --mime-encoding
             Like -i, but print only the specified element(s).

     -k, --keep-going
             Don't stop at the first match, keep going.  Subsequent matches will be have the string ‘\012- ’ prepended.  (If you
             want a newline, see the -r option.)  The magic pattern with the highest strength (see the -l option) comes first.

     -l, --list
             Shows a list of patterns and their strength sorted descending by magic(4) strength which is used for the matching
             (see also the -k option).

     -L, --dereference
             option causes symlinks to be followed, as the like-named option in ls(1) (on systems that support symbolic links).
             This is the default if the environment variable POSIXLY_CORRECT is defined.

     -m, --magic-file magicfiles
             Specify an alternate list of files and directories containing magic.  This can be a single item, or a colon-sepa‐
             rated list.  If a compiled magic file is found alongside a file or directory, it will be used instead.

     -N, --no-pad
             Don't pad filenames so that they align in the output.

     -n, --no-buffer
             Force stdout to be flushed after checking each file.  This is only useful if checking a list of files.  It is
             intended to be used by programs that want filetype output from a pipe.

     -p, --preserve-date
             On systems that support utime(3) or utimes(2), attempt to preserve the access time of files analyzed, to pretend
             that file never read them.

     -P, --parameter name=value
             Set various parameter limits.

                   Name         Default    Explanation
                   indir        15         recursion limit for indirect magic
                   name         30         use count limit for name/use magic
                   elf_notes    256        max ELF notes processed
                   elf_phnum    128        max ELF program sections processed
                   elf_shnum    32768      max ELF sections processed
                   regex        8192       length limit for regex searches
                   bytes        1048576    max number of bytes to read from file

     -r, --raw
             Don't translate unprintable characters to \ooo.  Normally file translates unprintable characters to their octal
             representation.

     -s, --special-files
             Normally, file only attempts to read and determine the type of argument files which stat(2) reports are ordinary
             files.  This prevents problems, because reading special files may have peculiar consequences.  Specifying the -s
             option causes file to also read argument files which are block or character special files.  This is useful for
             determining the filesystem types of the data in raw disk partitions, which are block special files.  This option
             also causes file to disregard the file size as reported by stat(2) since on some systems it reports a zero size for
             raw disk partitions.

     -v, --version
             Print the version of the program and exit.

     -z, --uncompress
             Try to look inside compressed files.

     -Z, --uncompress-noreport
             Try to look inside compressed files, but report information about the contents only not the compression.

     -0, --print0
             Output a null character ‘\0’ after the end of the filename.  Nice to cut(1) the output.  This does not affect the
             separator, which is still printed.

             If this option is repeated more than once, then file prints just the filename followed by a NUL followed by the
             description (or ERROR: text) followed by a second NUL for each entry.

     --help  Print a help message and exit.

FILES
     /usr/share/file/misc/magic.mgc  Default compiled list of magic.
     /usr/share/file/misc/magic      Directory containing default magic files.

ENVIRONMENT
     The environment variable MAGIC can be used to set the default magic file name.  If that variable is set, then file will not
     attempt to open $HOME/.magic.  file adds “.mgc” to the value of this variable as appropriate.  However, file has to exist
     in order for file.mime to be considered.  The environment variable POSIXLY_CORRECT controls (on systems that support sym‐
     bolic links), whether file will attempt to follow symlinks or not.  If set, then file follows symlink, otherwise it does
     not.  This is also controlled by the -L and -h options.

SEE ALSO
     magic(5), hexdump(1), od(1), strings(1),

STANDARDS CONFORMANCE
     This program is believed to exceed the System V Interface Definition of FILE(CMD), as near as one can determine from the
     vague language contained therein.  Its behavior is mostly compatible with the System V program of the same name.  This ver‐
     sion knows more magic, however, so it will produce different (albeit more accurate) output in many cases.

     The one significant difference between this version and System V is that this version treats any white space as a delim‐
     iter, so that spaces in pattern strings must be escaped.  For example,

           &amp;gt;10     string  language impress        (imPRESS data)

     in an existing magic file would have to be changed to

           &amp;gt;10     string  language\ impress       (imPRESS data)

     In addition, in this version, if a pattern string contains a backslash, it must be escaped.  For example

           0       string          \begindata      Andrew Toolkit document

     in an existing magic file would have to be changed to

           0       string          \\begindata     Andrew Toolkit document

     SunOS releases 3.2 and later from Sun Microsystems include a file command derived from the System V one, but with some
     extensions.  This version differs from Sun's only in minor ways.  It includes the extension of the ‘&amp;’ operator, used as,
     for example,

           &amp;gt;16     long&amp;0x7fffffff &amp;gt;0              not stripped

MAGIC DIRECTORY
     The magic file entries have been collected from various sources, mainly USENET, and contributed by various authors.  Chris‐
     tos Zoulas (address below) will collect additional or corrected magic file entries.  A consolidation of magic file entries
     will be distributed periodically.

     The order of entries in the magic file is significant.  Depending on what system you are using, the order that they are put
     together may be incorrect.  If your old file command uses a magic file, keep the old magic file around for comparison pur‐
     poses (rename it to /usr/share/file/misc/magic.orig).

EXAMPLES
           $ file file.c file /dev/{wd0a,hda}
           file.c:   C program text
           file:     ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV),
                     dynamically linked (uses shared libs), stripped
           /dev/wd0a: block special (0/0)
           /dev/hda: block special (3/0)

           $ file -s /dev/wd0{b,d}
           /dev/wd0b: data
           /dev/wd0d: x86 boot sector

           $ file -s /dev/hda{,1,2,3,4,5,6,7,8,9,10}
           /dev/hda:   x86 boot sector
           /dev/hda1:  Linux/i386 ext2 filesystem
           /dev/hda2:  x86 boot sector
           /dev/hda3:  x86 boot sector, extended partition table
           /dev/hda4:  Linux/i386 ext2 filesystem
           /dev/hda5:  Linux/i386 swap file
           /dev/hda6:  Linux/i386 swap file
           /dev/hda7:  Linux/i386 swap file
           /dev/hda8:  Linux/i386 swap file
           /dev/hda9:  empty
           /dev/hda10: empty

           $ file -i file.c file /dev/{wd0a,hda}
           file.c:      text/x-c
           file:        application/x-executable
           /dev/hda:    application/x-not-regular-file
           /dev/wd0a:   application/x-not-regular-file

HISTORY
     There has been a file command in every UNIX since at least Research Version 4 (man page dated November, 1973).  The System
     V version introduced one significant major change: the external list of magic types.  This slowed the program down slightly
     but made it a lot more flexible.

     This program, based on the System V version, was written by Ian Darwin ⟨ian@darwinsys.com⟩ without looking at anybody
     else's source code.

     John Gilmore revised the code extensively, making it better than the first version.  Geoff Collyer found several inadequa‐
     cies and provided some magic file entries.  Contributions by the ‘&amp;’ operator by Rob McMahon, ⟨cudcv@warwick.ac.uk⟩, 1989.

     Guy Harris, ⟨guy@netapp.com⟩, made many changes from 1993 to the present.  1989.

     Primary development and maintenance from 1990 to the present by Christos Zoulas ⟨christos@astron.com⟩.

     Altered by Chris Lowth ⟨chris@lowth.com⟩, 2000: handle the -i option to output mime type strings, using an alternative
     magic file and internal logic.

     Altered by Eric Fischer ⟨enf@pobox.com⟩, July, 2000, to identify character codes and attempt to identify the languages of
     non-ASCII files.

     Altered by Reuben Thomas ⟨rrt@sc3d.org⟩, 2007-2011, to improve MIME support, merge MIME and non-MIME magic, support direc‐
     tories as well as files of magic, apply many bug fixes, update and fix a lot of magic, improve the build system, improve
     the documentation, and rewrite the Python bindings in pure Python.

     The list of contributors to the ‘magic’ directory (magic files) is too long to include here.  You know who you are; thank
     you.  Many contributors are listed in the source files.

LEGAL NOTICE
     Copyright (c) Ian F. Darwin, Toronto, Canada, 1986-1999.  Covered by the standard Berkeley Software Distribution copyright;
     see the file COPYING in the source distribution.

     The files tar.h and is_tar.c were written by John Gilmore from his public-domain tar(1) program, and are not covered by the
     above license.

RETURN CODE
     file returns 0 on success, and non-zero on error.

BUGS
     Please report bugs and send patches to the bug tracker at http://bugs.gw.com/ or the mailing list at ⟨file@mx.gw.com⟩
     (visit http://mx.gw.com/mailman/listinfo/file first to subscribe).

TODO
     Fix output so that tests for MIME and APPLE flags are not needed all over the place, and actual output is only done in one
     place.  This needs a design.  Suggestion: push possible outputs on to a list, then pick the last-pushed (most specific, one
     hopes) value at the end, or use a default if the list is empty.  This should not slow down evaluation.

     The handling of MAGIC_CONTINUE and printing \012- between entries is clumsy and complicated; refactor and centralize.

     Some of the encoding logic is hard-coded in encoding.c and can be moved to the magic files if we had a !:charset annotation

     Continue to squash all magic bugs.  See Debian BTS for a good source.

     Store arbitrarily long strings, for example for %s patterns, so that they can be printed out.  Fixes Debian bug #271672.
     This can be done by allocating strings in a string pool, storing the string pool at the end of the magic file and convert‐
     ing all the string pointers to relative offsets from the string pool.

     Add syntax for relative offsets after current level (Debian bug #466037).

     Make file -ki work, i.e. give multiple MIME types.

     Add a zip library so we can peek inside Office2007 documents to print more details about their contents.

     Add an option to print URLs for the sources of the file descriptions.

     Combine script searches and add a way to map executable names to MIME types (e.g. have a magic value for !:mime which
     causes the resulting string to be looked up in a table).  This would avoid adding the same magic repeatedly for each new
     hash-bang interpreter.

     When a file descriptor is available, we can skip and adjust the buffer instead of the hacky buffer management we do now.

     Fix “name” and “use” to check for consistency at compile time (duplicate “name”, “use” pointing to undefined “name” ).
     Make “name” / “use” more efficient by keeping a sorted list of names.  Special-case ^ to flip endianness in the parser so
     that it does not have to be escaped, and document it.

     If the offsets specified internally in the file exceed the buffer size ( HOWMANY variable in file.h), then we don't seek to
     that offset, but we give up.  It would be better if buffer managements was done when the file descriptor is available so
     move around the file.  One must be careful though because this has performance (and thus security considerations).

AVAILABILITY
     You can obtain the original author's latest version by anonymous FTP on ftp.astron.com in the directory
     /pub/file/file-X.YZ.tar.gz.

BSD                                                     October 19, 2016                                                     BSD
FIND(1)                                              General Commands Manual                                             FIND(1)

NAME
       find - search for files in a directory hierarchy

SYNOPSIS
       find [-H] [-L] [-P] [-D debugopts] [-Olevel] [starting-point...] [expression]

DESCRIPTION
       This  manual page documents the GNU version of find.  GNU find searches the directory tree rooted at each given starting-
       point by evaluating the given expression from left to right, according to the rules of  precedence  (see  section  OPERA‐
       TORS),  until  the  outcome  is  known (the left hand side is false for and operations, true for or), at which point find
       moves on to the next file name.  If no starting-point is specified, `.' is assumed.

       If you are using find in an environment where security is important (for example if you are using it to  search  directo‐
       ries that are writable by other users), you should read the "Security Considerations" chapter of the findutils documenta‐
       tion, which is called Finding Files and comes with findutils.   That document also includes a lot more detail and discus‐
       sion than this manual page, so you may find it a more useful source of information.

OPTIONS
       The  -H,  -L and -P options control the treatment of symbolic links.  Command-line arguments following these are taken to
       be names of files or directories to be examined, up to the first argument that begins with `-', or the  argument  `('  or
       `!'.  That argument and any following arguments are taken to be the expression describing what is to be searched for.  If
       no paths are given, the current directory is used.  If no expression is given, the expression -print  is  used  (but  you
       should probably consider using -print0 instead, anyway).

       This  manual  page talks about `options' within the expression list.  These options control the behaviour of find but are
       specified immediately after the last path name.  The five `real' options -H, -L, -P, -D and -O  must  appear  before  the
       first  path  name,  if  at all.  A double dash -- can also be used to signal that any remaining arguments are not options
       (though ensuring that all start points begin with either `./' or `/' is generally safer if you use wildcards in the  list
       of start points).

       -P     Never follow symbolic links.  This is the default behaviour.  When find examines or prints information a file, and
              the file is a symbolic link, the information used shall be taken from the properties of the symbolic link itself.

       -L     Follow symbolic links.  When find examines or prints information about files, the information used shall be  taken
              from the properties of the file to which the link points, not from the link itself (unless it is a broken symbolic
              link or find is unable to examine the file to which the link points).  Use of this option implies -noleaf.  If you
              later  use  the -P option, -noleaf will still be in effect.  If -L is in effect and find discovers a symbolic link
              to a subdirectory during its search, the subdirectory pointed to by the symbolic link will be searched.

              When the -L option is in effect, the -type predicate will always match against the type of the file  that  a  sym‐
              bolic  link  points  to  rather than the link itself (unless the symbolic link is broken).  Actions that can cause
              symbolic links to become broken while find is executing (for example -delete) can give rise  to  confusing  behav‐
              iour.  Using -L causes the -lname and -ilname predicates always to return false.

       -H     Do  not  follow  symbolic links, except while processing the command line arguments.  When find examines or prints
              information about files, the information used shall be taken from the properties  of  the  symbolic  link  itself.
              The only exception to this behaviour is when a file specified on the command line is a symbolic link, and the link
              can be resolved.  For that situation, the information used is taken from whatever the link points to (that is, the
              link is followed).  The information about the link itself is used as a fallback if the file pointed to by the sym‐
              bolic link cannot be examined.  If -H is in effect and one of the paths specified on the command line  is  a  sym‐
              bolic  link  to  a  directory, the contents of that directory will be examined (though of course -maxdepth 0 would
              prevent this).

       If more than one of -H, -L and -P is specified, each overrides the others; the last one appearing  on  the  command  line
       takes  effect.   Since  it  is  the default, the -P option should be considered to be in effect unless either -H or -L is
       specified.

       GNU find frequently stats files during the processing of the command line itself, before any searching has begun.   These
       options  also  affect  how  those  arguments are processed.  Specifically, there are a number of tests that compare files
       listed on the command line against a file we are currently considering.  In each case, the file specified on the  command
       line  will  have  been examined and some of its properties will have been saved.  If the named file is in fact a symbolic
       link, and the -P option is in effect (or if neither -H nor -L were specified), the information used  for  the  comparison
       will  be taken from the properties of the symbolic link.  Otherwise, it will be taken from the properties of the file the
       link points to.  If find cannot follow the link (for example because it has insufficient privileges or the link points to
       a nonexistent file) the properties of the link itself will be used.

       When  the  -H  or -L options are in effect, any symbolic links listed as the argument of -newer will be dereferenced, and
       the timestamp will be taken from the file to which the symbolic link points.  The same consideration applies to -newerXY,
       -anewer and -cnewer.

       The  -follow  option  has a similar effect to -L, though it takes effect at the point where it appears (that is, if -L is
       not used but -follow is, any symbolic links appearing after -follow on the command line will be dereferenced,  and  those
       before it will not).

       -D debugoptions
              Print  diagnostic  information; this can be helpful to diagnose problems with why find is not doing what you want.
              The list of debug options should be comma separated.  Compatibility of the debug options is not guaranteed between
              releases  of  findutils.  For a complete list of valid debug options, see the output of find -D help.  Valid debug
              options include

              help   Explain the debugging options

              tree   Show the expression tree in its original and optimised form.

              stat   Print messages as files are examined with the stat and lstat system calls.  The find program tries to  min‐
                     imise such calls.

              opt    Prints diagnostic information relating to the optimisation of the expression tree; see the -O option.

              rates  Prints a summary indicating how often each predicate succeeded or failed.

       -Olevel
              Enables  query  optimisation.   The find program reorders tests to speed up execution while preserving the overall
              effect; that is, predicates with side effects are not reordered relative to each other.   The  optimisations  per‐
              formed at each optimisation level are as follows.

              0      Equivalent to optimisation level 1.

              1      This  is  the  default  optimisation  level  and corresponds to the traditional behaviour.  Expressions are
                     reordered so that tests based only on the names of files (for  example  -name  and  -regex)  are  performed
                     first.

              2      Any  -type  or  -xtype tests are performed after any tests based only on the names of files, but before any
                     tests that require information from the inode.  On many modern versions of Unix, file types are returned by
                     readdir() and so these predicates are faster to evaluate than predicates which need to stat the file first.
                     If you use the -fstype FOO predicate and specify a filesystem type FOO which is not known (that is, present
                     in `/etc/mtab') at the time find starts, that predicate is equivalent to -false.

              3      At this optimisation level, the full cost-based query optimiser is enabled.  The order of tests is modified
                     so that cheap (i.e. fast) tests are performed first and more expensive ones are performed later, if  neces‐
                     sary.   Within  each  cost  band,  predicates  are evaluated earlier or later according to whether they are
                     likely to succeed or not.  For -o, predicates which are likely to succeed are evaluated  earlier,  and  for
                     -a, predicates which are likely to fail are evaluated earlier.

              The cost-based optimiser has a fixed idea of how likely any given test is to succeed.  In some cases the probabil‐
              ity takes account of the specific nature of the test (for example, -type f is assumed to be more likely to succeed
              than  -type c).  The cost-based optimiser is currently being evaluated.   If it does not actually improve the per‐
              formance of find, it will be removed again.  Conversely, optimisations that  prove  to  be  reliable,  robust  and
              effective  may  be enabled at lower optimisation levels over time.  However, the default behaviour (i.e. optimisa‐
              tion level 1) will not be changed in the 4.3.x release series.  The findutils test suite runs  all  the  tests  on
              find at each optimisation level and ensures that the result is the same.

EXPRESSION
       The  part of the command line after the list of starting points is the expression.  This is a kind of query specification
       describing how we match files and what we do with the files that were matched.  An expression is composed of  a  sequence
       of things:

       Tests  Tests  return  a  true  or  false  value, usually on the basis of some property of a file we are considering.  The
              -empty test for example is true only when the current file is empty.

       Actions
              Actions have side effects (such as printing something on the standard output) and return  either  true  or  false,
              usually based on whether or not they are successful.  The -print action for example prints the name of the current
              file on the standard output.

       Global options
              Global options affect the operation of tests and actions specified on  any  part  of  the  command  line.   Global
              options  always  return  true.  The -depth option for example makes find traverse the file system in a depth-first
              order.

       Positional options
              Positional optiona affect only tests or actions which follow them.  Positional options always  return  true.   The
              -regextype  option  for  example  is positional, specifying the regular expression dialect for regulat expressions
              occurring later on the command line.

       Operators
              Operators join together the other items within the expression.  They include for example -o (meaning  logical  OR)
              and -a (meaning logical AND).  Where an operator is missing, -a is assumed.

       If  the  whole expression contains no actions other than -prune or -print, -print is performed on all files for which the
       whole expression is true.

       The -delete action also acts like an option (since it implies -depth).

   POSITIONAL OPTIONS
       Positional options always return true.  They affect only tests occurring later on the command line.

       -daystart
              Measure times (for -amin, -atime, -cmin, -ctime, -mmin, and -mtime) from the beginning of today rather  than  from
              24 hours ago.  This option only affects tests which appear later on the command line.

       -follow
              Deprecated;  use the -L option instead.  Dereference symbolic links.  Implies -noleaf.  The -follow option affects
              only those tests which appear after it on the command line.  Unless the -H or -L option has  been  specified,  the
              position  of the -follow option changes the behaviour of the -newer predicate; any files listed as the argument of
              -newer will be dereferenced if they are symbolic links.  The same consideration applies to -newerXY,  -anewer  and
              -cnewer.   Similarly,  the  -type  predicate  will  always match against the type of the file that a symbolic link
              points to rather than the link itself.  Using -follow causes the -lname and -ilname predicates  always  to  return
              false.

       -regextype type
              Changes  the  regular  expression  syntax  understood by -regex and -iregex tests which occur later on the command
              line.  To see which regular expression types are known, use -regextype help.  The Texinfo documentation  (see  SEE
              ALSO) explains the meaning of and differences between the various types of regular expression.

       -warn, -nowarn
              Turn  warning messages on or off.  These warnings apply only to the command line usage, not to any conditions that
              find might encounter when it searches directories.  The default behaviour corresponds to -warn if  standard  input
              is  a  tty,  and  to -nowarn otherwise.  If a warning message relating to command-line usage is produced, the exit
              status of find is not affected.  If the POSIXLY_CORRECT environment variable is set, and -warn is also used, it is
              not specified which, if any, warnings will be active.

   GLOBAL OPTIONS
       Global  options  always return true.  Global options take effect even for tests which occurr earlier on the command line.
       To prevent confusion, global options should specified on the command-line after the list of start points, just before the
       first  test,  positional  option or action. If you specify a global option in some other place, find will issue a warning
       message explaining that this can be confusing.

       The global options occur after the list of start points, and so are not the same kind of option as -L, for example.

       -d     A synonym for -depth, for compatibility with FreeBSD, NetBSD, MacOS X and OpenBSD.

       -depth Process each directory's contents before the directory itself.  The -delete action also implies -depth.

       -help, --help
              Print a summary of the command-line usage of find and exit.

       -ignore_readdir_race
              Normally, find will emit an error message when it fails to stat a file.  If you give this option  and  a  file  is
              deleted  between  the  time  find  reads the name of the file from the directory and the time it tries to stat the
              file, no error message will be issued.    This also applies to files or directories whose names are given  on  the
              command  line.   This option takes effect at the time the command line is read, which means that you cannot search
              one part of the filesystem with this option on and part of it with this option off (if you need to  do  that,  you
              will need to issue two find commands instead, one with the option and one without it).

       -maxdepth levels
              Descend at most levels (a non-negative integer) levels of directories below the starting-points.  -maxdepth 0
               means only apply the tests and actions to the starting-points themselves.

       -mindepth levels
              Do  not apply any tests or actions at levels less than levels (a non-negative integer).  -mindepth 1 means process
              all files except the starting-points.

       -mount Don't descend directories on other filesystems.  An alternate name for -xdev, for compatibility  with  some  other
              versions of find.

       -noignore_readdir_race
              Turns off the effect of -ignore_readdir_race.

       -noleaf
              Do  not  optimize  by  assuming  that directories contain 2 fewer subdirectories than their hard link count.  This
              option is needed when searching filesystems that do not follow the Unix directory-link convention, such as  CD-ROM
              or  MS-DOS filesystems or AFS volume mount points.  Each directory on a normal Unix filesystem has at least 2 hard
              links: its name and its `.'  entry.  Additionally, its subdirectories (if any) each have a `..'  entry  linked  to
              that  directory.   When find is examining a directory, after it has statted 2 fewer subdirectories than the direc‐
              tory's link count, it knows that the rest of the entries in the directory are non-directories (`leaf' files in the
              directory  tree).   If only the files' names need to be examined, there is no need to stat them; this gives a sig‐
              nificant increase in search speed.

       -version, --version
              Print the find version number and exit.

       -xdev  Don't descend directories on other filesystems.

   TESTS
       Some tests, for example -newerXY and -samefile, allow comparison between the file currently being examined and some  ref‐
       erence file specified on the command line.  When these tests are used, the interpretation of the reference file is deter‐
       mined by the options -H, -L and -P and any previous -follow, but the reference file is only examined once,  at  the  time
       the  command  line  is  parsed.  If the reference file cannot be examined (for example, the stat(2) system call fails for
       it), an error message is issued, and find exits with a nonzero status.

       Numeric arguments can be specified as

       +n     for greater than n,

       -n     for less than n,

       n      for exactly n.

       -amin n
              File was last accessed n minutes ago.

       -anewer file
              File was last accessed more recently than file was modified.  If file is a symbolic link and the -H option or  the
              -L option is in effect, the access time of the file it points to is always used.

       -atime n
              File  was  last  accessed  n*24  hours  ago.  When find figures out how many 24-hour periods ago the file was last
              accessed, any fractional part is ignored, so to match -atime +1, a file has to have been  accessed  at  least  two
              days ago.

       -cmin n
              File's status was last changed n minutes ago.

       -cnewer file
              File's status was last changed more recently than file was modified.  If file is a symbolic link and the -H option
              or the -L option is in effect, the status-change time of the file it points to is always used.

       -ctime n
              File's status was last changed n*24 hours ago.  See the comments for -atime to understand how rounding affects the
              interpretation of file status change times.

       -empty File is empty and is either a regular file or a directory.

       -executable
              Matches  files  which are executable and directories which are searchable (in a file name resolution sense).  This
              takes into account access control lists and other permissions artefacts which the -perm test ignores.   This  test
              makes  use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squash‐
              ing), since many systems implement access(2) in the client's kernel and so cannot make  use  of  the  UID  mapping
              information held on the server.  Because this test is based only on the result of the access(2) system call, there
              is no guarantee that a file for which this test succeeds can actually be executed.

       -false Always false.

       -fstype type
              File is on a filesystem of type type.  The valid filesystem types vary among different versions of Unix; an incom‐
              plete  list  of filesystem types that are accepted on some version of Unix or another is: ufs, 4.2, 4.3, nfs, tmp,
              mfs, S51K, S52K.  You can use -printf with the %F directive to see the types of your filesystems.

       -gid n File's numeric group ID is n.

       -group gname
              File belongs to group gname (numeric group ID allowed).

       -ilname pattern
              Like -lname, but the match is case insensitive.  If the -L option or the -follow option is in  effect,  this  test
              returns false unless the symbolic link is broken.

       -iname pattern
              Like  -name,  but  the  match is case insensitive.  For example, the patterns `fo*' and `F??' match the file names
              `Foo', `FOO', `foo', `fOo', etc.   The pattern `*foo*` will also match a file called '.foobar'.

       -inum n
              File has inode number n.  It is normally easier to use the -samefile test instead.

       -ipath pattern
              Like -path.  but the match is case insensitive.

       -iregex pattern
              Like -regex, but the match is case insensitive.

       -iwholename pattern
              See -ipath.  This alternative is less portable than -ipath.

       -links n
              File has n links.

       -lname pattern
              File is a symbolic link whose contents match shell pattern pattern.  The metacharacters do not treat  `/'  or  `.'
              specially.   If the -L option or the -follow option is in effect, this test returns false unless the symbolic link
              is broken.

       -mmin n
              File's data was last modified n minutes ago.

       -mtime n
              File's data was last modified n*24 hours ago.  See the comments for -atime to understand how rounding affects  the
              interpretation of file modification times.

       -name pattern
              Base  of  file  name  (the  path with the leading directories removed) matches shell pattern pattern.  Because the
              leading directories are removed, the file names considered for a match with -name will never include a  slash,  so
              `-name a/b' will never match anything (you probably need to use -path instead).  A warning is issued if you try to
              do this, unless the environment variable POSIXLY_CORRECT is set.  The metacharacters (`*', `?', and `[]') match  a
              `.'  at the start of the base name (this is a change in findutils-4.2.2; see section STANDARDS CONFORMANCE below).
              To ignore a directory and the files under it, use -prune; see an example in the description of -path.  Braces  are
              not  recognised  as  being  special,  despite the fact that some shells including Bash imbue braces with a special
              meaning in shell patterns.  The filename matching is performed with the use of the  fnmatch(3)  library  function.
              Don't forget to enclose the pattern in quotes in order to protect it from expansion by the shell.

       -newer file
              File  was  modified  more recently than file.  If file is a symbolic link and the -H option or the -L option is in
              effect, the modification time of the file it points to is always used.

       -newerXY reference
              Succeeds if timestamp X of the file being considered is newer than timestamp Y of the file reference.    The  let‐
              ters X and Y can be any of the following letters:

              a   The access time of the file reference
              B   The birth time of the file reference
              c   The inode status change time of reference
              m   The modification time of the file reference
              t   reference is interpreted directly as a time

              Some combinations are invalid; for example, it is invalid for X to be t.  Some combinations are not implemented on
              all systems; for example B is not supported on all systems.  If an invalid or unsupported  combination  of  XY  is
              specified, a fatal error results.  Time specifications are interpreted as for the argument to the -d option of GNU
              date.  If you try to use the birth time of a reference file, and the birth time  cannot  be  determined,  a  fatal
              error  message  results.   If you specify a test which refers to the birth time of files being examined, this test
              will fail for any files where the birth time is unknown.

       -nogroup
              No group corresponds to file's numeric group ID.

       -nouser
              No user corresponds to file's numeric user ID.

       -path pattern
              File name matches shell pattern pattern.  The metacharacters do not treat `/' or `.' specially; so, for example,
                        find . -path "./sr*sc"
              will print an entry for a directory called `./src/misc' (if one exists).  To ignore a whole  directory  tree,  use
              -prune  rather than checking every file in the tree.  For example, to skip the directory `src/emacs' and all files
              and directories under it, and print the names of the other files found, do something like this:
                        find . -path ./src/emacs -prune -o -print
              Note that the pattern match test applies to the whole file name, starting from one of the start  points  named  on
              the  command line.  It would only make sense to use an absolute path name here if the relevant start point is also
              an absolute path.  This means that this command will never match anything:
                        find bar -path /foo/bar/myfile -print
              Find compares the -path argument with the concatenation of a directory name and the base name  of  the  file  it's
              examining.   Since  the  concatenation  will  never end with a slash, -path arguments ending in a slash will match
              nothing (except perhaps a start point specified on the command line).  The predicate -path is  also  supported  by
              HP-UX find and will be in a forthcoming version of the POSIX standard.

       -perm mode
              File's permission bits are exactly mode (octal or symbolic).  Since an exact match is required, if you want to use
              this form for symbolic modes, you may have to specify a rather complex mode string.  For example `-perm g=w'  will
              only match files which have mode 0020 (that is, ones for which group write permission is the only permission set).
              It is more likely that you will want to use the `/' or `-' forms, for example `-perm -g=w', which matches any file
              with group write permission.  See the EXAMPLES section for some illustrative examples.

       -perm -mode
              All  of the permission bits mode are set for the file.  Symbolic modes are accepted in this form, and this is usu‐
              ally the way in which you would want to use them.  You must specify `u', `g' or `o' if you use  a  symbolic  mode.
              See the EXAMPLES section for some illustrative examples.

       -perm /mode
              Any of the permission bits mode are set for the file.  Symbolic modes are accepted in this form.  You must specify
              `u', `g' or `o' if you use a symbolic mode.  See the EXAMPLES section for some illustrative examples.  If no  per‐
              mission  bits in mode are set, this test matches any file (the idea here is to be consistent with the behaviour of
              -perm -000).

       -perm +mode
              This is no longer supported (and has been deprecated since 2005).  Use -perm /mode instead.

       -readable
              Matches files which are readable.  This takes into account access control lists and  other  permissions  artefacts
              which  the  -perm  test  ignores.   This  test makes use of the access(2) system call, and so can be fooled by NFS
              servers which do UID mapping (or root-squashing), since many systems implement access(2) in  the  client's  kernel
              and so cannot make use of the UID mapping information held on the server.

       -regex pattern
              File  name  matches regular expression pattern.  This is a match on the whole path, not a search.  For example, to
              match a file named `./fubar3', you can use the regular expression `.*bar.' or `.*b.*3', but not `f.*r3'.  The reg‐
              ular  expressions  understood  by  find are by default Emacs Regular Expressions, but this can be changed with the
              -regextype option.

       -samefile name
              File refers to the same inode as name.   When -L is in effect, this can include symbolic links.

       -size n[cwbkMG]
              File uses n units of space, rounding up.  The following suffixes can be used:

              `b'    for 512-byte blocks (this is the default if no suffix is used)

              `c'    for bytes

              `w'    for two-byte words

              `k'    for Kilobytes (units of 1024 bytes)

              `M'    for Megabytes (units of 1048576 bytes)

              `G'    for Gigabytes (units of 1073741824 bytes)

              The size does not count indirect blocks, but it does count blocks in sparse files that are not actually allocated.
              Bear  in mind that the `%k' and `%b' format specifiers of -printf handle sparse files differently.  The `b' suffix
              always denotes 512-byte blocks and never 1 Kilobyte blocks, which is different to the behaviour of -ls.  The + and
              -  prefixes signify greater than and less than, as usual, but bear in mind that the size is rounded up to the next
              unit (so a 1-byte file is not matched by -size -1M).

       -true  Always true.

       -type c
              File is of type c:

              b      block (buffered) special

              c      character (unbuffered) special

              d      directory

              p      named pipe (FIFO)

              f      regular file

              l      symbolic link; this is never true if the -L option or the -follow option is in effect, unless the  symbolic
                     link is broken.  If you want to search for symbolic links when -L is in effect, use -xtype.

              s      socket

              D      door (Solaris)

       -uid n File's numeric user ID is n.

       -used n
              File was last accessed n days after its status was last changed.

       -user uname
              File is owned by user uname (numeric user ID allowed).

       -wholename pattern
              See -path.  This alternative is less portable than -path.

       -writable
              Matches  files  which  are writable.  This takes into account access control lists and other permissions artefacts
              which the -perm test ignores.  This test makes use of the access(2) system call, and  so  can  be  fooled  by  NFS
              servers  which  do  UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel
              and so cannot make use of the UID mapping information held on the server.

       -xtype c
              The same as -type unless the file is a symbolic link.  For symbolic links: if the -H or -P option  was  specified,
              true  if  the  file  is  a  link to a file of type c; if the -L option has been given, true if c is `l'.  In other
              words, for symbolic links, -xtype checks the type of the file that -type does not check.

       -context pattern
              (SELinux only) Security context of the file matches glob pattern.

   ACTIONS
       -delete
              Delete files; true if removal succeeded.  If the removal failed, an error message is issued.   If  -delete  fails,
              find's exit status will be nonzero (when it eventually exits).  Use of -delete automatically turns on the `-depth'
              option.

              Warnings: Don't forget that the find command line is evaluated as an expression, so  putting  -delete  first  will
              make find try to delete everything below the starting points you specified.  When testing a find command line that
              you later intend to use with -delete, you should explicitly specify -depth in  order  to  avoid  later  surprises.
              Because -delete implies -depth, you cannot usefully use -prune and -delete together.

       -exec command ;
              Execute  command;  true if 0 status is returned.  All following arguments to find are taken to be arguments to the
              command until an argument consisting of `;' is encountered.  The string `{}' is replaced by the current file  name
              being  processed everywhere it occurs in the arguments to the command, not just in arguments where it is alone, as
              in some versions of find.  Both of these constructions might need to be escaped (with a `\') or quoted to  protect
              them  from  expansion  by  the  shell.  See the EXAMPLES section for examples of the use of the -exec option.  The
              specified command is run once for each matched file.  The command is executed in the starting  directory.    There
              are unavoidable security problems surrounding use of the -exec action; you should use the -execdir option instead.

       -exec command {} +
              This  variant  of the -exec action runs the specified command on the selected files, but the command line is built
              by appending each selected file name at the end; the total number of invocations of the command will be much  less
              than  the  number  of matched files.  The command line is built in much the same way that xargs builds its command
              lines.  Only one instance of `{}' is allowed within the command.  The command is executed in the  starting  direc‐
              tory.   If  find encounters an error, this can sometimes cause an immediate exit, so some pending commands may not
              be run at all.  This variant of -exec always returns true.

       -execdir command ;

       -execdir command {} +
              Like -exec, but the specified command is run from the subdirectory containing the matched file, which is not  nor‐
              mally the directory in which you started find.  This a much more secure method for invoking commands, as it avoids
              race conditions during resolution of the paths to the matched files.  As with the -exec action, the  `+'  form  of
              -execdir will build a command line to process more than one matched file, but any given invocation of command will
              only list files that exist in the same subdirectory.  If you use this option, you  must  ensure  that  your  $PATH
              environment  variable  does not reference `.'; otherwise, an attacker can run any commands they like by leaving an
              appropriately-named file in a directory in which you will run -execdir.  The same applies  to  having  entries  in
              $PATH  which are empty or which are not absolute directory names.  If find encounters an error, this can sometimes
              cause an immediate exit, so some pending commands may not be run at all. The  result  of  the  action  depends  on
              whether the + or the ; variant is being used; -execdir command {} + always returns true, while -execdir command {}
              ; returns true only if command returns 0.

       -fls file
              True; like -ls but write to file like -fprint.  The output file is always created, even if the predicate is  never
              matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -fprint file
              True; print the full file name into file file.  If file does not exist when find is run, it is created; if it does
              exist, it is truncated.  The file names `/dev/stdout' and `/dev/stderr' are handled specially; they refer  to  the
              standard output and standard error output, respectively.  The output file is always created, even if the predicate
              is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are
              handled.

       -fprint0 file
              True;  like  -print0  but write to file like -fprint.  The output file is always created, even if the predicate is
              never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters  in  filenames  are
              handled.

       -fprintf file format
              True;  like  -printf  but write to file like -fprint.  The output file is always created, even if the predicate is
              never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters  in  filenames  are
              handled.

       -ls    True;  list  current  file  in  ls -dils format on standard output.  The block counts are of 1K blocks, unless the
              environment variable POSIXLY_CORRECT is set, in which case 512-byte blocks are used.  See  the  UNUSUAL  FILENAMES
              section for information about how unusual characters in filenames are handled.

       -ok command ;
              Like  -exec  but  ask  the user first.  If the user agrees, run the command.  Otherwise just return false.  If the
              command is run, its standard input is redirected from /dev/null.

              The response to the prompt is matched against a pair of regular expressions to determine if it is  an  affirmative
              or  negative  response.   This regular expression is obtained from the system if the `POSIXLY_CORRECT' environment
              variable is set, or otherwise from find's message translations.  If the system has no suitable definition,  find's
              own  definition  will  be  used.    In  either  case,  the interpretation of the regular expression itself will be
              affected by the environment variables 'LC_CTYPE' (character classes) and 'LC_COLLATE' (character ranges and equiv‐
              alence classes).

       -okdir command ;
              Like  -execdir  but ask the user first in the same way as for -ok.  If the user does not agree, just return false.
              If the command is run, its standard input is redirected from /dev/null.

       -print True; print the full file name on the standard output, followed by a newline.   If you are piping  the  output  of
              find  into  another program and there is the faintest possibility that the files which you are searching for might
              contain a newline, then you should seriously consider using the -print0 option instead of -print.  See the UNUSUAL
              FILENAMES section for information about how unusual characters in filenames are handled.

       -print0
              True;  print the full file name on the standard output, followed by a null character (instead of the newline char‐
              acter that -print uses).  This allows file names that contain newlines or other types of white space  to  be  cor‐
              rectly interpreted by programs that process the find output.  This option corresponds to the -0 option of xargs.

       -printf format
              True;  print  format on the standard output, interpreting `\' escapes and `%' directives.  Field widths and preci‐
              sions can be specified as with the `printf' C function.  Please note that many of the fields  are  printed  as  %s
              rather  than  %d,  and this may mean that flags don't work as you might expect.  This also means that the `-' flag
              does work (it forces fields to be left-aligned).  Unlike -print, -printf does not add a newline at the end of  the
              string.  The escapes and directives are:

              \a     Alarm bell.

              \b     Backspace.

              \c     Stop printing from this format immediately and flush the output.

              \f     Form feed.

              \n     Newline.

              \r     Carriage return.

              \t     Horizontal tab.

              \v     Vertical tab.

              \0     ASCII NUL.

              \\     A literal backslash (`\').

              \NNN   The character whose ASCII code is NNN (octal).

              A `\' character followed by any other character is treated as an ordinary character, so they both are printed.

              %%     A literal percent sign.

              %a     File's last access time in the format returned by the C `ctime' function.

              %Ak    File's  last  access time in the format specified by k, which is either `@' or a directive for the C `strf‐
                     time' function.  The possible values for k are listed below; some of them might not  be  available  on  all
                     systems, due to differences in `strftime' between systems.

                     @      seconds since Jan. 1, 1970, 00:00 GMT, with fractional part.

                     Time fields:

                     H      hour (00..23)

                     I      hour (01..12)

                     k      hour ( 0..23)

                     l      hour ( 1..12)

                     M      minute (00..59)

                     p      locale's AM or PM

                     r      time, 12-hour (hh:mm:ss [AP]M)

                     S      Second (00.00 .. 61.00).  There is a fractional part.

                     T      time, 24-hour (hh:mm:ss)

                     +      Date and time, separated by `+', for example `2004-04-28+22:22:05.0'.  This is a GNU extension.  The
                            time is given in the current timezone (which may be affected by setting  the  TZ  environment  vari‐
                            able).  The seconds field includes a fractional part.

                     X      locale's time representation (H:M:S)

                     Z      time zone (e.g., EDT), or nothing if no time zone is determinable

                     Date fields:

                     a      locale's abbreviated weekday name (Sun..Sat)

                     A      locale's full weekday name, variable length (Sunday..Saturday)

                     b      locale's abbreviated month name (Jan..Dec)

                     B      locale's full month name, variable length (January..December)

                     c      locale's  date  and time (Sat Nov 04 12:02:33 EST 1989).  The format is the same as for ctime(3) and
                            so to preserve compatibility with that format, there is no fractional part in the seconds field.

                     d      day of month (01..31)

                     D      date (mm/dd/yy)

                     h      same as b

                     j      day of year (001..366)

                     m      month (01..12)

                     U      week number of year with Sunday as first day of week (00..53)

                     w      day of week (0..6)

                     W      week number of year with Monday as first day of week (00..53)

                     x      locale's date representation (mm/dd/yy)

                     y      last two digits of year (00..99)

                     Y      year (1970...)

              %b     The amount of disk space used for this file in 512-byte blocks.  Since disk space is allocated in multiples
                     of the filesystem block size this is usually greater than %s/512, but it can also be smaller if the file is
                     a sparse file.

              %c     File's last status change time in the format returned by the C `ctime' function.

              %Ck    File's last status change time in the format specified by k, which is the same as for %A.

              %d     File's depth in the directory tree; 0 means the file is a starting-point.

              %D     The device number on which the file exists (the st_dev field of struct stat), in decimal.

              %f     File's name with any leading directories removed (only the last element).

              %F     Type of the filesystem the file is on; this value can be used for -fstype.

              %g     File's group name, or numeric group ID if the group has no name.

              %G     File's numeric group ID.

              %h     Leading directories of file's name (all but the last element).  If the file name contains no slashes (since
                     it is in the current directory) the %h specifier expands to ".".

              %H     Starting-point under which file was found.

              %i     File's inode number (in decimal).

              %k     The  amount  of  disk space used for this file in 1K blocks.  Since disk space is allocated in multiples of
                     the filesystem block size this is usually greater than %s/1024, but it can also be smaller if the file is a
                     sparse file.

              %l     Object of symbolic link (empty string if file is not a symbolic link).

              %m     File's  permission bits (in octal).  This option uses the `traditional' numbers which most Unix implementa‐
                     tions use, but if your particular implementation uses an unusual ordering of octal  permissions  bits,  you
                     will see a difference between the actual value of the file's mode and the output of %m.   Normally you will
                     want to have a leading zero on this number, and to do this, you should use the # flag (as in, for  example,
                     `%#m').

              %M     File's  permissions  (in  symbolic  form,  as  for ls).  This directive is supported in findutils 4.2.5 and
                     later.

              %n     Number of hard links to file.

              %p     File's name.

              %P     File's name with the name of the starting-point under which it was found removed.

              %s     File's size in bytes.

              %S     File's sparseness.  This is calculated as (BLOCKSIZE*st_blocks / st_size).  The exact value  you  will  get
                     for  an  ordinary  file  of a certain length is system-dependent.  However, normally sparse files will have
                     values less than 1.0, and files which use indirect blocks may have a value which is greater than 1.0.   The
                     value  used  for  BLOCKSIZE  is system-dependent, but is usually 512 bytes.   If the file size is zero, the
                     value printed is undefined.  On systems which lack support for st_blocks, a file's sparseness is assumed to
                     be 1.0.

              %t     File's last modification time in the format returned by the C `ctime' function.

              %Tk    File's last modification time in the format specified by k, which is the same as for %A.

              %u     File's user name, or numeric user ID if the user has no name.

              %U     File's numeric user ID.

              %y     File's type (like in ls -l), U=unknown type (shouldn't happen)

              %Y     File's type (like %y), plus follow symlinks: L=loop, N=nonexistent

              %Z     (SELinux only) file's security context.

              %{ %[ %(
                     Reserved for future use.

              A  `%'  character  followed by any other character is discarded, but the other character is printed (don't rely on
              this, as further format characters may be introduced).  A `%' at the end of the format argument  causes  undefined
              behaviour  since there is no following character.  In some locales, it may hide your door keys, while in others it
              may remove the final page from the novel you are reading.

              The %m and %d directives support the # , 0 and + flags, but the other directives do not, even if they  print  num‐
              bers.   Numeric  directives  that  do not support these flags include G, U, b, D, k and n.  The `-' format flag is
              supported and changes the alignment of a field from right-justified (which is the default) to left-justified.

              See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -prune True; if the file is a directory, do not descend into it.  If -depth is given, false; no effect.  Because  -delete
              implies -depth, you cannot usefully use -prune and -delete together.

       -quit  Exit  immediately.   No child processes will be left running, but no more paths specified on the command line will
              be processed.  For example, find /tmp/foo /tmp/bar -print -quit will print only /tmp/foo.  Any command lines which
              have  been  built up with -execdir ... {} + will be invoked before find exits.   The exit status may or may not be
              zero, depending on whether an error has already occurred.

   OPERATORS
       Listed in order of decreasing precedence:

       ( expr )
              Force precedence.  Since parentheses are special to the shell, you will normally need to quote them.  Many of  the
              examples in this manual page use backslashes for this purpose: `\(...\)' instead of `(...)'.

       ! expr True if expr is false.  This character will also usually need protection from interpretation by the shell.

       -not expr
              Same as ! expr, but not POSIX compliant.

       expr1 expr2
              Two expressions in a row are taken to be joined with an implied "and"; expr2 is not evaluated if expr1 is false.

       expr1 -a expr2
              Same as expr1 expr2.

       expr1 -and expr2
              Same as expr1 expr2, but not POSIX compliant.

       expr1 -o expr2
              Or; expr2 is not evaluated if expr1 is true.

       expr1 -or expr2
              Same as expr1 -o expr2, but not POSIX compliant.

       expr1 , expr2
              List;  both  expr1  and expr2 are always evaluated.  The value of expr1 is discarded; the value of the list is the
              value of expr2.  The comma operator can be useful for searching for several different types of thing, but travers‐
              ing  the  filesystem  hierarchy only once.  The -fprintf action can be used to list the various matched items into
              several different output files.

UNUSUAL FILENAMES
       Many of the actions of find result in the printing of data which is under the control of other users.  This includes file
       names,  sizes,  modification times and so forth.  File names are a potential problem since they can contain any character
       except `\0' and `/'.  Unusual characters in file names can do unexpected and often undesirable things  to  your  terminal
       (for example, changing the settings of your function keys on some terminals).  Unusual characters are handled differently
       by various actions, as described below.

       -print0, -fprint0
              Always print the exact filename, unchanged, even if the output is going to a terminal.

       -ls, -fls
              Unusual characters are always escaped.  White space, backslash, and double quote characters are printed  using  C-
              style  escaping  (for  example  `\f',  `\"').   Other unusual characters are printed using an octal escape.  Other
              printable characters (for -ls and -fls these are the characters between octal 041 and 0176) are printed as-is.

       -printf, -fprintf
              If the output is not going to a terminal, it is printed as-is.  Otherwise, the result depends on  which  directive
              is  in  use.  The directives %D, %F, %g, %G, %H, %Y, and %y expand to values which are not under control of files'
              owners, and so are printed as-is.  The directives %a, %b, %c, %d, %i, %k, %m, %M, %n, %s, %t, %u and %U have  val‐
              ues  which are under the control of files' owners but which cannot be used to send arbitrary data to the terminal,
              and so these are printed as-is.  The directives %f, %h, %l, %p and %P are quoted.  This quoting  is  performed  in
              the  same way as for GNU ls.  This is not the same quoting mechanism as the one used for -ls and -fls.  If you are
              able to decide what format to use for the output of find then it is normally better to use `\0'  as  a  terminator
              than  to use newline, as file names can contain white space and newline characters.  The setting of the `LC_CTYPE'
              environment variable is used to determine which characters need to be quoted.

       -print, -fprint
              Quoting is handled in the same way as for -printf and -fprintf.  If you are using find in a script or in a  situa‐
              tion where the matched files might have arbitrary names, you should consider using -print0 instead of -print.

       The -ok and -okdir actions print the current filename as-is.  This may change in a future release.

STANDARDS CONFORMANCE
       For  closest  compliance  to  the POSIX standard, you should set the POSIXLY_CORRECT environment variable.  The following
       options are specified in the POSIX standard (IEEE Std 1003.1, 2003 Edition):

       -H     This option is supported.

       -L     This option is supported.

       -name  This option is supported, but POSIX conformance depends on  the  POSIX  conformance  of  the  system's  fnmatch(3)
              library function.  As of findutils-4.2.2, shell metacharacters (`*', `?' or `[]' for example) will match a leading
              `.', because IEEE PASC interpretation 126 requires this.   This is a change from previous versions of findutils.

       -type  Supported.   POSIX specifies `b', `c', `d', `l', `p', `f' and `s'.  GNU find also  supports  `D',  representing  a
              Door, where the OS provides these.

       -ok    Supported.   Interpretation  of  the  response is according to the "yes" and "no" patterns selected by setting the
              `LC_MESSAGES' environment variable.  When the `POSIXLY_CORRECT' environment variable is set,  these  patterns  are
              taken  system's  definition  of  a  positive  (yes) or negative (no) response.  See the system's documentation for
              nl_langinfo(3), in particular YESEXPR and NOEXPR.    When `POSIXLY_CORRECT' is not set, the patterns  are  instead
              taken from find's own message catalogue.

       -newer Supported.   If  the file specified is a symbolic link, it is always dereferenced.  This is a change from previous
              behaviour, which used to take the relevant time from the symbolic link; see the HISTORY section below.

       -perm  Supported.  If the POSIXLY_CORRECT environment variable is not set, some mode arguments (for example  +a+x)  which
              are not valid in POSIX are supported for backward-compatibility.

       Other predicates
              The predicates -atime, -ctime, -depth, -group, -links, -mtime, -nogroup, -nouser, -print, -prune, -size, -user and
              -xdev `-atime', `-ctime', `-depth',  `-group',  `-links',  `-mtime',  `-nogroup',  `-nouser',  `-perm',  `-print',
              `-prune', `-size', `-user' and `-xdev', are all supported.

       The POSIX standard specifies parentheses `(', `)', negation `!' and the `and' and `or' operators ( -a, -o).

       All  other  options, predicates, expressions and so forth are extensions beyond the POSIX standard.  Many of these exten‐
       sions are not unique to GNU find, however.

       The POSIX standard requires that find detects loops:

              The find utility shall detect infinite loops; that is, entering a previously visited directory that is an ancestor
              of the last file encountered.  When it detects an infinite loop, find shall write a diagnostic message to standard
              error and shall either recover its position in the hierarchy or terminate.

       GNU find complies with these requirements.  The link count of directories which contain entries which are hard  links  to
       an  ancestor will often be lower than they otherwise should be.  This can mean that GNU find will sometimes optimise away
       the visiting of a subdirectory which is actually a link to an ancestor.  Since find does not actually enter such a subdi‐
       rectory,  it is allowed to avoid emitting a diagnostic message.  Although this behaviour may be somewhat confusing, it is
       unlikely that anybody actually depends on this behaviour.  If the leaf optimisation has been turned off with -noleaf, the
       directory  entry  will  always  be  examined and the diagnostic message will be issued where it is appropriate.  Symbolic
       links cannot be used to create filesystem cycles as such, but if the -L option or the -follow option is in use,  a  diag‐
       nostic  message  is  issued when find encounters a loop of symbolic links.  As with loops containing hard links, the leaf
       optimisation will often mean that find knows that it doesn't need to call stat() or chdir() on the symbolic link, so this
       diagnostic is frequently not necessary.

       The  -d  option  is  supported  for compatibility with various BSD systems, but you should use the POSIX-compliant option
       -depth instead.

       The POSIXLY_CORRECT environment variable does not affect the behaviour of the -regex or -iregex tests because those tests
       aren't specified in the POSIX standard.

ENVIRONMENT VARIABLES
       LANG   Provides a default value for the internationalization variables that are unset or null.

       LC_ALL If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_COLLATE
              The  POSIX  standard  specifies  that  this variable affects the pattern matching to be used for the -name option.
              GNU find uses the fnmatch(3) library function, and so support for `LC_COLLATE'  depends  on  the  system  library.
              This variable also affects the interpretation of the response to -ok; while the `LC_MESSAGES' variable selects the
              actual pattern used to interpret the response to -ok, the interpretation of any bracket expressions in the pattern
              will be affected by `LC_COLLATE'.

       LC_CTYPE
              This variable affects the treatment of character classes used in regular expressions and also with the -name test,
              if the system's fnmatch(3) library function supports this.  This variable also affects the interpretation  of  any
              character  classes  in  the  regular  expressions used to interpret the response to the prompt issued by -ok.  The
              `LC_CTYPE' environment variable will also affect which characters are considered to be unprintable when  filenames
              are printed; see the section UNUSUAL FILENAMES.

       LC_MESSAGES
              Determines the locale to be used for internationalised messages.  If the `POSIXLY_CORRECT' environment variable is
              set, this also determines the interpretation of the response to the prompt made by the -ok action.

       NLSPATH
              Determines the location of the internationalisation message catalogues.

       PATH   Affects the directories which are searched to find the executables invoked by -exec, -execdir, -ok and -okdir.

       POSIXLY_CORRECT
              Determines the block size used by -ls and -fls.  If POSIXLY_CORRECT is set, blocks are units of 512 bytes.  Other‐
              wise they are units of 1024 bytes.

              Setting  this  variable  also  turns  off  warning  messages  (that is, implies -nowarn) by default, because POSIX
              requires that apart from the output for -ok, all messages printed on stderr are diagnostics and must result  in  a
              non-zero exit status.

              When  POSIXLY_CORRECT is not set, -perm +zzz is treated just like -perm /zzz if +zzz is not a valid symbolic mode.
              When POSIXLY_CORRECT is set, such constructs are treated as an error.

              When POSIXLY_CORRECT is set, the response to the prompt made by the -ok action is  interpreted  according  to  the
              system's message catalogue, as opposed to according to find's own message translations.

       TZ     Affects the time zone used for some of the time-related format directives of -printf and -fprintf.

EXAMPLES
       find /tmp -name core -type f -print | xargs /bin/rm -f

       Find  files named core in or below the directory /tmp and delete them.  Note that this will work incorrectly if there are
       any filenames containing newlines, single or double quotes, or spaces.

       find /tmp -name core -type f -print0 | xargs -0 /bin/rm -f

       Find files named core in or below the directory /tmp and delete them, processing filenames in such a  way  that  file  or
       directory  names  containing  single  or  double  quotes, spaces or newlines are correctly handled.  The -name test comes
       before the -type test in order to avoid having to call stat(2) on every file.

       find . -type f -exec file '{}' \;

       Runs `file' on every file in or below the current directory.  Notice that the braces are enclosed in single  quote  marks
       to  protect  them  from interpretation as shell script punctuation.  The semicolon is similarly protected by the use of a
       backslash, though single quotes could have been used in that case also.

       find / \( -perm -4000 -fprintf /root/suid.txt '%#m %u %p\n' \) , \
       \( -size +100M -fprintf /root/big.txt '%-10s %p\n' \)

       Traverse the filesystem just once, listing setuid  files  and  directories  into  /root/suid.txt  and  large  files  into
       /root/big.txt.

       find $HOME -mtime 0

       Search  for files in your home directory which have been modified in the last twenty-four hours.  This command works this
       way because the time since each file was last modified is divided by 24 hours and any remainder is discarded.  That means
       that to match -mtime 0, a file will have to have a modification in the past which is less than 24 hours ago.

       find /sbin /usr/sbin -executable \! -readable -print

       Search for files which are executable but not readable.

       find . -perm 664

       Search  for files which have read and write permission for their owner, and group, but which other users can read but not
       write to.  Files which meet these criteria but have other permissions bits set (for example if someone  can  execute  the
       file) will not be matched.

       find . -perm -664

       Search  for files which have read and write permission for their owner and group, and which other users can read, without
       regard to the presence of any extra permission bits (for example the executable bit).  This will match a file  which  has
       mode 0777, for example.

       find . -perm /222

       Search for files which are writable by somebody (their owner, or their group, or anybody else).

       find . -perm /220
       find . -perm /u+w,g+w
       find . -perm /u=w,g=w

       All  three of these commands do the same thing, but the first one uses the octal representation of the file mode, and the
       other two use the symbolic form.  These commands all search for files which are writable by either their owner  or  their
       group.  The files don't have to be writable by both the owner and group to be matched; either will do.

       find . -perm -220
       find . -perm -g+w,u+w

       Both these commands do the same thing; search for files which are writable by both their owner and their group.

       find . -perm -444 -perm /222 ! -perm /111
       find . -perm -a+r -perm /a+w ! -perm /a+x

       These  two  commands both search for files that are readable for everybody ( -perm -444 or -perm -a+r), have at least one
       write bit set ( -perm /222 or -perm /a+w) but are not executable for anybody ( ! -perm /111  and  !  -perm  /a+x  respec‐
       tively).

       cd /source-dir
       find . -name .snapshot -prune -o \( \! -name *~ -print0 \)|
       cpio -pmd0 /dest-dir

       This  command  copies the contents of /source-dir to /dest-dir, but omits files and directories named .snapshot (and any‐
       thing in them).  It also omits files or directories whose name ends in ~, but not their contents.  The  construct  -prune
       -o  \( ... -print0 \) is quite common.  The idea here is that the expression before -prune matches things which are to be
       pruned.  However, the -prune action itself returns true, so the following -o ensures that the right hand side  is  evalu‐
       ated  only for those directories which didn't get pruned (the contents of the pruned directories are not even visited, so
       their contents are irrelevant).  The expression on the right hand side of the -o is in parentheses only for clarity.   It
       emphasises  that  the  -print0  action  takes place only for things that didn't have -prune applied to them.  Because the
       default `and' condition between tests binds more tightly than -o, this is the default anyway, but the parentheses help to
       show what is going on.

       find repo/ -exec test -d {}/.svn \; -or \
       -exec test -d {}/.git \; -or -exec test -d {}/CVS \; \
       -print -prune

       Given  the  following  directory  of  projects  and their associated SCM administrative directories, perform an efficient
       search for the projects' roots:

       repo/project1/CVS
       repo/gnu/project2/.svn
       repo/gnu/project3/.svn
       repo/gnu/project3/src/.svn
       repo/project4/.git

       In this example, -prune prevents unnecessary descent into directories that have already been discovered (for  example  we
       do  not  search  project3/src  because  we  already  found  project3/.svn), but ensures sibling directories (project2 and
       project3) are found.

EXIT STATUS
       find exits with status 0 if all files are processed successfully, greater than 0 if errors occur.   This is  deliberately
       a  very  broad description, but if the return value is non-zero, you should not rely on the correctness of the results of
       find.

       When some error occurs, find may stop immediately, without completing all  the  actions  specified.   For  example,  some
       starting  points  may  not have been examined or some pending program invocations for -exec ... {} + or -execdir ... {} +
       may not have been performed.

SEE ALSO
       locate(1), locatedb(5), updatedb(1), xargs(1), chmod(1), fnmatch(3), regex(7), stat(2), lstat(2), ls(1), printf(3), strf‐
       time(3), ctime(3)

       The  full documentation for find is maintained as a Texinfo manual.  If the info and find programs are properly installed
       at your site, the command info find should give you access to the complete manual.

HISTORY
       As of findutils-4.2.2, shell metacharacters (`*', `?' or `[]' for example) used in filename patterns will match a leading
       `.', because IEEE POSIX interpretation 126 requires this.

       As of findutils-4.3.3, -perm /000 now matches all files instead of none.

       Nanosecond-resolution timestamps were implemented in findutils-4.3.3.

       As  of findutils-4.3.11, the -delete action sets find's exit status to a nonzero value when it fails.  However, find will
       not exit immediately.  Previously, find's exit status was unaffected by the failure of -delete.

       Feature                Added in   Also occurs in
       -newerXY               4.3.3      BSD
       -D                     4.3.1
       -O                     4.3.1
       -readable              4.3.0
       -writable              4.3.0
       -executable            4.3.0
       -regextype             4.2.24
       -exec ... +            4.2.12     POSIX
       -execdir               4.2.12     BSD
       -okdir                 4.2.12
       -samefile              4.2.11
       -H                     4.2.5      POSIX
       -L                     4.2.5      POSIX
       -P                     4.2.5      BSD
       -delete                4.2.3
       -quit                  4.2.3
       -d                     4.2.3      BSD
       -wholename             4.2.0
       -iwholename            4.2.0
       -ignore_readdir_race   4.2.0
       -fls                   4.0
       -ilname                3.8
       -iname                 3.8
       -ipath                 3.8
       -iregex                3.8

       The syntax -perm +MODE was removed in findutils-4.5.12, in favour of -perm /MODE.  The +MODE syntax had  been  deprecated
       since findutils-4.2.21 which was released in 2005.

NON-BUGS
       $ find . -name *.c -print
       find: paths must precede expression
       Usage: find [-H] [-L] [-P] [-Olevel] [-D help|tree|search|stat|rates|opt|exec] [path...] [expression]

       This happens because *.c has been expanded by the shell resulting in find actually receiving a command line like this:

       find . -name bigram.c code.c frcode.c locate.c -print

       That  command is of course not going to work.  Instead of doing things this way, you should enclose the pattern in quotes
       or escape the wildcard:
       $ find . -name '*.c' -print
       $ find . -name \*.c -print

BUGS
       There are security problems inherent in the behaviour that the POSIX standard specifies for find, which therefore  cannot
       be fixed.  For example, the -exec action is inherently insecure, and -execdir should be used instead.  Please see Finding
       Files for more information.

       The environment variable LC_COLLATE has no effect on the -ok action.

       The best way to report a bug is to use the form at http://savannah.gnu.org/bugs/?group=findutils.  The reason for this is
       that  you  will then be able to track progress in fixing the problem.   Other comments about find(1) and about the findu‐
       tils package in general can be sent to the bug-findutils mailing list.  To  join  the  list,  send  email  to  bug-findu‐
       tils-request@gnu.org.

                                                                                                                         FIND(1)
FOLD(1)                                                   User Commands                                                  FOLD(1)

NAME
       fold - wrap each input line to fit in specified width

SYNOPSIS
       fold [OPTION]... [FILE]...

DESCRIPTION
       Wrap input lines in each FILE, writing to standard output.

       With no FILE, or when FILE is -, read standard input.

       Mandatory arguments to long options are mandatory for short options too.

       -b, --bytes
              count bytes rather than columns

       -s, --spaces
              break at spaces

       -w, --width=WIDTH
              use WIDTH columns instead of 80

       --help display this help and exit

       --version
              output version information and exit

AUTHOR
       Written by David MacKenzie.

<!-- 30b0cf8a-458a-435b-a2e0-993472636e53 <=< ACCEPT -->REPORTING BUGS
       GNU coreutils online help: &amp;lt;http://www.gnu.org/software/coreutils/&amp;gt;
       Report fold translation bugs to &amp;lt;http://translationproject.org/team/&amp;gt;

COPYRIGHT
       Copyright    ©    2016   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3   or   later
       &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.<!-- ACCEPT >=> 30b0cf8a-458a-435b-a2e0-993472636e53 -->

SEE ALSO
       Full documentation at: &amp;lt;http://www.gnu.org/software/coreutils/fold&amp;gt;
       or available locally via: info '(coreutils) fold invocation'

GNU coreutils 8.26                                        November 2016                                                  FOLD(1)
FORT77(1P)                                          POSIX Programmer's Manual                                         FORT77(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->

NAME
       fort77 — FORTRAN compiler (FORTRAN)

SYNOPSIS
       fort77 [−c] [−g] [−L directory]... [−O optlevel] [−o outfile] [−s]
           [−w] operand...

DESCRIPTION
       The  fort77  utility  is  the  interface  to the FORTRAN compilation system; it shall accept the full FORTRAN-77 language
       defined by the ANSI X3.9‐1978 standard. The system conceptually consists of a compiler and link editor. The files  refer‐
       enced  by  operands  are  compiled and linked to produce an executable file. It is unspecified whether the linking occurs
       entirely within the operation of fort77; some implementations may produce objects that are not fully resolved  until  the
       file is executed.

       If the −c option is present, for all pathname operands of the form file.f, the files:

           $(basename pathname.f).o

       shall be created or overwritten as the result of successful compilation. If the −c option is not specified, it is unspec‐
       ified whether such .o files are created or deleted for the file.f operands.

       If there are no options that prevent link editing (such as −c) and all operands  compile  and  link  without  error,  the
       resulting  executable  file shall be written into the file named by the −o option (if present) or to the file a.out.  The
       executable file shall be created as specified in the System Interfaces volume of POSIX.1‐2008, except that the file  per‐
       missions shall be set to: S_IRWXO | S_IRWXG | S_IRWXU

       and that the bits specified by the umask of the process shall be cleared.

OPTIONS
       The fort77 utility shall conform to the Base Definitions volume of POSIX.1‐2008, Section 12.2, Utility Syntax Guidelines,
       except that:

        *  The −l library operands have the format of options, but their position within a list of operands affects the order in
           which libraries are searched.

        *  The order of specifying the multiple −L options is significant.

        *  Conforming  applications  shall  specify  each option separately; that is, grouping option letters (for example, −cg)
           need not be recognized by all implementations.

       The following options shall be supported:

       −c        Suppress the link-edit phase of the compilation, and do not remove any object files that are produced.

       −g        Produce symbolic information in the object or executable files; the nature of this information is  unspecified,
                 and may be modified by implementation-defined interactions with other options.

       −s        Produce  object or executable files, or both, from which symbolic and other information not required for proper
                 execution using the exec family of functions defined in the System Interfaces volume of POSIX.1‐2008  has  been
                 removed (stripped).  If both −g and −s options are present, the action taken is unspecified.

       −o outfile
                 Use  the  pathname outfile, instead of the default a.out, for the executable file produced. If the −o option is
                 present with −c, the result is unspecified.

       −L directory
                 Change the algorithm of searching for the libraries named in −l operands to look in the directory named by  the
                 directory pathname before looking in the usual places. Directories named in −L options shall be searched in the
                 specified order. At least ten instances of this option shall be supported in a single  fort77  command  invoca‐
                 tion. If a directory specified by a −L option contains a file named libf.a, the results are unspecified.

       −O optlevel
                 Specify  the  level  of  code  optimization. If the optlevel option-argument is the digit '0', all special code
                 optimizations shall be disabled. If it is the digit '1', the nature of the optimization is unspecified. If  the
                 −O option is omitted, the nature of the system's default optimization is unspecified. It is unspecified whether
                 code generated in the presence of the −O 0 option is the same as that  generated  when  −O  is  omitted.  Other
                 optlevel values may be supported.

       −w        Suppress warnings.

       Multiple instances of −L options can be specified.

OPERANDS
       An  operand  is either in the form of a pathname or the form −l library.  At least one operand of the pathname form shall
       be specified. The following operands shall be supported:

       file.f    The pathname of a FORTRAN source file to be compiled and optionally passed to the link editor. The filename op‐
                 erand shall be of this form if the −c option is used.

       file.a    A library of object files typically produced by ar, and passed directly to the link editor. Implementations may
                 recognize implementation-defined suffixes other than .a as denoting object file libraries.

       file.o    An object file produced by fort77 −c and passed directly to the  link  editor.  Implementations  may  recognize
                 implementation-defined suffixes other than .o as denoting object files.

       The processing of other files is implementation-defined.

       −l library
                 (The letter ell.) Search the library named:

                     liblibrary.a

                 A  library  is  searched when its name is encountered, so the placement of a −l operand is significant. Several
                 standard libraries can be specified in this manner, as described in the EXTENDED DESCRIPTION  section.   Imple‐
                 mentations may recognize implementation-defined suffixes other than .a as denoting libraries.

STDIN
       Not used.

<!-- 28219fd0-cd47-42f7-b894-82913d24537b <=< ACCEPT -->INPUT FILES
       The  input  file  shall be one of the following: a text file containing FORTRAN source code; an object file in the format
       produced by fort77 −c; or a library of object files, in the format produced by archiving zero or more object files, using
       ar.   Implementations  may  supply  additional  utilities that produce files in these formats. Additional input files are
       implementation-defined.<!-- ACCEPT >=> 28219fd0-cd47-42f7-b894-82913d24537b -->

       A &amp;lt;tab&amp;gt; encountered within the first six characters on a line of source code shall cause the compiler  to  interpret  the
       following character as if it were the seventh character on the line (that is, in column 7).

<!-- 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 <=< ACCEPT -->ENVIRONMENT VARIABLES
       The following environment variables shall affect the execution of fort77:

       LANG      Provide  a  default  value for the internationalization variables that are unset or null. (See the Base Defini‐
                 tions volume of POSIX.1‐2008, Section 8.2, Internationalization Variables for the precedence of  international‐
                 ization variables used to determine the values of locale categories.)

       LC_ALL    If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_CTYPE  Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, sin‐
                 gle-byte as opposed to multi-byte characters in arguments and input files).

       LC_MESSAGES
                 Determine the locale that should be used to affect the format and contents of diagnostic  messages  written  to
                 standard error.

       NLSPATH   Determine the location of message catalogs for the processing of LC_MESSAGES.<!-- ACCEPT >=> 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 -->

       TMPDIR    Determine the pathname that should override the default directory for temporary files, if any.

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       Not used.

STDERR
       The  standard  error shall be used only for diagnostic messages.  If more than one file operand ending in .f (or possibly
       other unspecified suffixes) is given, for each such file:

           "%s:\n", &amp;lt;file&amp;gt;

       may be written to allow identification of the diagnostic message with the appropriate input file.

       This utility may produce warning messages about certain conditions that do not warrant returning an error (non-zero) exit
       value.

OUTPUT FILES
       Object files, listing files, and executable files shall be produced in unspecified formats.

EXTENDED DESCRIPTION
   Standard Libraries
       The fort77 utility shall recognize the following −l operand for the standard library:

       −l f      This  library  contains  all  functions  referenced  in  the ANSI X3.9‐1978 standard. This operand shall not be
                 required to be present to cause a search of this library.

       In the absence of options that inhibit invocation of the link editor, such as −c, the  fort77  utility  shall  cause  the
       equivalent  of a −l f operand to be passed to the link editor as the last −l operand, causing it to be searched after all
       other object files and libraries are loaded.

       It is unspecified whether the library libf.a exists as a regular file. The implementation may accept as −l operands names
       of objects that do not exist as regular files.

   External Symbols
       The  FORTRAN  compiler  and  link editor shall support the significance of external symbols up to a length of at least 31
       bytes; case folding is permitted. The action taken upon encountering symbols exceeding the implementation-defined maximum
       symbol length is unspecified.

       The  compiler and link editor shall support a minimum of 511 external symbols per source or object file, and a minimum of
       4095 external symbols total. A diagnostic message is written to standard output if the  implementation-defined  limit  is
       exceeded; other actions are unspecified.

<!-- a42f9355-e63b-4205-ac0b-0b19b24faf9d <=< ACCEPT -->EXIT STATUS
       The following exit values shall be returned:

        0    Successful compilation or link edit.

       &amp;gt;0    An error occurred.<!-- ACCEPT >=> a42f9355-e63b-4205-ac0b-0b19b24faf9d -->

CONSEQUENCES OF ERRORS
       When  fort77  encounters a compilation error, it shall write a diagnostic to standard error and continue to compile other
       source code operands. It shall return a non-zero exit status, but it is implementation-defined whether an  object  module
       is  created.  If the link edit is unsuccessful, a diagnostic message shall be written to standard error, and fort77 shall
       exit with a non-zero status.

       The following sections are informative.

APPLICATION USAGE
       None.

EXAMPLES
       The following usage example compiles xyz.f and creates the executable file foo:

           fort77 −o foo xyz.f

       The following example compiles xyz.f and creates the object file xyz.o:

           fort77 −c xyz.f

       The following example compiles xyz.f and creates the executable file a.out:

           fort77 xyz.f

       The following example compiles xyz.f, links it with b.o, and creates the executable a.out:

           fort77 xyz.f b.o

RATIONALE
       The name of this utility was chosen as fort77 to parallel the renaming of the C compiler. The name f77 was not chosen  to
       avoid problems with historical implementations. The ANSI X3.9‐1978 standard was selected as a normative reference because
       the ISO/IEC version of FORTRAN-77 has been superseded by the ISO/IEC 1539:1991 standard.

       The file inclusion and symbol definition #define mechanisms used by the c99 utility were not included in this  volume  of
       POSIX.1‐2008—even  though they are commonly implemented—since there is no requirement that the FORTRAN compiler use the C
       preprocessor.

       The −onetrip option was not included in this volume of POSIX.1‐2008, even though many historical  compilers  support  it,
       because it is derived from FORTRAN-66; it is an anachronism that should not be perpetuated.

       Some  implementations  produce  compilation  listings. This aspect of FORTRAN has been left unspecified because there was
       controversy concerning the various methods proposed for implementing it: a −V option overlapped  with  historical  vendor
       practice and a naming convention of creating files with .l suffixes collided with historical lex file naming practice.

       There  is  no  −I  option  in  this  version of this volume of POSIX.1‐2008 to specify a directory for file inclusion. An
       INCLUDE directive has been a part of the Fortran-90 discussions, but an interface supporting that standard is not in  the
       current scope.

       It  is noted that many FORTRAN compilers produce an object module even when compilation errors occur; during a subsequent
       compilation, the compiler may patch the object module rather than recompiling all the code. Consequently, it is  left  to
       the implementor whether or not an object file is created.

       A  reference  to  MIL-STD-1753 was removed from an early proposal in response to a request from the POSIX FORTRAN-binding
       standard developers. It was not the intention of the standard developers to require certification  of  the  FORTRAN  com‐
       piler,  and  IEEE Std 1003.9‐1992  does not specify the military standard or any special preprocessing requirements. Fur‐
       thermore, use of that document would have been inappropriate for an international standard.

       The specification of optimization has been subject to changes through early proposals. At one time, −O and −N were  Bool‐
       eans: optimize and do not optimize (with an unspecified default). Some historical practice led this to be changed to:

       −O 0      No optimization.

       −O 1      Some level of optimization.

       −O n      Other, unspecified levels of optimization.

       It  is not always clear whether ``good code generation'' is the same thing as optimization. Simple optimizations of local
       actions do not usually affect the semantics of a program. The −O 0 option has been included to accommodate the very  par‐
       ticular  nature of scientific calculations in a highly optimized environment; compilers make errors. Some degree of opti‐
       mization is expected, even if it is not documented here, and the ability to shut it off  completely  could  be  important
       when  porting  an application. An implementation may treat −O 0 as ``do less than normal'' if it wishes, but this is only
       meaningful if any of the operations it performs can affect the semantics of a program. It  is  highly  dependent  on  the
       implementation  whether doing less than normal is logical. It is not the intent of the −O 0 option to ask for inefficient
       code generation, but rather to assure that any semantically visible optimization is suppressed.

       The specification of standard library access is consistent with the C compiler  specification.  Implementations  are  not
       required to have /usr/lib/libf.a, as many historical implementations do, but if not they are required to recognize f as a
       token.

       External symbol size limits are in normative text; conforming applications need to know these limits. However, the  mini‐
       mum maximum symbol length should be taken as a constraint on a conforming application, not on an implementation, and con‐
       sequently the action taken for a symbol exceeding the limit is unspecified. The minimum size for the external symbol  ta‐
       ble was added for similar reasons.

       The  CONSEQUENCES  OF  ERRORS section clearly specifies the behavior of the compiler when compilation or link-edit errors
       occur. The behavior of several historical implementations was examined, and the choice was made to be silent on the  sta‐
       tus  of  the executable, or a.out, file in the face of compiler or linker errors. If a linker writes the executable file,
       then links it on disk with lseek()s and write()s, the partially linked executable file can be left on disk and  its  exe‐
       cute  bits turned off if the link edit fails. However, if the linker links the image in memory before writing the file to
       disk, it need not touch the executable file (if it already exists) because the link edit fails. Since both approaches are
       historical  practice,  a  conforming application shall rely on the exit status of fort77, rather than on the existence or
       mode of the executable file.

       The −g and −s options are not specified as mutually-exclusive. Historically, these two options have been  mutually-exclu‐
       sive, but because both are so loosely specified, it seemed appropriate to leave their interaction unspecified.

       The requirement that conforming applications specify compiler options separately is to reserve the multi-character option
       name space for vendor-specific compiler options, which are known to exist in many historical implementations. Implementa‐
       tions are not required to recognize, for example, −gc as if it were −g −c; nor are they forbidden from doing so. The SYN‐
       OPSIS shows all of the options separately to highlight this requirement on applications.

       Echoing filenames to standard error is considered a diagnostic message because it would otherwise be difficult  to  asso‐
       ciate  an error message with the erring file. They are described with ``may'' to allow implementations to use other meth‐
       ods of identifying files and to parallel the description in c99.

FUTURE DIRECTIONS
       A compilation system based on the ISO/IEC 1539:1991 standard may be considered for a future version; it may have  a  dif‐
       ferent utility name from fort77.

SEE ALSO
       ar, asa, c99, umask

       The Base Definitions volume of POSIX.1‐2008, Chapter 8, Environment Variables, Section 12.2, Utility Syntax Guidelines

       The System Interfaces volume of POSIX.1‐2008, exec

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions  of  this  text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013 Edition, Standard for
       Information Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7,  Copy‐
       right  (C)  2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This is POSIX.1-2008
       with the 2013 Technical Corrigendum 1 applied.) In the event of any discrepancy between this  version  and  the  original
       IEEE  and  The  Open  Group Standard, the original IEEE and The Open Group Standard is the referee document. The original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any typographical or formatting errors that appear in this page are most likely to have been introduced during  the  con‐
       version  of  the source files to man page format. To report such errors, see https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                    FORT77(1P)
FUSER(1)                                                  User Commands                                                 FUSER(1)

NAME
       fuser - identify processes using files or sockets

SYNOPSIS
       fuser [-fuv] [-a|-s] [-4|-6] [-c|-m|-n space] [ -k [-i] [-M] [-w] [-SIGNAL] ] name ...
       fuser -l
       fuser -V

DESCRIPTION
       fuser  displays  the PIDs of processes using the specified files or file systems.  In the default display mode, each file
       name is followed by a letter denoting the type of access:

              c      current directory.
              e      executable being run.
              f      open file.  f is omitted in default display mode.
              F      open file for writing.  F is omitted in default display mode.
              r      root directory.
              m      mmap'ed file or shared library.

       fuser returns a non-zero return code if none of the specified files is accessed or in case of a fatal error.  If at least
       one access has been found, fuser returns zero.

       In  order  to  look  up  processes using TCP and UDP sockets, the corresponding name space has to be selected with the -n
       option. By default fuser will look in both IPv6 and IPv4 sockets.  To change the default, behavior, use  the  -4  and  -6
       options.   The socket(s) can be specified by the local and remote port, and the remote address.  All fields are optional,
       but commas in front of missing fields must be present:

       [lcl_port][,[rmt_host][,[rmt_port]]]

       Either symbolic or numeric values can be used for IP addresses and port numbers.

       fuser outputs only the PIDs to stdout, everything else is sent to stderr.

OPTIONS
       -a, --all
              Show all files specified on the command line.  By default, only files that are accessed by at  least  one  process
              are shown.

       -c     Same as -m option, used for POSIX compatibility.

       -f     Silently ignored, used for POSIX compatibility.

       -k, --kill
              Kill  processes  accessing  the file.  Unless changed with -SIGNAL, SIGKILL is sent.  An fuser process never kills
              itself, but may kill other fuser processes.  The effective user ID of the process executing fuser is  set  to  its
              real user ID before attempting to kill.

       -i, --interactive
              Ask the user for confirmation before killing a process. This option is silently ignored if -k is not present too.

       -l, --list-signals
              List all known signal names.

       -m NAME, --mount NAME
              NAME  specifies  a file on a mounted file system or a block device that is mounted.  All processes accessing files
              on that file system are listed.  If a directory file is specified, it is automatically changed to NAME/.   to  use
              any file system that might be mounted on that directory.

       -M, --ismountpoint
              Request  will be fulfilled only if NAME specifies a mountpoint.  This is an invaluable seatbelt which prevents you
              from killing the machine if NAME happens to not be a filesystem.

       -w     Kill only processes which have write access.  This option is silently ignored if -k is not present too.

       -n SPACE, --namespace SPACE
              Select a different name space.  The name spaces file (file names, the default), udp (local  UDP  ports),  and  tcp
              (local  TCP  ports)  are  supported.  For ports, either the port number or the symbolic name can be specified.  If
              there is no ambiguity, the shortcut notation name/space (e.g. 80/tcp) can be used.

       -s, --silent
              Silent operation.  -u and -v are ignored in this mode.  -a must not be used with -s.

       -SIGNAL
              Use the specified signal instead of SIGKILL when killing processes.  Signals can be specified either by name (e.g.
              -HUP)orby number (e.g.  -1).  This option is silently ignored if the -k option is not used.

       -u, --user
              Append the user name of the process owner to each PID.

       -v, --verbose

              Verbose  mode.   Processes  are  shown  in  a  ps-like style.  The fields PID, USER and COMMAND are similar to ps.
              ACCESS shows how the process accesses the file.  Verbose mode will also show  when  a  particular  file  is  being
              access as a mount point, knfs export or swap file.  In this case kernel is shown instead of the PID.

       -V, --version
              Display version information.

       -4, --ipv4
              Search only for IPv4 sockets.  This option must not be used with the -6 option and only has an effect with the tcp
              and udp namespaces.

       -6, --ipv6
              Search only for IPv6 sockets.  This option must not be used with the -4 option and only has an effect with the tcp
              and udp namespaces.

       -      Reset all options and set the signal back to SIGKILL.

FILES
       /proc  location of the proc file system

EXAMPLES
       fuser -km /home
              kills all processes accessing the file system /home in any way.

       if fuser -s /dev/ttyS1; then :; else something; fi
              invokes something if no other process is using /dev/ttyS1.

       fuser telnet/tcp
              shows all processes at the (local) TELNET port.

RESTRICTIONS
       Processes accessing the same file or file system several times in the same way are only shown once.

       If the same object is specified several times on the command line, some of those entries may be ignored.

       fuser  may only be able to gather partial information unless run with privileges.  As a consequence, files opened by pro‐
       cesses belonging to other users may not be listed and executables may be classified as mapped only.

       Installing fuser SUID root will avoid problems associated with partial information, but may be undesirable  for  security
       and privacy reasons.

       udp and tcp name spaces, and UNIX domain sockets can't be searched with kernels older than 1.3.78.

       Accesses by the kernel are only shown with the -v option.

       The  -k option only works on processes.  If the user is the kernel, fuser will print an advice, but take no action beyond
       that.

BUGS
       fuser -m /dev/sgX will show (or kill with the -k flag) all processes, even if you  don't  have  that  device  configured.
       There may be other devices it does this for too.

       fuser  cannot report on any processes that it doesn't have permission to look at the file descriptor table for.  The most
       common time this problem occurs is when looking for TCP or UDP sockets when running fuser as a non-root  user.   In  this
       case fuser will report no access

       The  mount  -m  option will match any file within the save device as the specified file, use the -M option as well if you
       mean to specify only the mount point.

SEE ALSO
       kill(1), killall(1), lsof(8), pkill(1), ps(1), kill(2).

psmisc                                                     2012-07-28                                                   FUSER(1)
GENCAT(1P)                                          POSIX Programmer's Manual                                         GENCAT(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->

NAME
       gencat — generate a formatted message catalog

SYNOPSIS
       gencat catfile msgfile...

DESCRIPTION
       The  gencat  utility shall merge the message text source file msgfile into a formatted message catalog catfile.  The file
       catfile shall be created if it does not already exist. If catfile does exist, its messages shall be included in  the  new
       catfile.   If set and message numbers collide, the new message text defined in msgfile shall replace the old message text
       currently contained in catfile.

OPTIONS
       None.

OPERANDS
       The following operands shall be supported:

       catfile   A pathname of the formatted message catalog. If '−' is specified, standard output shall be used. The format  of
                 the message catalog produced is unspecified.

       msgfile   A  pathname of a message text source file. If '−' is specified for an instance of msgfile, standard input shall
                 be used. The format of message text source files is defined in the EXTENDED DESCRIPTION section.

STDIN
       The standard input shall not be used unless a msgfile operand is specified as '−'.

INPUT FILES
       The input files shall be text files.

<!-- 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 <=< ACCEPT -->ENVIRONMENT VARIABLES
       The following environment variables shall affect the execution of gencat:

       LANG      Provide a default value for the internationalization variables that are unset or null. (See  the  Base  Defini‐
                 tions  volume of POSIX.1‐2008, Section 8.2, Internationalization Variables for the precedence of international‐
                 ization variables used to determine the values of locale categories.)

       LC_ALL    If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_CTYPE  Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, sin‐
                 gle-byte as opposed to multi-byte characters in arguments and input files).

       LC_MESSAGES
                 Determine  the  locale  that should be used to affect the format and contents of diagnostic messages written to
                 standard error.

       NLSPATH   Determine the location of message catalogs for the processing of LC_MESSAGES.<!-- ACCEPT >=> 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 -->

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       The standard output shall not be used unless the catfile operand is specified as '−'.

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       The content of a message text file shall be in the format defined as follows. Note that the  fields  of  a  message  text
       source  line  are  separated by a single &amp;lt;blank&amp;gt; character. Any other &amp;lt;blank&amp;gt; characters are considered to be part of the
       subsequent field.

       $set n comment
                 This line specifies the set identifier of the following messages until the next $set  or  end-of-file  appears.
                 The  n  denotes  the  set identifier, which is defined as a number in the range [1, {NL_SETMAX}] (see the &amp;lt;lim‐
                 its.h&amp;gt; header defined in the Base Definitions volume of POSIX.1‐2008). The application shall  ensure  that  set
                 identifiers  are  presented  in  ascending  order  within a single source file, but need not be contiguous. Any
                 string following the set identifier shall be treated as a comment. If no $set directive is specified in a  mes‐
                 sage  text  source file, all messages shall be located in an implementation-defined default message set NL_SETD
                 (see the &amp;lt;nl_types.h&amp;gt; header defined in the Base Definitions volume of POSIX.1‐2008).

       $delset n comment
                 This line deletes message set n from an existing message catalog. The n denotes the  set  number  [1,  {NL_SET‐
                 MAX}].  Any string following the set number shall be treated as a comment.

       $ comment A line beginning with '$' followed by a &amp;lt;blank&amp;gt; shall be treated as a comment.

       m message-text
                 The m denotes the message identifier, which is defined as a number in the range [1, {NL_MSGMAX}] (see the &amp;lt;lim‐
                 its.h&amp;gt; header). The message-text shall be stored in the message catalog with the set  identifier  specified  by
                 the last $set directive, and with message identifier m.  If the message-text is empty, and a &amp;lt;blank&amp;gt; field sep‐
                 arator is present, an empty string shall be stored in the message catalog. If a message source line has a  mes‐
                 sage  number,  but  neither  a field separator nor message-text, the existing message with that number (if any)
                 shall be deleted from the catalog. The application shall ensure that message identifiers are in ascending order
                 within  a  single set, but need not be contiguous. The application shall ensure that the length of message-text
                 is in the range [0, {NL_TEXTMAX}] (see the &amp;lt;limits.h&amp;gt; header).

       $quote n  This line specifies an optional quote character c, which can be used to surround message-text so that  trailing
                 &amp;lt;space&amp;gt;  characters  or  null (empty) messages are visible in a message source line. By default, or if an empty
                 $quote directive is supplied, no quoting of message-text shall be recognized.

       Empty lines in a message text source file shall be ignored. The effects of lines starting with any character  other  than
       those defined above are implementation-defined.

       Text strings can contain the special characters and escape sequences defined in the following table:

                                                ┌──────────────────┬────────┬──────────┐
                                                │   Description    │ Symbol │ Sequence │
                                                ├──────────────────┼────────┼──────────┤
                                                │&amp;lt;newline&amp;gt;         │ NL(LF) │ \n       │
                                                │Horizontal-tab    │ HT     │ \t       │
                                                │&amp;lt;vertical-tab&amp;gt;    │ VT     │ \v       │
                                                │&amp;lt;backspace&amp;gt;       │ BS     │ \b       │
                                                │&amp;lt;carriage-return&amp;gt; │ CR     │ \r       │
                                                │&amp;lt;form-feed&amp;gt;       │ FF     │ \f       │
                                                │Backslash         │ \      │ \\       │
                                                │Bit pattern       │ ddd    │ \ddd     │
                                                └──────────────────┴────────┴──────────┘
       The  escape  sequence "\ddd" consists of &amp;lt;backslash&amp;gt; followed by one, two, or three octal digits, which shall be taken to
       specify the value of the desired character. If the character following a &amp;lt;backslash&amp;gt; is not one of those  specified,  the
       &amp;lt;backslash&amp;gt; shall be ignored.

       A  &amp;lt;backslash&amp;gt;  followed  by a &amp;lt;newline&amp;gt; is also used to continue a string on the following line. Thus, the following two
       lines describe a single message string:

           1 This line continues \
           to the next line

       which shall be equivalent to:

           1 This line continues to the next line

<!-- a42f9355-e63b-4205-ac0b-0b19b24faf9d <=< ACCEPT -->EXIT STATUS
       The following exit values shall be returned:

        0    Successful completion.

       &amp;gt;0    An error occurred.<!-- ACCEPT >=> a42f9355-e63b-4205-ac0b-0b19b24faf9d -->

CONSEQUENCES OF ERRORS
       Default.

       The following sections are informative.

APPLICATION USAGE
       Message catalogs produced by gencat are binary encoded, meaning that their portability cannot be guaranteed between  dif‐
       ferent  types  of  machine.  Thus, just as C programs need to be recompiled for each type of machine, so message catalogs
       must be recreated via gencat.

EXAMPLES
       None.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       iconv

       The Base Definitions volume of POSIX.1‐2008, Chapter 8, Environment Variables, &amp;lt;limits.h&amp;gt;, &amp;lt;nl_types.h&amp;gt;

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013  Edition,  Standard  for
       Information  Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7, Copy‐
       right (C) 2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This  is  POSIX.1-2008
       with  the  2013  Technical  Corrigendum 1 applied.) In the event of any discrepancy between this version and the original
       IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the  referee  document.  The  original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any  typographical  or formatting errors that appear in this page are most likely to have been introduced during the con‐
       version of the source files to man page format. To report such errors,  see  https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .
<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->
IEEE/The Open Group                                           2013                                                    GENCAT(1P)
GETCONF(1P)                                         POSIX Programmer's Manual                                        GETCONF(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->

NAME
       getconf — get configuration values

SYNOPSIS
       getconf [−v specification] system_var

       getconf [−v specification] path_var pathname

DESCRIPTION
       In the first synopsis form, the getconf utility shall write to the standard output the value of the variable specified by
       the system_var operand.

       In the second synopsis form, the getconf utility shall write to the standard output the value of the  variable  specified
       by the path_var operand for the path specified by the pathname operand.

       The value of each configuration variable shall be determined as if it were obtained by calling the function from which it
       is defined to be available by this volume of POSIX.1‐2008 or by the System Interfaces volume of POSIX.1‐2008 (see the OP‐
       ERANDS section). The value shall reflect conditions in the current operating environment.

OPTIONS
       The  getconf  utility  shall  conform to the Base Definitions volume of POSIX.1‐2008, Section 12.2, Utility Syntax Guide‐
       lines.

       The following option shall be supported:

       −v specification
                 Indicate a specific specification and version for which configuration variables shall be  determined.  If  this
                 option  is  not  specified,  the values returned correspond to an implementation default conforming compilation
                 environment.

                 If the command:

                     getconf _POSIX_V7_ILP32_OFF32

                 does not write "−1\n" or "undefined\n" to standard output, then commands of the form:

                     getconf −v POSIX_V7_ILP32_OFF32 ...

                 determine values for configuration variables corresponding to the POSIX_V7_ILP32_OFF32 compilation  environment
                 specified in c99, the EXTENDED DESCRIPTION.

                 If the command:

                     getconf _POSIX_V7_ILP32_OFFBIG

                 does not write "−1\n" or "undefined\n" to standard output, then commands of the form:

                     getconf −v POSIX_V7_ILP32_OFFBIG ...

                 determine values for configuration variables corresponding to the POSIX_V7_ILP32_OFFBIG compilation environment
                 specified in c99, the EXTENDED DESCRIPTION.

                 If the command:

                     getconf _POSIX_V7_LP64_OFF64

                 does not write "−1\n" or "undefined\n" to standard output, then commands of the form:

                     getconf −v POSIX_V7_LP64_OFF64 ...

                 determine values for configuration variables corresponding to the POSIX_V7_LP64_OFF64  compilation  environment
                 specified in c99, the EXTENDED DESCRIPTION.

                 If the command:

                     getconf _POSIX_V7_LPBIG_OFFBIG

                 does not write "−1\n" or "undefined\n" to standard output, then commands of the form:

                     getconf −v POSIX_V7_LPBIG_OFFBIG ...

                 determine values for configuration variables corresponding to the POSIX_V7_LPBIG_OFFBIG compilation environment
                 specified in c99, the EXTENDED DESCRIPTION.

OPERANDS
       The following operands shall be supported:

       path_var  A name of a configuration variable. All of the variables in the Variable column of the table in the DESCRIPTION
                 of  the  fpathconf()  function  defined  in the System Interfaces volume of POSIX.1‐2008, without the enclosing
                 braces, shall be supported. The implementation may add other local variables.

       pathname  A pathname for which the variable specified by path_var is to be determined.

       system_var
                 A name of a configuration variable. All of the following variables shall be supported:

                  *  The names in the Variable column of the table in the DESCRIPTION of the sysconf() function  in  the  System
                     Interfaces   volume   of   POSIX.1‐2008,   except   for   the   entries   corresponding   to   _SC_CLK_TCK,
                     _SC_GETGR_R_SIZE_MAX, and _SC_GETPW_R_SIZE_MAX, without the enclosing braces.

                     For  compatibility  with  earlier  versions,  the  following  variable  names  shall  also  be   supported:
                     POSIX2_C_BIND  POSIX2_C_DEV POSIX2_CHAR_TERM POSIX2_FORT_DEV POSIX2_FORT_RUN POSIX2_LOCALEDEF POSIX2_SW_DEV
                     POSIX2_UPE POSIX2_VERSION

                     and shall be equivalent to the same name prefixed with an &amp;lt;underscore&amp;gt;.  This requirement may be removed in
                     a future version.

                  *  The  names  of  the  symbolic  constants  used as the name argument of the confstr() function in the System
                     Interfaces volume of POSIX.1‐2008, without the _CS_ prefix.

                  *  The names of the symbolic constants listed under the headings ``Maximum Values'' and ``Minimum Values''  in
                     the  description  of  the  &amp;lt;limits.h&amp;gt;  header  in  the Base Definitions volume of POSIX.1‐2008, without the
                     enclosing braces.

                     For  compatibility  with  earlier  versions,  the  following  variable  names  shall  also  be   supported:
                     POSIX2_BC_BASE_MAX   POSIX2_BC_DIM_MAX   POSIX2_BC_SCALE_MAX  POSIX2_BC_STRING_MAX  POSIX2_COLL_WEIGHTS_MAX
                     POSIX2_EXPR_NEST_MAX POSIX2_LINE_MAX POSIX2_RE_DUP_MAX

                     and shall be equivalent to the same name prefixed with an &amp;lt;underscore&amp;gt;.  This requirement may be removed in
                     a future version.

                 The implementation may add other local values.

STDIN
       Not used.

INPUT FILES
       None.

<!-- 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 <=< ACCEPT -->ENVIRONMENT VARIABLES
       The following environment variables shall affect the execution of getconf:

       LANG      Provide  a  default  value for the internationalization variables that are unset or null. (See the Base Defini‐
                 tions volume of POSIX.1‐2008, Section 8.2, Internationalization Variables for the precedence of  international‐
                 ization variables used to determine the values of locale categories.)

       LC_ALL    If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_CTYPE  Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, sin‐
                 gle-byte as opposed to multi-byte characters in arguments).

       LC_MESSAGES
                 Determine the locale that should be used to affect the format and contents of diagnostic  messages  written  to
                 standard error.

       NLSPATH   Determine the location of message catalogs for the processing of LC_MESSAGES.<!-- ACCEPT >=> 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 -->

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       If the specified variable is defined on the system and its value is described to be available from the confstr() function
       defined in the System Interfaces volume of POSIX.1‐2008, its value shall be written in the following format:

           "%s\n", &amp;lt;value&amp;gt;

       Otherwise, if the specified variable is defined on the system, its value shall be written in the following format:

           "%d\n", &amp;lt;value&amp;gt;

       If the specified variable is valid, but is undefined on the system, getconf shall write using the following format:

           "undefined\n"

       If the variable name is invalid or an error occurs, nothing shall be written to standard output.

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       None.

<!-- a42f9355-e63b-4205-ac0b-0b19b24faf9d <=< ACCEPT -->EXIT STATUS
       The following exit values shall be returned:

        0    The specified variable is valid and information about its current state was written successfully.

       &amp;gt;0    An error occurred.<!-- ACCEPT >=> a42f9355-e63b-4205-ac0b-0b19b24faf9d -->

CONSEQUENCES OF ERRORS
       Default.

       The following sections are informative.

APPLICATION USAGE
       None.

EXAMPLES
       The following example illustrates the value of {NGROUPS_MAX}:

           getconf NGROUPS_MAX

       The following example illustrates the value of {NAME_MAX} for a specific directory:

           getconf NAME_MAX /usr

       The following example shows how to deal more carefully with results that might be unspecified:

           if value=$(getconf PATH_MAX /usr); then
               if [ "$value" = "undefined" ]; then
                   echo PATH_MAX in /usr is indeterminate.
               else
                   echo PATH_MAX in /usr is $value.
               fi
           else
               echo Error in getconf.
           fi

RATIONALE
       The original need for this utility, and for the confstr() function, was to provide a way of  finding  the  configuration-
       defined  default  value  for the PATH environment variable. Since PATH can be modified by the user to include directories
       that could contain utilities replacing the standard utilities, shell scripts need a way to determine the  system-supplied
       PATH  environment variable value that contains the correct search path for the standard utilities. It was later suggested
       that access to the other variables described in this volume of POSIX.1‐2008 could also be useful to applications.

       This functionality of getconf would not be adequately subsumed by another command such as:

           grep var /etc/conf

       because such a strategy would provide correct values for neither those variables that can vary at runtime, nor those that
       can vary depending on the path.

       Early  proposal versions of getconf specified exit status 1 when the specified variable was valid, but not defined on the
       system. The output string "undefined" is now used to specify this case with exit code 0 because so many things depend  on
       an exit code of zero when an invoked utility is successful.

FUTURE DIRECTIONS
       None.

SEE ALSO
       c99

       The  Base  Definitions volume of POSIX.1‐2008, Chapter 8, Environment Variables, Section 12.2, Utility Syntax Guidelines,
       &amp;lt;limits.h&amp;gt;

       The System Interfaces volume of POSIX.1‐2008, confstr(), fpathconf(), sysconf(), system()

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013  Edition,  Standard  for
       Information  Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7, Copy‐
       right (C) 2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This  is  POSIX.1-2008
       with  the  2013  Technical  Corrigendum 1 applied.) In the event of any discrepancy between this version and the original
       IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the  referee  document.  The  original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any  typographical  or formatting errors that appear in this page are most likely to have been introduced during the con‐
       version of the source files to man page format. To report such errors,  see  https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                   GETCONF(1P)
GETOPTS(1P)                                         POSIX Programmer's Manual                                        GETOPTS(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->

NAME
       getopts — parse utility options

SYNOPSIS
       getopts optstring name [arg...]

DESCRIPTION
       The  getopts  utility shall retrieve options and option-arguments from a list of parameters. It shall support the Utility
       Syntax Guidelines 3 to 10, inclusive, described in the Base Definitions volume of  POSIX.1‐2008,  Section  12.2,  Utility
       Syntax Guidelines.

       Each  time it is invoked, the getopts utility shall place the value of the next option in the shell variable specified by
       the name operand and the index of the next argument to be processed in the shell variable OPTIND.  Whenever the shell  is
       invoked, OPTIND shall be initialized to 1.

       When  the  option  requires  an  option-argument, the getopts utility shall place it in the shell variable OPTARG.  If no
       option was found, or if the option that was found does not have an option-argument, OPTARG shall be unset.

       If an option character not contained in the optstring operand is found where an option character is expected,  the  shell
       variable  specified by name shall be set to the &amp;lt;question-mark&amp;gt; ('?')  character. In this case, if the first character in
       optstring is a &amp;lt;colon&amp;gt; (':'), the shell variable OPTARG shall be set to the option character found, but no  output  shall
       be written to standard error; otherwise, the shell variable OPTARG shall be unset and a diagnostic message shall be writ‐
       ten to standard error. This condition shall be considered to be an error detected in the way arguments were presented  to
       the invoking application, but shall not be an error in getopts processing.

       If an option-argument is missing:

        *  If  the  first  character of optstring is a &amp;lt;colon&amp;gt;, the shell variable specified by name shall be set to the &amp;lt;colon&amp;gt;
           character and the shell variable OPTARG shall be set to the option character found.

        *  Otherwise, the shell variable specified by name shall be set to the &amp;lt;question-mark&amp;gt;  character,  the  shell  variable
           OPTARG  shall  be unset, and a diagnostic message shall be written to standard error. This condition shall be consid‐
           ered to be an error detected in the way arguments were presented to the invoking application, but  shall  not  be  an
           error in getopts processing; a diagnostic message shall be written as stated, but the exit status shall be zero.

       When  the  end of options is encountered, the getopts utility shall exit with a return value greater than zero; the shell
       variable OPTIND shall be set to the index of the first operand, or the value "$#"+1 if there are no  operands;  the  name
       variable shall be set to the &amp;lt;question-mark&amp;gt; character. Any of the following shall identify the end of options: the first
       "−−" argument that is not an option-argument, finding an argument that is not an option-argument and does not begin  with
       a '−', or encountering an error.

       The shell variables OPTIND and OPTARG shall be local to the caller of getopts and shall not be exported by default.

       The  shell  variable  specified by the name operand, OPTIND, and OPTARG shall affect the current shell execution environ‐
       ment; see Section 2.12, Shell Execution Environment.

       If the application sets OPTIND to the value 1, a new set of parameters can be used: either the current positional parame‐
       ters  or  new arg values. Any other attempt to invoke getopts multiple times in a single shell execution environment with
       parameters (positional parameters or arg operands) that are not the same in all invocations, or with an OPTIND value mod‐
       ified to be a value other than 1, produces unspecified results.

OPTIONS
       None.

OPERANDS
       The following operands shall be supported:

       optstring A  string  containing the option characters recognized by the utility invoking getopts.  If a character is fol‐
                 lowed by a &amp;lt;colon&amp;gt;, the option shall be expected to have an argument, which should be supplied  as  a  separate
                 argument.  Applications  should  specify an option character and its option-argument as separate arguments, but
                 getopts shall interpret the characters following an option character requiring arguments as an argument whether
                 or  not  this is done. An explicit null option-argument need not be recognized if it is not supplied as a sepa‐
                 rate argument when getopts is invoked. (See also the getopt() function defined in the System Interfaces  volume
                 of  POSIX.1‐2008.)  The  characters  &amp;lt;question-mark&amp;gt;  and  &amp;lt;colon&amp;gt; shall not be used as option characters by an
                 application. The use of other option characters that are not alphanumeric produces unspecified results. If  the
                 option-argument  is not supplied as a separate argument from the option character, the value in OPTARG shall be
                 stripped of the option character and the '−'.  The first character in optstring determines how getopts  behaves
                 if an option character is not known or an option-argument is missing.

       name      The name of a shell variable that shall be set by the getopts utility to the option character that was found.

       The  getopts  utility  by  default  shall parse positional parameters passed to the invoking shell procedure. If args are
       given, they shall be parsed instead of the positional parameters.

STDIN
       Not used.

INPUT FILES
       None.

<!-- 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 <=< ACCEPT -->ENVIRONMENT VARIABLES
       The following environment variables shall affect the execution of getopts:

       LANG      Provide a default value for the internationalization variables that are unset or null. (See  the  Base  Defini‐
                 tions  volume of POSIX.1‐2008, Section 8.2, Internationalization Variables for the precedence of international‐
                 ization variables used to determine the values of locale categories.)

       LC_ALL    If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_CTYPE  Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, sin‐
                 gle-byte as opposed to multi-byte characters in arguments and input files).

       LC_MESSAGES
                 Determine  the  locale  that should be used to affect the format and contents of diagnostic messages written to
                 standard error.

       NLSPATH   Determine the location of message catalogs for the processing of LC_MESSAGES.<!-- ACCEPT >=> 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 -->

       OPTIND    This variable shall be used by the getopts utility as the index of the next argument to be processed.

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       Not used.

STDERR
       Whenever an error is detected and the first character in the optstring operand is not a &amp;lt;colon&amp;gt; (':'), a diagnostic  mes‐
       sage shall be written to standard error with the following information in an unspecified format:

        *  The  invoking  program  name  shall be identified in the message. The invoking program name shall be the value of the
           shell special parameter 0 (see Section 2.5.2, Special Parameters) at the time the getopts utility is invoked. A  name
           equivalent to:

               basename "$0"

           may be used.

        *  If  an option is found that was not specified in optstring, this error is identified and the invalid option character
           shall be identified in the message.

        *  If an option requiring an option-argument is found, but an option-argument is not found, this error shall be  identi‐
           fied and the invalid option character shall be identified in the message.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       None.

<!-- a42f9355-e63b-4205-ac0b-0b19b24faf9d <=< ACCEPT -->EXIT STATUS
       The following exit values shall be returned:

        0    An option, specified or unspecified by optstring, was found.

       &amp;gt;0    The end of options was encountered or an error occurred.<!-- ACCEPT >=> a42f9355-e63b-4205-ac0b-0b19b24faf9d -->

CONSEQUENCES OF ERRORS
       Default.

       The following sections are informative.

APPLICATION USAGE
       Since  getopts  affects the current shell execution environment, it is generally provided as a shell regular built-in. If
       it is called in a subshell or separate utility execution environment, such as one of the following:

           (getopts abc value "$@")
           nohup getopts ...
           find . −exec getopts ... \;

       it does not affect the shell variables in the caller's environment.

       Note that shell functions share OPTIND with the calling shell even though the positional parameters are changed.  If  the
       calling shell and any of its functions uses getopts to parse arguments, the results are unspecified.

EXAMPLES
       The following example script parses and displays its arguments:

           aflag=
           bflag=
           while getopts ab: name
           do
               case $name in
               a)    aflag=1;;
               b)    bflag=1
                     bval="$OPTARG";;
               ?)   printf "Usage: %s: [−a] [−b value] args\n" $0
                     exit 2;;
               esac
           done
           if [ ! −z "$aflag" ]; then
               printf "Option −a specified\n"
           fi
           if [ ! −z "$bflag" ]; then
               printf 'Option −b "%s" specified\n' "$bval"
           fi
           shift $(($OPTIND − 1))
           printf "Remaining arguments are: %s\n$*"

RATIONALE
       The getopts utility was chosen in preference to the System V getopt utility because getopts handles option-arguments con‐
       taining &amp;lt;blank&amp;gt; characters.

       The OPTARG variable is not mentioned in the ENVIRONMENT VARIABLES section because it does not  affect  the  execution  of
       getopts; it is one of the few ``output-only'' variables used by the standard utilities.

       The  &amp;lt;colon&amp;gt;  is  not allowed as an option character because that is not historical behavior, and it violates the Utility
       Syntax Guidelines. The &amp;lt;colon&amp;gt; is now specified to behave as in the KornShell version of the getopts utility;  when  used
       as  the  first  character in the optstring operand, it disables diagnostics concerning missing option-arguments and unex‐
       pected option characters. This replaces the use of the OPTERR variable that was specified in an early proposal.

       The formats of the diagnostic messages produced by the getopts utility and the getopt() function are not fully  specified
       because  implementations with superior (``friendlier'') formats objected to the formats used by some historical implemen‐
       tations. The standard developers considered it important that the information in the messages  used  be  uniform  between
       getopts  and  getopt().   Exact  duplication of the messages might not be possible, particularly if a utility is built on
       another system that has a different getopt() function, but the messages must have specific information included  so  that
       the program name, invalid option character, and type of error can be distinguished by a user.

       Only a rare application program intercepts a getopts standard error message and wants to parse it. Therefore, implementa‐
       tions are free to choose the most usable messages they can devise. The following formats  are  used  by  many  historical
       implementations:

           "%s: illegal option −− %c\n", &amp;lt;program name&amp;gt;, &amp;lt;option character&amp;gt;

           "%s: option requires an argument −− %c\n", &amp;lt;program name&amp;gt;, \
               &amp;lt;option character&amp;gt;

       Historical shells with built-in versions of getopt() or getopts have used different formats, frequently not even indicat‐
       ing the option character found in error.

FUTURE DIRECTIONS
       None.

SEE ALSO
       Section 2.5.2, Special Parameters

       The Base Definitions volume of POSIX.1‐2008, Chapter 8, Environment Variables, Section 12.2, Utility Syntax Guidelines

       The System Interfaces volume of POSIX.1‐2008, getopt()

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013  Edition,  Standard  for
       Information  Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7, Copy‐
       right (C) 2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This  is  POSIX.1-2008
       with  the  2013  Technical  Corrigendum 1 applied.) In the event of any discrepancy between this version and the original
       IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the  referee  document.  The  original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any  typographical  or formatting errors that appear in this page are most likely to have been introduced during the con‐
       version of the source files to man page format. To report such errors,  see  https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                   GETOPTS(1P)
GREP(1)                                              General Commands Manual                                             GREP(1)

NAME
       grep, egrep, fgrep - print lines matching a pattern

SYNOPSIS
       grep [OPTIONS] PATTERN [FILE...]
       grep [OPTIONS] [-e PATTERN | -f FILE] [FILE...]

DESCRIPTION
       grep  searches the named input FILEs for lines containing a match to the given PATTERN.  If no files are specified, or if
       the file “-” is given, grep searches standard input.  By default, grep prints the matching lines.

       In addition, the variant programs egrep and fgrep are the same as grep -E and grep -F, respectively.  These variants  are
       deprecated, but are provided for backward compatibility.

OPTIONS
   Generic Program Information
       --help Output a usage message and exit.

       -V, --version
              Output the version number of grep and exit.

   Matcher Selection
       -E, --extended-regexp
              Interpret PATTERN as an extended regular expression (ERE, see below).

       -F, --fixed-strings
              Interpret PATTERN as a list of fixed strings (instead of regular expressions), separated by newlines, any of which
              is to be matched.

       -G, --basic-regexp
              Interpret PATTERN as a basic regular expression (BRE, see below).  This is the default.

       -P, --perl-regexp
              Interpret the pattern as a Perl-compatible regular expression (PCRE).  This is highly experimental and grep -P may
              warn of unimplemented features.

   Matching Control
       -e PATTERN, --regexp=PATTERN
              Use  PATTERN  as  the  pattern.  If this option is used multiple times or is combined with the -f (--file) option,
              search for all patterns given.  This option can be used to protect a pattern beginning with “-”.

       -f FILE, --file=FILE
              Obtain patterns from FILE, one per line.  If this option is used  multiple  times  or  is  combined  with  the  -e
              (--regexp)  option,  search  for all patterns given.  The empty file contains zero patterns, and therefore matches
              nothing.

       -i, --ignore-case
              Ignore case distinctions in both the PATTERN and the input files.

       -v, --invert-match
              Invert the sense of matching, to select non-matching lines.

       -w, --word-regexp
              Select only those lines containing matches that form whole words.  The test is that the  matching  substring  must
              either  be  at  the beginning of the line, or preceded by a non-word constituent character.  Similarly, it must be
              either at the end of the line or followed by a non-word constituent character.   Word-constituent  characters  are
              letters, digits, and the underscore.  This option has no effect if -x is also specified.

       -x, --line-regexp
              Select  only  those  matches  that  exactly  match the whole line.  For a regular expression pattern, this is like
              parenthesizing the pattern and then surrounding it with ^ and $.

       -y     Obsolete synonym for -i.

   General Output Control
       -c, --count
              Suppress normal output; instead print a count of matching lines for each input file.  With the -v,  --invert-match
              option (see below), count non-matching lines.

       --color[=WHEN], --colour[=WHEN]
              Surround  the  matched (non-empty) strings, matching lines, context lines, file names, line numbers, byte offsets,
              and separators (for fields and groups of context lines) with escape sequences to display  them  in  color  on  the
              terminal.   The  colors  are defined by the environment variable GREP_COLORS.  The deprecated environment variable
              GREP_COLOR is still supported, but its setting does not have priority.  WHEN is never, always, or auto.

       -L, --files-without-match
              Suppress normal output; instead print the name of each input file from which no output would  normally  have  been
              printed.  The scanning will stop on the first match.

       -l, --files-with-matches
              Suppress  normal  output;  instead  print  the  name of each input file from which output would normally have been
              printed.  The scanning will stop on the first match.

       -m NUM, --max-count=NUM
              Stop reading a file after NUM matching lines.  If the input is  standard  input  from  a  regular  file,  and  NUM
              matching lines are output, grep ensures that the standard input is positioned to just after the last matching line
              before exiting, regardless of the presence of trailing context lines.  This enables a calling process to resume  a
              search.   When grep stops after NUM matching lines, it outputs any trailing context lines.  When the -c or --count
              option is also used, grep does not output a count greater than NUM.  When the -v or --invert-match option is  also
              used, grep stops after outputting NUM non-matching lines.

       -o, --only-matching
              Print only the matched (non-empty) parts of a matching line, with each such part on a separate output line.

       -q, --quiet, --silent
              Quiet; do not write anything to standard output.  Exit immediately with zero status if any match is found, even if
              an error was detected.  Also see the -s or --no-messages option.

       -s, --no-messages
              Suppress error messages about nonexistent or unreadable files.

   Output Line Prefix Control
       -b, --byte-offset
              Print the 0-based byte offset within the input file before each  line  of  output.   If  -o  (--only-matching)  is
              specified, print the offset of the matching part itself.

       -H, --with-filename
              Print the file name for each match.  This is the default when there is more than one file to search.

       -h, --no-filename
              Suppress the prefixing of file names on output.  This is the default when there is only one file (or only standard
              input) to search.

       --label=LABEL
              Display input actually coming from standard input as input coming from file LABEL.  This is especially useful when
              implementing tools like zgrep, e.g., gzip -cd foo.gz | grep --label=foo -H something.  See also the -H option.

       -n, --line-number
              Prefix each line of output with the 1-based line number within its input file.

       -T, --initial-tab
              Make  sure that the first character of actual line content lies on a tab stop, so that the alignment of tabs looks
              normal.  This is useful with options that prefix their output to the actual content: -H,-n, and -b.  In  order  to
              improve the probability that lines from a single file will all start at the same column, this also causes the line
              number and byte offset (if present) to be printed in a minimum size field width.

       -u, --unix-byte-offsets
              Report Unix-style byte offsets.  This switch causes grep to report byte offsets as if the file were  a  Unix-style
              text  file,  i.e., with CR characters stripped off.  This will produce results identical to running grep on a Unix
              machine.  This option has no effect unless -b option is also used; it has no effect on platforms other than MS-DOS
              and MS-Windows.

       -Z, --null
              Output  a  zero  byte  (the  ASCII NUL character) instead of the character that normally follows a file name.  For
              example, grep -lZ outputs a zero byte after each file name instead of the usual newline.  This  option  makes  the
              output  unambiguous,  even in the presence of file names containing unusual characters like newlines.  This option
              can be used with commands like find -print0, perl -0, sort -z, and xargs -0 to process arbitrary file names,  even
              those that contain newline characters.

   Context Line Control
       -A NUM, --after-context=NUM
              Print NUM lines of trailing context after matching lines.  Places a line containing a group separator (--) between
              contiguous groups of matches.  With the -o or --only-matching option, this has no effect and a warning is given.

       -B NUM, --before-context=NUM
              Print NUM lines of leading context before matching lines.  Places a line containing a group separator (--) between
              contiguous groups of matches.  With the -o or --only-matching option, this has no effect and a warning is given.

       -C NUM, -NUM, --context=NUM
              Print  NUM  lines of output context.  Places a line containing a group separator (--) between contiguous groups of
              matches.  With the -o or --only-matching option, this has no effect and a warning is given.

   File and Directory Selection
       -a, --text
              Process a binary file as if it were text; this is equivalent to the --binary-files=text option.

       --binary-files=TYPE
              If a file's data or metadata indicate that the file contains binary data, assume that the file is  of  type  TYPE.
              Non-text  bytes  indicate  binary  data; these are either output bytes that are improperly encoded for the current
              locale, or null input bytes when the -z option is not given.

              By default, TYPE is binary, and when grep discovers that a file is binary it suppresses any  further  output,  and
              instead outputs either a one-line message saying that a binary file matches, or no message if there is no match.

              If  TYPE is without-match, when grep discovers that a file is binary it assumes that the rest of the file does not
              match; this is equivalent to the -I option.

              If TYPE is text, grep processes a binary file as if it were text; this is equivalent to the -a option.

              When type is binary, grep may treat non-text bytes as line terminators even without the  -z  option.   This  means
              choosing  binary  versus  text  can affect whether a pattern matches a file.  For example, when type is binary the
              pattern q$ might match q immediately followed by a null byte, even though this is not matched when type  is  text.
              Conversely, when type is binary the pattern . (period) might not match a null byte.

              Warning:  The -a option might output binary garbage, which can have nasty side effects if the output is a terminal
              and if the terminal driver interprets some of it as commands.  On the other hand, when reading  files  whose  text
              encodings  are unknown, it can be helpful to use -a or to set LC_ALL='C' in the environment, in order to find more
              matches even if the matches are unsafe for direct display.

       -D ACTION, --devices=ACTION
              If an input file is a device, FIFO or socket, use ACTION to process it.  By default, ACTION is read,  which  means
              that devices are read just as if they were ordinary files.  If ACTION is skip, devices are silently skipped.

       -d ACTION, --directories=ACTION
              If  an  input  file  is a directory, use ACTION to process it.  By default, ACTION is read, i.e., read directories
              just as if they were ordinary files.  If ACTION is skip, silently skip directories.  If ACTION  is  recurse,  read
              all  files under each directory, recursively, following symbolic links only if they are on the command line.  This
              is equivalent to the -r option.

       --exclude=GLOB
              Skip any command-line file with a name suffix that matches the pattern  GLOB,  using  wildcard  matching;  a  name
              suffix  is  either  the  whole  name,  or  any  suffix  starting  after  a  / and before a +non-/.  When searching
              recursively, skip any subfile whose base name matches GLOB; the base name is the part after the last /.  A pattern
              can use *, ?, and [...]  as wildcards, and \ to quote a wildcard or backslash character literally.

       --exclude-from=FILE
              Skip files whose base name matches any of the file-name globs read from FILE (using wildcard matching as described
              under --exclude).

       --exclude-dir=GLOB
              Skip any command-line directory with a name suffix that matches the pattern  GLOB.   When  searching  recursively,
              skip any subdirectory whose base name matches GLOB.  Ignore any redundant trailing slashes in GLOB.

       -I     Process  a  binary  file as if it did not contain matching data; this is equivalent to the --binary-files=without-
              match option.

       --include=GLOB
              Search only files whose base name matches GLOB (using wildcard matching as described under --exclude).

       -r, --recursive
              Read all files under each directory, recursively, following symbolic links only if they are on the  command  line.
              Note  that if no file operand is given, grep searches the working directory.  This is equivalent to the -d recurse
              option.

       -R, --dereference-recursive
              Read all files under each directory, recursively.  Follow all symbolic links, unlike -r.

   Other Options
       --line-buffered
              Use line buffering on output.  This can cause a performance penalty.

       -U, --binary
              Treat the file(s) as binary.  By default, under MS-DOS and MS-Windows, grep guesses whether  a  file  is  text  or
              binary  as  described  for  the  --binary-files option.  If grep decides the file is a text file, it strips the CR
              characters from the original file contents (to make regular expressions with ^ and $ work correctly).   Specifying
              -U  overrules  this  guesswork, causing all files to be read and passed to the matching mechanism verbatim; if the
              file is a text file with CR/LF pairs at the end of each line, this will cause some regular  expressions  to  fail.
              This option has no effect on platforms other than MS-DOS and MS-Windows.

       -z, --null-data
              Treat  input  and  output  data  as  sequences  of lines, each terminated by a zero byte (the ASCII NUL character)
              instead of a newline.  Like the -Z or --null option, this option can be used with commands like sort -z to process
              arbitrary file names.

REGULAR EXPRESSIONS
       A  regular  expression  is a pattern that describes a set of strings.  Regular expressions are constructed analogously to
       arithmetic expressions, by using various operators to combine smaller expressions.

       grep understands three different versions of regular expression  syntax:  “basic”  (BRE),  “extended”  (ERE)  and  “perl”
       (PCRE).   In  GNU grep,  there is no difference in available functionality between basic and extended syntaxes.  In other
       implementations, basic regular expressions are less powerful.  The following  description  applies  to  extended  regular
       expressions;  differences  for  basic regular expressions are summarized afterwards.  Perl-compatible regular expressions
       give additional functionality, and are documented in pcresyntax(3) and pcrepattern(3), but work only if PCRE is available
       in the system.

       The  fundamental  building  blocks are the regular expressions that match a single character.  Most characters, including
       all letters and digits, are regular expressions that match themselves.  Any meta-character with special  meaning  may  be
       quoted by preceding it with a backslash.

       The period . matches any single character.

   Character Classes and Bracket Expressions
       A  bracket  expression is a list of characters enclosed by [ and ].  It matches any single character in that list; if the
       first character of the list is the caret ^ then it matches any character not in  the  list.   For  example,  the  regular
       expression [0123456789] matches any single digit.

       Within  a bracket expression, a range expression consists of two characters separated by a hyphen.  It matches any single
       character that sorts between the two characters, inclusive, using the locale's collating sequence and character set.  For
       example,  in  the default C locale, [a-d] is equivalent to [abcd].  Many locales sort characters in dictionary order, and
       in these locales [a-d] is typically not equivalent to [abcd]; it might be  equivalent  to  [aBbCcDd],  for  example.   To
       obtain  the traditional interpretation of bracket expressions, you can use the C locale by setting the LC_ALL environment
       variable to the value C.

       Finally, certain named classes of characters are predefined within bracket expressions, as follows.  Their names are self
       explanatory,  and  they  are  [:alnum:],  [:alpha:],  [:cntrl:],  [:digit:],  [:graph:], [:lower:], [:print:], [:punct:],
       [:space:], [:upper:], and [:xdigit:].  For example, [[:alnum:]] means the character class of numbers and letters  in  the
       current  locale.  In  the  C  locale  and  ASCII character set encoding, this is the same as [0-9A-Za-z].  (Note that the
       brackets in these class names are part of the symbolic names, and must be included in addition to the brackets delimiting
       the  bracket  expression.)   Most  meta-characters  lose  their special meaning inside bracket expressions.  To include a
       literal ] place it first in the list.  Similarly, to include a literal ^  place  it  anywhere  but  first.   Finally,  to
       include a literal - place it last.

   Anchoring
       The  caret  ^ and the dollar sign $ are meta-characters that respectively match the empty string at the beginning and end
       of a line.

   The Backslash Character and Special Expressions
       The symbols \&amp;lt; and \&amp;gt; respectively match the empty string at the beginning and end of a word.  The symbol \b matches  the
       empty  string at the edge of a word, and \B matches the empty string provided it's not at the edge of a word.  The symbol
       \w is a synonym for [_[:alnum:]] and \W is a synonym for [^_[:alnum:]].

   Repetition
       A regular expression may be followed by one of several repetition operators:
       ?      The preceding item is optional and matched at most once.
       *      The preceding item will be matched zero or more times.
       +      The preceding item will be matched one or more times.
       {n}    The preceding item is matched exactly n times.
       {n,}   The preceding item is matched n or more times.
       {,m}   The preceding item is matched at most m times.  This is a GNU extension.
       {n,m}  The preceding item is matched at least n times, but not more than m times.

   Concatenation
       Two regular expressions may be concatenated; the resulting regular expression matches any string formed by  concatenating
       two substrings that respectively match the concatenated expressions.

   Alternation
       Two  regular  expressions  may  be  joined  by  the infix operator |; the resulting regular expression matches any string
       matching either alternate expression.

   Precedence
       Repetition takes precedence over concatenation, which in turn takes precedence over alternation.  A whole expression  may
       be enclosed in parentheses to override these precedence rules and form a subexpression.

   Back References and Subexpressions
       The  back-reference  \n,  where  n  is  a single digit, matches the substring previously matched by the nth parenthesized
       subexpression of the regular expression.

   Basic vs Extended Regular Expressions
       In basic regular expressions the meta-characters ?, +, {, |, (, and  )  lose  their  special  meaning;  instead  use  the
       backslashed versions \?, \+, \{, \|, \(, and \).

ENVIRONMENT VARIABLES
       The behavior of grep is affected by the following environment variables.

       The  locale  for  category LC_foo is specified by examining the three environment variables LC_ALL, LC_foo, LANG, in that
       order.  The first of these variables that is set  specifies  the  locale.   For  example,  if  LC_ALL  is  not  set,  but
       LC_MESSAGES  is set to pt_BR, then the Brazilian Portuguese locale is used for the LC_MESSAGES category.  The C locale is
       used if none of these environment variables are set, if the locale catalog is not installed, or if grep was not  compiled
       with national language support (NLS).  The shell command locale -a lists locales that are currently available.

       GREP_OPTIONS
              This  variable  specifies  default options to be placed in front of any explicit options.  As this causes problems
              when writing portable scripts, this feature will be removed in a future release of grep, and grep warns if  it  is
              used.  Please use an alias or script instead.

       GREP_COLOR
              This  variable  specifies  the  color  used  to  highlight matched (non-empty) text.  It is deprecated in favor of
              GREP_COLORS, but still supported.  The mt, ms, and mc capabilities of GREP_COLORS have priority over it.   It  can
              only  specify  the  color used to highlight the matching non-empty text in any matching line (a selected line when
              the -v command-line option is omitted, or a context line when -v is specified).  The default is 01;31, which means
              a bold red foreground text on the terminal's default background.

       GREP_COLORS
              Specifies  the  colors  and other attributes used to highlight various parts of the output.  Its value is a colon-
              separated list of capabilities that defaults to ms=01;31:mc=01;31:sl=:cx=:fn=35:ln=32:bn=32:se=36 with the rv  and
              ne boolean capabilities omitted (i.e., false).  Supported capabilities are as follows.

              sl=    SGR substring for whole selected lines (i.e., matching lines when the -v command-line option is omitted, or
                     non-matching lines when -v is specified).  If however the boolean rv capability  and  the  -v  command-line
                     option  are  both specified, it applies to context matching lines instead.  The default is empty (i.e., the
                     terminal's default color pair).

              cx=    SGR substring for whole context lines (i.e., non-matching lines when the -v command-line option is omitted,
                     or  matching  lines  when  -v  is specified).  If however the boolean rv capability and the -v command-line
                     option are both specified, it applies to selected non-matching lines instead.  The default is empty  (i.e.,
                     the terminal's default color pair).

              rv     Boolean  value  that reverses (swaps) the meanings of the sl= and cx= capabilities when the -v command-line
                     option is specified.  The default is false (i.e., the capability is omitted).

              mt=01;31
                     SGR substring for matching non-empty text in any matching line (i.e., a selected line when the -v  command-
                     line  option  is  omitted,  or a context line when -v is specified).  Setting this is equivalent to setting
                     both ms= and mc= at once to the same value.  The default is a bold red text  foreground  over  the  current
                     line background.

              ms=01;31
                     SGR  substring for matching non-empty text in a selected line.  (This is only used when the -v command-line
                     option is omitted.)  The effect of the sl= (or cx= if rv) capability remains active  when  this  kicks  in.
                     The default is a bold red text foreground over the current line background.

              mc=01;31
                     SGR  substring  for matching non-empty text in a context line.  (This is only used when the -v command-line
                     option is specified.)  The effect of the cx= (or sl= if rv) capability remains active when this  kicks  in.
                     The default is a bold red text foreground over the current line background.

              fn=35  SGR substring for file names prefixing any content line.  The default is a magenta text foreground over the
                     terminal's default background.

              ln=32  SGR substring for line numbers prefixing any content line.  The default is a green text foreground over the
                     terminal's default background.

              bn=32  SGR substring for byte offsets prefixing any content line.  The default is a green text foreground over the
                     terminal's default background.

              se=36  SGR substring for separators that are inserted between selected  line  fields  (:),  between  context  line
                     fields, (-), and between groups of adjacent lines when nonzero context is specified (--).  The default is a
                     cyan text foreground over the terminal's default background.

              ne     Boolean value that prevents clearing to the end of line using Erase in Line (EL) to Right (\33[K) each time
                     a  colorized  item ends.  This is needed on terminals on which EL is not supported.  It is otherwise useful
                     on terminals for which the back_color_erase (bce) boolean terminfo capability  does  not  apply,  when  the
                     chosen  highlight  colors  do not affect the background, or when EL is too slow or causes too much flicker.
                     The default is false (i.e., the capability is omitted).

              Note that boolean capabilities have no =...  part.  They are omitted (i.e., false) by default and become true when
              specified.

              See  the  Select  Graphic  Rendition  (SGR)  section  in  the  documentation of the text terminal that is used for
              permitted values and their meaning as character attributes.   These  substring  values  are  integers  in  decimal
              representation  and can be concatenated with semicolons.  grep takes care of assembling the result into a complete
              SGR sequence (\33[...m).  Common values to concatenate include 1 for bold, 4 for underline, 5  for  blink,  7  for
              inverse,  39  for  default foreground color, 30 to 37 for foreground colors, 90 to 97 for 16-color mode foreground
              colors, 38;5;0 to 38;5;255 for 88-color and 256-color modes foreground colors, 49 for default background color, 40
              to  47  for background colors, 100 to 107 for 16-color mode background colors, and 48;5;0 to 48;5;255 for 88-color
              and 256-color modes background colors.

       LC_ALL, LC_COLLATE, LANG
              These variables specify the locale for the LC_COLLATE category, which determines the collating  sequence  used  to
              interpret range expressions like [a-z].

       LC_ALL, LC_CTYPE, LANG
              These variables specify the locale for the LC_CTYPE category, which determines the type of characters, e.g., which
              characters are whitespace.  This category also determines the character encoding, that is, whether text is encoded
              in  UTF-8,  ASCII,  or some other encoding.  In the C or POSIX locale, all characters are encoded as a single byte
              and every byte is a valid character.

       LC_ALL, LC_MESSAGES, LANG
              These variables specify the locale for the LC_MESSAGES category, which determines the language that grep uses  for
              messages.  The default C locale uses American English messages.

       POSIXLY_CORRECT
              If set, grep behaves as POSIX requires; otherwise, grep behaves more like other GNU programs.  POSIX requires that
              options that follow file names must be treated as file names; by default, such options are permuted to  the  front
              of  the  operand  list and are treated as options.  Also, POSIX requires that unrecognized options be diagnosed as
              “illegal”, but since they are not  really  against  the  law  the  default  is  to  diagnose  them  as  “invalid”.
              POSIXLY_CORRECT also disables _N_GNU_nonoption_argv_flags_, described below.

       _N_GNU_nonoption_argv_flags_
              (Here  N  is  grep's  numeric process ID.)  If the ith character of this environment variable's value is 1, do not
              consider the ith operand of grep to be an option, even if it appears to be one.  A shell can put this variable  in
              the  environment  for  each  command  it  runs,  specifying  which  operands are the results of file name wildcard
              expansion and therefore should not be treated as options.  This behavior is available only with the GNU C library,
              and only when POSIXLY_CORRECT is not set.

EXIT STATUS
       Normally  the  exit status is 0 if a line is selected, 1 if no lines were selected, and 2 if an error occurred.  However,
       if the -q or --quiet or --silent is used and a line is selected, the exit status is 0 even if an error occurred.

COPYRIGHT
       Copyright 1998-2000, 2002, 2005-2016 Free Software Foundation, Inc.

       This is free software; see the source for copying conditions.  There is NO warranty;  not  even  for  MERCHANTABILITY  or
       FITNESS FOR A PARTICULAR PURPOSE.

BUGS
   Reporting Bugs
       Email bug reports to the bug-reporting address ⟨bug-grep@gnu.org⟩.  An email archive ⟨http://lists.gnu.org/mailman/
       listinfo/bug-grep⟩ and a bug tracker ⟨http://debbugs.gnu.org/cgi/pkgreport.cgi?package=grep⟩ are available.

   Known Bugs
       Large repetition counts in the {n,m} construct may cause grep to use lots of memory.  In addition, certain other  obscure
       regular expressions require exponential time and space, and may cause grep to run out of memory.

       Back-references are very slow, and may require exponential time.

SEE ALSO
   Regular Manual Pages
       awk(1), cmp(1), diff(1), find(1), gzip(1), perl(1), sed(1), sort(1), xargs(1), zgrep(1), read(2), pcre(3), pcresyntax(3),
       pcrepattern(3), terminfo(5), glob(7), regex(7).

   POSIX Programmer's Manual Page
       grep(1p).

   Full Documentation
       A complete manual ⟨http://www.gnu.org/software/grep/manual/⟩ is available.  If the info and grep  programs  are  properly
       installed at your site, the command

              info grep

       should give you access to the complete manual.

NOTES
       This man page is maintained only fitfully; the full documentation is often more up-to-date.

User Commands                                             GNU grep 2.27                                                  GREP(1)
HASH(1P)                                            POSIX Programmer's Manual                                           HASH(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->

NAME
       hash — remember or report utility locations

SYNOPSIS
       hash [utility...]

       hash −r

DESCRIPTION
       The  hash  utility  shall  affect  the  way  the  current shell environment remembers the locations of utilities found as
       described in Section 2.9.1.1, Command Search and Execution.  Depending on the arguments specified, it shall  add  utility
       locations  to  its  list of remembered locations or it shall purge the contents of the list. When no arguments are speci‐
       fied, it shall report on the contents of the list.

       Utilities provided as built-ins to the shell shall not be reported by hash.

OPTIONS
       The hash utility shall conform to the Base Definitions volume of POSIX.1‐2008, Section 12.2, Utility Syntax Guidelines.

       The following option shall be supported:

       −r        Forget all previously remembered utility locations.

OPERANDS
       The following operand shall be supported:

       utility   The name of a utility to be searched for and added to the list of remembered locations. If utility contains one
                 or more &amp;lt;slash&amp;gt; characters, the results are unspecified.

STDIN
       Not used.

INPUT FILES
       None.

<!-- 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 <=< ACCEPT -->ENVIRONMENT VARIABLES
       The following environment variables shall affect the execution of hash:

       LANG      Provide  a  default  value for the internationalization variables that are unset or null. (See the Base Defini‐
                 tions volume of POSIX.1‐2008, Section 8.2, Internationalization Variables for the precedence of  international‐
                 ization variables used to determine the values of locale categories.)

       LC_ALL    If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_CTYPE  Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, sin‐
                 gle-byte as opposed to multi-byte characters in arguments).

       LC_MESSAGES
                 Determine the locale that should be used to affect the format and contents of diagnostic  messages  written  to
                 standard error.

       NLSPATH   Determine the location of message catalogs for the processing of LC_MESSAGES.<!-- ACCEPT >=> 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 -->

       PATH      Determine  the  location  of  utility,  as described in the Base Definitions volume of POSIX.1‐2008, Chapter 8,
                 Environment Variables.

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       The standard output of hash shall be used when no arguments are specified. Its format is unspecified,  but  includes  the
       pathname  of  each utility in the list of remembered locations for the current shell environment. This list shall consist
       of those utilities named in previous hash invocations that have been invoked, and may contain  those  invoked  and  found
       through the normal command search process.

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       None.

<!-- a42f9355-e63b-4205-ac0b-0b19b24faf9d <=< ACCEPT -->EXIT STATUS
       The following exit values shall be returned:

        0    Successful completion.

       &amp;gt;0    An error occurred.<!-- ACCEPT >=> a42f9355-e63b-4205-ac0b-0b19b24faf9d -->

CONSEQUENCES OF ERRORS
       Default.

       The following sections are informative.

APPLICATION USAGE
       Since  hash  affects the current shell execution environment, it is always provided as a shell regular built-in. If it is
       called in a separate utility execution environment, such as one of the following:

           nohup hash −r
           find . −type f | xargs hash

       it does not affect the command search process of the caller's environment.

       The hash utility may be implemented as an alias—for example, alias −t −, in which case  utilities  found  through  normal
       command search are not listed by the hash command.

       The effects of hash −r can also be achieved portably by resetting the value of PATH; in the simplest form, this can be:

           PATH="$PATH"

       The  use  of hash with utility names is unnecessary for most applications, but may provide a performance improvement on a
       few implementations; normally, the hashing process is included by default.

EXAMPLES
       None.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       Section 2.9.1.1, Command Search and Execution

       The Base Definitions volume of POSIX.1‐2008, Chapter 8, Environment Variables, Section 12.2, Utility Syntax Guidelines

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013  Edition,  Standard  for
       Information  Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7, Copy‐
       right (C) 2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This  is  POSIX.1-2008
       with  the  2013  Technical  Corrigendum 1 applied.) In the event of any discrepancy between this version and the original
       IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the  referee  document.  The  original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any  typographical  or formatting errors that appear in this page are most likely to have been introduced during the con‐
       version of the source files to man page format. To report such errors,  see  https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                      HASH(1P)
ICONV(1)                                                Linux User Manual                                               ICONV(1)

NAME
       iconv - convert text from one character encoding to another

SYNOPSIS
       iconv [options] [-f from-encoding] [-t to-encoding] [inputfile]...

DESCRIPTION
       The  iconv  program reads in text in one encoding and outputs the text in another encoding.  If no input files are given,
       or if it is given as a dash (-), iconv reads from standard input.  If no output file is given, iconv writes  to  standard
       output.

       If  no from-encoding is given, the default is derived from the current locale's character encoding.  If no to-encoding is
       given, the default is derived from the current locale's character encoding.

OPTIONS
       -f from-encoding, --from-code=from-encoding
              Use from-encoding for input characters.

       -t to-encoding, --to-code=to-encoding
              Use to-encoding for output characters.

              If the string //IGNORE is appended to to-encoding, characters that cannot be converted are discarded and an  error
              is printed after conversion.

              If the string //TRANSLIT is appended to to-encoding, characters being converted are transliterated when needed and
              possible.  This means that when a character cannot be represented in the target character set, it can be  approxi‐
              mated  through one or several similar looking characters.  Characters that are outside of the target character set
              and cannot be transliterated are replaced with a question mark (?) in the output.

       -l, --list
              List all known character set encodings.

       -c     Silently discard characters that cannot be converted instead of terminating when encountering such characters.

       -o outputfile, --output=outputfile
              Use outputfile for output.

       -s, --silent
              This option is ignored; it is provided only for compatibility.

       --verbose
              Print progress information on standard error when processing multiple files.

       -?, --help
              Print a usage summary and exit.

       --usage
              Print a short usage summary and exit.

       -V, --version
              Print the version number, license, and disclaimer of warranty for iconv.

EXIT STATUS
       Zero on success, non-zero on errors.

ENVIRONMENT
       Internally, the iconv program uses the iconv(3) function which in turn uses  gconv  modules  (dynamically  loaded  shared
       libraries) to convert to and from a character set.  Before calling iconv(3), the iconv program must first allocate a con‐
       version descriptor using iconv_open(3).  The operation of the latter  function  is  influenced  by  the  setting  of  the
       GCONV_PATH environment variable:

       *  If  GCONV_PATH  is  not set, iconv_open(3) loads the system gconv module configuration cache file created by iconvcon‐
          fig(8) and then, based on the configuration, loads the gconv modules needed to perform the conversion.  If the  system
          gconv module configuration cache file is not available then the system gconv module configuration file is used.

       *  If  GCONV_PATH is defined (as a colon-separated list of pathnames), the system gconv module configuration cache is not
          used.  Instead, iconv_open(3) first tries to load the configuration files by searching the directories  in  GCONV_PATH
          in  order,  followed  by  the system default gconv module configuration file.  If a directory does not contain a gconv
          module configuration file, any gconv modules that it may contain are ignored.  If a directory contains a gconv  module
          configuration  file  and it is determined that a module needed for this conversion is available in the directory, then
          the needed module is loaded from that directory, the order  being  such  that  the  first  suitable  module  found  in
          GCONV_PATH  is  used.   This  allows users to use custom modules and even replace system-provided modules by providing
          such modules in GCONV_PATH directories.

FILES
       /usr/lib/gconv
              Usual default gconv module path.

       /usr/lib/gconv/gconv-modules
              Usual system default gconv module configuration file.

       /usr/lib/gconv/gconv-modules.cache
              Usual system gconv module configuration cache.

CONFORMING TO
       POSIX.1-2001.

EXAMPLE
       Convert text from the ISO 8859-15 character encoding to UTF-8:

           $ iconv -f ISO-8859-15 -t UTF-8 &amp;lt; input.txt &amp;gt; output.txt

       The next example converts from UTF-8 to ASCII, transliterating when possible:

           $ echo abc ß α € àḃç | iconv -f UTF-8 -t ASCII//TRANSLIT
           abc ss ? EUR abc

SEE ALSO
       locale(1), iconv(3), nl_langinfo(3), charsets(7), iconvconfig(8)

COLOPHON
       This page is part of release 4.09 of the Linux man-pages project.   A  description  of  the  project,  information  about
       reporting bugs, and the latest version of this page, can be found at https://www.kernel.org/doc/man-pages/.

GNU                                                        2014-07-08                                                   ICONV(1)
ID(1)                                                     User Commands                                                    ID(1)

NAME
       id - print real and effective user and group IDs

SYNOPSIS
       id [OPTION]... [USER]

DESCRIPTION
       Print user and group information for the specified USER, or (when USER omitted) for the current user.

       -a     ignore, for compatibility with other versions

       -Z, --context
              print only the security context of the process

       -g, --group
              print only the effective group ID

       -G, --groups
              print all group IDs

       -n, --name
              print a name instead of a number, for -ugG

       -r, --real
              print the real ID instead of the effective ID, with -ugG

       -u, --user
              print only the effective user ID

       -z, --zero
              delimit entries with NUL characters, not whitespace;

              not permitted in default format

       --help display this help and exit

       --version
              output version information and exit

       Without any OPTION, print some useful set of identified information.

AUTHOR
       Written by Arnold Robbins and David MacKenzie.

<!-- 30b0cf8a-458a-435b-a2e0-993472636e53 <=< ACCEPT -->REPORTING BUGS
       GNU coreutils online help: &amp;lt;http://www.gnu.org/software/coreutils/&amp;gt;
       Report id translation bugs to &amp;lt;http://translationproject.org/team/&amp;gt;

COPYRIGHT
       Copyright    ©    2016   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3   or   later
       &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.
<!-- ACCEPT >=> 30b0cf8a-458a-435b-a2e0-993472636e53 -->
SEE ALSO
       Full documentation at: &amp;lt;http://www.gnu.org/software/coreutils/id&amp;gt;
       or available locally via: info '(coreutils) id invocation'

GNU coreutils 8.26                                        November 2016                                                    ID(1)
IPCRM(1)                                                  User Commands                                                 IPCRM(1)

NAME
       ipcrm - remove certain IPC resources

SYNOPSIS
       ipcrm [options]

       ipcrm {shm|msg|sem} id...

DESCRIPTION
       ipcrm  removes  System  V  inter-process  communication (IPC) objects and associated data structures from the system.  In
       order to delete such objects, you must be superuser, or the creator or owner of the object.

       System V IPC objects are of three types: shared memory, message queues, and semaphores.  Deletion of a message  queue  or
       semaphore object is immediate (regardless of whether any process still holds an IPC identifier for the object).  A shared
       memory object is only removed after all currently attached processes have detached (shmdt(2)) the object from their  vir‐
       tual address space.

       Two syntax styles are supported.  The old Linux historical syntax specifies a three-letter keyword indicating which class
       of object is to be deleted, followed by one or more IPC identifiers for objects of this type.

       The SUS-compliant syntax allows the specification of zero or more objects of all three types in a  single  command  line,
       with  objects  specified either by key or by identifier (see below).  Both keys and identifiers may be specified in deci‐
       mal, hexadecimal (specified with an initial '0x' or '0X'), or octal (specified with an initial '0').

       The details of the removes are described in shmctl(2), msgctl(2), and semctl(2).  The identifiers and keys can  be  found
       by using ipcs(1).

OPTIONS
       -a, --all [shm] [msg] [sem]
              Remove  all  resources.   When  an  option  argument  is provided, the removal is performed only for the specified
              resource types.  Warning!  Do not use -a if you are unsure how the software using the  resources  might  react  to
              missing  objects.  Some programs create these resources at startup and may not have any code to deal with an unex‐
              pected disappearance.

       -M, --shmem-key shmkey
              Remove the shared memory segment created with shmkey after the last detach is performed.

       -m, --shmem-id shmid
              Remove the shared memory segment identified by shmid after the last detach is performed.

       -Q, --queue-key msgkey
              Remove the message queue created with msgkey.

       -q, --queue-id msgid
              Remove the message queue identified by msgid.

       -S, --semaphore-key semkey
              Remove the semaphore created with semkey.

       -s, --semaphore-id semid
              Remove the semaphore identified by semid.

       -V, --version
              Display version information and exit.

       -h, --help
              Display help text and exit.

NOTES
       In its first Linux implementation, ipcrm used the deprecated syntax shown in the second line of the SYNOPSIS.   Function‐
       ality  present in other *nix implementations of ipcrm has since been added, namely the ability to delete resources by key
       (not just identifier), and to respect the same command-line syntax.  For backward compatibility the  previous  syntax  is
       still supported.

SEE ALSO
       ipcs(1), ipcmk(1), msgctl(2), msgget(2), semctl(2), semget(2), shmctl(2), shmdt(2), shmget(2), ftok(3)

AVAILABILITY
       The  ipcrm command is part of the util-linux package and is available from Linux Kernel Archive ⟨ftp://ftp.kernel.org/pub
       /linux/utils/util-linux/⟩.

util-linux                                                  July 2014                                                   IPCRM(1)
IPCS(1)                                                   User Commands                                                  IPCS(1)

NAME
       ipcs - show information on IPC facilities

SYNOPSIS
       ipcs [options]

DESCRIPTION
       ipcs  shows  information on the inter-process communication facilities for which the calling process has read access.  By
       default it shows information about all three resources: shared memory segments, message queues, and semaphore arrays.

OPTIONS
       -i, --id id
              Show full details on just the one resource element identified by id.  This option needs to be combined with one of
              the three resource options: -m, -q or -s.

       -h, --help
              Display help text and exit.

       -V, --version
              Display version information and exit.

   Resource options
       -m, --shmems
              Write information about active shared memory segments.

       -q, --queues
              Write information about active message queues.

       -s, --semaphores
              Write information about active semaphore sets.

       -a, --all
              Write information about all three resources (default).

   Output formats
       Of these options only one takes effect: the last one specified.

       -c, --creator
              Show creator and owner.

       -l, --limits
              Show resource limits.

       -p, --pid
              Show PIDs of creator and last operator.

       -t, --time
              Write time information.  The time of the last control operation that changed the access permissions for all facil‐
              ities, the time of the last msgsnd() and msgrcv() operations on message queues, the time of the last  shmat()  and
              shmdt() operations on shared memory, and the time of the last semop() operation on semaphores.

       -u, --summary
              Show status summary.

   Representation
       These affect only the -l (--limits) option.

       -b, --bytes
              Print sizes in bytes.

       --human
              Print sizes in human-readable format.

SEE ALSO
       ipcrm(1), ipcmk(1), msgrcv(2), msgsnd(2), semget(2), semop(2), shmat(2), shmdt(2), shmget(2)

CONFORMING TO
       The  Linux  ipcs utility is not fully compatible to the POSIX ipcs utility.  The Linux version does not support the POSIX
       -a, -b and -o options, but does support the -l and -u options not defined by POSIX.  A portable application shall not use
       the -a, -b, -o, -l, and -u options.

AUTHOR
       Krishna Balasubramanian ⟨balasub@cis.ohio-state.edu⟩

AVAILABILITY
       The  ipcs  command is part of the util-linux package and is available from Linux Kernel Archive ⟨ftp://ftp.kernel.org/pub
       /linux/utils/util-linux/⟩.

util-linux                                                  July 2014                                                    IPCS(1)
JOBS(1P)                                            POSIX Programmer's Manual                                           JOBS(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->

NAME
       jobs — display status of jobs in the current session

SYNOPSIS
       jobs [−l|−p] [job_id...]

DESCRIPTION
       The  jobs  utility shall display the status of jobs that were started in the current shell environment; see Section 2.12,
       Shell Execution Environment.

       When jobs reports the termination status of a job, the shell shall remove its process ID from the list of  those  ``known
       in the current shell execution environment''; see Section 2.9.3.1, Examples.

OPTIONS
       The jobs utility shall conform to the Base Definitions volume of POSIX.1‐2008, Section 12.2, Utility Syntax Guidelines.

       The following options shall be supported:

       −l        (The  letter  ell.) Provide more information about each job listed. This information shall include the job num‐
                 ber, current job, process group ID, state, and the command that formed the job.

       −p        Display only the process IDs for the process group leaders of the selected jobs.

       By default, the jobs utility shall display the status of all stopped jobs, running background jobs  and  all  jobs  whose
       status has changed and have not been reported by the shell.

OPERANDS
       The following operand shall be supported:

       job_id    Specifies  the  jobs for which the status is to be displayed. If no job_id is given, the status information for
                 all jobs shall be displayed. The format of job_id is described in the Base Definitions volume of  POSIX.1‐2008,
                 Section 3.204, Job Control Job ID.

STDIN
       Not used.

INPUT FILES
       None.

<!-- 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 <=< ACCEPT -->ENVIRONMENT VARIABLES
       The following environment variables shall affect the execution of jobs:

       LANG      Provide  a  default  value for the internationalization variables that are unset or null. (See the Base Defini‐
                 tions volume of POSIX.1‐2008, Section 8.2, Internationalization Variables for the precedence of  international‐
                 ization variables used to determine the values of locale categories.)

       LC_ALL    If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_CTYPE  Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, sin‐
                 gle-byte as opposed to multi-byte characters in arguments).

       LC_MESSAGES
                 Determine the locale that should be used to affect the format and contents of diagnostic  messages  written  to
                 standard error and informative messages written to standard output.

       NLSPATH   Determine the location of message catalogs for the processing of LC_MESSAGES.<!-- ACCEPT >=> 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 -->

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       If the −p option is specified, the output shall consist of one line for each process ID:

           "%d\n", &amp;lt;process ID&amp;gt;

       Otherwise, if the −l option is not specified, the output shall be a series of lines of the form:

           "[%d] %c %s %s\n", &amp;lt;job-number&amp;gt;, &amp;lt;current&amp;gt;, &amp;lt;state&amp;gt;, &amp;lt;command&amp;gt;

       where the fields shall be as follows:

       &amp;lt;current&amp;gt; The  character  '+' identifies the job that would be used as a default for the fg or bg utilities; this job can
                 also be specified using the job_id %+ or "%%".  The character '−' identifies the  job  that  would  become  the
                 default  if the current default job were to exit; this job can also be specified using the job_id %−. For other
                 jobs, this field is a &amp;lt;space&amp;gt;.  At most one job can be identified with '+' and at most one job can  be  identi‐
                 fied  with  '−'.  If there is any suspended job, then the current job shall be a suspended job. If there are at
                 least two suspended jobs, then the previous job also shall be a suspended job.

       &amp;lt;job-number&amp;gt;
                 A number that can be used to identify the process group to the wait, fg, bg, and kill  utilities.  Using  these
                 utilities, the job can be identified by prefixing the job number with '%'.

       &amp;lt;state&amp;gt;   One of the following strings (in the POSIX locale):

                 Running   Indicates that the job has not been suspended by a signal and has not exited.

                 Done      Indicates that the job completed and returned exit status zero.

                 Done(code)
                           Indicates that the job completed normally and that it exited with the specified non-zero exit status,
                           code, expressed as a decimal number.

                 Stopped   Indicates that the job was suspended by the SIGTSTP signal.

                 Stopped (SIGTSTP)
                           Indicates that the job was suspended by the SIGTSTP signal.

                 Stopped (SIGSTOP)
                           Indicates that the job was suspended by the SIGSTOP signal.

                 Stopped (SIGTTIN)
                           Indicates that the job was suspended by the SIGTTIN signal.

                 Stopped (SIGTTOU)
                           Indicates that the job was suspended by the SIGTTOU signal.

                 The implementation may substitute the string Suspended in place of Stopped.  If the job  was  terminated  by  a
                 signal,  the  format  of &amp;lt;state&amp;gt; is unspecified, but it shall be visibly distinct from all of the other &amp;lt;state&amp;gt;
                 formats shown here and shall indicate the name or description of the signal causing the termination.

       &amp;lt;command&amp;gt; The associated command that was given to the shell.

       If the −l option is specified, a field containing the process group ID shall be inserted before the &amp;lt;state&amp;gt; field.  Also,
       more processes in a process group may be output on separate lines, using only the process ID and &amp;lt;command&amp;gt; fields.

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       None.

<!-- a42f9355-e63b-4205-ac0b-0b19b24faf9d <=< ACCEPT -->EXIT STATUS
       The following exit values shall be returned:

        0    Successful completion.

       &amp;gt;0    An error occurred.<!-- ACCEPT >=> a42f9355-e63b-4205-ac0b-0b19b24faf9d -->

CONSEQUENCES OF ERRORS
       Default.

       The following sections are informative.

APPLICATION USAGE
       The −p option is the only portable way to find out the process group of a job because different implementations have dif‐
       ferent strategies for defining the process group of the job. Usage such as $(jobs −p) provides a way of referring to  the
       process group of the job in an implementation-independent way.

       The  jobs  utility  does  not work as expected when it is operating in its own utility execution environment because that
       environment has no applicable jobs to manipulate. See the APPLICATION USAGE section for bg.  For  this  reason,  jobs  is
       generally implemented as a shell regular built-in.

EXAMPLES
       None.

RATIONALE
       Both  "%%"  and  "%+"  are used to refer to the current job. Both forms are of equal validity—the "%%" mirroring "$$" and
       "%+" mirroring the output of jobs.  Both forms reflect historical practice of the KornShell and the C shell with job con‐
       trol.

       The  job  control  features provided by bg, fg, and jobs are based on the KornShell. The standard developers examined the
       characteristics of the C shell versions of these utilities and found that differences exist. Despite  widespread  use  of
       the C shell, the KornShell versions were selected for this volume of POSIX.1‐2008 to maintain a degree of uniformity with
       the rest of the KornShell features selected (such as the very popular command line editing features).

       The jobs utility is not dependent on the job control option, as are the seemingly related bg  and  fg  utilities  because
       jobs is useful for examining background jobs, regardless of the condition of job control. When the user has invoked a set
       +m command and job control has been turned off, jobs can still be used to examine the  background  jobs  associated  with
       that current session. Similarly, kill can then be used to kill background jobs with kill %&amp;lt;background job number&amp;gt;.

       The  output for terminated jobs is left unspecified to accommodate various historical systems. The following formats have
       been witnessed:

        1. Killed(signal name)

        2. signal name

        3. signal name(coredump)

        4. signal description− core dumped

       Most users should be able to understand these formats, although it means that applications have trouble parsing them.

       The calculation of job IDs was not described since this would suggest an implementation,  which  may  impose  unnecessary
       restrictions.

       In  an  early  proposal,  a  −n option was included to ``Display the status of jobs that have changed, exited, or stopped
       since the last status report''. It was removed because the shell always writes any changed status  of  jobs  before  each
       prompt.

FUTURE DIRECTIONS
       None.

SEE ALSO
       Section 2.12, Shell Execution Environment, bg, fg, kill, wait

       The Base Definitions volume of POSIX.1‐2008, Section 3.204, Job Control Job ID, Chapter 8, Environment Variables, Section
       12.2, Utility Syntax Guidelines

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013  Edition,  Standard  for
       Information  Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7, Copy‐
       right (C) 2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This  is  POSIX.1-2008
       with  the  2013  Technical  Corrigendum 1 applied.) In the event of any discrepancy between this version and the original
       IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the  referee  document.  The  original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any  typographical  or formatting errors that appear in this page are most likely to have been introduced during the con‐
       version of the source files to man page format. To report such errors,  see  https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                      JOBS(1P)
JOIN(1)                                                   User Commands                                                  JOIN(1)

NAME
       join - join lines of two files on a common field

SYNOPSIS
       join [OPTION]... FILE1 FILE2

DESCRIPTION
       For  each pair of input lines with identical join fields, write a line to standard output.  The default join field is the
       first, delimited by blanks.

       When FILE1 or FILE2 (not both) is -, read standard input.

       -a FILENUM
              also print unpairable lines from file FILENUM, where FILENUM is 1 or 2, corresponding to FILE1 or FILE2

       -e EMPTY
              replace missing input fields with EMPTY

       -i, --ignore-case
              ignore differences in case when comparing fields

       -j FIELD
              equivalent to '-1 FIELD -2 FIELD'

       -o FORMAT
              obey FORMAT while constructing output line

       -t CHAR
              use CHAR as input and output field separator

       -v FILENUM
              like -a FILENUM, but suppress joined output lines

       -1 FIELD
              join on this FIELD of file 1

       -2 FIELD
              join on this FIELD of file 2

       --check-order
              check that the input is correctly sorted, even if all input lines are pairable

       --nocheck-order
              do not check that the input is correctly sorted

       --header
              treat the first line in each file as field headers, print them without trying to pair them

       -z, --zero-terminated
              line delimiter is NUL, not newline

       --help display this help and exit

       --version
              output version information and exit

       Unless -t CHAR is given, leading blanks separate fields and are ignored, else fields are separated by CHAR.  Any FIELD is
       a field number counted from 1.  FORMAT is one or more comma or blank separated specifications, each being 'FILENUM.FIELD'
       or '0'.  Default FORMAT outputs the join field, the remaining fields from FILE1, the remaining  fields  from  FILE2,  all
       separated  by  CHAR.   If  FORMAT is the keyword 'auto', then the first line of each file determines the number of fields
       output for each line.

       Important: FILE1 and FILE2 must be sorted on the join fields.  E.g., use "sort -k 1b,1" if 'join' has no options, or  use
       "join -t ''" if 'sort' has no options.  Note, comparisons honor the rules specified by 'LC_COLLATE'.  If the input is not
       sorted and some lines cannot be joined, a warning message will be given.

AUTHOR
       Written by Mike Haertel.

<!-- 30b0cf8a-458a-435b-a2e0-993472636e53 <=< ACCEPT -->REPORTING BUGS
       GNU coreutils online help: &amp;lt;http://www.gnu.org/software/coreutils/&amp;gt;
       Report join translation bugs to &amp;lt;http://translationproject.org/team/&amp;gt;

COPYRIGHT
       Copyright   ©   2016   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3    or    later
       &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.<!-- ACCEPT >=> 30b0cf8a-458a-435b-a2e0-993472636e53 -->

SEE ALSO
       comm(1), uniq(1)

       Full documentation at: &amp;lt;http://www.gnu.org/software/coreutils/join&amp;gt;
       or available locally via: info '(coreutils) join invocation'

GNU coreutils 8.26                                        November 2016                                                  JOIN(1)
KILL(1)                                                   User Commands                                                  KILL(1)

NAME
       kill - terminate a process

SYNOPSIS
       kill [-signal|-s signal|-p] [-q value] [-a] [--] pid|name...
       kill -l [number] | -L

DESCRIPTION
       The command kill sends the specified signal to the specified processes or process groups.  If no signal is specified, the
       TERM signal is sent.  This TERM signal will kill processes that do not catch it; for other processes it may be  necessary
       to use the KILL signal (number 9), since this signal cannot be caught.

       Most  modern shells have a builtin kill function, with a usage rather similar to that of the command described here.  The
       --all, --pid, and --queue options, and the possibility to specify processes by command name, are local extensions.

       If signal is 0, then no actual signal is sent, but error checking is still performed.

ARGUMENTS
       The list of processes to be signaled can be a mixture of names and pids.

       pid    Each pid can be one of four things:

              n      where n is larger than 0.  The process with pid n is signaled.

              0      All processes in the current process group are signaled.

              -1     All processes with a pid larger than 1 are signaled.

              -n     where n is larger than 1.  All processes in process group n are signaled.  When an  argument  of  the  form
                     '-n'  is  given, and it is meant to denote a process group, either a signal must be specified first, or the
                     argument must be preceded by a '--' option, otherwise it will be taken as the signal to send.

       name   All processes invoked using this name will be signaled.

OPTIONS
       -s, --signal signal
              The signal to send.  It may be given as a name or a number.

       -l, --list [number]
              Print a list of signal names, or convert the given signal number to a name.  The signals can  be  found  in  /usr/
              include/linux/signal.h

       -L, --table
              Similar to -l, but it will print signal names and their corresponding numbers.

       -a, --all
              Do not restrict the command-name-to-pid conversion to processes with the same uid as the present process.

       -p, --pid
              Only print the process id (pid) of the named processes, do not send any signals.

       --verbose
              Print pid(s) that will be signaled with kill along with the signal.

       -q, --queue value
              Use sigqueue(2) rather than kill(2).  The value argument is an integer that is sent along with the signal.  If the
              receiving process has installed a handler for this signal using the SA_SIGINFO flag to sigaction(2), then  it  can
              obtain this data via the si_sigval field of the siginfo_t structure.

NOTES
       It  is  not  possible  to  send  a  signal  to an explicitly selected thread in a multithreaded process using the kill(2)
       syscall.  If kill(2) is used to send a signal to a thread group, then the kernel  selects  an  arbitrary  member  of  the
       thread group that has not blocked the signal.  For more details see clone(2), the CLONE_THREAD description.

       The  command kill(1) as well as syscall kill(2) accept a TID (thread ID, see gettid(2)) as an argument.  In this case the
       kill behavior is not changed and the signal is also delivered to the thread group rather than to the specified thread.

RETURN CODES
       kill has the following return codes:

       0      success

       1      failure

       64     partial success (when more than one process specified)

SEE ALSO
       bash(1), tcsh(1), kill(2), sigvec(2), signal(7)

AUTHORS
       Salvatore Valente ⟨svalente@mit.edu⟩
       Karel Zak ⟨kzak@redhat.com⟩

       The original version was taken from BSD 4.4.

AVAILABILITY
       The kill command is part of the util-linux package and is available from Linux Kernel  Archive  ⟨ftp://ftp.kernel.org/pub
       /linux/utils/util-linux/⟩.

util-linux                                                  July 2014                                                    KILL(1)
LEX(1P)                                             POSIX Programmer's Manual                                            LEX(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.
<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->
NAME
       lex — generate programs for lexical tasks (DEVELOPMENT)

SYNOPSIS
       lex [−t] [−n|−v] [file...]

DESCRIPTION
       The lex utility shall generate C programs to be used in lexical processing of character input, and that can be used as an
       interface to yacc.  The C programs shall be generated from lex source code and conform to  the  ISO C  standard,  without
       depending  on  any  undefined,  unspecified, or implementation-defined behavior, except in cases where the code is copied
       directly from the supplied source, or in cases that are documented by the implementation. Usually, the lex utility  shall
       write  the  program it generates to the file lex.yy.c; the state of this file is unspecified if lex exits with a non-zero
       exit status. See the EXTENDED DESCRIPTION section for a complete description of the lex input language.

OPTIONS
       The lex utility shall conform to the Base Definitions volume of POSIX.1‐2008, Section 12.2,  Utility  Syntax  Guidelines,
       except for Guideline 9.

       The following options shall be supported:

       −n        Suppress  the  summary of statistics usually written with the −v option. If no table sizes are specified in the
                 lex source code and the −v option is not specified, then −n is implied.

       −t        Write the resulting program to standard output instead of lex.yy.c.

       −v        Write a summary of lex statistics to the standard output. (See the discussion of lex table sizes in Definitions
                 in  lex.)   If  the  −t  option  is specified and −n is not specified, this report shall be written to standard
                 error. If table sizes are specified in the lex source code, and if the −n  option  is  not  specified,  the  −v
                 option may be enabled.

OPERANDS
       The following operand shall be supported:

       file      A  pathname  of an input file. If more than one such file is specified, all files shall be concatenated to pro‐
                 duce a single lex program. If no file operands are specified, or if a file operand is '−', the  standard  input
                 shall be used.

STDIN
       The standard input shall be used if no file operands are specified, or if a file operand is '−'.  See INPUT FILES.

INPUT FILES
       The input files shall be text files containing lex source code, as described in the EXTENDED DESCRIPTION section.

<!-- 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 <=< ACCEPT -->ENVIRONMENT VARIABLES
       The following environment variables shall affect the execution of lex:

       LANG      Provide  a  default  value for the internationalization variables that are unset or null. (See the Base Defini‐
                 tions volume of POSIX.1‐2008, Section 8.2, Internationalization Variables for the precedence of  international‐
                 ization variables used to determine the values of locale categories.)

       LC_ALL    If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_COLLATE
                 Determine  the  locale  for the behavior of ranges, equivalence classes, and multi-character collating elements
                 within regular expressions. If this variable is not set to the POSIX locale, the results are unspecified.

       LC_CTYPE  Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, sin‐
                 gle-byte  as  opposed  to  multi-byte  characters  in arguments and input files), and the behavior of character
                 classes within regular expressions. If this variable is not set to the POSIX locale, the results  are  unspeci‐
                 fied.

       LC_MESSAGES
                 Determine  the  locale  that should be used to affect the format and contents of diagnostic messages written to
                 standard error.

       NLSPATH   Determine the location of message catalogs for the processing of LC_MESSAGES.<!-- ACCEPT >=> 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 -->

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       If the −t option is specified, the text file of C source code output of lex shall be written to standard output.

       If the −t option is not specified:

        *  Implementation-defined informational, error, and warning messages concerning the contents of lex  source  code  input
           shall be written to either the standard output or standard error.

        *  If  the −v option is specified and the −n option is not specified, lex statistics shall also be written to either the
           standard output or standard error, in an implementation-defined format. These statistics may also be generated if ta‐
           ble sizes are specified with a '%' operator in the Definitions section, as long as the −n option is not specified.

STDERR
       If  the −t option is specified, implementation-defined informational, error, and warning messages concerning the contents
       of lex source code input shall be written to the standard error.

       If the −t option is not specified:

        1. Implementation-defined informational, error, and warning messages concerning the contents of lex  source  code  input
           shall be written to either the standard output or standard error.

        2. If  the −v option is specified and the −n option is not specified, lex statistics shall also be written to either the
           standard output or standard error, in an implementation-defined format. These statistics may also be generated if ta‐
           ble sizes are specified with a '%' operator in the Definitions section, as long as the −n option is not specified.

OUTPUT FILES
       A text file containing C source code shall be written to lex.yy.c, or to the standard output if the −t option is present.

EXTENDED DESCRIPTION
       Each  input file shall contain lex source code, which is a table of regular expressions with corresponding actions in the
       form of C program fragments.

       When lex.yy.c is compiled and linked with the lex library (using the −l l operand with c99), the resulting program  shall
       read character input from the standard input and shall partition it into strings that match the given expressions.

       When an expression is matched, these actions shall occur:

        *  The  input  string  that  was  matched shall be left in yytext as a null-terminated string; yytext shall either be an
           external character array or a pointer to a character string. As explained in Definitions in  lex,  the  type  can  be
           explicitly selected using the %array or %pointer declarations, but the default is implementation-defined.

        *  The external int yyleng shall be set to the length of the matching string.

        *  The expression's corresponding program fragment, or action, shall be executed.

       During  pattern  matching,  lex  shall search the set of patterns for the single longest possible match. Among rules that
       match the same number of characters, the rule given first shall be chosen.

       The general format of lex source shall be:

              Definitions %% Rules %% UserSubroutines

       The first "%%" is required to mark the beginning of the rules (regular expressions  and  actions);  the  second  "%%"  is
       required only if user subroutines follow.

       Any  line  in  the  Definitions section beginning with a &amp;lt;blank&amp;gt; shall be assumed to be a C program fragment and shall be
       copied to the external definition area of the lex.yy.c file. Similarly, anything  in  the  Definitions  section  included
       between  delimiter  lines containing only "%{" and "%}" shall also be copied unchanged to the external definition area of
       the lex.yy.c file.

       Any such input (beginning with a &amp;lt;blank&amp;gt; or within "%{" and "%}" delimiter lines) appearing at the beginning of the Rules
       section  before  any rules are specified shall be written to lex.yy.c after the declarations of variables for the yylex()
       function and before the first line of code in yylex().  Thus, user variables local to yylex() can be  declared  here,  as
       well as application code to execute upon entry to yylex().

       The  action  taken  by  lex  when encountering any input beginning with a &amp;lt;blank&amp;gt; or within "%{" and "%}" delimiter lines
       appearing in the Rules section but coming after one or more rules is undefined. The presence of such input may result  in
       an erroneous definition of the yylex() function.

       C-language  code in the input shall not contain C-language trigraphs.  The C-language code within "%{" and "%}" delimiter
       lines shall not contain any lines consisting only of "%}", or only of "%%".

   Definitions in lex
       Definitions appear before the first "%%" delimiter. Any line in this section not contained between "%{"  and  "%}"  lines
       and  not  beginning  with a &amp;lt;blank&amp;gt; shall be assumed to define a lex substitution string. The format of these lines shall
       be:

           name substitute

       If a name does not meet the requirements for identifiers in the ISO C standard, the result is undefined. The string  sub‐
       stitute  shall  replace  the string {name} when it is used in a rule. The name string shall be recognized in this context
       only when the braces are provided and when it does not appear within a bracket expression or within double-quotes.

       In the Definitions section, any line beginning with a &amp;lt;percent-sign&amp;gt; ('%') character and followed by an alphanumeric word
       beginning with either 's' or 'S' shall define a set of start conditions. Any line beginning with a '%' followed by a word
       beginning with either 'x' or 'X' shall define a set of exclusive start conditions. When the generated scanner is in a  %s
       state,  patterns with no state specified shall be also active; in a %x state, such patterns shall not be active. The rest
       of the line, after the first word, shall be considered to be one or more &amp;lt;blank&amp;gt;-separated  names  of  start  conditions.
       Start  condition names shall be constructed in the same way as definition names. Start conditions can be used to restrict
       the matching of regular expressions to one or more states as described in Regular Expressions in lex.

       Implementations shall accept either of the following two mutually-exclusive declarations in the Definitions section:

       %array    Declare the type of yytext to be a null-terminated character array.

       %pointer  Declare the type of yytext to be a pointer to a null-terminated character string.

       The default type of yytext is implementation-defined. If an application refers to yytext outside of  the  scanner  source
       file  (that is, via an extern), the application shall include the appropriate %array or %pointer declaration in the scan‐
       ner source file.

       Implementations shall accept declarations in the Definitions section for setting certain internal table sizes. The decla‐
       rations are shown in the following table.

                                                 Table: Table Size Declarations in lex

                                  ┌────────────┬────────────────────────────────────┬───────────────┐
                                  │Declaration │            Description             │ Minimum Value │
                                  ├────────────┼────────────────────────────────────┼───────────────┤
                                  │%p n        │ Number of positions                │     2500      │
                                  │%n n        │ Number of states                   │      500      │
                                  │%a n        │ Number of transitions              │     2000      │
                                  │%e n        │ Number of parse tree nodes         │     1000      │
                                  │%k n        │ Number of packed character classes │     1000      │
                                  │%o n        │ Size of the output array           │     3000      │
                                  └────────────┴────────────────────────────────────┴───────────────┘
       In  the  table, n represents a positive decimal integer, preceded by one or more &amp;lt;blank&amp;gt; characters. The exact meaning of
       these table size numbers is implementation-defined. The implementation shall document how these numbers  affect  the  lex
       utility  and how they are related to any output that may be generated by the implementation should limitations be encoun‐
       tered during the execution of lex.  It shall be possible to determine from this output which of  the  table  size  values
       needs to be modified to permit lex to successfully generate tables for the input language. The values in the column Mini‐
       mum Value represent the lowest values conforming implementations shall provide.

   Rules in lex
       The rules in lex source files are a table in which the left column contains regular expressions and the right column con‐
       tains actions (C program fragments) to be executed when the expressions are recognized.

           ERE action
           ERE action
           ...

       The  extended regular expression (ERE) portion of a row shall be separated from action by one or more &amp;lt;blank&amp;gt; characters.
       A regular expression containing &amp;lt;blank&amp;gt; characters shall be recognized under one of the following conditions:

        *  The entire expression appears within double-quotes.

        *  The &amp;lt;blank&amp;gt; characters appear within double-quotes or square brackets.

        *  Each &amp;lt;blank&amp;gt; is preceded by a &amp;lt;backslash&amp;gt; character.

   User Subroutines in lex
       Anything in the user subroutines section shall be copied to lex.yy.c following yylex().

   Regular Expressions in lex
       The lex utility shall support the set of extended regular expressions (see the Base Definitions volume  of  POSIX.1‐2008,
       Section 9.4, Extended Regular Expressions), with the following additions and exceptions to the syntax:

       "..."     Any  string  enclosed  in  double-quotes shall represent the characters within the double-quotes as themselves,
                 except that &amp;lt;backslash&amp;gt;-escapes (which  appear  in  the  following  table)  shall  be  recognized.  Any  &amp;lt;back‐
                 slash&amp;gt;-escape  sequence  shall  be  terminated  by the closing quote. For example, "\01""1" represents a single
                 string: the octal value 1 followed by the character '1'.

       &amp;lt;state&amp;gt;r, &amp;lt;state1,state2,...&amp;gt;r
                 The regular expression r shall be matched only when the program is in one of the start conditions indicated  by
                 state, state1, and so on; see Actions in lex.  (As an exception to the typographical conventions of the rest of
                 this volume of POSIX.1‐2008, in this case &amp;lt;state&amp;gt; does not represent a metavariable,  but  the  literal  angle-
                 bracket characters surrounding a symbol.) The start condition shall be recognized as such only at the beginning
                 of a regular expression.

       r/x       The regular expression r shall be matched only if it is followed by an occurrence of regular expression x (x is
                 the  instance of trailing context, further defined below). The token returned in yytext shall only match r.  If
                 the trailing portion of r matches the beginning of x, the  result  is  unspecified.  The  r  expression  cannot
                 include  further  trailing  context  or  the '$' (match-end-of-line) operator; x cannot include the '^' (match-
                 beginning-of-line) operator, nor trailing context, nor the '$' operator. That is, only one occurrence of trail‐
                 ing  context  is allowed in a lex regular expression, and the '^' operator only can be used at the beginning of
                 such an expression.

       {name}    When name is one of the substitution symbols from the Definitions section, the string, including the  enclosing
                 braces,  shall be replaced by the substitute value. The substitute value shall be treated in the extended regu‐
                 lar expression as if it were enclosed in parentheses. No substitution shall occur if  {name}  occurs  within  a
                 bracket expression or within double-quotes.

       Within  an  ERE, a &amp;lt;backslash&amp;gt; character shall be considered to begin an escape sequence as specified in the table in the
       Base Definitions volume of POSIX.1‐2008, Chapter 5, File Format Notation ('\\',  '\a',  '\b',  '\f',  '\n',  '\r',  '\t',
       '\v').  In addition, the escape sequences in the following table shall be recognized.

       A  literal  &amp;lt;newline&amp;gt; cannot occur within an ERE; the escape sequence '\n' can be used to represent a &amp;lt;newline&amp;gt;.  A &amp;lt;new‐
       line&amp;gt; shall not be matched by a period operator.

                                                    Table: Escape Sequences in lex

                                   ┌─────────┬──────────────────────────┬──────────────────────────┐
                                   │ Escape  │                          │                          │
                                   │Sequence │       Description        │         Meaning          │
                                   ├─────────┼──────────────────────────┼──────────────────────────┤
                                   │\digits  │ A &amp;lt;backslash&amp;gt; character  │ The character whose      │
                                   │         │ followed by the longest  │ encoding is represented  │
                                   │         │ sequence of one, two, or │ by the one, two, or      │
                                   │         │ three octal-digit char‐  │ three-digit octal inte‐  │
                                   │         │ acters (01234567). If    │ ger. Multi-byte charac‐  │
                                   │         │ all of the digits are 0  │ ters require multiple,   │
                                   │         │ (that is, representation │ concatenated escape      │
                                   │         │ of the NUL character),   │ sequences of this type,  │
                                   │         │ the behavior is unde‐    │ including the leading    │
                                   │         │ fined.                   │ &amp;lt;backslash&amp;gt; for each     │
                                   │         │                          │ byte.                    │
                                   ├─────────┼──────────────────────────┼──────────────────────────┤
                                   │\xdigits │ A &amp;lt;backslash&amp;gt; character  │ The character whose      │
                                   │         │ followed by the longest  │ encoding is represented  │
                                   │         │ sequence of hexadecimal- │ by the hexadecimal inte‐ │
                                   │         │ digit characters         │ ger.                     │
                                   │         │ (01234567abcdefABCDEF).  │                          │
                                   │         │ If all of the digits are │                          │
                                   │         │ 0 (that is, representa‐  │                          │
                                   │         │ tion of the NUL charac‐  │                          │
                                   │         │ ter), the behavior is    │                          │
                                   │         │ undefined.               │                          │
                                   ├─────────┼──────────────────────────┼──────────────────────────┤
                                   │\c       │ A &amp;lt;backslash&amp;gt; character  │ The character 'c',       │
                                   │         │ followed by any charac‐  │ unchanged.               │
                                   │         │ ter not described in     │                          │
                                   │         │ this table or in the ta‐ │                          │
                                   │         │ ble in the Base Defini‐  │                          │
                                   │         │ tions volume of          │                          │
                                   │         │ POSIX.1‐2008, Chapter 5, │                          │
                                   │         │ File Format Notation     │                          │
                                   │         │ ('\\', '\a', '\b', '\f', │                          │
                                   │         │ '\n', '\r', '\t', '\v'). │                          │
                                   └─────────┴──────────────────────────┴──────────────────────────┘
       Note:     If  a  '\x'  sequence  needs  to  be  immediately followed by a hexadecimal digit character, a sequence such as
                 "\x1""1" can be used, which represents a character containing the value 1, followed by the character '1'.

       The order of precedence given to extended regular expressions for lex differs from that specified in the Base Definitions
       volume  of POSIX.1‐2008, Section 9.4, Extended Regular Expressions.  The order of precedence for lex shall be as shown in
       the following table, from high to low.

       Note:     The escaped characters entry is not meant to imply that these are operators, but they are included in the table
                 to  show  their relationships to the true operators. The start condition, trailing context, and anchoring nota‐
                 tions have been omitted from the table because of the placement restrictions described in  this  section;  they
                 can only appear at the beginning or ending of an ERE.

                                                     Table: ERE Precedence in lex

                                      ┌──────────────────────────────────┬──────────────────────┐
                                      │   Extended Regular Expression    │      Precedence      │
                                      ├──────────────────────────────────┼──────────────────────┤
                                      │collation-related bracket symbols │ [= =]  [: :]  [. .]  │
                                      │escaped characters                │ \&amp;lt;special character&amp;gt; │
                                      │bracket expression                │ [ ]                  │
                                      │quoting                           │ "..."                │
                                      │grouping                          │ ( )                  │
                                      │definition                        │ {name}               │
                                      │single-character RE duplication   │ * + ?                │
                                      │concatenation                     │                      │
                                      │interval expression               │ {m,n}                │
                                      │alternation                       │ |                    │
                                      └──────────────────────────────────┴──────────────────────┘
       The  ERE  anchoring  operators  '^' and '$' do not appear in the table. With lex regular expressions, these operators are
       restricted in their use: the '^' operator can only be used at the beginning of an entire regular expression, and the  '$'
       operator  only  at  the  end.  The  operators  apply  to  the  entire  regular expression. Thus, for example, the pattern
       "(^abc)|(def$)" is undefined; it can instead be written as two separate rules, one with the regular expression "^abc" and
       one  with  "def$",  which  share  a  common  action  via  the special '|' action (see below). If the pattern were written
       "^abc|def$", it would match either "abc" or "def" on a line by itself.

       Unlike the general ERE rules, embedded anchoring is not allowed by most historical lex  implementations.  An  example  of
       embedded  anchoring  would be for patterns such as "(^| )foo( |$)" to match "foo" when it exists as a complete word. This
       functionality can be obtained using existing lex features:

           ^foo/[ \n]      |
           " foo"/[ \n]    /* Found foo as a separate word. */

       Note also that '$' is a form of trailing context (it is equivalent to "/\n") and as such  cannot  be  used  with  regular
       expressions containing another instance of the operator (see the preceding discussion of trailing context).

       The additional regular expressions trailing-context operator '/' can be used as an ordinary character if presented within
       double-quotes, "/"; preceded by a &amp;lt;backslash&amp;gt;, "\/"; or within a bracket expression, "[/]".  The start-condition '&amp;lt;'  and
       '&amp;gt;' operators shall be special only in a start condition at the beginning of a regular expression; elsewhere in the regu‐
       lar expression they shall be treated as ordinary characters.

   Actions in lex
       The action to be taken when an ERE is matched can be a C program fragment or the special  actions  described  below;  the
       program  fragment  can  contain one or more C statements, and can also include special actions. The empty C statement ';'
       shall be a valid action; any string in the lex.yy.c input that matches the pattern portion of such a rule is  effectively
       ignored or skipped. However, the absence of an action shall not be valid, and the action lex takes in such a condition is
       undefined.

       The specification for an action, including C statements and special actions, can extend across several lines if  enclosed
       in braces:

           ERE &amp;lt;one or more blanks&amp;gt; { program statement
                                      program statement }

       The program statements shall not contain unbalanced curly brace preprocessing tokens.

       The default action when a string in the input to a lex.yy.c program is not matched by any expression shall be to copy the
       string to the output. Because the default behavior of a program generated by lex is to read the input and copy it to  the
       output,  a  minimal  lex source program that has just "%%" shall generate a C program that simply copies the input to the
       output unchanged.

       Four special actions shall be available:

           |   ECHO;   REJECT;   BEGIN

       |         The action '|' means that the action for the next rule is the action for this rule.   Unlike  the  other  three
                 actions, '|' cannot be enclosed in braces or be &amp;lt;semicolon&amp;gt;-terminated; the application shall ensure that it is
                 specified alone, with no other actions.

       ECHO;     Write the contents of the string yytext on the output.

       REJECT;   Usually only a single expression is matched by a given string in the input.  REJECT  means  ``continue  to  the
                 next expression that matches the current input'', and shall cause whatever rule was the second choice after the
                 current rule to be executed for the same input. Thus, multiple rules can be matched and executed for one  input
                 string  or  overlapping  input strings. For example, given the regular expressions "xyz" and "xy" and the input
                 "xyz", usually only the regular expression "xyz" would match. The next attempted match would start after z.  If
                 the  last  action  in  the "xyz" rule is REJECT, both this rule and the "xy" rule would be executed. The REJECT
                 action may be implemented in such a fashion that flow of control does not continue after  it,  as  if  it  were
                 equivalent  to  a  goto to another part of yylex().  The use of REJECT may result in somewhat larger and slower
                 scanners.

       BEGIN     The action:

                     BEGIN newstate;

                 switches the state (start condition) to newstate.  If the string newstate has not been declared previously as a
                 start  condition in the Definitions section, the results are unspecified. The initial state is indicated by the
                 digit '0' or the token INITIAL.

       The functions or macros described below are accessible to user code included in the lex input. It is unspecified  whether
       they appear in the C code output of lex, or are accessible only through the −l l operand to c99 (the lex library).

       int yylex(void)
             Performs  lexical  analysis  on  the input; this is the primary function generated by the lex utility. The function
             shall return zero when the end of input is reached; otherwise, it shall return non-zero values (tokens)  determined
             by the actions that are selected.

       int yymore(void)
             When  called, indicates that when the next input string is recognized, it is to be appended to the current value of
             yytext rather than replacing it; the value in yyleng shall be adjusted accordingly.

       int yyless(int n)
             Retains n initial characters in yytext, NUL-terminated, and treats the remaining characters as if they had not been
             read; the value in yyleng shall be adjusted accordingly.

       int input(void)
             Returns  the  next  character from the input, or zero on end-of-file. It shall obtain input from the stream pointer
             yyin, although possibly via an intermediate buffer. Thus, once scanning has begun, the effect of altering the value
             of yyin is undefined. The character read shall be removed from the input stream of the scanner without any process‐
             ing by the scanner.

       int unput(int c)
             Returns the character 'c' to the input; yytext and yyleng are undefined until the next expression is  matched.  The
             result of using unput() for more characters than have been input is unspecified.

       The  following  functions shall appear only in the lex library accessible through the −l l operand; they can therefore be
       redefined by a conforming application:

       int yywrap(void)
             Called by yylex() at end-of-file; the default yywrap() shall always return 1. If the application  requires  yylex()
             to  continue  processing  with another source of input, then the application can include a function yywrap(), which
             associates another file with the external variable FILE * yyin and shall return a value of zero.

       int main(int argc, char *argv[])
             Calls yylex() to perform lexical analysis, then exits. The user code can contain main() to perform application-spe‐
             cific operations, calling yylex() as applicable.

       Except for input(), unput(), and main(), all external and static names generated by lex shall begin with the prefix yy or
       YY.

<!-- a42f9355-e63b-4205-ac0b-0b19b24faf9d <=< ACCEPT -->EXIT STATUS
       The following exit values shall be returned:

        0    Successful completion.

       &amp;gt;0    An error occurred.<!-- ACCEPT >=> a42f9355-e63b-4205-ac0b-0b19b24faf9d -->

CONSEQUENCES OF ERRORS
       Default.

       The following sections are informative.

APPLICATION USAGE
       Conforming applications are warned that in the Rules section, an ERE without an action is not acceptable, but need not be
       detected as erroneous by lex.  This may result in compilation or runtime errors.

       The purpose of input() is to take characters off the input stream and discard them as far as the lexical analysis is con‐
       cerned. A common use is to discard the body of a comment once the beginning of a comment is recognized.

       The lex utility is not fully internationalized in its treatment of regular expressions in the lex source code  or  gener‐
       ated  lexical  analyzer.  It would seem desirable to have the lexical analyzer interpret the regular expressions given in
       the lex source according to the environment specified when the lexical analyzer is executed, but  this  is  not  possible
       with  the  current  lex technology. Furthermore, the very nature of the lexical analyzers produced by lex must be closely
       tied to the lexical requirements of the input language being described, which is frequently locale-specific anyway.  (For
       example, writing an analyzer that is used for French text is not automatically useful for processing other languages.)

EXAMPLES
       The following is an example of a lex program that implements a rudimentary scanner for a Pascal-like syntax:

           %{
           /* Need this for the call to atof() below. */
           #include &amp;lt;math.h&amp;gt;
           /* Need this for printf(), fopen(), and stdin below. */
           #include &amp;lt;stdio.h&amp;gt;
           %}

           DIGIT    [0−9]
           ID       [a−z][a−z0−9]*

           %%

           {DIGIT}+ {
               printf("An integer: %s (%d)\n", yytext,
                   atoi(yytext));
               }

           {DIGIT}+"."{DIGIT}*        {
               printf("A float: %s (%g)\n", yytext,
                   atof(yytext));
               }

           if|then|begin|end|procedure|function        {
               printf("A keyword: %s\n", yytext);
               }

           {ID}    printf("An identifier: %s\n", yytext);

           "+"|"−"|"*"|"/"        printf("An operator: %s\n", yytext);

           "{"[^}\n]*"}"    /* Eat up one-line comments. */

           [ \t\n]+        /* Eat up white space. */

           .  printf("Unrecognized character: %s\n", yytext);

           %%

           int main(int argc, char *argv[])
           {
               ++argv, −−argc;  /* Skip over program name. */
               if (argc &amp;gt; 0)
                   yyin = fopen(argv[0], "r");
               else
                   yyin = stdin;

               yylex();
           }

RATIONALE
       Even  though  the  −c option and references to the C language are retained in this description, lex may be generalized to
       other languages, as was done at one time for EFL, the Extended FORTRAN Language. Since the  lex  input  specification  is
       essentially language-independent, versions of this utility could be written to produce Ada, Modula-2, or Pascal code, and
       there are known historical implementations that do so.

       The current description of lex bypasses the issue of dealing with internationalized EREs in the lex source code or gener‐
       ated  lexical  analyzer.  If  it  follows  the model used by awk (the source code is assumed to be presented in the POSIX
       locale, but input and output are in the locale specified by the environment variables), then the tables  in  the  lexical
       analyzer produced by lex would interpret EREs specified in the lex source in terms of the environment variables specified
       when lex was executed. The desired effect would be to have the lexical analyzer interpret  the  EREs  given  in  the  lex
       source  according  to  the environment specified when the lexical analyzer is executed, but this is not possible with the
       current lex technology.

       The description of octal and hexadecimal-digit escape sequences agrees with the ISO C standard use of escape sequences.

       Earlier versions of this standard allowed for implementations with bytes other than eight bits, but this has  been  modi‐
       fied in this version.

       There  is no detailed output format specification. The observed behavior of lex under four different historical implemen‐
       tations was that none of these implementations consistently reported the line numbers for  error  and  warning  messages.
       Furthermore,  there  was  a  desire that lex be allowed to output additional diagnostic messages. Leaving message formats
       unspecified avoids these formatting questions and problems with internationalization.

       Although the %x specifier for exclusive start conditions is not historical practice, it is believed to be a minor  change
       to  historical  implementations  and  greatly  enhances  the usability of lex programs since it permits an application to
       obtain the expected functionality with fewer statements.

       The %array and %pointer declarations were added as a compromise between  historical  systems.   The  System  V-based  lex
       copies  the  matched  text  to a yytext array. The flex program, supported in BSD and GNU systems, uses a pointer. In the
       latter case, significant performance improvements are available  for  some  scanners.  Most  historical  programs  should
       require  no  change  in porting from one system to another because the string being referenced is null-terminated in both
       cases. (The method used by flex in its case is to null-terminate the token in place by  remembering  the  character  that
       used  to  come  right  after  the token and replacing it before continuing on to the next scan.) Multi-file programs with
       external references to yytext outside the scanner source file should continue to operate on their historical systems, but
       would require one of the new declarations to be considered strictly portable.

       The  description  of  EREs  avoids unnecessary duplication of ERE details because their meanings within a lex ERE are the
       same as that for the ERE in this volume of POSIX.1‐2008.

       The reason for the undefined condition associated with text beginning with a &amp;lt;blank&amp;gt; or within "%{"  and  "%}"  delimiter
       lines  appearing  in  the  Rules  section  is  historical  practice.  Both the BSD and System V lex copy the indented (or
       enclosed) input in the Rules section (except at the beginning) to unreachable areas of the yylex() function (the code  is
       written  directly after a break statement). In some cases, the System V lex generates an error message or a syntax error,
       depending on the form of indented input.

       The intention in breaking the list of functions into those that may appear in lex.yy.c versus those that only  appear  in
       libl.a is that only those functions in libl.a can be reliably redefined by a conforming application.

       The  descriptions  of  standard output and standard error are somewhat complicated because historical lex implementations
       chose to issue diagnostic messages to standard output (unless −t was  given).  POSIX.1‐2008  allows  this  behavior,  but
       leaves an opening for the more expected behavior of using standard error for diagnostics.  Also, the System V behavior of
       writing the statistics when any table sizes are given is allowed, while BSD-derived systems can avoid it. The  programmer
       can always precisely obtain the desired results by using either the −t or −n options.

       The  OPERANDS  section  does not mention the use of − as a synonym for standard input; not all historical implementations
       support such usage for any of the file operands.

       A description of the translation table was deleted from early proposals because of its relatively low usage in historical
       applications.

       The  change  to  the definition of the input() function that allows buffering of input presents the opportunity for major
       performance gains in some applications.

       The following examples clarify the differences between lex regular expressions and regular  expressions  appearing  else‐
       where  in  this  volume  of  POSIX.1‐2008.  For  regular  expressions  of the form "r/x", the string matching r is always
       returned; confusion may arise when the beginning of x matches the trailing portion of r.  For example, given the  regular
       expression  "a*b/cc"  and the input "aaabcc", yytext would contain the string "aaab" on this match. But given the regular
       expression "x*/xy" and the input "xxxy", the token xxx, not xx, is returned by some implementations because  xxx  matches
       "x*".

       In  the  rule  "ab*/bc",  the  "b*"  at the end of r extends r's match into the beginning of the trailing context, so the
       result is unspecified. If this rule were "ab/bc", however, the rule matches the text "ab" when it is followed by the text
       "bc".  In this latter case, the matching of r cannot extend into the beginning of x, so the result is specified.

FUTURE DIRECTIONS
       None.

SEE ALSO
       c99, ed, yacc

       The  Base  Definitions volume of POSIX.1‐2008, Chapter 5, File Format Notation, Chapter 8, Environment Variables, Chapter
       9, Regular Expressions, Section 12.2, Utility Syntax Guidelines

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013  Edition,  Standard  for
       Information  Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7, Copy‐
       right (C) 2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This  is  POSIX.1-2008
       with  the  2013  Technical  Corrigendum 1 applied.) In the event of any discrepancy between this version and the original
       IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the  referee  document.  The  original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any  typographical  or formatting errors that appear in this page are most likely to have been introduced during the con‐
       version of the source files to man page format. To report such errors,  see  https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .
<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->
IEEE/The Open Group                                           2013                                                       LEX(1P)
LINK(1)                                                   User Commands                                                  LINK(1)

NAME
       link - call the link function to create a link to a file

SYNOPSIS
       link FILE1 FILE2
       link OPTION

DESCRIPTION
       Call the link function to create a link named FILE2 to an existing FILE1.

       --help display this help and exit

       --version
              output version information and exit

AUTHOR
       Written by Michael Stone.

<!-- 30b0cf8a-458a-435b-a2e0-993472636e53 <=< ACCEPT -->REPORTING BUGS
       GNU coreutils online help: &amp;lt;http://www.gnu.org/software/coreutils/&amp;gt;
       Report link translation bugs to &amp;lt;http://translationproject.org/team/&amp;gt;

COPYRIGHT
       Copyright    ©    2016   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3   or   later
       &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.<!-- ACCEPT >=> 30b0cf8a-458a-435b-a2e0-993472636e53 -->

SEE ALSO
       link(2)

       Full documentation at: &amp;lt;http://www.gnu.org/software/coreutils/link&amp;gt;
       or available locally via: info '(coreutils) link invocation'

GNU coreutils 8.26                                        November 2016                                                  LINK(1)
LN(1)                                                     User Commands                                                    LN(1)

NAME
       ln - make links between files

SYNOPSIS
       ln [OPTION]... [-T] TARGET LINK_NAME   (1st form)
       ln [OPTION]... TARGET                  (2nd form)
       ln [OPTION]... TARGET... DIRECTORY     (3rd form)
       ln [OPTION]... -t DIRECTORY TARGET...  (4th form)

DESCRIPTION
       In  the  1st form, create a link to TARGET with the name LINK_NAME.  In the 2nd form, create a link to TARGET in the cur‐
       rent directory.  In the 3rd and 4th forms, create links to each TARGET in DIRECTORY.  Create hard links by default,  sym‐
       bolic  links  with  --symbolic.  By default, each destination (name of new link) should not already exist.  When creating
       hard links, each TARGET must exist.  Symbolic links can hold arbitrary text; if later resolved, a relative link is inter‐
       preted in relation to its parent directory.

       Mandatory arguments to long options are mandatory for short options too.

       --backup[=CONTROL]
              make a backup of each existing destination file

       -b     like --backup but does not accept an argument

       -d, -F, --directory
              allow the superuser to attempt to hard link directories (note: will probably fail due to system restrictions, even
              for the superuser)

       -f, --force
              remove existing destination files

       -i, --interactive
              prompt whether to remove destinations

       -L, --logical
              dereference TARGETs that are symbolic links

       -n, --no-dereference
              treat LINK_NAME as a normal file if it is a symbolic link to a directory

       -P, --physical
              make hard links directly to symbolic links

       -r, --relative
              create symbolic links relative to link location

       -s, --symbolic
              make symbolic links instead of hard links

       -S, --suffix=SUFFIX
              override the usual backup suffix

       -t, --target-directory=DIRECTORY
              specify the DIRECTORY in which to create the links

       -T, --no-target-directory
              treat LINK_NAME as a normal file always

       -v, --verbose
              print name of each linked file

       --help display this help and exit

       --version
              output version information and exit

       The backup suffix is '~', unless set with --suffix or SIMPLE_BACKUP_SUFFIX.  The version control method may  be  selected
       via the --backup option or through the VERSION_CONTROL environment variable.  Here are the values:

       none, off
              never make backups (even if --backup is given)

       numbered, t
              make numbered backups

       existing, nil
              numbered if numbered backups exist, simple otherwise

       simple, never
              always make simple backups

       Using  -s  ignores  -L  and -P.  Otherwise, the last option specified controls behavior when a TARGET is a symbolic link,
       defaulting to -P.

AUTHOR
       Written by Mike Parker and David MacKenzie.

<!-- 30b0cf8a-458a-435b-a2e0-993472636e53 <=< ACCEPT -->REPORTING BUGS
       GNU coreutils online help: &amp;lt;http://www.gnu.org/software/coreutils/&amp;gt;
       Report ln translation bugs to &amp;lt;http://translationproject.org/team/&amp;gt;

COPYRIGHT
       Copyright   ©   2016   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3    or    later
       &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.<!-- ACCEPT >=> 30b0cf8a-458a-435b-a2e0-993472636e53 -->

SEE ALSO
       link(2), symlink(2)

       Full documentation at: &amp;lt;http://www.gnu.org/software/coreutils/ln&amp;gt;
       or available locally via: info '(coreutils) ln invocation'

GNU coreutils 8.26                                        November 2016                                                    LN(1)
LOCALE(1)                                               Linux User Manual                                              LOCALE(1)

NAME
       locale - get locale-specific information

SYNOPSIS
       locale [option]
       locale [option] -a
       locale [option] -m
       locale [option] name...

DESCRIPTION
       The locale command displays information about the current locale, or all locales, on standard output.

       When  invoked  without  arguments,  locale displays the current locale settings for each locale category (see locale(5)),
       based on the settings of the environment variables that control the locale (see locale(7)).  Values for variables set  in
       the environment are printed without double quotes, implied values are printed with double quotes.

       If either the -a or the -m option (or one of their long-format equivalents) is specified, the behavior is as follows:

       -a, --all-locales
              Display a list of all available locales.  The -v option causes the LC_IDENTIFICATION metadata about each locale to
              be included in the output.

       -m, --charmaps
              Display the available charmaps (character set description files).  To display the current character  set  for  the
              locale, use locale -c charmap.

       The  locale command can also be provided with one or more arguments, which are the names of locale keywords (for example,
       date_fmt, ctype-class-names, yesexpr, or decimal_point) or locale categories (for example,  LC_CTYPE  or  LC_TIME).   For
       each argument, the following is displayed:

       *  For a locale keyword, the value of that keyword to be displayed.

       *  For a locale category, the values of all keywords in that category are displayed.

       When arguments are supplied, the following options are meaningful:

       -c, --category-name
              For  a category name argument, write the name of the locale category on a separate line preceding the list of key‐
              word values for that category.

              For a keyword name argument, write the name of the locale category for this keyword on a separate  line  preceding
              the keyword value.

              This  option  improves  readability  when  multiple  name arguments are specified.  It can be combined with the -k
              option.

       -k, --keyword-name
              For each keyword whose value is being displayed, include also the name of that keyword, so that the output has the
              format:

                  keyword="value"

       The locale command also knows about the following options:

       -v, --verbose
              Display additional information for some command-line option and argument combinations.

       -?, --help
              Display a summary of command-line options and arguments and exit.

       --usage
              Display a short usage message and exit.

       -V, --version
              Display the program version and exit.

FILES
       /usr/lib/locale/locale-archive
              Usual default locale archive location.

       /usr/share/i18n/locales
              Usual default path for locale definition files.

CONFORMING TO
       POSIX.1-2001, POSIX.1-2008.

EXAMPLE
       $ locale
       LANG=en_US.UTF-8
       LC_CTYPE="en_US.UTF-8"
       LC_NUMERIC="en_US.UTF-8"
       LC_TIME="en_US.UTF-8"
       LC_COLLATE="en_US.UTF-8"
       LC_MONETARY="en_US.UTF-8"
       LC_MESSAGES="en_US.UTF-8"
       LC_PAPER="en_US.UTF-8"
       LC_NAME="en_US.UTF-8"
       LC_ADDRESS="en_US.UTF-8"
       LC_TELEPHONE="en_US.UTF-8"
       LC_MEASUREMENT="en_US.UTF-8"
       LC_IDENTIFICATION="en_US.UTF-8"
       LC_ALL=

       $ locale date_fmt
       %a %b %e %H:%M:%S %Z %Y

       $ locale -k date_fmt
       date_fmt="%a %b %e %H:%M:%S %Z %Y"

       $ locale -ck date_fmt
       LC_TIME
       date_fmt="%a %b %e %H:%M:%S %Z %Y"

       $ locale LC_TELEPHONE
       +%c (%a) %l
       (%a) %l
       11
       1
       UTF-8

       $ locale -k LC_TELEPHONE
       tel_int_fmt="+%c (%a) %l"
       tel_dom_fmt="(%a) %l"
       int_select="11"
       int_prefix="1"
       telephone-codeset="UTF-8"

       The  following  example  compiles  a  custom  locale  from  the  ./wrk  directory with the localedef(1) utility under the
       $HOME/.locale directory, then tests the result with the date(1) command, and then sets the environment variables  LOCPATH
       and LANG in the shell profile file so that the custom locale will be used in the subsequent user sessions:

       $ mkdir -p $HOME/.locale
       $ I18NPATH=./wrk/ localedef -f UTF-8 -i fi_SE $HOME/.locale/fi_SE.UTF-8
       $ LOCPATH=$HOME/.locale LC_ALL=fi_SE.UTF-8 date
       $ echo "export LOCPATH=\$HOME/.locale" &amp;gt;&amp;gt; $HOME/.bashrc
       $ echo "export LANG=fi_SE.UTF-8" &amp;gt;&amp;gt; $HOME/.bashrc

SEE ALSO
       localedef(1), charmap(5), locale(5), locale(7)

COLOPHON
       This  page  is  part  of  release  4.09  of the Linux man-pages project.  A description of the project, information about
       reporting bugs, and the latest version of this page, can be found at https://www.kernel.org/doc/man-pages/.

Linux                                                      2016-03-15                                                  LOCALE(1)
LOCALEDEF(1)                                            Linux User Manual                                           LOCALEDEF(1)

NAME
       localedef - compile locale definition files

SYNOPSIS
       localedef [options] outputpath
       localedef --list-archive [options]
       localedef --delete-from-archive [options] localename ...
       localedef --add-to-archive [options] compiledpath
       localedef --version
       localedef --help
       localedef --usage

DESCRIPTION
       The  localedef  program reads the indicated charmap and input files, compiles them to a binary form quickly usable by the
       locale functions in the C library (setlocale(3), localeconv(3), etc.), and places the output in outputpath.

       The outputpath argument is interpreted as follows:

       *  If outputpath contains a slash character ('/'), it is interpreted as the name of the directory where the output  defi‐
          nitions  are to be stored.  In this case, there is a separate output file for each locale category (LC_TIME, LC_NUMER‐
          IC, and so on).

       *  If the --no-archive option is used, outputpath is the name of a subdirectory  in  /usr/lib/locale  where  per-category
          compiled files are placed.

       *  Otherwise,  outputpath  is the name of a locale and the compiled locale data is added to the archive file /usr/lib/lo‐
          cale/locale-archive.  A locale archive is a memory-mapped file which contains all the system-provided locales;  it  is
          used by all localized programs when the environment variable LOCPATH is not set.

       In any case, localedef aborts if the directory in which it tries to write locale files has not already been created.

       If  no charmapfile is given, the value ANSI_X3.4-1968 (for ASCII) is used by default.  If no inputfile is given, or if it
       is given as a dash (-), localedef reads from standard input.

OPTIONS
   Operation-selection options
       A few options direct localedef to do something other than compile locale definitions.  Only one of these  options  should
       be used at a time.

       --delete-from-archive
              Delete the named locales from the locale archive file.

       --list-archive
              List the locales contained in the locale archive file.

       --add-to-archive
              Add the compiledpath directories to the locale archive file.  The directories should have been created by previous
              runs of localedef, using --no-archive.

   Other options
       Some of the following options are sensible only for certain operations; generally, it should be self-evident which ones.

       -f charmapfile, --charmap=charmapfile
              Specify the file that defines the character set that is used by the input file.  If charmapfile contains  a  slash
              character ('/'), it is interpreted as the name of the character map.  Otherwise, the file is sought in the current
              directory and  the  default  directory  for  character  maps.   If  the  environment  variable  I18NPATH  is  set,
              $I18NPATH/charmaps/ and $I18NPATH/ are also searched after the current directory.  The default directory for char‐
              acter maps is printed by localedef --help.

       -i inputfile, --inputfile=inputfile
              Specify the locale definition file to compile.  The file is sought in the current directory and the default direc‐
              tory  for  locale definition files.  If the environment variable I18NPATH is set, $I18NPATH/locales/ and $I18NPATH
              are also searched after the current directory.  The default directory for locale definition files  is  printed  by
              localedef --help.

       -u repertoirefile, --repertoire-map=repertoirefile
              Read  mappings from symbolic names to Unicode code points from repertoirefile.  If repertoirefile contains a slash
              character ('/'), it is interpreted as the pathname of the repertoire map.  Otherwise, the file is  sought  in  the
              current  directory  and  the  default directory for repertoire maps.  If the environment variable I18NPATH is set,
              $I18NPATH/repertoiremaps/ and $I18NPATH are also searched after the current directory.  The default directory  for
              repertoire maps is printed by localedef --help.

       -A aliasfile, --alias-file=aliasfile
              Use aliasfile to look up aliases for locale names.  There is no default aliases file.

       --prefix=pathname
              Set the prefix to be prepended to the full archive pathname.  By default, the prefix is empty.  Setting the prefix
              to foo, the archive would be placed in foo/usr/lib/locale/locale-archive.

       -c, --force
              Write the output files even if warnings were generated about the input file.

       -v, --verbose
              Generate extra warnings about errors that are normally ignored.

       --quiet
              Suppress all notifications and warnings, and report only fatal errors.

       --posix
              Conform strictly to POSIX.  Implies --verbose.  This option currently has no other effect.  POSIX  conformance  is
              assumed if the environment variable POSIXLY_CORRECT is set.

       --replace
              Replace  a  locale in the locale archive file.  Without this option, if the locale is in the archive file already,
              an error occurs.

       --no-archive
              Do not use the locale archive file, instead create outputpath as a subdirectory in the same directory as  the  lo‐
              cale  archive file, and create separate output files for locale categories in it.  This is helpful to prevent sys‐
              tem locale archive updates from overwriting custom locales created with localedef.

       -?, --help
              Print a usage summary and exit.  Also prints the default paths used by localedef.

       --usage
              Print a short usage summary and exit.

       -V, --version
              Print the version number, license, and disclaimer of warranty for localedef.

EXIT STATUS
       One of the following exit values can be returned by localedef:

          0         Command completed successfully.

          1         Warnings or errors occurred, output files were written.

          4         Errors encountered, no output created.

ENVIRONMENT
       POSIXLY_CORRECT
              The --posix flag is assumed if this environment variable is set.

       I18NPATH
              A colon-separated list of search directories for files.

FILES
       /usr/share/i18n/charmaps
              Usual default character map path.

       /usr/share/i18n/locales
              Usual default path for locale definition files.

       /usr/share/i18n/repertoiremaps
              Usual default repertoire map path.

       /usr/lib/locale/locale-archive
              Usual default locale archive location.

       /usr/lib/locale
              Usual default path for compiled individual locale data files.

       outputpath/LC_ADDRESS
              An output file that contains information about formatting of addresses and geography-related items.

       outputpath/LC_COLLATE
              An output file that contains information about the rules for comparing strings.

       outputpath/LC_CTYPE
              An output file that contains information about character classes.

       outputpath/LC_IDENTIFICATION
              An output file that contains metadata about the locale.

       outputpath/LC_MEASUREMENT
              An output file that contains information about locale measurements (metric versus US customary).

       outputpath/LC_MESSAGES/SYS_LC_MESSAGES
              An output file that contains information about the language messages should be printed in, and what an affirmative
              or negative answer looks like.

       outputpath/LC_MONETARY
              An output file that contains information about formatting of monetary values.

       outputpath/LC_NAME
              An output file that contains information about salutations for persons.

       outputpath/LC_NUMERIC
              An output file that contains information about formatting of nonmonetary numeric values.

       outputpath/LC_PAPER
              An output file that contains information about settings related to standard paper size.

       outputpath/LC_TELEPHONE
              An output file that contains information about formats to be used with telephone services.

       outputpath/LC_TIME
              An output file that contains information about formatting of data and time values.

CONFORMING TO
       POSIX.1-2008.

EXAMPLE
       Compile  the  locale  files for Finnish in the UTF-8 character set and add it to the default locale archive with the name
       fi_FI.UTF-8:

              localedef -f UTF-8 -i fi_FI fi_FI.UTF-8

       The next example does the same thing, but generates files into the fi_FI.UTF-8 directory which can then be used  by  pro‐
       grams  when  the environment variable LOCPATH is set to the current directory (note that the last argument must contain a
       slash):

              localedef -f UTF-8 -i fi_FI ./fi_FI.UTF-8

SEE ALSO
       locale(1), charmap(5), locale(5), repertoiremap(5), locale(7)

COLOPHON
       This page is part of release 4.09 of the Linux man-pages project.  A description of the project,  information  about  re‐
       porting bugs, and the latest version of this page, can be found at https://www.kernel.org/doc/man-pages/.

Linux                                                      2016-07-17                                               LOCALEDEF(1)
LOGGER(1)                                                 User Commands                                                LOGGER(1)

NAME
       logger - enter messages into the system log

SYNOPSIS
       logger [options] [message]

DESCRIPTION
       logger makes entries in the system log.

       When  the optional message argument is present, it is written to the log.  If it is not present, and the -f option is not
       given either, then standard input is logged.

OPTIONS
       -d, --udp
              Use datagrams (UDP) only.  By default the connection is tried to the syslog port defined in  /etc/services,  which
              is often 514 .

       -e, --skip-empty
              Ignore  empty  lines when processing files.  An empty line is defined to be a line without any characters.  Thus a
              line consisting only of whitespace is NOT considered empty.  Note that when the --prio-prefix option is specified,
              the priority is not part of the line.  Thus an empty line in this mode is a line that does not have any characters
              after the priority prefix (e.g. &amp;lt;13&amp;gt;).

       -f, --file file
              Log the contents of the specified file.  This option cannot be combined with a command-line message.

       -i     Log the PID of the logger process with each line.

       --id[=id]
              Log the PID of the logger process with each line.  When the optional argument id is specified,  then  it  is  used
              instead  of  the logger command's PID.  The use of --id=$$ (PPID) is recommended in scripts that send several mes‐
              sages.

              Note that the system logging infrastructure (for example systemd when listening  on  /dev/log)  may  follow  local
              socket  credentials  to overwrite the PID specified in the message.  logger(1) is able to set those socket creden‐
              tials to the given id, but only if you have root permissions and a process with the specified PID  exists,  other‐
              wise the socket credentials are not modified and the problem is silently ignored.

       --journald[=file]
              Write  a  systemd  journal  entry.  The entry is read from the given file, when specified, otherwise from standard
              input.  Each line must begin with a field that is accepted by journald; see systemd.journal-fields(7) for details.
              The use of a MESSAGE_ID field is generally a good idea, as it makes finding entries easy.  Examples:

                  logger --journald &amp;lt;&amp;lt;end
                  MESSAGE_ID=67feb6ffbaf24c5cbec13c008dd72309
                  MESSAGE=The dogs bark, but the caravan goes on.
                  DOGS=bark
                  CARAVAN=goes on
                  end

                  logger --journald=entry.txt

              Notice  that  --journald  will ignore values of other options, such as priority.  If priority is needed it must be
              within input, and use PRIORITY field.  The simple execution of journalctl will display MESSAGE field.   Use  jour‐
              nalctl --output json-pretty to see rest of the fields.

       --msgid msgid
              Sets  the  RFC5424  MSGID  field.  Note that the space character is not permitted inside of msgid.  This option is
              only used if --rfc5424 is specified as well; otherwise, it is silently ignored.

       -n, --server server
              Write to the specified remote syslog server instead of to the system log socket.  Unless --udp or --tcp is  speci‐
              fied, logger will first try to use UDP, but if this fails a TCP connection is attempted.

       --no-act
              Causes  everything to be done except for writing the log message to the system log, and removing the connection or
              the journal.  This option can be used together with --stderr for testing purposes.

       --octet-count
              Use the RFC 6587 octet counting framing method for sending messages.  When this option is not used, the default is
              no framing on UDP, and RFC6587 non-transparent framing (also known as octet stuffing) on TCP.

       -P, --port port
              Use the specified port.  When this option is not specified, the port defaults to syslog for udp and to syslog-conn
              for tcp connections.

       -p, --priority priority
              Enter the message into the log with the specified priority.  The priority may be specified  numerically  or  as  a
              facility.level  pair.   For example, -p local3.info logs the message as informational in the local3 facility.  The
              default is user.notice.

       --prio-prefix
              Look for a syslog prefix on every line read from standard input.  This prefix is a  decimal  number  within  angle
              brackets that encodes both the facility and the level.  The number is constructed by multiplying the facility by 8
              and then adding the level.  For example, local0.info, meaning facility=16 and level=6, becomes &amp;lt;134&amp;gt;.

              If the prefix contains no facility, the facility defaults to what is specified by the -p option.  Similarly, if no
              prefix is provided, the line is logged using the priority given with -p.

              This option doesn't affect a command-line message.

       --rfc3164
              Use the RFC 3164 BSD syslog protocol to submit messages to a remote server.

       --rfc5424[=without]
              Use  the  RFC  5424 syslog protocol to submit messages to a remote server.  The optional without argument can be a
              comma-separated list of the following values: notq, notime, nohost.

              The notq value suppresses the time-quality structured data from the submitted message.  The time-quality  informa‐
              tion shows whether the local clock was synchronized plus the maximum number of microseconds the timestamp might be
              off.  The time quality is also automatically suppressed when --sd-id timeQuality is specified.

              The notime value (which implies notq) suppresses the complete sender timestamp that is in ISO-8601 format, includ‐
              ing microseconds and timezone.

              The nohost value suppresses gethostname(2) information from the message header.

              The RFC 5424 protocol has been the default for logger since version 2.26.

       -s, --stderr
              Output the message to standard error as well as to the system log.

       --sd-id name[@digits]
              Specifies  a  structured  data  element  ID  for  an  RFC  5424  message header.  The option has to be used before
              --sd-param to introduce a new element.  The number of structured data elements is unlimited.  The  ID  (name  plus
              possibly @digits) is case-sensitive and uniquely identifies the type and purpose of the element.  The same ID must
              not exist more than once in a message.  The @digits part is required for user-defined non-standardized IDs.

              logger currently generates the timeQuality standardized element only.  RFC 5424 also describes the elements origin
              (with  parameters  ip,  enterpriseId,  software and swVersion) and meta (with parameters sequenceId, sysUpTime and
              language).  These element IDs may be specified without the @digits suffix.

       --sd-param name="value"
              Specifies a structured data element parameter, a name and value pair.  The option has to be used after --sd-id and
              may be specified more than once for the same element.  Note that the quotation marks around value are required and
              must be escaped on the command line.

                  logger --rfc5424 --sd-id zoo@123               \
                                   --sd-param tiger=\"hungry\"   \
                                   --sd-param zebra=\"running\"  \
                                   --sd-id manager@123           \
                                   --sd-param onMeeting=\"yes\"  \
                                   "this is message"

              produces:

                &amp;lt;13&amp;gt;1 2015-10-01T14:07:59.168662+02:00 ws kzak - - [timeQuality tzKnown="1" isSynced="1" syncAccuracy="218616"][zoo@123 tiger="hungry" zebra="running"][manager@123 onMeeting="yes"] this is message

       --size size
              Sets the maximum permitted message size to size.  The default is 1KiB characters, which is the limit traditionally
              used  and  specified  in  RFC 3164.  With RFC 5424, this limit has become flexible.  A good assumption is that RFC
              5424 receivers can at least process 4KiB messages.

              Most receivers accept messages larger than 1KiB over any type of syslog protocol.   As  such,  the  --size  option
              affects logger in all cases (not only when --rfc5424 was used).

              Note:  the  message-size  limit  limits  the overall message size, including the syslog header.  Header sizes vary
              depending on the selected options and the hostname length.  As a rule of thumb, headers  are  usually  not  longer
              than 50 to 80 characters.  When selecting a maximum message size, it is important to ensure that the receiver sup‐
              ports the max size as well, otherwise messages may become truncated.  Again, as a rule of thumb two  to  four  KiB
              message size should generally be OK, whereas anything larger should be verified to work.

       --socket-errors[=mode]
              Print  errors  about Unix socket connections.  The mode can be a value of off, on, or auto.  When the mode is auto
              logger will detect if the init process is systemd, and if so assumption is made /dev/log  can  be  used  early  at
              boot.  Other init systems lack of /dev/log will not cause errors that is identical with messaging using openlog(3)
              system call.  The logger(1) before version 2.26 used openlog, and hence was unable to detected  loss  of  messages
              sent to Unix sockets.

              The  default mode is auto.  When errors are not enabled lost messages are not communicated and will result to suc‐
              cessful return value of logger(1) invocation.

       -T, --tcp
              Use stream (TCP) only.  By default the connection is tried to the syslog-conn port defined in /etc/services, which
              is often 601.

       -t, --tag tag
              Mark  every  line  to  be logged with the specified tag.  The default tag is the name of the user logged in on the
              terminal (or a user name based on effective user ID).

       -u, --socket socket
              Write to the specified socket instead of to the system log socket.

       --     End the argument list.  This allows the message to start with a hyphen (-).

       -V, --version
              Display version information and exit.

       -h, --help
              Display help text and exit.

RETURN VALUE
       The logger utility exits 0 on success, and &amp;gt;0 if an error occurs.

FACILITIES AND LEVELS
       Valid facility names are:

              auth
              authpriv   for security information of a sensitive nature
              cron
              daemon
              ftp
              kern       cannot be generated from userspace process, automatically converted to user
              lpr

              mail
              news
              syslog
              user
              uucp
              local0
                to
              local7
              security   deprecated synonym for auth

       Valid level names are:

              emerg
              alert
              crit
              err
              warning
              notice
              info
              debug
              panic     deprecated synonym for emerg
              error     deprecated synonym for err
              warn      deprecated synonym for warning

       For the priority order and intended purposes of these facilities and levels, see syslog(3).

EXAMPLES
       logger System rebooted
       logger -p local0.notice -t HOSTIDM -f /dev/idmc
       logger -n loghost.example.com System rebooted

SEE ALSO
       syslog(3), journalctl(1), systemd.journal-fields(7)

STANDARDS
       The logger command is expected to be IEEE Std 1003.2 ("POSIX.2") compatible.

AVAILABILITY
       The logger command is part of the util-linux package and is available from Linux Kernel Archive ⟨ftp://ftp.kernel.org/pub
       /linux/utils/util-linux/⟩.

util-linux                                                November 2015                                                LOGGER(1)
LOGNAME(1)                                                User Commands                                               LOGNAME(1)

NAME
       logname - print user's login name

SYNOPSIS
       logname [OPTION]

DESCRIPTION
       Print the name of the current user.

       --help display this help and exit

       --version
              output version information and exit

AUTHOR
       Written by FIXME: unknown.

<!-- 30b0cf8a-458a-435b-a2e0-993472636e53 <=< ACCEPT -->REPORTING BUGS
       GNU coreutils online help: &amp;lt;http://www.gnu.org/software/coreutils/&amp;gt;
       Report logname translation bugs to &amp;lt;http://translationproject.org/team/&amp;gt;

COPYRIGHT
       Copyright    ©    2016   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3   or   later
       &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.
<!-- ACCEPT >=> 30b0cf8a-458a-435b-a2e0-993472636e53 -->
SEE ALSO
       Full documentation at: &amp;lt;http://www.gnu.org/software/coreutils/logname&amp;gt;
       or available locally via: info '(coreutils) logname invocation'

GNU coreutils 8.26                                        November 2016                                               LOGNAME(1)
lp(1)                                                      Apple Inc.                                                      lp(1)

NAME
       lp - print files

SYNOPSIS
       lp  [  -E  ]  [  -U  username ] [ -c ] [ -d destination[/instance] ] [ -h hostname[:port] ] [ -m ] [ -n num-copies ] [ -o
       option[=value] ] [ -q priority ] [ -s ] [ -t title ] [ -H handling ] [ -P page-list ] [ -- ] [ file(s) ]
       lp [ -E ] [ -U username ] [ -c ] [ -h hostname[:port] ] [ -i job-id ] [ -n num-copies ] [ -o option[=value] ] [ -q prior‐
       ity ] [ -t title ] [ -H handling ] [ -P page-list ]

DESCRIPTION
       lp submits files for printing or alters a pending job.  Use a filename of "-" to force printing from the standard input.

   THE DEFAULT DESTINATION
       CUPS provides many ways to set the default destination. The LPDEST and PRINTER environment variables are consulted first.
       If neither are set, the current default set using the lpoptions(1) command is used, followed by the default set using the
       lpadmin(8) command.

OPTIONS
       The following options are recognized by lp:

       --   Marks the end of options; use this to print a file whose name begins with a dash (-).

       -E   Forces encryption when connecting to the server.

       -U username
            Specifies the username to use when connecting to the server.

       -c   This  option  is provided for backwards-compatibility only. On systems that support it, this option forces the print
            file to be copied to the spool directory before printing.  In CUPS, print files are always sent to the scheduler via
            IPP which has the same effect.

       -d destination
            Prints files to the named printer.

       -h hostname[:port]
            Chooses an alternate server.

       -i job-id
            Specifies an existing job to modify.

       -m   Sends an email when the job is completed.

       -n copies
            Sets the number of copies to print.

       -o "name=value [ ... name=value ]"
            Sets one or more job options.  See "COMMON JOB OPTIONS" below.

       -q priority
            Sets the job priority from 1 (lowest) to 100 (highest).  The default priority is 50.

       -s   Do not report the resulting job IDs (silent mode.)

       -t "name"
            Sets the job name.

       -H hh:mm

       -H hold

       -H immediate

       -H restart

       -H resume
            Specifies  when  the  job  should be printed.  A value of immediate will print the file immediately, a value of hold
            will hold the job indefinitely, and a UTC time value (HH:MM) will hold the job until the specified UTC  (not  local)
            time.   Use a value of resume with the -i option to resume a held job.  Use a value of restart with the -i option to
            restart a completed job.

       -P page-list
            Specifies which pages to print in the document.  The list can contain a list of numbers and ranges  (#-#)  separated
            by  commas,  e.g.,  "1,3-5,16".   The page numbers refer to the output pages and not the document's original pages -
            options like "number-up" can affect the numbering of the pages.

   COMMON JOB OPTIONS
       Aside from the printer-specific options reported by the lpoptions(1) command, the following generic  options  are  avail‐
       able:

       -o collate=true
            Prints collated copies.

       -o fit-to-page
            Scales the print file to fit on the page.

       -o job-hold-until=when
            Holds  the job until the specified local time.  "when" can be "indefinite" to hold the until released, "day-time" to
            print the job between 6am and 6pm local time, "night" to print the job between 6pm  and  6am  local  time,  "second-
            shift"  to  print the job between 4pm and 12am local time, "third-shift" to print the job between 12am and 8am local
            time, or "weekend" to print the job on Saturday or Sunday.

       -o job-hold-until=hh:mm
            Holds the job until the specified time in hours and minutes UTC.

       -o job-priority=priority
            Set the priority to a value from 1 (lowest) to 100 (highest), which influences when a job is scheduled for printing.
            The default priority is typically 50.

       -o job-sheets=name
            Prints  a  cover  page (banner) with the document.  The "name" can be "classified", "confidential", "secret", "stan‐
            dard", "topsecret", or "unclassified".

       -o job-sheets=start-name,end-name
            Prints cover pages (banners) with the document.

       -o media=size
            Sets the page size to size. Most printers support at least the size names "a4", "letter", and "legal".

       -o mirror
            Mirrors each page.

       -o number-up={2|4|6|9|16}
            Prints 2, 4, 6, 9, or 16 document (input) pages on each output page.

       -o number-up-layout=layout
            Specifies the layout of pages with the "number-up" option.  The "layout"  string  can  be  "btlr",  "btrl",  "lrbt",
            "lrtb",  "rlbt",  "rltb",  "tblr", or "tbrl" - the first two letters determine the column order while the second two
            letters determine the row order.  "bt" is bottom-to-top, "lr" is left-to-right, "rl" is right-to-left, and  "tb"  is
            top-to-bottom.

       -o orientation-requested=4
            Prints the job in landscape (rotated 90 degrees counter-clockwise).

       -o orientation-requested=5
            Prints the job in landscape (rotated 90 degrees clockwise).

       -o orientation-requested=6
            Prints the job in reverse portrait (rotated 180 degrees).

       -o outputorder=reverse
            Prints pages in reverse order.

       -o page-border=border
            Prints a border around each document page.  "border" is "double", "double-thick", "single", or "single-thick".

       -o page-ranges=page-list
            Specifies  which  pages to print in the document.  The list can contain a list of numbers and ranges (#-#) separated
            by commas, e.g., "1,3-5,16".  The page numbers refer to the output pages and not the  document's  original  pages  -
            options like "number-up" can affect the numbering of the pages.

       -o sides=one-sided
            Prints on one side of the paper.

       -o sides=two-sided-long-edge
            Prints on both sides of the paper for portrait output.

       -o sides=two-sided-short-edge
            Prints on both sides of the paper for landscape output.

CONFORMING TO
       Unlike the System V printing system, CUPS allows printer names to contain any printable character except SPACE, TAB, "/",
       or "#".  Also, printer and class names are not case-sensitive.

       The -q option accepts a different range of values than the Solaris lp command,  matching  the  IPP  job  priority  values
       (1-100, 100 is highest priority) instead of the Solaris values (0-39, 0 is highest priority).

EXAMPLES
       Print two copies of a document to the default printer:

           lp -n 2 filename

       Print a double-sided legal document to a printer called "foo":

           lp -d foo -o media=legal -o sides=two-sided-long-edge filename

       Print a presentation document 2-up to a printer called "foo":

           lp -d foo -o number-up=2 filename

SEE ALSO
       cancel(1), lpadmin(8), lpoptions(1), lpq(1), lpr(1), lprm(1), lpstat(1), CUPS Online Help (http://localhost:631/help)

COPYRIGHT
       Copyright © 2007-2017 by Apple Inc.

2 May 2016                                                    CUPS                                                         lp(1)
LS(1)                                                     User Commands                                                    LS(1)

NAME
       ls - list directory contents

SYNOPSIS
       ls [OPTION]... [FILE]...

DESCRIPTION
       List  information  about  the FILEs (the current directory by default).  Sort entries alphabetically if none of -cftuvSUX
       nor --sort is specified.

       Mandatory arguments to long options are mandatory for short options too.

       -a, --all
              do not ignore entries starting with .

       -A, --almost-all
              do not list implied . and ..

       --author
              with -l, print the author of each file

       -b, --escape
              print C-style escapes for nongraphic characters

       --block-size=SIZE
              scale sizes by SIZE before printing them; e.g., '--block-size=M' prints sizes in units  of  1,048,576  bytes;  see
              SIZE format below

       -B, --ignore-backups
              do not list implied entries ending with ~

       -c     with -lt: sort by, and show, ctime (time of last modification of file status information); with -l: show ctime and
              sort by name; otherwise: sort by ctime, newest first

       -C     list entries by columns

       --color[=WHEN]
              colorize the output; WHEN can be 'always' (default if omitted), 'auto', or 'never'; more info below

       -d, --directory
              list directories themselves, not their contents

       -D, --dired
              generate output designed for Emacs' dired mode

       -f     do not sort, enable -aU, disable -ls --color

       -F, --classify
              append indicator (one of */=&amp;gt;@|) to entries

       --file-type
              likewise, except do not append '*'

       --format=WORD
              across -x, commas -m, horizontal -x, long -l, single-column -1, verbose -l, vertical -C

       --full-time
              like -l --time-style=full-iso

       -g     like -l, but do not list owner

       --group-directories-first
              group directories before files;

              can be augmented with a --sort option, but any use of --sort=none (-U) disables grouping

       -G, --no-group
              in a long listing, don't print group names

       -h, --human-readable
              with -l and/or -s, print human readable sizes (e.g., 1K 234M 2G)

       --si   likewise, but use powers of 1000 not 1024

       -H, --dereference-command-line
              follow symbolic links listed on the command line

       --dereference-command-line-symlink-to-dir
              follow each command line symbolic link

              that points to a directory

       --hide=PATTERN
              do not list implied entries matching shell PATTERN (overridden by -a or -A)

       --indicator-style=WORD
              append indicator with style WORD to entry names: none (default), slash  (-p),  file-type  (--file-type),  classify
              (-F)

       -i, --inode
              print the index number of each file

       -I, --ignore=PATTERN
              do not list implied entries matching shell PATTERN

       -k, --kibibytes
              default to 1024-byte blocks for disk usage

       -l     use a long listing format

       -L, --dereference
              when  showing  file information for a symbolic link, show information for the file the link references rather than
              for the link itself

       -m     fill width with a comma separated list of entries

       -n, --numeric-uid-gid
              like -l, but list numeric user and group IDs

       -N, --literal
              print entry names without quoting

       -o     like -l, but do not list group information

       -p, --indicator-style=slash
              append / indicator to directories

       -q, --hide-control-chars
              print ? instead of nongraphic characters

       --show-control-chars
              show nongraphic characters as-is (the default, unless program is 'ls' and output is a terminal)

       -Q, --quote-name
              enclose entry names in double quotes

       --quoting-style=WORD
              use quoting style WORD for entry names: literal, locale, shell, shell-always,  shell-escape,  shell-escape-always,
              c, escape

       -r, --reverse
              reverse order while sorting

       -R, --recursive
              list subdirectories recursively

       -s, --size
              print the allocated size of each file, in blocks

       -S     sort by file size, largest first

       --sort=WORD
              sort by WORD instead of name: none (-U), size (-S), time (-t), version (-v), extension (-X)

       --time=WORD
              with  -l,  show  time  as  WORD instead of default modification time: atime or access or use (-u); ctime or status
              (-c); also use specified time as sort key if --sort=time (newest first)

       --time-style=STYLE
              with -l, show times using style STYLE: full-iso, long-iso, iso, locale, or +FORMAT; FORMAT is interpreted like  in
              'date';  if  FORMAT  is  FORMAT1&amp;lt;newline&amp;gt;FORMAT2,  then  FORMAT1 applies to non-recent files and FORMAT2 to recent
              files; if STYLE is prefixed with 'posix-', STYLE takes effect only outside the POSIX locale

       -t     sort by modification time, newest first

       -T, --tabsize=COLS
              assume tab stops at each COLS instead of 8

       -u     with -lt: sort by, and show, access time; with -l: show access time and sort by name; otherwise:  sort  by  access
              time, newest first

       -U     do not sort; list entries in directory order

       -v     natural sort of (version) numbers within text

       -w, --width=COLS
              set output width to COLS.  0 means no limit

       -x     list entries by lines instead of by columns

       -X     sort alphabetically by entry extension

       -Z, --context
              print any security context of each file

       -1     list one file per line.  Avoid '\n' with -q or -b

       --help display this help and exit

       --version
              output version information and exit

       The  SIZE argument is an integer and optional unit (example: 10K is 10*1024).  Units are K,M,G,T,P,E,Z,Y (powers of 1024)
       or KB,MB,... (powers of 1000).

       Using color to distinguish file types is disabled both by default and with --color=never.  With  --color=auto,  ls  emits
       color codes only when standard output is connected to a terminal.  The LS_COLORS environment variable can change the set‐
       tings.  Use the dircolors command to set it.

   Exit status:
       0      if OK,

       1      if minor problems (e.g., cannot access subdirectory),

       2      if serious trouble (e.g., cannot access command-line argument).

AUTHOR
       Written by Richard M. Stallman and David MacKenzie.

<!-- 30b0cf8a-458a-435b-a2e0-993472636e53 <=< ACCEPT -->REPORTING BUGS
       GNU coreutils online help: &amp;lt;http://www.gnu.org/software/coreutils/&amp;gt;
       Report ls translation bugs to &amp;lt;http://translationproject.org/team/&amp;gt;

COPYRIGHT
       Copyright   ©   2016   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3    or    later
       &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.<!-- ACCEPT >=> 30b0cf8a-458a-435b-a2e0-993472636e53 -->

SEE ALSO
       Full documentation at: &amp;lt;http://www.gnu.org/software/coreutils/ls&amp;gt;
       or available locally via: info '(coreutils) ls invocation'

GNU coreutils 8.26                                        November 2016                                                    LS(1)
M4(1)                                                     User Commands                                                    M4(1)

NAME
       m4 - macro processor

SYNOPSIS
       m4 [OPTION]... [FILE]...

DESCRIPTION
       Process macros in FILEs.  If no FILE or if FILE is `-', standard input is read.

       Mandatory or optional arguments to long options are mandatory or optional for short options too.

   Operation modes:
       --help display this help and exit

       --version
              output version information and exit

       -E, --fatal-warnings
              once: warnings become errors, twice: stop execution at first error

       -i, --interactive
              unbuffer output, ignore interrupts

       -P, --prefix-builtins
              force a `m4_' prefix to all builtins

       -Q, --quiet, --silent
              suppress some warnings for builtins

       --warn-macro-sequence[=REGEXP]
              warn if macro definition matches REGEXP,

              default \$\({[^}]*}\|[0-9][0-9]+\)

       -W, --word-regexp=REGEXP
              use REGEXP for macro name syntax

   Preprocessor features:
       -D, --define=NAME[=VALUE]
              define NAME as having VALUE, or empty

       -I, --include=DIRECTORY
              append DIRECTORY to include path

       -s, --synclines
              generate `#line NUM "FILE"' lines

       -U, --undefine=NAME
              undefine NAME

   Limits control:
       -g, --gnu
              override -G to re-enable GNU extensions

       -G, --traditional
              suppress all GNU extensions

       -H, --hashsize=PRIME
              set symbol lookup hash table size [509]

       -L, --nesting-limit=NUMBER
              change nesting limit, 0 for unlimited [0]

   Frozen state files:
       -F, --freeze-state=FILE
              produce a frozen state on FILE at end

       -R, --reload-state=FILE
              reload a frozen state from FILE at start

   Debugging:
       -d, --debug[=FLAGS]
              set debug level (no FLAGS implies `aeq')

       --debugfile[=FILE]
              redirect debug and trace output to FILE (default stderr, discard if empty string)

       -l, --arglength=NUM
              restrict macro tracing size

       -t, --trace=NAME
              trace NAME when it is defined

   FLAGS is any of:
       a      show actual arguments

       c      show before collect, after collect and after call

       e      show expansion

       f      say current input file name

       i      show changes in input files

       l      say current input line number

       p      show results of path searches

       q      quote values as necessary, with a or e flag

       t      trace for all macro calls, not only traceon'ed

       x      add a unique macro call id, useful with c flag

       V      shorthand for all of the above flags

       If  defined,  the  environment variable `M4PATH' is a colon-separated list of directories included after any specified by
       `-I'.

       Exit status is 0 for success, 1 for failure, 63 for frozen file version mismatch, or whatever value  was  passed  to  the
       m4exit macro.

AUTHOR
       Written by Rene' Seindal.

REPORTING BUGS
       Report bugs to: bug-m4@gnu.org
       GNU M4 home page: &amp;lt;http://www.gnu.org/software/m4/&amp;gt;
       General help using GNU software: &amp;lt;http://www.gnu.org/gethelp/&amp;gt;

COPYRIGHT
       Copyright    ©    2016   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3   or   later
       &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       The full documentation for m4 is maintained as a Texinfo manual.  If the info and m4 programs are properly  installed  at
       your site, the command

              info m4

       should give you access to the complete manual.

GNU M4 1.4.18                                             December 2016                                                    M4(1)
MAIL(1)                                            BSD General Commands Manual                                           MAIL(1)

NAME
     Mail [v14.8.16] — send and receive Internet mail

SYNOPSIS
     mail -h | --help
     mail [-BDdEFintv~] [-A account] [-a attachment] [-b bcc-addr] [-c cc-addr] [-q quote-file] [-r from-addr]
          [-S variable[=value]] [-s subject] [-X cmd] [-.] to-addr ... [-- mta-option ...]
     mail [-BDdEeHiNnRv~#] [-A account] [-L spec-list] [-r from-addr] [-S variable[=value]] [-X cmd] -f [file] [--
           mta-option ...]
     mail [-BDdEeHiNnRv~#] [-A account] [-L spec-list] [-r from-addr] [-S variable[=value]] [-u user] [-X cmd] [--
           mta-option ...]

DESCRIPTION
           Compatibility note: S-nail (Mail) will wrap up into S-mailx in v15.0 (circa 2018).  A partial  set  of  compatibility
           options  exist,  tagged  as  [v15-compat] and [no v15-compat].  To choose upward compatible behaviour, please set the
           internal variable v15-compat.  Anything which will vanish in v15.0 is tagged [Obsolete],  and  using  -d  will  print
           warnings for many use cases of obsolete features.

     Mail is a mail processing system with a command syntax reminiscent of ed(1) with lines replaced by messages.  It is
     intended to provide the functionality of the POSIX mailx(1) command and offers (mostly optional) extensions for line edit‐
     ing, IDNA, MIME, S/MIME, SMTP and POP3 (and IMAP).  It is usable as a mail batch language.

   Options
     -A account  Executes an account command (see below) for account after the startup files have been read.

     -a file     Attach the given file to the message.  The same filename conventions as described in the section COMMANDS
                 apply: shell word expansion is restricted to the tilde ‘~’ and variables.  Shall file not be accessible but
                 contain a ‘=’ character, then anything after the ‘=’ is assumed to specify the input character set and anything
                 before ‘=’ the filename: this is the only option to specify the input character set (and don't perform any
                 character set conversion) for text attachments from the command line, not using the ~@ tilde escape command.

     -B          Make standard input and standard output line-buffered.

     -b address  Send blind carbon copies to the given list of addresses.  Sending mail below goes into more detail on that.

     -c address  Send carbon copies to the given list of addresses.

     -D          [Option] Set the disconnected variable.

     -d          Set the debug variable, which enables debug messages and disables message delivery.

     -E          Set the skipemptybody variable and thus discard messages with an empty message part body.  This is useful for
                 sending messages from scripts.

     -e          Just check if mail is present in the system mailbox.  If yes, return an exit status of zero, a non-zero value
                 otherwise.

     -F          Save the message to send in a file named after the local part of the first recipient's address (instead of in
                 record).

     -f [file]   Read in the contents of the user's MBOX (or the specified file) for processing; when Mail is quit, it writes
                 undeleted messages back to this file (but be aware of the hold option).  Some special conventions are recog‐
                 nized for the string file which are documented for the file command below.  Note that file is not a direct
                 argument to the flag -f, but is instead taken from the command line after option processing has been completed.
                 In order to use a file that starts with a hyphen, prefix it with a (relative) path, as in ‘./-hyphenbox.mbox’.

     -H          Print a header summary of all messages and exit.  A configurable summary view is available via the -L option.

     -h          Print a short usage summary.  Because of widespread use a --help argument will have the same effect.

     -i          Set the ignore variable to ignore tty interrupt signals.

     -L spec-list
                 Print a header summary of only those messages that match the given spec-list, then exit.  See the section
                 Specifying messages for the format of spec-list.  If the -H option has been given in addition no header summary
                 is produced, but Mail will instead indicate via its exit status whether spec-list matched any messages (‘0’) or
                 not (‘1’); note that any verbose output is suppressed in this mode and must instead be enabled explicitly
                 (e.g., by using the option -v).

     -N          Unset the header variable and thus inhibit initial display of message headers when reading mail or editing a
                 mail folder.

     -n          Inhibits reading mail.rc upon startup.  This option should be activated for Mail scripts that are invoked on
                 more than one machine, because the contents of that file may differ between them.  (The same behaviour can be
                 achieved by setting the NAIL_NO_SYSTEM_RC environment variable.)

     -q file     Start the message with the contents of the specified file.  May be given in send mode only.

     -R          Any folder opened will be in read-only mode.

     -r address  If address is a valid address then it specifies the envelope sender address to be passed to the MTA as ‘-f
                 address’ when a message is send.  Shall address include a user name, comments etc., then the components will be
                 separated and the name part will be passed to the MTA individually via ‘-F name’.  The given address will also
                 be assigned to the from variable, just as if additionally ‘-Sfrom=address’ had been specified (therefore
                 affecting SMTP data transfer, too).

                 If instead an empty string is passed as address then the content of the variable from will be evaluated and
                 used for this purpose whenever the MTA is contacted.  Note that Mail by default, without -r that is, neither
                 passes ‘-f’ nor ‘-F’ flags to the MTA by itself.

     -S variable[=value]
                 Sets the internal option variable and, in case of a value option, assigns value to it.  Even though options set
                 via -S may be overwritten from within resource files, the command line setting will be reestablished after all
                 resource files have been loaded.

     -s subject  Specify the subject of the to-be-sent message.

     -t          The message to be sent is expected to contain a message header with ‘To:’, ‘Cc:’, or ‘Bcc:’ fields giving its
                 recipients, which will be added to those given on the command line.  If a message subject is specified via
                 ‘Subject:’ then it'll be used in favour of one given on the command line.

                 Also understood are ‘Reply-To:’ (possibly overriding replyto), ‘Sender:’ (p. o. sender), ‘Organization:’ (p. o.
                 ORGANIZATION).  Note you can also specify ‘From:’, possibly overriding from and the envelope address possibly
                 specified with the option -r!

                 The following, which are normally created automatically based upon the message context, can also be specified:
                 ‘Message-ID:’, ‘In-Reply-To:’, ‘References:’ and ‘Mail-Followup-To:’ (special address massage will however
                 still occur for the latter).

     -u user     Read the system mailbox of user (appropriate privileges presumed), and “assume to be” user in some aspects,
                 e.g. in respect to file–expansions of ‘%’ etc.; also see USER.

     -V          Print Mail's version and exit.

     -v          Setting the verbose option causes some verbosity (like printing of certificate chains).  Using it twice
                 increases the level of verbosity.

     -X cmd      Add the given cmd to the list of commands to be executed before normal operation starts.  Correlates with -#
                 and batch-exit-on-error; the only possibility to execute commands in non-interactive mode when reading startup
                 files is actively prohibited.

     -~          Enable TILDE ESCAPES even if not in interactive mode.

     -#          This sets several options to prepare Mail for working in (most likely non-interactive) batch mode: dot,
                 emptystart, noheader, quiet, sendwait, as well as MBOX and folder (both to /dev/null).  It also enables pro‐
                 cessing of TILDE ESCAPES.  E.g., the following should send an email message to “bob”:

                       $ LC_ALL=C printf 'm bob\n~s ubject\nText\n.\nx\n' | \
                         LC_ALL=C MAILRC=/dev/null s-nail -n -# -Snosave

     -.          This flag forces termination of option processing in order to prevent “option injection” (attacks).  It also
                 forcefully puts Mail into send mode, see Sending mail.

     In the above list of supported command line options, -D, -d, -E, -i, -N and -v are implemented by means of setting the
     respective option, as via -S.  [mta-option ...] arguments that are given at the end of the command line after a ‘--’ sepa‐
     rator will be passed through to the mail-transfer-agent (MTA) and persist for an entire (interactive) session – if the set‐
     ting of expandargv allows their recognition; MTA arguments can also be specified in the variable sendmail-arguments; find
     MTA interaction described in more detail in the documentation of sendmail.  MTA arguments are ignored when mail is send via
     SMTP data transfer.

   A starter
     Mail is a direct descendant of the BSD Mail program that was introduced in 1978 (itself superceeding the simpler UNIX mail
     program) and used to introduce itself (in the Mail reference manual) as follows:

           Mail provides a simple and friendly environment for sending and receiving mail.  It divides incoming mail into its
           constituent messages and allows the user to deal with them in any order.  In addition, it provides a set of
           ed(1)-like commands for manipulating messages and sending mail.  Mail offers the user simple editing capabilities to
           ease the composition of outgoing messages, as well as providing the ability to define and send to names which address
           groups of users.

     Mail is thus the user side of the Unix mail system, whereas the system side (mail-transfer-agent, MTA) was traditionally
     taken by sendmail(8); today postfix(1) or exim(8) are often used for this purpose instead.  If the [Option]al SMTP feature
     has been built into Mail then the system side is not a mandatory precondition for mail delivery.

     Because Mail strives for compliance with POSIX mailx(1) it is likely that some configuration settings have to be adjusted
     before using it is a smooth experience.  The default global mail.rc file already bends those standard settings a bit
     towards more user friendliness and safety, e.g., it sets the hold and keepsave options in order to suppress the automatic
     moving of messages to MBOX that would otherwise occur (see Message states) and keep to not remove empty files in order not
     to mangle file permissions when files eventually get recreated.  It does not set the folder option so that by default file
     grouping (via the ‘+’ prefix as documented also for file) is not enabled.  The section EXAMPLES contains some further sug‐
     gestions.

   Sending mail
     To send a message to one or more people, using a local mail-transfer-agent (MTA; the executable path can be set via
     sendmail) or the [Option]al builtin SMTP (set and see the variable smtp) transport to actually deliver the generated mail
     message, Mail can be invoked with arguments which are the names of people to whom the mail will be sent:

           $ mail -s Subject -a attachm.ent bill@host1 'Bob &amp;lt;bob@host2&amp;gt;'
           # But... try it in an isolated dry-run mode first
           $ LC_ALL=C MAILRC=/dev/null \
             mail -n -d -vv -Sfrom="me &amp;lt;he@re&amp;gt;" \
               -s Subject -. "(Lovely) Bob &amp;lt;bob@host2&amp;gt;"

     The user is then expected to type in the message contents.  In this compose mode Mail treats lines beginning with the char‐
     acter ‘~’ special – these are so-called TILDE ESCAPES which can be used to read in files, process shell commands, add and
     edit attachments and more; e.g., the tilde escape ‘~e’ will start the text editor to revise the message in it's current
     state, ‘~h’ allows editing of the message recipients and ‘~?’ gives an overview of available tilde escapes.  Typing con‐
     trol-D ‘^D’ at the beginning of an empty line leaves compose mode and causes the message to be send, whereas typing con‐
     trol-C ‘^C’ twice will abort the current letter (saving its contents in the file denoted by DEAD unless nosave is set.)

     A number of options can be used to alter default behavior; e.g., setting (also via -S) editalong will automatically startup
     a text editor when compose mode is entered, askcc will cause the user to be prompted actively for carbon-copy recipients
     and the dot option will allow leaving compose mode by writing a line consisting solely of a dot (‘.’).

     Very important, though, is to define which Character sets may be used when sending messages, usually by setting the option
     sendcharsets accordingly, having read the section The mime.types files to understand how the MIME-type of outgoing attach‐
     ments is classified and the knowledge that messages are sent asynchronously unless sendwait is set: only with it MTA deliv‐
     ery errors will be recognizable.

     Setting from is often necessary (e.g., in conjunction with smtp) or desirable, you may want to do some dry-run tests before
     you go.  Saving a copy of the sent messages in a record may also be desirable – as for most mailbox file targets some spe‐
     cial conventions are recognized, see the file command for more on that.  The section On URL syntax and credential lookup
     will spread some light on the ‘USER@HOST’ variable chains as well as on using URLs for accessing protocol-specific
     resources, like smtp, and EXAMPLES contains an example configuration for sending messages via some of the well-known public
     mail providers; note it also gives a compact overview on how to setup a secure SSL/TLS environment.

     Message recipients (as specified on the command line or defined in ‘To:’, ‘Cc:’ or ‘Bcc:’) may not only be email addressees
     but can also be names of mailboxes and even complete shell command pipe specifications.  Proper quoting may be necessary,
     e.g., to embed whitespace characters.  (Recall that Mail deals with mail standards, therefore those define the rules with
     which content is interpreted.)  If the variable expandaddr is not set then only network addresses (see mailaddr(7) for a
     description of mail addresses) and plain user names (including MTA aliases) may be used, other types will be filtered out,
     giving a warning message.

     If the variable expandaddr is set then extended recipient addresses will optionally be accepted: Any name which starts with
     a vertical bar ‘|’ character specifies a command pipe – the command string following the ‘|’ is executed and the message is
     sent to its standard input; Likewise, any name that starts with the character slash ‘/’ or the character sequence dot slash
     ‘./’ is treated as a file, regardless of the remaining content.  Any other name which contains an at sign ‘@’ character is
     treated as a network address; Any other name which starts with a plus sign ‘+’ character specifies a mailbox name; Any
     other name which contains a slash ‘/’ character but no exclamation mark ‘!’ or percent sign ‘%’ character before also spec‐
     ifies a mailbox name; What remains is treated as a network address.

           $ echo bla | mail -Sexpandaddr -s test ./mbox.mbox
           $ echo bla | mail -Sexpandaddr -s test '|cat &amp;gt;&amp;gt; ./mbox.mbox'
           $ echo safe | LC_ALL=C MAILRC=/dev/null \
               mail -n -Sv15-compat -Ssendwait -Snosave \
                 -Sexpandaddr=fail,-all,+addr -s test \
                 -. bob@home.net

     It is possible to create personal distribution lists via the alias command, so that, for instance, the user can send mail
     to ‘cohorts’ and have it go to a group of people:

           alias cohorts bill jkf mark kridle@ucbcory ~/mail/cohorts.mbox

     Please note that this mechanism has nothing in common with the system wide aliases that may be used by the local MTA (mail-
     transfer-agent), which are subject to the ‘name’ constraint of expandaddr and are often tracked in a file /etc/aliases (and
     documented in aliases(5) and sendmail(1)).  Personal aliases will be expanded by Mail before the message is sent, and are
     thus a convenient alternative to specifying each addressee by itself.

     To avoid environmental noise scripts should “detach” mail from any configuration files and create a script-local environ‐
     ment, either by pointing the MAILRC variable to a custom configuration file, or by using the -S command line option to
     specify options:

           $ env LC_ALL=C MAILRC=/dev/null password=NOTSECRET \
             mail -n -Sv15-compat -Ssendwait -Snosave \
               -Sexpandaddr=fail,-all,+addr \
               -S 'smtp=smtps://mylogin@some.host:465' -Ssmtp-auth=login \
               -S 'from=scriptreply@domain' \
               -s 'subject' -a attachment_file \
               -. "Recipient 1 &amp;lt;recipient1@domain&amp;gt;" recipient2@domain \
               &amp;lt; content_file

   Reading mail
     When invoked without addressees Mail enters interactive mode in which mails may be read.  When used like that the user's
     system mailbox (see the command file for an in-depth description of the different mailbox types that exist) is read in and
     a one line header of each message therein is displayed.  The visual style of this summary of headers can be adjusted
     through the variable headline and the possible sorting criterion via autosort.  Scrolling through screenfuls of headers can
     be performed with the command z.  If the initially opened mailbox is empty Mail will instead exit immediately (after dis‐
     playing a message) unless the variable emptystart is found to be set.

     At the prompt the command list will give a listing of all available commands and help will give a summary of some common
     ones.  If the [Option]al documentation strings are available one can type ‘?X’ and see the actual expansion of ‘X’ and what
     it's purpose is, i.e., commands can be abbreviated (note that POSIX defines some abbreviations, so that the alphabetical
     order of commands doesn't necessarily relate to the abbreviations; it is possible to define overwrites with the ghost com‐
     mand, however).

     Messages are given numbers (starting at 1) which uniquely identify messages; the current message – the “dot” – will either
     be the first new message, or the first unread message, or the first message of the mailbox; the option showlast will
     instead cause usage of the last message for this purpose.

     Messages can be printed with the print command, or short: ‘p’.  By default the current message (“dot”) is printed, but like
     with most other commands it is possible to give a fancy message specification (see Specifying messages), e.g., ‘p:u’ will
     display all unread messages, ‘p.’ will print the “dot”, ‘p 1 5’ will print the messages 1 and 5, ‘p 1-5’ will print the
     messages 1 through 5, and ‘p-’ and ‘p+’ will print the last and the next message, respectively.

     In the default setup all header fields of a message will be printed, but this can be changed: either by blacklisting a list
     of fields via ignore, or by whitelisting only a given list with the retain command, e.g., ‘retain date from to cc subject’.
     In order to print all header fields of a message regardless of currently active ignore or retain lists, use the command
     Print.  The variable crt controls whether and when Mail will use the configured PAGER for printing instead of directly
     writing to the terminal (generally speaking).

     Dependent upon the configuration a Command line editor aims at making user experience with the many COMMANDS a bit nicer.
     When reading the system mailbox or when -f (or file) specified a mailbox explicitly prefixed with the special ‘%:’ modifier
     then messages which have been read will be moved to the user's MBOX file automatically when the mailbox is left, either by
     changing the active mailbox or by quitting Mail (also see Message states).

     After examining a message the user can also delete ‘d’ the message, reply ‘r’ to the sender and all recipients or Reply ‘R’
     exclusively to the sender.  Messages can also be forwarded (shorter alias is fwd). Note that when replying to or forwarding
     a message recipient addresses will be stripped from comments and names unless the option fullnames is set.  Deletion causes
     Mail to forget about the message; This is not irreversible, though, one can undelete ‘u’ the message by giving its number,
     or the Mail session can be ended by giving the exit ‘x’ command.

     To end a mail processing session one may either issue quit ‘q’ to cause a full program exit, which possibly includes auto‐
     matic moving of read messages to MBOX as well as updating the [Option]al command line editor history file, or use the com‐
     mand exit ‘x’ instead in order to prevent any of these actions.

   Viewing HTML mail and MIME attachments
     Messages which are HTML-only get more and more common and of course many messages come bundled with a bouquet of MIME
     attachments.  Whereas Mail [Option]ally supports a simple HTML-to-text converter to deal with HTML messages (see The
     mime.types files), it normally can't deal with any of these itself, but instead programs need to become registered to deal
     with specific MIME types or file extensions.  These programs may either prepare plain text versions of their input in order
     to enable Mail to display the content on the terminal, or display the content themselves, for example in a graphical win‐
     dow.  The latter type of programs by default “blocks” Mail until the external viewer has terminated, but asynchronous side-
     by-side execution is also possible, in which case Mail will continue to display the message and remain responsive.

     To install an external handler program for a specific MIME type set an according pipe-TYPE/SUBTYPE variable.  To define a
     handler for a specific file extension set the respective pipe-EXTENSION variable – these handlers take precedence.  The
     variable mime-counter-evidence can be set to improve dealing with faulty MIME part declarations as are often seen in real-
     life messages.  E.g., to display a HTML message inline (that is, converted to a more fancy plain text representation than
     the builtin converter is capable to produce) with either of the text-mode browsers lynx(1) or elinks(1), teach Mail about
     MathML documents and make it display them as plain text and to open PDF attachments in an external PDF viewer, asyn‐
     chronously:

           if $features !@ HTML-FILTER
             #set pipe-text/html="elinks -force-html -dump 1"
             set pipe-text/html="lynx -stdin -dump -force_html"
             # Display HTML as plain text instead
             #set pipe-text/html=@
           endif
           mimetype '@ application/mathml+xml mathml'
           set pipe-application/pdf="@&amp;set -C;\
               : &amp;gt; \"${TMPDIR}/${NAIL_FILENAME_GENERATED}\"; \
               trap \"rm -f \\\"${TMPDIR}/${NAIL_FILENAME_GENERATED}\\\"\" \
                 EXIT INT QUIT PIPE TERM;\
               set +C;\
               cat &amp;gt; \"${TMPDIR}/${NAIL_FILENAME_GENERATED}\"; \
               xpdf \"${TMPDIR}/${NAIL_FILENAME_GENERATED}\""

     Note: special care must be taken when using such commands as mail viruses may be distributed by this method: if messages of
     type ‘application/x-sh’ or files with the extension ‘.sh’ were blindly filtered through the shell, for example, a message
     sender could easily execute arbitrary code on the system Mail is running on.  For more on MIME, also in respect to sending
     of messages, see the section The mime.types files and the command mimetype.

   Mailing lists
     Mail offers some support to ease handling of mailing lists.  The command mlist promotes all given arguments to known mail‐
     ing lists, and mlsubscribe sets their subscription attribute, creating them first as necessary.  (On the other hand
     unmlsubscribe doesn't unmlist automatically, but only resets the subscription attribute.)  Using the commands without argu‐
     ments will print out (a subset of) all currently defined mailing lists.  The headline format ‘%T’ can be used to mark out
     messages with configured list addresses in the header display.

     [Option]ally mailing lists may also be specified as regular expressions, which allows matching of many addresses with a
     single expression.  However, all fully qualified list addresses are matched via a fast dictionary, whereas expressions are
     placed in (a) list(s) which is (are) matched sequentially.

           set followup-to followup-to-honour=ask-yes reply-to-honour=ask-yes
           mlist a1@b1.c1 a2@b2.c2 .*@lists.c3$
           mlsubscribe a4@b4.c4 exact@lists.c3

     The variable followup-to-honour will ensure that a ‘Mail-Followup-To:’ header is honoured when the message is being replied
     to (via reply and Lreply) and followup-to controls whether this header is created when sending mails; it will be created
     automatically for a couple of reasons, too, like when the special “mailing list specific” respond command Lreply is used,
     when reply is used to respond to a message with its ‘Mail-Followup-To:’ being honoured etc.

     A difference in between the handling of known and subscribed lists is that the address of the sender is usually not part of
     a generated ‘Mail-Followup-To:’ when addressing the latter, whereas it is for the former kind of lists.  Usually because
     there are exceptions: say, if multiple lists are addressed and not all of them are subscribed lists.

     For convenience Mail will, temporarily, automatically add a list address that is presented in the ‘List-To:’ header of a
     message that is being responded to to the list of known mailing lists.  Shall that header have existed Mail will instead,
     dependend on the variable reply-to-honour, use an also set ‘Reply-To:’ for this purpose in order to accept a list adminis‐
     trators' wish that is supposed to have been manifested like that (but only if it provides a single address which resides on
     the same domain as what is stated in ‘List-To:’).

   Resource files
     Upon startup Mail reads in several resource files:

     mail.rc        System wide initialization file.  Reading of this file can be suppressed, either by using the -n command
                    line option, or by setting the environment variable NAIL_NO_SYSTEM_RC.

     ~/.mailrc      File giving initial commands.  A different file can be chosen by setting the environment variable MAILRC.

     NAIL_EXTRA_RC  Can be used to define an optional startup file to be read after ~/.mailrc.  This variable is only honoured
                    in certain circumstances (see its documentation for more).

     The content of these files is interpreted as follows:

     ·   A lines' leading whitespace is ignored.
     ·   An empty line is ignored.
     ·   If the line (content) starts with the number sign ‘#’ then it is a comment-command – a real command! – and also
         ignored.  This command is the only form of comment that is understood.
     ·   A line can be “continued” on the next line if the newline character is “escaped” by preceding it with the backslash
         character ‘\’.  Note that any leading whitespace of follow lines is removed: If whitespace is desired it must be placed
         before the backslash.  For example:

                # This line is a comment command.  And y\
                   es, it is really continued here.
               set debug \
                   verbose

   Character sets
     [Option] Mail detects the character set of the terminal by using mechanisms that are controlled by the LC_CTYPE locale set‐
     ting (the manual for setlocale(3) should give an overview); the Mail internal variable ttycharset will be set to the
     detected terminal character set accordingly and will thus show up in the output of the commands set and varshow.

     However, a user supplied ttycharset value is not overwritten by this detection mechanism: this “feature” must be used if
     the detection doesn't work properly, and it may be used to adjust the name of the locale character set.  E.g., on BSD sys‐
     tems one may use a locale with the character set ISO8859-1, which is not a valid name for this character set; to be on the
     safe side, one may set ttycharset to the correct name, which is ISO-8859-1.

     Note that changing the value doesn't mean much beside that, since several aspects of the real character set are implied by
     the locale environment of the system, and that stays unaffected by the content of an overwritten ttycharset variable.
     (This is mostly an issue when interactively using Mail, though.  It is actually possible to send mail in a completely
     “faked” locale environment.)

     If no character set conversion capabilities have been compiled into Mail (i.e., no iconv(3) library has been found), then
     ttycharset will be the only supported character set, it is simply assumed that it can be used to exchange 8-bit messages,
     and the rest of this section does not apply; it may however still be necessary to explicitly set it if automatic detection
     fails, since in that case it defaults to the mentioned ISO-8859-1.

     When reading messages, their text is converted into ttycharset as necessary in order to display them on the users terminal.
     Unprintable characters and invalid byte sequences are detected and replaced by proper substitution characters (unless the
     variable print-all-chars was set once Mail was started).  Also see charset-unknown-8bit to deal with another hairy aspect
     of message interpretation.

     When sending messages all their parts and attachments are classified.  Whereas no character set conversion is performed on
     those parts which appear to be binary data, the character set being used must be declared within the MIME header of an out‐
     going text part if it contains characters that do not conform to the set of characters that are allowed by the email stan‐
     dards.  Permissible values for character sets can be declared using the sendcharsets variable, and charset-8bit, which
     defines a catch-all last-resort fallback character set that is implicitly appended to the list of character-sets in
     sendcharsets.

     When replying to a message and the variable reply-in-same-charset is set then the character set of the message being
     replied to is tried first.  And it is also possible to make Mail work even more closely related to the current locale set‐
     ting automatically by using the variable sendcharsets-else-ttycharset, please see there for more information.

     All the specified character sets are tried in order unless the conversion of the part or attachment succeeds.  If none of
     the tried (8-bit) character sets is capable to represent the content of the part or attachment, then the message will not
     be sent and its text will be saved to DEAD.  In general, if the message “Cannot convert from a to b” appears, either some
     characters are not appropriate for the currently selected (terminal) character set, or the needed conversion is not sup‐
     ported by the system.  In the first case, it is necessary to set an appropriate LC_CTYPE locale and/or the variable
     ttycharset.

     The best results are usually achieved when Mail is run in a UTF-8 locale on a UTF-8 capable terminal, in which case the
     full Unicode spectrum of characters is available.  In this setup characters from various countries can be displayed, while
     it is still possible to use more simple character sets for sending to retain maximum compatibility with older mail clients.

   Message states
     Mail differentiates in between several different message states; the current state will be reflected in the header display
     if headline is configured to do so.  In Mail message states are inspected when leaving a mailbox and may cause messages to
     be automatically moved to the special MBOX mailbox – because this may be irritating to users which are used to “more
     modern” mail-user-agents, the default global mail.rc sets the hold and keepsave variables in order to suppress this behav‐
     iour.

     ‘new’        Message has neither been viewed nor moved to any other state.  Such messages are retained even in the system
                  mailbox.

     ‘unread’     Message has neither been viewed nor moved to any other state, but the message was present already when the
                  mailbox has been opened last: Such messages are retained even in the system mailbox.

     ‘read’       The message has been processed by one of the following commands: ~f, ~m, ~F, ~M, copy, mbox, next, pipe,
                  print, Print, top, type, Type, undelete.  The delete, dp, and dt commands may also cause the next message to
                  be marked as read, depending on the value of the autoprint variable.  Except when the exit command is used,
                  messages that are in the system mailbox or in mailboxes which were opened with the special ‘%:’ prefix and are
                  in ‘read’ state when the mailbox is left will be saved in MBOX unless the option hold it set.

     ‘deleted’    The message has been processed by one of the following commands: delete, dp, dt.  Only undelete can be used to
                  access such messages.

     ‘preserved’  The message has been processed by a preserve command and it will be retained in its current location.

     ‘saved’      The message has been processed by one of the following commands: save or write.  Unless when the exit command
                  is used, messages that are in the system mailbox or in mailboxes which were opened with the special ‘%:’ pre‐
                  fix and are in ‘saved’ state when the mailbox is left will be deleted; they will be saved in MBOX when the
                  option keepsave is set.

   Specifying messages
     Commands such as print and delete can be given a list of message numbers as arguments to apply to a number of messages at
     once.  Thus ‘delete 1 2’ deletes messages 1 and 2, whereas ‘delete 1-5’ will delete the messages 1 through 5.  In sorted or
     threaded mode (see the sort command), ‘delete 1-5’ will delete the messages that are located between (and including) mes‐
     sages 1 through 5 in the sorted/threaded order, as shown in the header summary.  Multiple colon modifiers can be joined
     into one, e.g., ‘:du’.  The following special message names exist:

     :n    All ‘new’ messages.

     :o    All old messages (any not in state ‘read’ or ‘new’).

     :u    All ‘unread’ messages.

     :d    All ‘deleted’ messages (for the undelete command).

     :r    All ‘read’ messages.

     :f    All flagged messages.

     :a    All answered messages (cf. the markanswered variable).

     :t    All messages marked as draft.

     :s    [Option] All messages classified as spam.

     :S    [Option] All messages with unsure spam classification.

     .     The current message, the so-called “dot”.

     ;     The message that was previously the current message.

     ,     The parent message of the current message, that is the message with the Message-ID given in the ‘In-Reply-To:’ field
           or the last entry of the ‘References:’ field of the current message.

     -     The next previous undeleted message, or the next previous deleted message for the undelete command.  In
           sorted/threaded mode, the next previous such message in the sorted/threaded order.

     +     The next undeleted message, or the next deleted message for the undelete command.  In sorted/threaded mode, the next
           such message in the sorted/threaded order.

     ^     The first undeleted message, or the first deleted message for the undelete command.  In sorted/threaded mode, the
           first such message in the sorted/threaded order.

     $     The last message.  In sorted/threaded mode, the last message in the sorted/threaded order.

     &amp;x    In threaded mode, selects the message addressed with x, where x is any other message specification, and all messages
           from the thread that begins at it.  Otherwise it is identical to x.  If x is omitted, the thread beginning with the
           current message is selected.

     *     All messages.

     `     All messages that were included in the message list for the previous command.

     /string
           All messages that contain string in the subject field (case ignored).  See also the searchheaders variable.  If
           string is empty, the string from the previous specification of that type is used again.

     [@name-list]@expr
           All messages that contain the given case-insensitive search expression; if the [Option]al regular expression (see
           re_format(7)) support is available expr will be interpreted as one if any of the “magical” regular expression charac‐
           ters is seen.  If the optional @name-list part is missing, the search is restricted to the subject field body, but
           otherwise name-list specifies a comma-separated list of header fields to search, as in

                 '@to,from,cc@Someone i ought to know'

           In order to search for a string that includes a ‘@’ (commercial at) character the name-list is effectively non-
           optional, but may be given as the empty string.  Some special header fields may be abbreviated: ‘f’, ‘t’, ‘c’, ‘b’
           and ‘s’ will match ‘From’, ‘To’, ‘Cc’, ‘Bcc’ and ‘Subject’, respectively and case-insensitively.  The special names
           ‘header’ or ‘&amp;lt;’ can be used to search in (all of) the header(s) of the message, and the special names ‘body’ or ‘&amp;gt;’
           and ‘text’ or ‘=’ can be used to perform full text searches – whereas the former searches only the body, the latter
           also searches the message header.

           This message specification performs full text comparison, but even with regular expression support it is almost
           impossible to write a search expression that savely matches only a specific address domain.  To request that the con‐
           tent of the header is treated as a list of addresses, and to strip those down to the plain email address which the
           search expression is to be matched against, prefix the header name (abbreviation) with a tilde ‘~’:

                 '@~f@@a\.safe\.domain\.match$'

     address
           A case-insensitive “any substring matches” search against the ‘From:’ header, which will match addresses (too) even
           if showname is set (and POSIX says “any address as shown in a header summary shall be matchable in this form”); How‐
           ever, if the allnet variable is set, only the local part of the address is evaluated for the comparison, not ignoring
           case, and the setting of showname is completely ignored.  For finer control and match boundaries use the ‘@’ search
           expression; the [Option]al IMAP-style ‘(from address)’ expression can also be used if substring matches are desired.

     [Option] IMAP-style SEARCH expressions may also be used.  This addressing mode is available with all types of folders; Mail
     will perform the search locally as necessary.  Strings must be enclosed by double quotes ‘"’ in their entirety if they con‐
     tain white space or parentheses; within the quotes, only backslash ‘\’ is recognized as an escape character.  All string
     searches are case-insensitive.  When the description indicates that the “envelope” representation of an address field is
     used, this means that the search string is checked against both a list constructed as

           ("name" "source" "local-part" "domain-part")

     for each address, and the addresses without real names from the respective header field.  These search expressions can be
     nested using parentheses, see below for examples.

     (criterion)
           All messages that satisfy the given criterion.
     (criterion1 criterion2 ... criterionN)
           All messages that satisfy all of the given criteria.
     (or criterion1 criterion2)
           All messages that satisfy either criterion1 or criterion2, or both.  To connect more than two criteria using ‘or’
           specifications have to be nested using additional parentheses, as with ‘(or a (or b c))’, since ‘(or a b c)’ really
           means ‘((a or b) and c)’.  For a simple ‘or’ operation of independent criteria on the lowest nesting level, it is
           possible to achieve similar effects by using three separate criteria, as with ‘(a) (b) (c)’.
     (not criterion)
           All messages that do not satisfy criterion.
     (bcc "string")
           All messages that contain string in the envelope representation of the ‘Bcc:’ field.
     (cc "string")
           All messages that contain string in the envelope representation of the ‘Cc:’ field.
     (from "string")
           All messages that contain string in the envelope representation of the ‘From:’ field.
     (subject "string")
           All messages that contain string in the ‘Subject:’ field.
     (to "string")
           All messages that contain string in the envelope representation of the ‘To:’ field.
     (header name "string")
           All messages that contain string in the specified ‘Name:’ field.
     (body "string")
           All messages that contain string in their body.
     (text "string")
           All messages that contain string in their header or body.
     (larger size)
           All messages that are larger than size (in bytes).
     (smaller size)
           All messages that are smaller than size (in bytes).
     (before date)
           All messages that were received before date, which must be in the form ‘d[d]-mon-yyyy’, where ‘d’ denotes the day of
           the month as one or two digits, ‘mon’ is the name of the month – one of ‘Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov
           Dec’, and ‘yyyy’ is the year as four digits, e.g., ‘28-Dec-2012’.
     (on date)
           All messages that were received on the specified date.
     (since date)
           All messages that were received since the specified date.
     (sentbefore date)
           All messages that were sent on the specified date.
     (senton date)
           All messages that were sent on the specified date.
     (sentsince date)
           All messages that were sent since the specified date.
     ()    The same criterion as for the previous search.  This specification cannot be used as part of another criterion.  If
           the previous command line contained more than one independent criterion then the last of those criteria is used.

   On URL syntax and credential lookup
     [v15-compat] For accessing protocol-specific resources, like POP3 mailboxes, usage of compact and standardized Uniform
     Resource Locators (URL, RFC 1738) has become omnipresent.  Mail expects and understands URLs in the following form; parts
     in brackets ‘[]’ denote optional parts, optional either because there also exist other ways to define the information in
     question or because support of the part is protocol-specific – e.g., ‘/path’ is used by the IMAP protocol but not by POP3.

           PROTOCOL://[USER[:PASSWORD]@]server[:port][/path]

     If ‘USER’ and ‘PASSWORD’ are specified as part of an URL they must be given in URL percent encoded (RFC 3986) form – the
     command urlcodec can be used to perform the encoding and show the encoded value.  (This doesn't really conform to any stan‐
     dard, but for one it isn't used for any data exchange over the internet, and second it's easier for users to simply call
     urlcodec on a string and use that instead of having to deal with several different standards.)  On the other hand, values
     given in variable names are expected not to be URL percent encoded.

     Many variable options of Mail exist in multiple versions, called variable chains for the rest of this document: the plain
     ‘variable’ as well as ‘variable-HOST’ and ‘variable-USER@HOST’.  Here ‘HOST’ indeed means ‘server:port’ if a ‘port’ had
     been specified in the respective URL, otherwise it refers to the plain ‘server’.  Also, ‘USER’ isn't truly the ‘USER’ that
     had been found when doing the user chain lookup as is described below, i.e., this ‘USER’ will never be in URL percent
     encoded form, whether it came from an URL or not.

     For example, whether an hypothetical URL ‘smtp://hey%3Ayou@our.house’ had been given that includes a user, or whether the
     URL was ‘smtp://our.house’ and the user had been found differently, to lookup the variable chain smtp-use-starttls Mail
     first looks for whether ‘smtp-use-starttls-hey:you@our.house’ is defined, then whether ‘smtp-use-starttls-our.house’ exists
     before finally ending up looking at the plain variable itself.

     Mail obeys the following logic scheme when dealing with the necessary credential informations of an account:

     ·   If no ‘USER’ has been given in the URL the variables user-HOST and user are looked up; if no such variable(s) can be
         found then Mail will, when enforced by the [Option]al variables netrc-lookup-HOST or netrc-lookup, search the users
         .netrc file for a ‘HOST’ specific entry which provides a ‘login’ name: this lookup will only succeed if unambiguous
         (one possible matching entry for ‘HOST’).

         If there is still no ‘USER’ then Mail will fall back to the user who is supposed to run Mail: either the name that has
         been given with the -u command line option (or, equivalently, but with less precedence, the environment variable USER),
         or the “current” user.  The identity of this user has been fixated during Mail startup and is known to be a valid user
         on the current host.

     ·   Authentication: unless otherwise noted this will lookup the PROTOCOL-auth-USER@HOST, PROTOCOL-auth-HOST, PROTOCOL-auth
         variable chain, falling back to a protocol-specific default should this have no success.

     ·   If no ‘PASSWORD’ has been given in the URL – it should be noted once that specifying the password in the URL is only
         syntactic sugar for the user, it'll never be part of an URL that Mail uses itself –, then if the ‘USER’ has been found
         through the [Option]al .netrc file lookup then that may have already provided the password, too.  Otherwise the vari‐
         able chain password-USER@HOST, password-HOST, password is looked up.

         [Option] Then if any of the variables of the chain agent-shell-lookup-USER@HOST, agent-shell-lookup-HOST,
         agent-shell-lookup is set the shell command specified therein is run and the output (less newline characters) will be
         used as the password.  It is perfectly valid for such an agent to simply not return any data, in which case the pass‐
         word lookup is continued somewhere else; Any command failure is treated as a hard error, however.

         The next variable chain that is inspected is the [Option]al netrc-lookup-USER@HOST, netrc-lookup-HOST, netrc-lookup,
         but this time looking only for the password (multiple user accounts for a single machine may exist as well as a fall‐
         back entry without user but with a password).

         If at that point there is still no password available, but the (protocols') chosen authentication type requires a pass‐
         word, then in interactive mode the user will be prompted on the terminal.

     Note: S/MIME verification works relative to the values found in the ‘From:’ (or ‘Sender:’) header field(s), which means
     that the values of smime-sign, smime-sign-cert, smime-sign-include-certs and smime-sign-message-digest will not be looked
     up using the ‘USER’ and ‘HOST’ chains from above but instead use the corresponding values from the message that is being
     worked on.  In unusual cases multiple and different ‘USER’ and ‘HOST’ combinations may therefore be involved – on the other
     hand those unusual cases become possible.  The usual case is as short as:

           set smtp=smtp://USER:PASS@HOST smtp-use-starttls \
               smime-sign smime-sign-cert=+smime.pair

     The section EXAMPLES contains complete example configurations.

   Command line editor
     [Option] Mail can be configured to support a command line editor and command history lists which are saved in between ses‐
     sions.  One may link against fully-fledged external libraries (readline(6), editline(3)) or use Mail's own command line
     editor NCL (Nail-Command-Line) instead, which should work in all environments which comply to the ISO C standard (ISO/IEC
     9899:1990/Amendment 1:1995).  When an external library is used, interactive behaviour of Mail relies on that library and
     may not correspond one-to-one to what is described in this manual.

     Regardless of the actually used command line editor history entries will be created for lines entered in command mode only,
     and creation of such an entry can be forcefully suppressed by starting the line with a space character.  Note that history
     handling is by itself an optional feature and may therefore not be available.  For more information see the documentation
     of the options emptystart, history-gabby, history-gabby-persist, line-editor-disable, NAIL_HISTFILE and NAIL_HISTSIZE.

     The builtin Mail command line editor supports the following operations; the notation ‘^-character’ stands for the combina‐
     tion of the “Control” key plus the mentioned character, e.g., ‘^A’ means “hold down control key and press the A key”:

     ‘^A’   Go to the start of the line.
     ‘^B’   Move the cursor backward one character.
     ‘^D’   Forward delete the character under the cursor; quits Mail if used on the empty line unless the ignoreeof option is
            set.
     ‘^E’   Go to the end of the line.
     ‘^F’   Move the cursor forward one character.
     ‘^G’   Cancel current operation, full reset.  If there is an active history search or tabulator expansion then this command
            will first reset that, reverting to the former line content; thus a second reset is needed for a full reset in this
            case.  In all cases Mail will reset a possibly used multibyte character input state machine.
     ‘^H’   The same as “backspace”: backward delete one character.
     ‘^I’   [Option] The same as “horizontal tabulator”: try to expand the word before the cursor.  (Note this is not
            “tabulator-completion” as is known from the sh(1) but really means the usual Mail expansion, as documented for file,
            yet it involves shell expansion as a last step, too.)
     ‘^J’   The same as “ENTER”: complete this line of input.
     ‘^K’   Delete all characters from the cursor to the end of the line.
     ‘^L’   Repaint the line.
     ‘^N’   [Option] Go to the next history entry.
     ‘^O’   Execute the command dp.
     ‘^P’   [Option] Go to the previous history entry.
     ‘^R’   [Option] Complete the current line from (the remaining older) history entries.
     ‘^U’   The same as ‘^A’ followed by ‘^K’.
     ‘^W’   Delete the characters from the one preceding the cursor to the preceding word boundary.
     ‘^X’   Move the cursor forward one word boundary.
     ‘^Y’   Move the cursor backward one word boundary.

     If problems with commands that are based upon rightwise movement are encountered, adjustments of the option
     line-editor-cursor-right may solve the problem, as documented for it.

     If the terminal produces key sequences which are compatible with xterm(1) then the left and right cursor keys will map to
     ‘^B’ and ‘^F’, respectively, the up and down cursor keys will map to ‘^P’ and ‘^N’, and the Home/End/PgUp/PgDown keys will
     call the z command with the respective arguments ‘0’, ‘$’, ‘-’ and ‘+’ (i.e., perform scrolling through the header summary
     list).

   Coloured message display
     [Option] Mail can be configured to support coloured message display, realized by emitting ANSI colour escape sequences.
     Colours are only used when the TERM environment variable is set and either the terminal type can be found in colour-terms
     or its name includes the string ‘color’.

     On top of that the binary option colour-pager defines whether these colour sequences are also generated when the output of
     a command needs to go through the PAGER (also see crt) – this is not enabled by default because different pager programs
     need different command line switches or other configuration in order to support those colour sequences, please see the
     option for more details.

     To forcefully disable all colour support, set colour-disable.

     Colours can be configured through font attributes (‘ft=’ – ‘bold’, ‘invers’ and ‘underline’), foreground (‘fg=’) and back‐
     ground (‘bg=’) colours (‘black’, ‘blue’, ‘green’, ‘red’, ‘brown’, ‘magenta’, ‘cyan’ and ‘white’).  Multiple specifications
     can be joined in a comma separated list, as in

           set colour-msginfo="ft=bold,fg=magenta,bg=cyan"

     Options to be set are colour-msginfo, colour-partinfo, colour-from_, colour-header and colour-uheader, as well as
     colour-user-headers, which is a list of headers to be colourized via colour-uheader instead of the default colour-header.

COMMANDS
     Each command is typed on a line by itself, and may take arguments following the command word.  The command need not be
     typed in its entirety – the first command which matches the typed prefix is used.  (The command list prints a sorted list
     of available commands, and the command help (or ?), when given an argument, will show a documentation string for the expan‐
     sion, as in ‘?unc’; documentation strings are however [Option]al.)

     For commands which take message lists as arguments, the next message forward that satisfies the command's requirements will
     be used shall no explicit message list have been passed.  If there are no messages forward of the current message, the
     search proceeds backwards, and if there are no good messages at all, Mail types “no applicable messages” and aborts the
     command.  The arguments to commands can be quoted, using the following methods:

           ·   An argument can be enclosed between paired double-quotes ‘"argument"’ or single-quotes ‘'argument'’; any white
               space, shell word expansion, or backslash characters (except as described next) within the quotes are treated
               literally as part of the argument.  A double-quote will be treated literally within single-quotes and vice versa.
               Inside such a quoted string the actually used quote character can be used nonetheless by escaping it with a back‐
               slash ‘\’, as in ‘"y\"ou"’.
           ·   An argument that is not enclosed in quotes, as above, can usually still contain space characters if those spaces
               are backslash-escaped.
           ·   A backslash outside of the enclosing quotes is discarded and the following character is treated literally as part
               of the argument.
           ·   An unquoted backslash at the end of a command line is discarded and the next line continues the command.

     Filenames, where expected, are subsequently subjected to the following transformations, in sequence:

           ·   If the filename begins with an unquoted plus sign, and the folder variable is defined, the plus sign will be
               replaced by the value of the folder variable followed by a slash.  If the folder variable is unset or is set to
               null, the filename will be unchanged.
           ·   Shell word expansions are applied to the filename.  Compatibility note: on the long run support for complete
               shell word expansion will be replaced by an internally implemented restricted expansion mechanism in order to
               circumvent possible security impacts through shell expansion.  Expect that a growing number of program parts only
               support this restricted syntax:

               Meta expansions are applied to the filename: leading tilde characters (‘~/’) will be replaced by the expansion of
               HOME, and any occurrence of ‘$VARIABLE’ (or ‘${VARIABLE}’) will be replaced by the expansion of the variable, if
               possible; Mail internal as well as environmental (shell) variables can be accessed through this mechanism.  In
               order to include a raw ‘$’ character precede it with a backslash ‘\’, to include a backslash double it.  If more
               than a single pathname results from this expansion and the command is expecting one file, an error results.

               Note that in interactive display context, in order to allow simple value acceptance (typing “ENTER”), backslash
               quoting is performed automatically as necessary, e.g., a file ‘diet\ is \curd.txt’ will be displayed as ‘diet\\
               is \\curd.txt’.

     The following commands are available:

     #        The comment-command causes the entire line to be ignored.  Note: this really is a normal command which' purpose is
              to discard its arguments, not a “comment-start” indicating special character, which means that, e.g., trailing
              comments on a line are not possible.

     ~        Interprets the remainder of the word as a macro name and passes it through to the call command; e.g., ‘~mymacro’
              is a shorter synonym for ‘call mymacro’.

     -        Print out the preceding message.  If given a numeric argument n, goes to the n'th previous message and prints it.

     =        Show the current message number (the “dot”).

     ?        Prints a brief summary of commands.  [Option] Given an argument a synopsis for the command in question is printed
              instead; commands can be abbreviated in general and this command can be used to see the full expansion of an
              abbreviation including the synopsis, try, e.g., ‘?h’, ‘?hel’ and ‘?help’ and see how the display changes.

     !        Executes the SHELL (see sh(1)) command which follows.

     |        A synonym for the pipe command.

     account  (ac) Creates, selects or lists (an) account(s).  An account is a group of commands and variable settings which
              together usually arrange the environment for the purpose of creating a system login.  Without any argument a list‐
              ing of all defined accounts and their content is printed.  A specific account can be activated by giving solely
              its name, resulting in the system mailbox or inbox of that account to be activated as via an explicit use of the
              command file.  The two argument form is identical to defining a macro as via define.  For example:

                    account myisp {
                      set folder=imaps://mylogin@imap.myisp.example
                      set record=+Sent
                      set from="myname@myisp.example (My Name)"
                      set smtp=smtp://mylogin@smtp.myisp.example
                    }

              creates an account named ‘myisp’ which can later be selected by specifying ‘account myisp’.  The special account
              ‘null’ (case-insensitive) always exists.  localopts can be used to localize account settings – different to normal
              macros the settings will be reverted once the account is switched off.  Accounts can be deleted via unaccount.

     alias    (a) With no arguments, prints out all currently-defined aliases.  With one argument, prints out that alias.  With
              more than one argument, creates a new alias or appends to an existing one.  unalias can be used to delete aliases.

     alternates
              (alt) Manage a list of alternate addresses / names of the active user, members of which will be removed from
              recipient lists when replying to messages (and the metoo variable is not set).  If arguments are given the set of
              alternate names is replaced by them, without arguments the current set is displayed.

     answered
              Takes a message list and marks each message as having been answered.  This mark has no technical meaning in the
              mail system; it just causes messages to be marked in the header summary, and makes them specially addressable.

     cache    [Option] Only applicable to cached IMAP mailboxes; takes a message list and reads the specified messages into the
              IMAP cache.

     call     Calls a macro that has been created via define.

     cd       (ch) Change the working directory to HOME or the given argument.  Synonym for chdir.

     certsave
              [Option] Only applicable to S/MIME signed messages.  Takes a message list and a file name and saves the certifi‐
              cates contained within the message signatures to the named file in both human-readable and PEM format.  The cer‐
              tificates can later be used to send encrypted messages to the respective message senders by setting
              smime-encrypt-USER@HOST variables.

     chdir    (ch) Change the working directory to HOME or the given argument.  Synonym for cd.

     collapse
              Only applicable to threaded mode.  Takes a message list and makes all replies to these messages invisible in
              header summaries, unless they are in state ‘new’.

     connect  [Option] If operating in disconnected mode on an IMAP mailbox, switch to online mode and connect to the mail
              server while retaining the mailbox status.  See the description of the disconnected variable for more information.

     Copy     (C) Copy messages to files whose names are derived from the author of the respective message and don't mark them
              as being saved; otherwise identical to Save.

     copy     (c) Copy messages to the named file and don't mark them as being saved; otherwise identical to save.

     cwd      Print the current working directory.

     Decrypt  [Option] For unencrypted messages this command is identical to Copy; Encrypted messages are first decrypted, if
              possible, and then copied.

     decrypt  [Option] For unencrypted messages this command is identical to copy; Encrypted messages are first decrypted, if
              possible, and then copied.

     define   Without arguments the current list of macros, including their content, is printed, but otherwise a macro is
              defined.  A macro definition is a sequence of commands in the following form:

                    define name {
                      command1
                      command2
                      ...
                      commandN
                    }

              A defined macro can be invoked explicitly by using the call or ~ commands, or implicitly by setting the
              folder-hook or folder-hook-FOLDER variables.  Note that interpretation of localopts depends on how (i.e., “as
              what”: normal macro, folder hook, account switch) the macro is invoked.  Macros can be deleted via undefine.

     delete   (d) Marks the given message list as ‘deleted’.  Deleted messages will neither be saved in MBOX nor will they be
              available for most other commands.

     discard  (di) Identical to ignore.  Also see retain.

     disconnect
              [Option] (disco) If operating in online mode on an IMAP mailbox, switch to disconnected mode while retaining the
              mailbox status.  See the description of the disconnected variable for more.  A list of messages may optionally be
              given as argument; the respective messages are then read into the cache before the connection is closed.  Thus
              `disco *' makes the entire mailbox available for disconnected use.

     dp, dt   Deletes the current message and prints the next message.  If there is no next message, Mail says “at EOF”.

     draft    Takes a message list and marks each given message as a draft.  This mark has no technical meaning in the mail sys‐
              tem; it just causes messages to be marked in the header summary, and makes them specially addressable.

     echo     (ec) Echoes its arguments, resolving special names as documented for the command file.  The escape sequences ‘\a’,
              ‘\b’, ‘\c’, ‘\f’, ‘\n’, ‘\r’, ‘\t’, ‘\v’, ‘\\’ and ‘\0octal-num’ are interpreted just as they are by printf(1)
              (proper quoting provided).

     edit     (e) Point the text editor (as defined in EDITOR) at each message from the given list in turn.  Modified contents
              are discarded unless the writebackedited variable is set.

     elif     Part of the if/elif/else/endif conditional — if the condition of a preceeding if was false, check the following
              condition and execute the following block if it evaluates true.

     else     (el) Part of the if/elif/else/endif conditional — if none of the conditions of the preceeding if and elif commands
              was true, the else block is executed.

     endif    (en) Marks the end of an if/elif/else/endif conditional execution block.

     errors   [Option] Since Mail uses the console as a user interface it can happen that messages scroll by too fast to become
              recognized.  Optionally an error message ring queue is available which stores duplicates of any error message and
              notifies the user in interactive sessions whenever a new error has occurred.  The queue is finite: if its maximum
              size is reached any new message replaces the eldest.  The command errors can be used to manage this message queue:
              if given show or no argument the queue will be displayed and cleared, clear will only clear all messages from the
              queue.

     exit     (ex or x) Exit from Mail without changing the active mailbox and skip any saving of messages in MBOX as well as a
              possibly tracked command line editor history file.

     features
              Print the list of features that have been compiled into Mail.

     File     (Fi) Like file, but open the mailbox readonly.

     file     (fi) The file command switches to a new mailbox.  Without arguments it prints the complete state of the current
              mailbox.  If an argument is given, it will write out changes (such as deletions) the user has made and open a new
              mailbox.  Some special conventions are recognized for the name argument:

                    #           (number sign) means the previous file,
                    %           (percent sign) means the invoking user's system mailbox, which either is the (itself expandable)
                                inbox if that is set ([v15 behaviour may differ] and non-empty), the standardized absolute path‐
                                name indicated by MAIL if that is set, or a builtin compile-time default otherwise.  ([Obsolete]
                                For IMAP folders only, and only if inbox is not set, the value of folder is inspected and used
                                if found.)
                    %user       means the system mailbox of user (and never the value of inbox nor folder, regardless of their
                                actual setting),
                    &amp;           (ampersand) means the invoking user's MBOX file and
                    +file       means a file in the folder directory.
                    %:filespec  expands to the same value as filespec, but the file is handled as a system mailbox by, e.g., the
                                mbox and save commands, meaning that messages that have been read in the current session will be
                                moved to the MBOX mailbox instead of simply being flagged as read.

              If the name matches one of the strings defined with the command shortcut, it is replaced by its long form and
              expanded.  If the name ends with ‘.gz’, ‘.bz2’ or ‘.xz’ it is treated as being compressed with gzip(1), bzip2(1)
              or xz(1), respectively, and transparently handled through an intermediate (un)compression step (using a temporary
              file) with the according facility, sufficient support provided.  Likewise, if the named file doesn't exist, but a
              file with one of the mentioned compression extensions does, then the name is automatically expanded and the com‐
              pressed file is used.

              Otherwise, if the name ends with an extension for which file-hook-load-EXTENSION and file-hook-save-EXTENSION
              variables are set, then the given hooks will be used to load and save “name”, and Mail will work with an interme‐
              diate temporary file.

              MBOX files (flat file-based mailboxes) are generally locked during file operations in order to avoid inconsisten‐
              cies against concurrent modifications.  Mailbox files which Mail treats as system mailboxes will also be protected
              by so-called dotlock files, the traditional way of mail spool file locking: for any file ‘a’ a lock file ‘a.lock’
              will be created for the duration of the synchronization — as necessary a privilege-separated dotlock child process
              will be used to accommodate for necessary privilege adjustments in order to create the dotlock file in the same
              directory and with the same user and group identities as the file of interest.

              If name refers to a directory with the subdirectories ‘tmp’, ‘new’ and ‘cur’, then it is treated as a folder in
              “Maildir” format.  A name of the form

                    [v15-compat] protocol://[user[:password]@]host[:port][/path]
                    [no v15-compat] protocol://[user@]host[:port][/path]

              is taken as an Internet mailbox specification.  The [Option]ally supported protocols are pop3 (POP3) and pop3s
              (POP3 with SSL/TLS encrypted transport).  The [/path] part is valid only for IMAP.  Also see the section On URL
              syntax and credential lookup.

              [no v15-compat] If user contains special characters, in particular ‘/’ or ‘%’, they must be escaped in URL nota‐
              tion – the command urlcodec can be used to show the necessary conversion.

              The optional `path' part applies to IMAP only; if it is omitted, the default `INBOX' is used.  (IMAP paths undergo
              inspections and possible transformations before use (and the command imapcodec can be used to manually apply them
              to any given argument).  Hierarchy delimiters are normalized, a step which is configurable via the imap-delim
              variable chain, but defaults to the first seen delimiter otherwise.  Mail supports internationalised IMAP names,
              and en- and decodes the names from and to the ttycharset as necessary and possible.  If Mail is connected to an
              IMAP server, a name of the form `@mailbox' refers to the `mailbox' on that server, but otherwise a `@' prefix has
              no special meaning.

     flag     Takes a message list and marks the messages as flagged for urgent/special attention.  This mark has no technical
              meaning in the mail system; it just causes messages to be highlighted in the header summary, and makes them spe‐
              cially addressable.

     folder   (fold) The same as file.

     folders  With no arguments, list the names of the folders in the folder directory.  With an existing folder as an argument,
              lists the names of folders below the named folder; e.g. the command `folders @' lists the folders on the base
              level of the current IMAP server.  See also the variable imap-list-depth.

     Followup
              (F) Similar to Respond, but saves the message in a file named after the local part of the first recipient's
              address (instead of in record).

     followup
              (fo) Similar to respond, but saves the message in a file named after the local part of the first recipient's
              address (instead of in record).

     followupall
              Similar to followup, but responds to all recipients regardless of the flipr variable.

     followupsender
              Similar to Followup, but responds to the sender only regardless of the flipr variable.

     Forward  Alias for Fwd.

     forward  Alias for fwd.

     from     (f) Takes a list of messages and prints their message headers (which qualifies this command as Mails search facil‐
              ity).

     Fwd      Similar to fwd, but saves the message in a file named after the local part of the recipient's address (instead of
              in record).

     fwd      Takes a message and the address of a recipient and forwards the message to him.  The text of the original message
              is included in the new one, with the value of the fwdheading variable printed before.  The fwdignore and fwdretain
              commands specify which header fields are included in the new message.  Only the first part of a multipart message
              is included unless the forward-as-attachment option is set.  Unless the option fullnames is set recipient
              addresses will be stripped from comments, names etc.

     fwdignore
              Specifies which header fields are to be ignored with the command fwd.  This command has no effect when the
              forward-as-attachment option is set.

     fwdretain
              Specifies which header fields are to be retained with the command fwd.  fwdretain overrides fwdignore.  This com‐
              mand has no effect when the forward-as-attachment option is set.

     ghost    Define or list command aliases, so-called ghosts.  Without arguments a list of all currently known aliases is
              printed.  With one argument the expansion of the given alias is shown.  With two or more arguments a command alias
              is defined or updated: the first argument is the name under which the remaining command line should be accessible,
              the content of which can be just about anything.  A ghost can be used everywhere a normal command can be used, but
              always takes precedence; any arguments that are given to the command alias are joined onto the alias content, and
              the resulting string forms the command line that is, in effect, executed.  Also see unghost.

                    ? gh xx
                    `ghost': no such alias: "xx"
                    ? gh xx echo hello,
                    ? gh xx
                    ghost xx "echo hello,"
                    ? xx
                    hello,
                    ? xx world
                    hello, world

     headers  (h) Show the current group of headers, the size of which depends on the variable screen.  If a message-specifica‐
              tion is given the group of headers containing the first message therein is shown and the message at the top of the
              screen becomes the new “dot”.

     help     (hel) A synonym for ?.

     history  [Option] Either show or clear the list of history entries; a decimal NUMBER argument selects and shows the respec‐
              tive history entry – press “ENTER” to accept it, and the history entry will become the new history top.  The
              default mode if no arguments are given is show.

     hold     (ho, also preserve) Takes a message list and marks each message therein to be saved in the user's system mailbox
              instead of in MBOX.  Does not override the delete command.  Mail deviates from the POSIX standard with this com‐
              mand, because a next command issued after hold will display the following message, not the current one.

     if       (i) Part of the nestable if/elif/else/endif conditional execution construct — if the given condition is true then
              the encapsulated block is executed.  POSIX only supports the conditions ‘[Rr]eceive’, ‘[Ss]end’ and ‘[Tt]erm’
              (execute if standard input is a tty), all remaining conditions are non-portable extensions; note that falsely
              specified conditions cause the execution of the entire conditional construct until the (matching) closing endif
              command to be suppressed.  The syntax of the nestable if conditional execution construct requires that each condi‐
              tion and syntax element is surrounded by whitespace.

                    if receive
                      commands ...
                    else
                      commands ...
                    endif

              Another condition can be any boolean value (see the section Value options for booleans) to mark an enwrapped block
              as “never execute” or “always execute”.  It is possible to check a variable for existence or compare its expansion
              against a user given value or another variable via the ‘$’ (“variable next”) conditional trigger character.  The
              available comparison operators are ‘&amp;lt;’ (less than), ‘&amp;lt;=’ (less than or equal to), ‘==’ (equal), ‘!=’ (not equal),
              ‘&amp;gt;=’ (greater than or equal to), ‘&amp;gt;’ (greater than), ‘=@’ (is substring of) and ‘!@’ (is not substring of).  The
              values of the left and right hand side are treated as strings and are compared 8-bit byte-wise, ignoring case
              according to the rules of the US-ASCII encoding (therefore, dependend on the active locale, possibly producing
              false results for strings in the locale encoding).  Except for the substring checks the comparison will instead be
              performed arithmetically if both, the user given value as well as the variable content, can be parsed as numbers
              (integers).  An unset variable is treated as the empty string.

              When the [Option]al regular expression support is available, the additional test cases ‘=~’ and ‘!~’ can be used.
              They treat the right hand side as a regular expression that is matched case-insensitively and according to the
              active LC_CTYPE locale, meaning that strings in the locale encoding should be matched correctly.

              Conditions can be joined via AND-OR lists (where the AND operator is ‘&amp;&amp;’ and the OR operator is ‘||’), which have
              equal precedence and will be evaluated with left associativity, thus using the same syntax that is known for the
              sh(1).  It is also possible to form groups of conditions and lists by enclosing them in pairs of brackets
              ‘[ ... ]’, which may be interlocked within each other, and also be joined via AND-OR lists.

              The results of individual conditions and entire groups may be modified via unary operators: the unary operator ‘!’
              will reverse the result.

                    if $debug
                      echo *debug* is set
                    endif
                    if $ttycharset == "UTF-8"
                      echo *ttycharset* is set to UTF-8, case-insensitively
                    endif
                    set t1=one t2=one
                    if $t1 == $t2
                      echo These two variables are equal
                    endif
                    if $version-major &amp;gt;= 15
                      echo Running a new version..
                      if $features =@ "regex"
                        if $TERM =~ "^xterm.*"
                          echo ..in an X terminal
                        endif
                      endif
                      if [ [ true ] &amp;&amp; [ [ $debug ] || [ $verbose ] ] ]
                        echo Noisy, noisy
                      endif
                      if true &amp;&amp; $debug || $verbose
                        echo Left associativity, as is known from the shell
                      endif
                      if ! ! true &amp;&amp; ! [ ! $debug &amp;&amp; ! $verbose ]
                        echo Unary operator support
                      endif
                    endif

     ignore   Without arguments the list of ignored header fields is printed, otherwise the given list of header fields is added
              to the ignore list: Header fields in the ignore list are not printed on the terminal when a message is printed.
              To print a message in its entirety, use the commands Type or Print.  Also see discard and retain.

     imap     [Option] Sends command strings directly to the current IMAP server.  Mail operates always in IMAP `selected state'
              on the current mailbox; commands that change this will produce undesirable results and should be avoided.  Useful
              IMAP commands are:

                    create         Takes the name of an IMAP mailbox as an argument and creates it.

                    getquotaroot   (RFC 2087) Takes the name of an IMAP mailbox as an argument and prints the quotas that apply
                                   to the mailbox.  Not all IMAP servers support this command.

                    namespace      (RFC 2342) Takes no arguments and prints the Personal Namespaces, the Other User's Namespaces
                                   and the Shared Namespaces.  Each namespace type is printed in parentheses; if there are mul‐
                                   tiple namespaces of the same type, inner parentheses separate them.  For each namespace a
                                   prefix and a hierarchy separator is listed.  Not all IMAP servers support this command.

     imapcodec
              [Option] Perform IMAP path transformations on all the given strings.  The first argument specifies the operation:
              enc[ode] normalizes hierarchy delimiters (see imap-delim) and converts the strings from the locale ttycharset to
              the internationalised variant used by IMAP, dec[code] does the reverse operation.  Errors are indicated by
              prepending the output with the string ‘ERROR’.

     inc      Same as newmail.

     list     Prints the names of all available commands, alphabetically sorted.

     localopts
              This command can be used to localize changes to variables, meaning that their state will be reverted to the former
              one once the covered scope is left.  It can only be used inside of macro definition blocks introduced by account
              or define, and is interpreted as a boolean (see Value options); the “covered scope” of an account is left once it
              is switched off again.

                    define temporary_settings {
                      set global_option1
                      localopts on
                      set local_option1
                      set local_option2
                      localopts off
                      set global_option2
                    }

              Note that this setting “stacks up”: i.e., if ‘macro1’ enables change localization and calls ‘macro2’, which
              explicitly resets localization, then any value changes within ‘macro2’ will still be reverted by ‘macro1’!

     Lreply   Reply to messages that come in via known (mlist) or subscribed (mlsubscribe) mailing lists, or pretend to do so
              (see Mailing lists): on top of the usual reply functionality this will actively resort and even remove message
              recipients in order to generate a message that is supposed to be send to a mailing list.  For example it will also
              implicitly generate a ‘Mail-Followup-To:’ header if that seems useful, regardless of the setting of the variable
              followup-to.

     Mail     Similar to mail, but saves the message in a file named after the local part of the first recipient's address
              (instead of in record).

     mail     (m) Takes a (list of) recipient address(es) as (an) argument(s), or asks on standard input if none were given;
              then collects the remaining mail content and sends it out.

     mbox     (mb) The given message list is to be sent to MBOX when Mail is quit; this is the default action unless the hold
              option is set.  [v15 behaviour may differ] This command can only be used in a system mailbox (see file).

     mimetype
              Without any arguments the content of the MIME type cache will displayed.  Otherwise each argument defines a com‐
              plete MIME type specification of a type that shall be added (prepended) to the cache.  In any event MIME type
              sources are loaded first as necessary – mimetypes-load-control can be used to fine-tune which sources are actually
              loaded.  Refer to the section on The mime.types files for more on MIME type specifications and this topic in gen‐
              eral.  MIME type unregistration and cache resets can be triggered with unmimetype.

     mlist    Without arguments the list of all currently defined mailing lists (and their attributes, if any) is printed.  Oth‐
              erwise all given arguments (which need not be quoted except for whitespace) will be added and henceforth be recog‐
              nized as mailing lists.  Mailing lists may be removed via the command unmlist.

              If the [Option]al regular expression support is available then mailing lists may also be specified as regular
              expressions (see re_format(7) for more on those).

     mlsubscribe
              Without arguments the list of all currently defined mailing lists which have a subscription attribute is printed.
              Otherwise this attribute will be set for all given mailing lists, newly creating them as necessary (as via mlist).
              Subscription attributes may be removed via the command unmlsubscribe.  Also see followup-to.

     Move     Similar to move, but moves the messages to a file named after the local part of the sender address of the first
              message (instead of in record).

     move     Acts like copy but marks the messages for deletion if they were transferred successfully.

     More     Like more, but also prints ignored header fields and all MIME parts.  Identical to Page.

     more     Invokes the PAGER on the given messages, even in non-interactive mode and as long as the standard output is a ter‐
              minal.  Identical to page.

     netrc    [Option] Either (show or) clear the current .netrc cache, loading the file first as necessary in the former case.
              Note that Mail will try to read the file only once, use ‘netrc clear’ to unlock the next attempt.  See
              netrc-lookup and the section On URL syntax and credential lookup; the section The .netrc file documents the file
              format in detail.

     newmail  Checks for new mail in the current folder without committing any changes before.  If new mail is present, a mes‐
              sage is printed.  If the header variable is set, the headers of each new message are also printed.

     next     (n) (like ‘+’ or “ENTER”) Goes to the next message in sequence and types it.  With an argument list, types the
              next matching message.

     New      Same as Unread.

     new      Same as unread.

     noop     If the current folder is accessed via a network connection, a “NOOP” command is sent, otherwise no operation is
              performed.

     Page     Like page, but also prints ignored header fields and all MIME parts.  Identical to More.

     page     Invokes the PAGER on the given messages, even in non-interactive mode and as long as the standard output is a ter‐
              minal.  Identical to more.

     Pipe     Like pipe but also pipes ignored header fields and all parts of MIME ‘multipart/alternative’ messages.

     pipe     (pi) Takes a message list and a shell command and pipes the messages through the command.  Without an argument the
              current message is piped through the command given by the cmd variable.  If the page variable is set, every mes‐
              sage is followed by a formfeed character.

     preserve
              (pre) A synonym for hold.

     Print    (P) Like print but also prints out ignored header fields and all parts of MIME ‘multipart/alternative’ messages.
              See also print, ignore and retain.

     print    (p) Takes a message list and types out each message on the user's terminal.  For MIME multipart messages, all
              parts with a content type of ‘text’ or ‘message’ are shown, the other are hidden except for their headers.  Mes‐
              sages are decrypted and converted to the terminal character set if necessary.

     quit     (q) Terminates the session, saving all undeleted, unsaved messages in the current MBOX, preserving all messages
              marked with hold or preserve or never referenced in the system mailbox, and removing all other messages from the
              system mailbox.  If new mail has arrived during the session, the message “You have new mail” will be shown.  If
              given while editing a mailbox file with the command line flag -f, then the edit file is rewritten.  A return to
              the shell is effected, unless the rewrite of edit file fails, in which case the user can escape with the exit com‐
              mand.

     redirect
              Same as resend.

     Redirect
              Same as Resend.

     remove   Removes the named folders.  The user is asked for confirmation in interactive mode.

     rename   Takes the name of an existing folder and the name for the new folder and renames the first to the second one.
              Both folders must be of the same type and must be located on the current server for IMAP.

     Reply    (R) Reply to originator.  Does not reply to other recipients of the original message.  flipr will exchange this
              command with reply.  Unless the option fullnames is set the recipient address will be stripped from comments,
              names etc.

     reply    (r) Take a message and group-responds to it by addressing the sender and all recipients.  followup-to,
              followup-to-honour, reply-to-honour as well as recipients-in-cc influence response behaviour.  The command Lreply
              offers special support for replying to mailing lists.  Unless the option fullnames is set recipient addresses will
              be stripped from comments, names etc.  If flipr is set the commands Reply and reply are exchanged.

     replyall
              Similar to reply, but initiates a group-reply regardless of the value of flipr.

     replysender
              Similar to Reply, but responds to the sender only regardless of the value of flipr.

     Resend   Like resend, but does not add any header lines.  This is not a way to hide the sender's identity, but useful for
              sending a message again to the same recipients.

     resend   Takes a list of messages and a user name and sends each message to the named user.  ‘Resent-From:’ and related
              header fields are prepended to the new copy of the message.

     Respond  Same as Reply.

     respond  Same as reply.

     respondall
              Same as replyall.

     respondsender
              Same as replysender.

     retain   (ret) Without arguments the list of retained header fields is printed, otherwise the given list of header fields
              is added to the retain list: Header fields in the retain list are shown on the terminal when a message is printed,
              all other header fields are suppressed.  To print a message in its entirety, use the commands Type or Print.  Also
              see discard and ignore; retain takes precedence over the mentioned.

     Save     (S) Similar to save, but saves the messages in a file named after the local part of the sender of the first mes‐
              sage instead of (in record and) taking a filename argument.

     save     (s) Takes a message list and a filename and appends each message in turn to the end of the file.  If no filename
              is given, the MBOX file is used.  The filename in quotes, followed by the generated character count is echoed on
              the user's terminal.  If editing a system mailbox the messages are marked for deletion.  Compressed files and IMAP
              mailboxes are handled as described for the -f command line option above.

     savediscard
              Same as saveignore.

     saveignore
              Is to save what ignore is to print and type.  Header fields thus marked are filtered out when saving a message by
              save or when automatically saving to MBOX.  This command should only be applied to header fields that do not con‐
              tain information needed to decode the message, as MIME content fields do.  If saving messages on an IMAP account
              ignoring fields makes it impossible to copy the data directly on the server, thus operation usually becomes much
              slower.

     saveretain
              Is to save what retain is to print and type.  Header fields thus marked are the only ones saved with a message
              when saving by save or when automatically saving to MBOX.  saveretain overrides saveignore.  The use of this com‐
              mand is strongly discouraged since it may strip header fields that are needed to decode the message correctly.

     seen     Takes a message list and marks all messages as having been read.

     set      (se) Without arguments this command prints all options and, for non-binary options, values that are currently
              known to Mail.  Setting any of the options bsdcompat or bsdset changes the output format to BSD style, otherwise a
              properly quoted listing is produced.  If debug is set or verbose has been set twice then the listing is modified
              to mark out assembled variables.

              Otherwise modifies (set and unsets) the given options.  Arguments are of the form ‘option=value’ (no space before
              or after ‘=’), or plain ‘option’ if there is no value.  Quotation marks may be placed around any part of the
              assignment statement to quote blanks or tabs, e.g.,

                    set indentprefix="-&amp;gt;"

              If an argument begins with ‘no’, as in ‘set nosave’, the effect is the same as invoking the unset command with the
              remaining part of the variable (‘unset save’).

     setenv   Identical to set except that the options are also exported into the program environment; since this task requires
              native host support the command will always report error if that is not available (but still act like set in this
              case).  This operation is a no-op unless all resource files have been loaded.  Also see unsetenv.

     shell    (sh) Invokes an interactive version of the shell.

     shortcut
              Without arguments the list of all currently defined shortcuts is printed.  Otherwise all given arguments (which
              need not be quoted except for whitespace) are treated as pairs of shortcuts and their expansions, creating new or
              changing already existing shortcuts, as necessary.  Shortcuts may be removed via the command unshortcut.  The
              expansion strings should be in the syntax that has been described for the file command.

     show     Like print, but performs neither MIME decoding nor decryption, so that the raw message text is shown.

     size     (si) Print the size in characters of each message of the given message-list.

     sort     Create a sorted representation of the current folder, and change the next command and the addressing modes such
              that they refer to messages in the sorted order.  Message numbers are the same as in regular mode.  If the header
              variable is set, a header summary in the new order is also printed.  Possible sorting criteria are:

                    date     Sort the messages by their ‘Date:’ field, that is by the time they were sent.
                    from     Sort messages by the value of their ‘From:’ field, that is by the address of the sender.  If the
                             showname variable is set, the sender's real name (if any) is used.
                    size     Sort the messages by their size.
                    spam     [Option] Sort the message by their spam score, as has been classified by spamrate.
                    status   Sort the messages by their message status.
                    subject  Sort the messages by their subject.
                    thread   Create a threaded display.
                    to       Sort messages by the value of their ‘To:’ field, that is by the address of the recipient.  If the
                             showname variable is set, the recipient's real name (if any) is used.

              If no argument is given, the current sorting criterion is printed.

     source   (so) The source command reads commands from a file.

     source_if
              The difference to source is that this command will not generate an error if the given file argument cannot be
              opened successfully.  This can matter in, e.g., resource files, since loading of those is stopped when an error is
              encountered.

     spamclear
              [Option] Takes a list of messages and clears their ‘is-spam’ flag.

     spamforget
              [Option] Takes a list of messages and causes the spam-interface to forget it has ever used them to train its
              Bayesian filter.  Unless otherwise noted the ‘is-spam’ flag of the message is inspected to chose whether a message
              shall be forgotten to be “ham” or “spam”.

     spamham  [Option] Takes a list of messages and informs the Bayesian filter of the spam-interface that they are “ham”.  This
              also clears the ‘is-spam’ flag of the messages in question.

     spamrate
              [Option] Takes a list of messages and rates them using the configured spam-interface, without modifying the mes‐
              sages, but setting their ‘is-spam’ flag as appropriate; because the spam rating headers are lost the rate will be
              forgotten once the mailbox is left.  Refer to the manual section Handling spam for the complete picture of spam
              handling in Mail.

     spamset  [Option] Takes a list of messages and sets their ‘is-spam’ flag.

     spamspam
              [Option] Takes a list of messages and informs the Bayesian filter of the spam-interface that they are “spam”.
              This also sets the ‘is-spam’ flag of the messages in question.

     thread   [Obsolete] The same as ‘sort thread’ (consider using a ‘ghost’ as necessary).  Create a threaded representation of
              the current folder, i.e. indent messages that are replies to other messages in the header display and change the
              next command and the addressing modes such that they refer to messages in the threaded order.  Message numbers are
              the same as in unthreaded mode.  If the header variable is set, a header summary in threaded order is also
              printed.

     top      (to) Takes a message list and prints the top few lines of each.  The number of lines printed is controlled by the
              variable toplines and defaults to five.

     touch    (tou) Takes a message list and marks the messages for saving in MBOX.  Mail deviates from the POSIX standard with
              this command, as a following next command will display the following message instead of the current one.

     Type     (T) Identical to the Print command.

     type     (t) A synonym for print.

     unaccount
              Delete all given accounts.  An error message is printed if a given account is not defined.  The special name ‘*’
              will discard all existing accounts.

     unalias  (una) Takes a list of names defined by alias commands and discards the remembered groups of users.  The special
              name ‘*’ will discard all existing aliases.

     unanswered
              Takes a message list and marks each message as not having been answered.

     uncollapse
              Only applicable to threaded mode.  Takes a message list and makes the message and all replies to it visible in
              header summaries again.  When a message becomes the current message, it is automatically made visible.  Also when
              a message with collapsed replies is printed, all of these are automatically uncollapsed.

     undefine
              Undefine all given macros.  An error message is printed if a given macro is not defined.  The special name ‘*’
              will discard all existing macros.

     undelete
              (u) Takes a message list and marks each message as not being deleted.

     undraft  Takes a message list and undrafts each message.

     unflag   Takes a message list and marks each message as not being flagged.

     unfwdignore
              Removes the header field names from the list of ignored fields for the forward command.  The special name ‘*’ will
              remove all fields.

     unfwdretain
              Removes the header field names from the list of retained fields for the forward command.  The special name ‘*’
              will remove all fields.

     unghost  Remove all the given command ghosts.  The special name ‘*’ will remove all ghosts.

     unignore
              Removes the header field names from the list of ignored fields.  The special name ‘*’ will remove all fields.

     unmimetype
              Delete all given MIME types, e.g., ‘unmimetype text/plain’ will remove all registered specifications for the MIME
              type ‘text/plain’.  The special name ‘*’ will discard all existing MIME types, just as will ‘reset’, but which
              also reenables cache initialization via mimetypes-load-control.

     unmlist  Forget about all the given mailing lists.  The special name ‘*’ will remove all lists.  Also see mlist.

     unmlsubscribe
              Remove the subscription attribute from all given mailing lists.  The special name ‘*’ will clear the attribute
              from all lists which have it set.  Also see mlsubscribe.

     Unread   Same as unread.

     unread   Takes a message list and marks each message as not having been read.

     unretain
              Removes the header field names from the list of retained fields.  The special name ‘*’ will remove all fields.

     unsaveignore
              Removes the header field names from the list of ignored fields for saving.  The special name ‘*’ will remove all
              fields.

     unsaveretain
              Removes the header field names from the list of retained fields for saving.  The special name ‘*’ will remove all
              fields.

     unset    (uns) Takes a list of option names and discards their remembered values; the inverse of set.

     unsetenv
              Identical to unset except that the options are also removed from the program environment; since this task requires
              native host support the command will always report error if that is not available (but still act like unset).
              This operation is a no-op unless all resource files have been loaded.  Also see setenv.

     unshortcut
              Deletes the shortcut names given as arguments.  The special name ‘*’ will remove all shortcuts.

     unsort   Disable sorted or threaded mode (see the sort and thread commands), return to normal message order and, if the
              header variable is set, print a header summary.

     unthread
              [Obsolete] Same as unsort.

     urlcodec
              Perform URL percent codec operations, rather according to RFC 3986, on all given strings.  This is character set
              agnostic and thus locale dependent, and it may decode bytes which are invalid in the current locale, unless the
              input solely consists of characters in the portable character set, see Character sets.  The first argument speci‐
              fies the operation: enc[ode] or dec[code] perform plain URL percent en- and decoding, respectively.
              p[ath]enc[ode] and p[ath]dec[ode] perform a slightly modified operation which should be better for pathnames: it
              doesn't allow a tilde ‘~’, and will neither accept hyphen ‘-’ nor dot ‘.’ as an initial character.

     varedit  Edit the values of or create the given variable(s) in the EDITOR.  Binary variables cannot be edited.

     varshow  Show informations about all the given options.  Mail knows about a finite set of known builtin variables that are
              subdivided further in binary and value variants; they may have special properties, like “read-only” (setting may
              not be changed) and “virtual”, meaning that the value is generated on-the-fly as necessary.  Beside those known
              variables an infinite number of unknown, so-called “assembled” variables, which are expected to be able to store
              values, may exist.

                    ? set foo=bar nobar
                    ? varshow sendwait version-major foo bar
                    "sendwait": (73) binary: set=1 (ENVIRON=0)
                    "version-major": (192) value, read-only, virtual:\
                      set=1 (ENVIRON=0) value&amp;lt;14&amp;gt;
                    "foo": (assembled) set=1 (ENVIRON=0) value&amp;lt;bar&amp;gt;
                    "bar": (assembled) set=0 (ENVIRON=0) value&amp;lt;NULL&amp;gt;

     verify   [Option] Takes a message list and verifies each message.  If a message is not a S/MIME signed message, verifica‐
              tion will fail for it.  The verification process checks if the message was signed using a valid certificate, if
              the message sender's email address matches one of those contained within the certificate, and if the message con‐
              tent has been altered.

     visual   (v) Takes a message list and invokes the display editor on each message.  Modified contents are discarded unless
              the writebackedited variable is set.

     write    (w) For conventional messages the body without all headers is written.  The original message is never marked for
              deletion in the originating mail folder.  The output is decrypted and converted to its native format as necessary.
              If the output file exists, the text is appended.  If a message is in MIME multipart format its first part is writ‐
              ten to the specified file as for conventional messages, handling of the remains depends on the execution mode.  No
              special handling of compressed files is performed.

              In interactive mode the user is consecutively asked for the filenames of the processed parts.  For convience sav‐
              ing of each part may be skipped by giving an empty value, the same result as writing it to /dev/null.  Shell pip‐
              ing the part content by specifying a leading vertical bar ‘|’ character for the filename is supported.  Other user
              input is expanded as usually for folders, e.g., tilde expansion is performed, and contents of the destination file
              are overwritten if the file previously existed.

              [v15 behaviour may differ] In non-interactive mode any part which does not specify a filename is ignored, and sus‐
              picious parts of filenames of the remaining parts are URL percent encoded (as via urlcodec) to prevent injection
              of malicious character sequences, resulting in a filename that will be written into the current directory.  Exist‐
              ing files won't be overwritten, instead the part number or a dot are appended after a number sign ‘#’ to the name
              until file creation succeeds (or fails due to other reasons).

     xit      (x) A synonym for exit.

     z        Mail presents message headers in screenfuls as described under the headers command.  Without arguments this com‐
              mand scrolls to the next window of messages, likewise if the argument is ‘+’.  An argument of ‘-’ scrolls to the
              last, ‘^’ scrolls to the first, and ‘$’ to the last screen of messages.  A number argument prefixed by ‘+’ or ‘-’
              indicates that the window is calculated in relation to the current position, and a number without a prefix speci‐
              fies an absolute position.

     Z        Similar to z, but scrolls to the next or previous window that contains at least one ‘new’ or flagged message.

TILDE ESCAPES
     Here is a summary of the tilde escapes, which are used to perform special functions when composing messages.  Tilde escapes
     are only recognized at the beginning of lines.  The name “tilde escape” is somewhat of a misnomer since the actual escape
     character can be changed by adjusting the option escape.

     ~~ string    Insert the string of text in the message prefaced by a single ‘~’.  (If the escape character has been changed,
                  that character must be doubled in order to send it at the beginning of a line.)

     ~! command   Execute the indicated shell command, then return to the message.

     ~.           Same effect as typing the end-of-file character.

     ~: Mail-command or ~_ Mail-command
                  Execute the given Mail command.  Not all commands, however, are allowed.

     ~?           Write a summary of command escapes.

     ~&amp;lt; filename  Identical to ~r.

     ~&amp;lt;! command  command is executed using the shell.  Its standard output is inserted into the message.

     ~@ [filename...]
                  With no arguments, edit the attachment list interactively.  If an attachment's file name is left empty, that
                  attachment is deleted from the list.  When the end of the attachment list is reached, Mail will ask for fur‐
                  ther attachments until an empty name is given.  If a given file name solely consists of the number sign ‘#’
                  followed by a valid message number of the currently active mailbox, then the given message is attached as a
                  MIME ‘message/rfc822’ and the rest of this section does not apply.

                  If character set conversion has been compiled into Mail, then this mode gives the user the option to specify
                  input and output character sets, unless the file extension indicates binary content, in which case Mail asks
                  whether this step shall be skipped for the attachment in question.  If not skipped, then the charset that suc‐
                  ceeds to represent the attachment data will be used in the ‘charset=’ MIME parameter of the mail message:

                  ·   If input and output character sets are specified, then the conversion is performed on the fly.  The user
                      will be asked repeatedly until the desired conversion succeeds.
                  ·   If only an output character set is specified, then the input is assumed to be in the ttycharset charset
                      and will be converted to the given output charset on the fly.  The user will be asked repeatedly until the
                      desired conversion succeeds.
                  ·   If no character sets are specified at all then the algorithm that is documented in the section Character
                      sets is applied, but directly and on the fly.  The user will be asked repeatedly until the desired conver‐
                      sion succeeds.
                  ·   Finally, if an input-, but no output character set is specified, then no conversion is ever performed, but
                      the ‘charset=’ MIME parameter value will still be set to the user input.
                  ·   The character set selection loop can be left by typing ‘control-C’, i.e., causing an interrupt.  Note that
                      before Mail version 15.0 this terminates the entire current attachment selection, not only the character
                      set selection.

                  Without character set conversion support, Mail will ask for the input character set only, and it'll set the
                  ‘charset=’ MIME parameter value to the given input, if any; if no user input is seen then the ttycharset char‐
                  acter set will be used for the parameter value instead.  Note that the file extension check isn't performed in
                  this mode, since no conversion will take place anyway.

                  Note that in non-interactive mode, for reproduceabilities sake, there will always be two questions for each
                  attachment, regardless of whether character set conversion is available and what the file extension is.  The
                  first asks for the filename, and the second asks for the input character set to be passed through to the cor‐
                  responding MIME parameter; no conversion will be tried if there is input to the latter question, otherwise the
                  usual conversion algorithm, as above, is applied.  For message attachments, the answer to the second question
                  is completely ignored.

                  If (instead) filename arguments are specified for the ~@ command they are treated as a comma separated list of
                  files, which are all expanded and appended to the end of the attachment list.  (Filenames with commas, or with
                  leading or trailing whitespace can only be added via the command line or the first method.  Message attach‐
                  ments can only be added via the first method; filenames which clash with message numbers can only be added via
                  the command line or the second method.)  In this mode the (text) attachments are assumed to be in ttycharset
                  encoding, and will be evaluated as documented in the section Character sets.

     ~A           Inserts the string contained in the Sign variable (same as ‘~i Sign’).  The escape sequences tabulator ‘\t’
                  and newline ‘\n’ are understood.

     ~a           Inserts the string contained in the sign variable (same as ‘~i sign’).  The escape sequences tabulator ‘\t’
                  and newline ‘\n’ are understood.

     ~b name ...  Add the given names to the list of blind carbon copy recipients.

     ~c name ...  Add the given names to the list of carbon copy recipients.

     ~d           Read the file specified by the DEAD variable into the message.

     ~e           Invoke the text editor on the message collected so far.  After the editing session is finished, the user may
                  continue appending text to the message.

     ~F messages  Read the named messages into the message being sent, including all message headers and MIME parts.  If no mes‐
                  sages are specified, read in the current message.

     ~f messages  Read the named messages into the message being sent.  If no messages are specified, read in the current mes‐
                  sage.  ignore and retain lists are used to modify the message headers.  For MIME multipart messages, only the
                  first printable part is included.

     ~H           Edit the message header fields ‘From:’, ‘Reply-To:’, ‘Sender:’ and ‘Organization:’ by typing each one in turn
                  and allowing the user to edit the field.  The default values for these fields originate from the from,
                  replyto, sender and ORGANIZATION variables.

     ~h           Edit the message header fields ‘To:’, ‘Cc:’, ‘Bcc:’ and ‘Subject:’ by typing each one in turn and allowing the
                  user to edit the field.

     ~i variable  Insert the value of the specified variable into the message, adding a newline character at the end.  The mes‐
                  sage remains unaltered if the variable is unset or empty.  The escape sequences tabulator ‘\t’ and newline
                  ‘\n’ are understood.

     ~M messages  Read the named messages into the message being sent, indented by indentprefix.  If no messages are specified,
                  read the current message.

     ~m messages  Read the named messages into the message being sent, indented by indentprefix.  If no messages are specified,
                  read the current message.  ignore and retain lists are used to modify the message headers.  For MIME multipart
                  messages, only the first printable part is included.

     ~p           Print out the message collected so far, prefaced by the message header fields and followed by the attachment
                  list, if any.

     ~q           Abort the message being sent, copying it to the file specified by the DEAD variable if save is set.

     ~R filename  Read the named file into the message, indented by indentprefix.

     ~r filename  Read the named file into the message.

     ~s string    Cause the named string to become the current subject field.

     ~t name ...  Add the given name(s) to the direct recipient list.

     ~U messages  Read in the given / current message(s) excluding all headers, indented by indentprefix.

     ~u messages  Read in the given / current message(s), excluding all headers.

     ~v           Invoke an alternate editor (defined by the VISUAL option) on the message collected so far.  Usually, the
                  alternate editor will be a screen editor.  After the editor is quit, the user may resume appending text to the
                  end of the message.

     ~w filename  Write the message onto the named file.  If the file exists, the message is appended to it.

     ~x           Same as ~q, except that the message is not saved at all.

     ~| command   Pipe the message through the specified filter command.  If the command gives no output or terminates abnor‐
                  mally, retain the original text of the message.  E.g., the command fmt(1) is often used as a rejustifying fil‐
                  ter.

VARIABLE OPTIONS
     Variables are controlled via set and unset commands; in general using unset can also be accomplished by prefixing a vari‐
     able name with the string “no” and calling set, e.g., ‘unset crt’ will have the same effect as ‘set nocrt’.  Creation or
     editing of variables in an editor can also be achieved with varedit.  varshow will give more insight on the given vari‐
     able(s), whereas set will print a listing of all variables when called without arguments.  Options are also implicitly
     inherited from the program ENVIRONMENT and can be set explicitly via the command line option -S.

     Different kind of options exist: binary options, which can only be in one of the two states “set” and “unset”, as well as
     value options which have an assigned string value, for which proper quoting may be important upon assignment time.

   Initial Settings
     The standard POSIX 2008/Cor 1-2013 mandates the following initial variable settings: noallnet, noappend, asksub, noaskbcc,
     noautoprint, nobang, nocmd, nocrt, nodebug, nodot, escape set to ‘~’, noflipr, nofolder, header, nohold, noignore,
     noignoreeof, nokeep, nokeepsave, nometoo, nooutfolder, nopage, prompt set to ‘? ’ (note that Mail deviates from the stan‐
     dard by using ‘\&amp; ’, but the ‘\&amp;’ special prompt escape results in “?” being printed unless bsdcompat is set), noquiet,
     norecord, save, nosendwait, noshowto, noSign, nosign, toplines set to ‘5’.

     Notes: Mail doesn't support the noonehop variable – use command line options or sendmail-arguments to pass options through
     to a MTA.  And the default global mail.rc file (which is loaded unless the -n command line flag has been used or the
     NAIL_NO_SYSTEM_RC environment variable is set) bends those initial settings a bit, e.g., it sets the options hold, keepsave
     and keep, to name a few, calls retain etc., and should thus be taken into account.

   Binary options
     add-file-recipients
                When file or pipe recipients have been specified, mention them in the corresponding address fields of the mes‐
                sage instead of silently stripping them from their recipient list.  By default such addressees are not men‐
                tioned.

     allnet     Causes only the local part to be evaluated when comparing addresses.

     append     Causes messages saved in MBOX to be appended to the end rather than prepended.  This should always be set.

     ask or asksub
                Causes Mail to prompt for the subject of each message sent.  If the user responds with simply a newline, no sub‐
                ject field will be sent.

     askatend   Causes the prompts for ‘Cc:’ and ‘Bcc:’ lists to appear after the message has been edited.

     askattach  If set, Mail asks for files to attach at the end of each message, shall the list be found empty at that time.
                An empty line finalizes the list.

     askcc      Causes the user to be prompted for carbon copy recipients (at the end of each message if askatend or bsdcompat
                are set) shall the list be found empty (at that time).  An empty line finalizes the list.

     askbcc     Causes the user to be prompted for blind carbon copy recipients (at the end of each message if askatend or
                bsdcompat are set) shall the list be found empty (at that time).  An empty line finalizes the list.

     asksign    [Option] Causes the user to be prompted if the message is to be signed at the end of each message.  The
                smime-sign variable is ignored when this variable is set.

     autocollapse
                Causes threads to be collapsed automatically when threaded mode is entered (see the collapse command).

     autoprint  Causes the delete command to behave like ‘dp -’; thus, after deleting a message the next one will be typed auto‐
                matically.

     autothread
                [Obsolete] Causes threaded mode (see the thread command) to be entered automatically when a folder is opened.
                The same as ‘autosort=thread’.

     bang       Enables the substitution of ‘!’ by the contents of the last command line in shell escapes.

     batch-exit-on-error
                If the batch mode has been enabled via the -# command line option, then this variable will be consulted whenever
                Mail completes one operation (returns to the command prompt); if it is set then Mail will terminate if the last
                operation generated an error.

     bsdannounce
                Causes automatic display of a header summary after executing a file command.

     bsdcompat  Sets some cosmetical features to traditional BSD style; has the same affect as setting askatend and all other
                variables prefixed with ‘bsd’; it also changes the meaning of the Mail specific ‘\&amp;’ prompt escape sequence.

     bsdflags   Changes the letters printed in the first column of a header summary to traditional BSD style.

     bsdheadline
                Changes the display of columns in a header summary to traditional BSD style.

     bsdmsgs    Changes some informational messages to traditional BSD style.

     bsdorder   Causes the ‘Subject:’ field to appear immediately after the ‘To:’ field in message headers and with the ~h TILDE
                ESCAPES.

     bsdset     Changes the output format of the set command to traditional BSD style.

     colour-disable
                [Option] Forcefully disable usage of colours.  Also see the section Coloured message display.

     colour-pager
                [Option] Whether colour shall be used for output that is paged through PAGER.  Note that pagers may need special
                flags, e.g., less(1) requires the option -R and lv(1) the option -c in order to support colours; therefore Mail
                will inspect the variable PAGER – if that starts with the string “less” a non-existing environment variable LESS
                will be set to ‘FRSXi’, likewise for “lv” LV will optionally be set to “-c”.  Also see the section Coloured
                message display for more on this.

     debug      Prints debugging messages and disables the actual delivery of messages.  Also implies norecord and nosave.

     disconnected
                [Option] When an IMAP mailbox is selected and this variable is set, no connection to the server is initiated.
                Instead, data is obtained from the local cache (see imap-cache).  Mailboxes that are not present in the cache
                and messages that have not yet entirely been fetched from the server are not available; to fetch all messages in
                a mailbox at once, the command `copy * /dev/null' can be used while still in connected mode.  Changes that are
                made to IMAP mailboxes in disconnected mode are queued and committed later when a connection to that server is
                made.  This procedure is not completely reliable since it cannot be guaranteed that the IMAP unique identifiers
                (UIDs) on the server still match the ones in the cache at that time.  Data is saved to DEAD when this problem
                occurs.

     disconnected-USER@HOST
                The specified account is handled as described for the disconnected variable above, but other accounts are not
                affected.

     disposition-notification-send
                [Option] Emit a ‘Disposition-Notification-To:’ header (RFC 3798) with the message.  This requires a set from
                variable.

     dot        When dot is set, a dot ‘.’ on a line by itself during message input from a terminal shall be treated as end-of-
                message (in addition to the normal end-of-file condition).  If ignoreeof is set nodot is ignored and using a dot
                is the only method to terminate input mode.

     dotlock-ignore-error
                [Option] Synchronization of mailboxes which Mail treats as system mailboxes (see the command file) will be pro‐
                tected with so-called dotlock files—the traditional mail spool file locking method—in addition to system file
                locking.  Because Mail ships with a privilege-separated dotlock creation program that should always be able to
                create such a dotlock file there is no good reason to ignore dotlock file creation errors, and thus these are
                fatal unless this variable is set.

     editalong  If this variable is set then the editor is started automatically when a message is composed in interactive mode,
                as if the ~e TILDE ESCAPES had been specified.  The editheaders variable is implied for this automatically
                spawned editor session.

     editheaders
                When a message is edited while being composed, its header is included in the editable text.  The ‘To:’, ‘Cc:’,
                ‘Bcc:’, ‘Subject:’, ‘From:’, ‘Reply-To:’, ‘Sender:’, and ‘Organization:’ fields are accepted within the header,
                other fields are ignored.

     emptystart
                If the mailbox is empty Mail normally prints “No mail for user” and exits immediately.  If this option is set
                Mail starts even with an empty mailbox.

     flipr      This option reverses the meanings of a set of reply commands, turning the lowercase variants, which by default
                address all recipients included in the header of a message (reply, respond, followup) into the uppercase vari‐
                ants, which by default address the sender only (Reply, Respond, Followup) and vice versa.  The commands
                replysender, respondsender, followupsender as well as replyall, respondall, followupall are not affected by the
                current setting of flipr.

     followup-to
                Controls whether a ‘Mail-Followup-To:’ header is generated when sending messages to known mailing lists.  Also
                see followup-to-honour and the commands mlist, mlsubscribe, reply and Lreply.

     forward-as-attachment
                Original messages are normally sent as inline text with the forward command, and only the first part of a multi‐
                part message is included.  With this option messages are sent as unmodified MIME ‘message/rfc822’ attachments
                with all of their parts included.

     fullnames  When replying to or forwarding a message Mail normally removes the comment and name parts of email addresses.
                If this variable is set such stripping is not performed, and comments, names etc. are retained.

     header     Causes the header summary to be written at startup and after commands that affect the number of messages or the
                order of messages in the current folder; enabled by default.  The command line option -N can be used to set
                noheader.

     history-gabby
                [Option] Add more entries to the history as is normally done.

     history-gabby-persist
                [Option] Mails own NCL will not save the additional (gabby) history entries in persistent storage unless this
                variable is also set.  Also see NAIL_HISTFILE.

     hold       This option is used to hold messages in the system mailbox by default.

     idna-disable
                [Option] Can be used to turn off the automatic conversion of domain names according to the rules of IDNA (inter‐
                nationalized domain names for applications).  Since the IDNA code assumes that domain names are specified with
                the ttycharset character set, an UTF-8 locale charset is required to represent all possible international domain
                names (before conversion, that is).

     ignore     Ignore interrupt signals from the terminal while entering messages; instead echo them as ‘@’ characters and dis‐
                card the current line.

     ignoreeof  Ignore end-of-file conditions (‘control-D’), on message input, which instead can be terminated only by entering
                a dot ‘.’ on a line by itself or by using the ~. TILDE ESCAPES.  This option also applies to Mail command mode.

     imap-use-starttls-USER@HOST, imap-use-starttls-HOST, imap-use-starttls
                [Option] Causes Mail to issue a `STARTTLS' command to make an unencrypted IMAP session SSL/TLS encrypted.  This
                functionality is not supported by all servers, and is not used if the session is already encrypted by the IMAPS
                method.

     keep       If set, an empty mailbox file is not removed.  This may improve the interoperability with other mail user agents
                when using a common folder directory, and prevents malicious users from creating fake mailboxes in a world-
                writable spool directory.  Note this only applies to local regular (MBOX) files, other mailbox types will never
                be removed.

     keepsave   When a message is saved it is usually discarded from the originating folder when Mail is quit.  Setting this
                option causes all saved message to be retained.

     line-editor-disable
                Turn off any enhanced command line editing capabilities (see Command line editor for more).

     markanswered
                When a message is replied to and this variable is set, it is marked as having been answered.  This mark has no
                technical meaning in the mail system; it just causes messages to be marked in the header summary, and makes them
                specially addressable.

     message-id-disable
                By setting this option the generation of ‘Message-ID:’ can be completely suppressed, effectively leaving this
                task up to the mail-transfer-agent (MTA) or the SMTP server.  (According to RFC 5321 your SMTP server is not
                required to add this field by itself, so you should ensure that it accepts messages without a ‘Message-ID’.)

     metoo      Usually, when an alias expansion contains the sender, the sender is removed from the expansion.  Setting this
                option suppresses these removals.  Note that a set metoo also causes a ‘-m’ option to be passed to mail-trans‐
                fer-agents (MTAs); though most of the modern MTAs don't (no longer) document this flag, no MTA is known which
                doesn't support it (for historical compatibility).

     mime-allow-text-controls
                When sending messages, each part of the message is MIME-inspected in order to classify the ‘Content-Type:’ and
                ‘Content-Transfer-Encoding:’ (see encoding) that is required to send this part over mail transport, i.e., a com‐
                putation rather similar to what the file(1) command produces when used with the ‘--mime’ option.

                This classification however treats text files which are encoded in UTF-16 (seen for HTML files) and similar
                character sets as binary octet-streams, forcefully changing any ‘text/plain’ or ‘text/html’ specification to
                ‘application/octet-stream’: If that actually happens a yet unset charset MIME parameter is set to ‘binary’,
                effectively making it impossible for the receiving MUA to automatically interpret the contents of the part.

                If this option is set, and the data was unambiguously identified as text data at first glance (by a ‘.txt’ or
                ‘.html’ file extension), then the original ‘Content-Type:’ will not be overwritten.

     netrc-lookup-USER@HOST, netrc-lookup-HOST, netrc-lookup
                [v15-compat] [Option] Used to control usage of the users .netrc file for lookup of account credentials, as docu‐
                mented in the section On URL syntax and credential lookup and for the command netrc; the section The .netrc file
                documents the file format.

     outfolder  Causes the filename given in the record variable and the sender-based filenames for the Copy and Save commands
                to be interpreted relative to the directory given in the folder variable rather than to the current directory,
                unless it is set to an absolute pathname.

     page       If set, each message the pipe command prints out is followed by a formfeed character ‘\f’.

     piperaw    Send messages to the pipe command without performing MIME and character set conversions.

     pop3-bulk-load-USER@HOST, pop3-bulk-load-HOST, pop3-bulk-load
                [Option] When accessing a POP3 server Mail loads the headers of the messages, and only requests the message bod‐
                ies on user request.  For the POP3 protocol this means that the message headers will be downloaded twice.  If
                this option is set then Mail will download only complete messages from the given POP3 server(s) instead.

     pop3-no-apop-USER@HOST, pop3-no-apop-HOST, pop3-no-apop
                [Option] Unless this variable is set the ‘APOP’ authentication method will be used when connecting to a POP3
                server that advertises support.  The advantage of ‘APOP’ is that the password is not sent in clear text over the
                wire and that only a single packet is sent for the user/password tuple.  Note that pop3-no-apop-HOST requires
                [v15-compat].

     pop3-use-starttls-USER@HOST, pop3-use-starttls-HOST, pop3-use-starttls
                [Option] Causes Mail to issue a ‘STLS’ command to make an unencrypted POP3 session SSL/TLS encrypted.  This
                functionality is not supported by all servers, and is not used if the session is already encrypted by the POP3S
                method.  Note that pop3-use-starttls-HOST requires [v15-compat].

     print-all-chars
                This option causes all characters to be considered printable.  It is only effective if given in a startup file.
                With this option set some character sequences in messages may put the user's terminal in an undefined state when
                printed; it should only be used as a last resort if no working system locale can be found.

     print-alternatives
                When a MIME message part of type ‘multipart/alternative’ is displayed and it contains a subpart of type
                ‘text/plain’, other parts are normally discarded.  Setting this variable causes all subparts to be displayed,
                just as if the surrounding part was of type ‘multipart/mixed’.

     quiet      Suppresses the printing of the version when first invoked.

     quote-as-attachment
                If this is set, then the original message is added in its entirety as a ‘message/rfc822’ MIME attachment when
                replying to a message.  Note this works regardless of the setting of quote.

     recipients-in-cc
                On group replies, specify only the sender of the original mail in ‘To:’ and mention the other recipients in the
                secondary ‘Cc:’.  By default all recipients of the original mail will be addressed via ‘To:’.

     record-resent
                If both this variable and the record variable are set, the resend and Resend commands save messages to the
                record folder as it is normally only done for newly composed messages.

     reply-in-same-charset
                If this variable is set Mail first tries to use the same character set of the original message for replies.  If
                this fails, the mechanism described in Character sets is evaluated as usual.

     rfc822-body-from_
                This variable can be used to force displaying a so-called ‘From_’ line for messages that are embedded into an
                envelope mail via the ‘message/rfc822’ MIME mechanism, for more visual convenience.

     save       Enable saving of (partial) messages in DEAD upon interrupt or delivery error.

     searchheaders
                Expand message-list specifiers in the form ‘/x:y’ to all messages containing the substring “y” in the header
                field ‘x’.  The string search is case insensitive.

     sendcharsets-else-ttycharset
                [Option] If this variable is set, but sendcharsets is not, then Mail acts as if sendcharsets had been set to the
                value of the variable ttycharset.  In effect this combination passes through the message data in the character
                set of the current locale (given that ttycharset hasn't been set manually), i.e., without converting it to the
                charset-8bit fallback character set.  Thus, mail message text will be in ISO-8859-1 encoding when send from
                within a ISO-8859-1 locale, and in UTF-8 encoding when send from within an UTF-8 locale.  If no character set
                conversion capabilities are available in Mail then the only supported character set is ttycharset.

     sendmail-no-default-arguments
                Unless this option is set Mail will pass some well known standard command line options to the defined sendmail
                program, see there for more.

     sendwait   When sending a message wait until the MTA (including the builtin SMTP one) exits before accepting further com‐
                mands.  Only with this variable set errors reported by the MTA will be recognizable!  If the MTA returns a non-
                zero exit status, the exit status of mail will also be non-zero.

     showlast   Setting this option causes Mail to start at the last message instead of the first one when opening a mail
                folder.

     showname   Causes Mail to use the sender's real name instead of the plain address in the header field summary and in mes‐
                sage specifications.

     showto     Causes the recipient of the message to be shown in the header summary if the message was sent by the user.

     skipemptybody
                If an outgoing message does not contain any text in its first or only message part, do not send it but discard
                it silently (see also the command line option -E).

     smime-force-encryption
                [Option] Causes Mail to refuse sending unencrypted messages.

     smime-sign
                [Option] S/MIME sign outgoing messages with the user's private key and include the user's certificate as a MIME
                attachment.  Signing a message enables a recipient to verify that the sender used a valid certificate, that the
                email addresses in the certificate match those in the message header and that the message content has not been
                altered.  It does not change the message text, and people will be able to read the message as usual.  Also see
                smime-sign-cert, smime-sign-include-certs and smime-sign-message-digest.

     smime-no-default-ca
                [Option] Don't load default CA locations when verifying S/MIME signed messages.

     smtp-use-starttls-USER@HOST, smtp-use-starttls-HOST, smtp-use-starttls
                [Option] Causes Mail to issue a ‘STARTTLS’ command to make an SMTP session SSL/TLS encrypted, i.e., to enable
                transport layer security.

     ssl-no-default-ca
                [Option] Don't load default CA locations to verify SSL/TLS server certificates.

     term-ca-mode
                [Option] If terminal capability queries are supported and this option is set then Mail will try to switch to the
                “alternate screen” when in interactive mode, so that the terminal will go back to the normal screen, leaving all
                the text there intact, when Mail exits.  Note: even when supported for this to produce appealing results the
                used PAGER and possibly configured pipe-TYPE/SUBTYPE applications that take control over the terminal need to
                have corresponding support too, e.g., the less(1) pager should be driven with the ‘-X’ command line flag.

     keep-content-length
                When (editing messages and) writing MBOX mailbox files Mail can be told to keep the ‘Content-Length:’ and
                ‘Lines:’ header fields that some MUAs generate by setting this variable.  Since Mail does neither use nor update
                these non-standardized header fields (which in itself shows one of their conceptual problems), stripping them
                should increase interoperability in between MUAs that work with with same mailbox files.  Note that, if this is
                not set but writebackedited, as below, is, a possibly performed automatic stripping of these header fields
                already marks the message as being modified.

     v15-compat
                Setting this option enables upward compatibility with Mail version 15.0 in respect to which configuration
                options are available and how they are handled.  This manual uses [v15-compat] and [no v15-compat] to refer to
                the new and the old way of doing things, respectively.

     verbose    Setting this option, also controllable via the command line option -v, causes Mail to be more verbose, so that,
                e.g., certificate chains will be displayed on the users terminal.  Setting this binary option twice increases
                the level of verbosity, in which case even details of the actual message delivery and protocol conversations are
                shown.  A single noverbose is sufficient to disable verbosity as such.

     writebackedited
                If this variable is set messages modified using the edit or visual commands are written back to the current
                folder when it is quit; it is only honoured for writable folders in MBOX format, though.  Note that the editor
                will be pointed to the raw message content in that case, i.e., neither MIME decoding nor decryption will have
                been performed, and proper RFC 4155 ‘From_’ quoting of newly added or edited content is also left as an excer‐
                cise to the user.

   Value options
     Options with values that are generally treated as strings.  To embed whitespace (space and tabulator) in a value it either
     needs to be escaped with a backslash character, or the entire value must be enclosed in (double or single) quotation marks;
     To use quotation marks identical to those used to enclose the value, escape them with a backslash character.  The backslash
     character has no special meaning except in these cases.

           set 1=val\ one 2="val two" 3='val "three"' 4='val \'four\''
           varshow 1 2 3 4
           unset 1 2 3 4

     Booleans are special string values that must either be set to decimal integers (in which case ‘0’ is false and ‘1’ and any
     other value is true) or to any of ‘off’, ‘no’ and ‘false’ for a false boolean and ‘on’, ‘yes’ and ‘true’ for a true bool‐
     ean; matching is performed case-insensitively.  And there exists a special kind of boolean, the “quadoption”: this is
     expected to either name a boolean or one of the strings ‘ask-yes’ and ‘ask-no’ (in fact: ‘ask-’ followed by a valid bool‐
     ean, case-insensitively); if one of the latter is set then in interactive mode the user will be prompted with the default
     value (also used for empty user input) set to the given boolean, whereas in non-interactive the given default will be used
     right away.

     agent-shell-lookup-USER@HOST, agent-shell-lookup-HOST, agent-shell-lookup
                [v15-compat] [Option] Account passwords can be fetched via an external agent program in order to permit
                encrypted password storage – see On URL syntax and credential lookup for more on credential lookup.  If this is
                set then the content is interpreted as a shell command the output of which (with newline characters removed) is
                treated as the account password shall the command succeed (and have produced non-empty non-newline output);
                e.g., via gpg(1):

                      $ echo PASSWORD &amp;gt; .pass
                      $ gpg -e .pass
                      $ eval `gpg-agent --daemon \
                          --pinentry-program=/usr/bin/pinentry-curses \
                          --max-cache-ttl 99999 --default-cache-ttl 99999`
                      $ echo 'set agent-shell-lookup="gpg -d .pass.gpg"' \
                          &amp;gt;&amp;gt; ~/.mailrc

                A couple of environment variables will be set for the agent:

                NAIL_TMPDIR       The temporary directory that Mail uses.  Usually identical to TMPDIR, but guaranteed to be set
                                  and usable by child processes; to ensure the latter condition for TMPDIR also, it'll be set.
                NAIL_USER         The user (‘USER’) for which the password is looked up.
                NAIL_USER_ENC     The URL percent-encoded variant of NAIL_USER.
                NAIL_HOST         The plain machine hostname of the user account.
                NAIL_HOST_PORT    The ‘HOST’ (hostname possibly including port) of the user account.

     attrlist   A sequence of characters to print in the ‘attribute’ column of the headline as shown in the header display; each
                for one type of messages (see Message states), with the default being ‘NUROSPMFAT+-$~’ or ‘NU  *HMFAT+-$~’ if
                bsdflags or the SYSV3 environment variable are set, in the following order:

                      ‘N’  new.
                      ‘U’  unread but old.
                      ‘R’  new but read.
                      ‘O’  read and old.
                      ‘S’  saved.
                      ‘P’  preserved.
                      ‘M’  mboxed.
                      ‘F’  flagged.
                      ‘A’  answered.
                      ‘T’  draft.
                      ‘+’  start of a collapsed thread.
                      ‘-’  collapsed.
                      ‘$’  classified as spam.
                      ‘~’  classified as possible spam.

     autobcc    Specifies a list of recipients to which a blind carbon copy of each outgoing message will be sent automatically.

     autocc     Specifies a list of recipients to which a carbon copy of each outgoing message will be sent automatically.

     autosort   Causes sorted mode (see the sort command) to be entered automatically with the value of this option as sorting
                method when a folder is opened.

     charset-7bit
                The value that should appear in the ‘charset=’ parameter of ‘Content-Type:’ MIME header fields when no character
                set conversion of the message data was performed.  This defaults to US-ASCII, and the chosen character set
                should be US-ASCII compatible.

     charset-8bit
                [Option] The default 8-bit character set that is used as an implicit last member of the variable sendcharsets.
                This defaults to UTF-8.  If no character set conversion capabilities are available in Mail then the only sup‐
                ported character set is ttycharset.  Refer to the section Character sets for the complete picture of character
                set conversion in Mail.

     charset-unknown-8bit
                [Option] RFC 1428 specifies conditions when internet mail gateways shall “upgrade” the content of a mail message
                by using a character set with the name ‘unknown-8bit’.  Because of the unclassified nature of this character set
                Mail will not be capable to convert this character set to any other character set.  If this variable is set any
                message part which uses the character set ‘unknown-8bit’ is assumed to really be in the character set given in
                the value, otherwise the (final) value of charset-8bit is used for this purpose.

     cmd        The default value for the pipe command.

     colour-from_
                [Option] The colour specification for so-called ‘From_’ lines.  See the section Coloured message display for the
                format of the value.

     colour-header
                [Option] The colour specification for header lines.

     colour-msginfo
                [Option] The colour specification for the introductional message info line.

     colour-partinfo
                [Option] The colour specification for MIME part info lines.

     colour-terms
                [Option] A comma-separated list of TERMinals for which coloured message display can be used.  Entries only need
                to be added if the string “color” isn't part of the terminal name itself; the default value is

                      cons25,linux,rxvt,rxvt-unicode,screen,sun,vt100,vt220,wsvt25,xterm

     colour-uheader
                [Option] The colour specification for those header lines that have been placed in the colour-user-headers list.
                See the section Coloured message display.

     colour-user-headers
                A comma separated list of (case-insensitive) header names which should be colourized with the alternative
                colour-uheader colours.  The default value is ‘from,subject’.

     crt        In a(n interactive) terminal session, then if this valued option is set it'll be used as a threshold to deter‐
                mine how many lines the given output has to span before it will be displayed via the configured PAGER; Usage of
                the PAGER can be forced by setting this to the value ‘0’, setting it without a value will deduce the current
                height of the terminal screen to compute the treshold (see LINES and stty(1)).

     datefield  The date in a header summary is normally the date of the mailbox ‘From_’ line of the message.  If this variable
                is set, then the date as given in the ‘Date:’ field is used, converted to local time.  It is possible to control
                the display of the date by assigning a value, in which case the strftime(3) function will be used to format the
                date accordingly.  Please read your system manual for the available formats.  Note that the ‘%n’ format should
                not be used, because Mail doesn't take embedded newlines into account when calculating how many lines fit onto
                the screen.

     datefield-markout-older
                This option, when set in addition to datefield, is used to display “older” messages (concept is rather compara‐
                ble to the -l option of the POSIX utility ls(1)).  The content interpretation is identical to datefield.

     encoding   Suggestion for the MIME encoding to use in outgoing text messages and message parts.  Valid values are the
                default ‘quoted-printable’, ‘8bit’ and ‘base64’.  ‘8bit’ may cause problems when transferring mail messages over
                channels that are not ESMTP (RFC 1869) compliant.  If there is no need to encode a message, ‘7bit’ transfer mode
                is always used regardless of this variable.  Binary data is always encoded as ‘base64’.

     escape     If defined, the first character of this option gives the character to use in place of ‘~’ to denote TILDE
                ESCAPES.

     expandaddr
                If not set then file and command pipeline targets are not allowed, and any such address will be filtered out,
                giving a warning message.  If set without a value then all possible recipient address specifications will be
                accepted – see the section Sending mail for more on this.  To accept them, but only in interactive mode, or when
                tilde commands were enabled explicitly by using one of the command line options -~ or -#, set this to the (case-
                insensitive) value ‘restrict’ (note right now this is actually like setting ‘restrict,-all,+name,+addr’).

                In fact the value is interpreted as a comma-separated list of values.  If it contains ‘fail’ then the existence
                of disallowed specifications is treated as a hard send error instead of only filtering them out.  The remaining
                values specify whether a specific type of recipient address specification is allowed (optionally indicated by a
                plus sign ‘+’ prefix) or disallowed (prefixed with a hyphen ‘-’).  The value ‘all’ addresses all possible
                address specifications, ‘file’ file targets, ‘pipe’ command pipeline targets, ‘name’ plain user names and (MTA)
                aliases ([Obsolete] ‘noalias’ may be used as an alternative syntax to ‘-name’) and ‘addr’ network addresses.
                These kind of values are interpreted in the given order, so that ‘restrict,fail,+file,-all,+addr’ will cause
                hard errors for any non-network address recipient address unless Mail is in interactive mode or has been started
                with the -~ or -# command line option; in the latter case(s) any address may be used, then.

     expandargv
                Unless this variable is set additional mail-transfer-agent (MTA) arguments from the command line, as can be
                given after a ‘--’ separator, are ignored due to safety reasons.  However, if set to the special value ‘fail’,
                then the presence of additional MTA arguments is treated as a hard error that causes Mail to exit with failure
                status.  A lesser strict variant is the otherwise identical ‘restrict’, which does accept such arguments in
                interactive mode, or if tilde commands were enabled explicitly by using one of the command line options -~ or
                -#.

     features   (Read-only) Information on the features compiled into Mail – the content of this variable is identical to the
                output of the command features.

     file-hook-load-EXTENSION, file-hook-save-EXTENSION
                It is possible to install file hooks which will be used by the file command in order to be able to transparently
                handle (through an intermediate temporary file) files with specific ‘EXTENSION’s: the variable values can
                include shell snippets and are expected to write data to standard output / read data from standard input,
                respectively.  [v15 behaviour may differ] The variables may not be changed while there is a mailbox attendant.

                      set file-hook-load-xy='echo &amp;gt;&amp;2 XY-LOAD; gzip -cd' \
                          file-hook-save-xy='echo &amp;gt;&amp;2 XY-SAVE; gzip -c' \
                          record=+null-sent.xy

     folder     The name of the directory to use for storing folders of messages.  All folder names that begin with ‘+’ refer to
                files below it.  The same special conventions as documented for the file command may be used when specifying a
                new value for folder, but be aware that the expansion is fully performed immediately.  E.g., if the expanded
                name refers to an IMAP account, all names that begin with `+' refer to IMAP mailboxes below the folder target
                box.

                Note: for IMAP it makes a difference whether folder ends with a directory separator solidus or not in respect to
                the automatic append of `INBOX' strings.  Ssome IMAP servers do not accept the creation of mailboxes in the
                hierarchy base, but require that they are created as subfolders of `INBOX' – with such servers a folder name of
                the form

                      imaps://mylogin@imap.myisp.example/INBOX.

                should be used (the last character is the server's hierarchy delimiter).  Folder names prefixed by `+' will then
                refer to folders below `INBOX', while folder names prefixed by `@' refer to folders below the hierarchy base.
                See the imap namespace command for a method to detect the appropriate prefix and delimiter.

     folder-hook
                When a folder is opened and this variable is set, the macro corresponding to the value of this variable is exe‐
                cuted.  The macro is also invoked when new mail arrives, but message lists for commands executed from the macro
                only include newly arrived messages then.  If localopts are activated in a folder hook, then the covered set‐
                tings will be reverted once the folder is left again.

     folder-hook-FOLDER
                Overrides folder-hook for a folder named ‘FOLDER’.  Unlike other folder specifications, the fully expanded name
                of a folder, without metacharacters, is used to avoid ambiguities.  However, if the mailbox resides under folder
                then the usual ‘+’ specification is tried in addition, e.g., if folder is “mail” (and thus relative to the
                user's home directory) then /home/usr1/mail/sent will be tried as ‘folder-hook-/home/usr1/mail/sent’ first, but
                then followed by ‘folder-hook-+sent’.

     followup-to-honour
                Controls whether a ‘Mail-Followup-To:’ header is honoured when group-replying to a message via reply or Lreply.
                This is a quadoption; if set without a value it defaults to “yes”.  Also see followup-to and the commands mlist
                and mlsubscribe.

     from       The address (or a list of addresses) to put into the ‘From:’ field of the message header, quoting RFC 5322: the
                author(s) of the message, that is, the mailbox(es) of the person(s) or system(s) responsible for the writing of
                the message.  If replying to messages these addresses are handled as if they were in the alternates list.  If
                the machine's hostname is not valid at the Internet (for example at a dialup machine) then either this variable
                or hostname ([v15-compat] and with smtp smtp-hostname adds even more fine-tuning capabilities), have to be set.
                If from contains more than one address, setting the sender variable is required (according to the standard RFC
                5322).

     fwdheading
                The string to print before the text of a message with the forward command (unless the forward-as-attachment
                variable is set).  Defaults to “-------- Original Message --------” if unset; No heading is printed if it is set
                to the empty string.

     headline   A format string to use for the header summary, similar to printf(3) formats.  A percent character ‘%’ introduces
                a format specifier that may be followed by a number indicating the field width; If the (possibly implicitly
                implied) field width is negative, the field is to be left-aligned.  Valid format specifiers are:

                      ‘%%’  A plain percent character.
                      ‘%&amp;gt;’  A space character but for the current message, for which it expands to ‘&amp;gt;’.
                      ‘%&amp;lt;’  A space character but for the current message, for which it expands to ‘&amp;lt;’.
                      ‘%$’  [Option] The spam score of the message, as has been classified via the command spamrate.  Prints
                            only a replacement character if there is no spam support.
                      ‘%a’  Message attribute character (status flag); the actual content can be adjusted by setting attrlist.
                      ‘%d’  The date when the message was received.
                      ‘%e’  The indenting level in threaded mode.
                      ‘%f’  The address of the message sender.
                      ‘%i’  The message thread structure.  (Note that this format doesn't support a field width.)
                      ‘%l’  The number of lines of the message.
                      ‘%m’  Message number.
                      ‘%o’  The number of octets (bytes) in the message.
                      ‘%s’  Message subject (if any).
                      ‘%S’  Message subject (if any) in double quotes.
                      ‘%T’  Message recipient flags: is the addressee of the message a known or subscribed mailing list – see
                            mlist and mlsubscribe.
                      ‘%t’  The position in threaded/sorted order.

                The default is ‘%&amp;gt;%a%m %-18f %16d %4l/%-5o %i%-s’, or ‘%&amp;gt;%a%m %20-f  %16d %3l/%-5o %i%-S’ if bsdcompat is set.
                Also see attrlist and headline-bidi.

     headline-bidi
                Bidirectional text requires special treatment when displaying headers, because numbers (in dates or for file
                sizes etc.) will not affect the current text direction, in effect resulting in ugly line layouts when arabic or
                other right-to-left text is to be displayed.  On the other hand only a minority of terminals is capable to cor‐
                rectly handle direction changes, so that user interaction is necessary for acceptable results.  Note that
                extended host system support is required nonetheless, e.g., detection of the terminal character set is one pre‐
                condition; and this feature only works in an Unicode (i.e., UTF-8) locale.

                In general setting this variable will cause Mail to encapsulate text fields that may occur when printing
                headline (and some other fields, like dynamic expansions in prompt) with special Unicode control sequences; it
                is possible to fine-tune the terminal support level by assigning a value: no value (or any value other than ‘1’,
                ‘2’ and ‘3’) will make Mail assume that the terminal is capable to properly deal with Unicode version 6.3, in
                which case text is embedded in a pair of U+2068 (FIRST STRONG ISOLATE) and U+2069 (POP DIRECTIONAL ISOLATE)
                characters.  In addition no space on the line is reserved for these characters.

                Weaker support is chosen by using the value ‘1’ (Unicode 6.3, but reserve the room of two spaces for writing the
                control sequences onto the line).  The values ‘2’ and ‘3’ select Unicode 1.1 support (U+200E, LEFT-TO-RIGHT
                MARK); the latter again reserves room for two spaces in addition.

     hostname   Use this string as hostname when expanding local addresses instead of the value obtained from uname(3) and
                getaddrinfo(3), i.e., in ‘Message-ID:’ and ‘From:’ fields.  Note that when smtp transport is not used then it is
                normally the responsibility of the MTA to create these fields, [v15-compat] in conjunction with smtp however
                smtp-hostname also influences the results; you should produce some test messages with the desired combination of
                hostname, and/or from, sender etc. first.

     imap-auth-USER@HOST, imap-auth
                [Option] Sets the IMAP authentication method.  Valid values are `login' for the usual password-based authentica‐
                tion (the default), `cram-md5', which is a password-based authentication that does not send the password over
                the network in clear text, and `gssapi' for GSS-API based authentication.

     imap-cache
                [Option] Enables caching of IMAP mailboxes.  The value of this variable must point to a directory that is either
                existent or can be created by Mail.  All contents of the cache can be deleted by Mail at any time; it is not
                safe to make assumptions about them.

     imap-delim-USER@HOST, imap-delim-HOST, imap-delim
                [Option] The hierarchy separator used by the IMAP server.  Whenever an IMAP path is specified it will undergo
                normalization.  One of the normalization steps is the squeeze and adjustment of hierarchy separators.  If this
                variable is set, any occurrence of any character of the given value that exists in the path will be replaced by
                the first member of the value; an empty value will cause the default to be used, it is ‘/.’.  If not set, we
                will reuse the first hierarchy separator character that is discovered in a user-given mailbox name.

     imap-keepalive-USER@HOST, imap-keepalive-HOST, imap-keepalive
                [Option] IMAP servers may close the connection after a period of inactivity; the standard requires this to be at
                least 30 minutes, but practical experience may vary.  Setting this variable to a numeric `value' greater than 0
                causes a `NOOP' command to be sent each `value' seconds if no other operation is performed.

     imap-list-depth
                [Option] When retrieving the list of folders on an IMAP server, the folders command stops after it has reached a
                certain depth to avoid possible infinite loops.  The value of this variable sets the maximum depth allowed.  The
                default is 2.  If the folder separator on the current IMAP server is a slash `/', this variable has no effect
                and the folders command does not descend to subfolders.

     inbox      If this is set it will be used for expansions of ‘%’, see file for more.  [v15 behaviour may differ] IMAP users
                may set this to the empty string to force bypassing the special handling of folder.  The value supports a subset
                of filename expansions itself.

     indentprefix
                String used by the ~m, ~M and ~R TILDE ESCAPES and by the quote option for indenting messages, in place of the
                normal tabulator character ‘^I’, which is the default.  Be sure to quote the value if it contains spaces or
                tabs.

     line-editor-cursor-right
                [Option] If the builtin command line editor is used, actions which are based on rightwise movement may not work
                on some terminals.  If you encounter such problems, set this variable to the terminal control sequence that is
                necessary to move the cursor one column to the right.  The default is ‘\033[C’, which should work for most ter‐
                minals.  Less often occur ‘\033OC’ and ‘\014’.  Note that “Escape” and other control character have to be writ‐
                ten as shell-style escape sequences, e.g., ‘\033’ for (US-ASCII) “Escape”.

     mime-counter-evidence
                Normally the ‘Content-Type:’ field is used to decide how to handle MIME parts.  Some MUAs however don't use
                mime.types(5) or a similar mechanism to correctly classify content, but simply specify
                ‘application/octet-stream’, even for plain text attachments like ‘text/diff’.  If this variable is set then Mail
                will try to classify such MIME message parts on its own, if possible, and through their file name.  This vari‐
                able can also be given a non-empty value, in which case the value is expected to be a number, actually a carrier
                of bits.  Creating the bit-carrying number is a simple addition:

                      ? !echo Value should be set to $((2 + 4))
                      Value should be set to 6

                ·   If bit two is set (2) then the detected content-type will be carried along with the message and be used for
                    deciding which pipe-TYPE/SUBTYPE is responsible for the MIME part, shall that question arise; when display‐
                    ing such a MIME part the part-info will indicate the overridden content-type by showing a plus-sign ‘+’.
                ·   If bit three is set (4) then the counter-evidence is always produced and a positive result will be used as
                    the MIME type, even forcefully overriding the parts given MIME type.

     mimetypes-load-control
                This option can be used to control which of the mime.types(5) databases are loaded by Mail, as furtherly
                described in the section The mime.types files.  If the letter ‘u’ is part of the option value, then the user's
                personal ~/.mime.types file will be loaded (if it exists); likewise the letter ‘s’ controls loading of the sys‐
                tem wide /etc/mime.types; the user file is loaded first, letter matching is case-insensitive.  If this option is
                not set Mail will try to load both files instead.  Incorporation of the Mail-builtin MIME types cannot be sup‐
                pressed, but they will be matched last.

                More sources can be specified by using a different syntax: if the value string contains an equals sign ‘=’ then
                it is instead parsed as a comma-separated list of the described letters plus ‘f=FILENAME’ pairs; the given file‐
                names will be expanded and loaded, and their content may use the extended syntax that is described in the sec‐
                tion The mime.types files.

     NAIL_EXTRA_RC
                The name of an optional startup file to be read after ~/.mailrc.  This variable has an effect only if it is set
                in mail.rc or ~/.mailrc, it is not imported from the environment in order to honour ‘MAILRC=/dev/null/’ -n invo‐
                cations.  Use this file for commands that are not understood by other POSIX mailx(1) implementations.

     NAIL_HEAD  A string to put at the beginning of each new message.  The escape sequences tabulator ‘\t’ and newline ‘\n’ are
                understood.

     NAIL_HISTFILE
                [Option] If a command line editor is available then this can be set to name the (expandable) path of the loca‐
                tion of a permanent history file.

     NAIL_HISTSIZE
                [Option] If a command line editor is available this value restricts the amount of history entries that are saved
                into a set and valid NAIL_HISTFILE.  A value of less than 0 disables this feature; note that loading and incor‐
                poration of NAIL_HISTFILE upon program startup can also be suppressed by doing this.  An unset or invalid value,
                or 0, causes a default value to be used.  Dependent on the available command line editor this will also define
                the number of history entries in memory; it is also editor-specific whether runtime updates of this value will
                be honoured.

     NAIL_TAIL  A string to put at the end of each new message.  The escape sequences tabulator ‘\t’ and newline ‘\n’ are under‐
                stood.

     newfolders
                If this variable has the value ‘maildir’, newly created local folders will be in Maildir format.

     newmail    Checks for new mail in the current folder each time the prompt is printed.  For IMAP mailboxes the server is
                then polled for new mail, which may result in delayed operation if the connection to the server is slow.  A
                Maildir folder must be re-scanned to determine if new mail has arrived.

                If this variable is set to the special value “nopoll” an IMAP server is not actively asked for new mail, but new
                mail may still be detected and announced with any other IMAP command that is sent to the server.  In either case
                the IMAP server may send notifications about messages that have been deleted on the server by another process or
                client.  In this case, “Expunged X messages” is printed regardless of this variable, and message numbers may
                have changed.

                If this variable is set to the special value ‘nopoll’ then a Maildir folder will not be rescanned completely,
                but only timestamp changes are detected.

     ORGANIZATION
                The value to put into the ‘Organization:’ field of the message header.

     password-USER@HOST, password-HOST, password
                [v15-compat] Variable chain that sets a password, which is used in case none has been given in the protocol and
                account-specific URL; as a last resort Mail will ask for a password on the user's terminal if the authentication
                method requires a password.  Specifying passwords in a startup file is generally a security risk; the file
                should be readable by the invoking user only.

     password-USER@HOST
                [no v15-compat] (see the chain above for [v15-compat]) Set the password for ‘USER’ when connecting to ‘HOST’.
                If no such variable is defined for a host, the user will be asked for a password on standard input.  Specifying
                passwords in a startup file is generally a security risk; the file should be readable by the invoking user only.

     pipe-TYPE/SUBTYPE
                When a MIME message part of type ‘TYPE/SUBTYPE’ (normalized to lowercase) is displayed or quoted, its text is
                filtered through the value of this variable interpreted as a shell command.  The special value ‘@’ can be used
                to force interpretation of the message part as plain text, e.g., ‘set pipe-application/pgp-signature=@’ will
                henceforth treat signatures as plain text and display them "as is".  (The same can also be achieved, in a more
                useful context, by using the mimetype command in conjunction with a type marker.)

                Also, if a shell command is prefixed with ‘@’, then the command will only be used to prepare the MIME message
                part if the message is displayed by itself, but not when multiple messages are displayed at once.

                Finally, if a shell command is prefixed with ‘@&amp;’, then, in addition to what has been described for the plain
                ‘@’ shell command prefix, the command will be run asynchronously, i.e., without blocking Mail, which may be a
                handy way to display a, e.g., PDF file while also continuing to read the mail message.  Some information about
                the MIME part to be displayed is embedded into the environment of the shell command:

                NAIL_TMPDIR              The temporary directory that Mail uses.  Usually identical to TMPDIR, but guaranteed to
                                         be set and usable by child processes; to ensure the latter condition for TMPDIR also,
                                         it'll be set.
                NAIL_FILENAME            The filename, if any is set, the empty string otherwise.
                NAIL_FILENAME_GENERATED  A random string.
                NAIL_CONTENT             The MIME content-type of the part, if known, the empty string otherwise.
                NAIL_CONTENT_EVIDENCE    If mime-counter-evidence includes the carry-around-bit (2), then this will be set to
                                         the detected MIME content-type; not only then identical to NAIL_CONTENT otherwise.

     pipe-EXTENSION
                This is identical to pipe-TYPE/SUBTYPE except that ‘EXTENSION’ (normalized to lowercase using character mappings
                of the ASCII charset) names a file extension, e.g., ‘xhtml’.  Handlers registered using this method take prece‐
                dence.

     pop3-keepalive-USER@HOST, pop3-keepalive-HOST, pop3-keepalive
                [Option] POP3 servers close the connection after a period of inactivity; the standard requires this to be at
                least 10 minutes, but practical experience may vary.  Setting this variable to a numeric value greater than ‘0’
                causes a ‘NOOP’ command to be sent each value seconds if no other operation is performed.

     prompt     The string printed when a command is accepted.  Prompting may be prevented by either setting this to the null
                string or by setting noprompt.  The same XSI escape sequences that are understood by the echo command may be
                used within prompt.

                In addition, the following Mail specific additional sequences are understood: ‘\&amp;’, which expands to “?” unless
                bsdcompat is set, in which case it expands to “&amp;”; note that ‘\&amp; ’ is the default value of prompt.  ‘\?’, which
                will expand to “1” if the last command failed and to “0” otherwise, ‘\$’, which will expand to the name of the
                currently active account, if any, and to the empty string otherwise, and ‘\@’, which will expand to the name of
                the currently active mailbox.  (Note that the prompt buffer is size-limited, excess is cut off.)

                Even though prompt checks for headline-bidi to encapsulate the expansions of the ‘\$’ and ‘\@’ escape sequences
                as necessary to correctly display bidirectional text, this is not true for the final string that makes up prompt
                as such, i.e., real BIDI handling is not supported.

                When a newer version of the editline(3) Command line editor is used, any escape sequence must itself be encapsu‐
                lated with another escape character for usage with the EL_PROMPT_ESC mechanism: Mail configures the control
                character ‘\01’ for this.

     quote      If set, Mail starts a replying message with the original message prefixed by the value of the variable
                indentprefix.  Normally, a heading consisting of “Fromheaderfield wrote:” is printed before the quotation.  If
                the string ‘noheading’ is assigned to the quote variable, this heading is omitted.  If the string ‘headers’ is
                assigned, the headers selected by the ignore/retain commands are printed above the message body, thus quote acts
                like an automatic `~m' TILDE ESCAPES command, then.  If the string ‘allheaders’ is assigned, all headers are
                printed above the message body and all MIME parts are included, making quote act like an automatic `~M' command;
                also see quote-as-attachment.

     quote-fold
                [Option] Can be set in addition to indentprefix.  Setting this turns on a more fancy quotation algorithm in that
                leading quotation characters are compressed and overlong lines are folded.  quote-fold can be set to either one
                or two (space separated) numeric values, which are interpreted as the maximum (goal) and the minimum line
                length, respectively, in a spirit rather equal to the fmt(1) program, but line-, not paragraph-based.  If not
                set explicitly the minimum will reflect the goal algorithmically.  The goal can't be smaller than the length of
                indentprefix plus some additional pad.  Necessary adjustments take place silently.

     record     If defined, gives the pathname of the folder used to record all outgoing mail.  If not defined, then outgoing
                mail is not saved.  When saving to this folder fails the message is not sent, but instead saved to DEAD.

     reply_strings
                Can be set to a comma-separated list of (case-insensitive according to ASCII rules) strings which shall be rec‐
                ognized in addition to the builtin strings as ‘Subject:’ reply message indicators – builtin are ‘Re:’, which is
                mandated by RFC 5322, as well as the german ‘Aw:’.

     replyto    A list of addresses to put into the ‘Reply-To:’ field of the message header.  Members of this list are handled
                as if they were in the alternates list.

     reply-to-honour
                Controls whether a ‘Reply-To:’ header is honoured when replying to a message via reply or Lreply.  This is a
                quadoption; if set without a value it defaults to “yes”.

     screen     When Mail initially prints the message headers it determines the number to print by looking at the speed of the
                terminal.  The faster the terminal, the more it prints.  This option overrides this calculation and specifies
                how many message headers are printed.  This number is also used for scrolling with the z command.

     sendcharsets
                [Option] A comma-separated list of character set names that can be used in outgoing internet mail.  The value of
                the variable charset-8bit is automatically appended to this list of character-sets.  If no character set conver‐
                sion capabilities are compiled into Mail then the only supported charset is ttycharset.  Also see
                sendcharsets-else-ttycharset and refer to the section Character sets for the complete picture of character set
                conversion in Mail.

     sender     An address that is put into the ‘Sender:’ field of outgoing messages, quoting RFC 5322: the mailbox of the agent
                responsible for the actual transmission of the message.  This field should normally not be used unless the
                ‘From:’ field contains more than one address, on which case it is required.  The sender address is handled as if
                it were in the alternates list.

     sendmail   To use an alternate mail transport agent (MTA), set this option to the full pathname of the program to use.  It
                may be necessary to set sendmail-progname in addition.

                The MTA will be passed command line arguments from several possible sources: from the variable
                sendmail-arguments if set, from the command line if given and the variable expandargv allows their use.  Argu‐
                ment processing of the MTA will be terminated with a ‘--’ separator.

                The otherwise occurring implicit usage of the following MTA command line arguments can be disabled by setting
                the boolean option sendmail-no-default-arguments (which will also disable passing ‘--’ to the MTA): ‘-i’ (for
                not treating a line with only a dot ‘.’ character as the end of input), ‘-m’ (shall the option metoo be set) and
                ‘-v’ (if the verbose option is set); in conjunction with the -r command line option Mail will also pass ‘-f’ as
                well as ‘-F’.

     sendmail-arguments
                Arguments to pass through to the Mail-Transfer-Agent can be given via this option.  The content of this variable
                will be split up in a vector of arguments which will be joined onto other possible MTA options:

                      set sendmail-arguments='-t -X "/tmp/my log"'

     sendmail-no-default-arguments
                (Binary) Unless this option is set Mail will pass some well known standard command line options to the defined
                sendmail program, see there for more.

     sendmail-progname
                Many systems use a so-called mailwrapper(8) environment to ensure compatibility with sendmail(1).  This works by
                inspecting the name that was used to invoke the mail delivery system.  If this variable is set then the mail‐
                wrapper (the program that is actually executed when calling “sendmail”) will treat its contents as that name.
                The default is ‘sendmail’.

     Sign       A string for use with the ~A tilde escape.

     sign       A string for use with the ~a tilde escape.

     signature  Must correspond to the name of a readable file if set.  The file's content is then appended to each singlepart
                message and to the first part of each multipart message.  Be warned that there is no possibility to edit the
                signature for an individual message.

     smime-ca-dir
                [Option] Specifies a directory with CA certificates in PEM (Privacy Enhanced Mail) format for verification of
                S/MIME signed messages.

     smime-ca-file
                [Option] Specifies a file with CA certificates in PEM format for verification of S/MIME signed messages.

     smime-cipher-USER@HOST, smime-cipher
                [Option] Specifies the cipher to use when generating S/MIME encrypted messages (for the specified account).  RFC
                5751 mandates a default of ‘aes128’ (AES-128 CBC).  Possible values are (case-insensitive and) in decreasing
                cipher strength: ‘aes256’ (AES-256 CBC), ‘aes192’ (AES-192 CBC), ‘aes128’ (AES-128 CBC), ‘des3’ (DES EDE3 CBC,
                168 bits; default if ‘aes128’ isn't available) and ‘des’ (DES CBC, 56 bits).

                The actually available cipher algorithms depend on the cryptographic library that Mail uses.  [Option] Support
                for more cipher algorithms may be available through dynamic loading via, e.g., EVP_get_cipherbyname(3) (OpenSSL)
                if Mail has been compiled to support this.

     smime-crl-dir
                [Option] Specifies a directory that contains files with CRLs in PEM format to use when verifying S/MIME mes‐
                sages.

     smime-crl-file
                [Option] Specifies a file that contains a CRL in PEM format to use when verifying S/MIME messages.

     smime-encrypt-USER@HOST
                [Option] If this variable is set, messages send to the given receiver are encrypted before sending.  The value
                of the variable must be set to the name of a file that contains a certificate in PEM format.

                If a message is sent to multiple recipients, each of them for whom a corresponding variable is set will receive
                an individually encrypted message; other recipients will continue to receive the message in plain text unless
                the smime-force-encryption variable is set.  It is recommended to sign encrypted messages, i.e., to also set the
                smime-sign variable.

     smime-sign-cert-USER@HOST, smime-sign-cert
                [Option] Points to a file in PEM format.  For the purpose of signing and decryption this file needs to contain
                the user's private key as well as his certificate.

                For message signing ‘USER@HOST’ is always derived from the value of from (or, if that contains multiple
                addresses, sender).  For the purpose of encryption the recipient's public encryption key (certificate) is
                expected; the command certsave can be used to save certificates of signed messages (the section Signed and
                encrypted messages with S/MIME gives some details).  This mode of operation is usually driven by the specialized
                form.

                When decrypting messages the account is derived from the recipient fields (‘To:’ and ‘Cc:’) of the message,
                which are searched for addresses for which such a variable is set.  Mail always uses the first address that
                matches, so if the same message is sent to more than one of the user's addresses using different encryption
                keys, decryption might fail.

     smime-sign-include-certs-USER@HOST, smime-sign-include-certs
                [Option] If used, this is supposed to a consist of a comma-separated list of files, each of which containing a
                single certificate in PEM format to be included in the S/MIME message in addition to the smime-sign-cert cer‐
                tificate.  This is most useful for long certificate chains if it is desired to aid the receiving party's verifi‐
                cation process.  Note that top level certificates may also be included in the chain but don't play a role for
                verification.  Also see smime-sign-cert.  Remember that for this ‘USER@HOST’ refers to the variable from (or, if
                that contains multiple addresses, sender).

     smime-sign-message-digest-USER@HOST, smime-sign-message-digest
                [Option] Specifies the message digest to use when signing S/MIME messages.  RFC 5751 mandates a default of
                ‘sha1’.  Possible values are (case-insensitive and) in decreasing cipher strength: ‘sha512’, ‘sha384’, ‘sha256’,
                ‘sha224’ and ‘md5’.

                The actually available message digest algorithms depend on the cryptographic library that Mail uses.  [Option]
                Support for more message digest algorithms may be available through dynamic loading via, e.g.,
                EVP_get_digestbyname(3) (OpenSSL) if Mail has been compiled to support this.  Remember that for this ‘USER@HOST’
                refers to the variable from (or, if that contains multiple addresses, sender).

     smtp       [Option] Normally Mail invokes the program defined via sendmail to transfer messages, as described in Sending
                mail.  Setting the smtp variable will instead cause SMTP network connections be made to the server specified
                therein in order to directly submit the message.  Mail knows about three different “SMTP protocols”:

                ·   The plain SMTP protocol (RFC 5321) that normally lives on the server port 25 and requires setting the
                    smtp-use-starttls variable to enter a SSL/TLS encrypted session state.  Assign a value like [v15-compat]
                    ‘[smtp://][user[:password]@]server[:port]’ ([no v15-compat] ‘[smtp://]server[:port]’) to choose this proto‐
                    col.
                ·   Then the so-called SMTPS which is supposed to live on server port 465 and is automatically SSL/TLS secured.
                    Unfortunately it never became a standardized protocol and may thus not be supported by your hosts network
                    service database – in fact the port number has already been reassigned to other protocols!

                    SMTPS is nonetheless a commonly offered protocol and thus can be chosen by assigning a value like [v15-com‐
                    pat] ‘smtps://[user[:password]@]server[:port]’ ([no v15-compat] ‘smtps://server[:port]’); due to the men‐
                    tioned problems it is usually necessary to explicitly specify the port as ‘:465’, however.
                ·   Finally there is the SUBMISSION protocol (RFC 6409), which usually lives on server port 587 and is practi‐
                    cally identically to the SMTP protocol from Mails point of view beside that; it requires setting the
                    smtp-use-starttls variable to enter a SSL/TLS secured session state.  Assign a value like [v15-compat]
                    ‘submission://[user[:password]@]server[:port]’ ([no v15-compat] ‘submission://server[:port]’).

                For more on credentials etc. please see On URL syntax and credential lookup.  The SMTP transfer is executed in a
                child process, which runs asynchronously unless either the sendwait or the verbose variable is set.  If it
                receives a TERM signal, it will abort and save the message to DEAD.

     smtp-auth-USER@HOST, smtp-auth-HOST, smtp-auth
                [Option] Variable chain that sets the SMTP authentication method.  Possible values are ‘none’ ([no v15-compat]
                default), ‘plain’ ([v15-compat] default), ‘login’ as well as the [Option]al methods ‘cram-md5’ and ‘gssapi’.
                The ‘none’ method doesn't need any user credentials, ‘gssapi’ requires a user name and all other methods require
                a user name and a password.  See [v15-compat] smtp, user and password ([no v15-compat] smtp-auth-password and
                smtp-auth-user).  Note that smtp-auth-HOST is [v15-compat].  [no v15-compat]: Note for smtp-auth-USER@HOST: may
                override dependend on sender address in the variable from.

     smtp-auth-password
                [Option] [no v15-compat] Sets the global fallback password for SMTP authentication.  If the authentication
                method requires a password, but neither smtp-auth-password nor a matching smtp-auth-password-USER@HOST can be
                found, Mail will ask for a password on the user's terminal.

     smtp-auth-password-USER@HOST
                [no v15-compat] Overrides smtp-auth-password for specific values of sender addresses, dependent upon the vari‐
                able from.

     smtp-auth-user
                [Option] [no v15-compat] Sets the global fallback user name for SMTP authentication.  If the authentication
                method requires a user name, but neither smtp-auth-user nor a matching smtp-auth-user-USER@HOST can be found,
                Mail will ask for a user name on the user's terminal.

     smtp-auth-user-USER@HOST
                [no v15-compat] Overrides smtp-auth-user for specific values of sender addresses, dependent upon the variable
                from.

     smtp-hostname
                [v15-compat] Normally Mail uses the variable from to derive the necessary ‘USER@HOST’ information to issue a
                ‘MAIL FROM:&amp;lt;&amp;gt;’ SMTP command.  Setting smtp-hostname can be used to use the ‘USER’ from the SMTP account (smtp or
                the user variable chain) and the ‘HOST’ from the content of this variable (or, if that is the empty string,
                hostname or the local hostname as a last resort).  This often allows using an address that is itself valid but
                hosted by a provider other than which (in from) is about to send the message.  Setting this variable also influ‐
                ences the generated ‘Message-ID:’.

     spam-interface
                [Option] In order to use any of the spam-related commands (like, e.g., spamrate) the desired spam interface must
                be defined by setting this variable.  Please refer to the manual section Handling spam for the complete picture
                of spam handling in Mail.  All or none of the following interfaces may be available:

                ‘spamc’   Interaction with spamc(1) from the spamassassin(1) (http://spamassassin.apache.org SpamAssassin)
                          suite.  Different to the generic filter interface Mail will automatically add the correct arguments
                          for a given command and has the necessary knowledge to parse the program's output.  A default value
                          for spamc-command will have been compiled into the Mail binary if spamc(1) has been found in PATH dur‐
                          ing compilation.  Shall it be necessary to define a specific connection type (rather than using a con‐
                          figuration file for that), the variable spamc-arguments can be used as in, e.g., ‘-d
                          server.example.com -p 783’.  It is also possible to specify a per-user configuration via spamc-user.
                          Note that this interface doesn't inspect the ‘is-spam’ flag of a message for the command spamforget.

                ‘spamd’   Mail will directly communicate with the spamassassin(1) daemon spamd(1) via a path-based unix(4)
                          stream socket as specified in spamd-socket.  It is possible to specify a per-user configuration via
                          spamd-user.

                ‘filter’  generic spam filter support via freely configurable hooks.  This interface is ment for programs like
                          bogofilter(1) and sylfilter(1) and requires according behaviour in respect to the hooks' exit status
                          for at least the command spamrate (‘0’ meaning a message is spam, ‘1’ for non-spam, ‘2’ for unsure and
                          any other return value indicating a hard error); since the hooks can include shell code snippets
                          diverting behaviour can be intercepted as necessary.  The hooks are spamfilter-ham, spamfilter-noham,
                          spamfilter-nospam, spamfilter-rate and spamfilter-spam; the manual section Handling spam contains
                          examples for some programs.  The process environment of the hooks will have the variables NAIL_TMPDIR,
                          TMPDIR and NAIL_FILENAME_GENERATED set.  Note that spam score support for spamrate isn't supported
                          unless the [Option]tional regular expression support is available and the spamfilter-rate-scanscore
                          variable is set.

     spam-maxsize
                [Option] Messages that exceed this size won't be passed through to the configured spam-interface.  The default
                is 420000 bytes.

     spamc-command
                [Option] The path to the spamc(1) program for the ‘spamc’ spam-interface.  Note that the path is not expanded,
                but used “as is”.  A fallback path will have been compiled into the Mail binary if the executable had been found
                during compilation.

     spamc-arguments
                [Option] Even though Mail deals with most arguments for the ‘spamc’ spam-interface automatically, it may at
                least sometimes be desirable to specifiy connection-related ones via this variable, e.g., ‘-d server.example.com
                -p 783’.

     spamc-user
                [Option] Specify a username for per-user configuration files for the ‘spamc’ spam-interface.  If this is set to
                the empty string then Mail will use the name of the current user.

     spamd-socket
                [Option] Specify the path of the unix(4) domain socket on which spamd(1) listens for connections for the ‘spamd’
                spam-interface.  Note that the path is not expanded, but used “as is”.

     spamd-user
                [Option] Specify a username for per-user configuration files for the ‘spamd’ spam-interface.  If this is set to
                the empty string then Mail will use the name of the current user.

     spamfilter-ham, spamfilter-noham, spamfilter-nospam, spamfilter-rate, spamfilter-spam
                [Option] Command and argument hooks for the ‘filter’ spam-interface.  The manual section Handling spam contains
                examples for some programs.

     spamfilter-rate-scanscore
                [Option] Because of the generic nature of the ‘filter’ spam-interface spam scores are not supported for it by
                default, but if the [Option]tional regular expression support is available then setting this variable can be
                used to overcome this restriction.  It is interpreted as follows: first a number (digits) is parsed that must be
                followed by a semicolon ‘;’ and a regular expression.  Then the latter is used to parse the first output line of
                the spamfilter-rate hook, and, in case the evaluation is successful, the group that has been specified via the
                number is interpreted as a floating point scan score.

     ssl-ca-dir
                [Option] Specifies a directory with CA certificates in PEM (Pricacy Enhanced Mail) for verification of of
                SSL/TLS server certificates.  See SSL_CTX_load_verify_locations(3) for more information.

     ssl-ca-file
                [Option] Specifies a file with CA certificates in PEM format for verification of SSL/TLS server certificates.
                See SSL_CTX_load_verify_locations(3) for more information.

     ssl-cert-USER@HOST, ssl-cert-HOST, ssl-cert
                [Option] Variable chain that sets the file name for a SSL/TLS client certificate required by some servers.  This
                is a direct interface to the ‘Certificate’ slot of the SSL_CONF_cmd(3) function of the OpenSSL library, if
                available.

     ssl-cipher-list-USER@HOST, ssl-cipher-list-HOST, ssl-cipher-list
                [Option] Specifies a list of ciphers for SSL/TLS connections.  This is a direct interface to the ‘CipherString’
                slot of the SSL_CONF_cmd(3) function of the OpenSSL library, if available; see ciphers(1) for more information.
                By default Mail doesn't set a list of ciphers, which in effect will use a ssl-protocol specific cipher (protocol
                standards ship with a list of acceptable ciphers), possibly cramped to what the actually used SSL/TLS library
                supports – the manual section An example configuration also contains a SSL/TLS use case.

     ssl-config-file
                [Option] If this variable is set Mail will call CONF_modules_load_file(3) to allow OpenSSL to be configured
                according to the host system wide security settings.  If a non-empty value is given then this will be used to
                specify the configuration file to be used instead of the global OpenSSL default; note that in this case it is an
                error if the file cannot be loaded.  The application name will always be passed as “mail”.

     ssl-crl-file
                [Option] Specifies a file that contains a CRL in PEM format to use when verifying SSL/TLS server certificates.

     ssl-crl-dir
                [Option] Specifies a directory that contains files with CRLs in PEM format to use when verifying SSL/TLS server
                certificates.

     ssl-key-USER@HOST, ssl-key-HOST, ssl-key
                [Option] Variable chain that sets the file name for the private key of a SSL/TLS client certificate.  If unset,
                the name of the certificate file is used.  The file is expected to be in PEM format.  This is a direct interface
                to the ‘PrivateKey’ slot of the SSL_CONF_cmd(3) function of the OpenSSL library, if available.

     ssl-method-USER@HOST, ssl-method-HOST, ssl-method
                [Option] [Obsolete] Please use the newer and more flexible ssl-protocol instead: if both values are set,
                ssl-protocol will take precedence!  Can be set to the following values, the actually used ssl-protocol specifi‐
                cation to which it is mapped is shown in parenthesis: ‘tls1.2’ (‘-ALL, TLSv1.2’), ‘tls1.1’ (‘-ALL, TLSv1.1’),
                ‘tls1’ (‘-ALL, TLSv1’) and ‘ssl3’ (‘-ALL, SSLv3’); the special value ‘auto’ is mapped to ‘ALL, -SSLv2’ and thus
                includes the SSLv3 protocol.  Note that SSLv2 is no longer supported at all.

     ssl-protocol-USER@HOST, ssl-protocol-HOST, ssl-protocol
                [Option] Specify the used SSL/TLS protocol.  This is a direct interface to the ‘Protocol’ slot of the
                SSL_CONF_cmd(3) function of the OpenSSL library, if available; otherwise an Mail internal parser is used which
                understands the following subset of (case-insensitive) command strings: ‘SSLv3’, ‘TLSv1’, ‘TLSv1.1’ and
                ‘TLSv1.2’, as well as the special value ‘ALL’.  Multiple specifications may be given via a comma-separated list
                which ignores any whitespace.  An optional ‘+’ plus prefix will enable a protocol, a ‘-’ minus prefix will dis‐
                able it, so that ‘-ALL, TLSv1.2’ will enable only the TLSv1.2 protocol.

                It depends upon the used TLS/SSL library which protocols are actually supported and which protocols are used if
                ssl-protocol is not set, but note that SSLv2 is no longer supported at all and actively disabled.  Especially
                for older protocols explicitly securing ssl-cipher-list may be worthwile, see An example configuration.

     ssl-rand-egd
                [Option] Gives the pathname to an entropy daemon socket, see RAND_egd(3).  Not all SSL/TLS libraries support
                this.

     ssl-rand-file
                [Option] Gives the pathname to a file with entropy data, see RAND_load_file(3).  If the file is a regular file
                writable by the invoking user, new data is written to it after it has been loaded.

     ssl-verify-USER@HOST, ssl-verify-HOST, ssl-verify
                [Option] Variable chain that sets the action to be performed if an error occurs during SSL/TLS server certifi‐
                cate validation.  Valid (case-insensitive) values are ‘strict’ (fail and close connection immediately), ‘ask’
                (ask whether to continue on standard input), ‘warn’ (print a warning and continue), ‘ignore’ (do not perform
                validation).  The default is ‘ask’.

     stealthmua
                If only set without an assigned value, then this option inhibits the generation of the ‘Message-ID:’ and
                ‘User-Agent:’ header fields that include obvious references to Mail.  There are two pitfalls associated with
                this: First, the message id of outgoing messages is not known anymore.  Second, an expert may still use the
                remaining information in the header to track down the originating mail user agent.  If set to the value
                ‘noagent’, then the mentioned ‘Message-ID:’ suppression doesn't occur.

     toplines   If defined, gives the number of lines of a message to be printed out with the top command; normally, the first
                five lines are printed.

     ttycharset
                The character set of the terminal Mail operates on, and the one and only supported character set that Mail can
                use if no character set conversion capabilities have been compiled into it, in which case it defaults to
                ISO-8859-1 unless it can deduce a value from the LC_CTYPE locale environment.  Refer to the section Character
                sets for the complete picture about character sets.

     user-HOST, user
                [v15-compat] Variable chain that sets a global fallback user name, which is used in case none has been given in
                the protocol and account-specific URL.  This variable defaults to the value of USER.

     version, version-major, version-minor, version-update
                (Read-only) Mail version information: the first variable contains a string containing the complete version iden‐
                tification – this is identical to the output of the command version.  The latter three contain only digits: the
                major, minor and update version numbers.

ENVIRONMENT
     The term “environment variable” should be considered an indication that the following variables are either standardized as
     being vivid parts of process environments, or are commonly found in there.  Unless otherwise explicitly noted they inte‐
     grate into the normal variable handling, as documented above, from Mails point of view.

     COLUMNS
             The user's preferred width in column positions for the terminal screen or window.  Queried and used once on program
             startup.

     DEAD    The name of the file to use for saving aborted messages if save is set; this defaults to dead.letter in the user's
             HOME directory.

     EDITOR  Pathname of the text editor to use in the edit command and ~e TILDE ESCAPES.  A default editor is used if this
             value is not defined.

     HOME    The user's home directory.  This variable is only used when it resides in the process environment.  Use setenv to
             update the value at runtime.

     LANG, LC_ALL, LC_COLLATE, LC_CTYPE, LC_MESSAGES
             See locale(7) and Character sets.

     LINES   The user's preferred number of lines on a page or the vertical screen or window size in lines.  Queried and used
             once on program startup.

     LISTER  Pathname of the directory lister to use in the folders command when operating on local mailboxes.  Default is ls(1)
             (path search through SHELL).

     MBOX    The name of the user's mbox file.  Supports a logical subset of the special conventions that are documented for the
             file command and the folder option.  The fallback default is mbox in the user's HOME directory.

     MAIL    Is used as the user's primary system mailbox, unless inbox is set, see file.  This is assumed to be an absolute
             pathname.

     MAILRC  Is used as a startup file instead of ~/.mailrc if set.  When Mail scripts are invoked on behalf of other users,
             this variable should be set to /dev/null to avoid side-effects from reading their configuration files.  This vari‐
             able is only used when it resides in the process environment.

     NAIL_NO_SYSTEM_RC
             If this variable is set then reading of mail.rc at startup is inhibited, i.e., the same effect is achieved as if
             Mail had been started up with the option -n.  This variable is only used when it resides in the process environ‐
             ment.

     NETRC   [v15-compat] [Option] This variable overrides the default location of the user's .netrc file.

     PAGER   Pathname of the program to use in the more command or when the crt variable is set.  The default paginator is
             more(1) (path search through SHELL).

     PATH    A list of directories that is searched by the shell when looking for commands (as such only recognized in the
             process environment).

     SHELL   The shell to use for the commands !, shell, the ~! TILDE ESCAPES and when starting subprocesses.  A default shell
             is used if this option is not defined.

     SYSV3   Changes the letters printed in the first column of a header summary.

     TERM    [Option] The terminal type for which output is to be prepared.

     TMPDIR  Used as directory for temporary files instead of /tmp, if set.  This variable is only used when it resides in the
             process environment.  Use setenv to update the value at runtime.

     USER    Force identification as the given user, i.e., identical to the -u command line option.  This variable is only used
             when it resides in the process environment.  Use setenv to update the value at runtime, but note that doing so
             won't trigger any of those validation checks that were performed on program startup (again).

     VISUAL  Pathname of the text editor to use in the visual command and ~v TILDE ESCAPES.

FILES
     ~/.mailrc        File giving initial commands.

     mail.rc          System wide initialization file.

     ~/.mime.types    Personal MIME types, see The mime.types files.

     /etc/mime.types  System wide MIME types, see The mime.types files.

     ~/.netrc         [v15-compat] [Option] The default location of the users .netrc file – the section The .netrc file docu‐
                      ments the file format.

   The mime.types files
     When sending messages Mail tries to determine the content type of all attachments.  When displaying message content or
     attachments Mail uses the content type to decide whether it can directly display data or whether it needs to deal with con‐
     tent handlers, as can be defined via pipe-TYPE/SUBTYPE (and pipe-EXTENSION) variables, to do so.

     It learns about MIME types and how to treat them by reading mime.types files, the loading of which can be controlled by
     setting the variable mimetypes-load-control.  (The command mimetype can also be used to deal with MIME types.)  mime.types
     files have the following syntax:

           type/subtype extension [extension ...]

     where ‘type/subtype’ are strings describing the file contents, and one or multiple ‘extension’s, separated by whitespace,
     name the part of a filename starting after the last dot (of interest).  Comments may be introduced anywhere on a line with
     a number sign ‘#’, causing the remaining line to be discarded.  Mail also supports an extended, non-portable syntax in spe‐
     cially crafted files, which can be loaded via the alternative value syntax of mimetypes-load-control and prepends an
     optional ‘type-marker’:

           [type-marker ]type/subtype extension [extension ...]

     The following type markers are supported:

           @     Treat message parts with this content as plain text.
           @t@   The same as plain @.
           @h@   Treat message parts with this content as HTML tagsoup.  If the [Option]al HTML-tagsoup-to-text converter is not
                 available treat the content as plain text instead.
           @H@   Likewise @h@ but instead of falling back to plain text require an explicit content handler to be defined.

     Further reading: for sending messages: mime-allow-text-controls.  For reading etc. messages: Viewing HTML mail and MIME
     attachments, mime-counter-evidence, pipe-TYPE/SUBTYPE, pipe-EXTENSION.

   The .netrc file
     The .netrc file contains user credentials for machine accounts.  The default location in the user's HOME directory may be
     overridden by the NETRC environment variable.  The file consists of space, tabulator or newline separated tokens.  Mail
     implements a parser that supports a superset of the original BSD syntax, but users should nonetheless be aware of portabil‐
     ity glitches of that file format, shall their .netrc be usable across multiple programs and platforms:

     ·   BSD doesn't support single, but only double quotation marks, e.g., ‘password="pass with spaces"’.
     ·   BSD (only?) supports escaping of single characters via a backslash (e.g., a space can be escaped via ‘\ ’), in- as well
         as outside of a quoted string.
     ·   BSD doesn't require the final quotation mark of the final user input token.
     ·   At least Hewlett-Packard seems to support a format which also allows tokens to be separated with commas – this format
         is not supported!
     ·   Whereas other programs may require that the .netrc file is accessible by only the user if it contains a password token
         for any other login than “anonymous”, Mail will always require these strict permissions.

     Of the following list of supported tokens Mail only uses (and caches) machine, login and password:

     machine name
               The hostname of the entries' machine, lowercase-normalized by Mail before use.  Any further file content, until
               either end-of-file or the occurrence of another machine or a default first-class token is bound (only related) to
               the machine name.

               As an extension that shouldn't be the cause of any worries Mail supports a single wildcard prefix for name:

                     machine *.example.com login USER password PASS
                     machine pop3.example.com login USER password PASS
                     machine smtp.example.com login USER password PASS

               which would match ‘xy.example.com’ as well as ‘pop3.example.com’, but neither ‘example.com’ nor
               ‘local.smtp.example.com’.  Note that in the example neither ‘pop3.example.com’ nor ‘smtp.example.com’ will be
               matched by the wildcard, since the exact matches take precedence (it is however faster to specify it the other
               way around).

     default   This is the same as machine except that it is a fallback entry that is used shall none of the specified machines
               match; only one default token may be specified, and it must be the last first-class token.

     login name
               The user name on the remote machine.

     password string
               The user's password on the remote machine.

     account string
               Supply an additional account password.  This is merely for FTP purposes.

     macdef name
               Define a macro.  A macro is defined with the specified name; it is formed from all lines beginning with the next
               line and continuing until a blank line is (consecutive newline characters are) encountered.  (Note that macdef
               entries cannot be utilized by multiple machines, too, but must be defined following the machine they are intended
               to be used with.)  If a macro named init exists, it is automatically run as the last step of the login process.
               This is merely for FTP purposes.

EXAMPLES
   An example configuration
           # This example assumes v15.0 compatibility mode
           set v15-compat

           # Where are the up-to-date SSL certificates?
           #set ssl-ca-dir=/etc/ssl/certs
           set ssl-ca-file=/etc/ssl/certs/ca-certificates.crt

           # (Since we manage up-to-date ones explicitly, don't use any,
           # possibly outdated, default certificates shipped with OpenSSL
           set ssl-no-default-ca

           # Don't use protocols olders than TLS v1.2.
           # Change this only when the remote server doesn't support it:
           # maybe use ssl-protocol-HOST (or -USER@HOST) syntax to define
           # such explicit exceptions, then
           set ssl-protocol="-ALL,+TLSv1.2"

           # Explicitly define the list of ciphers, which may improve security,
           # especially with protocols older than TLS v1.2.  See ciphers(1).
           # Hint: it is important to include "@STRENGTH": only with it the
           # final list will be sorted by algorithm strength.
           # This is an example: in reality it is possibly best to only use
           # ssl-cipher-list-HOST (or -USER@HOST), as necessary, again..
           set ssl-cipher-list="ALL:!aNULL:!MEDIUM:!LOW:\
               !MD5:!RC4:!EXPORT:@STRENGTH"

           # Request strict transport security checks!
           set ssl-verify=strict

           # Essential setting: select allowed character sets
           set sendcharsets=utf-8,iso-8859-1

           # A very kind option: when replying to a message, first try to
           # use the same encoding that the original poster used herself!
           set reply-in-same-charset

           # When replying to or forwarding a message the comment and name
           # parts of email addresses are removed unless this variable is set
           set fullnames

           # When sending messages, wait until the Mail-Transfer-Agent finishs.
           # Only like this you'll be able to see errors reported through the
           # exit status of the MTA (including the builtin SMTP one)!
           set sendwait

           # Only use builtin MIME types, no mime.types(5) files
           set mimetypes-load-control

           # Default directory where we act in (relative to $HOME)
           set folder=mail MBOX=+mbox.mbox record=+sent.mbox \
               DEAD=+dead.mbox

           # Make "file mymbox" and "file myrec" go to..
           shortcut mymbox %:+mbox.mbox myrec +sent.mbox

           # Not really optional, e.g., for S/MIME
           set from="Your Name &amp;lt;youremail@domain&amp;gt;"

           # It may be necessary to set hostname and/or smtp-hostname
           # if the "SERVER" of smtp and "domain" of from don't match.
           # The `urlcodec' command can be used to encode USER and PASS
           set smtp=(smtp[s]/submission)://[USER[:PASS]@]SERVER[:PORT] \
               smtp-auth=login/plain... \
               smtp-use-starttls

           # Never refuse to start into interactive mode, and more
           set emptystart \
               colour-pager crt= followup-to followup-to-honour=ask-yes \
               history-gabby mime-counter-evidence=6 \
               prompt="\033[31m?\?[\$ \@]\&amp; \033[0m" \
               NAIL_HISTFILE=+.s-nailhist NAIL_HISTSIZE=-1 \
               reply-to-honour=ask-yes

           # When `p'rinting messages, show only these headers
           # (use `P'rint for all headers and `S'how for raw message)
           retain date from to cc subject

           # Some mailing lists
           mlist @xyz-editor.xyz$ @xyzf.xyz$
           mlsubscribe ^xfans@xfans.xyz$

           # A real life example of a very huge free mail provider
           account XooglX {
             localopts yes
             set from="Your Name &amp;lt;youremail@domain&amp;gt;"
             # (The plain smtp:// proto is optional)
             set smtp=USER:PASS@smtp.gmXil.com smtp-use-starttls
           }

           # Here is a pretty large one which does not allow sending mails
           # if there is a domain name mismatch on the SMTP protocol level,
           # which would bite us if the value of from does not match, e.g.,
           # for people who have a sXXXXeforge project and want to speak
           # with the mailing list under their project account (in from),
           # still sending the message through their normal mail provider
           account XandeX {
             localopts true
             set from="Your Name &amp;lt;youremail@domain&amp;gt;"
             set smtp=smtps://USER:PASS@smtp.yaXXex.ru:465 \
                 hostname=yaXXex.com smtp-hostname=
           }

           # Create some new commands so that, e.g., `ls /tmp' will..
           ghost l   !ls -aFtr
           ghost L   !ls -aFt
           ghost ll  !ls -aFltr
           ghost Ll  !ls -aFlt
           ghost la  !ls -aFr
           ghost La  !ls -aF
           ghost lla !ls -aFlr
           ghost Lla !ls -aFl
           ghost lS  !ls -aFrS
           ghost LS  !ls -aFS
           ghost llS !ls -aFlrS
           ghost LlS !ls -aFlS

           # We don't support gpg(1) directly yet.  But simple --clearsign'd
           # message parts can be dealt with as follows:
           define V {
             localopts yes
             set pipe-text/plain="set -C;\
               : &amp;gt; \"${TMPDIR}/${NAIL_FILENAME_GENERATED}\" \
               trap \"rm -f \\\"${TMPDIR}/${NAIL_FILENAME_GENERATED}\\\"\" \
                 EXIT INT QUIT PIPE TERM;\
               set +C;\
               cat &amp;gt; \"${TMPDIR}/${NAIL_FILENAME_GENERATED}\";\
               &amp;lt; \"${TMPDIR}/${NAIL_FILENAME_GENERATED}\" awk \
                   -v TMPFILE=\"${TMPDIR}/${NAIL_FILENAME_GENERATED}\" '\
                 BEGIN {done=0}\
                 /^-----BEGIN PGP SIGNED MESSAGE-----/,/^$/ {\
                   if (done++ != 0)\
                     next;\
                   print \"--- GPG --verify ---\";\
                   system(\"gpg --verify \" TMPFILE \" 2&amp;gt;&amp;1\");\
                   print \"--- GPG --verify ---\";\
                   print \"\";\
                   next;\
                 }\
                 /^-----BEGIN PGP SIGNATURE-----/,\
                     /^-----END PGP SIGNATURE-----/ {\
                   next;\
                 }\
                 {print}\
                 '"
             print
           }
           ghost V call V

           define RK {
             !printf 'Key IDs to gpg --recv-keys: ';\
               read keyids;\
               gpg --recv-keys ${keyids};
           }
           ghost RK call RK

     When storing passwords in ~/.mailrc appropriate permissions should be set on this file with ‘$ chmod 0600 ~/.mailrc’.  If
     the [Option]al netrc-lookup is available user credentials can be stored in the central .netrc file instead; e.g., here is a
     different version of the example account that sets up SMTP and POP3:

           account XandeX {
             localopts true
             set from="Your Name &amp;lt;youremail@domain&amp;gt;"
             set netrc-lookup
             #set agent-shell-lookup="gpg -d .pass.gpg"

             set smtp=smtps://smtp.yXXXXx.ru:465 \
                 smtp-hostname= hostname=yXXXXx.com
             set pop3-keepalive=240 pop3-no-apop-pop.yXXXXx.ru
             ghost xp fi pop3s://pop.yXXXXx.ru
           }

     and, in the .netrc file:

           machine *.yXXXXx.ru login USER password PASS

     If the also [Option]al agent-shell-lookup is available things could be diversified further by using encrypted password
     storage: for this, don't specify ‘password PASS’ in the .netrc file and instead uncomment the line that defines agent
     lookup in the example account above, then create the encrypted password storage file .pass.gpg:

           $ echo PASS &amp;gt; .pass
           $ gpg -e .pass
           $ eval `gpg-agent --daemon \
                   --pinentry-program=/usr/bin/pinentry-curses \
                   --max-cache-ttl 99999 --default-cache-ttl 99999`

     This configuration should now work just fine (use the -d command line option for a(n almost) dry-run):

           $ echo text | mail -vv -AXandeX -s Subject some@where

   Signed and encrypted messages with S/MIME
     [Option] S/MIME provides two central mechanisms: message signing and message encryption.  A signed message contains some
     data in addition to the regular text.  The data can be used to verify that the message was sent using a valid certificate,
     that the sender's address in the message header matches that in the certificate, and that the message text has not been
     altered.  Signing a message does not change its regular text; it can be read regardless of whether the recipient's software
     is able to handle S/MIME.

     It is thus usually possible to sign all outgoing messages if so desired.  Encryption, in contrast, makes the message text
     invisible for all people except those who have access to the secret decryption key.  To encrypt a message, the specific
     recipient's public encryption key must be known.  It is therefore not possible to send encrypted mail to people unless
     their key has been retrieved from either previous communication or public key directories.  A message should always be
     signed before it is encrypted.  Otherwise, it is still possible that the encrypted message text is altered.

     A central concept to S/MIME is that of the certification authority (CA).  A CA is a trusted institution that issues cer‐
     tificates.  For each of these certificates it can be verified that it really originates from the CA, provided that the CA's
     own certificate is previously known.  A set of CA certificates is usually delivered with OpenSSL and installed on your sys‐
     tem.  If you trust the source of your OpenSSL software installation, this offers reasonable security for S/MIME on the
     Internet.  (Otherwise set ssl-no-default-ca and use smime-ca-file and/or smime-ca-dir.)  In general, a certificate cannot
     be more secure than the method its CA certificate has been retrieved with, though.  Thus if you download a CA certificate
     from the Internet, you can only trust the messages you verify using that certificate as much as you trust the download
     process.

     The first thing you need for participating in S/MIME message exchange is your personal certificate, including a private
     key.  The certificate contains public information, in particular your name and your email address(es), and the public key
     that is used by others to encrypt messages for you, and to verify signed messages they supposedly received from you.  The
     certificate is included in each signed message you send.  The private key must be kept secret.  It is used to decrypt mes‐
     sages that were previously encrypted with your public key, and to sign messages.

     For personal use it is recommended that you get a S/MIME certificate from one of the major CAs on the Internet using your
     WWW browser.  Many CAs offer such certificates for free.  There is also https://www.CAcert.org which issues client and
     server certificates to members of their community for free; their root certificate (https://www.cacert.org/certs/root.crt)
     is often not in the default set of trusted CA root certificates, though, which means you will have to download their root
     certificate separately and ensure it is part of our S/MIME certificate validation chain by including it in smime-ca-dir or
     as a vivid member of the smime-ca-file.  But let's take a step-by-step tour on how to setup S/MIME with a certificate from
     CAcert.org despite this situation!

     First of all you will have to become a member of the CAcert.org community, simply by registrating yourself via the web
     interface.  Once you are, create and verify all email addresses you want to be able to create signed and encrypted messages
     for/with using the corresponding entries of the web interface.  Now ready to create S/MIME certificates, so let's create a
     new “client certificate”, ensure to include all email addresses that should be covered by the certificate in the following
     web form, and also to use your name as the “common name”.

     Create a private key and a certificate request on your local computer (please see the manual pages of the used commands for
     more in-depth knowledge on what the used arguments etc. do):

           openssl req -nodes -newkey rsa:4096 -keyout key.pem -out creq.pem

     Afterwards copy-and-paste the content of “creq.pem” into the certificate-request (CSR) field of the web form on the CAc‐
     ert.org website (you may need to unfold some “advanced options” to see the corresponding text field).  This last step will
     ensure that your private key (which never left your box) and the certificate belong together (through the public key that
     will find its way into the certificate via the certificate-request).  You are now ready and can create your CAcert certi‐
     fied certificate.  Download and store or copy-and-paste it as “pub.crt”.

     Yay.  In order to use your new S/MIME setup you will have to create a combined private key/public key (certificate) file:

           cat key.pem pub.crt &amp;gt; ME@HERE.com.paired

     This is the file Mail will work with.  If you have created your private key with a passphrase then Mail will ask you for it
     whenever a message is signed or decrypted.  Set the following variables to henceforth use S/MIME (setting smime-ca-file is
     of interest for verification only):

           set smime-ca-file=ALL-TRUSTED-ROOT-CERTS-HERE \
             smime-sign-cert=ME@HERE.com.paired \
             smime-sign-message-digest=SHA256 \
             smime-sign

     From each signed message you send, the recipient can fetch your certificate and use it to send encrypted mail back to you.
     Accordingly if somebody sends you a signed message, you can do the same, and use the verify command to check the validity
     of the certificate.

     Options of interest for S/MIME signing: smime-ca-dir, smime-ca-file, smime-crl-dir, smime-crl-file, smime-no-default-ca,
     smime-sign, smime-sign-cert, smime-sign-include-certs and smime-sign-message-digest.

     After it has been verified save the certificate via certsave and tell Mail that it should use it for encryption for further
     communication with that somebody:

           certsave FILENAME
           set smime-encrypt-USER@HOST=FILENAME \
               smime-cipher-USER@HOST=AES256

     Additional options of interest for S/MIME en- and decryption: smime-cipher and smime-encrypt-USER@HOST.

     You should carefully consider if you prefer to store encrypted messages in decrypted form.  If you do, anybody who has
     access to your mail folders can read them, but if you do not, you might be unable to read them yourself later if you happen
     to lose your private key.  The decrypt command saves messages in decrypted form, while the save, copy, and move commands
     leave them encrypted.

     Note that neither S/MIME signing nor encryption applies to message subjects or other header fields yet.  Thus they may not
     contain sensitive information for encrypted messages, and cannot be trusted even if the message content has been verified.
     When sending signed messages, it is recommended to repeat any important header information in the message text.

   Using CRLs with S/MIME or SSL/TLS
     [Option] Certification authorities (CAs) issue certificate revocation lists (CRLs) on a regular basis.  These lists contain
     the serial numbers of certificates that have been declared invalid after they have been issued.  Such usually happens
     because the private key for the certificate has been compromised, because the owner of the certificate has left the organi‐
     zation that is mentioned in the certificate, etc.  To seriously use S/MIME or SSL/TLS verification, an up-to-date CRL is
     required for each trusted CA.  There is otherwise no method to distinguish between valid and invalidated certificates.
     Mail currently offers no mechanism to fetch CRLs, nor to access them on the Internet, so you have to retrieve them by some
     external mechanism.

     Mail accepts CRLs in PEM format only; CRLs in DER format must be converted, like, e.g.:

           $ openssl crl -inform DER -in crl.der -out crl.pem

     To tell Mail about the CRLs, a directory that contains all CRL files (and no other files) must be created.  The
     smime-crl-dir or ssl-crl-dir variables, respectively, must then be set to point to that directory.  After that, Mail
     requires a CRL to be present for each CA that is used to verify a certificate.

   Handling spam
     [Option] Mail can make use of several spam interfaces for the purpose of identification of, and, in general, dealing with
     spam messages.  A precondition of most commands in order to function is that the spam-interface variable is set to one of
     the supported interfaces.  Once messages have been identified as spam their (volatile) ‘is-spam’ state can be prompted: the
     ‘:s’ and ‘:S’ message specifications will address respective messages and their attrlist entries will be used when display‐
     ing the headline in the header display.

     ·   spamrate rates the given messages and sets their ‘is-spam’ flag accordingly.  If the spam interface offers spam scores
         those can also be displayed in the header display by including the ‘%$’ format in the headline variable.

     ·   spamham, spamspam and spamforget will interact with the Bayesian filter of the chosen interface and learn the given
         messages as “ham” or “spam”, respectively; the last command can be used to cause “unlearning” of messages; it adheres
         to their current ‘is-spam’ state and thus reverts previous teachings.

     ·   spamclear and spamset will simply set and clear, respectively, the mentioned volatile ‘is-spam’ message flag, without
         any interface interaction.

     The spamassassin(1) based spam-interfaces ‘spamc’ and ‘spamd’ require a running instance of the spamd(1) server in order to
     function, started with the option --allow-tell shall Bayesian filter learning be possible.  ‘spamd’ only works via a local
     path-based unix(4) socket, but otherwise the following will be equivalently fine:

           $ spamd -i localhost:2142 -i /tmp/.spamsock -d [-L] [-l]
           $ spamd --listen=localhost:2142 --listen=/tmp/.spamsock \
               --daemonize [--local] [--allow-tell]

     Thereafter Mail can make use of these interfaces:

           $ mail -Sspam-interface=spamd -Sspam-maxsize=500000 \
               -Sspamd-socket=/tmp/.spamsock -Sspamd-user=

           $ mail -Sspam-interface=spamc -Sspam-maxsize=500000 \
               -Sspamc-command=/usr/local/bin/spamc \
               -Sspamc-arguments="-U /tmp/.spamsock" -Sspamc-user=
           or
           $ mail -Sspam-interface=spamc -Sspam-maxsize=500000 \
               -Sspamc-command=/usr/local/bin/spamc \
               -Sspamc-arguments="-d localhost -p 2142" -Sspamc-user=

     Using the generic filter approach allows usage of programs like bogofilter(1) and sylfilter(1).  Here is an example for the
     former, requiring it to be accessible via PATH:

           $ mail -Sspam-interface=filter -Sspam-maxsize=500000 \
               -Sspamfilter-ham="bogofilter -n" \
               -Sspamfilter-noham="bogofilter -N" \
               -Sspamfilter-nospam="bogofilter -S" \
               -Sspamfilter-rate="bogofilter -TTu 2&amp;gt;/dev/null" \
               -Sspamfilter-spam="bogofilter -s" \
               -Sspamfilter-rate-scanscore="1;^(.+)$"

     Because messages must exist on local storage in order to be scored (or used for Bayesian filter training), it is possibly a
     good idea to perform the local spam check last:

           define spamdelhook {
             # Server side DCC
             spamset (header x-dcc-brand-metrics "bulk")
             # Server-side spamassassin(1)
             spamset (header x-spam-flag "YES")
             del :s # TODO we HAVE to be able to do `spamrate :u ! :sS'
             move :S +maybe-spam
             spamrate :u
             del :s
             move :S +maybe-spam
           }
           set folder-hook-FOLDER=spamdelhook

     See also the documentation for the variables spam-interface, spam-maxsize, spamc-command, spamc-arguments, spamc-user,
     spamd-socket, spamd-user, spamfilter-ham, spamfilter-noham, spamfilter-nospam, spamfilter-rate and
     spamfilter-rate-scanscore.

FAQ
   Mail shortly hangs on startup
     This can have two reasons, one is the necessity to wait for a file lock and can't be helped, the other being that Mail
     calls the function uname(2) in order to query the nodename of the box (sometimes the real one is needed instead of the one
     represented by the internal variable hostname).  You may have varying success by ensuring that the real hostname and
     ‘localhost’ have entries in /etc/hosts, or, more generally, that the name service is properly setup – and does hostname(1)
     return what you'd expect?

   I can't login to Google mail a.k.a. GMail
     Since 2014 some free service providers classify programs as “less secure” unless they use a special authentification method
     (OAuth 2.0) which wasn't standardized for non-HTTP protocol authentication token query until August 2015 (RFC 7628).

     Different to Kerberos / GSSAPI, which is developed since the mid of the 1980s, where a user can easily create a local
     authentication ticket for her- and himself with the locally installed kinit(1) program, that protocol has no such local
     part but instead requires a world-wide-web query to create or fetch a token; since there is no local cache this query has
     to be performed whenever Mail is invoked from the command line (in interactive sessions situation may differ).

     Mail doesn't support OAuth.  Because of this it is necessary to declare Mail a “less secure app” (on the providers account
     web page) in order to read and send mail.  However, it also seems possible to take the following steps instead:

     1.   give the provider the number of a mobile phone,
     2.   enable “2-Step Verification”,
     3.   create an application specific password (16 characters), and
     4.   use that special password instead of your real Google account password in S-nail (for more on that see the section On
          URL syntax and credential lookup).

SEE ALSO
     bogofilter(1), bzip2(1), file(1), fmt(1), gpg(1), gpg-agent(1), gzip(1), less(1), more(1), newaliases(1), openssl(1),
     postfix(1), printf(1), sendmail(1), sh(1), spamassassin(1), spamc(1), spamd(1), sylfilter(1), vacation(1), xterm(1), xz(1),
     editline(3), iconv(3), readline(3), setlocale(3), ssl(3), aliases(5), locale(7), mailaddr(7), re_format(7), exim(8),
     mailwrapper(8), sendmail(8)

HISTORY
     A mail command appeared in Version 1 AT&amp;T Unix.  Berkeley Mail was written in 1978 by Kurt Shoens.  This man page is
     derived from from “The Mail Reference Manual” originally written by Kurt Shoens.  “Heirloom Mailx” enhancements are main‐
     tained and documented by Gunnar Ritter.  “S-nail” is maintained and documented by Steffen (Daode) Nurpmeso.

     Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2003 Edition, Standard for
     Information Technology – Operating System Interface (POSIX), The Open Group Base Specifications Issue 6, Copyright ©
     2001-2003 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrep‐
     ancy between this version and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard
     is the referee document.  The original Standard can be obtained online at OpenGroup.org:
           http://www.opengroup.org/unix/online.html
     Redistribution of this material is permitted so long as this notice remains intact.

AUTHORS
     Kurt Shoens,
     Christos Zoulas,
     Gunnar Ritter,
     Steffen Nurpmeso &amp;lt;s-nail-users@lists.sourceforge.net&amp;gt; (later s-mailx@sdaoden.eu).

CAVEATS
     The character set conversion uses and relies upon the iconv(3) function.  Its functionality differs widely between the var‐
     ious system environments Mail runs on.

     Limitations with IMAP mailboxes are: It is not possible to edit messages, but it is possible to append them.  Thus to edit
     a message, create a local copy of it, edit it, append it, and delete the original.  The line count for the header display
     is only appropriate if the entire message has been downloaded from the server.  The marking of messages as `new' is per‐
     formed by the IMAP server; use of the exit command instead of quit will not cause it to be reset, and if the newmail vari‐
     able is unset, messages that arrived during a session will not be in state `new' anymore when the folder is opened again.
     Also if commands queued in disconnected mode are committed, the IMAP server will delete the `new' flag for all messages in
     the changed folder, and new messages will appear as unread when it is selected for viewing later.  The `flagged',
     `answered', and `draft' attributes are usually permanent, but some IMAP servers are known to drop them without notifica‐
     tion.  Message numbers may change with IMAP every time before the prompt is printed if Mail is notified by the server that
     messages have been deleted by some other client or process.  In this case, `Expunged n messages' is printed, and message
     numbers may have changed.

     Limitations with POP3 mailboxes are: It is not possible to edit messages, they can only be copied and deleted.  The line
     count for the header display is only appropriate if the entire message has been downloaded from the server.  The status
     field of a message is maintained by the server between connections; some servers do not update it at all, and with a server
     that does, the exit command will not cause the message status to be reset.  The newmail command and the newmail variable
     have no effect.  It is not possible to rename or to remove POP3 mailboxes.

     If a “RUBOUT” (interrupt, ‘control-C’) is typed while an IMAP or POP3 operation is in progress, Mail will wait until the
     operation can be safely aborted, and will then return to the command loop and print the prompt again.  When a second
     “RUBOUT” is typed while Mail is waiting for the operation to complete, the operation itself will be cancelled.  In this
     case, data that has not been fetched yet will have to be fetched before the next command can be performed.  If the can‐
     celled operation was using an SSL/TLS encrypted channel, an error in the SSL transport will very likely result and render
     the connection unusable.

     As Mail is a mail user agent, it provides only basic SMTP services.  If it fails to contact its upstream SMTP server, it
     will not make further attempts to transfer the message at a later time, and it does not leave other information about this
     condition than an error message on the terminal and an entry in DEAD.  This is usually not a problem if the SMTP server is
     located in the same local network as the computer on which Mail is run.  However, care should be taken when using a remote
     server of an ISP; it might be better to set up a local SMTP server then which just acts as a proxy.

     Mail immediately contacts the SMTP server (or sendmail(1)) even when operating in disconnected mode.  It would not make
     much sense for Mail to defer outgoing mail since SMTP servers usually provide much more elaborated delay handling than Mail
     could perform as a client.  Thus the recommended setup for sending mail in disconnected mode is to configure a local SMTP
     server such that it sends outgoing mail as soon as an external network connection is available again, i.e., to advise it to
     do that from a network startup script.

BUGS
     IMAP support is very basic.  Interrupting an IMAP operation can lead to endless iterations of the same operation.  With
     IMAP, at least if the IMAP cache is used, if multiple connect and disconnect cycles happen without an intervening change of
     the active mailbox then Mail will at some time loose the ability to keep the local state up-to-date, meaning that, e.g.,
     messages show up with false numbers, and including the possibility that messages are accessed via numbers that are no(t
     longer) valid, resulting in program crashes.  The solution is to change the active mailbox before that happens :).  Also
     see the file TODO from the distribution or the repository.  After deleting some message of a POP3 mailbox the header sum‐
     mary falsely claims that there are no messages to display, you need to perform a scroll or dot movement to restore proper
     state.  In threaded display a power user may encounter crashes very occasionally (this is may and very).

BSD                                                       Jan 27, 2017                                                       BSD
MAKE(1)                                                   User Commands                                                  MAKE(1)

NAME
       make - GNU make utility to maintain groups of programs

SYNOPSIS
       make [OPTION]... [TARGET]...

DESCRIPTION
       The  make  utility will determine automatically which pieces of a large program need to be recompiled, and issue the com‐
       mands to recompile them.  The manual describes the GNU implementation of make, which was written by Richard Stallman  and
       Roland McGrath, and is currently maintained by Paul Smith.  Our examples show C programs, since they are very common, but
       you can use make with any programming language whose compiler can be run with a shell command.  In fact, make is not lim‐
       ited  to  programs.  You can use it to describe any task where some files must be updated automatically from others when‐
       ever the others change.

       To prepare to use make, you must write a file called the makefile that describes the relationships among  files  in  your
       program, and the states the commands for updating each file.  In a program, typically the executable file is updated from
       object files, which are in turn made by compiling source files.

       Once a suitable makefile exists, each time you change some source files, this simple shell command:

              make

       suffices to perform all necessary recompilations.  The make program uses the makefile description and the  last-modifica‐
       tion times of the files to decide which of the files need to be updated.  For each of those files, it issues the commands
       recorded in the makefile.

       make executes commands in the makefile to update one or more target names, where name is typically a program.  If  no  -f
       option is present, make will look for the makefiles GNUmakefile, makefile, and Makefile, in that order.

       Normally  you  should  call  your makefile either makefile or Makefile.  (We recommend Makefile because it appears promi‐
       nently near the beginning of a directory listing, right near other important files  such  as  README.)   The  first  name
       checked,  GNUmakefile,  is  not  recommended for most makefiles.  You should use this name if you have a makefile that is
       specific to GNU make, and will not be understood by other versions of make.  If makefile is '-', the  standard  input  is
       read.

       make  updates a target if it depends on prerequisite files that have been modified since the target was last modified, or
       if the target does not exist.

OPTIONS
       -b, -m
            These options are ignored for compatibility with other versions of make.

       -B, --always-make
            Unconditionally make all targets.

       -C dir, --directory=dir
            Change to directory dir before reading the makefiles or doing anything else.  If multiple -C options are  specified,
            each is interpreted relative to the previous one: -C / -C etc is equivalent to -C /etc.  This is typically used with
            recursive invocations of make.

       -d   Print debugging information in addition to normal processing.  The debugging information says which files are  being
            considered  for remaking, which file-times are being compared and with what results, which files actually need to be
            remade, which implicit rules are considered and which are applied---everything interesting about  how  make  decides
            what to do.

       --debug[=FLAGS]
            Print  debugging  information  in addition to normal processing.  If the FLAGS are omitted, then the behavior is the
            same as if -d was specified.  FLAGS may be a for all debugging output (same as using -d), b for basic  debugging,  v
            for  more  verbose basic debugging, i for showing implicit rules, j for details on invocation of commands, and m for
            debugging while remaking makefiles.  Use n to disable all previous debugging flags.

       -e, --environment-overrides
            Give variables taken from the environment precedence over variables from makefiles.

       -f file, --file=file, --makefile=FILE
            Use file as a makefile.

       -i, --ignore-errors
            Ignore all errors in commands executed to remake files.

       -I dir, --include-dir=dir
            Specifies a directory dir to search for included makefiles.  If several -I  options  are  used  to  specify  several
            directories,  the  directories  are  searched  in the order specified.  Unlike the arguments to other flags of make,
            directories given with -I flags may come directly after the flag: -Idir is allowed, as well as -I dir.  This  syntax
            is allowed for compatibility with the C preprocessor's -I flag.

       -j [jobs], --jobs[=jobs]
            Specifies the number of jobs (commands) to run simultaneously.  If there is more than one -j option, the last one is
            effective.  If the -j option is given without an argument, make will not limit the  number  of  jobs  that  can  run
            simultaneously.

       -k, --keep-going
            Continue  as  much as possible after an error.  While the target that failed, and those that depend on it, cannot be
            remade, the other dependencies of these targets can be processed all the same.

       -l [load], --load-average[=load]
            Specifies that no new jobs (commands) should be started if there are others jobs running and the load average is  at
            least load (a floating-point number).  With no argument, removes a previous load limit.

       -L, --check-symlink-times
            Use the latest mtime between symlinks and target.

       -n, --just-print, --dry-run, --recon
            Print the commands that would be executed, but do not execute them (except in certain circumstances).

       -o file, --old-file=file, --assume-old=file
            Do  not  remake  the  file  file even if it is older than its dependencies, and do not remake anything on account of
            changes in file.  Essentially the file is treated as very old and its rules are ignored.

       -O[type], --output-sync[=type]
            When running multiple jobs in parallel with -j, ensure the output of each job  is  collected  together  rather  than
            interspersed  with  output from other jobs.  If type is not specified or is target the output from the entire recipe
            for each target is grouped together.  If type is line the output from each command line within a recipe  is  grouped
            together.  If type is recurse output from an entire recursive make is grouped together.  If type is none output syn‐
            chronization is disabled.

       -p, --print-data-base
            Print the data base (rules and variable values) that results from reading the makefiles; then execute as usual or as
            otherwise  specified.   This  also  prints the version information given by the -v switch (see below).  To print the
            data base without trying to remake any files, use make -p -f/dev/null.

       -q, --question
            ``Question mode''.  Do not run any commands, or print anything; just return an exit status that is zero if the spec‐
            ified targets are already up to date, nonzero otherwise.

       -r, --no-builtin-rules
            Eliminate use of the built-in implicit rules.  Also clear out the default list of suffixes for suffix rules.

       -R, --no-builtin-variables
            Don't define any built-in variables.

       -s, --silent, --quiet
            Silent operation; do not print the commands as they are executed.

       -S, --no-keep-going, --stop
            Cancel  the effect of the -k option.  This is never necessary except in a recursive make where -k might be inherited
            from the top-level make via MAKEFLAGS or if you set -k in MAKEFLAGS in your environment.

       -t, --touch
            Touch files (mark them up to date without really changing them) instead of running their commands.  This is used  to
            pretend that the commands were done, in order to fool future invocations of make.

       --trace
            Information  about  the disposition of each target is printed (why the target is being rebuilt and what commands are
            run to rebuild it).

       -v, --version
            Print the version of the make program plus a copyright, a list of authors and a notice that there is no warranty.

       -w, --print-directory
            Print a message containing the working directory before and after other processing.  This may be useful for tracking
            down errors from complicated nests of recursive make commands.

       --no-print-directory
            Turn off -w, even if it was turned on implicitly.

       -W file, --what-if=file, --new-file=file, --assume-new=file
            Pretend  that  the target file has just been modified.  When used with the -n flag, this shows you what would happen
            if you were to modify that file.  Without -n, it is almost the same as running a touch command  on  the  given  file
            before running make, except that the modification time is changed only in the imagination of make.

       --warn-undefined-variables
            Warn when an undefined variable is referenced.

EXIT STATUS
       GNU  make exits with a status of zero if all makefiles were successfully parsed and no targets that were built failed.  A
       status of one will be returned if the -q flag was used and make determines that a target needs to be rebuilt.   A  status
       of two will be returned if any errors were encountered.

SEE ALSO
       The  full documentation for make is maintained as a Texinfo manual.  If the info and make programs are properly installed
       at your site, the command

              info make

       should give you access to the complete manual.

BUGS
       See the chapter ``Problems and Bugs'' in The GNU Make Manual.

AUTHOR
       This manual page contributed by Dennis Morse of Stanford University.  Further updates contributed by Mike Frysinger.   It
       has been reworked by Roland McGrath.  Maintained by Paul Smith.

COPYRIGHT
       Copyright © 1992-1993, 1996-2016 Free Software Foundation, Inc.  This file is part of GNU make.

       GNU  Make is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as
       published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version.

       GNU Make is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the  implied  warranty
       of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

       You  should  have  received  a  copy  of  the  GNU  General  Public  License  along  with  this  program.   If  not,  see
       http://www.gnu.org/licenses/.

GNU                                                     28 February 2016                                                 MAKE(1)
MAN(1)                                                 Manual pager utils                                                 MAN(1)

NAME
       man - an interface to the on-line reference manuals

SYNOPSIS
       man  [-C  file]  [-d]  [-D]  [--warnings[=warnings]]  [-R encoding] [-L locale] [-m system[,...]] [-M path] [-S list] [-e
       extension] [-i|-I] [--regex|--wildcard] [--names-only] [-a] [-u] [--no-subpages] [-P pager] [-r prompt] [-7]  [-E  encod‐
       ing]  [--no-hyphenation]  [--no-justification]  [-p  string]  [-t]  [-T[device]]  [-H[browser]] [-X[dpi]] [-Z] [[section]
       page[.section] ...] ...
       man -k [apropos options] regexp ...
       man -K [-w|-W] [-S list] [-i|-I] [--regex] [section] term ...
       man -f [whatis options] page ...
       man -l [-C file] [-d] [-D] [--warnings[=warnings]] [-R encoding] [-L locale] [-P pager] [-r prompt]  [-7]  [-E  encoding]
       [-p string] [-t] [-T[device]] [-H[browser]] [-X[dpi]] [-Z] file ...
       man -w|-W [-C file] [-d] [-D] page ...
       man -c [-C file] [-d] [-D] page ...
       man [-?V]

DESCRIPTION
       man  is  the  system's manual pager.  Each page argument given to man is normally the name of a program, utility or func‐
       tion.  The manual page associated with each of these arguments is then found and displayed.  A section, if provided, will
       direct  man to look only in that section of the manual.  The default action is to search in all of the available sections
       following a pre-defined order ("1 n l 8 3 0 2 5 4 9 6 7" by default,  unless  overridden  by  the  SECTION  directive  in
       /etc/man_db.conf), and to show only the first page found, even if page exists in several sections.

       The table below shows the section numbers of the manual followed by the types of pages they contain.

       1   Executable programs or shell commands
       2   System calls (functions provided by the kernel)
       3   Library calls (functions within program libraries)
       4   Special files (usually found in /dev)
       5   File formats and conventions eg /etc/passwd
       6   Games
       7   Miscellaneous (including macro packages and conventions), e.g. man(7), groff(7)
       8   System administration commands (usually only for root)
       9   Kernel routines [Non standard]

       A manual page consists of several sections.

       Conventional  section  names  include  NAME,  SYNOPSIS,  CONFIGURATION,  DESCRIPTION, OPTIONS, EXIT STATUS, RETURN VALUE,
       ERRORS, ENVIRONMENT, FILES, VERSIONS, CONFORMING TO, NOTES, BUGS, EXAMPLE, AUTHORS, and SEE ALSO.

       The following conventions apply to the SYNOPSIS section and can be used as a guide in other sections.

       bold text          type exactly as shown.
       italic text        replace with appropriate argument.
       [-abc]             any or all arguments within [ ] are optional.
       -a|-b              options delimited by | cannot be used together.
       argument ...       argument is repeatable.
       [expression] ...   entire expression within [ ] is repeatable.

       Exact rendering may vary depending on the output device.  For instance, man will usually not be able  to  render  italics
       when running in a terminal, and will typically use underlined or coloured text instead.

       The command or function illustration is a pattern that should match all possible invocations.  In some cases it is advis‐
       able to illustrate several exclusive invocations as is shown in the SYNOPSIS section of this manual page.

EXAMPLES
       man ls
           Display the manual page for the item (program) ls.

       man man.7
           Display the manual page for macro package man from section 7.

       man -a intro
           Display, in succession, all of the available intro manual pages contained within the manual.  It is possible to  quit
           between successive displays or skip any of them.

       man -t alias | lpr -Pps
           Format the manual page referenced by `alias', usually a shell manual page, into the default troff or groff format and
           pipe it to the printer named ps.  The default output for groff is usually PostScript.  man --help should advise as to
           which processor is bound to the -t option.

       man -l -Tdvi ./foo.1x.gz &amp;gt; ./foo.1x.dvi
           This  command  will  decompress  and  format the nroff source manual page ./foo.1x.gz into a device independent (dvi)
           file.  The redirection is necessary as the -T flag causes output to be directed to stdout with no pager.  The  output
           could be viewed with a program such as xdvi or further processed into PostScript using a program such as dvips.

       man -k printf
           Search  the  short  descriptions  and  manual page names for the keyword printf as regular expression.  Print out any
           matches.  Equivalent to apropos printf.

       man -f smail
           Lookup the manual pages referenced by smail and print out  the  short  descriptions  of  any  found.   Equivalent  to
           whatis smail.

OVERVIEW
       Many  options  are available to man in order to give as much flexibility as possible to the user.  Changes can be made to
       the search path, section order, output processor, and other behaviours and operations detailed below.

       If set, various environment variables are interrogated to determine the operation of man.  It  is  possible  to  set  the
       `catch  all'  variable $MANOPT to any string in command line format with the exception that any spaces used as part of an
       option's argument must be escaped (preceded by a backslash).  man will parse $MANOPT prior to  parsing  its  own  command
       line.   Those  options  requiring an argument will be overridden by the same options found on the command line.  To reset
       all of the options set in $MANOPT, -D can be specified as the initial command line option.  This will allow man to  `for‐
       get' about the options specified in $MANOPT although they must still have been valid.

       The manual pager utilities packaged as man-db make extensive use of index database caches.  These caches contain informa‐
       tion such as where each manual page can be found on the filesystem and what its whatis (short one line description of the
       man page) contains, and allow man to run faster than if it had to search the filesystem each time to find the appropriate
       manual page.  If requested using the -u option, man will ensure that the caches remain consistent, which can obviate  the
       need to manually run software to update traditional whatis text databases.

       If  man cannot find a mandb initiated index database for a particular manual page hierarchy, it will still search for the
       requested manual pages, although file globbing will be necessary to search within that hierarchy.  If whatis  or  apropos
       fails to find an index it will try to extract information from a traditional whatis database instead.

       These utilities support compressed source nroff files having, by default, the extensions of .Z, .z and .gz.  It is possi‐
       ble to deal with any compression extension, but this information must be known at compile time.  Also,  by  default,  any
       cat  pages  produced  are  compressed  using  gzip.   Each  `global'  manual  page  hierarchy  such  as /usr/share/man or
       /usr/X11R6/man may have any directory as its cat page hierarchy.  Traditionally the cat pages are stored under  the  same
       hierarchy  as the man pages, but for reasons such as those specified in the File Hierarchy Standard (FHS), it may be bet‐
       ter to store them elsewhere.  For details on how to do this, please read manpath(5).  For details on why to do this, read
       the standard.

       International  support is available with this package.  Native language manual pages are accessible (if available on your
       system) via use of locale functions.  To activate such support, it is necessary to  set  either  $LC_MESSAGES,  $LANG  or
       another  system  dependent environment variable to your language locale, usually specified in the POSIX 1003.1 based for‐
       mat:

       &amp;lt;language&amp;gt;[_&amp;lt;territory&amp;gt;[.&amp;lt;character-set&amp;gt;[,&amp;lt;version&amp;gt;]]]

       If the desired page is available in your locale, it will be displayed in lieu of the standard (usually American  English)
       page.

       Support for international message catalogues is also featured in this package and can be activated in the same way, again
       if available.  If you find that the manual pages and message catalogues supplied with this package are not  available  in
       your  native  language  and  you  would  like to supply them, please contact the maintainer who will be coordinating such
       activity.

       For information regarding other features and extensions available with this manual pager, please read the documents  sup‐
       plied with the package.

DEFAULTS
       man will search for the desired manual pages within the index database caches. If the -u option is given, a cache consis‐
       tency check is performed to ensure the databases accurately reflect the filesystem.  If this option is always  given,  it
       is not generally necessary to run mandb after the caches are initially created, unless a cache becomes corrupt.  However,
       the cache consistency check can be slow on systems with many manual pages installed, so it is not performed  by  default,
       and  system  administrators may wish to run mandb every week or so to keep the database caches fresh.  To forestall prob‐
       lems caused by outdated caches, man will fall back to file globbing if a cache lookup fails, just as it would if no cache
       was present.

       Once  a  manual  page  has  been  located, a check is performed to find out if a relative preformatted `cat' file already
       exists and is newer than the nroff file.  If it does and is, this preformatted file is (usually)  decompressed  and  then
       displayed,  via  use  of a pager.  The pager can be specified in a number of ways, or else will fall back to a default is
       used (see option -P for details).  If no cat is found or is older than the nroff file, the nroff is filtered through var‐
       ious programs and is shown immediately.

       If  a  cat  file can be produced (a relative cat directory exists and has appropriate permissions), man will compress and
       store the cat file in the background.

       The filters are deciphered by a number of means.  Firstly, the command line option -p or the environment  variable  $MAN‐
       ROFFSEQ is interrogated.  If -p was not used and the environment variable was not set, the initial line of the nroff file
       is parsed for a preprocessor string.  To contain a valid preprocessor string, the first line must resemble

       '\" &amp;lt;string&amp;gt;

       where string can be any combination of letters described by option -p below.

       If none of the above methods provide any filter information, a default set is used.

       A formatting pipeline is formed from the filters and the primary formatter (nroff or  [tg]roff  with  -t)  and  executed.
       Alternatively,  if  an  executable program mandb_nfmt (or mandb_tfmt with -t) exists in the man tree root, it is executed
       instead.  It gets passed the manual source file, the preprocessor string, and optionally the device specified with -T  or
       -E as arguments.

OPTIONS
       Non  argument  options that are duplicated either on the command line, in $MANOPT, or both, are not harmful.  For options
       that require an argument, each duplication will override the previous argument value.

   General options
       -C file, --config-file=file
              Use this user configuration file rather than the default of ~/.manpath.

       -d, --debug
              Print debugging information.

       -D, --default
              This option is normally issued as the very first option and resets man's behaviour to its default.  Its use is  to
              reset those options that may have been set in $MANOPT.  Any options that follow -D will have their usual effect.

       --warnings[=warnings]
              Enable  warnings from groff.  This may be used to perform sanity checks on the source text of manual pages.  warn‐
              ings is a comma-separated list of warning names; if it is not supplied, the default is "mac".  See the  “Warnings”
              node in info groff for a list of available warning names.

   Main modes of operation
       -f, --whatis
              Equivalent to whatis.  Display a short description from the manual page, if available.  See whatis(1) for details.

       -k, --apropos
              Equivalent to apropos.  Search the short manual page descriptions for keywords and display any matches.  See apro‐
              pos(1) for details.

       -K, --global-apropos
              Search for text in all manual pages.  This is a brute-force search, and is likely to take some time; if  you  can,
              you  should  specify a section to reduce the number of pages that need to be searched.  Search terms may be simple
              strings (the default), or regular expressions if the --regex option is used.

              Note that this searches the sources of the manual pages, not the rendered text, and so may include false positives
              due to things like comments in source files.  Searching the rendered text would be much slower.

       -l, --local-file
              Activate  `local'  mode.   Format  and display local manual files instead of searching through the system's manual
              collection.  Each manual page argument will be interpreted as an nroff source file in the correct format.  No  cat
              file  is produced.  If '-' is listed as one of the arguments, input will be taken from stdin.  When this option is
              not used, and man fails to find the page required, before displaying the error message, it attempts to act  as  if
              this option was supplied, using the name as a filename and looking for an exact match.

       -w, --where, --path, --location
              Don't actually display the manual pages, but do print the location(s) of the source nroff files that would be for‐
              matted.

       -W, --where-cat, --location-cat
              Don't actually display the manual pages, but do print the location(s) of the cat files that  would  be  displayed.
              If -w and -W are both specified, print both separated by a space.

       -c, --catman
              This option is not for general use and should only be used by the catman program.

       -R encoding, --recode=encoding
              Instead of formatting the manual page in the usual way, output its source converted to the specified encoding.  If
              you already know the encoding of the source file, you can also use  manconv(1)  directly.   However,  this  option
              allows you to convert several manual pages to a single encoding without having to explicitly state the encoding of
              each, provided that they were already installed in a structure similar to a manual page hierarchy.

   Finding manual pages
       -L locale, --locale=locale
              man will normally determine your current locale by a call to the C function setlocale(3) which interrogates  vari‐
              ous  environment  variables,  possibly  including  $LC_MESSAGES and $LANG.  To temporarily override the determined
              value, use this option to supply a locale string directly to man.  Note that it will not  take  effect  until  the
              search  for  pages  actually  begins.   Output  such as the help message will always be displayed in the initially
              determined locale.

       -m system[,...], --systems=system[,...]
              If this system has access to other operating system's manual pages, they can be accessed using  this  option.   To
              search for a manual page from NewOS's manual page collection, use the option -m NewOS.

              The  system  specified can be a combination of comma delimited operating system names.  To include a search of the
              native operating system's manual pages, include the system name man in the  argument  string.   This  option  will
              override the $SYSTEM environment variable.

       -M path, --manpath=path
              Specify  an  alternate manpath to use.  By default, man uses manpath derived code to determine the path to search.
              This option overrides the $MANPATH environment variable and causes option -m to be ignored.

              A path specified as a manpath must be the root of a manual page hierarchy structured into sections as described in
              the  man-db  manual  (under  "The manual page system").  To view manual pages outside such hierarchies, see the -l
              option.

       -S list, -s list, --sections=list
              List is a colon- or comma-separated list of `order specific' manual sections to search.  This option overrides the
              $MANSECT environment variable.  (The -s spelling is for compatibility with System V.)

       -e sub-extension, --extension=sub-extension
              Some  systems  incorporate  large packages of manual pages, such as those that accompany the Tcl package, into the
              main manual page hierarchy.  To get around the problem of having two manual pages  with  the  same  name  such  as
              exit(3),  the Tcl pages were usually all assigned to section l.  As this is unfortunate, it is now possible to put
              the pages in the correct section, and to assign a specific `extension' to them, in this case,  exit(3tcl).   Under
              normal  operation, man will display exit(3) in preference to exit(3tcl).  To negotiate this situation and to avoid
              having to know which section the page you require resides in, it is now  possible  to  give  man  a  sub-extension
              string  indicating which package the page must belong to.  Using the above example, supplying the option -e tcl to
              man will restrict the search to pages having an extension of *tcl.

       -i, --ignore-case
              Ignore case when searching for manual pages.  This is the default.

       -I, --match-case
              Search for manual pages case-sensitively.

       --regex
              Show all pages with any part of either their names or their descriptions matching each page argument as a  regular
              expression, as with apropos(1).  Since there is usually no reasonable way to pick a "best" page when searching for
              a regular expression, this option implies -a.

       --wildcard
              Show all pages with any part of either their names or their descriptions matching each page argument using  shell-
              style  wildcards,  as with apropos(1) --wildcard.  The page argument must match the entire name or description, or
              match on word boundaries in the description.  Since there is usually no reasonable way to pick a "best" page  when
              searching for a wildcard, this option implies -a.

       --names-only
              If  the  --regex  or  --wildcard  option is used, match only page names, not page descriptions, as with whatis(1).
              Otherwise, no effect.

       -a, --all
              By default, man will exit after displaying the most suitable manual page it finds.  Using this option  forces  man
              to display all the manual pages with names that match the search criteria.

       -u, --update
              This  option  causes  man to perform an `inode level' consistency check on its database caches to ensure that they
              are an accurate representation of the filesystem.  It will only have a useful effect if man is installed with  the
              setuid bit set.

       --no-subpages
              By default, man will try to interpret pairs of manual page names given on the command line as equivalent to a sin‐
              gle manual page name containing a hyphen or an underscore.  This supports the  common  pattern  of  programs  that
              implement a number of subcommands, allowing them to provide manual pages for each that can be accessed using simi‐
              lar syntax as would be used to invoke the subcommands themselves.  For example:

                $ man -aw git diff
                /usr/share/man/man1/git-diff.1.gz

              To disable this behaviour, use the --no-subpages option.

                $ man -aw --no-subpages git diff
                /usr/share/man/man1/git.1.gz
                /usr/share/man/man3/Git.3pm.gz
                /usr/share/man/man1/diff.1.gz

   Controlling formatted output
       -P pager, --pager=pager
              Specify which output pager to use.  By default, man uses less.  This option overrides  the  $MANPAGER  environment
              variable, which in turn overrides the $PAGER environment variable.  It is not used in conjunction with -f or -k.

              The value may be a simple command name or a command with arguments, and may use shell quoting (backslashes, single
              quotes, or double quotes).  It may not use pipes to connect multiple commands; if you need  that,  use  a  wrapper
              script, which may take the file to display either as an argument or on standard input.

       -r prompt, --prompt=prompt
              If  a  recent  version of less is used as the pager, man will attempt to set its prompt and some sensible options.
              The default prompt looks like

               Manual page name(sec) line x

              where name denotes the manual page name, sec denotes the section it was found under and x the current line number.
              This is achieved by using the $LESS environment variable.

              Supplying  -r  with  a  string  will override this default.  The string may contain the text $MAN_PN which will be
              expanded to the name of the current manual page and its section name surrounded by `(' and `)'.  The  string  used
              to produce the default could be expressed as

              \ Manual\ page\ \$MAN_PN\ ?ltline\ %lt?L/%L.:
              byte\ %bB?s/%s..?\ (END):?pB\ %pB\\%..
              (press h for help or q to quit)

              It is broken into three lines here for the sake of readability only.  For its meaning see the less(1) manual page.
              The prompt string is first evaluated by the shell.  All double quotes, back-quotes and backslashes in  the  prompt
              must be escaped by a preceding backslash.  The prompt string may end in an escaped $ which may be followed by fur‐
              ther options for less.  By default man sets the -ix8 options.

              The $MANLESS environment variable described below may be used to set a default prompt string if none  is  supplied
              on the command line.

       -7, --ascii
              When viewing a pure ascii(7) manual page on a 7 bit terminal or terminal emulator, some characters may not display
              correctly when using the latin1(7) device description with GNU nroff.  This option allows pure ascii manual  pages
              to  be  displayed  in  ascii  with the latin1 device.  It will not translate any latin1 text.  The following table
              shows the translations performed: some parts of it may only be displayed properly when using GNU nroff's latin1(7)
              device.

              Description           Octal   latin1   ascii
              ─────────────────────────────────────────────
              continuation hyphen    255      ‐        -
              bullet (middle dot)    267      ·        o
              acute accent           264      '        '
              multiplication sign    327      ×        x

              If  the latin1 column displays correctly, your terminal may be set up for latin1 characters and this option is not
              necessary.  If the latin1 and ascii columns are identical, you are reading this page using this option or man  did
              not  format  this  page  using the latin1 device description.  If the latin1 column is missing or corrupt, you may
              need to view manual pages with this option.

              This option is ignored when using options -t, -H, -T, or -Z and may be useless for nroff other than GNU's.

       -E encoding, --encoding=encoding
              Generate output for a character encoding other than the default.  For backward compatibility, encoding may  be  an
              nroff device such as ascii, latin1, or utf8 as well as a true character encoding such as UTF-8.

       --no-hyphenation, --nh
              Normally,  nroff will automatically hyphenate text at line breaks even in words that do not contain hyphens, if it
              is necessary to do so to lay out words on a line  without  excessive  spacing.   This  option  disables  automatic
              hyphenation, so words will only be hyphenated if they already contain hyphens.

              If  you  are  writing  a  manual page and simply want to prevent nroff from hyphenating a word at an inappropriate
              point, do not use this option, but consult the nroff documentation instead; for instance, you can put "\%"  inside
              a  word to indicate that it may be hyphenated at that point, or put "\%" at the start of a word to prevent it from
              being hyphenated.

       --no-justification, --nj
              Normally, nroff will automatically justify text to both margins.  This option disables full justification, leaving
              justified only to the left margin, sometimes called "ragged-right" text.

              If  you  are writing a manual page and simply want to prevent nroff from justifying certain paragraphs, do not use
              this option, but consult the nroff documentation instead; for instance, you can use the ".na", ".nf",  ".fi",  and
              ".ad" requests to temporarily disable adjusting and filling.

       -p string, --preprocessor=string
              Specify  the sequence of preprocessors to run before nroff or troff/groff.  Not all installations will have a full
              set of preprocessors.  Some of the preprocessors and the letters used to designate them are: eqn  (e),  grap  (g),
              pic  (p), tbl (t), vgrind (v), refer (r).  This option overrides the $MANROFFSEQ environment variable.  zsoelim is
              always run as the very first preprocessor.

       -t, --troff
              Use groff -mandoc to format the manual page to stdout.  This option is not required in conjunction with -H, -T, or
              -Z.

       -T[device], --troff-device[=device]
              This  option  is  used  to  change  groff  (or possibly troff's) output to be suitable for a device other than the
              default.  It implies -t.  Examples (provided with Groff-1.17) include dvi, latin1, ps, utf8, X75 and X100.

       -H[browser], --html[=browser]
              This option will cause groff to produce HTML output, and will display that output in a web browser.  The choice of
              browser  is  determined by the optional browser argument if one is provided, by the $BROWSER environment variable,
              or by a compile-time default if that is unset (usually lynx).  This option implies -t, and will only work with GNU
              troff.

       -X[dpi], --gxditview[=dpi]
              This  option  displays  the  output of groff in a graphical window using the gxditview program.  The dpi (dots per
              inch) may be 75, 75-12, 100, or 100-12, defaulting to 75; the -12 variants use a 12-point base font.  This  option
              implies -T with the X75, X75-12, X100, or X100-12 device respectively.

       -Z, --ditroff
              groff  will run troff and then use an appropriate post-processor to produce output suitable for the chosen device.
              If groff -mandoc is groff, this option is passed to groff and will suppress  the  use  of  a  post-processor.   It
              implies -t.

   Getting help
       -?, --help
              Print a help message and exit.

       --usage
              Print a short usage message and exit.

       -V, --version
              Display version information.

EXIT STATUS
       0      Successful program execution.

       1      Usage, syntax or configuration file error.

       2      Operational error.

       3      A child process returned a non-zero exit status.

       16     At least one of the pages/files/keywords didn't exist or wasn't matched.

ENVIRONMENT
       MANPATH
              If $MANPATH is set, its value is used as the path to search for manual pages.

       MANROFFOPT
              The  contents  of $MANROFFOPT are added to the command line every time man invokes the formatter (nroff, troff, or
              groff).

       MANROFFSEQ
              If $MANROFFSEQ is set, its value is used to determine the set of preprocessors to pass each manual  page  through.
              The default preprocessor list is system dependent.

       MANSECT
              If  $MANSECT is set, its value is a colon-delimited list of sections and it is used to determine which manual sec‐
              tions to search and in what order.  The default is "1 n l 8 3 0 2 5 4 9 6 7", unless  overridden  by  the  SECTION
              directive in /etc/man_db.conf.

       MANPAGER, PAGER
              If $MANPAGER or $PAGER is set ($MANPAGER is used in preference), its value is used as the name of the program used
              to display the manual page.  By default, less is used.

              The value may be a simple command name or a command with arguments, and may use shell quoting (backslashes, single
              quotes,  or  double  quotes).   It may not use pipes to connect multiple commands; if you need that, use a wrapper
              script, which may take the file to display either as an argument or on standard input.

       MANLESS
              If $MANLESS is set, its value will be used as the default prompt string for the less pager,  as  if  it  had  been
              passed  using  the -r option (so any occurrences of the text $MAN_PN will be expanded in the same way).  For exam‐
              ple,  if  you  want  to  set  the  prompt  string  unconditionally  to  “my  prompt  string”,  set   $MANLESS   to
              ‘-Psmy prompt string’.  Using the -r option overrides this environment variable.

       BROWSER
              If $BROWSER is set, its value is a colon-delimited list of commands, each of which in turn is used to try to start
              a web browser for man --html.  In each command, %s is replaced by a  filename  containing  the  HTML  output  from
              groff, %% is replaced by a single percent sign (%), and %c is replaced by a colon (:).

       SYSTEM If $SYSTEM is set, it will have the same effect as if it had been specified as the argument to the -m option.

       MANOPT If  $MANOPT  is  set, it will be parsed prior to man's command line and is expected to be in a similar format.  As
              all of the other man specific environment variables can be expressed as command line options, and are thus  candi‐
              dates  for  being included in $MANOPT it is expected that they will become obsolete.  N.B.  All spaces that should
              be interpreted as part of an option's argument must be escaped.

       MANWIDTH
              If $MANWIDTH is set, its value is used as the line length for which manual pages should be formatted.   If  it  is
              not set, manual pages will be formatted with a line length appropriate to the current terminal (using the value of
              $COLUMNS, an ioctl(2) if available, or falling back to 80 characters if neither is  available).   Cat  pages  will
              only  be saved when the default formatting can be used, that is when the terminal line length is between 66 and 80
              characters.

       MAN_KEEP_FORMATTING
              Normally, when output is not being directed to a terminal (such as to a file or a pipe), formatting characters are
              discarded  to make it easier to read the result without special tools.  However, if $MAN_KEEP_FORMATTING is set to
              any non-empty value, these formatting characters are retained.  This may be useful for wrappers  around  man  that
              can interpret formatting characters.

       MAN_KEEP_STDERR
              Normally, when output is being directed to a terminal (usually to a pager), any error output from the command used
              to produce formatted versions of manual pages is discarded to avoid interfering with the  pager's  display.   Pro‐
              grams such as groff often produce relatively minor error messages about typographical problems such as poor align‐
              ment, which are unsightly and generally confusing when displayed along with the manual page.  However, some  users
              want  to see them anyway, so, if $MAN_KEEP_STDERR is set to any non-empty value, error output will be displayed as
              usual.

       LANG, LC_MESSAGES
              Depending on system and implementation, either or both of $LANG and $LC_MESSAGES will be interrogated for the cur‐
              rent  message  locale.  man will display its messages in that locale (if available).  See setlocale(3) for precise
              details.

FILES
       /etc/man_db.conf
              man-db configuration file.

       /usr/share/man
              A global manual page hierarchy.

       /usr/share/man/index.(bt|db|dir|pag)
              A traditional global index database cache.

       /var/cache/man/index.(bt|db|dir|pag)
              An FHS compliant global index database cache.

SEE ALSO
       apropos(1), groff(1), less(1), manpath(1), nroff(1), troff(1), whatis(1), zsoelim(1), setlocale(3), manpath(5), ascii(7),
       latin1(7), man(7), catman(8), mandb(8), the man-db package manual, FSSTND

HISTORY
       1990, 1991 – Originally written by John W. Eaton (jwe@che.utexas.edu).

       Dec 23 1992: Rik Faith (faith@cs.unc.edu) applied bug fixes supplied by Willem Kasdorp (wkasdo@nikhefk.nikef.nl).

       30th  April 1994 – 23rd February 2000: Wilf. (G.Wilford@ee.surrey.ac.uk) has been developing and maintaining this package
       with the help of a few dedicated people.

       30th October 1996 – 30th March 2001: Fabrizio Polacco &amp;lt;fpolacco@debian.org&amp;gt; maintained and enhanced this package for  the
       Debian project, with the help of all the community.

       31st March 2001 – present day: Colin Watson &amp;lt;cjwatson@debian.org&amp;gt; is now developing and maintaining man-db.

2.7.6.1                                                    2016-12-12                                                     MAN(1)
MESG(1)                                                   User Commands                                                  MESG(1)

NAME
       mesg - display (or do not display) messages from other users

SYNOPSIS
       mesg [option] [n|y]

DESCRIPTION
       The mesg utility is invoked by a user to control write access others have to the terminal device associated with standard
       error output.  If write access is allowed, then programs such as talk(1) and write(1) may display messages on the  termi‐
       nal.

       Traditionally,  write  access  is allowed by default.  However, as users become more conscious of various security risks,
       there is a trend to remove write access by default, at least for the primary login shell.  To make sure your ttys are set
       the way you want them to be set, mesg should be executed in your login scripts.

ARGUMENTS
       n      Disallow messages.

       y      Allow messages to be displayed.

       If no arguments are given, mesg shows the current message status on standard error output.

OPTIONS
       -v, --verbose
              Explain what is being done.

       -V, --version
              Display version information and exit.

       -h, --help
              Display help text and exit.

EXIT STATUS
       The mesg utility exits with one of the following values:

            0     Messages are allowed.

            1     Messages are not allowed.

           &amp;gt;1     An error has occurred.

FILES
       /dev/[pt]ty[pq]?

SEE ALSO
       talk(1), write(1), wall(1), login(1), xterm(1)

HISTORY
       A mesg command appeared in Version 6 AT&amp;T UNIX.

AVAILABILITY
       The  mesg  command  is  part  of  the util-linux package and is available from ftp://ftp.kernel.org/pub/linux/utils/util-
       linux/.

util-linux                                                  July 2014                                                    MESG(1)
MKDIR(1)                                                  User Commands                                                 MKDIR(1)

NAME
       mkdir - make directories

SYNOPSIS
       mkdir [OPTION]... DIRECTORY...

DESCRIPTION
       Create the DIRECTORY(ies), if they do not already exist.

       Mandatory arguments to long options are mandatory for short options too.

       -m, --mode=MODE
              set file mode (as in chmod), not a=rwx - umask

       -p, --parents
              no error if existing, make parent directories as needed

       -v, --verbose
              print a message for each created directory

       -Z     set SELinux security context of each created directory to the default type

       --context[=CTX]
              like -Z, or if CTX is specified then set the SELinux or SMACK security context to CTX

       --help display this help and exit

       --version
              output version information and exit

AUTHOR
       Written by David MacKenzie.

<!-- 30b0cf8a-458a-435b-a2e0-993472636e53 <=< ACCEPT -->REPORTING BUGS
       GNU coreutils online help: &amp;lt;http://www.gnu.org/software/coreutils/&amp;gt;
       Report mkdir translation bugs to &amp;lt;http://translationproject.org/team/&amp;gt;

COPYRIGHT
       Copyright    ©    2016   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3   or   later
       &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.<!-- ACCEPT >=> 30b0cf8a-458a-435b-a2e0-993472636e53 -->

SEE ALSO
       mkdir(2)

       Full documentation at: &amp;lt;http://www.gnu.org/software/coreutils/mkdir&amp;gt;
       or available locally via: info '(coreutils) mkdir invocation'

GNU coreutils 8.26                                        November 2016                                                 MKDIR(1)
MKFIFO(1)                                                 User Commands                                                MKFIFO(1)

NAME
       mkfifo - make FIFOs (named pipes)

SYNOPSIS
       mkfifo [OPTION]... NAME...

DESCRIPTION
       Create named pipes (FIFOs) with the given NAMEs.

       Mandatory arguments to long options are mandatory for short options too.

       -m, --mode=MODE
              set file permission bits to MODE, not a=rw - umask

       -Z     set the SELinux security context to default type

       --context[=CTX]
              like -Z, or if CTX is specified then set the SELinux or SMACK security context to CTX

       --help display this help and exit

       --version
              output version information and exit

AUTHOR
       Written by David MacKenzie.

<!-- 30b0cf8a-458a-435b-a2e0-993472636e53 <=< ACCEPT -->REPORTING BUGS
       GNU coreutils online help: &amp;lt;http://www.gnu.org/software/coreutils/&amp;gt;
       Report mkfifo translation bugs to &amp;lt;http://translationproject.org/team/&amp;gt;

COPYRIGHT
       Copyright    ©    2016   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3   or   later
       &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.
<!-- ACCEPT >=> 30b0cf8a-458a-435b-a2e0-993472636e53 -->
SEE ALSO
       mkfifo(3)

       Full documentation at: &amp;lt;http://www.gnu.org/software/coreutils/mkfifo&amp;gt;
       or available locally via: info '(coreutils) mkfifo invocation'

GNU coreutils 8.26                                        November 2016                                                MKFIFO(1)
MORE(1)                                                   User Commands                                                  MORE(1)

NAME
       more - file perusal filter for crt viewing

SYNOPSIS
       more [options] file...

DESCRIPTION
       more  is  a  filter for paging through text one screenful at a time.  This version is especially primitive.  Users should
       realize that less(1) provides more(1) emulation plus extensive enhancements.

OPTIONS
       Options are also taken from the environment variable MORE (make sure to precede them with a dash  (-))  but  command-line
       options will override those.

       -d     Prompt  with  "[Press  space  to  continue, 'q' to quit.]", and display "[Press 'h' for instructions.]" instead of
              ringing the bell when an illegal key is pressed.

       -l     Do not pause after any line containing a ^L (form feed).

       -f     Count logical lines, rather than screen lines (i.e., long lines are not folded).

       -p     Do not scroll.  Instead, clear the whole screen and then display the text.  Notice that this option is switched on
              automatically if the executable is named page.

       -c     Do not scroll.  Instead, paint each screen from the top, clearing the remainder of each line as it is displayed.

       -s     Squeeze multiple blank lines into one.

       -u     Suppress underlining.

       -number
              The screen size to use, in number of lines.

       +number
              Start displaying each file at line number.

       +/string
              The string to be searched in each file before starting to display it.

COMMANDS
       Interactive  commands  for  more  are based on vi(1).  Some commands may be preceded by a decimal number, called k in the
       descriptions below.  In the following descriptions, ^X means control-X.

              h or ?    Help; display a summary of these commands.  If you forget all other commands, remember this one.

              SPACE     Display next k lines of text.  Defaults to current screen size.

              z         Display next k lines of text.  Defaults to current screen size.  Argument becomes new default.

              RETURN    Display next k lines of text.  Defaults to 1.  Argument becomes new default.

              d or ^D   Scroll k lines.  Default is current scroll size, initially 11.  Argument becomes new default.

              q or Q or INTERRUPT
                        Exit.

              s         Skip forward k lines of text.  Defaults to 1.

              f         Skip forward k screenfuls of text.  Defaults to 1.

              b or ^B   Skip backwards k screenfuls of text.  Defaults to 1.  Only works with files, not pipes.

              '         Go to the place where the last search started.

              =         Display current line number.

              /pattern  Search for kth occurrence of regular expression.  Defaults to 1.

              n         Search for kth occurrence of last regular expression.  Defaults to 1.

              !command or :!command
                        Execute command in a subshell.

              v         Start up an editor at current line.  The editor  is  taken  from  the  environment  variable  VISUAL  if
                        defined, or EDITOR if VISUAL is not defined, or defaults to vi if neither VISUAL nor EDITOR is defined.

              ^L        Redraw screen.

              :n        Go to kth next file.  Defaults to 1.

              :p        Go to kth previous file.  Defaults to 1.

              :f        Display current file name and line number.

              .         Repeat previous command.

ENVIRONMENT
       The more command respects the following environment variables, if they exist:

       MORE   This variable may be set with favored options to more.

       SHELL  Current shell in use (normally set by the shell at login time).

       TERM   The terminal type used by more to get the terminal characteristics necessary to manipulate the screen.

       VISUAL The editor the user prefers.  Invoked when command key v is pressed.

       EDITOR The editor of choice when VISUAL is not specified.

SEE ALSO
       vi(1), less(1)

AUTHORS
       Eric Shienbrood, UC Berkeley
       Modified by Geoff Peck, UCB to add underlining, single spacing
       Modified by John Foderaro, UCB to add -c and MORE environment variable

HISTORY
       The more command appeared in 3.0BSD.  This man page documents more version 5.19 (Berkeley 6/29/88), which is currently in
       use in the Linux community.  Documentation was produced using several other versions  of  the  man  page,  and  extensive
       inspection of the source code.

AVAILABILITY
       The  more  command is part of the util-linux package and is available from Linux Kernel Archive ⟨ftp://ftp.kernel.org/pub
       /linux/utils/util-linux/⟩.

util-linux                                                February 2014                                                  MORE(1)
MV(1)                                                     User Commands                                                    MV(1)

NAME
       mv - move (rename) files

SYNOPSIS
       mv [OPTION]... [-T] SOURCE DEST
       mv [OPTION]... SOURCE... DIRECTORY
       mv [OPTION]... -t DIRECTORY SOURCE...

DESCRIPTION
       Rename SOURCE to DEST, or move SOURCE(s) to DIRECTORY.

       Mandatory arguments to long options are mandatory for short options too.

       --backup[=CONTROL]
              make a backup of each existing destination file

       -b     like --backup but does not accept an argument

       -f, --force
              do not prompt before overwriting

       -i, --interactive
              prompt before overwrite

       -n, --no-clobber
              do not overwrite an existing file

       If you specify more than one of -i, -f, -n, only the final one takes effect.

       --strip-trailing-slashes
              remove any trailing slashes from each SOURCE argument

       -S, --suffix=SUFFIX
              override the usual backup suffix

       -t, --target-directory=DIRECTORY
              move all SOURCE arguments into DIRECTORY

       -T, --no-target-directory
              treat DEST as a normal file

       -u, --update
              move only when the SOURCE file is newer than the destination file or when the destination file is missing

       -v, --verbose
              explain what is being done

       -Z, --context
              set SELinux security context of destination file to default type

       --help display this help and exit

       --version
              output version information and exit

       The  backup  suffix is '~', unless set with --suffix or SIMPLE_BACKUP_SUFFIX.  The version control method may be selected
       via the --backup option or through the VERSION_CONTROL environment variable.  Here are the values:

       none, off
              never make backups (even if --backup is given)

       numbered, t
              make numbered backups

       existing, nil
              numbered if numbered backups exist, simple otherwise

       simple, never
              always make simple backups

AUTHOR
       Written by Mike Parker, David MacKenzie, and Jim Meyering.

<!-- 30b0cf8a-458a-435b-a2e0-993472636e53 <=< ACCEPT -->REPORTING BUGS
       GNU coreutils online help: &amp;lt;http://www.gnu.org/software/coreutils/&amp;gt;
       Report mv translation bugs to &amp;lt;http://translationproject.org/team/&amp;gt;

COPYRIGHT
       Copyright   ©   2016   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3    or    later
       &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.<!-- ACCEPT >=> 30b0cf8a-458a-435b-a2e0-993472636e53 -->

SEE ALSO
       rename(2)

       Full documentation at: &amp;lt;http://www.gnu.org/software/coreutils/mv&amp;gt;
       or available locally via: info '(coreutils) mv invocation'

GNU coreutils 8.26                                        November 2016                                                    MV(1)
NEWGRP(1)                                                 User Commands                                                NEWGRP(1)

NAME
       newgrp - log in to a new group

SYNOPSIS
       newgrp [group]

DESCRIPTION
       newgrp  changes  the group identification of its caller, analogously to login(1).  The same person remains logged in, and
       the current directory is unchanged, but calculations of access permissions to files are performed with respect to the new
       group ID.

       If no group is specified, the GID is changed to the login GID.

FILES
       /etc/group
       /etc/passwd

SEE ALSO
       login(1), group(5)

AUTHOR
       Originally by Michael Haardt. Currently maintained by Peter Orbaek (poe@daimi.aau.dk).

AVAILABILITY
       The  newgrp  command  is  part of the util-linux package and is available from ftp://ftp.kernel.org/pub/linux/utils/util-
       linux/.

util-linux                                                October 1993                                                 NEWGRP(1)
NICE(1)                                                   User Commands                                                  NICE(1)

NAME
       nice - run a program with modified scheduling priority

SYNOPSIS
       nice [OPTION] [COMMAND [ARG]...]

DESCRIPTION
       Run  COMMAND  with  an adjusted niceness, which affects process scheduling.  With no COMMAND, print the current niceness.
       Niceness values range from -20 (most favorable to the process) to 19 (least favorable to the process).

       Mandatory arguments to long options are mandatory for short options too.

       -n, --adjustment=N
              add integer N to the niceness (default 10)

       --help display this help and exit

       --version
              output version information and exit

       NOTE: your shell may have its own version of nice, which usually supersedes the version described here.  Please refer  to
       your shell's documentation for details about the options it supports.

AUTHOR
       Written by David MacKenzie.

<!-- 30b0cf8a-458a-435b-a2e0-993472636e53 <=< ACCEPT -->REPORTING BUGS
       GNU coreutils online help: &amp;lt;http://www.gnu.org/software/coreutils/&amp;gt;
       Report nice translation bugs to &amp;lt;http://translationproject.org/team/&amp;gt;

COPYRIGHT
       Copyright    ©    2016   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3   or   later
       &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.<!-- ACCEPT >=> 30b0cf8a-458a-435b-a2e0-993472636e53 -->

SEE ALSO
       nice(2), renice(1)

       Full documentation at: &amp;lt;http://www.gnu.org/software/coreutils/nice&amp;gt;
       or available locally via: info '(coreutils) nice invocation'

GNU coreutils 8.26                                        November 2016                                                  NICE(1)
NL(1)                                                     User Commands                                                    NL(1)

NAME
       nl - number lines of files

SYNOPSIS
       nl [OPTION]... [FILE]...

DESCRIPTION
       Write each FILE to standard output, with line numbers added.

       With no FILE, or when FILE is -, read standard input.

       Mandatory arguments to long options are mandatory for short options too.

       -b, --body-numbering=STYLE
              use STYLE for numbering body lines

       -d, --section-delimiter=CC
              use CC for logical page delimiters

       -f, --footer-numbering=STYLE
              use STYLE for numbering footer lines

       -h, --header-numbering=STYLE
              use STYLE for numbering header lines

       -i, --line-increment=NUMBER
              line number increment at each line

       -l, --join-blank-lines=NUMBER
              group of NUMBER empty lines counted as one

       -n, --number-format=FORMAT
              insert line numbers according to FORMAT

       -p, --no-renumber
              do not reset line numbers for each section

       -s, --number-separator=STRING
              add STRING after (possible) line number

       -v, --starting-line-number=NUMBER
              first line number for each section

       -w, --number-width=NUMBER
              use NUMBER columns for line numbers

       --help display this help and exit

       --version
              output version information and exit

       By  default,  selects  -v1 -i1 -l1 -sTAB -w6 -nrn -hn -bt -fn.  CC are two delimiter characters used to construct logical
       page delimiters, a missing second character implies :.  Type \\ for \.  STYLE is one of:

       a      number all lines

       t      number only nonempty lines

       n      number no lines

       pBRE   number only lines that contain a match for the basic regular expression, BRE

       FORMAT is one of:

       ln     left justified, no leading zeros

       rn     right justified, no leading zeros

       rz     right justified, leading zeros

AUTHOR
       Written by Scott Bartram and David MacKenzie.

<!-- 30b0cf8a-458a-435b-a2e0-993472636e53 <=< ACCEPT -->REPORTING BUGS
       GNU coreutils online help: &amp;lt;http://www.gnu.org/software/coreutils/&amp;gt;
       Report nl translation bugs to &amp;lt;http://translationproject.org/team/&amp;gt;

COPYRIGHT
       Copyright   ©   2016   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3    or    later
       &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.<!-- ACCEPT >=> 30b0cf8a-458a-435b-a2e0-993472636e53 -->

SEE ALSO
       Full documentation at: &amp;lt;http://www.gnu.org/software/coreutils/nl&amp;gt;
       or available locally via: info '(coreutils) nl invocation'

GNU coreutils 8.26                                        November 2016                                                    NL(1)
NM(1)                                                 GNU Development Tools                                                NM(1)

NAME
       nm - list symbols from object files

SYNOPSIS
       nm [-A|-o|--print-file-name] [-a|--debug-syms]
          [-B|--format=bsd] [-C|--demangle[=style]]
          [-D|--dynamic] [-fformat|--format=format]
          [-g|--extern-only] [-h|--help]
          [-l|--line-numbers] [-n|-v|--numeric-sort]
          [-P|--portability] [-p|--no-sort]
          [-r|--reverse-sort] [-S|--print-size]
          [-s|--print-armap] [-t radix|--radix=radix]
          [-u|--undefined-only] [-V|--version]
          [-X 32_64] [--defined-only] [--no-demangle]
          [--plugin name] [--size-sort] [--special-syms]
          [--synthetic] [--target=bfdname]
          [objfile...]

DESCRIPTION
       GNU nm lists the symbols from object files objfile....  If no object files are listed as arguments, nm assumes the file
       a.out.

       For each symbol, nm shows:

       ·   The symbol value, in the radix selected by options (see below), or hexadecimal by default.

       ·   The symbol type.  At least the following types are used; others are, as well, depending on the object file format.
           If lowercase, the symbol is usually local; if uppercase, the symbol is global (external).  There are however a few
           lowercase symbols that are shown for special global symbols ("u", "v" and "w").

           "A" The symbol's value is absolute, and will not be changed by further linking.

           "B"
           "b" The symbol is in the uninitialized data section (known as BSS).

           "C" The symbol is common.  Common symbols are uninitialized data.  When linking, multiple common symbols may appear
               with the same name.  If the symbol is defined anywhere, the common symbols are treated as undefined references.

           "D"
           "d" The symbol is in the initialized data section.

           "G"
           "g" The symbol is in an initialized data section for small objects.  Some object file formats permit more efficient
               access to small data objects, such as a global int variable as opposed to a large global array.

           "i" For PE format files this indicates that the symbol is in a section specific to the implementation of DLLs.  For
               ELF format files this indicates that the symbol is an indirect function.  This is a GNU extension to the standard
               set of ELF symbol types.  It indicates a symbol which if referenced by a relocation does not evaluate to its
               address, but instead must be invoked at runtime.  The runtime execution will then return the value to be used in
               the relocation.

           "I" The symbol is an indirect reference to another symbol.

           "N" The symbol is a debugging symbol.

           "p" The symbols is in a stack unwind section.

           "R"
           "r" The symbol is in a read only data section.

           "S"
           "s" The symbol is in an uninitialized data section for small objects.

           "T"
           "t" The symbol is in the text (code) section.

           "U" The symbol is undefined.

           "u" The symbol is a unique global symbol.  This is a GNU extension to the standard set of ELF symbol bindings.  For
               such a symbol the dynamic linker will make sure that in the entire process there is just one symbol with this
               name and type in use.

           "V"
           "v" The symbol is a weak object.  When a weak defined symbol is linked with a normal defined symbol, the normal
               defined symbol is used with no error.  When a weak undefined symbol is linked and the symbol is not defined, the
               value of the weak symbol becomes zero with no error.  On some systems, uppercase indicates that a default value
               has been specified.

           "W"
           "w" The symbol is a weak symbol that has not been specifically tagged as a weak object symbol.  When a weak defined
               symbol is linked with a normal defined symbol, the normal defined symbol is used with no error.  When a weak
               undefined symbol is linked and the symbol is not defined, the value of the symbol is determined in a system-
               specific manner without error.  On some systems, uppercase indicates that a default value has been specified.

           "-" The symbol is a stabs symbol in an a.out object file.  In this case, the next values printed are the stabs other
               field, the stabs desc field, and the stab type.  Stabs symbols are used to hold debugging information.

           "?" The symbol type is unknown, or object file format specific.

       ·   The symbol name.

OPTIONS
       The long and short forms of options, shown here as alternatives, are equivalent.

       -A
       -o
       --print-file-name
           Precede each symbol by the name of the input file (or archive member) in which it was found, rather than identifying
           the input file once only, before all of its symbols.

       -a
       --debug-syms
           Display all symbols, even debugger-only symbols; normally these are not listed.

       -B  The same as --format=bsd (for compatibility with the MIPS nm).

       -C
       --demangle[=style]
           Decode (demangle) low-level symbol names into user-level names.  Besides removing any initial underscore prepended by
           the system, this makes C++ function names readable. Different compilers have different mangling styles. The optional
           demangling style argument can be used to choose an appropriate demangling style for your compiler.

       --no-demangle
           Do not demangle low-level symbol names.  This is the default.

       -D
       --dynamic
           Display the dynamic symbols rather than the normal symbols.  This is only meaningful for dynamic objects, such as
           certain types of shared libraries.

       -f format
       --format=format
           Use the output format format, which can be "bsd", "sysv", or "posix".  The default is "bsd".  Only the first
           character of format is significant; it can be either upper or lower case.

       -g
       --extern-only
           Display only external symbols.

       -h
       --help
           Show a summary of the options to nm and exit.

       -l
       --line-numbers
           For each symbol, use debugging information to try to find a filename and line number.  For a defined symbol, look for
           the line number of the address of the symbol.  For an undefined symbol, look for the line number of a relocation
           entry which refers to the symbol.  If line number information can be found, print it after the other symbol
           information.

       -n
       -v
       --numeric-sort
           Sort symbols numerically by their addresses, rather than alphabetically by their names.

       -p
       --no-sort
           Do not bother to sort the symbols in any order; print them in the order encountered.

       -P
       --portability
           Use the POSIX.2 standard output format instead of the default format.  Equivalent to -f posix.

       -r
       --reverse-sort
           Reverse the order of the sort (whether numeric or alphabetic); let the last come first.

       -S
       --print-size
           Print both value and size of defined symbols for the "bsd" output style.  This option has no effect for object
           formats that do not record symbol sizes, unless --size-sort is also used in which case a calculated size is
           displayed.

       -s
       --print-armap
           When listing symbols from archive members, include the index: a mapping (stored in the archive by ar or ranlib) of
           which modules contain definitions for which names.

       -t radix
       --radix=radix
           Use radix as the radix for printing the symbol values.  It must be d for decimal, o for octal, or x for hexadecimal.

       -u
       --undefined-only
           Display only undefined symbols (those external to each object file).

       -V
       --version
           Show the version number of nm and exit.

       -X  This option is ignored for compatibility with the AIX version of nm.  It takes one parameter which must be the string
           32_64.  The default mode of AIX nm corresponds to -X 32, which is not supported by GNU nm.

       --defined-only
           Display only defined symbols for each object file.

       --plugin name
           Load the plugin called name to add support for extra target types.  This option is only available if the toolchain
           has been built with plugin support enabled.

       --size-sort
           Sort symbols by size.  For ELF objects symbol sizes are read from the ELF, for other object types the symbol sizes
           are computed as the difference between the value of the symbol and the value of the symbol with the next higher
           value.  If the "bsd" output format is used the size of the symbol is printed, rather than the value, and -S must be
           used in order both size and value to be printed.

       --special-syms
           Display symbols which have a target-specific special meaning.  These symbols are usually used by the target for some
           special processing and are not normally helpful when included in the normal symbol lists.  For example for ARM
           targets this option would skip the mapping symbols used to mark transitions between ARM code, THUMB code and data.

       --synthetic
           Include synthetic symbols in the output.  These are special symbols created by the linker for various purposes.  They
           are not shown by default since they are not part of the binary's original source code.

       --target=bfdname
           Specify an object code format other than your system's default format.

       @file
           Read command-line options from file.  The options read are inserted in place of the original @file option.  If file
           does not exist, or cannot be read, then the option will be treated literally, and not removed.

           Options in file are separated by whitespace.  A whitespace character may be included in an option by surrounding the
           entire option in either single or double quotes.  Any character (including a backslash) may be included by prefixing
           the character to be included with a backslash.  The file may itself contain additional @file options; any such
           options will be processed recursively.

SEE ALSO
       ar(1), objdump(1), ranlib(1), and the Info entries for binutils.

COPYRIGHT
       Copyright (c) 1991-2016 Free Software Foundation, Inc.

       Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation
       License, Version 1.3 or any later version published by the Free Software Foundation; with no Invariant Sections, with no
       Front-Cover Texts, and with no Back-Cover Texts.  A copy of the license is included in the section entitled "GNU Free
       Documentation License".

binutils-2.27                                              2016-08-06                                                      NM(1)
NOHUP(1)                                                  User Commands                                                 NOHUP(1)

NAME
       nohup - run a command immune to hangups, with output to a non-tty

SYNOPSIS
       nohup COMMAND [ARG]...
       nohup OPTION

DESCRIPTION
       Run COMMAND, ignoring hangup signals.

       --help display this help and exit

       --version
              output version information and exit

       If standard input is a terminal, redirect it from an unreadable file.  If standard output is a terminal, append output to
       'nohup.out' if possible, '$HOME/nohup.out' otherwise.  If standard error is a terminal, redirect it to  standard  output.
       To save output to FILE, use 'nohup COMMAND &amp;gt; FILE'.

       NOTE: your shell may have its own version of nohup, which usually supersedes the version described here.  Please refer to
       your shell's documentation for details about the options it supports.

AUTHOR
       Written by Jim Meyering.

<!-- 30b0cf8a-458a-435b-a2e0-993472636e53 <=< ACCEPT -->REPORTING BUGS
       GNU coreutils online help: &amp;lt;http://www.gnu.org/software/coreutils/&amp;gt;
       Report nohup translation bugs to &amp;lt;http://translationproject.org/team/&amp;gt;

COPYRIGHT
       Copyright   ©   2016   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3    or    later
       &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.<!-- ACCEPT >=> 30b0cf8a-458a-435b-a2e0-993472636e53 -->

SEE ALSO
       Full documentation at: &amp;lt;http://www.gnu.org/software/coreutils/nohup&amp;gt;
       or available locally via: info '(coreutils) nohup invocation'

GNU coreutils 8.26                                        November 2016                                                 NOHUP(1)
OD(1)                                                     User Commands                                                    OD(1)

NAME
       od - dump files in octal and other formats

SYNOPSIS
       od [OPTION]... [FILE]...
       od [-abcdfilosx]... [FILE] [[+]OFFSET[.][b]]
       od --traditional [OPTION]... [FILE] [[+]OFFSET[.][b] [+][LABEL][.][b]]

DESCRIPTION
       Write  an  unambiguous representation, octal bytes by default, of FILE to standard output.  With more than one FILE argu‐
       ment, concatenate them in the listed order to form the input.

       With no FILE, or when FILE is -, read standard input.

       If first and second call formats both apply, the second format is assumed if the last operand begins with + or (if  there
       are  2  operands) a digit.  An OFFSET operand means -j OFFSET.  LABEL is the pseudo-address at first byte printed, incre‐
       mented when dump is progressing.  For OFFSET and LABEL, a 0x or 0X prefix indicates hexadecimal; suffixes may  be  .  for
       octal and b for multiply by 512.

       Mandatory arguments to long options are mandatory for short options too.

       -A, --address-radix=RADIX
              output format for file offsets; RADIX is one of [doxn], for Decimal, Octal, Hex or None

       --endian={big|little}
              swap input bytes according the specified order

       -j, --skip-bytes=BYTES
              skip BYTES input bytes first

       -N, --read-bytes=BYTES
              limit dump to BYTES input bytes

       -S BYTES, --strings[=BYTES]
              output strings of at least BYTES graphic chars; 3 is implied when BYTES is not specified

       -t, --format=TYPE
              select output format or formats

       -v, --output-duplicates
              do not use * to mark line suppression

       -w[BYTES], --width[=BYTES]
              output BYTES bytes per output line; 32 is implied when BYTES is not specified

       --traditional
              accept arguments in third form above

       --help display this help and exit

       --version
              output version information and exit

   Traditional format specifications may be intermixed; they accumulate:
       -a     same as -t a,  select named characters, ignoring high-order bit

       -b     same as -t o1, select octal bytes

       -c     same as -t c,  select printable characters or backslash escapes

       -d     same as -t u2, select unsigned decimal 2-byte units

       -f     same as -t fF, select floats

       -i     same as -t dI, select decimal ints

       -l     same as -t dL, select decimal longs

       -o     same as -t o2, select octal 2-byte units

       -s     same as -t d2, select decimal 2-byte units

       -x     same as -t x2, select hexadecimal 2-byte units

   TYPE is made up of one or more of these specifications:
       a      named character, ignoring high-order bit

       c      printable character or backslash escape

       d[SIZE]
              signed decimal, SIZE bytes per integer

       f[SIZE]
              floating point, SIZE bytes per integer

       o[SIZE]
              octal, SIZE bytes per integer

       u[SIZE]
              unsigned decimal, SIZE bytes per integer

       x[SIZE]
              hexadecimal, SIZE bytes per integer

       SIZE  is  a number.  For TYPE in [doux], SIZE may also be C for sizeof(char), S for sizeof(short), I for sizeof(int) or L
       for sizeof(long).  If TYPE is f, SIZE may also be F for sizeof(float), D for sizeof(double) or L for sizeof(long double).

       Adding a z suffix to any type displays printable characters at the end of each output line.

   BYTES is hex with 0x or 0X prefix, and may have a multiplier suffix:
       b      512

       KB     1000

       K      1024

       MB     1000*1000

       M      1024*1024

       and so on for G, T, P, E, Z, Y.

EXAMPLES
       od -A x -t x1z -v
              Display hexdump format output

       od -A o -t oS -w16
              The default output format used by od

AUTHOR
       Written by Jim Meyering.

<!-- 30b0cf8a-458a-435b-a2e0-993472636e53 <=< ACCEPT -->REPORTING BUGS
       GNU coreutils online help: &amp;lt;http://www.gnu.org/software/coreutils/&amp;gt;
       Report od translation bugs to &amp;lt;http://translationproject.org/team/&amp;gt;

COPYRIGHT
       Copyright   ©   2016   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3    or    later
       &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.<!-- ACCEPT >=> 30b0cf8a-458a-435b-a2e0-993472636e53 -->

SEE ALSO
       Full documentation at: &amp;lt;http://www.gnu.org/software/coreutils/od&amp;gt;
       or available locally via: info '(coreutils) od invocation'

GNU coreutils 8.26                                        November 2016                                                    OD(1)
PASTE(1)                                                  User Commands                                                 PASTE(1)

NAME
       paste - merge lines of files

SYNOPSIS
       paste [OPTION]... [FILE]...

DESCRIPTION
       Write lines consisting of the sequentially corresponding lines from each FILE, separated by TABs, to standard output.

       With no FILE, or when FILE is -, read standard input.

       Mandatory arguments to long options are mandatory for short options too.

       -d, --delimiters=LIST
              reuse characters from LIST instead of TABs

       -s, --serial
              paste one file at a time instead of in parallel

       -z, --zero-terminated
              line delimiter is NUL, not newline

       --help display this help and exit

       --version
              output version information and exit

AUTHOR
       Written by David M. Ihnat and David MacKenzie.

REPORTING BUGS
       GNU coreutils online help: &amp;lt;http://www.gnu.org/software/coreutils/&amp;gt;
       Report paste translation bugs to &amp;lt;http://translationproject.org/team/&amp;gt;

COPYRIGHT
       Copyright    ©    2016   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3   or   later
       &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       Full documentation at: &amp;lt;http://www.gnu.org/software/coreutils/paste&amp;gt;
       or available locally via: info '(coreutils) paste invocation'

GNU coreutils 8.26                                        November 2016                                                 PASTE(1)
PATCH(1)                                             General Commands Manual                                            PATCH(1)

NAME
       patch - apply a diff file to an original

SYNOPSIS
       patch [options] [originalfile [patchfile]]

       but usually just

       patch -pnum &amp;lt;patchfile

DESCRIPTION
       patch takes a patch file patchfile containing a difference listing produced by the diff program and applies those differ‐
       ences to one or more original files, producing patched versions.  Normally the patched versions are put in place  of  the
       originals.   Backups  can be made; see the -b or --backup option.  The names of the files to be patched are usually taken
       from the patch file, but if there's just one file to be patched it can be specified on the command line as originalfile.

       Upon startup, patch attempts to determine the type of the diff listing, unless overruled by a -c (--context), -e  (--ed),
       -n  (--normal), or -u (--unified) option.  Context diffs (old-style, new-style, and unified) and normal diffs are applied
       by the patch program itself, while ed diffs are simply fed to the ed(1) editor via a pipe.

       patch tries to skip any leading garbage, apply the diff, and then skip any trailing garbage.   Thus  you  could  feed  an
       article  or  message containing a diff listing to patch, and it should work.  If the entire diff is indented by a consis‐
       tent amount, if lines end in CRLF, or if a diff is encapsulated one or more times by prepending "- "  to  lines  starting
       with  "-" as specified by Internet RFC 934, this is taken into account.  After removing indenting or encapsulation, lines
       beginning with # are ignored, as they are considered to be comments.

       With context diffs, and to a lesser extent with normal diffs, patch can detect when the line  numbers  mentioned  in  the
       patch  are incorrect, and attempts to find the correct place to apply each hunk of the patch.  As a first guess, it takes
       the line number mentioned for the hunk, plus or minus any offset used in applying the previous hunk.  If that is not  the
       correct  place, patch scans both forwards and backwards for a set of lines matching the context given in the hunk.  First
       patch looks for a place where all lines of the context match.  If no such place is found, and it's a  context  diff,  and
       the  maximum  fuzz factor is set to 1 or more, then another scan takes place ignoring the first and last line of context.
       If that fails, and the maximum fuzz factor is set to 2 or more, the first two and last two lines of context are  ignored,
       and another scan is made.  (The default maximum fuzz factor is 2.)

       Hunks  with  less  prefix  context than suffix context (after applying fuzz) must apply at the start of the file if their
       first line number is 1.  Hunks with more prefix context than suffix context (after applying fuzz) must apply at  the  end
       of the file.

       If  patch cannot find a place to install that hunk of the patch, it puts the hunk out to a reject file, which normally is
       the name of the output file plus a .rej suffix, or # if .rej would generate a file name that is too long (if even append‐
       ing the single character # makes the file name too long, then # replaces the file name's last character).

       The  rejected hunk comes out in unified or context diff format.  If the input was a normal diff, many of the contexts are
       simply null.  The line numbers on the hunks in the reject file may be different than in the patch file: they reflect  the
       approximate location patch thinks the failed hunks belong in the new file rather than the old one.

       As each hunk is completed, you are told if the hunk failed, and if so which line (in the new file) patch thought the hunk
       should go on.  If the hunk is installed at a different line from the line number specified in the diff, you are told  the
       offset.   A  single  large offset may indicate that a hunk was installed in the wrong place.  You are also told if a fuzz
       factor was used to make the match, in which case you should also be slightly suspicious.   If  the  --verbose  option  is
       given, you are also told about hunks that match exactly.

       If  no  original  file origfile is specified on the command line, patch tries to figure out from the leading garbage what
       the name of the file to edit is, using the following rules.

       First, patch takes an ordered list of candidate file names as follows:

        · If the header is that of a context diff, patch takes the old and new file names in the header.  A name is  ignored  if
          it does not have enough slashes to satisfy the -pnum or --strip=num option.  The name /dev/null is also ignored.

        · If  there  is an Index: line in the leading garbage and if either the old and new names are both absent or if patch is
          conforming to POSIX, patch takes the name in the Index: line.

        · For the purpose of the following rules, the candidate file names are considered to be in the order (old, new,  index),
          regardless of the order that they appear in the header.

       Then patch selects a file name from the candidate list as follows:

        · If some of the named files exist, patch selects the first name if conforming to POSIX, and the best name otherwise.

        · If  patch  is not ignoring RCS, ClearCase, Perforce, and SCCS (see the -g num or --get=num option), and no named files
          exist but an RCS, ClearCase, Perforce, or SCCS master is found, patch selects  the  first  named  file  with  an  RCS,
          ClearCase, Perforce, or SCCS master.

        · If  no  named  files  exist, no RCS, ClearCase, Perforce, or SCCS master was found, some names are given, patch is not
          conforming to POSIX, and the patch appears to create a file, patch selects the best name requiring the creation of the
          fewest directories.

        · If  no file name results from the above heuristics, you are asked for the name of the file to patch, and patch selects
          that name.

       To determine the best of a nonempty list of file names, patch first takes all the names with the fewest path name  compo‐
       nents;  of those, it then takes all the names with the shortest basename; of those, it then takes all the shortest names;
       finally, it takes the first remaining name.

       Additionally, if the leading garbage contains a Prereq: line, patch takes the first  word  from  the  prerequisites  line
       (normally  a  version number) and checks the original file to see if that word can be found.  If not, patch asks for con‐
       firmation before proceeding.

       The upshot of all this is that you should be able to say, while in a news interface, something like the following:

              | patch -d /usr/src/local/blurfl

       and patch a file in the blurfl directory directly from the article containing the patch.

       If the patch file contains more than one patch, patch tries to apply each of them as if they  came  from  separate  patch
       files.  This means, among other things, that it is assumed that the name of the file to patch must be determined for each
       diff listing, and that the garbage before each diff listing contains interesting things such as file names  and  revision
       level, as mentioned previously.

OPTIONS
       -b  or  --backup
          Make  backup  files.  That is, when patching a file, rename or copy the original instead of removing it.  When backing
          up a file that does not exist, an empty, unreadable backup file is created as a placeholder to represent the  nonexis‐
          tent file.  See the -V or --version-control option for details about how backup file names are determined.

       --backup-if-mismatch
          Back  up  a file if the patch does not match the file exactly and if backups are not otherwise requested.  This is the
          default unless patch is conforming to POSIX.

       --no-backup-if-mismatch
          Do not back up a file if the patch does not match the file exactly and if backups are not otherwise  requested.   This
          is the default if patch is conforming to POSIX.

       -B pref  or  --prefix=pref
          Use  the  simple  method  to  determine  backup file names (see the -V method or --version-control method option), and
          append pref to a file name when generating its backup file name.  For example, with -B /junk/ the simple  backup  file
          name for src/patch/util.c is /junk/src/patch/util.c.

       --binary
          Write  all  files  in  binary  mode, except for standard output and /dev/tty.  When reading, disable the heuristic for
          transforming CRLF line endings into LF line endings.  This option is needed on POSIX  systems  when  applying  patches
          generated on non-POSIX systems to non-POSIX files.  (On POSIX systems, file reads and writes never transform line end‐
          ings. On Windows, reads and writes do  transform  line  endings  by  default,  and  patches  should  be  generated  by
          diff --binary when line endings are significant.)

       -c  or  --context
          Interpret the patch file as a ordinary context diff.

       -d dir  or  --directory=dir
          Change to the directory dir immediately, before doing anything else.

       -D define  or  --ifdef=define
          Use the #ifdef ... #endif construct to mark changes, with define as the differentiating symbol.

       --dry-run
          Print the results of applying the patches without actually changing any files.

       -e  or  --ed
          Interpret the patch file as an ed script.

       -E  or  --remove-empty-files
          Remove  output  files  that are empty after the patches have been applied.  Normally this option is unnecessary, since
          patch can examine the time stamps on the header to determine whether a file should exist after patching.  However,  if
          the  input  is not a context diff or if patch is conforming to POSIX, patch does not remove empty patched files unless
          this option is given.  When patch removes a file, it also attempts to remove any empty ancestor directories.

       -f  or  --force
          Assume that the user knows exactly what he or she is doing, and do not ask any questions.  Skip patches whose  headers
          do  not  say  which file is to be patched; patch files even though they have the wrong version for the Prereq: line in
          the patch; and assume that patches are not reversed even if they look like they are.  This option  does  not  suppress
          commentary; use -s for that.

       -F num  or  --fuzz=num
          Set  the  maximum  fuzz factor.  This option only applies to diffs that have context, and causes patch to ignore up to
          that many lines of context in looking for places to install a hunk.  Note that a larger fuzz factor increases the odds
          of  a faulty patch.  The default fuzz factor is 2.  A fuzz factor greater than or equal to the number of lines of con‐
          text in the context diff, ordinarily 3, ignores all context.

       -g num  or  --get=num
          This option controls patch's actions when a file is under RCS or SCCS control, and does not exist or is read-only  and
          matches the default version, or when a file is under ClearCase or Perforce control and does not exist.  If num is pos‐
          itive, patch gets (or checks out) the file from the revision control system; if zero, patch  ignores  RCS,  ClearCase,
          Perforce,  and  SCCS  and  does  not  get the file; and if negative, patch asks the user whether to get the file.  The
          default value of this option is given by the value of the PATCH_GET environment variable if it is  set;  if  not,  the
          default value is zero.

       --help
          Print a summary of options and exit.

       -i patchfile  or  --input=patchfile
          Read the patch from patchfile.  If patchfile is -, read from standard input, the default.

       -l  or  --ignore-whitespace
          Match  patterns loosely, in case tabs or spaces have been munged in your files.  Any sequence of one or more blanks in
          the patch file matches any sequence in the original file, and sequences of blanks at the ends of  lines  are  ignored.
          Normal characters must still match exactly.  Each line of the context must still match a line in the original file.

       --merge or --merge=merge or --merge=diff3
          Merge  a  patch file into the original files similar to diff3(1) or merge(1).  If a conflict is found, patch outputs a
          warning and brackets the conflict with &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; and &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; lines.  A typical conflict will look like this:

              &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;
              lines from the original file
              |||||||
              original lines from the patch
              =======
              new lines from the patch
              &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;

          The optional argument of --merge determines the output format for conflicts: the diff3 format shows the  |||||||  sec‐
          tion  with  the  original lines from the patch; in the merge format, this section is missing.  The merge format is the
          default.

          This option implies --forward and does not take the --fuzz=num option into account.

       -n  or  --normal
          Interpret the patch file as a normal diff.

       -N  or  --forward
          When a patch does not apply, patch usually checks if the patch looks like it has been reversed.  The --forward  option
          prevents that.  See also -R.

       -o outfile  or  --output=outfile
          Send  output  to outfile instead of patching files in place.  Do not use this option if outfile is one of the files to
          be patched.  When outfile is -, send output to standard output, and send any messages that would usually go  to  stan‐
          dard output to standard error.

       -pnum  or  --strip=num
          Strip  the  smallest prefix containing num leading slashes from each file name found in the patch file.  A sequence of
          one or more adjacent slashes is counted as a single slash.  This controls how file names found in the patch  file  are
          treated,  in  case  you keep your files in a different directory than the person who sent out the patch.  For example,
          supposing the file name in the patch file was

          /u/howard/src/blurfl/blurfl.c

       setting -p0 gives the entire file name unmodified, -p1 gives

          u/howard/src/blurfl/blurfl.c

       without the leading slash, -p4 gives

          blurfl/blurfl.c

       and not specifying -p at all just gives you blurfl.c.  Whatever you end up with is  looked  for  either  in  the  current
       directory, or the directory specified by the -d option.

       --posix
          Conform more strictly to the POSIX standard, as follows.

           · Take the first existing file from the list (old, new, index) when intuiting file names from diff headers.

           · Do not remove files that are empty after patching.

           · Do not ask whether to get files from RCS, ClearCase, Perforce, or SCCS.

           · Require that all options precede the files in the command line.

           · Do not backup files when there is a mismatch.

       --quoting-style=word
          Use style word to quote output names.  The word should be one of the following:

          literal
                 Output names as-is.

          shell  Quote names for the shell if they contain shell metacharacters or would cause ambiguous output.

          shell-always
                 Quote names for the shell, even if they would normally not require quoting.

          c      Quote names as for a C language string.

          escape Quote as with c except omit the surrounding double-quote characters.

          You  can specify the default value of the --quoting-style option with the environment variable QUOTING_STYLE.  If that
          environment variable is not set, the default value is shell.

       -r rejectfile  or  --reject-file=rejectfile
          Put rejects into rejectfile instead of the default .rej file.  When rejectfile is -, discard rejects.

       -R  or  --reverse
          Assume that this patch was created with the old and new files swapped.  (Yes, I'm afraid that  does  happen  occasion‐
          ally,  human  nature being what it is.)  patch attempts to swap each hunk around before applying it.  Rejects come out
          in the swapped format.  The -R option does not work with ed diff scripts because there is too  little  information  to
          reconstruct the reverse operation.

          If  the first hunk of a patch fails, patch reverses the hunk to see if it can be applied that way.  If it can, you are
          asked if you want to have the -R option set.  If it can't, the patch continues to be applied  normally.   (Note:  this
          method  cannot  detect  a  reversed patch if it is a normal diff and if the first command is an append (i.e. it should
          have been a delete) since appends always succeed, due to the fact that a null context matches anywhere.  Luckily, most
          patches  add  or change lines rather than delete them, so most reversed normal diffs begin with a delete, which fails,
          triggering the heuristic.)

       --read-only=behavior
          Behave as requested when trying to modify a read-only file: ignore the potential problem, warn about it (the default),
          or fail.

       --reject-format=format
          Produce  reject  files  in the specified format (either context or unified).  Without this option, rejected hunks come
          out in unified diff format if the input patch was of that format, otherwise in ordinary context diff form.

       -s  or  --silent  or  --quiet
          Work silently, unless an error occurs.

       --follow-symlinks
          When looking for input files, follow symbolic links.  Replaces the symbolic links, instead of modifying the files  the
          symbolic  links point to.  Git-style patches to symbolic links will no longer apply.  This option exists for backwards
          compatibility with previous versions of patch; its use is discouraged.

       -t  or  --batch
          Suppress questions like -f, but make some different assumptions: skip patches whose headers do not contain file  names
          (the  same as -f); skip patches for which the file has the wrong version for the Prereq: line in the patch; and assume
          that patches are reversed if they look like they are.

       -T  or  --set-time
          Set the modification and access times of patched files from time stamps given in context diff headers.  Unless  speci‐
          fied in the time stamps, assume that the context diff headers use local time.

          Use  of  this  option  with time stamps that do not include time zones is not recommended, because patches using local
          time cannot easily be used by people in other time zones, and because local  time  stamps  are  ambiguous  when  local
          clocks move backwards during daylight-saving time adjustments.  Make sure that time stamps include time zones, or gen‐
          erate patches with UTC and use the -Z or --set-utc option instead.

       -u  or  --unified
          Interpret the patch file as a unified context diff.

       -v  or  --version
          Print out patch's revision header and patch level, and exit.

       -V method  or  --version-control=method
          Use method to determine backup file names.  The method can also be given by the PATCH_VERSION_CONTROL (or,  if  that's
          not  set,  the  VERSION_CONTROL) environment variable, which is overridden by this option.  The method does not affect
          whether backup files are made; it affects only the names of any backup files that are made.

          The value of method is like the GNU Emacs `version-control' variable; patch also recognizes  synonyms  that  are  more
          descriptive.  The valid values for method are (unique abbreviations are accepted):

          existing  or  nil
             Make numbered backups of files that already have them, otherwise simple backups.  This is the default.

          numbered  or  t
             Make numbered backups.  The numbered backup file name for F is F.~N~ where N is the version number.

          simple  or  never
             Make  simple  backups.   The -B or --prefix, -Y or --basename-prefix, and -z or --suffix options specify the simple
             backup file name.  If none of these options are given, then a simple backup suffix is used; it is the value of  the
             SIMPLE_BACKUP_SUFFIX environment variable if set, and is .orig otherwise.

          With  numbered  or  simple  backups, if the backup file name is too long, the backup suffix ~ is used instead; if even
          appending ~ would make the name too long, then ~ replaces the last character of the file name.

       --verbose
          Output extra information about the work being done.

       -x num  or  --debug=num
          Set internal debugging flags of interest only to patch patchers.

       -Y pref  or  --basename-prefix=pref
          Use the simple method to determine backup file names (see the -V method or --version-control method option), and  pre‐
          fix  pref  to the basename of a file name when generating its backup file name.  For example, with -Y .del/ the simple
          backup file name for src/patch/util.c is src/patch/.del/util.c.

       -z suffix  or  --suffix=suffix
          Use the simple method to determine backup file names (see the -V method or --version-control method option),  and  use
          suffix as the suffix.  For example, with -z - the backup file name for src/patch/util.c is src/patch/util.c-.

       -Z  or  --set-utc
          Set  the  modification and access times of patched files from time stamps given in context diff headers. Unless speci‐
          fied in the time stamps, assume that the context diff headers use Coordinated Universal  Time  (UTC,  often  known  as
          GMT).  Also see the -T or --set-time option.

          The  -Z  or  --set-utc and -T or --set-time options normally refrain from setting a file's time if the file's original
          time does not match the time given in the patch header, or if its contents do not match the patch  exactly.   However,
          if the -f or --force option is given, the file time is set regardless.

          Due  to  the limitations of diff output format, these options cannot update the times of files whose contents have not
          changed.  Also, if you use these options, you should remove (e.g. with  make clean)  all  files  that  depend  on  the
          patched files, so that later invocations of make do not get confused by the patched files' times.

ENVIRONMENT
       PATCH_GET
          This  specifies  whether  patch gets missing or read-only files from RCS, ClearCase, Perforce, or SCCS by default; see
          the -g or --get option.

       POSIXLY_CORRECT
          If set, patch conforms more strictly to the POSIX standard by default: see the --posix option.

       QUOTING_STYLE
          Default value of the --quoting-style option.

       SIMPLE_BACKUP_SUFFIX
          Extension to use for simple backup file names instead of .orig.

       TMPDIR, TMP, TEMP
          Directory to put temporary files in; patch uses the first environment variable in this list that is set.  If none  are
          set, the default is system-dependent; it is normally /tmp on Unix hosts.

       VERSION_CONTROL or PATCH_VERSION_CONTROL
          Selects version control style; see the -v or --version-control option.

FILES
       $TMPDIR/p*
          temporary files

       /dev/tty
          controlling terminal; used to get answers to questions asked of the user

SEE ALSO
       diff(1), ed(1), merge(1).

       Marshall   T.   Rose   and   Einar   A.  Stefferud,  Proposed  Standard  for  Message  Encapsulation,  Internet  RFC  934
       &amp;lt;URL:ftp://ftp.isi.edu/in-notes/rfc934.txt&amp;gt; (1985-01).

NOTES FOR PATCH SENDERS
       There are several things you should bear in mind if you are going to be sending out patches.

       Create your patch systematically.  A good method is the command diff -Naur old new where old and new identify the old and
       new directories.  The names old and new should not contain any slashes.  The diff command's headers should have dates and
       times in Universal Time using traditional Unix format, so that patch recipients can use the -Z or --set-utc option.  Here
       is an example command, using Bourne shell syntax:

              LC_ALL=C TZ=UTC0 diff -Naur gcc-2.7 gcc-2.8

       Tell  your  recipients  how  to apply the patch by telling them which directory to cd to, and which patch options to use.
       The option string -Np1 is recommended.  Test your procedure by pretending to be a recipient and applying your patch to  a
       copy of the original files.

       You  can  save  people a lot of grief by keeping a patchlevel.h file which is patched to increment the patch level as the
       first diff in the patch file you send out.  If you put a Prereq: line in with the patch, it won't let them apply  patches
       out of order without some warning.

       You can create a file by sending out a diff that compares /dev/null or an empty file dated the Epoch (1970-01-01 00:00:00
       UTC) to the file you want to create.  This only works if the file you want to create doesn't exist already in the  target
       directory.   Conversely, you can remove a file by sending out a context diff that compares the file to be deleted with an
       empty file  dated  the  Epoch.   The  file  will  be  removed  unless  patch  is  conforming  to  POSIX  and  the  -E  or
       --remove-empty-files  option  is  not  given.  An easy way to generate patches that create and remove files is to use GNU
       diff's -N or --new-file option.

       If the recipient is supposed to use the -pN option, do not send output that looks like this:

              diff -Naur v2.0.29/prog/README prog/README
              --- v2.0.29/prog/README   Mon Mar 10 15:13:12 1997
              +++ prog/README   Mon Mar 17 14:58:22 1997

       because the two file names have different numbers of slashes, and different versions of patch interpret  the  file  names
       differently.  To avoid confusion, send output that looks like this instead:

              diff -Naur v2.0.29/prog/README v2.0.30/prog/README
              --- v2.0.29/prog/README   Mon Mar 10 15:13:12 1997
              +++ v2.0.30/prog/README   Mon Mar 17 14:58:22 1997

       Avoid  sending  patches  that  compare backup file names like README.orig, since this might confuse patch into patching a
       backup file instead of the real file.  Instead, send patches that compare the same base file names in different  directo‐
       ries, e.g. old/README and new/README.

       Take care not to send out reversed patches, since it makes people wonder whether they already applied the patch.

       Try not to have your patch modify derived files (e.g. the file configure where there is a line configure: configure.in in
       your makefile), since the recipient should be able to regenerate the derived files anyway.  If you  must  send  diffs  of
       derived  files,  generate  the  diffs using UTC, have the recipients apply the patch with the -Z or --set-utc option, and
       have them remove any unpatched files that depend on patched files (e.g. with make clean).

       While you may be able to get away with putting 582 diff listings into one file, it may be wiser to group related  patches
       into separate files in case something goes haywire.

DIAGNOSTICS
       Diagnostics generally indicate that patch couldn't parse your patch file.

       If  the --verbose option is given, the message Hmm... indicates that there is unprocessed text in the patch file and that
       patch is attempting to intuit whether there is a patch in that text and, if so, what kind of patch it is.

       patch's exit status is 0 if all hunks are applied successfully, 1 if some hunks cannot be applied  or  there  were  merge
       conflicts,  and  2  if  there is more serious trouble.  When applying a set of patches in a loop it behooves you to check
       this exit status so you don't apply a later patch to a partially patched file.

CAVEATS
       Context diffs cannot reliably represent the creation or deletion of empty files, empty directories, or special files such
       as symbolic links.  Nor can they represent changes to file metadata like ownership, permissions, or whether one file is a
       hard link to another.  If changes like these are also required, separate instructions (e.g. a shell script) to accomplish
       them should accompany the patch.

       patch cannot tell if the line numbers are off in an ed script, and can detect bad line numbers in a normal diff only when
       it finds a change or deletion.  A context diff using fuzz factor 3 may have the same problem.  You should probably  do  a
       context diff in these cases to see if the changes made sense.  Of course, compiling without errors is a pretty good indi‐
       cation that the patch worked, but not always.

       patch usually produces the correct results, even when it has to do a lot of guessing.  However, the results  are  guaran‐
       teed  to  be  correct only when the patch is applied to exactly the same version of the file that the patch was generated
       from.

COMPATIBILITY ISSUES
       The POSIX standard specifies behavior that differs from patch's traditional behavior.  You should be aware of these  dif‐
       ferences if you must interoperate with patch versions 2.1 and earlier, which do not conform to POSIX.

        · In  traditional  patch,  the -p option's operand was optional, and a bare -p was equivalent to -p0.  The -p option now
          requires an operand, and -p 0 is now equivalent to -p0.  For maximum compatibility, use options like -p0 and -p1.

          Also, traditional patch simply counted slashes when stripping path prefixes; patch  now  counts  pathname  components.
          That  is,  a  sequence  of  one or more adjacent slashes now counts as a single slash.  For maximum portability, avoid
          sending patches containing // in file names.

        · In traditional patch, backups were enabled by default.  This behavior is now enabled with the -b or --backup option.

          Conversely, in POSIX patch, backups are never made, even when there is a mismatch.  In GNU  patch,  this  behavior  is
          enabled  with  the --no-backup-if-mismatch option, or by conforming to POSIX with the --posix option or by setting the
          POSIXLY_CORRECT environment variable.

          The -b suffix option of traditional patch is equivalent to the -b -z suffix options of GNU patch.

        · Traditional patch used a complicated (and incompletely documented) method to intuit the name of the file to be patched
          from  the  patch  header.   This  method did not conform to POSIX, and had a few gotchas.  Now patch uses a different,
          equally complicated (but better documented) method that is optionally POSIX-conforming; we hope it has fewer  gotchas.
          The  two  methods  are  compatible  if the file names in the context diff header and the Index: line are all identical
          after prefix-stripping.  Your patch is normally compatible if each header's file names all contain the same number  of
          slashes.

        · When traditional patch asked the user a question, it sent the question to standard error and looked for an answer from
          the first file in the following list that was a terminal: standard error,  standard  output,  /dev/tty,  and  standard
          input.   Now  patch sends questions to standard output and gets answers from /dev/tty.  Defaults for some answers have
          been changed so that patch never goes into an infinite loop when using default answers.

        · Traditional patch exited with a status value that counted the number of bad hunks, or with status 1 if there was  real
          trouble.  Now patch exits with status 1 if some hunks failed, or with 2 if there was real trouble.

        · Limit  yourself  to  the following options when sending instructions meant to be executed by anyone running GNU patch,
          traditional patch, or a patch that conforms to POSIX.  Spaces are significant in the following list, and operands  are
          required.

             -c
             -d dir
             -D define
             -e
             -l
             -n
             -N
             -o outfile
             -pnum
             -R
             -r rejectfile

BUGS
       Please report bugs via email to &amp;lt;bug-patch@gnu.org&amp;gt;.

       If  code has been duplicated (for instance with #ifdef OLDCODE ... #else ... #endif), patch is incapable of patching both
       versions, and, if it works at all, will likely patch the wrong one, and tell you that it succeeded to boot.

       If you apply a patch you've already applied, patch thinks it is a reversed patch, and offers to un-apply the patch.  This
       could be construed as a feature.

       Computing  how  to merge a hunk is significantly harder than using the standard fuzzy algorithm.  Bigger hunks, more con‐
       text, a bigger offset from the original location, and a worse match all slow the algorithm down.

COPYING
       Copyright (C) 1984, 1985, 1986, 1988 Larry Wall.
       Copyright (C) 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,  2001,  2002,  2009  Free  Software
       Foundation, Inc.

       Permission  is  granted to make and distribute verbatim copies of this manual provided the copyright notice and this per‐
       mission notice are preserved on all copies.

       Permission is granted to copy and distribute modified versions of this manual under the conditions for verbatim  copying,
       provided  that  the entire resulting derived work is distributed under the terms of a permission notice identical to this
       one.

       Permission is granted to copy and distribute translations of this manual into another language, under  the  above  condi‐
       tions for modified versions, except that this permission notice may be included in translations approved by the copyright
       holders instead of in the original English.

AUTHORS
       Larry Wall wrote the original version of patch.  Paul Eggert removed patch's arbitrary limits; added support  for  binary
       files,  setting  file  times,  and deleting files; and made it conform better to POSIX.  Other contributors include Wayne
       Davison, who added unidiff support, and David MacKenzie, who added configuration and backup support.  Andreas  Grünbacher
       added support for merging.

GNU                                                                                                                     PATCH(1)
PATHCHK(1)                                                User Commands                                               PATHCHK(1)

NAME
       pathchk - check whether file names are valid or portable

SYNOPSIS
       pathchk [OPTION]... NAME...

DESCRIPTION
       Diagnose invalid or unportable file names.

       -p     check for most POSIX systems

       -P     check for empty names and leading "-"

       --portability
              check for all POSIX systems (equivalent to -p -P)

       --help display this help and exit

       --version
              output version information and exit

AUTHOR
       Written by Paul Eggert, David MacKenzie, and Jim Meyering.

REPORTING BUGS
       GNU coreutils online help: &amp;lt;http://www.gnu.org/software/coreutils/&amp;gt;
       Report pathchk translation bugs to &amp;lt;http://translationproject.org/team/&amp;gt;

COPYRIGHT
       Copyright    ©    2016   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3   or   later
       &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       Full documentation at: &amp;lt;http://www.gnu.org/software/coreutils/pathchk&amp;gt;
       or available locally via: info '(coreutils) pathchk invocation'

GNU coreutils 8.26                                        November 2016                                               PATHCHK(1)
PAX(1P)                                             POSIX Programmer's Manual                                            PAX(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->

NAME
       pax — portable archive interchange

SYNOPSIS
       pax [−dv] [−c|−n] [−H|−L] [−o options] [−f archive] [−s replstr]...
           [pattern...]

       pax −r[−c|−n] [−dikuv] [−H|−L] [−f archive] [−o options]... [−p string]...
           [−s replstr]... [pattern...]

       pax −w [−dituvX] [−H|−L] [−b blocksize] [[−a] [−f archive]] [−o options]...
           [−s replstr]... [−x format] [file...]

       pax −r −w [−diklntuvX] [−H|−L] [−o options]... [−p string]...
           [−s replstr]... [file...] directory

DESCRIPTION
       The  pax  utility  shall  read,  write, and write lists of the members of archive files and copy directory hierarchies. A
       variety of archive formats shall be supported; see the −x format option.

       The action to be taken depends on the presence of the −r and −w options. The four combinations of −r and −w are  referred
       to  as the four modes of operation: list, read, write, and copy modes, corresponding respectively to the four forms shown
       in the SYNOPSIS section.

       list      In list mode (when neither −r nor −w are specified), pax shall write the names of the members  of  the  archive
                 file  read  from  the  standard input, with pathnames matching the specified patterns, to standard output. If a
                 named file is of type directory, the file hierarchy rooted at that file shall be listed as well.

       read      In read mode (when −r is specified, but −w is not), pax shall extract the members of the archive file read from
                 the  standard input, with pathnames matching the specified patterns. If an extracted file is of type directory,
                 the file hierarchy rooted at that file shall be extracted as well. The extracted files shall  be  created  per‐
                 forming pathname resolution with the directory in which pax was invoked as the current working directory.

                 If an attempt is made to extract a directory when the directory already exists, this shall not be considered an
                 error. If an attempt is made to extract a FIFO when the FIFO already exists, this shall not  be  considered  an
                 error.

                 The  ownership,  access, and modification times, and file mode of the restored files are discussed under the −p
                 option.

       write     In write mode (when −w is specified, but −r is not), pax shall write the contents of the file operands  to  the
                 standard output in an archive format. If no file operands are specified, a list of files to copy, one per line,
                 shall be read from the standard input and each entry in this list shall be processed as if it had been  a  file
                 operand  on  the  command  line.  A file of type directory shall include all of the files in the file hierarchy
                 rooted at the file.

       copy      In copy mode (when both −r and −w are specified), pax shall copy the file operands to  the  destination  direc‐
                 tory.

                 If  no  file  operands  are  specified,  a list of files to copy, one per line, shall be read from the standard
                 input. A file of type directory shall include all of the files in the file hierarchy rooted at the file.

                 The effect of the copy shall be as if the copied files were written to a pax format archive file and then  sub‐
                 sequently extracted, except that there may be hard links between the original and the copied files. If the des‐
                 tination directory is a subdirectory of one of the files to be copied, the results are unspecified. If the des‐
                 tination directory is a file of a type not defined by the System Interfaces volume of POSIX.1‐2008, the results
                 are implementation-defined; otherwise, it shall be an error for the file named by the directory operand not  to
                 exist, not be writable by the user, or not be a file of type directory.

       In  read or copy modes, if intermediate directories are necessary to extract an archive member, pax shall perform actions
       equivalent to the mkdir() function defined in the System Interfaces volume of POSIX.1‐2008,  called  with  the  following
       arguments:

        *  The intermediate directory used as the path argument

        *  The value of the bitwise-inclusive OR of S_IRWXU, S_IRWXG, and S_IRWXO as the mode argument

       If any specified pattern or file operands are not matched by at least one file or archive member, pax shall write a diag‐
       nostic message to standard error for each one that did not match and exit with a non-zero exit status.

       The archive formats described in the EXTENDED DESCRIPTION section shall be automatically detected on input.  The  default
       output archive format shall be implementation-defined.

       A single archive can span multiple files. The pax utility shall determine, in an implementation-defined manner, what file
       to read or write as the next file.

       If the selected archive format supports the specification of linked files, it shall be an error if these files cannot  be
       linked  when  the  archive is extracted. For archive formats that do not store file contents with each name that causes a
       hard link, if the file that contains the data is not extracted during this pax session, either the data shall be restored
       from  the  original  file, or a diagnostic message shall be displayed with the name of a file that can be used to extract
       the data. In traversing directories, pax shall detect infinite loops; that is, entering a  previously  visited  directory
       that  is  an ancestor of the last file visited. When it detects an infinite loop, pax shall write a diagnostic message to
       standard error and shall terminate.

OPTIONS
       The pax utility shall conform to the Base Definitions volume of POSIX.1‐2008, Section 12.2,  Utility  Syntax  Guidelines,
       except that the order of presentation of the −o, −p, and −s options is significant.

       The following options shall be supported:

       −r        Read an archive file from standard input.

       −w        Write files to the standard output in the specified archive format.

       −a        Append  files  to  the  end  of  the  archive. It is implementation-defined which devices on the system support
                 appending. Additional file formats unspecified by this  volume  of  POSIX.1‐2008  may  impose  restrictions  on
                 appending.

       −b blocksize
                 Block  the  output at a positive decimal integer number of bytes per write to the archive file. Devices and ar‐
                 chive formats may impose restrictions on blocking. Blocking shall be automatically determined  on  input.  Con‐
                 forming  applications shall not specify a blocksize value larger than 32256. Default blocking when creating ar‐
                 chives depends on the archive format. (See the −x option below.)

       −c        Match all file or archive members except those specified by the pattern or file operands.

       −d        Cause files of type directory being copied or archived or archive members of type directory being extracted  or
                 listed to match only the file or archive member itself and not the file hierarchy rooted at the file.

       −f archive
                 Specify  the  pathname  of  the input or output archive, overriding the default standard input (in list or read
                 modes) or standard output (write mode).

       −H        If a symbolic link referencing a file of type directory is specified on the command line, pax shall archive the
                 file  hierarchy  rooted  in the file referenced by the link, using the name of the link as the root of the file
                 hierarchy.  Otherwise, if a symbolic link referencing a file of any other file type which pax can normally  ar‐
                 chive  is specified on the command line, then pax shall archive the file referenced by the link, using the name
                 of the link. The default behavior, when neither −H or −L are specified, shall be to archive the  symbolic  link
                 itself.

       −i        Interactively  rename  files  or  archive  members.  For each archive member matching a pattern operand or file
                 matching a file operand, a prompt shall be written to the file /dev/tty.  The prompt shall contain the name  of
                 the  file  or archive member, but the format is otherwise unspecified. A line shall then be read from /dev/tty.
                 If this line is blank, the file or archive member shall be skipped. If this line consists of a  single  period,
                 the  file  or  archive member shall be processed with no modification to its name. Otherwise, its name shall be
                 replaced with the contents of the line. The pax utility shall immediately exit with a non-zero exit  status  if
                 end-of-file is encountered when reading a response or if /dev/tty cannot be opened for reading and writing.

                 The results of extracting a hard link to a file that has been renamed during extraction are unspecified.

       −k        Prevent the overwriting of existing files.

       −l        (The  letter  ell.)  In copy mode, hard links shall be made between the source and destination file hierarchies
                 whenever possible. If specified in conjunction with −H or −L, when a symbolic link  is  encountered,  the  hard
                 link  created in the destination file hierarchy shall be to the file referenced by the symbolic link. If speci‐
                 fied when neither −H nor −L is specified, when a symbolic link is encountered, the implementation shall  create
                 a hard link to the symbolic link in the source file hierarchy or copy the symbolic link to the destination.

       −L        If  a symbolic link referencing a file of type directory is specified on the command line or encountered during
                 the traversal of a file hierarchy, pax shall archive the file hierarchy rooted in the file  referenced  by  the
                 link,  using the name of the link as the root of the file hierarchy.  Otherwise, if a symbolic link referencing
                 a file of any other file type which pax can normally archive is specified on the command  line  or  encountered
                 during  the traversal of a file hierarchy, pax shall archive the file referenced by the link, using the name of
                 the link. The default behavior, when neither −H or −L are specified, shall be  to  archive  the  symbolic  link
                 itself.

       −n        Select  the  first  archive  member that matches each pattern operand. No more than one archive member shall be
                 matched for each pattern (although members of type directory shall still match the  file  hierarchy  rooted  at
                 that file).

       −o options
                 Provide information to the implementation to modify the algorithm for extracting or writing files. The value of
                 options shall consist of one or more &amp;lt;comma&amp;gt;-separated keywords of the form:

                     keyword[[:]=value][,keyword[[:]=value], ...]

                 Some keywords apply only to certain file formats, as indicated with each description. Use of keywords that  are
                 inapplicable to the file format being processed produces undefined results.

                 Keywords  in the options argument shall be a string that would be a valid portable filename as described in the
                 Base Definitions volume of POSIX.1‐2008, Section 3.278, Portable Filename Character Set.

                 Note:     Keywords are not expected to be filenames, merely to follow the same character composition  rules  as
                           portable filenames.

                 Keywords  can  be  preceded  with white space. The value field shall consist of zero or more characters; within
                 value, the application shall precede any literal &amp;lt;comma&amp;gt; with a &amp;lt;backslash&amp;gt;, which shall be ignored,  but  pre‐
                 serves  the  &amp;lt;comma&amp;gt; as part of value.  A &amp;lt;comma&amp;gt; as the final character, or a &amp;lt;comma&amp;gt; followed solely by white
                 space as the final characters, in options shall be ignored. Multiple −o options can be specified;  if  keywords
                 given  to  these multiple −o options conflict, the keywords and values appearing later in command line sequence
                 shall take precedence and the earlier shall be silently ignored. The following keyword values of options  shall
                 be supported for the file formats as indicated:

                 delete=pattern
                       (Applicable  only  to  the  −x pax format.) When used in write or copy mode, pax shall omit from extended
                       header records that it produces any keywords matching the string pattern. When used in read or list mode,
                       pax  shall ignore any keywords matching the string pattern in the extended header records. In both cases,
                       matching shall be performed using the pattern matching notation described  in  Section  2.13.1,  Patterns
                       Matching a Single Character and Section 2.13.2, Patterns Matching Multiple Characters.  For example:

                           −o delete=security.*

                       would  suppress  security-related information. See pax Extended Header for extended header record keyword
                       usage.

                       When multiple −odelete=pattern options are specified, the patterns shall be additive; all keywords match‐
                       ing the specified string patterns shall be omitted from extended header records that pax produces.

                 exthdr.name=string
                       (Applicable  only  to  the −x pax format.) This keyword allows user control over the name that is written
                       into the ustar header blocks for the extended header produced under the circumstances  described  in  pax
                       Header Block.  The name shall be the contents of string, after the following character substitutions have
                       been made:

                                                 ┌──────────┬────────────────────────────────────────┐
                                                 │ string   │                                        │
                                                 │Includes: │              Replaced by:              │
                                                 ├──────────┼────────────────────────────────────────┤
                                                 │%d        │ The directory name of the file, equiv‐ │
                                                 │          │ alent  to  the  result  of the dirname │
                                                 │          │ utility on the translated pathname.    │
                                                 │%f        │ The filename of the  file,  equivalent │
                                                 │          │ to  the result of the basename utility │
                                                 │          │ on the translated pathname.            │
                                                 │%p        │ The process ID of the pax process.     │
                                                 │%%        │ A '%' character.                       │
                                                 └──────────┴────────────────────────────────────────┘
                       Any other '%' characters in string produce undefined results.

                       If no −o exthdr.name=string is specified, pax shall use the following default value:

                           %d/PaxHeaders.%p/%f

                 globexthdr.name=string
                       (Applicable only to the −x pax format.) When used in write or copy mode with the appropriate options, pax
                       shall  create  global  extended  header  records with ustar header blocks that will be treated as regular
                       files by previous versions of pax.  This keyword allows user control over the name that is  written  into
                       the  ustar  header  blocks  for global extended header records. The name shall be the contents of string,
                       after the following character substitutions have been made:

                                                 ┌──────────┬────────────────────────────────────────┐
                                                 │ string   │                                        │
                                                 │Includes: │              Replaced by:              │
                                                 ├──────────┼────────────────────────────────────────┤
                                                 │%n        │ An   integer   that   represents   the │
                                                 │          │ sequence number of the global extended │
                                                 │          │ header record in the archive, starting │
                                                 │          │ at 1.                                  │
                                                 │%p        │ The process ID of the pax process.     │
                                                 │%%        │ A '%' character.                       │
                                                 └──────────┴────────────────────────────────────────┘
                       Any other '%' characters in string produce undefined results.

                       If no −o globexthdr.name=string is specified, pax shall use the following default value:

                           $TMPDIR/GlobalHead.%p.%n

                       where  $TMPDIR  represents  the value of the TMPDIR environment variable. If TMPDIR is not set, pax shall
                       use /tmp.

                 invalid=action
                       (Applicable only to the −x pax format.) This keyword allows user control over the action pax  takes  upon
                       encountering  values in an extended header record that, in read or copy mode, are invalid in the destina‐
                       tion hierarchy or, in list mode, cannot be written in the codeset and current locale of  the  implementa‐
                       tion. The following are invalid values that shall be recognized by pax:

                       --  In read or copy mode, a filename or link name that contains character encodings invalid in the desti‐
                           nation hierarchy. (For example, the name may contain embedded NULs.)

                       --  In read or copy mode, a filename or link name that is longer than the maximum allowed in the destina‐
                           tion hierarchy (for either a pathname component or the entire pathname).

                       --  In  list  mode, any character string value (filename, link name, user name, and so on) that cannot be
                           written in the codeset and current locale of the implementation.

                       The following mutually-exclusive values of the action argument are supported:

                       binary    In write mode, pax shall generate a hdrcharset=BINARY extended header record for each file with
                                 a  filename, link name, group name, owner name, or any other field in an extended header record
                                 that cannot be translated to the UTF‐8 codeset, allowing the archive to contain the files  with
                                 unencoded  extended header record values. In read or copy mode, pax shall use the values speci‐
                                 fied in the header without translation, regardless of whether this may  overwrite  an  existing
                                 file with a valid name. In list mode, pax shall behave identically to the bypass action.

                       bypass    In  read  or copy mode, pax shall bypass the file, causing no change to the destination hierar‐
                                 chy.  In list mode, pax shall write all requested valid values for the file, but its method for
                                 writing invalid values is unspecified.

                       rename    In  read  or  copy  mode,  pax  shall act as if the −i option were in effect for each file with
                                 invalid filename or link name values, allowing the user to provide a replacement name  interac‐
                                 tively.  In list mode, pax shall behave identically to the bypass action.

                       UTF‐8     When used in read, copy, or list mode and a filename, link name, owner name, or any other field
                                 in an extended header record cannot be translated from the pax  UTF‐8  codeset  format  to  the
                                 codeset  and  current locale of the implementation, pax shall use the actual UTF‐8 encoding for
                                 the name. If a hdrcharset extended header record is in effect for this file, the character  set
                                 specified by that record shall be used instead of UTF‐8. If a hdrcharset=BINARY extended header
                                 record is in effect for this file, no translation shall be performed.

                       write     In read or copy mode, pax shall write the file, translating the  name,  regardless  of  whether
                                 this  may  overwrite an existing file with a valid name. In list mode, pax shall behave identi‐
                                 cally to the bypass action.

                       If no −o invalid=option is specified, pax shall act as if −oinvalid=bypass were specified. Any  overwrit‐
                       ing  of  existing files that may be allowed by the −oinvalid= actions shall be subject to permission (−p)
                       and modification time (−u) restrictions, and shall be suppressed if the −k option is also specified.

                 linkdata
                       (Applicable only to the −x pax format.) In write mode, pax shall write the contents of a file to the  ar‐
                       chive even when that file is merely a hard link to a file whose contents have already been written to the
                       archive.

                 listopt=format
                       This keyword specifies the output format of the table of contents produced when the −v option  is  speci‐
                       fied  in list mode. See List Mode Format Specifications.  To avoid ambiguity, the listopt=format shall be
                       the only or final keyword=value pair in a −o option-argument; all characters  in  the  remainder  of  the
                       option-argument shall be considered part of the format string. When multiple −olistopt=format options are
                       specified, the format strings shall be considered a single, concatenated  string,  evaluated  in  command
                       line order.

                 times
                       (Applicable  only  to  the  −x  pax format.) When used in write or copy mode, pax shall include atime and
                       mtime extended header records for each file. See pax Extended Header File Times.

                 In addition to these keywords, if the −x pax format is specified, any of the keywords and values defined in pax
                 Extended  Header,  including  implementation  extensions,  can be used in −o option-arguments, in either of two
                 modes:

                 keyword=value
                       When used in write or copy mode, these keyword/value pairs shall be included at the beginning of the  ar‐
                       chive  as  typeflag g global extended header records. When used in read or list mode, these keyword/value
                       pairs shall act as if they had been at the beginning of the archive as typeflag g global extended  header
                       records.

                 keyword:=value
                       When  used in write or copy mode, these keyword/value pairs shall be included as records at the beginning
                       of a typeflag x extended header for each file. (This shall be equivalent to the &amp;lt;equals-sign&amp;gt; form except
                       that it creates no typeflag g global extended header records.) When used in read or list mode, these key‐
                       word/value pairs shall act as if they were included as records at the end of each extended header;  thus,
                       they  shall  override  any global or file-specific extended header record keywords of the same names. For
                       example, in the command:

                           pax −r −o "
                           gname:=mygroup,
                           " &amp;lt;archive

                       the group name will be forced to a new value for all files read from the archive.

                 The precedence of −o keywords over various fields in the archive is described in pax  Extended  Header  Keyword
                 Precedence.

       −p string Specify  one  or  more  file  characteristic options (privileges). The string option-argument shall be a string
                 specifying file characteristics to be retained or discarded on extraction. The  string  shall  consist  of  the
                 specification  characters a, e, m, o, and p.  Other implementation-defined characters can be included. Multiple
                 characteristics can be concatenated within the same string and multiple −p options can be specified. The  mean‐
                 ing of the specification characters are as follows:

                 a     Do not preserve file access times.

                 e     Preserve  the user ID, group ID, file mode bits (see the Base Definitions volume of POSIX.1‐2008, Section
                       3.169, File Mode Bits), access time, modification time, and any other implementation-defined file charac‐
                       teristics.

                 m     Do not preserve file modification times.

                 o     Preserve the user ID and group ID.

                 p     Preserve the file mode bits. Other implementation-defined file mode attributes may be preserved.

                 In  the  preceding  list,  ``preserve'' indicates that an attribute stored in the archive shall be given to the
                 extracted file, subject to the permissions of the invoking process. The access and modification  times  of  the
                 file  shall  be  preserved  unless  otherwise  specified  with  the −p option or not stored in the archive. All
                 attributes that are not preserved shall be determined as part of the normal file creation action  (see  Section
                 1.1.1.4, File Read, Write, and Creation).

                 If  neither the e nor the o specification character is specified, or the user ID and group ID are not preserved
                 for any reason, pax shall not set the S_ISUID and S_ISGID bits of the file mode.

                 If the preservation of any of these items fails for any reason, pax shall write a diagnostic message  to  stan‐
                 dard  error.  Failure  to  preserve  these  items  shall  affect the final exit status, but shall not cause the
                 extracted file to be deleted.

                 If file characteristic letters in any of the string option-arguments  are  duplicated  or  conflict  with  each
                 other,  the ones given last shall take precedence. For example, if −p eme is specified, file modification times
                 are preserved.

       −s replstr
                 Modify file or archive member names named by pattern or file operands according to the substitution  expression
                 replstr,  using  the  syntax of the ed utility. The concepts of ``address'' and ``line'' are meaningless in the
                 context of the pax utility, and shall not be supplied. The format shall be:

                     −s /old/new/[gp]

                 where as in ed, old is a basic regular expression and new can contain an &amp;lt;ampersand&amp;gt;, '\n' (where n is a digit)
                 back-references, or subexpression matching. The old string shall also be permitted to contain &amp;lt;newline&amp;gt; charac‐
                 ters.

                 Any non-null character can be used as a delimiter ('/' shown here). Multiple −s expressions can  be  specified;
                 the  expressions  shall  be applied in the order specified, terminating with the first successful substitution.
                 The optional trailing 'g' is as defined in the ed utility. The optional trailing  'p'  shall  cause  successful
                 substitutions  to  be  written  to  standard  error.  File or archive member names that substitute to the empty
                 string shall be ignored when reading and writing archives.

       −t        When reading files from the file system, and if the user has the permissions required by utime() to do so,  set
                 the access time of each file read to the access time that it had before being read by pax.

       −u        Ignore  files  that are older (having a less recent file modification time) than a pre-existing file or archive
                 member with the same name.  In read mode, an archive member with the same name as a file  in  the  file  system
                 shall be extracted if the archive member is newer than the file. In write mode, an archive file member with the
                 same name as a file in the file system shall be superseded if the file is newer than the archive member. If  −a
                 is  also specified, this is accomplished by appending to the archive; otherwise, it is unspecified whether this
                 is accomplished by actual replacement in the archive or by appending to the archive. In copy mode, the file  in
                 the destination hierarchy shall be replaced by the file in the source hierarchy or by a link to the file in the
                 source hierarchy if the file in the source hierarchy is newer.

       −v        In list mode, produce a verbose table of contents (see the STDOUT section).  Otherwise,  write  archive  member
                 pathnames to standard error (see the STDERR section).

       −x format Specify the output archive format. The pax utility shall support the following formats:

                 cpio      The  cpio  interchange  format;  see the EXTENDED DESCRIPTION section. The default blocksize for this
                           format for character special archive files shall be 5120.  Implementations shall support  all  block‐
                           size values less than or equal to 32256 that are multiples of 512.

                 pax       The pax interchange format; see the EXTENDED DESCRIPTION section. The default blocksize for this for‐
                           mat for character special archive files shall be 5120.  Implementations shall support  all  blocksize
                           values less than or equal to 32256 that are multiples of 512.

                 ustar     The tar interchange format; see the EXTENDED DESCRIPTION section. The default blocksize for this for‐
                           mat for character special archive files shall be 10240.  Implementations shall support all  blocksize
                           values less than or equal to 32256 that are multiples of 512.

                 Implementation-defined  formats  shall  specify a default block size as well as any other block sizes supported
                 for character special archive files.

                 Any attempt to append to an archive file in a format different from the existing archive format shall cause pax
                 to exit immediately with a non-zero exit status.

       −X        When  traversing the file hierarchy specified by a pathname, pax shall not descend into directories that have a
                 different device ID (st_dev; see the System Interfaces volume of POSIX.1‐2008, stat()).

       Specifying more than one of the mutually-exclusive options −H and −L shall not be considered an error and the last option
       specified shall determine the behavior of the utility.

       The options that operate on the names of files or archive members (−c, −i, −n, −s, −u, and −v) shall interact as follows.
       In read mode, the archive members shall be selected based on the user-specified pattern operands as modified by  the  −c,
       −n,  and  −u  options.  Then, any −s and −i options shall modify, in that order, the names of the selected files.  The −v
       option shall write names resulting from these modifications.

       In write mode, the files shall be selected based on the user-specified pathnames as modified by the −n  and  −u  options.
       Then,  any  −s  and −i options shall modify, in that order, the names of these selected files.  The −v option shall write
       names resulting from these modifications.

       If both the −u and −n options are specified, pax shall not consider a file selected unless it is newer than the  file  to
       which it is compared.

   List Mode Format Specifications
       In  list  mode  with  the  −o listopt=format option, the format argument shall be applied for each selected file. The pax
       utility shall append a &amp;lt;newline&amp;gt; to the listopt output for each selected file. The format argument shall be used  as  the
       format  string described in the Base Definitions volume of POSIX.1‐2008, Chapter 5, File Format Notation, with the excep‐
       tions 1. through 6. defined in the EXTENDED DESCRIPTION section of printf, plus the following exceptions:

       7.    The sequence (keyword) can occur before a format conversion specifier. The conversion argument is  defined  by  the
             value of keyword.  The implementation shall support the following keywords:

             --  Any  of  the  Field  Name entries in Table 4-14, ustar Header Block and Table 4-16, Octet-Oriented cpio Archive
                 Entry.  The implementation may support the cpio keywords without  the  leading  c_  in  addition  to  the  form
                 required by Table 4-16, Octet-Oriented cpio Archive Entry.

             --  Any keyword defined for the extended header in pax Extended Header.

             --  Any  keyword provided as an implementation-defined extension within the extended header defined in pax Extended
                 Header.

             For example, the sequence "%(charset)s" is the string value of the name  of  the  character  set  in  the  extended
             header.

             The  result  of  the  keyword  conversion  argument shall be the value from the applicable header field or extended
             header, without any trailing NULs.

             All keyword values used as conversion arguments shall be translated from the UTF‐8 encoding (or alternative  encod‐
             ing specified by any hdrcharset extended header record) to the character set appropriate for the local file system,
             user database, and so on, as applicable.

       8.    An additional conversion specifier character, T, shall be used to specify time formats. The T conversion  specifier
             character  can be preceded by the sequence (keyword=subformat), where subformat is a date format as defined by date
             operands. The default keyword shall be mtime and the default subformat shall be:

                 %b %e %H:%M %Y

       9.    An additional conversion specifier character, M, shall be used to specify the file mode string  as  defined  in  ls
             Standard Output. If (keyword) is omitted, the mode keyword shall be used. For example, %.1M writes the single char‐
             acter corresponding to the &amp;lt;entry type&amp;gt; field of the ls −l command.

       10.   An additional conversion specifier character, D, shall be used to specify the device for block or special files, if
             applicable,  in  an implementation-defined format. If not applicable, and (keyword) is specified, then this conver‐
             sion shall be equivalent to %(keyword)u. If not applicable, and (keyword) is omitted, then this conversion shall be
             equivalent to &amp;lt;space&amp;gt;.

       11.   An  additional  conversion  specifier character, F, shall be used to specify a pathname. The F conversion character
             can be preceded by a sequence of &amp;lt;comma&amp;gt;-separated keywords:

                 (keyword[,keyword] ... )

             The values for all the keywords that are non-null shall be concatenated together, each separated  by  a  '/'.   The
             default shall be (path) if the keyword path is defined; otherwise, the default shall be (prefix,name).

       12.   An additional conversion specifier character, L, shall be used to specify a symbolic link expansion. If the current
             file is a symbolic link, then %L shall expand to:

                 "%s −&amp;gt; %s", &amp;lt;value of keyword&amp;gt;, &amp;lt;contents of link&amp;gt;

             Otherwise, the %L conversion specification shall be the equivalent of %F.

OPERANDS
       The following operands shall be supported:

       directory The destination directory pathname for copy mode.

       file      A pathname of a file to be copied or archived.

       pattern   A pattern matching one or more pathnames of archive members. A pattern must be  given  in  the  name-generating
                 notation  of  the  pattern matching notation in Section 2.13, Pattern Matching Notation, including the filename
                 expansion rules in Section 2.13.3, Patterns Used for Filename Expansion.  The default, if no pattern is  speci‐
                 fied, is to select all members in the archive.

STDIN
       In  write  mode, the standard input shall be used only if no file operands are specified. It shall be a file containing a
       list of pathnames, each terminated by a &amp;lt;newline&amp;gt; character.

       In list and read modes, if −f is not specified, the standard input shall be an archive file.

       Otherwise, the standard input shall not be used.

INPUT FILES
       The input file named by the archive option-argument, or standard input when the archive is read from there,  shall  be  a
       file  formatted  according to one of the specifications in the EXTENDED DESCRIPTION section or some other implementation-
       defined format.

       The file /dev/tty shall be used to write prompts and read responses.

<!-- 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 <=< ACCEPT -->ENVIRONMENT VARIABLES
       The following environment variables shall affect the execution of pax:

       LANG      Provide a default value for the internationalization variables that are unset or null. (See  the  Base  Defini‐
                 tions  volume  of POSIX.1‐2008, Section 8.2, Internationalization Variables the precedence of internationaliza‐
                 tion variables used to determine the values of locale categories.)

       LC_ALL    If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_COLLATE
                 Determine the locale for the behavior of ranges, equivalence classes, and  multi-character  collating  elements
                 used  in  the  pattern  matching  expressions  for the pattern operand, the basic regular expression for the −s
                 option, and the extended regular expression defined for the yesexpr locale keyword in the LC_MESSAGES category.

       LC_CTYPE  Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, sin‐
                 gle-byte  as  opposed to multi-byte characters in arguments and input files), the behavior of character classes
                 used in the extended regular expression defined for the yesexpr locale keyword in the LC_MESSAGES category, and
                 pattern matching.

       LC_MESSAGES
                 Determine  the  locale used to process affirmative responses, and the locale used to affect the format and con‐
                 tents of diagnostic messages and prompts written to standard error.

       LC_TIME   Determine the format and contents of date and time strings when the −v option is specified.

       NLSPATH   Determine the location of message catalogs for the processing of LC_MESSAGES.<!-- ACCEPT >=> 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 -->

       TMPDIR    Determine the pathname that provides part of the default global extended header record file, as  described  for
                 the −o globexthdr= keyword in the OPTIONS section.

       TZ        Determine  the timezone used to calculate date and time strings when the −v option is specified. If TZ is unset
                 or null, an unspecified default timezone shall be used.

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       In write mode, if −f is not specified, the standard output shall be the archive formatted according to one of the  speci‐
       fications in the EXTENDED DESCRIPTION section, or some other implementation-defined format (see −x format).

       In  list  mode,  when  the −olistopt=format has been specified, the selected archive members shall be written to standard
       output using the format described under List Mode Format Specifications.   In  list  mode  without  the  −olistopt=format
       option,  the  table  of  contents of the selected archive members shall be written to standard output using the following
       format:

           "%s\n", &amp;lt;pathname&amp;gt;

       If the −v option is specified in list mode, the table of contents of the selected archive members  shall  be  written  to
       standard output using the following formats.

       For pathnames representing hard links to previous members of the archive:

           "%s == %s\n", &amp;lt;ls −l listing&amp;gt;, &amp;lt;linkname&amp;gt;

       For all other pathnames:

           "%s\n", &amp;lt;ls −l listing&amp;gt;

       where  &amp;lt;ls −l listing&amp;gt; shall be the format specified by the ls utility with the −l option. When writing pathnames in this
       format, it is unspecified what is written for fields for which the underlying archive format does not  have  the  correct
       information, although the correct number of &amp;lt;blank&amp;gt;-separated fields shall be written.

       In list mode, standard output shall not be buffered more than a pathname (plus any associated information and a &amp;lt;newline&amp;gt;
       terminator) at a time.

STDERR
       If −v is specified in read, write, or copy modes, pax shall write the pathnames it processes to the standard error output
       using the following format:

           "%s\n", &amp;lt;pathname&amp;gt;

       These  pathnames  shall  be written as soon as processing is begun on the file or archive member, and shall be flushed to
       standard error. The trailing &amp;lt;newline&amp;gt;, which shall not be buffered, is written when the file has been read or written.

       If the −s option is specified, and the replacement string has a trailing 'p', substitutions shall be written to  standard
       error in the following format:

           "%s &amp;gt;&amp;gt; %s\n", &amp;lt;original pathname&amp;gt;, &amp;lt;new pathname&amp;gt;

       In  all  operating  modes  of pax, optional messages of unspecified format concerning the input archive format and volume
       number, the number of files, blocks, volumes, and media parts as well as other diagnostic  messages  may  be  written  to
       standard error.

       In  all formats, for both standard output and standard error, it is unspecified how non-printable characters in pathnames
       or link names are written.

       When using the −xpax archive format, if a filename, link name, group name, owner name, or any other field in an  extended
       header  record  cannot  be translated between the codeset in use for that extended header record and the character set of
       the current locale, pax shall write a diagnostic message to standard error, shall process the file as described  for  the
       −o invalid= option, and then shall continue processing with the next file.

OUTPUT FILES
       In read mode, the extracted output files shall be of the archived file type.  In copy mode, the copied output files shall
       be the type of the file being copied. In either mode, existing files in the destination hierarchy  shall  be  overwritten
       only when all permission (−p), modification time (−u), and invalid-value (−oinvalid=) tests allow it.

       In write mode, the output file named by the −f option-argument shall be a file formatted according to one of the specifi‐
       cations in the EXTENDED DESCRIPTION section, or some other implementation-defined format.

EXTENDED DESCRIPTION
   pax Interchange Format
       A pax archive tape or file produced in the −xpax format shall contain a series of blocks. The physical layout of the  ar‐
       chive  shall  be identical to the ustar format described in ustar Interchange Format.  Each file archived shall be repre‐
       sented by the following sequence:

        *  An optional header block with extended header records. This header block is of  the  form  described  in  pax  Header
           Block,  with  a  typeflag  value  of x or g.  The extended header records, described in pax Extended Header, shall be
           included as the data for this header block.

        *  A header block that describes the file. Any fields in the preceding optional extended header shall override the asso‐
           ciated fields in this header block for this file.

        *  Zero or more blocks that contain the contents of the file.

       At  the end of the archive file there shall be two 512-byte blocks filled with binary zeros, interpreted as an end-of-ar‐
       chive indicator.

       A schematic of an example archive with global extended header records and two actual files is shown in  Figure  4-1,  pax
       Format  Archive  Example.  In the example, the second file in the archive has no extended header preceding it, presumably
       because it has no need for extended attributes.

                                                Figure 4-1: pax Format Archive Example

   pax Header Block
       The pax header block shall be identical to the ustar header block described in ustar Interchange Format, except that  two
       additional typeflag values are defined:

       x     Represents  extended  header  records  for the following file in the archive (which shall have its own ustar header
             block). The format of these extended header records shall be as described in pax Extended Header.

       g     Represents global extended header records for the following files in the archive.  The  format  of  these  extended
             header  records shall be as described in pax Extended Header.  Each value shall affect all subsequent files that do
             not override that value in their own extended header record and until another  global  extended  header  record  is
             reached  that  provides  another  value  for  the same field. The typeflag g global headers should not be used with
             interchange media that could suffer partial data loss in transporting the archive.

       For both of these types, the size field shall be the size of the extended header records in octets. The other  fields  in
       the header block are not meaningful to this version of the pax utility. However, if this archive is read by a pax utility
       conforming to the ISO POSIX‐2:1993 standard, the header block fields are used to create a regular file that contains  the
       extended  header  records  as  data.  Therefore,  header block field values should be selected to provide reasonable file
       access to this regular file.

       A further difference from the ustar header block is that data blocks for files of typeflag 1 (the digit one) (hard  link)
       may  be  included,  which  means  that the size field may be greater than zero. Archives created by pax −o linkdata shall
       include these data blocks with the hard links.

   pax Extended Header
       A pax extended header contains values that are inappropriate for the ustar header block because of  limitations  in  that
       format:  fields  requiring a character encoding other than that described in the ISO/IEC 646:1991 standard, fields repre‐
       senting file attributes not described in the ustar header, and fields whose format or length do not fit the  requirements
       of the ustar header. The values in an extended header add attributes to the following file (or files; see the description
       of the typeflag g header block) or override values in the following header block(s), as indicated in the  following  list
       of keywords.

       An extended header shall consist of one or more records, each constructed as follows:

           "%d %s=%s\n", &amp;lt;length&amp;gt;, &amp;lt;keyword&amp;gt;, &amp;lt;value&amp;gt;

       The  extended header records shall be encoded according to the ISO/IEC 10646‐1:2000 standard UTF‐8 encoding. The &amp;lt;length&amp;gt;
       field, &amp;lt;blank&amp;gt;, &amp;lt;equals-sign&amp;gt;, and &amp;lt;newline&amp;gt; shown shall be limited to the portable character set, as encoded  in  UTF‐8.
       The  &amp;lt;keyword&amp;gt; fields can be any UTF‐8 characters.  The &amp;lt;length&amp;gt; field shall be the decimal length of the extended header
       record in octets, including the trailing &amp;lt;newline&amp;gt;.  If there is a hdrcharset extended header in effect for a  file,  the
       value  field  for  any  gname, linkpath, path, and uname extended header records shall be encoded using the character set
       specified by the hdrcharset extended header record; otherwise, the value field shall be encoded using  UTF‐8.  The  value
       field for all other keywords specified by POSIX.1‐2008 shall be encoded using UTF‐8.

       The &amp;lt;keyword&amp;gt; field shall be one of the entries from the following list or a keyword provided as an implementation exten‐
       sion.  Keywords consisting entirely of lowercase letters, digits, and periods are reserved for future standardization.  A
       keyword shall not include an &amp;lt;equals-sign&amp;gt;.  (In the following list, the notations ``file(s)'' or ``block(s)'' is used to
       acknowledge that a keyword affects the following single file after a typeflag x extended header,  but  possibly  multiple
       files  after typeflag g.  Any requirements in the list for pax to include a record when in write or copy mode shall apply
       only when such a record has not already been provided through the use of the −o option. When used in copy mode, pax shall
       behave as if an archive had been created with applicable extended header records and then extracted.)

       atime     The  file  access  time  for  the following file(s), equivalent to the value of the st_atime member of the stat
                 structure for a file, as described by the stat() function. The access time shall be restored if the process has
                 appropriate  privileges  required  to  do  so.  The format of the &amp;lt;value&amp;gt; shall be as described in pax Extended
                 Header File Times.

       charset   The name of the character set used to encode the data in the following file(s). The entries  in  the  following
                 table  are  defined  to  refer to known standards; additional names may be agreed on between the originator and
                 recipient.

                                            ┌────────────────────────┬───────────────────────────────┐
                                            │        &amp;lt;value&amp;gt;         │        Formal Standard        │
                                            ├────────────────────────┼───────────────────────────────┤
                                            │ISO-IR 646 1990         │ ISO/IEC 646:1990              │
                                            │ISO-IR 8859 1 1998      │ ISO/IEC 8859‐1:1998           │
                                            │ISO-IR 8859 2 1999      │ ISO/IEC 8859‐2:1999           │
                                            │ISO-IR 8859 3 1999      │ ISO/IEC 8859‐3:1999           │
                                            │ISO-IR 8859 4 1998      │ ISO/IEC 8859‐4:1998           │
                                            │ISO-IR 8859 5 1999      │ ISO/IEC 8859‐5:1999           │
                                            │ISO-IR 8859 6 1999      │ ISO/IEC 8859‐6:1999           │
                                            │ISO-IR 8859 7 1987      │ ISO/IEC 8859‐7:1987           │
                                            │ISO-IR 8859 8 1999      │ ISO/IEC 8859‐8:1999           │
                                            │ISO-IR 8859 9 1999      │ ISO/IEC 8859‐9:1999           │
                                            │ISO-IR 8859 10 1998     │ ISO/IEC 8859‐10:1998          │
                                            │ISO-IR 8859 13 1998     │ ISO/IEC 8859‐13:1998          │
                                            │ISO-IR 8859 14 1998     │ ISO/IEC 8859‐14:1998          │
                                            │ISO-IR 8859 15 1999     │ ISO/IEC 8859‐15:1999          │
                                            │ISO-IR 10646 2000       │ ISO/IEC 10646:2000            │
                                            │ISO-IR 10646 2000 UTF-8 │ ISO/IEC 10646, UTF-8 encoding │
                                            │BINARY                  │ None.                         │
                                            └────────────────────────┴───────────────────────────────┘
                 The encoding is included in an extended header  for  information  only;  when  pax  is  used  as  described  in
                 POSIX.1‐2008,  it  shall  not translate the file data into any other encoding. The BINARY entry indicates unen‐
                 coded binary data.

                 When used in write or copy mode, it is implementation-defined whether pax includes a  charset  extended  header
                 record for a file.

       comment   A series of characters used as a comment. All characters in the &amp;lt;value&amp;gt; field shall be ignored by pax.

       gid       The  group  ID  of  the  group  that  owns  the  file,  expressed  as  a  decimal  number using digits from the
                 ISO/IEC 646:1991 standard. This record shall override the gid field in the following header block(s). When used
                 in  write  or copy mode, pax shall include a gid extended header record for each file whose group ID is greater
                 than 2097151 (octal 7777777).

       gname     The group of the file(s), formatted as a group name in the group database. This record shall override  the  gid
                 and gname fields in the following header block(s), and any gid extended header record. When used in read, copy,
                 or list mode, pax shall translate the name from the encoding in the header record to the character  set  appro‐
                 priate  for  the  group database on the receiving system. If any of the characters cannot be translated, and if
                 neither the −oinvalid=UTF‐8 option nor the −oinvalid=binary option is specified, the  results  are  implementa‐
                 tion-defined.   When used in write or copy mode, pax shall include a gname extended header record for each file
                 whose group name cannot be represented entirely with the letters and digits of the portable character set.

       hdrcharset
                 The name of the character set used to encode the value field of  the  gname,  linkpath,  path,  and  uname  pax
                 extended header records. The entries in the following table are defined to refer to known standards; additional
                 names may be agreed between the originator and the recipient.

                                            ┌────────────────────────┬───────────────────────────────┐
                                            │        &amp;lt;value&amp;gt;         │        Formal Standard        │
                                            ├────────────────────────┼───────────────────────────────┤
                                            │ISO-IR 10646 2000 UTF-8 │ ISO/IEC 10646, UTF-8 encoding │
                                            │BINARY                  │ None.                         │
                                            └────────────────────────┴───────────────────────────────┘
                 If no hdrcharset extended header record is specified, the default character set used to encode  all  values  in
                 extended header records shall be the ISO/IEC 10646‐1:2000 standard UTF‐8 encoding.

                 The BINARY entry indicates that all values recorded in extended headers for affected files are unencoded binary
                 data from the underlying system.

       linkpath  The pathname of a link being created to another file, of any type, previously archived. This record shall over‐
                 ride  the  linkname field in the following ustar header block(s). The following ustar header block shall deter‐
                 mine the type of link created. If typeflag of the following header block is 1, it shall  be  a  hard  link.  If
                 typeflag  is  2, it shall be a symbolic link and the linkpath value shall be the contents of the symbolic link.
                 The pax utility shall translate the name of the link (contents of the symbolic link) from the encoding  in  the
                 header  to  the character set appropriate for the local file system. When used in write or copy mode, pax shall
                 include a linkpath extended header record for each link whose pathname cannot be represented entirely with  the
                 members of the portable character set other than NUL.

       mtime     The file modification time of the following file(s), equivalent to the value of the st_mtime member of the stat
                 structure for a file, as described in the stat() function. This record shall override the mtime  field  in  the
                 following  header  block(s).  The modification time shall be restored if the process has appropriate privileges
                 required to do so. The format of the &amp;lt;value&amp;gt; shall be as described in pax Extended Header File Times.

       path      The pathname of the following file(s). This record shall override the name and prefix fields in  the  following
                 header  block(s).  The  pax utility shall translate the pathname of the file from the encoding in the header to
                 the character set appropriate for the local file system.

                 When used in write or copy mode, pax shall include a path extended header record for each file  whose  pathname
                 cannot be represented entirely with the members of the portable character set other than NUL.

       realtime.any
                 The keywords prefixed by ``realtime.'' are reserved for future standardization.

       security.any
                 The keywords prefixed by ``security.'' are reserved for future standardization.

       size      The  size of the file in octets, expressed as a decimal number using digits from the ISO/IEC 646:1991 standard.
                 This record shall override the size field in the following header block(s). When used in write  or  copy  mode,
                 pax  shall include a size extended header record for each file with a size value greater than 8589934591 (octal
                 77777777777).

       uid       The user ID of the file owner, expressed as a decimal number using digits from the  ISO/IEC 646:1991  standard.
                 This record shall override the uid field in the following header block(s). When used in write or copy mode, pax
                 shall include a uid extended header record for each  file  whose  owner  ID  is  greater  than  2097151  (octal
                 7777777).

       uname     The  owner  of the following file(s), formatted as a user name in the user database. This record shall override
                 the uid and uname fields in the following header block(s), and any uid extended header  record.  When  used  in
                 read,  copy, or list mode, pax shall translate the name from the encoding in the header record to the character
                 set appropriate for the user database on the receiving system. If any of the characters cannot  be  translated,
                 and  if neither the −oinvalid=UTF‐8 option nor the −oinvalid=binary option is specified, the results are imple‐
                 mentation-defined.  When used in write or copy mode, pax shall include a uname extended header record for  each
                 file whose user name cannot be represented entirely with the letters and digits of the portable character set.

       If the &amp;lt;value&amp;gt; field is zero length, it shall delete any header block field, previously entered extended header value, or
       global extended header value of the same name.

       If a keyword in an extended header record (or in a −o option-argument) overrides or deletes a corresponding field in  the
       ustar header block, pax shall ignore the contents of that header block field.

       Unlike  the  ustar header block fields, NULs shall not delimit &amp;lt;value&amp;gt;s; all characters within the &amp;lt;value&amp;gt; field shall be
       considered data for the field. None of the length limitations of the ustar header  block  fields  in  Table  4-14,  ustar
       Header Block shall apply to the extended header records.

   pax Extended Header Keyword Precedence
       This  section  describes  the  precedence  in  which  the  various header records and fields and command line options are
       selected to apply to a file in the archive. When pax is used in read or list modes, it shall determine a  file  attribute
       in the following sequence:

        1. If  −odelete=keyword-prefix  is  used,  the  affected  attributes shall be determined from step 7., if applicable, or
           ignored otherwise.

        2. If −okeyword:= is used, the affected attributes shall be ignored.

        3. If −okeyword:=value is used, the affected attribute shall be assigned the value.

        4. If there is a typeflag x extended header record, the affected attribute shall be assigned the &amp;lt;value&amp;gt;. When  extended
           header records conflict, the last one given in the header shall take precedence.

        5. If −okeyword=value is used, the affected attribute shall be assigned the value.

        6. If  there  is  a typeflag g global extended header record, the affected attribute shall be assigned the &amp;lt;value&amp;gt;. When
           global extended header records conflict, the last one given in the global header shall take precedence.

        7. Otherwise, the attribute shall be determined from the ustar header block.

   pax Extended Header File Times
       The pax utility shall write an mtime record for each file in write or copy modes if the file's modification  time  cannot
       be  represented  exactly in the ustar header logical record described in ustar Interchange Format.  This can occur if the
       time is out of ustar range, or if the file system of the underlying implementation supports non-integer  time  granulari‐
       ties and the time is not an integer. All of these time records shall be formatted as a decimal representation of the time
       in seconds since the Epoch. If a &amp;lt;period&amp;gt; ('.')  decimal point character is present, the digits to the right of the point
       shall  represent the units of a subsecond timing granularity, where the first digit is tenths of a second and each subse‐
       quent digit is a tenth of the previous digit. In read or copy mode, the pax utility shall truncate the time of a file  to
       the greatest value that is not greater than the input header file time. In write or copy mode, the pax utility shall out‐
       put a time exactly if it can be represented exactly as a decimal number, and otherwise shall generate only enough  digits
       so  that  the  same time shall be recovered if the file is extracted on a system whose underlying implementation supports
       the same time granularity.

   ustar Interchange Format
       A ustar archive tape or file shall contain a series of logical records. Each logical record shall be a fixed-size logical
       record  of  512  octets  (see below). Although this format may be thought of as being stored on 9-track industry-standard
       12.7 mm (0.5 in) magnetic tape, other types of transportable media are not excluded. Each file archived shall  be  repre‐
       sented  by  a  header logical record that describes the file, followed by zero or more logical records that give the con‐
       tents of the file. At the end of the archive file there shall be two 512-octet logical records filled with binary  zeros,
       interpreted as an end-of-archive indicator.

       The  logical records may be grouped for physical I/O operations, as described under the −bblocksize and −x ustar options.
       Each group of logical records may be written with a single operation equivalent to  the  write()  function.  On  magnetic
       tape,  the  result  of this write shall be a single tape physical block. The last physical block shall always be the full
       size, so logical records after the two zero logical records may contain undefined data.

       The header logical record shall be structured as shown in the following table. All lengths and offsets are in decimal.

                                                    Table 4-14: ustar Header Block

                                           ┌───────────┬──────────────┬────────────────────┐
                                           │Field Name │ Octet Offset │ Length (in Octets) │
                                           ├───────────┼──────────────┼────────────────────┤
                                           │name       │       0      │        100         │
                                           │mode       │     100      │          8         │
                                           │uid        │     108      │          8         │
                                           │gid        │     116      │          8         │
                                           │size       │     124      │         12         │
                                           │mtime      │     136      │         12         │
                                           │chksum     │     148      │          8         │
                                           │typeflag   │     156      │          1         │
                                           │linkname   │     157      │        100         │
                                           │magic      │     257      │          6         │
                                           │version    │     263      │          2         │
                                           │uname      │     265      │         32         │
                                           │gname      │     297      │         32         │
                                           │devmajor   │     329      │          8         │
                                           │devminor   │     337      │          8         │
                                           │prefix     │     345      │        155         │
                                           └───────────┴──────────────┴────────────────────┘
       All characters in the header logical record shall be represented in the coded character set of the ISO/IEC 646:1991 stan‐
       dard. For maximum portability between implementations, names should be selected from characters represented by the porta‐
       ble filename character set as octets with the most significant bit zero. If an implementation supports the use of charac‐
       ters outside of &amp;lt;slash&amp;gt; and the portable filename character set in names for files, users, and groups, one or more imple‐
       mentation-defined encodings of these characters shall be provided for interchange purposes.

       However, the pax utility shall never create filenames on the local system that cannot  be  accessed  via  the  procedures
       described  in POSIX.1‐2008. If a filename is found on the medium that would create an invalid filename, it is implementa‐
       tion-defined whether the data from the file is stored on the file hierarchy and under what name it  is  stored.  The  pax
       utility may choose to ignore these files as long as it produces an error indicating that the file is being ignored.

       Each  field  within the header logical record is contiguous; that is, there is no padding used. Each character on the ar‐
       chive medium shall be stored contiguously.

       The fields magic, uname, and gname are character strings each terminated by a NUL character. The fields  name,  linkname,
       and  prefix  are  NUL-terminated  character  strings  except  when all characters in the array contain non-NUL characters
       including the last character. The version field is two octets containing the characters "00"  (zero-zero).  The  typeflag
       contains   a  single  character.  All  other  fields  are  leading  zero-filled  octal  numbers  using  digits  from  the
       ISO/IEC 646:1991 standard IRV. Each numeric field is terminated by one or more &amp;lt;space&amp;gt; or NUL characters.

       The name and the prefix fields shall produce the pathname of the file. A new pathname shall be formed, if prefix  is  not
       an  empty  string  (its  first  character is not NUL), by concatenating prefix (up to the first NUL character), a &amp;lt;slash&amp;gt;
       character, and name; otherwise, name is used alone. In either case, name is terminated at the  first  NUL  character.  If
       prefix  begins with a NUL character, it shall be ignored. In this manner, pathnames of at most 256 characters can be sup‐
       ported. If a pathname does not fit in the space provided, pax shall notify the user of the error, and shall not store any
       part of the file—header or data—on the medium.

       The  linkname  field,  described below, shall not use the prefix to produce a pathname. As such, a linkname is limited to
       100 characters. If the name does not fit in the space provided, pax shall notify the user of the  error,  and  shall  not
       attempt to store the link on the medium.

       The  mode  field  provides 12 bits encoded in the ISO/IEC 646:1991 standard octal digit representation.  The encoded bits
       shall represent the following values:

                                                        Table: ustar mode Field

                           ┌──────────┬──────────────────┬─────────────────────────────────────────────────┐
                           │Bit Value │ POSIX.1‐2008 Bit │                   Description                   │
                           ├──────────┼──────────────────┼─────────────────────────────────────────────────┤
                           │  04000   │ S_ISUID          │ Set UID on execution.                           │
                           │  02000   │ S_ISGID          │ Set GID on execution.                           │
                           │  01000   │ &amp;lt;reserved&amp;gt;       │ Reserved for future standardization.            │
                           │  00400   │ S_IRUSR          │ Read permission for file owner class.           │
                           │  00200   │ S_IWUSR          │ Write permission for file owner class.          │
                           │  00100   │ S_IXUSR          │ Execute/search permission for file owner class. │
                           │  00040   │ S_IRGRP          │ Read permission for file group class.           │
                           │  00020   │ S_IWGRP          │ Write permission for file group class.          │
                           │  00010   │ S_IXGRP          │ Execute/search permission for file group class. │
                           │  00004   │ S_IROTH          │ Read permission for file other class.           │
                           │  00002   │ S_IWOTH          │ Write permission for file other class.          │
                           │  00001   │ S_IXOTH          │ Execute/search permission for file other class. │
                           └──────────┴──────────────────┴─────────────────────────────────────────────────┘
       When appropriate privileges are required to set one of these mode bits, and the user restoring the files from the archive
       does  not  have  appropriate  privileges,  the mode bits for which the user does not have appropriate privileges shall be
       ignored. Some of the mode bits in the archive format are not mentioned elsewhere in this volume of POSIX.1‐2008.  If  the
       implementation does not support those bits, they may be ignored.

       The uid and gid fields are the user and group ID of the owner and group of the file, respectively.

       The size field is the size of the file in octets. If the typeflag field is set to specify a file to be of type 1 (a link)
       or 2 (a symbolic link), the size field shall be specified as zero. If the typeflag field is set to specify a file of type
       5 (directory), the size field shall be interpreted as described under the definition of that record type. No data logical
       records are stored for types 1, 2, or 5.  If the typeflag field is set to 3 (character special file),  4  (block  special
       file),  or  6  (FIFO),  the  meaning of the size field is unspecified by this volume of POSIX.1‐2008, and no data logical
       records shall be stored on the medium. Additionally, for type 6, the size field shall be ignored  when  reading.  If  the
       typeflag  field  is  set  to  any  other  value,  the  number  of  logical  records written following the header shall be
       (size+511)/512, ignoring any fraction in the result of the division.

       The mtime field shall be the modification time of the file at the time it was archived. It is the ISO/IEC 646:1991  stan‐
       dard representation of the octal value of the modification time obtained from the stat() function.

       The  chksum  field  shall be the ISO/IEC 646:1991 standard IRV representation of the octal value of the simple sum of all
       octets in the header logical record. Each octet in the header shall be treated as an unsigned value. These  values  shall
       be  added  to an unsigned integer, initialized to zero, the precision of which is not less than 17 bits. When calculating
       the checksum, the chksum field is treated as if it were all &amp;lt;space&amp;gt; characters.

       The typeflag field specifies the type of file archived. If a particular implementation does not recognize  the  type,  or
       the  user  does  not have appropriate privileges to create that type, the file shall be extracted as if it were a regular
       file if the file type is defined to have a meaning for the size field that could cause data logical records to be written
       on  the  medium  (see  the previous description for size).  If conversion to a regular file occurs, the pax utility shall
       produce an error indicating that the  conversion  took  place.  All  of  the  typeflag  fields  shall  be  coded  in  the
       ISO/IEC 646:1991 standard IRV:

       0       Represents  a  regular file. For backwards-compatibility, a typeflag value of binary zero ('\0') should be recog‐
               nized as meaning a regular file when extracting files from the archive. Archives written with this version of the
               archive file format create regular files with a typeflag value of the ISO/IEC 646:1991 standard IRV '0'.

       1       Represents  a  file linked to another file, of any type, previously archived. Such files are identified by having
               the same device and file serial numbers, and pathnames that refer to different directory entries. All such  files
               shall  be  archived  as linked files.  The linked-to name is specified in the linkname field with a NUL-character
               terminator if it is less than 100 octets in length.

       2       Represents a symbolic link. The contents of the symbolic link shall be stored in the linkname field.

       3,4     Represent character special files and block special files respectively.  In this case the devmajor  and  devminor
               fields  shall  contain  information  defining  the  device,  the format of which is unspecified by this volume of
               POSIX.1‐2008. Implementations may map the device specifications to their own local specification  or  may  ignore
               the entry.

       5       Specifies  a  directory  or subdirectory. On systems where disk allocation is performed on a directory basis, the
               size field shall contain the maximum number of octets (which may be rounded to the nearest disk block  allocation
               unit)  that the directory may hold.  A size field of zero indicates no such limiting. Systems that do not support
               limiting in this manner should ignore the size field.

       6       Specifies a FIFO special file. Note that the archiving of a FIFO file archives the existence of this file and not
               its contents.

       7       Reserved to represent a file to which an implementation has associated some high-performance attribute. Implemen‐
               tations without such extensions should treat this file as a regular file (type 0).

       A‐Z     The letters 'A' to 'Z', inclusive, are reserved for custom implementations. All other  values  are  reserved  for
               future versions of this standard.

       It  is unspecified whether files with pathnames that refer to the same directory entry are archived as linked files or as
       separate files. If they are archived as linked files, this means that attempting  to  extract  both  pathnames  from  the
       resulting archive will always cause an error (unless the −u option is used) because the link cannot be created.

       It  is unspecified whether files with the same device and file serial numbers being appended to an archive are treated as
       linked files to members that were in the archive before the append.

       Attempts to archive a socket using ustar interchange format shall produce a diagnostic message. Handling  of  other  file
       types is implementation-defined.

       The  magic  field  is the specification that this archive was output in this archive format. If this field contains ustar
       (the five characters from the ISO/IEC 646:1991 standard IRV shown followed by NUL), the uname and gname fields shall con‐
       tain the ISO/IEC 646:1991 standard IRV representation of the owner and group of the file, respectively (truncated to fit,
       if necessary). When the file is restored by a privileged, protection-preserving version of  the  utility,  the  user  and
       group  databases shall be scanned for these names. If found, the user and group IDs contained within these files shall be
       used rather than the values contained within the uid and gid fields.

   cpio Interchange Format
       The octet-oriented cpio archive format shall be a series of entries, each comprising a header that  describes  the  file,
       the name of the file, and then the contents of the file.

       An archive may be recorded as a series of fixed-size blocks of octets.  This blocking shall be used only to make physical
       I/O more efficient.  The last group of blocks shall always be at the full size.

       For the octet-oriented cpio archive format, the individual  entry  information  shall  be  in  the  order  indicated  and
       described by the following table; see also the &amp;lt;cpio.h&amp;gt; header.

                                             Table 4-16: Octet-Oriented cpio Archive Entry

                                     ┌─────────────────────┬────────────────────┬─────────────────┐
                                     │ Header Field Name   │ Length (in Octets) │ Interpreted as  │
                                     ├─────────────────────┼────────────────────┼─────────────────┤
                                     │c_magic              │          6         │ Octal number    │
                                     │c_dev                │          6         │ Octal number    │
                                     │c_ino                │          6         │ Octal number    │
                                     │c_mode               │          6         │ Octal number    │
                                     │c_uid                │          6         │ Octal number    │
                                     │c_gid                │          6         │ Octal number    │
                                     │c_nlink              │          6         │ Octal number    │
                                     │c_rdev               │          6         │ Octal number    │
                                     │c_mtime              │         11         │ Octal number    │
                                     │c_namesize           │          6         │ Octal number    │
                                     │c_filesize           │         11         │ Octal number    │
                                     ├─────────────────────┼────────────────────┼─────────────────┤
                                     │Filename Field Name  │       Length       │ Interpreted as  │
                                     ├─────────────────────┴────────────────────┴─────────────────┤
                                     │c_name                 c_namesize           Pathname string │
                                     ├─────────────────────┬────────────────────┬─────────────────┤
                                     │File Data Field Name │       Length       │ Interpreted as  │
                                     ├─────────────────────┴────────────────────┴─────────────────┤
                                     │c_filedata             c_filesize           Data            │
                                     └────────────────────────────────────────────────────────────┘
   cpio Header
       For  each  file  in the archive, a header as defined previously shall be written. The information in the header fields is
       written as streams of the ISO/IEC 646:1991 standard characters interpreted as octal numbers. The octal numbers  shall  be
       extended  to  the necessary length by appending the ISO/IEC 646:1991 standard IRV zeros at the most-significant-digit end
       of the number; the result is written to the most-significant digit of the stream of octets first.  The  fields  shall  be
       interpreted as follows:

       c_magic   Identify the archive as being a transportable archive by containing the identifying value "070707".

       c_dev, c_ino
                 Contains  values that uniquely identify the file within the archive (that is, no files contain the same pair of
                 c_dev and c_ino values unless they are links to the same file). The values shall be determined in  an  unspeci‐
                 fied manner.

       c_mode    Contains the file type and access permissions as defined in the following table.

                                                    Table 4-17: Values for cpio c_mode Field

                 │                      │  ───────┬────────────────────────┬──────────────────────────
                 │                      │   File Permissions Name    Value │        Indicates
                 │                      │  ───────┼────────────────────────┼──────────────────────────
                 │                      │   C_IRUSR                  000400│  Read by owner
                 │                      │   C_IWUSR                  000200│  Write by owner
                 │                      │   C_IXUSR                  000100│  Execute by owner
                 │                      │   C_IRGRP                  000040│  Read by group
                 │                      │   C_IWGRP                  000020│  Write by group
                 │                      │   C_IXGRP                  000010│  Execute by group
                 │                      │   C_IROTH                  000004│  Read by others
                 │                      │   C_IWOTH                  000002│  Write by others
                 │                      │   C_IXOTH                  000001│  Execute by others
                 │                      │   C_ISUID                  004000│  Set uid
                 │                      │   C_ISGID                  002000│  Set gid
                 │                      │   C_ISVTX                  001000│  Reserved
                 │                      │  ───────┼────────────────────────┼──────────────────────────
                 │                      │      File Type Name        Value │        Indicates
                 │                      │  ───────┼────────────────────────┼──────────────────────────
                 │                      │   C_ISDIR                  040000│  Directory
                 │                      │   C_ISFIFO                 010000│  FIFO
                 │                      │   C_ISREG                 0100000│  Regular file
                 │                      │   C_ISLNK                 0120000│  Symbolic link
                 │                      │         │                        │
                 │C_ISBLK               │  060000 │ Block special file     │
                 │C_ISCHR               │  020000 │ Character special file │
                 │C_ISSOCK              │ 0140000 │ Socket                 │
                 │                      │         │                        │
                 │C_ISCTG               │ 0110000 │ Reserved               │
                 └──────────────────────┴─────────┴────────────────────────┘
                 Directories,  FIFOs, symbolic links, and regular files shall be supported on a system conforming to this volume
                 of POSIX.1‐2008; additional values defined previously are reserved for  compatibility  with  existing  systems.
                 Additional  file  types  may be supported; however, such files should not be written to archives intended to be
                 transported to other systems.

       c_uid     Contains the user ID of the owner.

       c_gid     Contains the group ID of the group.

       c_nlink   Contains a number greater than or equal to the number of links in the archive referencing the file. If  the  −a
                 option is used to append to a cpio archive, then the pax utility need not account for the files in the existing
                 part of the archive when calculating the c_nlink values for the appended part of  the  archive,  and  need  not
                 alter  the c_nlink values in the existing part of the archive if additional files with the same c_dev and c_ino
                 values are appended to the archive.

       c_rdev    Contains implementation-defined information for character or block special files.

       c_mtime   Contains the latest time of modification of the file at the time the archive was created.

       c_namesize
                 Contains the length of the pathname, including the terminating NUL character.

       c_filesize
                 Contains the length in octets of the data section following the header structure.

   cpio Filename
       The c_name field shall contain the pathname of the file. The length of this field in octets is the value of c_namesize.

       If a filename is found on the medium that would create an invalid pathname, it is implementation-defined whether the data
       from the file is stored on the file hierarchy and under what name it is stored.

       All  characters  shall  be  represented in the ISO/IEC 646:1991 standard IRV. For maximum portability between implementa‐
       tions, names should be selected from characters represented by the portable filename character set  as  octets  with  the
       most  significant  bit  zero. If an implementation supports the use of characters outside the portable filename character
       set in names for files, users, and groups, one or more implementation-defined encodings of these characters shall be pro‐
       vided  for interchange purposes. However, the pax utility shall never create filenames on the local system that cannot be
       accessed via the procedures described previously in this volume of POSIX.1‐2008. If a filename is  found  on  the  medium
       that would create an invalid filename, it is implementation-defined whether the data from the file is stored on the local
       file system and under what name it is stored. The pax utility may choose to ignore these files as long as it produces  an
       error indicating that the file is being ignored.

   cpio File Data
       Following  c_name,  there shall be c_filesize octets of data. Interpretation of such data occurs in a manner dependent on
       the file. For regular files, the data shall consist of the contents of the file. For symbolic links, the data shall  con‐
       sist of the contents of the symbolic link. If c_filesize is zero, no data shall be contained in c_filedata.

       When restoring from an archive:

        *  If  the  user does not have appropriate privileges to create a file of the specified type, pax shall ignore the entry
           and write an error message to standard error.

        *  Only regular files and symbolic links have data to be restored. Presuming a regular file meets any selection criteria
           that might be imposed on the format-reading utility by the user, such data shall be restored.

        *  If  a user does not have appropriate privileges to set a particular mode flag, the flag shall be ignored. Some of the
           mode flags in the archive format are not mentioned elsewhere in this volume of POSIX.1‐2008.  If  the  implementation
           does not support those flags, they may be ignored.

   cpio Special Entries
       FIFO special files, directories, and the trailer shall be recorded with c_filesize equal to zero. Symbolic links shall be
       recorded with c_filesize equal to the length of the contents of the symbolic link.  For other special  files,  c_filesize
       is  unspecified  by  this  volume  of  POSIX.1‐2008.  The  header for the next file entry in the archive shall be written
       directly after the last octet of the file entry preceding it. A header denoting the filename TRAILER!!!   shall  indicate
       the end of the archive; the contents of octets in the last block of the archive following such a header are undefined.

<!-- a42f9355-e63b-4205-ac0b-0b19b24faf9d <=< ACCEPT -->EXIT STATUS
       The following exit values shall be returned:

        0    All files were processed successfully.

       &amp;gt;0    An error occurred.<!-- ACCEPT >=> a42f9355-e63b-4205-ac0b-0b19b24faf9d -->

CONSEQUENCES OF ERRORS
       If  pax  cannot  create a file or a link when reading an archive or cannot find a file when writing an archive, or cannot
       preserve the user ID, group ID, or file mode when the −p option is specified, a diagnostic message shall  be  written  to
       standard  error and a non-zero exit status shall be returned, but processing shall continue. In the case where pax cannot
       create a link to a file, pax shall not, by default, create a second copy of the file.

       If the extraction of a file from an archive is prematurely terminated by a signal or error, pax may have  only  partially
       extracted  the  file or (if the −n option was not specified) may have extracted a file of the same name as that specified
       by the user, but which is not the file the user wanted.  Additionally, the file modes of extracted directories  may  have
       additional bits from the S_IRWXU mask set as well as incorrect modification and access times.

       The following sections are informative.

APPLICATION USAGE
       Caution is advised when using the −a option to append to a cpio format archive. If any of the files being appended happen
       to be given the same c_dev and c_ino values as a file in the existing part of the archive, then they may  be  treated  as
       links  to that file on extraction. Thus, it is risky to use −a with cpio format except when it is done on the same system
       that the original archive was created on, and with the same pax utility, and in the knowledge that there has been  little
       or  no  file  system  activity  since the original archive was created that could lead to any of the files appended being
       given the same c_dev and c_ino values as an unrelated file in the existing part of the archive.  Also,  when  (intention‐
       ally)  appending  additional  links to a file in the existing part of the archive, the c_nlink values in the modified ar‐
       chive can be smaller than the number of links to the file in the archive, which may mean that the links are not preserved
       on extraction.

       The −p (privileges) option was invented to reconcile differences between historical tar and cpio implementations. In par‐
       ticular, the two utilities use −m in diametrically opposed ways. The −p  option  also  provides  a  consistent  means  of
       extending  the  ways in which future file attributes can be addressed, such as for enhanced security systems or high-per‐
       formance files. Although it may seem complex, there are really two modes that are most commonly used:

       −p e    ``Preserve everything''. This would be used by the historical superuser, someone with all appropriate privileges,
               to  preserve  all aspects of the files as they are recorded in the archive. The e flag is the sum of o and p, and
               other implementation-defined attributes.

       −p p    ``Preserve'' the file mode bits. This would be used by the user with regular privileges who  wished  to  preserve
               aspects  of  the  file other than the ownership. The file times are preserved by default, but two other flags are
               offered to disable these and use the time of extraction.

       The one pathname per line format of standard input precludes pathnames containing  &amp;lt;newline&amp;gt;  characters.  Although  such
       pathnames  violate  the  portable  filename guidelines, they may exist and their presence may inhibit usage of pax within
       shell scripts. This problem is inherited from historical archive programs. The problem can be avoided by listing filename
       arguments on the command line instead of on standard input.

       It is almost certain that appropriate privileges are required for pax to accomplish parts of this volume of POSIX.1‐2008.
       Specifically, creating files of type block special or character special, restoring file access times unless the files are
       owned  by the user (the −t option), or preserving file owner, group, and mode (the −p option) all probably require appro‐
       priate privileges.

       In read mode, implementations are permitted to overwrite files when the archive has multiple members with the same  name.
       This may fail if permissions on the first version of the file do not permit it to be overwritten.

       The cpio and ustar formats can only support files up to 8589934592 bytes (8 ∗ 2^30) in size.

       When  archives containing binary header information are listed , the filenames printed may cause strange behavior on some
       terminals.

       When all of the following are true:

        1. A file of type directory is being placed into an archive.

        2. The ustar archive format is being used.

        3. The pathname of the directory is less than or equal to 155 bytes long (it will fit in the prefix field in  the  ustar
           header block).

        4. The  last component of the pathname of the directory is longer than 100 bytes long (it will not fit in the name field
           in the ustar header block).

       some implementations of the pax utility will place the entire directory pathname in the prefix field, set the name  field
       to  an empty string, and place the directory in the archive.  Other implementations of the pax utility will give an error
       under these conditions because the name field is not large enough to hold the last component of the directory name.  This
       standard allows either behavior. However, when extracting a directory from a ustar format archive, this standard requires
       that all implementations be able to extract a directory even if the name field contains an empty string as  long  as  the
       prefix field does not also contain an empty string.

EXAMPLES
       The following command:

           pax −w −f /dev/rmt/1m .

       copies  the contents of the current directory to tape drive 1, medium density (assuming historical System V device naming
       procedures—the historical BSD device name would be /dev/rmt9).

       The following commands:

           mkdir newdir
           pax −rw olddir newdir

       copy the olddir directory hierarchy to newdir.

           pax −r −s ',^//*usr//*,,' −f a.pax

       reads the archive a.pax, with all files rooted in /usr in the archive extracted relative to the current directory.

       Using the option:

           −o listopt="%M %(atime)T %(size)D %(name)s"

       overrides the default output description in Standard Output and instead writes:

           −rw−rw−−− Jan 12 15:53 2003 1492 /usr/foo/bar

       Using the options:

           −o listopt='%L\t%(size)D\n%.7' \
           −o listopt='(name)s\n%(atime)T\n%T'

       overrides the default output description in Standard Output and instead writes:

           /usr/foo/bar −&amp;gt; /tmp   1492
           /usr/fo
           Jan 12 15:53 1991
           Jan 31 15:53 2003

RATIONALE
       The pax utility was new for the ISO POSIX‐2:1993 standard. It represents a peaceful compromise between advocates  of  the
       historical tar and cpio utilities.

       A  fundamental  difference  between  cpio and tar was in the way directories were treated. The cpio utility did not treat
       directories differently from other files, and to select a directory and its contents required that each file in the hier‐
       archy be explicitly specified. For tar, a directory matched every file in the file hierarchy it rooted.

       The  pax  utility  offers  both  interfaces; by default, directories map into the file hierarchy they root. The −d option
       causes pax to skip any file not explicitly referenced, as cpio historically did. The tar −style behavior  was  chosen  as
       the  default  because  it was believed that this was the more common usage and because tar is the more commonly available
       interface, as it was historically provided on both System V and BSD implementations.

       The data interchange format specification in this volume of POSIX.1‐2008 requires that processes with ``appropriate priv‐
       ileges''  shall  always  restore the ownership and permissions of extracted files exactly as archived. If viewed from the
       historic equivalence between superuser and ``appropriate privileges'', there are  two  problems  with  this  requirement.
       First, users running as superusers may unknowingly set dangerous permissions on extracted files. Second, it is needlessly
       limiting, in that superusers cannot extract files and own them as superuser unless the archive was created by  the  supe‐
       ruser.  (It  should  be noted that restoration of ownerships and permissions for the superuser, by default, is historical
       practice in cpio, but not in In order to avoid these two problems, the pax specification has an additional  ``privilege''
       mechanism,  the  −p option. Only a pax invocation with the privileges needed, and which has the −p option set using the e
       specification character, has appropriate privileges to restore full ownership and permission information.

       Note also that this volume of POSIX.1‐2008 requires that the file ownership and  access  permissions  shall  be  set,  on
       extraction,  in  the  same  fashion as the creat() function when provided with the mode stored in the archive. This means
       that the file creation mask of the user is applied to the file permissions.

       Users should note that directories may be created by pax while extracting files with permissions that are different  from
       those  that existed at the time the archive was created. When extracting sensitive information into a directory hierarchy
       that no longer exists, users are encouraged to set their file creation mask appropriately to protect these  files  during
       extraction.

       The table of contents output is written to standard output to facilitate pipeline processing.

       An  early proposal had hard links displaying for all pathnames. This was removed because it complicates the output of the
       case where −v is not specified and does not match historical cpio usage. The hard-link information is available in the −v
       display.

       The  description  of the −l option allows implementations to make hard links to symbolic links.  Earlier versions of this
       standard did not specify any way to create a hard link to a symbolic link, but many implementations provided  this  capa‐
       bility  as  an  extension.  If  there  are hard links to symbolic links when an archive is created, the implementation is
       required to archive the hard link in the archive (unless −H or −L is specified). When in read  mode  and  in  copy  mode,
       implementations supporting hard links to symbolic links should use them when appropriate.

       The  archive formats inherited from the POSIX.1‐1990 standard have certain restrictions that have been brought along from
       historical usage. For example, there are restrictions on the length of pathnames stored in the archive.  When pax is used
       in  copy(−rw)  mode  (copying directory hierarchies), the ability to use extensions from the −xpax format overcomes these
       restrictions.

       The default blocksize value of 5120 bytes for cpio was selected because it is one of the standard block-size  values  for
       cpio,  set  when the −B option is specified. (The other default block-size value for cpio is 512 bytes, and this was con‐
       sidered to be too small.) The default block value of 10240 bytes for tar was selected because that is the standard block-
       size  value for BSD tar.  The maximum block size of 32256 bytes (215−512 bytes) is the largest multiple of 512 bytes that
       fits into a signed 16-bit tape controller transfer register. There are known limitations in some historical systems  that
       would  prevent  larger blocks from being accepted. Historical values were chosen to improve compatibility with historical
       scripts using dd or similar utilities to manipulate archives. Also, default block sizes for  any  file  type  other  than
       character  special  file  has  been  deleted from this volume of POSIX.1‐2008 as unimportant and not likely to affect the
       structure of the resulting archive.

       Implementations are permitted to modify the block-size value based on the archive format or the device to which  the  ar‐
       chive  is  being  written.  This is to provide implementations with the opportunity to take advantage of special types of
       devices, and it should not be used without a great deal of consideration as it almost certainly decreases archive  porta‐
       bility.

       The  intended  use of the −n option was to permit extraction of one or more files from the archive without processing the
       entire archive. This was viewed by the standard developers as offering significant performance advantages over historical
       implementations.  The  −n  option in early proposals had three effects; the first was to cause special characters in pat‐
       terns to not be treated specially. The second was to cause only the first file that matched a pattern  to  be  extracted.
       The  third  was  to cause pax to write a diagnostic message to standard error when no file was found matching a specified
       pattern. Only the second behavior is retained by this volume of POSIX.1‐2008, for many reasons. First, it is  in  general
       not  acceptable for a single option to have multiple effects. Second, the ability to make pattern matching characters act
       as normal characters is useful for parts of pax other than file extraction. Third, a finer degree  of  control  over  the
       special  characters  is  useful because users may wish to normalize only a single special character in a single filename.
       Fourth, given a more general escape mechanism, the previous behavior of the −n option can be easily obtained using the −s
       option  or  a  sed script. Finally, writing a diagnostic message when a pattern specified by the user is unmatched by any
       file is useful behavior in all cases.

       In this version, the −n was removed from the copy mode synopsis of pax; it is inapplicable because there are  no  pattern
       operands specified in this mode.

       There  is  another method than pax for copying subtrees in POSIX.1‐2008 described as part of the cp utility. Both methods
       are historical practice: cp provides a simpler, more intuitive interface, while pax offers a finer  granularity  of  con‐
       trol.  Each  provides  additional functionality to the other; in particular, pax maintains the hard-link structure of the
       hierarchy while cp does not. It is the intention of the standard developers that the results be similar (using  appropri‐
       ate  option combinations in both utilities). The results are not required to be identical; there seemed insufficient gain
       to applications to balance the difficulty of implementations having to guarantee that the results would be exactly  iden‐
       tical.

       A  single  archive  may span more than one file. It is suggested that implementations provide informative messages to the
       user on standard error whenever the archive file is changed.

       The −d option (do not create intermediate directories not listed in the archive) found in early proposals was  originally
       provided as a complement to the historic −d option of cpio.  It has been deleted.

       The −s option in early proposals specified a subset of the substitution command from the ed utility. As there was no rea‐
       son for only a subset to be supported, the −s option is now compatible with  the  current  ed  specification.  Since  the
       delimiter can be any non-null character, the following usage with single &amp;lt;space&amp;gt; characters is valid:

           pax −s " foo bar " ...

       The  −t  description  is  worded  so  as to note that this may cause the access time update caused by some other activity
       (which occurs while the file is being read) to be overwritten.

       The default behavior of pax with regard to file modification times is the same as historical implementations of tar.   It
       is not the historical behavior of cpio.

       Because the −i option uses /dev/tty, utilities without a controlling terminal are not able to use this option.

       The  −y  option, found in early proposals, has been deleted because a line containing a single &amp;lt;period&amp;gt; for the −i option
       has equivalent functionality. The special lines for the −i option (a single &amp;lt;period&amp;gt; and the empty line)  are  historical
       practice in cpio.

       In  early  drafts, a −echarmap option was included to increase portability of files between systems using different coded
       character sets. This option was omitted because it was apparent that consensus could not be formed for it. In  this  ver‐
       sion, the use of UTF‐8 should be an adequate substitute.

       The  ISO POSIX‐2:1993 standard and ISO POSIX‐1 standard requirements for pax, however, made it very difficult to create a
       single archive containing files created using extended characters provided by different locales.  This version  adds  the
       hdrcharset keyword to make it possible to archive files in these cases without dropping files due to translation errors.

       Translating filenames and other attributes from a locale's encoding to UTF‐8 and then back again can lose information, as
       the resulting filename might not be byte-for-byte equivalent to the original. To avoid this problem,  users  can  specify
       the  −o  hdrcharset=binary  option,  which  will  cause  the  resulting  archive  to  use binary format for all names and
       attributes. Such archives are not portable among hosts that use different native encodings (e.g.,  EBCDIC  versus  ASCII-
       based  encodings),  but they will allow interchange among the vast majority of POSIX file systems in practical use. Also,
       the −o hdrcharset=binary option will cause pax in copy mode to behave more like other standard utilities such as cp.

       If the values specified by the −o exthdr.name=value, −o globexthdr.name=value, or by $TMPDIR (if  −o  globexthdr.name  is
       not  specified)  require a character encoding other than that described in the ISO/IEC 646:1991 standard, a path extended
       header record will have to be created for the file. If a hdrcharset extended header record is active for such headers, it
       will  determine  the  codeset  used for the value field in these extended path header records. These path extended header
       records always need to be created when writing an archive even if hdrcharset=binary has been specified and would  contain
       the  same  (binary)  data  that  appears  in the ustar header record prefix and name fields. (In other words, an extended
       header path record is always required to be generated if the prefix or name fields contain non-ASCII characters even when
       hdrcharset=binary is also in effect for that file.)

       The −k option was added to address international concerns about the dangers involved in the character set transformations
       of −e (if the target character set were different from the source, the filenames might be transformed into names matching
       existing  files)  and  also  was  made  more  general  to  protect  files transferred between file systems with different
       {NAME_MAX} values (truncating a filename on a smaller system might  also  inadvertently  overwrite  existing  files).  As
       stated, it prevents any overwriting, even if the target file is older than the source. This version adds more granularity
       of options to solve this problem by introducing the −oinvalid=option—specifically the UTF‐8  and  binary  actions.  (Note
       that an existing file is still subject to overwriting in this case. The −k option closes that loophole.)

       Some  of  the  file characteristics referenced in this volume of POSIX.1‐2008 might not be supported by some archive for‐
       mats. For example, neither the tar nor cpio formats contain the file access time. For this reason,  the  e  specification
       character has been provided, intended to cause all file characteristics specified in the archive to be retained.

       It  is  required  that extracted directories, by default, have their access and modification times and permissions set to
       the values specified in the archive. This has obvious problems in that the  directories  are  almost  certainly  modified
       after  being  extracted  and  that directory permissions may not permit file creation. One possible solution is to create
       directories with the mode specified in the archive, as modified by the umask of the user, with sufficient permissions  to
       allow file creation. After all files have been extracted, pax would then reset the access and modification times and per‐
       missions as necessary.

       The list-mode formatting description borrows heavily from the one defined by the printf utility. However, since there  is
       no separate operand list to get conversion arguments, the format was extended to allow specifying the name of the conver‐
       sion argument as part of the conversion specification.

       The T conversion specifier allows time fields to be displayed in any of the date formats. Unlike the ls utility, pax does
       not adjust the format when the date is less than six months in the past. This makes parsing the output more predictable.

       The D conversion specifier handles the ability to display the major/minor or file size, as with ls, by using %−8(size)D.

       The L conversion specifier handles the ls display for symbolic links.

       Conversion specifiers were added to generate existing known types used for ls.

   pax Interchange Format
       The  new  POSIX data interchange format was developed primarily to satisfy international concerns that the ustar and cpio
       formats did not provide for file, user, and group names encoded in characters outside a subset  of  the  ISO/IEC 646:1991
       standard.  The standard developers realized that this new POSIX data interchange format should be very extensible because
       there were other requirements they foresaw in the near future:

        *  Support international character encodings and locale information

        *  Support security information (ACLs, and so on)

        *  Support future file types, such as realtime or contiguous files

        *  Include data areas for implementation use

        *  Support systems with words larger than 32 bits and timers with subsecond granularity

       The following were not goals for this format because these are better handled by separate utilities or are  inappropriate
       for a portable format:

        *  Encryption

        *  Compression

        *  Data translation between locales and codesets

        *  inode storage

       The format chosen to support the goals is an extension of the ustar format. Of the two formats previously available, only
       the ustar format was selected for extensions because:

        *  It was easier to extend in an upwards-compatible way. It offered version flags and header block type fields with room
           for  future  standardization. The cpio format, while possessing a more flexible file naming methodology, could not be
           extended without breaking some theoretical implementation or using a dummy filename that could be a legitimate  file‐
           name.

        *  Industry experience since the original ``tar wars'' fought in developing the ISO POSIX‐1 standard has clearly been in
           favor of the ustar format, which is generally the default output format selected for pax implementations on new  sys‐
           tems.

       The  new  format was designed with one additional goal in mind: reasonable behavior when an older tar or pax utility hap‐
       pened to read an archive. Since the POSIX.1‐1990 standard mandated that a ``format-reading utility'' had to treat  unrec‐
       ognized  typeflag  values  as regular files, this allowed the format to include all the extended information in a pseudo-
       regular file that preceded each real file. An option is given that allows the archive creator to set up reasonable  names
       for  these  files  on the older systems. Also, the normative text suggests that reasonable file access values be used for
       this ustar header block. Making these header files inaccessible for convenient reading and deleting would not be  reason‐
       able. File permissions of 600 or 700 are suggested.

       The ustar typeflag field was used to accommodate the additional functionality of the new format rather than magic or ver‐
       sion because the POSIX.1‐1990 standard (and, by reference, the previous version of pax), mandated  the  behavior  of  the
       format-reading utility when it encountered an unknown typeflag, but was silent about the other two fields.

       Early  proposals for the first version of this standard contained a proposed archive format that was based on compatibil‐
       ity with the standard for tape files (ISO 1001, similar to the format used historically on many mainframes  and  minicom‐
       puters). This format was overly complex and required considerable overhead in volume and header records. Furthermore, the
       standard developers felt that it would not be acceptable to the community of POSIX developers, so it was later changed to
       be a format more closely related to historical practice on POSIX systems.

       The prefix and name split of pathnames in ustar was replaced by the single path extended header record for simplicity.

       The  concept of a global extended header (typeflagg) was controversial. If this were applied to an archive being recorded
       on magnetic tape, a few unreadable blocks at the beginning of the tape could be a serious problem; a  utility  attempting
       to  extract  as many files as possible from a damaged archive could lose a large percentage of file header information in
       this case. However, if the archive were on a reliable medium, such as a CD‐ROM, the global extended header offers consid‐
       erable  potential  size  reductions  by  eliminating redundant information. Thus, the text warns against using the global
       method for unreliable media and provides a method for implanting global information in the extended header for each file,
       rather than in the typeflag g records.

       No  facility  for data translation or filtering on a per-file basis is included because the standard developers could not
       invent an interface that would allow this in an efficient manner. If a filter, such as encryption or compression,  is  to
       be  applied  to all the files, it is more efficient to apply the filter to the entire archive as a single file. The stan‐
       dard developers considered interfaces that would invoke a shell script for each file going into or out  of  the  archive,
       but the system overhead in this approach was considered to be too high.

       One  such  approach would be to have filter= records that give a pathname for an executable. When the program is invoked,
       the file and archive would be open for standard input/output and all the header fields would be available as  environment
       variables  or  command-line  arguments.  The  standard  developers  did  discuss such schemes, but they were omitted from
       POSIX.1‐2008 due to concerns about excessive overhead. Also, the program itself would need to be in  the  archive  if  it
       were to be used portably.

       There  is  currently no portable means of identifying the character set(s) used for a file in the file system. Therefore,
       pax has not been given a mechanism to generate charset records automatically. The only portable means of  doing  this  is
       for  the  user to write the archive using the −ocharset=string command line option. This assumes that all of the files in
       the archive use the same encoding. The ``implementation-defined'' text is included to allow for a system that  can  iden‐
       tify the encodings used for each of its files.

       The table of standards that accompanies the charset record description is acknowledged to be very limited. Only a limited
       number of character set standards is reasonable for maximal interchange. Any character set is,  of  course,  possible  by
       prior  agreement.  It was suggested that EBCDIC be listed, but it was omitted because it is not defined by a formal stan‐
       dard. Formal standards, and then only those with reasonably large followings, can be included here, simply as a matter of
       practicality.  The  &amp;lt;value&amp;gt;s  represent  names  of  officially  registered  character  sets in the format required by the
       ISO 2375:1985 standard.

       The normal &amp;lt;comma&amp;gt; or &amp;lt;blank&amp;gt;-separated list rules are not followed in the case of keyword options to allow ease of argu‐
       ment parsing for getopts.

       Further information on character encodings is in pax Archive Character Set Encoding/Decoding.

       The  standard  developers  have  reserved keyword name space for vendor extensions. It is suggested that the format to be
       used is:

           VENDOR.keyword

       where VENDOR is the name of the vendor or organization in all uppercase letters. It is further suggested that the keyword
       following  the  &amp;lt;period&amp;gt; be named differently than any of the standard keywords so that it could be used for future stan‐
       dardization, if appropriate, by omitting the VENDOR prefix.

       The &amp;lt;length&amp;gt; field in the extended header record was included to make it simpler to step through the records, even  if  a
       record contains an unknown format (to a particular pax) with complex interactions of special characters. It also provides
       a minor integrity checkpoint within the records to aid a program attempting to recover files from a damaged archive.

       There are no extended header versions of the devmajor and devminor fields because the  unspecified  format  ustar  header
       field should be sufficient. If they are not, vendor-specific extended keywords (such as VENDOR.devmajor) should be used.

       Device  and  i-number  labeling  of  files  was not adopted from cpio; files are interchanged strictly on a symbolic name
       basis, as in ustar.

       Just as with the ustar format descriptions, the new format makes no special arrangements for multi-volume archives.  Each
       of  the  pax  archive  types  is  assumed  to be inside a single POSIX file and splitting that file over multiple volumes
       (diskettes, tape cartridges, and so on), processing their labels, and mounting each in the proper sequence are considered
       to be implementation details that cannot be described portably.

       The  pax  format  is  intended for interchange, not only for backup on a single (family of) systems. It is not as densely
       packed as might be possible for backup:

        *  It contains information as coded characters that could be coded in binary.

        *  It identifies extended records with name fields that could be omitted in favor of a fixed-field layout.

        *  It translates names into a portable character set and identifies locale-related information, both of which are proba‐
           bly unnecessary for backup.

       The  requirements on restoring from an archive are slightly different from the historical wording, allowing for non-mono‐
       lithic privilege to bring forward as much as possible. In particular, attributes such as ``high performance file''  might
       be  broadly  but not universally granted while set-user-ID or chown() might be much more restricted. There is no implica‐
       tion in POSIX.1‐2008 that the security information be honored after it is restored to the file  hierarchy,  in  spite  of
       what might be improperly inferred by the silence on that topic. That is a topic for another standard.

       Links are recorded in the fashion described here because a link can be to any file type. It is desirable in general to be
       able to restore part of an archive selectively and restore all of those files completely. If the data is  not  associated
       with  each link, it is not possible to do this. However, the data associated with a file can be large, and when selective
       restoration is not needed, this can be a significant burden.  The archive is structured so that files that have no  asso‐
       ciated  data  can  always  be  restored by the name of any link name of any link, and the user may choose whether data is
       recorded with each instance of a file that contains data. The format permits mixing of both types of links  in  a  single
       archive;  this  can  be done for special needs, and pax is expected to interpret such archives on input properly, despite
       the fact that there is no pax option that would force this mixed case on output. (When −o linkdata is  used,  the  output
       must contain the duplicate data, but the implementation is free to include it or omit it when −o linkdata is not used.)

       The time values are included as extended header records for those implementations needing more than the eleven octal dig‐
       its allowed by the ustar format. Portable file timestamps cannot be negative. If pax encounters a file  with  a  negative
       timestamp  in copy or write mode, it can reject the file, substitute a non-negative timestamp, or generate a non-portable
       timestamp with a leading '−'.  Even though some implementations can support finer file-time granularities  than  seconds,
       the  normative  text  requires support only for seconds since the Epoch because the ISO POSIX‐1 standard states them that
       way. The ustar format includes only mtime; the new format adds atime and  ctime  for  symmetry.  The  atime  access  time
       restored  to the file system will be affected by the −p a and −p e options. The ctime creation time (actually inode modi‐
       fication time) is described with appropriate privileges so that it can be ignored when writing to the file system.  POSIX
       does not provide a portable means to change file creation time. Nothing is intended to prevent a non-portable implementa‐
       tion of pax from restoring the value.

       The gid, size, and uid extended header records were included to allow expansion beyond the sizes specified in the regular
       tar  header. New file system architectures are emerging that will exhaust the 12-digit size field. There are probably not
       many systems requiring more than 8 digits for user and group IDs, but the extended header values were included  for  com‐
       pleteness, allowing overrides for all of the decimal values in the tar header.

       The standard developers intended to describe the effective results of pax with regard to file ownerships and permissions;
       implementations are not restricted in timing or sequencing the restoration of such, provided the results  are  as  speci‐
       fied.

       Much  of  the text describing the extended headers refers to use in ``write or copy modes''. The copy mode references are
       due to the normative text: ``The effect of the copy shall be as if the copied files were written to an archive  file  and
       then  subsequently  extracted  ...''.  There  is certainly no way to test whether pax is actually generating the extended
       headers in copy mode, but the effects must be as if it had.

   pax Archive Character Set Encoding/Decoding
       There is a need to exchange archives of files between systems of different native codesets. Filenames, group  names,  and
       user  names  must be preserved to the fullest extent possible when an archive is read on the receiving platform. Transla‐
       tion of the contents of files is not within the scope of the pax utility.

       There will also be the need to represent characters that are not available on the receiving platform.  These  unsupported
       characters  cannot  be  automatically  folded  to the local set of characters due to the chance of collisions. This could
       result in overwriting previous extracted files from the archive or pre-existing files on the system.

       For these reasons, the codeset used to represent characters within the extended header records of the pax archive must be
       sufficiently  rich  to  handle  all commonly used character sets. The fields requiring translation include, at a minimum,
       filenames, user names, group names, and link pathnames. Implementations may wish to have localized extended keywords that
       use non-portable characters.

       The standard developers considered the following options:

        *  The archive creator specifies the well-defined name of the source codeset. The receiver must then recognize the code‐
           set name and perform the appropriate translations to the destination codeset.

        *  The archive creator includes within the archive the character mapping table for the source  codeset  used  to  encode
           extended  header records.  The receiver must then read the character mapping table and perform the appropriate trans‐
           lations to the destination codeset.

        *  The archive creator translates the extended header records in the source codeset into a canonical form. The  receiver
           must then perform the appropriate translations to the destination codeset.

       The  approach  that incorporates the name of the source codeset poses the problem of codeset name registration, and makes
       the archive useless to pax archive decoders that do not recognize that codeset.

       Because parts of an archive may be corrupted, the standard developers felt that including the character map of the source
       codeset  was too fragile. The loss of this one key component could result in making the entire archive useless. (The dif‐
       ference between this and the global extended header decision was that the latter has  a  workaround—duplicating  extended
       header records on unreliable media—but this would be too burdensome for large character set maps.)

       Both  of  the  above  approaches  also put an undue burden on the pax archive receiver to handle the cross-product of all
       source and destination codesets.

       To simplify the translation from the source codeset to the canonical form and from the canonical form to the  destination
       codeset,  the  standard  developers  decided that the internal representation should be a stateless encoding. A stateless
       encoding is one where each codepoint has the same meaning, without regard to the decoder being in a  specific  state.  An
       example  of  a  stateful  encoding  would  be  the  Japanese  Shift-JIS;  an example of a stateless encoding would be the
       ISO/IEC 646:1991 standard (equivalent to 7-bit ASCII).

       For these reasons, the standard developers decided to adopt a canonical format for the representation of file information
       strings.  The obvious, well-endorsed candidate is the ISO/IEC 10646‐1:2000 standard (based in part on Unicode), which can
       be used to represent the characters of virtually all standardized  character  sets.  The  standard  developers  initially
       agreed  upon  using UCS2 (16-bit Unicode) as the internal representation. This repertoire of characters provides a suffi‐
       ciently rich set to represent all commonly-used codesets.

       However, the standard developers found that the 16-bit Unicode representation had some problems. It forced the  issue  of
       standardizing  byte  ordering. The 2-byte length of each character made the extended header records twice as long for the
       case of strings coded entirely from historical 7-bit ASCII. For these reasons, the standard developers  chose  the  UTF‐8
       defined in the ISO/IEC 10646‐1:2000 standard. This multi-byte representation encodes UCS2 or UCS4 characters reliably and
       deterministically, eliminating the need for a canonical byte ordering. In addition, NUL octets and other characters  pos‐
       sibly  confusing  to  POSIX  file  systems  do  not  appear, except to represent themselves. It was realized that certain
       national codesets take up more space after the encoding, due to their placement within the UCS range; it  was  felt  that
       the usefulness of the encoding of the names outweighs the disadvantage of size increase for file, user, and group names.

       The encoding of UTF‐8 is as follows:

           UCS4 Hex Encoding  UTF-8 Binary Encoding

           00000000-0000007F  0xxxxxxx
           00000080-000007FF  110xxxxx 10xxxxxx
           00000800-0000FFFF  1110xxxx 10xxxxxx 10xxxxxx
           00010000-001FFFFF  11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
           00200000-03FFFFFF  111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx
           04000000-7FFFFFFF  1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx

       where each 'x' represents a bit value from the character being translated.

   ustar Interchange Format
       The  description of the ustar format reflects numerous enhancements over pre-1988 versions of the historical tar utility.
       The goal of these changes was not only to provide the functional enhancements desired, but also to  retain  compatibility
       between  new  and  old versions. This compatibility has been retained.  Archives written using the old archive format are
       compatible with the new format.

       Implementors should be aware that the previous file format did not include a mechanism to archive directory  type  files.
       For  this  reason,  the  convention of using a filename ending with &amp;lt;slash&amp;gt; was adopted to specify a directory on the ar‐
       chive.

       The total size of the name and prefix fields have been set to meet the minimum requirements for {PATH_MAX}.  If  a  path‐
       name  will  fit  within the name field, it is recommended that the pathname be stored there without the use of the prefix
       field. Although the name field is known to be too small to contain {PATH_MAX} characters, the value was  not  changed  in
       this  version  of the archive file format to retain backwards-compatibility, and instead the prefix was introduced. Also,
       because of the earlier version of the format, there is no way to remove the restriction on the linkname field being  lim‐
       ited in size to just that of the name field.

       The size field is required to be meaningful in all implementation extensions, although it could be zero. This is required
       so that the data blocks can always be properly counted.

       It is suggested that if device special files need to be represented that cannot be represented in  the  standard  format,
       that one of the extension types (A‐Z) be used, and that the additional information for the special file be represented as
       data and be reflected in the size field.

       Attempting to restore a special file type, where it is converted to ordinary data and conflicts with  an  existing  file‐
       name,  need not be specially detected by the utility. If run as an ordinary user, pax should not be able to overwrite the
       entries in, for example, /dev in any case (whether the file is converted to another type or not). If run as a  privileged
       user, it should be able to do so, and it would be considered a bug if it did not. The same is true of ordinary data files
       and similarly named special files; it is impossible to anticipate the needs of the user (who could really intend to over‐
       write the file), so the behavior should be predictable (and thus regular) and rely on the protection system as required.

       The  value  7  in  the  typeflag  field  is  intended  to  define  how contiguous files can be stored in a ustar archive.
       POSIX.1‐2008 does not require the contiguous file extension, but does define a standard way of archiving  such  files  so
       that  all  conforming systems can interpret these file types in a meaningful and consistent manner. On a system that does
       not support extended file types, the pax utility should do the best it can with the file and go on to the next.

       The file protection modes are those conventionally used by the ls utility. This is  extended  beyond  the  usage  in  the
       ISO POSIX‐2  standard  to  support  the  ``shared  text'' or ``sticky'' bit. It is intended that the conformance document
       should not document anything beyond the existence of and support of such a mode. Further extensions are expected to these
       bits, particularly with overloading the set-user-ID and set-group-ID flags.

   cpio Interchange Format
       The  reference  to appropriate privileges in the cpio format refers to an error on standard output; the ustar format does
       not make comparable statements.

       The model for this format was the historical System V cpio−c data interchange format. This model documents  the  portable
       version  of  the  cpio  format  and not the binary version. It has the flexibility to transfer data of any type described
       within POSIX.1‐2008, yet is extensible to transfer data types specific to extensions beyond  POSIX.1‐2008  (for  example,
       contiguous files). Because it describes existing practice, there is no question of maintaining upwards-compatibility.

   cpio Header
       There has been some concern that the size of the c_ino field of the header is too small to handle those systems that have
       very large inode numbers. However, the c_ino field in the header is used strictly as a hard-link resolution mechanism for
       archives.  It  is  not necessarily the same value as the inode number of the file in the location from which that file is
       extracted.

       The name c_magic is based on historical usage.

   cpio Filename
       For most historical implementations of the cpio utility, {PATH_MAX} octets can be used to describe the  pathname  without
       the  addition  of any other header fields (the NUL character would be included in this count).  {PATH_MAX} is the minimum
       value for pathname size, documented as 256 bytes.  However, an implementation may use c_namesize to determine  the  exact
       length of the pathname. With the current description of the &amp;lt;cpio.h&amp;gt; header, this pathname size can be as large as a num‐
       ber that is described in six octal digits.

       Two values are documented under the c_mode field values to provide for extensibility for known file types:

       0110 000  Reserved for contiguous files. The implementation may treat the rest of the information for this archive like a
                 regular file. If this file type is undefined, the implementation may create the file as a regular file.

       This  provides  for  extensibility  of  the  cpio format while allowing for the ability to read old archives. Files of an
       unknown type may be read as ``regular files'' on some implementations.  On a system that does not support  extended  file
       types, the pax utility should do the best it can with the file and go on to the next.

FUTURE DIRECTIONS
       None.

SEE ALSO
       Chapter 2, Shell Command Language, cp, ed, getopts, ls, printf

       The  Base  Definitions volume of POSIX.1‐2008, Section 3.169, File Mode Bits, Chapter 5, File Format Notation, Chapter 8,
       Environment Variables, Section 12.2, Utility Syntax Guidelines, &amp;lt;cpio.h&amp;gt;

       The System Interfaces volume of POSIX.1‐2008, chown(), creat(), fstatat(), mkdir(), mkfifo(), utime(), write()

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013  Edition,  Standard  for
       Information  Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7, Copy‐
       right (C) 2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This  is  POSIX.1-2008
       with  the  2013  Technical  Corrigendum 1 applied.) In the event of any discrepancy between this version and the original
       IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the  referee  document.  The  original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any  typographical  or formatting errors that appear in this page are most likely to have been introduced during the con‐
       version of the source files to man page format. To report such errors,  see  https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                       PAX(1P)
PR(1)                                                     User Commands                                                    PR(1)

NAME
       pr - convert text files for printing

SYNOPSIS
       pr [OPTION]... [FILE]...

DESCRIPTION
       Paginate or columnate FILE(s) for printing.

       With no FILE, or when FILE is -, read standard input.

       Mandatory arguments to long options are mandatory for short options too.

       +FIRST_PAGE[:LAST_PAGE], --pages=FIRST_PAGE[:LAST_PAGE]
              begin [stop] printing with page FIRST_[LAST_]PAGE

       -COLUMN, --columns=COLUMN
              output  COLUMN  columns  and print columns down, unless -a is used. Balance number of lines in the columns on each
              page

       -a, --across
              print columns across rather than down, used together with -COLUMN

       -c, --show-control-chars
              use hat notation (^G) and octal backslash notation

       -d, --double-space
              double space the output

       -D, --date-format=FORMAT
              use FORMAT for the header date

       -e[CHAR[WIDTH]], --expand-tabs[=CHAR[WIDTH]]
              expand input CHARs (TABs) to tab WIDTH (8)

       -F, -f, --form-feed
              use form feeds instead of newlines to separate pages (by a 3-line page header with  -F  or  a  5-line  header  and
              trailer without -F)

       -h, --header=HEADER
              use a centered HEADER instead of filename in page header, -h "" prints a blank line, don't use -h""

       -i[CHAR[WIDTH]], --output-tabs[=CHAR[WIDTH]]
              replace spaces with CHARs (TABs) to tab WIDTH (8)

       -J, --join-lines
              merge full lines, turns off -W line truncation, no column alignment, --sep-string[=STRING] sets separators

       -l, --length=PAGE_LENGTH
              set the page length to PAGE_LENGTH (66) lines (default number of lines of text 56, and with -F 63).  implies -t if
              PAGE_LENGTH &amp;lt;= 10

       -m, --merge
              print all files in parallel, one in each column, truncate lines, but join lines of full length with -J

       -n[SEP[DIGITS]], --number-lines[=SEP[DIGITS]]
              number lines, use DIGITS (5) digits, then SEP (TAB), default counting starts with 1st line of input file

       -N, --first-line-number=NUMBER
              start counting with NUMBER at 1st line of first page printed (see +FIRST_PAGE)

       -o, --indent=MARGIN
              offset each line with MARGIN (zero) spaces, do not affect -w or -W, MARGIN will be added to PAGE_WIDTH

       -r, --no-file-warnings
              omit warning when a file cannot be opened

       -s[CHAR], --separator[=CHAR]
              separate columns by a single character, default for CHAR is the &amp;lt;TAB&amp;gt; character without -w and 'no char' with  -w.
              -s[CHAR] turns off line truncation of all 3 column options (-COLUMN|-a -COLUMN|-m) except -w is set

       -S[STRING], --sep-string[=STRING]
              separate  columns by STRING, without -S: Default separator &amp;lt;TAB&amp;gt; with -J and &amp;lt;space&amp;gt; otherwise (same as -S" "), no
              effect on column options

       -t, --omit-header
              omit page headers and trailers; implied if PAGE_LENGTH &amp;lt;= 10

       -T, --omit-pagination
              omit page headers and trailers, eliminate any pagination by form feeds set in input files

       -v, --show-nonprinting
              use octal backslash notation

       -w, --width=PAGE_WIDTH
              set page width to PAGE_WIDTH (72) characters for multiple text-column output only, -s[char] turns off (72)

       -W, --page-width=PAGE_WIDTH
              set page width to PAGE_WIDTH (72) characters always, truncate lines, except -J option is set, no interference with
              -S or -s

       --help display this help and exit

       --version
              output version information and exit

AUTHOR
       Written by Pete TerMaat and Roland Huebner.

REPORTING BUGS
       GNU coreutils online help: &amp;lt;http://www.gnu.org/software/coreutils/&amp;gt;
       Report pr translation bugs to &amp;lt;http://translationproject.org/team/&amp;gt;

COPYRIGHT
       Copyright    ©    2016   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3   or   later
       &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       Full documentation at: &amp;lt;http://www.gnu.org/software/coreutils/pr&amp;gt;
       or available locally via: info '(coreutils) pr invocation'

GNU coreutils 8.26                                        November 2016                                                    PR(1)
PRINTF(1)                                                 User Commands                                                PRINTF(1)

NAME
       printf - format and print data

SYNOPSIS
       printf FORMAT [ARGUMENT]...
       printf OPTION

DESCRIPTION
       Print ARGUMENT(s) according to FORMAT, or execute according to OPTION:

       --help display this help and exit

       --version
              output version information and exit

       FORMAT controls the output as in C printf.  Interpreted sequences are:

       \"     double quote

       \\     backslash

       \a     alert (BEL)

       \b     backspace

       \c     produce no further output

       \e     escape

       \f     form feed

       \n     new line

       \r     carriage return

       \t     horizontal tab

       \v     vertical tab

       \NNN   byte with octal value NNN (1 to 3 digits)

       \xHH   byte with hexadecimal value HH (1 to 2 digits)

       \uHHHH Unicode (ISO/IEC 10646) character with hex value HHHH (4 digits)

       \UHHHHHHHH
              Unicode character with hex value HHHHHHHH (8 digits)

       %%     a single %

       %b     ARGUMENT as a string with '\' escapes interpreted, except that octal escapes are of the form \0 or \0NNN

       %q     ARGUMENT is printed in a format that can be reused as shell input, escaping non-printable characters with the pro‐
              posed POSIX $'' syntax.

       and all C format specifications ending with one of diouxXfeEgGcs, with ARGUMENTs converted to proper type  first.   Vari‐
       able widths are handled.

       NOTE:  your  shell may have its own version of printf, which usually supersedes the version described here.  Please refer
       to your shell's documentation for details about the options it supports.

AUTHOR
       Written by David MacKenzie.

REPORTING BUGS
       GNU coreutils online help: &amp;lt;http://www.gnu.org/software/coreutils/&amp;gt;
       Report printf translation bugs to &amp;lt;http://translationproject.org/team/&amp;gt;

COPYRIGHT
       Copyright   ©   2016   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3    or    later
       &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       printf(3)

       Full documentation at: &amp;lt;http://www.gnu.org/software/coreutils/printf&amp;gt;
       or available locally via: info '(coreutils) printf invocation'

GNU coreutils 8.26                                        November 2016                                                PRINTF(1)
PRS(1P)                                             POSIX Programmer's Manual                                            PRS(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->

NAME
       prs — print an SCCS file (DEVELOPMENT)

SYNOPSIS
       prs [−a] [−d dataspec] [−r[SID]] file...

       prs [−e|−l] −c cutoff [−d dataspec] file...

       prs [−e|−l] −r[SID] [−d dataspec] file...

DESCRIPTION
       The prs utility shall write to standard output parts or all of an SCCS file in a user-supplied format.

OPTIONS
       The  prs  utility  shall conform to the Base Definitions volume of POSIX.1‐2008, Section 12.2, Utility Syntax Guidelines,
       except that the −r option has an optional option-argument. This optional option-argument cannot be presented as  a  sepa‐
       rate argument. The following options shall be supported:

       −d dataspec
                 Specify  the  output  data  specification. The dataspec shall be a string consisting of SCCS file data keywords
                 (see Data Keywords) interspersed with optional user-supplied text.

       −r[SID]   Specify the SCCS identification string (SID) of a delta for which information is desired.  If  no  SID  option-
                 argument is specified, the SID of the most recently created delta shall be assumed.

       −e        Request information for all deltas created earlier than and including the delta designated via the −r option or
                 the date-time given by the −c option.

       −l        Request information for all deltas created later than and including the delta designated via the −r  option  or
                 the date-time given by the −c option.

       −c cutoff Indicate the cutoff date-time, in the form:

                     YY[MM[DD[HH[MM[SS]]]]]

                 For  the  YY  component, values in the range [69,99] shall refer to years 1969 to 1999 inclusive, and values in
                 the range [00,68] shall refer to years 2000 to 2068 inclusive.

                 Note:     It is expected that in a future version of this standard the default century inferred from a  2-digit
                           year will change. (This would apply to all commands accepting a 2-digit year as input.)

                 No  changes  (deltas) to the SCCS file that were created after the specified cutoff date-time shall be included
                 in the output. Units omitted from the date-time default to their maximum possible values; for example,  −c 7502
                 is equivalent to −c 750228235959.

       −a        Request  writing  of information for both removed—that is, delta type=R (see rmdel)—and existing—that is, delta
                 type=D,—deltas. If the −a option is not specified, information for existing deltas only shall be provided.

OPERANDS
       The following operand shall be supported:

       file      A pathname of an existing SCCS file or a directory. If file is a directory, the prs  utility  shall  behave  as
                 though each file in the directory were specified as a named file, except that non-SCCS files (last component of
                 the pathname does not begin with s.)  and unreadable files shall be silently ignored.

                 If exactly one file operand appears, and it is '−', the standard input shall be read; each line of the standard
                 input  shall be taken to be the name of an SCCS file to be processed. Non-SCCS files and unreadable files shall
                 be silently ignored.

STDIN
       The standard input shall be a text file used only when the file operand is specified as '−'.  Each line of the text  file
       shall be interpreted as an SCCS pathname.

INPUT FILES
       Any SCCS files displayed are files of an unspecified format.

<!-- 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 <=< ACCEPT -->ENVIRONMENT VARIABLES
       The following environment variables shall affect the execution of prs:

       LANG      Provide  a  default  value for the internationalization variables that are unset or null. (See the Base Defini‐
                 tions volume of POSIX.1‐2008, Section 8.2, Internationalization Variables the precedence  of  internationaliza‐
                 tion variables used to determine the values of locale categories.)

       LC_ALL    If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_CTYPE  Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, sin‐
                 gle-byte as opposed to multi-byte characters in arguments and input files).

       LC_MESSAGES
                 Determine the locale that should be used to affect the format and contents of diagnostic  messages  written  to
                 standard error.

       NLSPATH   Determine the location of message catalogs for the processing of LC_MESSAGES.<!-- ACCEPT >=> 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 -->

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       The standard output shall be a text file whose format is dependent on the data keywords specified with the −d option.

   Data Keywords
       Data  keywords specify which parts of an SCCS file shall be retrieved and output. All parts of an SCCS file have an asso‐
       ciated data keyword. A data keyword may appear in a dataspec multiple times.

       The information written by prs shall consist of:

        1. The user-supplied text

        2. Appropriate values (extracted from the SCCS file) substituted for the  recognized  data  keywords  in  the  order  of
           appearance in the dataspec

       The  format  of a data keyword value shall either be simple ('S'), in which keyword substitution is direct, or multi-line
       ('M').

       User-supplied text shall be any text other than recognized data keywords. A &amp;lt;tab&amp;gt; shall be specified by  '\t'  and  &amp;lt;new‐
       line&amp;gt; by '\n'.  When the −r option is not specified, the default dataspec shall be:

           :PN::\n\n

       and the following dataspec shall be used for each selected delta:

           :Dt:\t:DL:\nMRs:\n:MR:COMMENTS:\n:C:

                        ┌─────────────────────────────────────────────────────────────────────────────────────┐
                        │                              SCCS File Data Keywords                                │
                        ├────────┬────────────────────────────────┬──────────────┬───────────────────┬────────┤
                        │Keyword │           Data Item            │ File Section │       Value       │ Format │
                        ├────────┼────────────────────────────────┼──────────────┼───────────────────┼────────┤
                        │:Dt:    │ Delta information              │ Delta Table  │ See below*        │   S    │
                        │:DL:    │ Delta line statistics          │      "       │ :Li:/:Ld:/:Lu:    │   S    │
                        │:Li:    │ Lines inserted by Delta        │      "       │ nnnnn***          │   S    │
                        │:Ld:    │ Lines deleted by Delta         │      "       │ nnnnn***          │   S    │
                        │:Lu:    │ Lines unchanged by Delta       │      "       │ nnnnn***          │   S    │
                        │:DT:    │ Delta type                     │      "       │ D or R            │   S    │
                        │:I:     │ SCCS ID string (SID)           │      "       │ See below**       │   S    │
                        │:R:     │ Release number                 │      "       │ nnnn              │   S    │
                        │:L:     │ Level number                   │      "       │ nnnn              │   S    │
                        │:B:     │ Branch number                  │      "       │ nnnn              │   S    │
                        │:S:     │ Sequence number                │      "       │ nnnn              │   S    │
                        │:D:     │ Date delta created             │      "       │ :Dy:/:Dm:/:Dd:    │   S    │
                        │:Dy:    │ Year delta created             │      "       │ nn                │   S    │
                        │:Dm:    │ Month delta created            │      "       │ nn                │   S    │
                        │:Dd:    │ Day delta created              │      "       │ nn                │   S    │
                        │:T:     │ Time delta created             │      "       │ :Th:::Tm:::Ts:    │   S    │
                        │:Th:    │ Hour delta created             │      "       │ nn                │   S    │
                        │:Tm:    │ Minutes delta created          │      "       │ nn                │   S    │
                        │:Ts:    │ Seconds delta created          │      "       │ nn                │   S    │
                        │:P:     │ Programmer who created Delta   │      "       │ logname           │   S    │
                        │:DS:    │ Delta sequence number          │      "       │ nnnn              │   S    │
                        │:DP:    │ Predecessor Delta sequence     │      "       │ nnnn              │   S    │
                        │        │ number                         │              │                   │        │
                        │:DI:    │ Sequence number of deltas      │      "       │ :Dn:/:Dx:/:Dg:    │   S    │
                        │        │ included, excluded, or ignored │              │                   │        │
                        │:Dn:    │ Deltas included (sequence #)   │      "       │ :DS: :DS: ...     │   S    │
                        │:Dx:    │ Deltas excluded (sequence #)   │      "       │ :DS: :DS: ...     │   S    │
                        │:Dg:    │ Deltas ignored (sequence #)    │      "       │ :DS: :DS: ...     │   S    │
                        │:MR:    │ MR numbers for delta           │      "       │ text              │   M    │
                        │:C:     │ Comments for delta             │      "       │ text              │   M    │
                        │:UN:    │ User names                     │  User Names  │ text              │   M    │
                        │:FL:    │ Flag list                      │    Flags     │ text              │   M    │
                        │:Y:     │ Module type flag               │      "       │ text              │   S    │
                        │:MF:    │ MR validation flag             │      "       │ yes or no         │   S    │
                        │:MP:    │ MR validation program name     │      "       │ text              │   S    │
                        │:KF:    │ Keyword error, warning flag    │      "       │ yes or no         │   S    │
                        │:KV:    │ Keyword validation string      │      "       │ text              │   S    │
                        │:BF:    │ Branch flag                    │      "       │ yes or no         │   S    │
                        │:J:     │ Joint edit flag                │      "       │ yes or no         │   S    │
                        │:LK:    │ Locked releases                │      "       │ :R: ...           │   S    │
                        │:Q:     │ User-defined keyword           │      "       │ text              │   S    │
                        │:M:     │ Module name                    │      "       │ text              │   S    │
                        │:FB:    │ Floor boundary                 │      "       │ :R:               │   S    │
                        │:CB:    │ Ceiling boundary               │      "       │ :R:               │   S    │
                        │:Ds:    │ Default SID                    │      "       │ :I:               │   S    │
                        │:ND:    │ Null delta flag                │      "       │ yes or no         │   S    │
                        │:FD:    │ File descriptive text          │   Comments   │ text              │   M    │
                        │:BD:    │ Body                           │     Body     │ text              │   M    │
                        │:GB:    │ Gotten body                    │      "       │ text              │   M    │
                        │:W:     │ A form of what string          │     N/A      │ :Z::M:\t:I:       │   S    │
                        │:A:     │ A form of what string          │     N/A      │ :Z::Y: :M: :I::Z: │   S    │
                        │:Z:     │ what string delimiter          │     N/A      │ @(#)              │   S    │
                        │:F:     │ SCCS filename                  │     N/A      │ text              │   S    │
                        │:PN:    │ SCCS file pathname             │     N/A      │ text              │   S    │
                        └────────┴────────────────────────────────┴──────────────┴───────────────────┴────────┘
       *     :Dt:=:DT: :I: :D: :T: :P: :DS: :DP:

       **    :R:.:L:.:B:.:S: if the delta is a branch delta (:BF:==yes)
             :R:.:L: if the delta is not a branch delta (:BF:==no)

       ***   The  line  statistics  are capped at 99999. For example, if 100000 lines were unchanged in a certain revision, :Lu:
             shall produce the value 99999.

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       None.

<!-- a42f9355-e63b-4205-ac0b-0b19b24faf9d <=< ACCEPT -->EXIT STATUS
       The following exit values shall be returned:

        0    Successful completion.

       &amp;gt;0    An error occurred.<!-- ACCEPT >=> a42f9355-e63b-4205-ac0b-0b19b24faf9d -->

CONSEQUENCES OF ERRORS
       Default.

       The following sections are informative.

APPLICATION USAGE
       None.

EXAMPLES
        1. The following example:

               prs −d "User Names for :F: are:\n:UN:" s.file

           might write to standard output:

               User Names for s.file are:
               xyz
               131
               abc

        2. The following example:

               prs −d "Delta for pgm :M:: :I: − :D: By :P:" −r s.file

           might write to standard output:

               Delta for pgm main.c: 3.7 − 77/12/01 By cas

        3. As a special case:

               prs s.file

           might write to standard output:

               s.file:
               &amp;lt;blank line&amp;gt;
               D 1.1 77/12/01 00:00:00 cas 1 000000/00000/00000
               MRs:
               bl78−12345
               bl79−54321
               COMMENTS:
               this is the comment line for s.file initial delta
               &amp;lt;blank line&amp;gt;

           for each delta table entry of the D type. The only option allowed to be used with this special case is the −a option.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       admin, delta, get, what

       The Base Definitions volume of POSIX.1‐2008, Chapter 8, Environment Variables, Section 12.2, Utility Syntax Guidelines

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013  Edition,  Standard  for
       Information  Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7, Copy‐
       right (C) 2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This  is  POSIX.1-2008
       with  the  2013  Technical  Corrigendum 1 applied.) In the event of any discrepancy between this version and the original
       IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the  referee  document.  The  original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any  typographical  or formatting errors that appear in this page are most likely to have been introduced during the con‐
       version of the source files to man page format. To report such errors,  see  https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                       PRS(1P)
PS(1)                                                     User Commands                                                    PS(1)

NAME
       ps - report a snapshot of the current processes.

SYNOPSIS
       ps [options]

DESCRIPTION
       ps displays information about a selection of the active processes.  If you want a repetitive update of the selection and
       the displayed information, use top(1) instead.

       This version of ps accepts several kinds of options:

       1   UNIX options, which may be grouped and must be preceded by a dash.
       2   BSD options, which may be grouped and must not be used with a dash.
       3   GNU long options, which are preceded by two dashes.

       Options of different types may be freely mixed, but conflicts can appear.  There are some synonymous options, which are
       functionally identical, due to the many standards and ps implementations that this ps is compatible with.

       Note that "ps -aux" is distinct from "ps aux".  The POSIX and UNIX standards require that "ps -aux" print all processes
       owned by a user named "x", as well as printing all processes that would be selected by the -a option.  If the user named
       "x" does not exist, this ps may interpret the command as "ps aux" instead and print a warning.  This behavior is intended
       to aid in transitioning old scripts and habits.  It is fragile, subject to change, and thus should not be relied upon.

       By default, ps selects all processes with the same effective user ID (euid=EUID) as the current user and associated with
       the same terminal as the invoker.  It displays the process ID (pid=PID), the terminal associated with the process
       (tname=TTY), the cumulated CPU time in [DD-]hh:mm:ss format (time=TIME), and the executable name (ucmd=CMD).  Output is
       unsorted by default.

       The use of BSD-style options will add process state (stat=STAT) to the default display and show the command args
       (args=COMMAND) instead of the executable name.  You can override this with the PS_FORMAT environment variable. The use of
       BSD-style options will also change the process selection to include processes on other terminals (TTYs) that are owned by
       you; alternately, this may be described as setting the selection to be the set of all processes filtered to exclude
       processes owned by other users or not on a terminal.  These effects are not considered when options are described as
       being "identical" below, so -M will be considered identical to Z and so on.

       Except as described below, process selection options are additive.  The default selection is discarded, and then the
       selected processes are added to the set of processes to be displayed.  A process will thus be shown if it meets any of
       the given selection criteria.

EXAMPLES
       To see every process on the system using standard syntax:
          ps -e
          ps -ef
          ps -eF
          ps -ely

       To see every process on the system using BSD syntax:
          ps ax
          ps axu

       To print a process tree:
          ps -ejH
          ps axjf

       To get info about threads:
          ps -eLf
          ps axms

       To get security info:
          ps -eo euser,ruser,suser,fuser,f,comm,label
          ps axZ
          ps -eM

       To see every process running as root (real &amp; effective ID) in user format:
          ps -U root -u root u

       To see every process with a user-defined format:
          ps -eo pid,tid,class,rtprio,ni,pri,psr,pcpu,stat,wchan:14,comm
          ps axo stat,euid,ruid,tty,tpgid,sess,pgrp,ppid,pid,pcpu,comm
          ps -Ao pid,tt,user,fname,tmout,f,wchan

       Print only the process IDs of syslogd:
          ps -C syslogd -o pid=

       Print only the name of PID 42:
          ps -q 42 -o comm=

SIMPLE PROCESS SELECTION
       a      Lift the BSD-style "only yourself" restriction, which is imposed upon the set of all processes when some BSD-style
              (without "-") options are used or when the ps personality setting is BSD-like.  The set of processes selected in
              this manner is in addition to the set of processes selected by other means.  An alternate description is that this
              option causes ps to list all processes with a terminal (tty), or to list all processes when used together with the
              x option.

       -A     Select all processes.  Identical to -e.

       -a     Select all processes except both session leaders (see getsid(2)) and processes not associated with a terminal.

       -d     Select all processes except session leaders.

       --deselect
              Select all processes except those that fulfill the specified conditions (negates the selection).  Identical to -N.

       -e     Select all processes.  Identical to -A.

       g      Really all, even session leaders.  This flag is obsolete and may be discontinued in a future release.  It is
              normally implied by the a flag, and is only useful when operating in the sunos4 personality.

       -N     Select all processes except those that fulfill the specified conditions (negates the selection).  Identical to
              --deselect.

       T      Select all processes associated with this terminal.  Identical to the t option without any argument.

       r      Restrict the selection to only running processes.

       x      Lift the BSD-style "must have a tty" restriction, which is imposed upon the set of all processes when some
              BSD-style (without "-") options are used or when the ps personality setting is BSD-like.  The set of processes
              selected in this manner is in addition to the set of processes selected by other means.  An alternate description
              is that this option causes ps to list all processes owned by you (same EUID as ps), or to list all processes when
              used together with the a option.

PROCESS SELECTION BY LIST
       These options accept a single argument in the form of a blank-separated or comma-separated list.  They can be used
       multiple times.  For example: ps -p "1 2" -p 3,4

       -123   Identical to --pid 123.

       123    Identical to --pid 123.

       -C cmdlist
              Select by command name.  This selects the processes whose executable name is given in cmdlist.

       -G grplist
              Select by real group ID (RGID) or name.  This selects the processes whose real group name or ID is in the grplist
              list.  The real group ID identifies the group of the user who created the process, see getgid(2).

       -g grplist
              Select by session OR by effective group name.  Selection by session is specified by many standards, but selection
              by effective group is the logical behavior that several other operating systems use.  This ps will select by
              session when the list is completely numeric (as sessions are).  Group ID numbers will work only when some group
              names are also specified.  See the -s and --group options.

       --Group grplist
              Select by real group ID (RGID) or name.  Identical to -G.

       --group grplist
              Select by effective group ID (EGID) or name.  This selects the processes whose effective group name or ID is in
              grplist.  The effective group ID describes the group whose file access permissions are used by the process (see
              getegid(2)).  The -g option is often an alternative to --group.

       p pidlist
              Select by process ID.  Identical to -p and --pid.

       -p pidlist
              Select by PID.  This selects the processes whose process ID numbers appear in pidlist.  Identical to p and --pid.

       --pid pidlist
              Select by process ID.  Identical to -p and p.

       --ppid pidlist
              Select by parent process ID.  This selects the processes with a parent process ID in pidlist.  That is, it selects
              processes that are children of those listed in pidlist.

       q pidlist
              Select by process ID (quick mode).  Identical to -q and --quick-pid.

       -q pidlist
              Select by PID (quick mode).  This selects the processes whose process ID numbers appear in pidlist.  With this
              option ps reads the necessary info only for the pids listed in the pidlist and doesn't apply additional filtering
              rules. The order of pids is unsorted and preserved. No additional selection options, sorting and forest type
              listings are allowed in this mode.  Identical to q and --quick-pid.

       --quick-pid pidlist
              Select by process ID (quick mode).  Identical to -q and q.

       -s sesslist
              Select by session ID.  This selects the processes with a session ID specified in sesslist.

       --sid sesslist
              Select by session ID.  Identical to -s.

       t ttylist
              Select by tty.  Nearly identical to -t and --tty, but can also be used with an empty ttylist to indicate the
              terminal associated with ps.  Using the T option is considered cleaner than using t with an empty ttylist.

       -t ttylist
              Select by tty.  This selects the processes associated with the terminals given in ttylist.  Terminals (ttys, or
              screens for text output) can be specified in several forms: /dev/ttyS1, ttyS1, S1.  A plain "-" may be used to
              select processes not attached to any terminal.

       --tty ttylist
              Select by terminal.  Identical to -t and t.

       U userlist
              Select by effective user ID (EUID) or name.  This selects the processes whose effective user name or ID is in
              userlist.  The effective user ID describes the user whose file access permissions are used by the process (see
              geteuid(2)).  Identical to -u and --user.

       -U userlist
              Select by real user ID (RUID) or name.  It selects the processes whose real user name or ID is in the userlist
              list.  The real user ID identifies the user who created the process, see getuid(2).

       -u userlist
              Select by effective user ID (EUID) or name.  This selects the processes whose effective user name or ID is in
              userlist.

              The effective user ID describes the user whose file access permissions are used by the process (see geteuid(2)).
              Identical to U and --user.

       --User userlist
              Select by real user ID (RUID) or name.  Identical to -U.

       --user userlist
              Select by effective user ID (EUID) or name.  Identical to -u and U.

OUTPUT FORMAT CONTROL
       These options are used to choose the information displayed by ps.  The output may differ by personality.

       -c     Show different scheduler information for the -l option.

       --context
              Display security context format (for SELinux).

       -f     Do full-format listing. This option can be combined with many other UNIX-style options to add additional columns.
              It also causes the command arguments to be printed.  When used with -L, the NLWP (number of threads) and LWP
              (thread ID) columns will be added.  See the c option, the format keyword args, and the format keyword comm.

       -F     Extra full format.  See the -f option, which -F implies.

       --format format
              user-defined format.  Identical to -o and o.

       j      BSD job control format.

       -j     Jobs format.

       l      Display BSD long format.

       -l     Long format.  The -y option is often useful with this.

       -M     Add a column of security data.  Identical to Z (for SELinux).

       O format
              is preloaded o (overloaded).  The BSD O option can act like -O (user-defined output format with some common fields
              predefined) or can be used to specify sort order.  Heuristics are used to determine the behavior of this option.
              To ensure that the desired behavior is obtained (sorting or formatting), specify the option in some other way
              (e.g.  with -O or --sort).  When used as a formatting option, it is identical to -O, with the BSD personality.

       -O format
              Like -o, but preloaded with some default columns.  Identical to -o pid,format,state,tname,time,command or -o pid,
              format,tname,time,cmd, see -o below.

       o format
              Specify user-defined format.  Identical to -o and --format.

       -o format
              User-defined format.  format is a single argument in the form of a blank-separated or comma-separated list, which
              offers a way to specify individual output columns.  The recognized keywords are described in the STANDARD FORMAT
              SPECIFIERS section below.  Headers may be renamed (ps -o pid,ruser=RealUser -o comm=Command) as desired.  If all
              column headers are empty (ps -o pid= -o comm=) then the header line will not be output.  Column width will
              increase as needed for wide headers; this may be used to widen up columns such as WCHAN (ps -o pid,wchan=WIDE-
              WCHAN-COLUMN -o comm).  Explicit width control (ps opid,wchan:42,cmd) is offered too.  The behavior of ps -o
              pid=X,comm=Y varies with personality; output may be one column named "X,comm=Y" or two columns named "X" and "Y".
              Use multiple -o options when in doubt.  Use the PS_FORMAT environment variable to specify a default as desired;
              DefSysV and DefBSD are macros that may be used to choose the default UNIX or BSD columns.

       s      Display signal format.

       u      Display user-oriented format.

       v      Display virtual memory format.

       X      Register format.

       -y     Do not show flags; show rss in place of addr.  This option can only be used with -l.

       Z      Add a column of security data.  Identical to -M (for SELinux).

OUTPUT MODIFIERS
       c      Show the true command name.  This is derived from the name of the executable file, rather than from the argv
              value.  Command arguments and any modifications to them are thus not shown.  This option effectively turns the
              args format keyword into the comm format keyword; it is useful with the -f format option and with the various
              BSD-style format options, which all normally display the command arguments.  See the -f option, the format keyword
              args, and the format keyword comm.

       --cols n
              Set screen width.

       --columns n
              Set screen width.

       --cumulative
              Include some dead child process data (as a sum with the parent).

       e      Show the environment after the command.

       f      ASCII art process hierarchy (forest).

       --forest
              ASCII art process tree.

       h      No header.  (or, one header per screen in the BSD personality).  The h option is problematic.  Standard BSD ps
              uses this option to print a header on each page of output, but older Linux ps uses this option to totally disable
              the header.  This version of ps follows the Linux usage of not printing the header unless the BSD personality has
              been selected, in which case it prints a header on each page of output.  Regardless of the current personality,
              you can use the long options --headers and --no-headers to enable printing headers each page or disable headers
              entirely, respectively.

       -H     Show process hierarchy (forest).

       --headers
              Repeat header lines, one per page of output.

       k spec Specify sorting order.  Sorting syntax is [+|-]key[,[+|-]key[,...]].  Choose a multi-letter key from the STANDARD
              FORMAT SPECIFIERS section.  The "+" is optional since default direction is increasing numerical or lexicographic
              order.  Identical to --sort.

                      Examples:
                      ps jaxkuid,-ppid,+pid
                      ps axk comm o comm,args
                      ps kstart_time -ef

       --lines n
              Set screen height.

       n      Numeric output for WCHAN and USER (including all types of UID and GID).

       --no-headers
              Print no header line at all.  --no-heading is an alias for this option.

       O order
              Sorting order (overloaded).  The BSD O option can act like -O (user-defined output format with some common fields
              predefined) or can be used to specify sort order.  Heuristics are used to determine the behavior of this option.
              To ensure that the desired behavior is obtained (sorting or formatting), specify the option in some other way
              (e.g.  with -O or --sort).

              For sorting, obsolete BSD O option syntax is O[+|-]k1[,[+|-]k2[,...]].  It orders the processes listing according
              to the multilevel sort specified by the sequence of one-letter short keys k1,k2, ...  described in the OBSOLETE
              SORT KEYS section below.  The "+" is currently optional, merely re-iterating the default direction on a key, but
              may help to distinguish an O sort from an O format.  The "-" reverses direction only on the key it precedes.

       --rows n
              Set screen height.

       S      Sum up some information, such as CPU usage, from dead child processes into their parent.  This is useful for
              examining a system where a parent process repeatedly forks off short-lived children to do work.

       --sort spec
              Specify sorting order.  Sorting syntax is [+|-]key[,[+|-]key[,...]].  Choose a multi-letter key from the STANDARD
              FORMAT SPECIFIERS section.  The "+" is optional since default direction is increasing numerical or lexicographic
              order.  Identical to k.  For example: ps jax --sort=uid,-ppid,+pid

       w      Wide output.  Use this option twice for unlimited width.

       -w     Wide output.  Use this option twice for unlimited width.

       --width n
              Set screen width.

THREAD DISPLAY
       H      Show threads as if they were processes.

       -L     Show threads, possibly with LWP and NLWP columns.

       m      Show threads after processes.

       -m     Show threads after processes.

       -T     Show threads, possibly with SPID column.

OTHER INFORMATION
       --help section
              Print a help message.  The section argument can be one of simple, list, output, threads, misc or all.  The
              argument can be shortened to one of the underlined letters as in: s|l|o|t|m|a.

       --info Print debugging info.

       L      List all format specifiers.

       V      Print the procps-ng version.

       -V     Print the procps-ng version.

       --version
              Print the procps-ng version.

NOTES
       This ps works by reading the virtual files in /proc.  This ps does not need to be setuid kmem or have any privileges to
       run.  Do not give this ps any special permissions.

       CPU usage is currently expressed as the percentage of time spent running during the entire lifetime of a process.  This
       is not ideal, and it does not conform to the standards that ps otherwise conforms to.  CPU usage is unlikely to add up to
       exactly 100%.

       The SIZE and RSS fields don't count some parts of a process including the page tables, kernel stack, struct thread_info,
       and struct task_struct.  This is usually at least 20 KiB of memory that is always resident.  SIZE is the virtual size of
       the process (code+data+stack).

       Processes marked &amp;lt;defunct&amp;gt; are dead processes (so-called "zombies") that remain because their parent has not destroyed
       them properly.  These processes will be destroyed by init(8) if the parent process exits.

       If the length of the username is greater than the length of the display column, the username will be truncated. See the
       -o and -O formatting options to customize length.

       Commands options such as ps -aux are not recommended as it is a confusion of two different standards.  According to the
       POSIX and UNIX standards, the above command asks to display all processes with a TTY (generally the commands users are
       running) plus all processes owned by a user named "x".  If that user doesn't exist, then ps will assume you really meant
       "ps aux".

PROCESS FLAGS
       The sum of these values is displayed in the "F" column, which is provided by the flags output specifier:

               1    forked but didn't exec
               4    used super-user privileges

PROCESS STATE CODES
       Here are the different values that the s, stat and state output specifiers (header "STAT" or "S") will display to
       describe the state of a process:

               D    uninterruptible sleep (usually IO)
               R    running or runnable (on run queue)
               S    interruptible sleep (waiting for an event to complete)
               T    stopped by job control signal
               t    stopped by debugger during the tracing
               W    paging (not valid since the 2.6.xx kernel)
               X    dead (should never be seen)
               Z    defunct ("zombie") process, terminated but not reaped by its parent

       For BSD formats and when the stat keyword is used, additional characters may be displayed:

               &amp;lt;    high-priority (not nice to other users)
               N    low-priority (nice to other users)
               L    has pages locked into memory (for real-time and custom IO)
               s    is a session leader
               l    is multi-threaded (using CLONE_THREAD, like NPTL pthreads do)
               +    is in the foreground process group

OBSOLETE SORT KEYS
       These keys are used by the BSD O option (when it is used for sorting).  The GNU --sort option doesn't use these keys, but
       the specifiers described below in the STANDARD FORMAT SPECIFIERS section.  Note that the values used in sorting are the
       internal values ps uses and not the "cooked" values used in some of the output format fields (e.g.  sorting on tty will
       sort into device number, not according to the terminal name displayed).  Pipe ps output into the sort(1) command if you
       want to sort the cooked values.

       KEY   LONG         DESCRIPTION
       c     cmd          simple name of executable
       C     pcpu         cpu utilization
       f     flags        flags as in long format F field
       g     pgrp         process group ID
       G     tpgid        controlling tty process group ID
       j     cutime       cumulative user time
       J     cstime       cumulative system time
       k     utime        user time
       m     min_flt      number of minor page faults
       M     maj_flt      number of major page faults
       n     cmin_flt     cumulative minor page faults
       N     cmaj_flt     cumulative major page faults
       o     session      session ID
       p     pid          process ID
       P     ppid         parent process ID
       r     rss          resident set size
       R     resident     resident pages
       s     size         memory size in kilobytes
       S     share        amount of shared pages
       t     tty          the device number of the controlling tty
       T     start_time   time process was started
       U     uid          user ID number
       u     user         user name
       v     vsize        total VM size in KiB
       y     priority     kernel scheduling priority

AIX FORMAT DESCRIPTORS
       This ps supports AIX format descriptors, which work somewhat like the formatting codes of printf(1) and printf(3).  For
       example, the normal default output can be produced with this: ps -eo "%p %y %x %c".  The NORMAL codes are described in
       the next section.

       CODE   NORMAL   HEADER
       %C     pcpu     %CPU
       %G     group    GROUP
       %P     ppid     PPID
       %U     user     USER
       %a     args     COMMAND
       %c     comm     COMMAND
       %g     rgroup   RGROUP
       %n     nice     NI
       %p     pid      PID
       %r     pgid     PGID
       %t     etime    ELAPSED
       %u     ruser    RUSER

       %x     time     TIME
       %y     tty      TTY
       %z     vsz      VSZ

STANDARD FORMAT SPECIFIERS
       Here are the different keywords that may be used to control the output format (e.g. with option -o) or to sort the
       selected processes with the GNU-style --sort option.

       For example: ps -eo pid,user,args --sort user

       This version of ps tries to recognize most of the keywords used in other implementations of ps.

       The following user-defined format specifiers may contain spaces: args, cmd, comm, command, fname, ucmd, ucomm,
       lstart, bsdstart, start.

       Some keywords may not be available for sorting.

       CODE        HEADER    DESCRIPTION

       %cpu        %CPU      cpu utilization of the process in "##.#" format.  Currently, it is the CPU time used divided by the
                             time the process has been running (cputime/realtime ratio), expressed as a percentage.  It will not
                             add up to 100% unless you are lucky.  (alias pcpu).

       %mem        %MEM      ratio of the process's resident set size  to the physical memory on the machine, expressed as a
                             percentage.  (alias pmem).

       args        COMMAND   command with all its arguments as a string. Modifications to the arguments may be shown.  The
                             output in this column may contain spaces.  A process marked &amp;lt;defunct&amp;gt; is partly dead, waiting to be
                             fully destroyed by its parent.  Sometimes the process args will be unavailable; when this happens,
                             ps will instead print the executable name in brackets.  (alias cmd, command).  See also the comm
                             format keyword, the -f option, and the c option.
                             When specified last, this column will extend to the edge of the display.  If ps can not determine
                             display width, as when output is redirected (piped) into a file or another command, the output
                             width is undefined (it may be 80, unlimited, determined by the TERM variable, and so on).  The
                             COLUMNS environment variable or --cols option may be used to exactly determine the width in this
                             case.  The w or -w option may be also be used to adjust width.

       blocked     BLOCKED   mask of the blocked signals, see signal(7).  According to the width of the field, a 32 or 64-bit
                             mask in hexadecimal format is displayed.  (alias sig_block, sigmask).

       bsdstart    START     time the command started.  If the process was started less than 24 hours ago, the output format is
                             " HH:MM", else it is " Mmm:SS" (where Mmm is the three letters of the month).  See also
                             lstart, start, start_time, and stime.

       bsdtime     TIME      accumulated cpu time, user + system.  The display format is usually "MMM:SS", but can be shifted to
                             the right if the process used more than 999 minutes of cpu time.

       c           C         processor utilization. Currently, this is the integer value of the percent usage over the lifetime
                             of the process.  (see %cpu).

       caught      CAUGHT    mask of the caught signals, see signal(7).  According to the width of the field, a 32 or 64 bits
                             mask in hexadecimal format is displayed.  (alias sig_catch, sigcatch).

       cgname      CGNAME    display name of control groups to which the process belongs.

       cgroup      CGROUP    display control groups to which the process belongs.

       class       CLS       scheduling class of the process.  (alias policy, cls).  Field's possible values are:

                                      -   not reported
                                      TS  SCHED_OTHER
                                      FF  SCHED_FIFO
                                      RR  SCHED_RR
                                      B   SCHED_BATCH
                                      ISO SCHED_ISO
                                      IDL SCHED_IDLE
                                      ?   unknown value

       cls         CLS       scheduling class of the process.  (alias policy, cls).  Field's possible values are:

                                      -   not reported
                                      TS  SCHED_OTHER
                                      FF  SCHED_FIFO
                                      RR  SCHED_RR
                                      B   SCHED_BATCH
                                      ISO SCHED_ISO
                                      IDL SCHED_IDLE
                                      ?   unknown value

       cmd         CMD       see args.  (alias args, command).

       comm        COMMAND   command name (only the executable name).  Modifications to the command name will not be shown.  A
                             process marked &amp;lt;defunct&amp;gt; is partly dead, waiting to be fully destroyed by its parent.  The output
                             in this column may contain spaces.  (alias ucmd, ucomm).  See also the args format keyword, the -f
                             option, and the c option.
                             When specified last, this column will extend to the edge of the display.  If ps can not determine
                             display width, as when output is redirected (piped) into a file or another command, the output
                             width is undefined (it may be 80, unlimited, determined by the TERM variable, and so on).  The
                             COLUMNS environment variable or --cols option may be used to exactly determine the width in this
                             case.  The w or -w option may be also be used to adjust width.

       command     COMMAND   See args.  (alias args, command).

       cp          CP        per-mill (tenths of a percent) CPU usage.  (see %cpu).

       cputime     TIME      cumulative CPU time, "[DD-]hh:mm:ss" format.  (alias time).

       drs         DRS       data resident set size, the amount of physical memory devoted to other than executable code.

       egid        EGID      effective group ID number of the process as a decimal integer.  (alias gid).

       egroup      EGROUP    effective group ID of the process.  This will be the textual group ID, if it can be obtained and
                             the field width permits, or a decimal representation otherwise.  (alias group).

       eip         EIP       instruction pointer.

       esp         ESP       stack pointer.

       etime       ELAPSED   elapsed time since the process was started, in the form [[DD-]hh:]mm:ss.

       etimes      ELAPSED   elapsed time since the process was started, in seconds.

       euid        EUID      effective user ID (alias uid).

       euser       EUSER     effective user name.  This will be the textual user ID, if it can be obtained and the field width
                             permits, or a decimal representation otherwise.  The n option can be used to force the decimal
                             representation.  (alias uname, user).

       f           F         flags associated with the process, see the PROCESS FLAGS section.  (alias flag, flags).

       fgid        FGID      filesystem access group ID.  (alias fsgid).

       fgroup      FGROUP    filesystem access group ID.  This will be the textual group ID, if it can be obtained and the field
                             width permits, or a decimal representation otherwise.  (alias fsgroup).

       flag        F         see f.  (alias f, flags).

       flags       F         see f.  (alias f, flag).

       fname       COMMAND   first 8 bytes of the base name of the process's executable file.  The output in this column may
                             contain spaces.

       fuid        FUID      filesystem access user ID.  (alias fsuid).

       fuser       FUSER     filesystem access user ID.  This will be the textual user ID, if it can be obtained and the field
                             width permits, or a decimal representation otherwise.

       gid         GID       see egid.  (alias egid).

       group       GROUP     see egroup.  (alias egroup).

       ignored     IGNORED   mask of the ignored signals, see signal(7).  According to the width of the field, a 32 or 64 bits
                             mask in hexadecimal format is displayed.  (alias sig_ignore, sigignore).

       ipcns       IPCNS     Unique inode number describing the namespace the process belongs to. See namespaces(7).

       label       LABEL     security label, most commonly used for SELinux context data.  This is for the Mandatory Access
                             Control ("MAC") found on high-security systems.

       lstart      STARTED   time the command started.  See also bsdstart, start, start_time, and stime.

       lsession    SESSION   displays the login session identifier of a process, if systemd support has been included.

       lwp         LWP       light weight process (thread) ID of the dispatchable entity (alias spid, tid).  See tid for
                             additional information.

       lxc         LXC       The name of the lxc container within which a task is running.  If a process is not running inside a
                             container, a dash ('-') will be shown.

       machine     MACHINE   displays the machine name for processes assigned to VM or container, if systemd support has been
                             included.

       maj_flt     MAJFLT    The number of major page faults that have occurred with this process.

       min_flt     MINFLT    The number of minor page faults that have occurred with this process.

       mntns       MNTNS     Unique inode number describing the namespace the process belongs to. See namespaces(7).

       netns       NETNS     Unique inode number describing the namespace the process belongs to. See namespaces(7).

       ni          NI        nice value. This ranges from 19 (nicest) to -20 (not nice to others), see nice(1).  (alias nice).

       nice        NI        see ni.(alias ni).

       nlwp        NLWP      number of lwps (threads) in the process.  (alias thcount).

       nwchan      WCHAN     address of the kernel function where the process is sleeping (use wchan if you want the kernel
                             function name).  Running tasks will display a dash ('-') in this column.

       ouid        OWNER     displays the Unix user identifier of the owner of the session of a process, if systemd support has
                             been included.

       pcpu        %CPU      see %cpu.  (alias %cpu).

       pending     PENDING   mask of the pending signals. See signal(7).  Signals pending on the process are distinct from
                             signals pending on individual threads.  Use the m option or the -m option to see both.  According
                             to the width of the field, a 32 or 64 bits mask in hexadecimal format is displayed.  (alias sig).

       pgid        PGID      process group ID or, equivalently, the process ID of the process group leader.  (alias pgrp).

       pgrp        PGRP      see pgid.  (alias pgid).

       pid         PID       a number representing the process ID (alias tgid).

       pidns       PIDNS     Unique inode number describing the namespace the process belongs to. See namespaces(7).

       pmem        %MEM      see %mem.  (alias %mem).

       policy      POL       scheduling class of the process.  (alias class, cls).  Possible values are:

                                      -   not reported
                                      TS  SCHED_OTHER
                                      FF  SCHED_FIFO
                                      RR  SCHED_RR
                                      B   SCHED_BATCH
                                      ISO SCHED_ISO
                                      IDL SCHED_IDLE
                                      ?   unknown value

       ppid        PPID      parent process ID.

       pri         PRI       priority of the process.  Higher number means lower priority.

       psr         PSR       processor that process is currently assigned to.

       rgid        RGID      real group ID.

       rgroup      RGROUP    real group name.  This will be the textual group ID, if it can be obtained and the field width
                             permits, or a decimal representation otherwise.

       rss         RSS       resident set size, the non-swapped physical memory that a task has used (in kiloBytes).  (alias
                             rssize, rsz).

       rssize      RSS       see rss.  (alias rss, rsz).

       rsz         RSZ       see rss.  (alias rss, rssize).

       rtprio      RTPRIO    realtime priority.

       ruid        RUID      real user ID.

       ruser       RUSER     real user ID.  This will be the textual user ID, if it can be obtained and the field width permits,
                             or a decimal representation otherwise.

       s           S         minimal state display (one character).  See section PROCESS STATE CODES for the different values.
                             See also stat if you want additional information displayed.  (alias state).

       sched       SCH       scheduling policy of the process.  The policies SCHED_OTHER (SCHED_NORMAL), SCHED_FIFO, SCHED_RR,
                             SCHED_BATCH, SCHED_ISO, and SCHED_IDLE are respectively displayed as 0, 1, 2, 3, 4, and 5.

       seat        SEAT      displays the identifier associated with all hardware devices assigned to a specific workplace, if
                             systemd support has been included.

       sess        SESS      session ID or, equivalently, the process ID of the session leader.  (alias session, sid).

       sgi_p       P         processor that the process is currently executing on.  Displays "*" if the process is not currently
                             running or runnable.

       sgid        SGID      saved group ID.  (alias svgid).

       sgroup      SGROUP    saved group name.  This will be the textual group ID, if it can be obtained and the field width
                             permits, or a decimal representation otherwise.

       sid         SID       see sess.  (alias sess, session).

       sig         PENDING   see pending.  (alias pending, sig_pend).

       sigcatch    CAUGHT    see caught.  (alias caught, sig_catch).

       sigignore   IGNORED   see ignored.  (alias ignored, sig_ignore).

       sigmask     BLOCKED   see blocked.  (alias blocked, sig_block).

       size        SIZE      approximate amount of swap space that would be required if the process were to dirty all writable
                             pages and then be swapped out.  This number is very rough!

       slice       SLICE     displays the slice unit which a process belongs to, if systemd support has been included.

       spid        SPID      see lwp.  (alias lwp, tid).

       stackp      STACKP    address of the bottom (start) of stack for the process.

       start       STARTED   time the command started.  If the process was started less than 24 hours ago, the output format is
                             "HH:MM:SS", else it is "  Mmm dd" (where Mmm is a three-letter month name).  See also
                             lstart, bsdstart, start_time, and stime.

       start_time  START     starting time or date of the process.  Only the year will be displayed if the process was not
                             started the same year ps was invoked, or "MmmDD" if it was not started the same day, or "HH:MM"
                             otherwise.  See also bsdstart, start, lstart, and stime.

       stat        STAT      multi-character process state.  See section PROCESS STATE CODES for the different values meaning.
                             See also s and state if you just want the first character displayed.

       state       S         see s. (alias s).

       suid        SUID      saved user ID.  (alias svuid).

       supgid      SUPGID    group ids of supplementary groups, if any.  See getgroups(2).

       supgrp      SUPGRP    group names of supplementary groups, if any.  See getgroups(2).

       suser       SUSER     saved user name.  This will be the textual user ID, if it can be obtained and the field width
                             permits, or a decimal representation otherwise.  (alias svuser).

       svgid       SVGID     see sgid.  (alias sgid).

       svuid       SVUID     see suid.  (alias suid).

       sz          SZ        size in physical pages of the core image of the process.  This includes text, data, and stack
                             space.  Device mappings are currently excluded; this is subject to change.  See vsz and rss.

       tgid        TGID      a number representing the thread group to which a task belongs (alias pid).  It is the process ID
                             of the thread group leader.

       thcount     THCNT     see nlwp.  (alias nlwp).  number of kernel threads owned by the process.

       tid         TID       the unique number representing a dispatchable entity (alias lwp, spid).  This value may also appear
                             as: a process ID (pid); a process group ID (pgrp); a session ID for the session leader (sid); a
                             thread group ID for the thread group leader (tgid); and a tty process group ID for the process
                             group leader (tpgid).

       time        TIME      cumulative CPU time, "[DD-]HH:MM:SS" format.  (alias cputime).

       tname       TTY       controlling tty (terminal).  (alias tt, tty).

       tpgid       TPGID     ID of the foreground process group on the tty (terminal) that the process is connected to, or -1 if
                             the process is not connected to a tty.

       trs         TRS       text resident set size, the amount of physical memory devoted to executable code.

       tt          TT        controlling tty (terminal).  (alias tname, tty).

       tty         TT        controlling tty (terminal).  (alias tname, tt).

       ucmd        CMD       see comm.  (alias comm, ucomm).

       ucomm       COMMAND   see comm.  (alias comm, ucmd).

       uid         UID       see euid.  (alias euid).

       uname       USER      see euser.  (alias euser, user).

       unit        UNIT      displays unit which a process belongs to, if systemd support has been included.

       user        USER      see euser.  (alias euser, uname).

       userns      USERNS    Unique inode number describing the namespace the process belongs to. See namespaces(7).

       utsns       UTSNS     Unique inode number describing the namespace the process belongs to. See namespaces(7).

       uunit       UUNIT     displays user unit which a process belongs to, if systemd support has been included.

       vsize       VSZ       see vsz.  (alias vsz).

       vsz         VSZ       virtual memory size of the process in KiB (1024-byte units).  Device mappings are currently
                             excluded; this is subject to change.  (alias vsize).

       wchan       WCHAN     name of the kernel function in which the process is sleeping, a "-" if the process is running, or a
                             "*" if the process is multi-threaded and ps is not displaying threads.

ENVIRONMENT VARIABLES
       The following environment variables could affect ps:

       COLUMNS
          Override default display width.

       LINES
          Override default display height.

       PS_PERSONALITY
          Set to one of posix, old, linux, bsd, sun, digital...  (see section PERSONALITY below).

       CMD_ENV
          Set to one of posix, old, linux, bsd, sun, digital...  (see section PERSONALITY below).

       I_WANT_A_BROKEN_PS
          Force obsolete command line interpretation.

       LC_TIME
          Date format.

       PS_COLORS
          Not currently supported.

       PS_FORMAT
          Default output format override. You may set this to a format string of the type used for the -o option.  The DefSysV
          and DefBSD values are particularly useful.

       POSIXLY_CORRECT
          Don't find excuses to ignore bad "features".

       POSIX2
          When set to "on", acts as POSIXLY_CORRECT.

       UNIX95
          Don't find excuses to ignore bad "features".

       _XPG
          Cancel CMD_ENV=irix non-standard behavior.

       In general, it is a bad idea to set these variables.  The one exception is CMD_ENV or PS_PERSONALITY, which could be set
       to Linux for normal systems.  Without that setting, ps follows the useless and bad parts of the Unix98 standard.

PERSONALITY
       390        like the OS/390 OpenEdition ps
       aix        like AIX ps
       bsd        like FreeBSD ps (totally non-standard)
       compaq     like Digital Unix ps
       debian     like the old Debian ps
       digital    like Tru64 (was Digital Unix, was OSF/1) ps
       gnu        like the old Debian ps
       hp         like HP-UX ps
       hpux       like HP-UX ps
       irix       like Irix ps
       linux      ***** recommended *****
       old        like the original Linux ps (totally non-standard)
       os390      like OS/390 Open Edition ps
       posix      standard
       s390       like OS/390 Open Edition ps
       sco        like SCO ps
       sgi        like Irix ps
       solaris2   like Solaris 2+ (SunOS 5) ps
       sunos4     like SunOS 4 (Solaris 1) ps (totally non-standard)
       svr4       standard
       sysv       standard
       tru64      like Tru64 (was Digital Unix, was OSF/1) ps
       unix       standard
       unix95     standard
       unix98     standard

SEE ALSO
       pgrep(1), pstree(1), top(1), proc(5).

STANDARDS
       This ps conforms to:

       1   Version 2 of the Single Unix Specification
       2   The Open Group Technical Standard Base Specifications, Issue 6
       3   IEEE Std 1003.1, 2004 Edition
       4   X/Open System Interfaces Extension [UP XSI]
       5   ISO/IEC 9945:2003

AUTHOR
       ps was originally written by Branko Lankester ⟨lankeste@fwi.uva.nl⟩.  Michael K. Johnson ⟨johnsonm@redhat.com⟩ re-wrote
       it significantly to use the proc filesystem, changing a few things in the process.  Michael Shields ⟨mjshield@nyx.cs.du.
       edu⟩ added the pid-list feature.  Charles Blake ⟨cblake@bbn.com⟩ added multi-level sorting, the dirent-style library, the
       device name-to-number mmaped database, the approximate binary search directly on System.map, and many code and documenta‐
       tion cleanups.  David Mossberger-Tang wrote the generic BFD support for psupdate.  Albert Cahalan ⟨albert@users.sf.net⟩
       rewrote ps for full Unix98 and BSD support, along with some ugly hacks for obsolete and foreign syntax.

       Please send bug reports to ⟨procps@freelists.org⟩.  No subscription is required or suggested.

procps-ng                                                  August 2015                                                     PS(1)
PWD(1)                                                    User Commands                                                   PWD(1)

NAME
       pwd - print name of current/working directory

SYNOPSIS
       pwd [OPTION]...

DESCRIPTION
       Print the full filename of the current working directory.

       -L, --logical
              use PWD from environment, even if it contains symlinks

       -P, --physical
              avoid all symlinks

       --help display this help and exit

       --version
              output version information and exit

       If no option is specified, -P is assumed.

       NOTE:  your  shell may have its own version of pwd, which usually supersedes the version described here.  Please refer to
       your shell's documentation for details about the options it supports.

AUTHOR
       Written by Jim Meyering.

REPORTING BUGS
       GNU coreutils online help: &amp;lt;http://www.gnu.org/software/coreutils/&amp;gt;
       Report pwd translation bugs to &amp;lt;http://translationproject.org/team/&amp;gt;

COPYRIGHT
       Copyright   ©   2016   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3    or    later
       &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       getcwd(3)

       Full documentation at: &amp;lt;http://www.gnu.org/software/coreutils/pwd&amp;gt;
       or available locally via: info '(coreutils) pwd invocation'

GNU coreutils 8.26                                        November 2016                                                   PWD(1)
QALTER(1P)                                          POSIX Programmer's Manual                                         QALTER(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.
<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->
NAME
       qalter — alter batch job

SYNOPSIS
       qalter [−a date_time] [−A account_string] [−c interval] [−e path_name]
           [−h hold_list] [−j join_list] [−k keep_list] [−l resource_list]
           [−m mail_options] [−M mail_list] [−N name] [−o path_name]
           [−p priority] [−r y|n] [−S path_name_list] [−u user_list]
           job_identifier...

DESCRIPTION
       The attributes of a batch job are altered by a request to the batch server that manages the batch job. The qalter utility
       is a user-accessible batch client that requests the alteration of the attributes of one or more batch jobs.

       The qalter utility shall alter the attributes of those batch jobs, and only those batch jobs, for which a batch job_iden‐
       tifier is presented to the utility.

       The qalter utility shall alter the attributes of batch jobs in the order in which the batch job_identifiers are presented
       to the utility.

       If the qalter utility fails to process a batch job_identifier successfully, the utility  shall  proceed  to  process  the
       remaining batch job_identifiers, if any.

       For  each batch job_identifier for which the qalter utility succeeds, each attribute of the identified batch job shall be
       altered as indicated by all the options presented to the utility.

       For each identified batch job for which the qalter utility fails, the utility shall not alter any attribute of the  batch
       job.

       For  each  batch  job  that  the  qalter  utility  processes, the utility shall not modify any attribute other than those
       required by the options and option-arguments presented to the utility.

       The qalter utility shall alter batch jobs by sending a Modify Job Request to the batch server  that  manages  each  batch
       job.  At  the time the qalter utility exits, it shall have modified the batch job corresponding to each successfully pro‐
       cessed batch job_identifier.  An attempt to alter the attributes of a batch job in the RUNNING state  is  implementation-
       defined.

OPTIONS
       The qalter utility shall conform to the Base Definitions volume of POSIX.1‐2008, Section 12.2, Utility Syntax Guidelines.

       The following options shall be supported by the implementation:

       −a date_time
                 Redefine the time at which the batch job becomes eligible for execution.

                 The date_time argument shall be in the same form and represent the same time as for the touch utility. The time
                 so represented shall be set into the Execution_Time attribute of the batch job. If the time specified  is  ear‐
                 lier than the current time, the −a option shall have no effect.

       −A account_string
                 Redefine the account to which the resource consumption of the batch job should be charged.

                 The syntax of the account_string option-argument is unspecified.

                 The  qalter  utility  shall  set the Account_Name attribute of the batch job to the value of the account_string
                 option-argument.

       −c interval
                 Redefine whether the batch job should be checkpointed, and if so, how often.

                 The qalter utility shall accept a value for the interval option-argument that is one of the following:

                 n         No checkpointing is to be performed on the batch job (NO_CHECKPOINT).

                 s         Checkpointing is to be performed only when the batch server is shut down (CHECKPOINT_AT_SHUTDOWN).

                 c         Automatic periodic checkpointing is to be performed at  the  Minimum_Cpu_Interval  attribute  of  the
                           batch queue, in units of CPU minutes (CHECKPOINT_AT_MIN_CPU_INTERVAL).

                 c=minutes Automatic  periodic  checkpointing  is  to  be  performed  every  minutes of CPU time, or every Mini‐
                           mum_Cpu_Interval minutes, whichever is greater. The minutes argument shall conform to the syntax  for
                           unsigned integers and shall be greater than zero.

                 An  implementation  may define other checkpoint intervals. The conformance document for an implementation shall
                 describe any alternative checkpoint intervals, how they are specified, their internal behavior,  and  how  they
                 affect the behavior of the utility.

                 The  qalter  utility  shall  set the Checkpoint attribute of the batch job to the value of the interval option-
                 argument.

       −e path_name
                 Redefine the path to be used for the standard error stream of the batch job.

                 The qalter utility shall accept a path_name option-argument that conforms to the syntax of the  path_name  ele‐
                 ment  defined  in the System Interfaces volume of POSIX.1‐2008, which can be preceded by a host name element of
                 the form hostname:.

                 If the path_name option-argument constitutes an absolute pathname, the qalter utility shall set the  Error_Path
                 attribute  of  the batch job to the value of the path_name option-argument, including the host name element, if
                 present.

                 If the path_name option-argument constitutes a relative pathname and no host name  element  is  specified,  the
                 qalter  utility  shall  set  the  Error_Path  attribute  of the batch job to the value of the absolute pathname
                 derived by expanding the path_name option-argument relative to the current directory of the process  that  exe‐
                 cutes the qalter utility.

                 If the path_name option-argument constitutes a relative pathname and a host name element is specified, the qal‐
                 ter utility shall set the Error_Path attribute of the batch job to the value  of  the  option-argument  without
                 expansion.

                 If  the  path_name  option-argument  does  not include a host name element, the qalter utility shall prefix the
                 pathname in the Error_Path attribute with hostname:, where hostname is the name of the host upon which the qal‐
                 ter utility is being executed.

       −h hold_list
                 Redefine  the  types  of  holds,  if  any,  on the batch job. The qalter −h option shall accept a value for the
                 hold_list option-argument that is a string of alphanumeric characters in the portable character set.

                 The qalter utility shall accept a value for the hold_list option-argument that is a string of one  or  more  of
                 the  characters  'u',  's',  or  'o',  or the single character 'n'.  For each unique character in the hold_list
                 option-argument, the qalter utility shall add a value to the Hold_Types attribute of the batch job as  follows,
                 each representing a different hold type:

                 u     USER

                 s     SYSTEM

                 o     OPERATOR

                 If any of these characters are duplicated in the hold_list option-argument, the duplicates shall be ignored. An
                 existing Hold_Types attribute can be cleared by the hold type:

                 n     NO_HOLD

                 The qalter utility shall consider it an error if any hold type other than 'n' is combined with hold  type  'n'.
                 Strictly  conforming  applications  shall  not  repeat  any  of the characters 'u', 's', 'o', or 'n' within the
                 hold_list option-argument. The qalter utility shall permit the repetition of characters, but shall  not  assign
                 additional  meaning  to the repeated characters. An implementation may define other hold types. The conformance
                 document for an implementation shall describe any additional hold types, how they are specified, their internal
                 behavior, and how they affect the behavior of the utility.

<!-- 0e941eba-1a5a-4b5a-a3a7-8a803be781a4 <=< ACCEPT -->       −j join_list
                 Redefine  which  streams  of  the batch job are to be merged. The qalter −j option shall accept a value for the
                 join_list option-argument that is a string of alphanumeric characters in the portable character set.

                 The qalter utility shall accept a join_list option-argument that consists of one or more of the characters  'e'
                 and 'o', or the single character 'n'.

                 All  of  the other batch job output streams specified shall be merged into the output stream represented by the
                 character listed first in the join_list option-argument.

                 For each unique character in the join_list option-argument, the  qalter  utility  shall  add  a  value  to  the
                 Join_Path attribute of the batch job as follows, each representing a different batch job stream to join:

                 e     The standard error of the batch job (JOIN_STD_ERROR).

                 o     The standard output of the batch job (JOIN_STD_OUTPUT).

                 An existing Join_Path attribute can be cleared by the join type:

                 n     NO_JOIN

                 If  'n'  is specified, then no files are joined. The qalter utility shall consider it an error if any join type
                 other than 'n' is combined with join type 'n'.

                 Strictly conforming applications shall not repeat any of the characters 'e', 'o', or 'n' within  the  join_list
                 option-argument.  The qalter utility shall permit the repetition of characters, but shall not assign additional
                 meaning to the repeated characters.

                 An implementation may define other join types. The conformance document for an  implementation  shall  describe
                 any  additional  batch  job  streams,  how they are specified, their internal behavior, and how they affect the
                 behavior of the utility.
<!-- ACCEPT >=> 0e941eba-1a5a-4b5a-a3a7-8a803be781a4 -->
<!-- 2aea5df1-5d83-4f1d-a24a-361403d447d0 <=< ACCEPT -->       −k keep_list
                 Redefine which output of the batch job to retain on the execution host.

                 The qalter −k option shall accept a value for the keep_list option-argument that is a  string  of  alphanumeric
                 characters in the portable character set.

                 The  qalter utility shall accept a keep_list option-argument that consists of one or more of the characters 'e'
                 and 'o', or the single character 'n'.

                 For each unique character in the keep_list option-argument, the  qalter  utility  shall  add  a  value  to  the
                 Keep_Files attribute of the batch job as follows, each representing a different batch job stream to keep:

                 e     The standard error of the batch job (KEEP_STD_ERROR).

                 o     The standard output of the batch job (KEEP_STD_OUTPUT).

                 If  both  'e'  and  'o'  are  specified,  then both files are retained. An existing Keep_Files attribute can be
                 cleared by the keep type:

                 n     NO_KEEP

                 If 'n' is specified, then no files are retained. The qalter utility shall consider it an error if any keep type
                 other than 'n' is combined with keep type 'n'.

                 Strictly  conforming  applications shall not repeat any of the characters 'e', 'o', or 'n' within the keep_list
                 option-argument. The qalter utility shall permit the repetition of characters, but shall not assign  additional
                 meaning to the repeated characters. An implementation may define other keep types. The conformance document for
                 an implementation shall describe any additional keep types, how they are specified,  their  internal  behavior,
                 and how they affect the behavior of the utility.<!-- ACCEPT >=> 2aea5df1-5d83-4f1d-a24a-361403d447d0 -->

       −l resource_list
                 Redefine the resources that are allowed or required by the batch job.

                 The qalter utility shall accept a resource_list option-argument that conforms to the following syntax:

                     resource=value[,,resource=value,,...]

                 The  qalter  utility  shall set one entry in the value of the Resource_List attribute of the batch job for each
                 resource listed in the resource_list option-argument.

                 Because the list of supported resource names might vary by batch server, the qalter utility shall rely  on  the
                 batch  server  to  validate the resource names and associated values. See Section 3.3.3, Multiple Keyword-Value
                 Pairs for a means of removing keyword=value (and value@keyword) pairs and other general rules for list-oriented
                 batch job attributes.

       −m mail_options
                 Redefine  the points in the execution of the batch job at which the batch server is to send mail about a change
                 in the state of the batch job.

                 The qalter −m option shall accept a value for the mail_options option-argument that is a string of alphanumeric
                 characters in the portable character set.

                 The qalter utility shall accept a value for the mail_options option-argument that is a string of one or more of
                 the characters 'e', 'b', and 'a', or the single character 'n'.  For each unique character in  the  mail_options
                 option-argument,  the qalter utility shall add a value to the Mail_Users attribute of the batch job as follows,
                 each representing a different time during the life of a batch job at which to send mail:

                 e     MAIL_AT_EXIT

                 b     MAIL_AT_BEGINNING

                 a     MAIL_AT_ABORT

                 If any of these characters are duplicated in the mail_options option-argument, the duplicates shall be ignored.

                 An existing Mail_Points attribute can be cleared by the mail type:

                 n     NO_MAIL

                 If 'n' is specified, then mail is not sent. The qalter utility shall consider it an  error  if  any  mail  type
                 other  than  'n'  is combined with mail type 'n'.  Strictly conforming applications shall not repeat any of the
                 characters 'e', 'b', 'a', or 'n' within the mail_options option-argument. The qalter utility shall  permit  the
                 repetition of characters but shall not assign additional meaning to the repeated characters.

                 An  implementation  may  define other mail types. The conformance document for an implementation shall describe
                 any additional mail types, how they are specified, their internal behavior, and how they affect the behavior of
                 the utility.

       −M mail_list
                 Redefine  the list of users to which the batch server that executes the batch job is to send mail, if the batch
                 server sends mail about the batch job.

                 The syntax of the mail_list option-argument is unspecified. If the implementation of the qalter utility uses  a
                 name service to locate users, the utility shall accept the syntax used by the name service.

                 If  the  implementation  of  the qalter utility does not use a name service to locate users, the implementation
                 shall accept the following syntax for user names:

                     mail_address[,,mail_address,,...]

                 The interpretation of mail_address is implementation-defined.

                 The qalter utility shall set the Mail_Users attribute of the batch job to the value of  the  mail_list  option-
                 argument.

       −N name   Redefine the name of the batch job.

                 The  qalter  −N  option shall accept a value for the name option-argument that is a string of up to 15 alphanu‐
                 meric characters in the portable character set where the first character is alphabetic.

                 The syntax of the name option-argument is unspecified.

                 The qalter utility shall set the Job_Name attribute of the batch job to the value of the name option-argument.

       −o path_name
                 Redefine the path for the standard output of the batch job.

                 The qalter utility shall accept a path_name option-argument that conforms to the syntax of the  path_name  ele‐
                 ment  defined  in the System Interfaces volume of POSIX.1‐2008, which can be preceded by a host name element of
                 the form hostname:.

                 If the path_name option-argument constitutes an absolute pathname, the qalter utility shall set the Output_Path
                 attribute of the batch job to the value of the path_name option-argument.

                 If  the  path_name  option-argument  constitutes a relative pathname and no host name element is specified, the
                 qalter utility shall set the Output_Path attribute of the batch job to the absolute pathname derived by expand‐
                 ing  the  path_name  option-argument  relative to the current directory of the process that executes the qalter
                 utility.

                 If the path_name option-argument constitutes a relative pathname and a host name element is specified, the qal‐
                 ter  utility shall set the Output_Path attribute of the batch job to the value of the path_name option-argument
                 without any expansion of the pathname.

                 If the path_name option-argument does not include a host name element, the  qalter  utility  shall  prefix  the
                 pathname  in  the  Output_Path  attribute with hostname:, where hostname is the name of the host upon which the
                 qalter utility is being executed.

       −p priority
                 Redefine the priority of the batch job.

                 The qalter utility shall accept a value for the priority option-argument that conforms to the syntax for signed
                 decimal integers, and which is not less than −1024 and not greater than 1023.

                 The  qalter utility shall set the Priority attribute of the batch job to the value of the priority option-argu‐
                 ment.

       −r y|n    Redefine whether the batch job is rerunnable.

                 If the value of the option-argument is 'y', the qalter utility shall set the Rerunable attribute of  the  batch
                 job to TRUE.

                 If  the  value of the option-argument is 'n', the qalter utility shall set the Rerunable attribute of the batch
                 job to FALSE.

                 The qalter utility shall consider it an error if any character other than  'y'  or  'n'  is  specified  in  the
                 option-argument.

       −S path_name_list
                 Redefine the shell that interprets the script at the destination system.

                 The qalter utility shall accept a path_name_list option-argument that conforms to the following syntax:

                     pathname[@host][,pathname[@host],...]

                 The qalter utility shall accept only one pathname that is missing a corresponding host name. The qalter utility
                 shall allow only one pathname per named host.

                 The qalter utility shall add a value to the Shell_Path_List attribute of the batch job for each  entry  in  the
                 path_name_list  option-argument.  See  Section 3.3.3, Multiple Keyword-Value Pairs for a means of removing key‐
                 word=value (and value@keyword) pairs and other general rules for list-oriented batch job attributes.

       −u user_list
                 Redefine the user name under which the batch job is to run at the destination system.

                 The qalter utility shall accept a user_list option-argument that conforms to the following syntax:

                     username[@host][,,username[@host],,...]

                 The qalter utility shall accept only one user name that is missing a corresponding host name. The qalter  util‐
                 ity shall accept only one user name per named host.

                 The  qalter  utility  shall  add  a  value  to  the  User_List attribute of the batch job for each entry in the
                 user_list option-argument. See Section 3.3.3, Multiple  Keyword-Value  Pairs  for  a  means  of  removing  key‐
                 word=value (and value@keyword) pairs and other general rules for list-oriented batch job attributes.

OPERANDS
       The  qalter  utility shall accept one or more operands that conform to the syntax for a batch job_identifier (see Section
       3.3.1, Batch Job Identifier).

STDIN
       Not used.

INPUT FILES
       None.

<!-- 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 <=< ACCEPT -->ENVIRONMENT VARIABLES
       The following environment variables shall affect the execution of qalter:

       LANG      Provide a default value for the internationalization variables that are unset or null. (See  the  Base  Defini‐
                 tions  volume  of POSIX.1‐2008, Section 8.2, Internationalization Variables the precedence of internationaliza‐
                 tion variables used to determine the values of locale categories.)

       LC_ALL    If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_CTYPE  Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, sin‐
                 gle-byte as opposed to multi-byte characters in arguments).

       LC_MESSAGES
                 Determine  the  locale  that should be used to affect the format and contents of diagnostic messages written to
                 standard error.

       LOGNAME   Determine the login name of the user.<!-- ACCEPT >=> 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 -->

       TZ        Determine the timezone used to interpret the date-time option-argument. If TZ is unset or null, an  unspecified
                 default timezone shall be used.

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       None.

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       None.

<!-- a42f9355-e63b-4205-ac0b-0b19b24faf9d <=< ACCEPT -->EXIT STATUS
       The following exit values shall be returned:

        0    Successful completion.

       &amp;gt;0    An error occurred.<!-- ACCEPT >=> a42f9355-e63b-4205-ac0b-0b19b24faf9d -->

CONSEQUENCES OF ERRORS
       In  addition  to the default behavior, the qalter utility shall not be required to write a diagnostic message to standard
       error when the error reply received from a batch server indicates that the batch job_identifier does  not  exist  on  the
       server.  Whether  or  not  the  qalter utility attempts to locate the batch job on other batch servers is implementation-
       defined.

       The following sections are informative.

APPLICATION USAGE
       None.

EXAMPLES
       None.

RATIONALE
       The qalter utility allows users to change the attributes of a batch job.

       As a means of altering a queued job, the qalter utility is superior to deleting and requeuing the batch job insofar as an
       altered job retains its place in the queue with some traditional selection algorithms. In addition, the qalter utility is
       both shorter and simpler than a sequence of qdel and qsub utilities.

       The result of an attempt on the part of a user to alter a batch job in a RUNNING state is implementation-defined  because
       a  batch job in the RUNNING state will already have opened its output files and otherwise performed any actions indicated
       by the options in effect at the time the batch job began execution.

       The options processed by the qalter utility are identical to those of the qsub utility, with a few  exceptions:  −V,  −v,
       and  −q.   The  −V  and −v are inappropriate for the qalter utility, since they capture potentially transient environment
       information from the submitting process. The −q option would specify a new queue, which would largely negate  the  previ‐
       ously stated advantage of using qalter; furthermore, the qmove utility provides a superior means of moving jobs.

       Each of the following paragraphs provides the rationale for a qalter option.

       Additional rationale concerning these options can be found in the rationale for the qsub utility.

       The −a option allows users to alter the date and time at which a batch job becomes eligible to run.

       The  −A  option allows users to change the account that will be charged for the resources consumed by the batch job. Sup‐
       port for the −A option is mandatory for conforming implementations of  qalter,  even  though  support  of  accounting  is
       optional  for  servers. Whether or not to support accounting is left to the implementor of the server, but mandatory sup‐
       port of the −A option assures users of a consistent interface and allows them to control accounting on servers that  sup‐
       port accounting.

       The  −c  option  allows  users  to  alter the checkpointing interval of a batch job. A checkpointing system, which is not
       defined by POSIX.1‐2008, allows recovery of a batch job at the most recent checkpoint in the event  of  a  crash.  Check‐
       pointing  is typically used for jobs that consume expensive computing time or must meet a critical schedule. Users should
       be allowed to make the tradeoff between the overhead of checkpointing and the risk to the timely completion of the  batch
       job;  therefore,  this  volume  of  POSIX.1‐2008 provides the checkpointing interval option. Support for checkpointing is
       optional for servers.

       The −e option allows users to alter the name and location of the standard error stream written by a batch  job.  However,
       the path of the standard error stream is meaningless if the value of the Join_Path attribute of the batch job is TRUE.

       The  −h option allows users to set the hold type in the Hold_Types attribute of a batch job. The qhold and qrls utilities
       add or remove hold types to the Hold_Types attribute, respectively. The −h option has been modified to allow  for  imple‐
       mentation-defined hold types.

       The  −j  option  allows  users  to alter the decision to join (merge) the standard error stream of the batch job with the
       standard output stream of the batch job.

       The −l option allows users to change the resource limits imposed on a batch job.

       The −m option allows users to modify the list of points in the life of a batch job at which  the  designated  users  will
       receive mail notification.

       The  −M  option allows users to alter the list of users who will receive notification about events in the life of a batch
       job.

       The −N option allows users to change the name of a batch job.

       The −o option allows users to alter the name and path to which the standard output stream of the batch job will be  writ‐
       ten.

       The −P option allows users to modify the priority of a batch job. Support for priority is optional for batch servers.

       The −r option allows users to alter the rerunability status of a batch job.

       The  −S  option  allows  users  to  change the name and location of the shell image that will be invoked to interpret the
       script of the batch job. This option has been modified to allow a list of shell name and locations associated  with  dif‐
       ferent hosts.

       The −u option allows users to change the user identifier under which the batch job will execute.

       The  job_identifier operand syntax is provided so that the user can differentiate between the originating and destination
       (or executing) batch server. These may or may not be the same. The .server_name portion identifies the originating  batch
       server, while the @server portion identifies the destination batch server.

       Historically,  the  qalter  utility  has been a component of the Network Queuing System (NQS), the existing practice from
       which this utility has been derived.

FUTURE DIRECTIONS
       The qalter utility may be removed in a future version.

SEE ALSO
       Chapter 3, Batch Environment Services, qdel, qhold, qmove, qrls, qsub, touch

       The Base Definitions volume of POSIX.1‐2008, Chapter 8, Environment Variables, Section 12.2, Utility Syntax Guidelines

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013  Edition,  Standard  for
       Information  Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7, Copy‐
       right (C) 2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This  is  POSIX.1-2008
       with  the  2013  Technical  Corrigendum 1 applied.) In the event of any discrepancy between this version and the original
       IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the  referee  document.  The  original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any  typographical  or formatting errors that appear in this page are most likely to have been introduced during the con‐
       version of the source files to man page format. To report such errors,  see  https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                    QALTER(1P)
QDEL(1P)                                            POSIX Programmer's Manual                                           QDEL(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->

NAME
       qdel — delete batch jobs

SYNOPSIS
       qdel job_identifier...

DESCRIPTION
       A  batch  job  is  deleted by sending a request to the batch server that manages the batch job. A batch job that has been
       deleted is no longer subject to management by batch services.

       The qdel utility is a user-accessible client of batch services that requests the deletion of one or more batch jobs.

       The qdel utility shall request a batch server to delete those batch jobs for which a batch job_identifier is presented to
       the utility.

       The qdel utility shall delete batch jobs in the order in which their batch job_identifiers are presented to the utility.

       If  the  qdel  utility  fails  to process any batch job_identifier successfully, the utility shall proceed to process the
       remaining batch job_identifiers, if any.

       The qdel utility shall delete each batch job by sending a Delete Job Request to the batch server that manages  the  batch
       job.

       The qdel utility shall not exit until the batch job corresponding to each successfully processed batch job_identifier has
       been deleted.

OPTIONS
       None.

OPERANDS
       The qdel utility shall accept one or more operands that conform to the syntax for a  batch  job_identifier  (see  Section
       3.3.1, Batch Job Identifier).

STDIN
       Not used.

INPUT FILES
       None.

<!-- 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 <=< ACCEPT -->ENVIRONMENT VARIABLES
       The following environment variables shall affect the execution of qdel:

       LANG      Provide  a  default  value for the internationalization variables that are unset or null. (See the Base Defini‐
                 tions volume of POSIX.1‐2008, Section 8.2, Internationalization Variables the precedence  of  internationaliza‐
                 tion variables used to determine the values of locale categories.)

       LC_ALL    If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_CTYPE  Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, sin‐
                 gle-byte as opposed to multi-byte characters in arguments).

       LC_MESSAGES
                 Determine the locale that should be used to affect the format and contents of diagnostic  messages  written  to
                 standard error.

       LOGNAME   Determine the login name of the user.
<!-- ACCEPT >=> 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 -->
ASYNCHRONOUS EVENTS
       Default.

STDOUT
       An implementation of the qdel utility may write informative messages to standard output.

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       None.

<!-- a42f9355-e63b-4205-ac0b-0b19b24faf9d <=< ACCEPT -->EXIT STATUS
       The following exit values shall be returned:

        0    Successful completion.

       &amp;gt;0    An error occurred.<!-- ACCEPT >=> a42f9355-e63b-4205-ac0b-0b19b24faf9d -->

CONSEQUENCES OF ERRORS
       In  addition  to  the  default behavior, the qdel utility shall not be required to write a diagnostic message to standard
       error when the error reply received from a batch server indicates that the batch job_identifier does  not  exist  on  the
       server.  Whether  or  not  the  qdel utility waits to output the diagnostic message while attempting to locate the job on
       other servers is implementation-defined.

       The following sections are informative.

APPLICATION USAGE
       None.

EXAMPLES
       None.

RATIONALE
       The qdel utility allows users and administrators to delete jobs.

       The qdel utility provides functionality that is not otherwise available. For example, the kill utility of  the  operating
       system does not suffice. First, to use the kill utility, the user might have to log in on a remote node, because the kill
       utility does not operate across the network. Second, unlike qdel, kill cannot remove jobs from queues. Lastly, the  argu‐
       ments of the qdel utility are job identifiers rather than process identifiers, and so this utility can be passed the out‐
       put of the qselect utility, thus providing users with a means of deleting a list of jobs.

       Because a set of jobs can be selected using the qselect utility, the qdel utility has not been complicated  with  options
       that  provide for selection of jobs. Instead, the batch jobs to be deleted are identified individually by their job iden‐
       tifiers.

       Historically, the qdel utility has been a component of NQS, the existing practice on which it is based. However, the qdel
       utility  defined  in this volume of POSIX.1‐2008 does not provide an option for specifying a signal number to send to the
       batch job prior to the killing of the process; that capability has been subsumed by the qsig utility.

       A discussion was held about the delays of networking and the possibility that the batch server may never respond, due  to
       a  down  router,  down  batch  server,  or  other network mishap. The DESCRIPTION records this under the words ``fails to
       process any job identifier''.  In the broad sense, the network problem is also an error,  which  causes  the  failure  to
       process the batch job identifier.

FUTURE DIRECTIONS
       The qdel utility may be removed in a future version.

SEE ALSO
       Chapter 3, Batch Environment Services, kill, qselect, qsig

       The Base Definitions volume of POSIX.1‐2008, Chapter 8, Environment Variables

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions  of  this  text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013 Edition, Standard for
       Information Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7,  Copy‐
       right  (C)  2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This is POSIX.1-2008
       with the 2013 Technical Corrigendum 1 applied.) In the event of any discrepancy between this  version  and  the  original
       IEEE  and  The  Open  Group Standard, the original IEEE and The Open Group Standard is the referee document. The original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any typographical or formatting errors that appear in this page are most likely to have been introduced during  the  con‐
       version  of  the source files to man page format. To report such errors, see https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                      QDEL(1P)
QHOLD(1P)                                           POSIX Programmer's Manual                                          QHOLD(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->

NAME
       qhold — hold batch jobs

SYNOPSIS
       qhold [−h hold_list] job_identifier...

DESCRIPTION
       A  hold is placed on a batch job by a request to the batch server that manages the batch job. A batch job that has one or
       more holds is not eligible for execution. The qhold utility is a user-accessible client of batch services  that  requests
       one or more types of hold to be placed on one or more batch jobs.

       The qhold utility shall place holds on those batch jobs for which a batch job_identifier is presented to the utility.

       The  qhold utility shall place holds on batch jobs in the order in which their batch job_identifiers are presented to the
       utility. If the qhold utility fails to process any batch  job_identifier  successfully,  the  utility  shall  proceed  to
       process the remaining batch job_identifiers, if any.

       The  qhold utility shall place holds on each batch job by sending a Hold Job Request to the batch server that manages the
       batch job.

       The qhold utility shall not exit until holds have been placed on the batch job corresponding to  each  successfully  pro‐
       cessed batch job_identifier.

OPTIONS
       The qhold utility shall conform to the Base Definitions volume of POSIX.1‐2008, Section 12.2, Utility Syntax Guidelines.

       The following option shall be supported by the implementation:

       −h hold_list
                 Define the types of holds to be placed on the batch job.

                 The  qhold  −h  option  shall accept a value for the hold_list option-argument that is a string of alphanumeric
                 characters in the portable character set (see the Base Definitions volume of POSIX.1‐2008, Section 6.1,  Porta‐
                 ble Character Set).

                 The qhold utility shall accept a value for the hold_list option-argument that is a string of one or more of the
                 characters 'u', 's', or 'o', or the single character 'n'.

                 For each unique character in the hold_list option-argument,  the  qhold  utility  shall  add  a  value  to  the
                 Hold_Types attribute of the batch job as follows, each representing a different hold type:

                 u     USER

                 s     SYSTEM

                 o     OPERATOR

                 If any of these characters are duplicated in the hold_list option-argument, the duplicates shall be ignored.

                 An existing Hold_Types attribute can be cleared by the following hold type:

                 n     NO_HOLD

                 The qhold utility shall consider it an error if any hold type other than 'n' is combined with hold type 'n'.

                 Strictly  conforming  applications  shall  not  repeat  any  of the characters 'u', 's', 'o', or 'n' within the
                 hold_list option-argument. The qhold utility shall permit the repetition of characters, but  shall  not  assign
                 additional meaning to the repeated characters.

                 An  implementation  may  define other hold types. The conformance document for an implementation shall describe
                 any additional hold types, how they are specified, their internal behavior, and how they affect the behavior of
                 the utility.

                 If  the  −h option is not presented to the qhold utility, the implementation shall set the Hold_Types attribute
                 to USER.

OPERANDS
       The qhold utility shall accept one or more operands that conform to the syntax for a batch  job_identifier  (see  Section
       3.3.1, Batch Job Identifier).

STDIN
       Not used.

INPUT FILES
       None.

<!-- 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 <=< ACCEPT -->ENVIRONMENT VARIABLES
       The following environment variables shall affect the execution of qhold:

       LANG      Provide  a  default  value for the internationalization variables that are unset or null. (See the Base Defini‐
                 tions volume of POSIX.1‐2008, Section 8.2, Internationalization Variables the precedence  of  internationaliza‐
                 tion variables used to determine the values of locale categories.)

       LC_ALL    If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_CTYPE  Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, sin‐
                 gle-byte as opposed to multi-byte characters in arguments).

       LC_MESSAGES
                 Determine the locale that should be used to affect the format and contents of diagnostic  messages  written  to
                 standard error.

       LOGNAME   Determine the login name of the user.
<!-- ACCEPT >=> 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 -->
ASYNCHRONOUS EVENTS
       Default.

STDOUT
       None.

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       None.

<!-- a42f9355-e63b-4205-ac0b-0b19b24faf9d <=< ACCEPT -->EXIT STATUS
       The following exit values shall be returned:

        0    Successful completion.

       &amp;gt;0    An error occurred.<!-- ACCEPT >=> a42f9355-e63b-4205-ac0b-0b19b24faf9d -->

CONSEQUENCES OF ERRORS
       In  addition  to  the default behavior, the qhold utility shall not be required to write a diagnostic message to standard
       error when the error reply received from a batch server indicates that the batch job_identifier does  not  exist  on  the
       server.  Whether  or  not  the qhold utility waits to output the diagnostic message while attempting to locate the job on
       other servers is implementation-defined.

       The following sections are informative.

APPLICATION USAGE
       None.

EXAMPLES
       None.

RATIONALE
       The qhold utility allows users to place a hold on one or more jobs. A hold makes a batch job ineligible for execution.

       The qhold utility has options that allow the user to specify the type of hold.  Should the user wish to place a hold on a
       set of jobs that meet a selection criteria, such a list of jobs can be acquired using the qselect utility.

       The  −h  option allows the user to specify the type of hold that is to be placed on the job. This option allows for USER,
       SYSTEM, OPERATOR, and implementation-defined hold types. The USER and OPERATOR holds are distinct. The batch server  that
       manages the batch job will verify that the user is authorized to set the specified hold for the batch job.

       Mail  is  not  required  on  hold because the administrator has the tools and libraries to build this option if he or she
       wishes.

       Historically, the qhold utility has been a part of some existing batch systems, although it has not traditionally been  a
       part of the NQS.

FUTURE DIRECTIONS
       The qhold utility may be removed in a future version.

SEE ALSO
       Chapter 3, Batch Environment Services, qselect

       The  Base Definitions volume of POSIX.1‐2008, Section 6.1, Portable Character Set, Chapter 8, Environment Variables, Sec‐
       tion 12.2, Utility Syntax Guidelines

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013  Edition,  Standard  for
       Information  Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7, Copy‐
       right (C) 2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This  is  POSIX.1-2008
       with  the  2013  Technical  Corrigendum 1 applied.) In the event of any discrepancy between this version and the original
       IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the  referee  document.  The  original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any  typographical  or formatting errors that appear in this page are most likely to have been introduced during the con‐
       version of the source files to man page format. To report such errors,  see  https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                     QHOLD(1P)
QMOVE(1P)                                           POSIX Programmer's Manual                                          QMOVE(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->

NAME
       qmove — move batch jobs

SYNOPSIS
       qmove destination job_identifier...

DESCRIPTION
       To  move a batch job is to remove the batch job from the batch queue in which it resides and instantiate the batch job in
       another batch queue.  A batch job is moved by a request to the batch server that manages the batch job. The qmove utility
       is a user-accessible batch client that requests the movement of one or more batch jobs.

       The  qmove  utility shall move those batch jobs, and only those batch jobs, for which a batch job_identifier is presented
       to the utility.

       The qmove utility shall move batch jobs in the order in which the corresponding batch job_identifiers  are  presented  to
       the utility.

       If  the  qmove  utility  fails  to  process a batch job_identifier successfully, the utility shall proceed to process the
       remaining batch job_identifiers, if any.

       The qmove utility shall move batch jobs by sending a Move Job Request to the batch server that manages  each  batch  job.
       The  qmove utility shall not exit before the batch jobs corresponding to all successfully processed batch job_identifiers
       have been moved.

OPTIONS
       None.

OPERANDS
       The qmove utility shall accept one operand that conforms to the syntax for a destination  (see  Section  3.3.2,  Destina‐
       tion).

       The  qmove  utility  shall accept one or more operands that conform to the syntax for a batch job_identifier (see Section
       3.3.1, Batch Job Identifier).

STDIN
       Not used.

INPUT FILES
       None.

<!-- 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 <=< ACCEPT -->ENVIRONMENT VARIABLES
       The following environment variables shall affect the execution of qmove:

       LANG      Provide a default value for the internationalization variables that are unset or null. (See  the  Base  Defini‐
                 tions  volume  of POSIX.1‐2008, Section 8.2, Internationalization Variables the precedence of internationaliza‐
                 tion variables used to determine the values of locale categories.)

       LC_ALL    If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_CTYPE  Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, sin‐
                 gle-byte as opposed to multi-byte characters in arguments).

       LC_MESSAGES
                 Determine  the  locale  that should be used to affect the format and contents of diagnostic messages written to
                 standard error.

       LOGNAME   Determine the login name of the user.<!-- ACCEPT >=> 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 -->

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       None.

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       None.

<!-- a42f9355-e63b-4205-ac0b-0b19b24faf9d <=< ACCEPT -->EXIT STATUS
       The following exit values shall be returned:

        0    Successful completion.

       &amp;gt;0    An error occurred.<!-- ACCEPT >=> a42f9355-e63b-4205-ac0b-0b19b24faf9d -->

CONSEQUENCES OF ERRORS
       In addition to the default behavior, the qmove utility shall not be required to write a diagnostic  message  to  standard
       error  when  the  error  reply received from a batch server indicates that the batch job_identifier does not exist on the
       server. Whether or not the qmove utility waits to output the diagnostic message while attempting to  locate  the  job  on
       other servers is implementation-defined.

       The following sections are informative.

APPLICATION USAGE
       None.

EXAMPLES
       None.

RATIONALE
       The qmove utility allows users to move jobs between queues.

       The alternative to using the qmove utility—deleting the batch job and requeuing it—entails considerably more typing.

       Since  the  means  of selecting jobs based on attributes has been encapsulated in the qselect utility, the only option of
       the qmove utility concerns authorization. The −u option provides the user with the convenience of changing the user iden‐
       tifier  under which the batch job will execute. Minimalism and consistency have taken precedence over convenience; the −u
       option has been deleted because the equivalent capability exists with the −u option of the qalter utility.

FUTURE DIRECTIONS
       The qmove utility may be removed in a future version.

SEE ALSO
       Chapter 3, Batch Environment Services, qalter, qselect

       The Base Definitions volume of POSIX.1‐2008, Chapter 8, Environment Variables

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013  Edition,  Standard  for
       Information  Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7, Copy‐
       right (C) 2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This  is  POSIX.1-2008
       with  the  2013  Technical  Corrigendum 1 applied.) In the event of any discrepancy between this version and the original
       IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the  referee  document.  The  original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any  typographical  or formatting errors that appear in this page are most likely to have been introduced during the con‐
       version of the source files to man page format. To report such errors,  see  https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                     QMOVE(1P)
QMSG(1P)                                            POSIX Programmer's Manual                                           QMSG(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->

NAME
       qmsg — send message to batch jobs

SYNOPSIS
       qmsg [−EO] message_string job_identifier...

DESCRIPTION
       To  send a message to a batch job is to request that a server write a message string into one or more output files of the
       batch job. A message is sent to a batch job by a request to the batch server that manages the batch job. The qmsg utility
       is a user-accessible batch client that requests the sending of messages to one or more batch jobs.

       The  qmsg  utility shall write messages into the files of batch jobs by sending a Job Message Request to the batch server
       that manages the batch job. The qmsg utility shall not directly write the message into the files of the batch job.

       The qmsg utility shall send a Job Message Request for those batch jobs, and only those batch  jobs,  for  which  a  batch
       job_identifier is presented to the utility.

       The  qmsg  utility  shall  send Job Message Requests for batch jobs in the order in which their batch job_identifiers are
       presented to the utility.

       If the qmsg utility fails to process any batch job_identifier successfully, the utility  shall  proceed  to  process  the
       remaining batch job_identifiers, if any.

       The  qmsg utility shall not exit before a Job Message Request has been sent to the server that manages the batch job that
       corresponds to each successfully processed batch job_identifier.

OPTIONS
       The qmsg utility shall conform to the Base Definitions volume of POSIX.1‐2008, Section 12.2, Utility Syntax Guidelines.

       The following options shall be supported by the implementation:

       −E        Specify that the message is written to the standard error of each batch job.

                 The qmsg utility shall write the message into the standard error of the batch job.

       −O        Specify that the message is written to the standard output of each batch job.

                 The qmsg utility shall write the message into the standard output of the batch job.

       If neither the −O nor the −E option is presented to the qmsg utility, the utility shall write the message into an  imple‐
       mentation-defined  file.  The  conformance  document  for  the implementation shall describe the name and location of the
       implementation-defined file. If both the −O and the −E options are presented to the qmsg utility, then the utility  shall
       write the messages to both standard output and standard error.

OPERANDS
       The qmsg utility shall accept a minimum of two operands, message_string and one or more batch job_identifiers.

       The  message_string  operand shall be the string to be written to one or more output files of the batch job followed by a
       &amp;lt;newline&amp;gt;.  If the string contains &amp;lt;blank&amp;gt; characters, then the application shall ensure that the string is  quoted.  The
       message_string  shall  be encoded in the portable character set (see the Base Definitions volume of POSIX.1‐2008, Section
       6.1, Portable Character Set).

       All remaining operands are batch job_identifiers that conform to the syntax  for  a  batch  job_identifier  (see  Section
       3.3.1, Batch Job Identifier).

STDIN
       Not used.

INPUT FILES
       None.

<!-- 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 <=< ACCEPT -->ENVIRONMENT VARIABLES
       The following environment variables shall affect the execution of qmsg:

       LANG      Provide  a  default  value for the internationalization variables that are unset or null. (See the Base Defini‐
                 tions volume of POSIX.1‐2008, Section 8.2, Internationalization Variables the precedence  of  internationaliza‐
                 tion variables used to determine the values of locale categories.)

       LC_ALL    If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_CTYPE  Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, sin‐
                 gle-byte as opposed to multi-byte characters in arguments).

       LC_MESSAGES
                 Determine the locale that should be used to affect the format and contents of diagnostic  messages  written  to
                 standard error.

       LOGNAME   Determine the login name of the user.
<!-- ACCEPT >=> 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 -->
ASYNCHRONOUS EVENTS
       Default.

STDOUT
       None.

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       None.

<!-- a42f9355-e63b-4205-ac0b-0b19b24faf9d <=< ACCEPT -->EXIT STATUS
       The following exit values shall be returned:

        0    Successful completion.

       &amp;gt;0    An error occurred.<!-- ACCEPT >=> a42f9355-e63b-4205-ac0b-0b19b24faf9d -->

CONSEQUENCES OF ERRORS
       In  addition  to  the  default behavior, the qmsg utility shall not be required to write a diagnostic message to standard
       error when the error reply received from a batch server indicates that the batch job_identifier does  not  exist  on  the
       server.  Whether  or  not  the  qmsg utility waits to output the diagnostic message while attempting to locate the job on
       other servers is implementation-defined.

       The following sections are informative.

APPLICATION USAGE
       None.

EXAMPLES
       None.

RATIONALE
       The qmsg utility allows users to write messages into the output files of running jobs.  Users,  including  operators  and
       administrators, have a number of occasions when they want to place messages in the output files of a batch job. For exam‐
       ple, if a disk that is being used by a batch job is showing errors, the operator might note this in  the  standard  error
       stream of the batch job.

       The options of the qmsg utility provide users with the means of placing the message in the output stream of their choice.
       The default output stream for the message—if the user does not  designate  an  output  stream—is  implementation-defined,
       since  many  implementations will provide, as an extension to this volume of POSIX.1‐2008, a log file that shows the his‐
       tory of utility execution.

       If users wish to send a message to a set of jobs that meet a selection criteria, the  qselect  utility  can  be  used  to
       acquire the appropriate list of job identifiers.

       The −E option allows users to place the message in the standard error stream of the batch job.

       The −O option allows users to place the message in the standard output stream of the batch job.

       Historically,  the  qmsg  utility  is an existing practice in the offerings of one or more implementors of an NQS-derived
       batch system. The utility has been found to be useful  enough  that  it  deserves  to  be  included  in  this  volume  of
       POSIX.1‐2008.

FUTURE DIRECTIONS
       The qmsg utility may be removed in a future version.

SEE ALSO
       Chapter 3, Batch Environment Services, qselect

       The  Base Definitions volume of POSIX.1‐2008, Section 6.1, Portable Character Set, Chapter 8, Environment Variables, Sec‐
       tion 12.2, Utility Syntax Guidelines

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013  Edition,  Standard  for
       Information  Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7, Copy‐
       right (C) 2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This  is  POSIX.1-2008
       with  the  2013  Technical  Corrigendum 1 applied.) In the event of any discrepancy between this version and the original
       IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the  referee  document.  The  original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any  typographical  or formatting errors that appear in this page are most likely to have been introduced during the con‐
       version of the source files to man page format. To report such errors,  see  https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                      QMSG(1P)
QRERUN(1P)                                          POSIX Programmer's Manual                                         QRERUN(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->

NAME
       qrerun — rerun batch jobs

SYNOPSIS
       qrerun job_identifier...

DESCRIPTION
       To  rerun  a  batch  job is to terminate the session leader of the batch job, delete any associated checkpoint files, and
       return the batch job to the batch queued state. A batch job is rerun by a request to the batch server  that  manages  the
       batch job. The qrerun utility is a user-accessible batch client that requests the rerunning of one or more batch jobs.

       The qrerun utility shall rerun those batch jobs for which a batch job_identifier is presented to the utility.

       The qrerun utility shall rerun batch jobs in the order in which their batch job_identifiers are presented to the utility.

       If  the  qrerun  utility fails to process any batch job_identifier successfully, the utility shall proceed to process the
       remaining batch job_identifiers, if any.

       The qrerun utility shall rerun batch jobs by sending a Rerun Job Request to the batch server that manages each batch job.

       For each successfully processed batch job_identifier, the qrerun utility shall have rerun the corresponding batch job  at
       the time the utility exits.

OPTIONS
       None.

OPERANDS
       The  qrerun  utility shall accept one or more operands that conform to the syntax for a batch job_identifier (see Section
       3.3.1, Batch Job Identifier).

STDIN
       Not used.

INPUT FILES
       None.

<!-- 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 <=< ACCEPT -->ENVIRONMENT VARIABLES
       The following environment variables shall affect the execution of qrerun:

       LANG      Provide a default value for the internationalization variables that are unset or null. (See  the  Base  Defini‐
                 tions  volume  of POSIX.1‐2008, Section 8.2, Internationalization Variables the precedence of internationaliza‐
                 tion variables used to determine the values of locale categories.)

       LC_ALL    If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_CTYPE  Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, sin‐
                 gle-byte as opposed to multi-byte characters in arguments).

       LC_MESSAGES
                 Determine  the  locale  that should be used to affect the format and contents of diagnostic messages written to
                 standard error.

       LOGNAME   Determine the login name of the user.<!-- ACCEPT >=> 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 -->

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       None.

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       None.

<!-- a42f9355-e63b-4205-ac0b-0b19b24faf9d <=< ACCEPT -->EXIT STATUS
       The following exit values shall be returned:

        0    Successful completion.

       &amp;gt;0    An error occurred.<!-- ACCEPT >=> a42f9355-e63b-4205-ac0b-0b19b24faf9d -->

CONSEQUENCES OF ERRORS
       In addition to the default behavior, the qrerun utility shall not be required to write a diagnostic message  to  standard
       error  when  the  error  reply received from a batch server indicates that the batch job_identifier does not exist on the
       server. Whether or not the qrerun utility waits to output the diagnostic message while attempting to locate  the  job  on
       other servers is implementation-defined.

       The following sections are informative.

APPLICATION USAGE
       None.

EXAMPLES
       None.

RATIONALE
       The qrerun utility allows users to cause jobs in the running state to exit and rerun.

       The qrerun utility is a new utility, vis-a-vis existing practice, that has been defined in this volume of POSIX.1‐2008 to
       correct user-perceived deficiencies in the existing practice.

FUTURE DIRECTIONS
       The qrerun utility may be removed in a future version.

SEE ALSO
       Chapter 3, Batch Environment Services

       The Base Definitions volume of POSIX.1‐2008, Chapter 8, Environment Variables

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013  Edition,  Standard  for
       Information  Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7, Copy‐
       right (C) 2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This  is  POSIX.1-2008
       with  the  2013  Technical  Corrigendum 1 applied.) In the event of any discrepancy between this version and the original
       IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the  referee  document.  The  original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any  typographical  or formatting errors that appear in this page are most likely to have been introduced during the con‐
       version of the source files to man page format. To report such errors,  see  https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                    QRERUN(1P)
QRLS(1P)                                            POSIX Programmer's Manual                                           QRLS(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->

NAME
       qrls — release batch jobs

SYNOPSIS
       qrls [−h hold_list] job_identifier...

DESCRIPTION
       A  batch  job  might  have  one or more holds, which prevent the batch job from executing. A batch job from which all the
       holds have been removed becomes eligible for execution and is said to have been released. A batch job hold is removed  by
       sending  a  request to the batch server that manages the batch job. The qrls utility is a user-accessible client of batch
       services that requests holds be removed from one or more batch jobs.

       The qrls utility shall remove one or more holds from those batch jobs for which a batch job_identifier  is  presented  to
       the utility.

       The  qrls  utility  shall remove holds from batch jobs in the order in which their batch job_identifiers are presented to
       the utility.

       If the qrls utility fails to process a batch job_identifier successfully,  the  utility  shall  proceed  to  process  the
       remaining batch job_identifiers, if any.

       The  qrls  utility shall remove holds on each batch job by sending a Release Job Request to the batch server that manages
       the batch job.

       The qrls utility shall not exit until the holds have been removed from the batch job corresponding to  each  successfully
       processed batch job_identifier.

OPTIONS
       The qrls utility shall conform to the Base Definitions volume of POSIX.1‐2008, Section 12.2, Utility Syntax Guidelines.

       The following option shall be supported by the implementation:

       −h hold_list
                 Define the types of holds to be removed from the batch job.

                 The  qrls  −h  option  shall  accept a value for the hold_list option-argument that is a string of alphanumeric
                 characters in the portable character set (see the Base Definitions volume of POSIX.1‐2008, Section 6.1,  Porta‐
                 ble Character Set).

                 The  qrls utility shall accept a value for the hold_list option-argument that is a string of one or more of the
                 characters 'u', 's', or 'o', or the single character 'n'.

                 For each unique character in the hold_list  option-argument,  the  qrls  utility  shall  add  a  value  to  the
                 Hold_Types attribute of the batch job as follows, each representing a different hold type:

                 u     USER

                 s     SYSTEM

                 o     OPERATOR

                 If any of these characters are duplicated in the hold_list option-argument, the duplicates shall be ignored.

                 An existing Hold_Types attribute can be cleared by the following hold type:

                 n     NO_HOLD

                 The qrls utility shall consider it an error if any hold type other than 'n' is combined with hold type 'n'.

                 Strictly  conforming  applications  shall  not  repeat  any  of the characters 'u', 's', 'o', or 'n' within the
                 hold_list option-argument. The qrls utility shall permit the repetition of characters,  but  shall  not  assign
                 additional meaning to the repeated characters.

                 An  implementation  may  define other hold types. The conformance document for an implementation shall describe
                 any additional hold types, how they are specified, their internal behavior, and how they affect the behavior of
                 the utility.

                 If  the  −h  option  is not presented to the qrls utility, the implementation shall remove the USER hold in the
                 Hold_Types attribute.

OPERANDS
       The qrls utility shall accept one or more operands that conform to the syntax for a  batch  job_identifier  (see  Section
       3.3.1, Batch Job Identifier).

STDIN
       Not used.

INPUT FILES
       None.

<!-- 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 <=< ACCEPT -->ENVIRONMENT VARIABLES
       The following environment variables shall affect the execution of qrls:

       LANG      Provide  a  default  value for the internationalization variables that are unset or null. (See the Base Defini‐
                 tions volume of POSIX.1‐2008, Section 8.2, Internationalization Variables the precedence  of  internationaliza‐
                 tion variables used to determine the values of locale categories.)

       LC_ALL    If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_CTYPE  Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, sin‐
                 gle-byte as opposed to multi-byte characters in arguments).

       LC_MESSAGES
                 Determine the locale that should be used to affect the format and contents of diagnostic  messages  written  to
                 standard error.

       LOGNAME   Determine the login name of the user.
<!-- ACCEPT >=> 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 -->
ASYNCHRONOUS EVENTS
       Default.

STDOUT
       None.

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       None.

<!-- a42f9355-e63b-4205-ac0b-0b19b24faf9d <=< ACCEPT -->EXIT STATUS
       The following exit values shall be returned:

        0    Successful completion.

       &amp;gt;0    An error occurred.
<!-- ACCEPT >=> a42f9355-e63b-4205-ac0b-0b19b24faf9d -->
CONSEQUENCES OF ERRORS
       In  addition  to  the  default behavior, the qrls utility shall not be required to write a diagnostic message to standard
       error when the error reply received from a batch server indicates that the batch job_identifier does  not  exist  on  the
       server.  Whether  or  not  the  qrls utility waits to output the diagnostic message while attempting to locate the job on
       other servers is implementation-defined.

       The following sections are informative.

APPLICATION USAGE
       None.

EXAMPLES
       None.

RATIONALE
       The qrls utility allows users, operators, and administrators to remove holds from jobs.

       The qrls utility does not support any job selection options or wildcard arguments. Users  may  acquire  a  list  of  jobs
       selected by attributes using the qselect utility. For example, a user could select all of their held jobs.

       The  −h  option  allows  the user to specify the type of hold that is to be removed. This option allows for USER, SYSTEM,
       OPERATOR, and implementation-defined hold types. The batch server that manages the batch job will verify whether the user
       is  authorized to remove the specified hold for the batch job. If more than one type of hold has been placed on the batch
       job, a user may wish to remove only some of them.

       Mail is not required on release because the administrator has the tools and libraries to build this option if required.

       The qrls utility is a new utility vis-a-vis existing practice; it has been defined in this volume of POSIX.1‐2008 as  the
       natural complement to the qhold utility.

FUTURE DIRECTIONS
       The qrls utility may be removed in a future version.

SEE ALSO
       Chapter 3, Batch Environment Services, qhold, qselect

       The  Base Definitions volume of POSIX.1‐2008, Section 6.1, Portable Character Set, Chapter 8, Environment Variables, Sec‐
       tion 12.2, Utility Syntax Guidelines

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013  Edition,  Standard  for
       Information  Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7, Copy‐
       right (C) 2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This  is  POSIX.1-2008
       with  the  2013  Technical  Corrigendum 1 applied.) In the event of any discrepancy between this version and the original
       IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the  referee  document.  The  original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any  typographical  or formatting errors that appear in this page are most likely to have been introduced during the con‐
       version of the source files to man page format. To report such errors,  see  https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                      QRLS(1P)
QSELECT(1P)                                         POSIX Programmer's Manual                                        QSELECT(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.
<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->
NAME
       qselect — select batch jobs

SYNOPSIS
       qselect [−a [op]date_time] [−A account_string] [−c [op]interval]
           [−h hold_list] [−l resource_list] [−N name] [−p [op]priority]
           [−q destination] [−r y|n] [−s states] [−u user_list]

DESCRIPTION
       To  select  a  set of batch jobs is to return the batch job_identifiers for each batch job that meets a list of selection
       criteria. A set of batch jobs is selected by a request to a batch server. The qselect utility is a user-accessible  batch
       client that requests the selection of batch jobs.

       Upon  successful  completion,  the  qselect utility shall have returned a list of zero or more batch job_identifiers that
       meet the criteria specified by the options and option-arguments presented to the utility.

       The qselect utility shall select batch jobs by sending a Select Jobs Request to a batch server. The qselect utility shall
       not exit until the server replies to each request generated.

       For  each option presented to the qselect utility, the utility shall restrict the set of selected batch jobs as described
       in the OPTIONS section.

       The qselect utility shall not restrict selection of batch jobs except by authorization and as  required  by  the  options
       presented to the utility.

       When  an  option  is  specified with a mandatory or optional op component to the option-argument, then op shall specify a
       relation between the value of a certain batch job attribute and the value component of the option-argument. If an  op  is
       allowable  on  an  option,  then  the  description of the option letter indicates the op as either mandatory or optional.
       Acceptable strings for the op component, and the relation the string indicates, are shown in the following list:

       .eq.    The value represented by the attribute of the batch job is equal to the value represented by the option-argument.

       .ge.    The value represented by the attribute of the batch job is greater than or equal to the value represented by  the
               option-argument.

       .gt.    The value represented by the attribute of the batch job is greater than the value represented by the option-argu‐
               ment.

       .lt.    The value represented by the attribute of the batch job is less than the value represented  by  the  option-argu‐
               ment.

       .le.    The  value  represented  by  the attribute of the batch job is less than or equal to the value represented by the
               option-argument.

       .ne.    The value represented by the attribute of the batch job is not equal to the value represented by the option-argu‐
               ment.

OPTIONS
       The  qselect  utility  shall  conform to the Base Definitions volume of POSIX.1‐2008, Section 12.2, Utility Syntax Guide‐
       lines.

       The following options shall be supported by the implementation:

       −a [op]date_time
                 Restrict selection to a specific time, or a range of times.

                 The qselect utility shall select only batch jobs for which the value of the Execution_Time attribute is related
                 to the Epoch equivalent of the local time expressed by the value of the date_time component of the option-argu‐
                 ment in the manner indicated by the value of the op component of the option-argument.

                 The qselect utility shall accept a date_time component of the option-argument that conforms to  the  syntax  of
                 the time operand of the touch utility.

                 If  the  op  component of the option-argument is not presented to the qselect utility, the utility shall select
                 batch jobs for which the Execution_Time attribute is equal to the date_time component of the option-argument.

                 When comparing times, the qselect utility shall use the following definitions  for  the  op  component  of  the
                 option-argument:

                 .eq.    The  time  represented  by  value of the Execution_Time attribute of the batch job is equal to the time
                         represented by the date_time component of the option-argument.

                 .ge.    The time represented by value of the Execution_Time attribute of the batch job is after or equal to the
                         time represented by the date_time component of the option-argument.

                 .gt.    The time represented by value of the Execution_Time attribute of the batch job is after the time repre‐
                         sented by the date_time component of the option-argument.

                 .lt.    The time represented by value of the Execution_Time attribute of the batch job is before the time  rep‐
                         resented by the date_time component of the option-argument.

                 .le.    The  time  represented  by value of the Execution_Time attribute of the batch job is before or equal to
                         the time represented by the date_time component of the option-argument.

                 .ne.    The time represented by value of the Execution_Time attribute of the batch job is not equal to the time
                         represented by the date_time component of the option-argument.

                 The qselect utility shall accept the defined character strings for the op component of the option-argument.

       −A account_string
                 Restrict selection to the batch jobs charging a specified account.

                 The qselect utility shall select only batch jobs for which the value of the Account_Name attribute of the batch
                 job matches the value of the account_string option-argument.

                 The syntax of the account_string option-argument is unspecified.

       −c [op]interval
                 Restrict selection to batch jobs within a range of checkpoint intervals.

                 The qselect utility shall select only batch jobs for which the value of the Checkpoint attribute relates to the
                 value of the interval component of the option-argument in the manner indicated by the value of the op component
                 of the option-argument.

                 If the op component of the option-argument is omitted, the qselect utility shall select batch  jobs  for  which
                 the value of the Checkpoint attribute is equal to the value of the interval component of the option-argument.

                 When  comparing checkpoint intervals, the qselect utility shall use the following definitions for the op compo‐
                 nent of the option-argument:

                 .eq.    The value of the Checkpoint attribute of the batch job equals the value of the  interval  component  of
                         the option-argument.

                 .ge.    The  value  of  the  Checkpoint attribute of the batch job is greater than or equal to the value of the
                         interval component option-argument.

                 .gt.    The value of the Checkpoint attribute of the batch job is greater than the value of the interval compo‐
                         nent option-argument.

                 .lt.    The value of the Checkpoint attribute of the batch job is less than the value of the interval component
                         option-argument.

                 .le.    The value of the Checkpoint attribute of the batch job is less than or equal to the value of the inter‐
                         val component option-argument.

                 .ne.    The  value of the Checkpoint attribute of the batch job does not equal the value of the interval compo‐
                         nent option-argument.

                 The qselect utility shall accept the defined character strings for the op component of the option-argument.

                 The ordering relationship for the values of the interval option-argument is defined to be:

                     `n' .gt. `s' .gt. `c=minutes' .ge. `c'

                 When comparing Checkpoint attributes with an interval having the value of the single character 'u', only equal‐
                 ity or inequality are valid comparisons.

       −h hold_list
                 Restrict selection to batch jobs that have a specific type of hold.

                 The  qselect  utility  shall select only batch jobs for which the value of the Hold_Types attribute matches the
                 value of the hold_list option-argument.

                 The qselect −h option shall accept a value for the hold_list option-argument that is a string  of  alphanumeric
                 characters  in the portable character set (see the Base Definitions volume of POSIX.1‐2008, Section 6.1, Porta‐
                 ble Character Set).

                 The qselect utility shall accept a value for the hold_list option-argument that is a string of one or  more  of
                 the characters 'u', 's', or 'o', or the single character 'n'.

                 Each  unique character in the hold_list option-argument of the qselect utility is defined as follows, each rep‐
                 resenting a different hold type:

                 u     USER

                 s     SYSTEM

                 o     OPERATOR

                 If any of these characters are duplicated in the hold_list option-argument, the duplicates shall be ignored.

                 The qselect utility shall consider it an error if any hold type other than 'n' is combined with hold type 'n'.

                 Strictly conforming applications shall not repeat any of the characters  'u',  's',  'o',  or  'n'  within  the
                 hold_list  option-argument. The qselect utility shall permit the repetition of characters, but shall not assign
                 additional meaning to the repeated characters.

                 An implementation may define other hold types. The conformance document for an  implementation  shall  describe
                 any additional hold types, how they are specified, their internal behavior, and how they affect the behavior of
                 the utility.

       −l resource_list
                 Restrict selection to batch jobs with specified resource limits and attributes.

                 The qselect utility shall accept a resource_list option-argument with the following syntax:

                     resource_name op value [,,resource_name op value,, ...]

                 When comparing resource values, the qselect utility shall use the following definitions for the op component of
                 the option-argument:

                 .eq.    The  value  of the resource of the same name in the Resource_List attribute of the batch job equals the
                         value of the value component of the option-argument.

                 .ge.    The value of the resource of the same name in the Resource_List attribute of the batch job  is  greater
                         than or equal to the value of the value component of the option-argument.

                 .gt.    The  value  of the resource of the same name in the Resource_List attribute of the batch job is greater
                         than the value of the value component of the option-argument.

                 .lt.    The value of the resource of the same name in the Resource_List attribute of the batch job is less than
                         the value of the value component of the option-argument.

                 .ne.    The  value  of  the  resource of the same name in the Resource_List attribute of the batch job does not
                         equal the value of the value component of the option-argument.

                 .le.    The value of the resource of the same name in the Resource_List attribute of the batch job is less than
                         or equal to the value of the value component of the option-argument.

                 When  comparing  the limit of a Resource_List attribute with the value component of the option-argument, if the
                 limit, the value, or both are non-numeric, only equality or inequality are valid comparisons.

                 The qselect utility shall select only batch jobs for which the values  of  the  resource_names  listed  in  the
                 resource_list option-argument match the corresponding limits of the Resource_List attribute of the batch job.

                 Limits  of  resource_names  present  in the Resource_List attribute of the batch job that have no corresponding
                 values in the resource_list option-argument shall not be considered when selecting batch jobs.

       −N name   Restrict selection to batch jobs with a specified name.

                 The qselect utility shall select only batch jobs for which the value of  the  Job_Name  attribute  matches  the
                 value  of  the name option-argument. The string specified in the name option-argument shall be passed, uninter‐
                 preted, to the server. This allows an implementation to match ``wildcard'' patterns against batch job names.

                 An implementation shall describe in the conformance document the format it supports for  matching  against  the
                 Job_Name attribute.

       −p [op]priority
                 Restrict selection to batch jobs of the specified priority or range of priorities.

                 The qselect utility shall select only batch jobs for which the value of the Priority attribute of the batch job
                 relates to the value of the priority component of the option-argument in the manner indicated by the  value  of
                 the op component of the option-argument.

                 If  the  op  component of the option-argument is omitted, the qselect utility shall select batch jobs for which
                 the value of the Priority attribute of the batch job is equal to the value of the  priority  component  of  the
                 option-argument.

                 When comparing priority values, the qselect utility shall use the following definitions for the op component of
                 the option-argument:

                 .eq.    The value of the Priority attribute of the batch job equals the value of the priority component of  the
                         option-argument.

                 .ge.    The  value of the Priority attribute of the batch job is greater than or equal to the value of the pri‐
                         ority component option-argument.

                 .gt.    The value of the Priority attribute of the batch job is greater than the value of the  priority  compo‐
                         nent option-argument.

                 .lt.    The  value  of the Priority attribute of the batch job is less than the value of the priority component
                         option-argument.

                 .lt.    The value of the Priority attribute of the batch job is less than or equal to the value of the priority
                         component option-argument.

                 .ne.    The value of the Priority attribute of the batch job does not equal the value of the priority component
                         option-argument.

       −q destination
                 Restrict selection to the specified batch queue or server, or both.

                 The qselect utility shall select only batch jobs that are located at the destination indicated by the value  of
                 the destination option-argument.

                 The destination defines a batch queue, a server, or a batch queue at a server.

                 The  qselect utility shall accept an option-argument for the −q option that conforms to the syntax for a desti‐
                 nation. If the −q option is not presented to the qselect utility, the utility shall select batch jobs from  all
                 batch queues at the default batch server.

                 If  the option-argument describes only a batch queue, the qselect utility shall select only batch jobs from the
                 batch queue of the specified name at the default batch server.  The  means  by  which  qselect  determines  the
                 default server is implementation-defined.

                 If  the option-argument describes only a batch server, the qselect utility shall select batch jobs from all the
                 batch queues at that batch server.

                 If the option-argument describes both a batch queue and a batch server, the qselect utility shall  select  only
                 batch jobs from the specified batch queue at the specified server.

       −r y|n    Restrict selection to batch jobs with the specified rerunability status.

                 The  qselect  utility  shall select only batch jobs for which the value of the Rerunable attribute of the batch
                 job matches the value of the option-argument.

                 The qselect utility shall accept a value for the option-argument that consists of either the  single  character
                 'y' or the single character 'n'.  The character 'y' represents the value TRUE, and the character 'n' represents
                 the value FALSE.

       −s states Restrict selection to batch jobs in the specified states.

                 The qselect utility shall accept an option-argument that consists of any combination  of  the  characters  'e',
                 'q', 'r', 'w', 'h', and 't'.

                 Conforming applications shall not repeat any character in the option-argument. The qselect utility shall permit
                 the repetition of characters in the option-argument, but shall not assign additional meaning to repeated  char‐
                 acters.

                 The qselect utility shall interpret the characters in the states option-argument as follows:

                 e     Represents the EXITING state.

                 q     Represents the QUEUED state.

                 r     Represents the RUNNING state.

                 t     Represents the TRANSITING state.

                 h     Represents the HELD state.

                 w     Represents the WAITING state.

                 For  each  character  in  the states option-argument, the qselect utility shall select batch jobs in the corre‐
                 sponding state.

       −u user_list
                 Restrict selection to batch jobs owned by the specified user names.

                 The qselect utility shall select only the batch jobs of those users specified in the user_list option-argument.

                 The qselect utility shall accept a user_list option-argument that conforms to the following syntax:

                     username[@host][,,username[@host],, ...]

                 The qselect utility shall accept only one user name that is missing a  corresponding  host  name.  The  qselect
                 utility shall accept only one user name per named host.

OPERANDS
       None.

STDIN
       Not used.

INPUT FILES
       None.

<!-- 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 <=< ACCEPT -->ENVIRONMENT VARIABLES
       The following environment variables shall affect the execution of qselect:

       LANG      Provide  a  default  value for the internationalization variables that are unset or null. (See the Base Defini‐
                 tions volume of POSIX.1‐2008, Section 8.2, Internationalization Variables the precedence  of  internationaliza‐
                 tion variables used to determine the values of locale categories.)

       LC_ALL    If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_CTYPE  Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, sin‐
                 gle-byte as opposed to multi-byte characters in arguments).

       LC_MESSAGES
                 Determine the locale that should be used to affect the format and contents of diagnostic  messages  written  to
                 standard error.

       LOGNAME   Determine the login name of the user.<!-- ACCEPT >=> 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 -->

       TZ        Determine  the timezone used to interpret the date-time option-argument. If TZ is unset or null, an unspecified
                 default timezone shall be used.

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       The qselect utility shall write zero or more batch job_identifiers to standard output.

       The qselect utility shall separate the batch job_identifiers written to standard output by white space.

       The qselect utility shall write batch job_identifiers in the following format:

           sequence_number.server_name@server

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       None.

<!-- a42f9355-e63b-4205-ac0b-0b19b24faf9d <=< ACCEPT -->EXIT STATUS
       The following exit values shall be returned:

        0    Successful completion.

       &amp;gt;0    An error occurred.<!-- ACCEPT >=> a42f9355-e63b-4205-ac0b-0b19b24faf9d -->

CONSEQUENCES OF ERRORS
       Default.

       The following sections are informative.

APPLICATION USAGE
       None.

EXAMPLES
       The following example shows how a user might use the qselect utility in conjunction with the qdel utility to  delete  all
       of his or her jobs in the queued state without affecting any jobs that are already running:

           qdel $(qselect −s q)

       or:

           qselect −s q || xargs qdel

RATIONALE
       The  qselect  utility allows users to acquire a list of job identifiers that match user-specified selection criteria. The
       list of identifiers returned by the qselect utility conforms to the syntax of the batch job identifier list processed  by
       a  utility  such  as qmove, qdel, and qrls.  The qselect utility is thus a powerful tool for causing another batch system
       utility to act upon a set of jobs that match a list of selection criteria.

       The options of the qselect utility let the user apply a number of useful filters for selecting jobs. Each option  further
       restricts the selection of jobs. Many of the selection options allow the specification of a relational operator. The FOR‐
       TRAN-like syntax of the operator—that is, ".lt."—was chosen rather than the C-like "&amp;lt;=" meta-characters.

       The −a option allows users to restrict the selected jobs to those that have been submitted (or altered) to wait  until  a
       particular  time.  The time period is determined by the argument of this option, which includes both a time and an opera‐
       tor—it is thus possible to select jobs waiting until a specific time, jobs waiting until after a certain time,  or  those
       waiting for a time before the specified time.

       The  −A option allows users to restrict the selected jobs to those that have been submitted (or altered) to charge a par‐
       ticular account.

       The −c option allows users to restrict the selected jobs to those whose checkpointing interval falls within the specified
       range.

       The −l option allows users to select those jobs whose resource limits fall within the range indicated by the value of the
       option. For example, a user could select those jobs for which the CPU time limit is greater than two hours.

       The −N option allows users to select jobs by job name. For instance, all the parts of a task that have  been  divided  in
       parallel jobs might be given the same name, and thus manipulated as a group by means of this option.

       The −q option allows users to select jobs in a specified queue.

       The  −r  option allows users to select only those jobs with a specified rerun criteria. For instance, a user might select
       only those jobs that can be rerun for use with the qrerun utility.

       The −s option allows users to select only those jobs that are in a certain state.

       The −u option allows users to select jobs that have been submitted to execute under a particular account.

       The selection criteria provided by the options of the qselect utility allow users to select jobs based on all the  appro‐
       priate attributes that can be assigned to jobs by the qsub utility.

       Historically, the qselect utility has not been a part of existing practice; it is an improvement that has been introduced
       in this volume of POSIX.1‐2008.

FUTURE DIRECTIONS
       The qselect utility may be removed in a future version.

SEE ALSO
       Chapter 3, Batch Environment Services, qdel, qrerun, qrls, qselect, qsub, touch

       The Base Definitions volume of POSIX.1‐2008, Section 6.1, Portable Character Set, Chapter 8, Environment Variables,  Sec‐
       tion 12.2, Utility Syntax Guidelines

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions  of  this  text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013 Edition, Standard for
       Information Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7,  Copy‐
       right  (C)  2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This is POSIX.1-2008
       with the 2013 Technical Corrigendum 1 applied.) In the event of any discrepancy between this  version  and  the  original
       IEEE  and  The  Open  Group Standard, the original IEEE and The Open Group Standard is the referee document. The original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any typographical or formatting errors that appear in this page are most likely to have been introduced during  the  con‐
       version  of  the source files to man page format. To report such errors, see https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                   QSELECT(1P)
QSIG(1P)                                            POSIX Programmer's Manual                                           QSIG(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->

NAME
       qsig — signal batch jobs

SYNOPSIS
       qsig [−s signal] job_identifier...

DESCRIPTION
       To  signal  a  batch job is to send a signal to the session leader of the batch job. A batch job is signaled by sending a
       request to the batch server that manages the batch job. The qsig utility is a user-accessible batch client that  requests
       the signaling of a batch job.

       The  qsig  utility  shall  signal those batch jobs for which a batch job_identifier is presented to the utility. The qsig
       utility shall not signal any batch jobs whose batch job_identifiers are not presented to the utility.

       The qsig utility shall signal batch jobs in the order in which the corresponding batch job_identifiers are  presented  to
       the  utility.  If  the  qsig  utility  fails to process a batch job_identifier successfully, the utility shall proceed to
       process the remaining batch job_identifiers, if any.

       The qsig utility shall signal batch jobs by sending a Signal Job Request to the batch server that manages the batch job.

       For each successfully processed batch job_identifier, the qsig utility shall have received a  completion  reply  to  each
       Signal Job Request sent to a batch server at the time the utility exits.

OPTIONS
       The qsig utility shall conform to the Base Definitions volume of POSIX.1‐2008, Section 12.2, Utility Syntax Guidelines.

       The following option shall be supported by the implementation:

       −s signal Define the signal to be sent to the batch job.

                 The  qsig  utility  shall  accept a signal option-argument that is either a symbolic signal name or an unsigned
                 integer signal number (see the POSIX.1‐1990 standard, Section 3.3.1.1). The qsig utility  shall  accept  signal
                 names for which the SIG prefix has been omitted.

                 If the signal option-argument is a signal name, the qsig utility shall send that name.

                 If the signal option-argument is a number, the qsig utility shall send the signal value represented by the num‐
                 ber.

                 If the −s option is not presented to the qsig utility, the utility shall send the signal SIGTERM to  each  sig‐
                 naled batch job.

OPERANDS
       The  qsig  utility  shall  accept one or more operands that conform to the syntax for a batch job_identifier (see Section
       3.3.1, Batch Job Identifier).

STDIN
       Not used.

INPUT FILES
       None.

<!-- 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 <=< ACCEPT -->ENVIRONMENT VARIABLES
       The following environment variables shall affect the execution of qsig:

       LANG      Provide a default value for the internationalization variables that are unset or null. (See  the  Base  Defini‐
                 tions  volume  of POSIX.1‐2008, Section 8.2, Internationalization Variables the precedence of internationaliza‐
                 tion variables used to determine the values of locale categories.)

       LC_ALL    If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_CTYPE  Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, sin‐
                 gle-byte as opposed to multi-byte characters in arguments).

       LC_MESSAGES
                 Determine  the  locale  that should be used to affect the format and contents of diagnostic messages written to
                 standard error.

       LOGNAME   Determine the login name of the user.<!-- ACCEPT >=> 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 -->

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       An implementation of the qsig utility may write informative messages to standard output.

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       None.

<!-- a42f9355-e63b-4205-ac0b-0b19b24faf9d <=< ACCEPT -->EXIT STATUS
       The following exit values shall be returned:

        0    Successful completion.

       &amp;gt;0    An error occurred.<!-- ACCEPT >=> a42f9355-e63b-4205-ac0b-0b19b24faf9d -->

CONSEQUENCES OF ERRORS
       In addition to the default behavior, the qsig utility shall not be required to write a  diagnostic  message  to  standard
       error  when  the  error  reply received from a batch server indicates that the batch job_identifier does not exist on the
       server. Whether or not the qsig utility waits to output the diagnostic message while attempting to locate the  batch  job
       on other servers is implementation-defined.

       The following sections are informative.

APPLICATION USAGE
       None.

EXAMPLES
       None.

RATIONALE
       The qsig utility allows users to signal batch jobs.

       A  user may be unable to signal a batch job with the kill utility of the operating system for a number of reasons. First,
       the process ID of the batch job may be unknown to the user. Second, the processes of the batch job may  be  on  a  remote
       node.  However,  by  virtue  of  communication  between  batch nodes, the qsig utility can arrange for the signaling of a
       process.

       Because a batch job that is not running cannot be signaled, and because the signal may not terminate the batch  job,  the
       qsig utility is not a substitute for the qdel utility.

       The options of the qsig utility allow the user to specify the signal that is to be sent to the batch job.

       The  −s  option  allows  users  to  specify  a  signal  by  name  or by number, and thus override the default signal. The
       POSIX.1‐1990 standard defines signals by both name and number.

       The qsig utility is a new utility, vis-a-vis existing practice; it has been defined in this  volume  of  POSIX.1‐2008  in
       response to user-perceived shortcomings in existing practice.

FUTURE DIRECTIONS
       The qsig utility may be removed in a future version.

SEE ALSO
       Chapter 3, Batch Environment Services, kill, qdel

       The Base Definitions volume of POSIX.1‐2008, Chapter 8, Environment Variables, Section 12.2, Utility Syntax Guidelines

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions  of  this  text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013 Edition, Standard for
       Information Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7,  Copy‐
       right  (C)  2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This is POSIX.1-2008
       with the 2013 Technical Corrigendum 1 applied.) In the event of any discrepancy between this  version  and  the  original
       IEEE  and  The  Open  Group Standard, the original IEEE and The Open Group Standard is the referee document. The original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any typographical or formatting errors that appear in this page are most likely to have been introduced during  the  con‐
       version  of  the source files to man page format. To report such errors, see https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                      QSIG(1P)
QSTAT(1P)                                           POSIX Programmer's Manual                                          QSTAT(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->

NAME
       qstat — show status of batch jobs

SYNOPSIS
       qstat [−f] job_identifier...

       qstat −Q [−f] destination...

       qstat −B [−f] server_name...

DESCRIPTION
       The  status  of  a batch job, batch queue, or batch server is obtained by a request to the server. The qstat utility is a
       user-accessible batch client that requests the status of one or more batch jobs, batch queues, or servers, and writes the
       status information to standard output.

       For each successfully processed batch job_identifier, the qstat utility shall display information about the corresponding
       batch job.

       For each successfully processed destination, the qstat utility shall display information about  the  corresponding  batch
       queue.

       For each successfully processed server name, the qstat utility shall display information about the corresponding server.

       The qstat utility shall acquire batch job status information by sending a Job Status Request to a batch server. The qstat
       utility shall acquire batch queue status information by sending a Queue Status Request to a batch server. The qstat util‐
       ity shall acquire server status information by sending a Server Status Request to a batch server.

OPTIONS
       The qstat utility shall conform to the Base Definitions volume of POSIX.1‐2008, Section 12.2, Utility Syntax Guidelines.

       The following options shall be supported by the implementation:

       −f        Specify that a full display is produced.

                 The minimum contents of a full display are specified in the STDOUT section.

                 Additional contents and format of a full display are implementation-defined.

       −Q        Specify that the operand is a destination.

                 The  qstat  utility shall display information about each batch queue at each destination identified as an oper‐
                 and.

       −B        Specify that the operand is a server name.

                 The qstat utility shall display information about each server identified as an operand.

OPERANDS
       If the −Q option is presented to the qstat utility, the utility shall accept one or more operands  that  conform  to  the
       syntax for a destination (see Section 3.3.2, Destination).

       If the −B option is presented to the qstat utility, the utility shall accept one or more server_name operands.

       If neither the −B nor the −Q option is presented to the qstat utility, the utility shall accept one or more operands that
       conform to the syntax for a batch job_identifier (see Section 3.3.1, Batch Job Identifier).

STDIN
       Not used.

INPUT FILES
       None.

ENVIRONMENT VARIABLES
       The following environment variables shall affect the execution of qstat:

       HOME      Determine the pathname of the user's home directory.

       LANG      Provide a default value for the internationalization variables that are unset or null. (See  the  Base  Defini‐
                 tions  volume  of POSIX.1‐2008, Section 8.2, Internationalization Variables the precedence of internationaliza‐
                 tion variables used to determine the values of locale categories.)

       LC_ALL    If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_COLLATE
                 Determine the locale for the behavior of ranges, equivalence classes, and  multi-character  collating  elements
                 within regular expressions.

       LC_CTYPE  Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, sin‐
                 gle-byte as opposed to multi-byte characters in arguments).

       LC_MESSAGES
                 Determine the locale that should be used to affect the format and contents of diagnostic  messages  written  to
                 standard error.

       LC_NUMERIC
                 Determine the locale for selecting the radix character used when writing floating-point formatted output.

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       If  an  operand  presented  to  the qstat utility is a batch job_identifier and the −f option is not specified, the qstat
       utility shall display the following items on a single line, in the stated order, with white space between each item,  for
       each successfully processed operand:

        *  The batch job_identifier

        *  The batch job name

        *  The Job_Owner attribute

        *  The CPU time used by the batch job

        *  The batch job state

        *  The batch job location

       If  an operand presented to the qstat utility is a batch job_identifier and the −f option is specified, the qstat utility
       shall display the following items for each success fully processed operand:

        *  The batch job_identifier

        *  The batch job name

        *  The Job_Owner attribute

        *  The execution user ID

        *  The CPU time used by the batch job

        *  The batch job state

        *  The batch job location

        *  Additional implementation-defined information, if any, about the batch job or batch queue

       If an operand presented to the qstat utility is a destination, the −Q option is specified, and the −f option is not spec‐
       ified,  the  qstat  utility  shall  display  the  following items on a single line, in the stated order, with white space
       between each item, for each successfully processed operand:

        *  The batch queue name

        *  The maximum number of batch jobs that shall be run in the batch queue concurrently

        *  The total number of batch jobs in the batch queue

        *  The status of the batch queue

        *  For each state, the number of batch jobs in that state in the batch queue and the name of the state

        *  The type of batch queue (execution or routing)

       If the operands presented to the qstat utility are destinations, the −Q option is specified, and the −f option is  speci‐
       fied, the qstat utility shall display the following items for each successfully processed operand:

        *  The batch queue name

        *  The maximum number of batch jobs that shall be run in the batch queue concurrently

        *  The total number of batch jobs in the batch queue

        *  The status of the batch queue

        *  For each state, the number of batch jobs in that state in the batch queue and the name of the state

        *  The type of batch queue (execution or routing)

        *  Additional implementation-defined information, if any, about the batch queue

       If  the  operands presented to the qstat utility are batch server names, the −B option is specified, and the −f option is
       not specified, the qstat utility shall display the following items on a single line, in  the  stated  order,  with  white
       space between each item, for each successfully processed operand:

        *  The batch server name

        *  The maximum number of batch jobs that shall be run in the batch queue concurrently

        *  The total number of batch jobs managed by the batch server

        *  The status of the batch server

        *  For each state, the number of batch jobs in that state and the name of the state

       If  the operands presented to the qstat utility are server names, the −B option is specified, and the −f option is speci‐
       fied, the qstat utility shall display the following items for each successfully processed operand:

        *  The server name

        *  The maximum number of batch jobs that shall be run in the batch queue concurrently

        *  The total number of batch jobs managed by the server

        *  The status of the server

        *  For each state, the number of batch jobs in that state and the name of the state

        *  Additional implementation-defined information, if any, about the server

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       None.

<!-- a42f9355-e63b-4205-ac0b-0b19b24faf9d <=< ACCEPT -->EXIT STATUS
       The following exit values shall be returned:

        0    Successful completion.

       &amp;gt;0    An error occurred.<!-- ACCEPT >=> a42f9355-e63b-4205-ac0b-0b19b24faf9d -->

CONSEQUENCES OF ERRORS
       In addition to the default behavior, the qstat utility shall not be required to write a diagnostic  message  to  standard
       error  when  the  error  reply received from a batch server indicates that the batch job_identifier does not exist on the
       server. Whether or not the qstat utility waits to output the diagnostic message while attempting to locate the batch  job
       on other servers is implementation-defined.

       The following sections are informative.

APPLICATION USAGE
       None.

EXAMPLES
       None.

RATIONALE
       The qstat utility allows users to display the status of jobs and list the batch jobs in queues.

       The  operands of the qstat utility may be either job identifiers, queues (specified as destination identifiers), or batch
       server names. The −Q and −B options, or absence thereof, indicate the nature of the operands.

       The other options of the qstat utility allow the user to control the amount of information displayed and  the  format  in
       which  it  is  displayed.  Should a user wish to display the status of a set of jobs that match a selection criteria, the
       qselect utility may be used to acquire such a list.

       The −f option allows users to request a ``full'' display in an implementation-defined format.

       Historically, the qstat utility has been a part of the NQS and its derivatives, the existing  practice  on  which  it  is
       based.

FUTURE DIRECTIONS
       The qstat utility may be removed in a future version.

SEE ALSO
       Chapter 3, Batch Environment Services, qselect

       The Base Definitions volume of POSIX.1‐2008, Chapter 8, Environment Variables, Section 12.2, Utility Syntax Guidelines

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions  of  this  text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013 Edition, Standard for
       Information Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7,  Copy‐
       right  (C)  2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This is POSIX.1-2008
       with the 2013 Technical Corrigendum 1 applied.) In the event of any discrepancy between this  version  and  the  original
       IEEE  and  The  Open  Group Standard, the original IEEE and The Open Group Standard is the referee document. The original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any typographical or formatting errors that appear in this page are most likely to have been introduced during  the  con‐
       version  of  the source files to man page format. To report such errors, see https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                     QSTAT(1P)
QSUB(1P)                                            POSIX Programmer's Manual                                           QSUB(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->

NAME
       qsub — submit a script

SYNOPSIS
       qsub [−a date_time] [−A account_string] [−c interval]
           [−C directive_prefix] [−e path_name] [−h] [−j join_list]
           [−k keep_list] [−m mail_options] [−M mail_list] [−N name]
           [−o path_name] [−p priority] [−q destination] [−r y|n]
           [−S path_name_list] [−u user_list] [−v variable_list] [−V]
           [−z] [script]

DESCRIPTION
       To  submit  a  script  is  to  create a batch job that executes the script. A script is submitted by a request to a batch
       server. The qsub utility is a user-accessible batch client that submits a script.

       Upon successful completion, the qsub utility shall have created a batch job that will execute the submitted script.

       The qsub utility shall submit a script by sending a Queue Job Request to a batch server.

       The qsub utility shall place the value of the following environment variables in the Variable_List attribute of the batch
       job: HOME, LANG, LOGNAME, PATH, MAIL, SHELL, and TZ.  The name of the environment variable shall be the current name pre‐
       fixed with the string PBS_O_.

       Note:     If the current value of the HOME variable in the environment space of the qsub utility is /aa/bb/cc, then  qsub
                 shall place PBS_O_HOME=/aa/bb/cc in the Variable_List attribute of the batch job.

       In  addition to the variables described above, the qsub utility shall add the following variables with the indicated val‐
       ues to the variable list:

       PBS_O_WORKDIR The absolute path of the current working directory of the qsub utility process.

       PBS_O_HOST    The name of the host on which the qsub utility is running.

OPTIONS
       The qsub utility shall conform to the Base Definitions volume of POSIX.1‐2008, Section 12.2, Utility Syntax Guidelines.

       The following options shall be supported by the implementation:

       −a date_time
                 Define the time at which a batch job becomes eligible for execution.

                 The qsub utility shall accept an option-argument that conforms to the syntax of the time operand of  the  touch
                 utility.

                                               Table 4-19: Environment Variable Values (Utilities)

                                                   ┌──────────────┬───────────────────────────┐
                                                   │Variable Name │    Value at qsub Time     │
                                                   ├──────────────┼───────────────────────────┤
                                                   │PBS_O_HOME    │ HOME                      │
                                                   │PBS_O_HOST    │ Client host name          │
                                                   │PBS_O_LANG    │ LANG                      │
                                                   │PBS_O_LOGNAME │ LOGNAME                   │
                                                   │PBS_O_PATH    │ PATH                      │
                                                   │PBS_O_MAIL    │ MAIL                      │
                                                   │PBS_O_SHELL   │ SHELL                     │
                                                   │PBS_O_TZ      │ TZ                        │
                                                   │PBS_O_WORKDIR │ Current working directory │
                                                   └──────────────┴───────────────────────────┘
                 Note:     The  server  that  initiates  execution  of the batch job will add other variables to the batch job's
                           environment; see Section 3.2.2.1, Batch Job Execution.

                 The qsub utility shall set the Execution_Time attribute of the batch job to the number  of  seconds  since  the
                 Epoch  that  is equivalent to the local time expressed by the value of the date_time option-argument. The Epoch
                 is defined in the Base Definitions volume of POSIX.1‐2008, Section 3.150, Epoch.

                 If the −a option is not presented to the qsub utility, the utility shall set the  Execution_Time  attribute  of
                 the  batch job to a time (number of seconds since the Epoch) that is earlier than the time at which the utility
                 exits.

       −A account_string
                 Define the account to which the resource consumption of the batch job should be charged.

                 The syntax of the account_string option-argument is unspecified.

                 The qsub utility shall set the Account_Name attribute of the batch job  to  the  value  of  the  account_string
                 option-argument.

                 If  the  −A option is not presented to the qsub utility, the utility shall omit the Account_Name attribute from
                 the attributes of the batch job.

       −c interval
                 Define whether the batch job should be checkpointed, and if so, how often.

                 The qsub utility shall accept a value for the interval option-argument that is one of the following:

                 n         No checkpointing shall be performed on the batch job (NO_CHECKPOINT).

                 s         Checkpointing shall be performed only when the batch server is shut down (CHECKPOINT_AT_SHUTDOWN).

                 c         Automatic periodic checkpointing shall be performed at  the  Minimum_Cpu_Interval  attribute  of  the
                           batch queue, in units of CPU minutes (CHECKPOINT_AT_MIN_CPU_INTERVAL).

                 c=minutes Automatic  periodic  checkpointing  shall  be  performed  every  minutes  of CPU time, or every Mini‐
                           mum_Cpu_Interval minutes, whichever is greater. The minutes argument shall conform to the syntax  for
                           unsigned integers and shall be greater than zero.

                 The  qsub utility shall set the Checkpoint attribute of the batch job to the value of the interval option-argu‐
                 ment.

                 If the −c option is not presented to the qsub utility, the utility shall set the Checkpoint  attribute  of  the
                 batch job to the single character 'u' (CHECKPOINT_UNSPECIFIED).

       −C directive_prefix
                 Define the prefix that declares a directive to the qsub utility within the script.

                 The directive_prefix is not a batch job attribute; it affects the behavior of the qsub utility.

                 If the −C option is presented to the qsub utility, and the value of the directive_prefix option-argument is the
                 null string, the utility shall not scan the script file for directives. If the −C option is  not  presented  to
                 the  qsub  utility, then the value of the PBS_DPREFIX environment variable is used. If the environment variable
                 is not defined, then #PBS encoded in the portable character set is the default.

       −e path_name
                 Define the path to be used for the standard error stream of the batch job.

                 The qsub utility shall accept a path_name option-argument which can be preceded by a host name element  of  the
                 form hostname:.

                 If  the  path_name  option-argument constitutes an absolute pathname, the qsub utility shall set the Error_Path
                 attribute of the batch job to the value of the path_name option-argument.

                 If the path_name option-argument constitutes a relative pathname and no host name  element  is  specified,  the
                 qsub  utility shall set the Error_Path attribute of the batch job to the value of the absolute pathname derived
                 by expanding the path_name option-argument relative to the current directory of the process executing qsub.

                 If the path_name option-argument constitutes a relative pathname and a host name element is specified, the qsub
                 utility shall set the Error_Path attribute of the batch job to the value of the path_name option-argument with‐
                 out expansion. The host name element shall be included.

                 If the path_name option-argument does not include a host name element, the qsub utility shall prefix the  path‐
                 name with hostname:, where hostname is the name of the host upon which the qsub utility is being executed.

                 If  the  −e  option is not presented to the qsub utility, the utility shall set the Error_Path attribute of the
                 batch job to the host name and path of the current directory of the submitting process and  the  default  file‐
                 name.

                 The default filename for standard error has the following format:

                     job_name.esequence_number

       −h        Specify that a USER hold is applied to the batch job.

                 The qsub utility shall set the value of the Hold_Types attribute of the batch job to the value USER.

                 If  the  −h  option is not presented to the qsub utility, the utility shall set the Hold_Types attribute of the
                 batch job to the value NO_HOLD.

<!-- 0e941eba-1a5a-4b5a-a3a7-8a803be781a4 <=< ACCEPT -->       −j join_list
                 Define which streams of the batch job are to be merged. The qsub  −j  option  shall  accept  a  value  for  the
                 join_list  option-argument  that  is a string of alphanumeric characters in the portable character set (see the
                 Base Definitions volume of POSIX.1‐2008, Section 6.1, Portable Character Set).

                 The qsub utility shall accept a join_list option-argument that consists of one or more of  the  characters  'e'
                 and 'o', or the single character 'n'.

                 All  of  the  other batch job output streams specified will be merged into the output stream represented by the
                 character listed first in the join_list option-argument.

                 For each unique character in the join_list option-argument, the qsub utility shall add a value to the Join_Path
                 attribute of the batch job as follows, each representing a different batch job stream to join:

                 e     The standard error of the batch job (JOIN_STD_ERROR).

                 o     The standard output of the batch job (JOIN_STD_OUTPUT).

                 An existing Join_Path attribute can be cleared by the following join type:

                 n     NO_JOIN

                 If  'n'  is  specified,  then no files are joined. The qsub utility shall consider it an error if any join type
                 other than 'n' is combined with join type 'n'.

                 Strictly conforming applications shall not repeat any of the characters 'e', 'o', or 'n' within  the  join_list
                 option-argument.  The  qsub  utility shall permit the repetition of characters, but shall not assign additional
                 meaning to the repeated characters.

                 An implementation may define other join types. The conformance document for an  implementation  shall  describe
                 any  additional  batch  job  streams,  how they are specified, their internal behavior, and how they affect the
                 behavior of the utility.

                 If the −j option is not presented to the qsub utility, the  utility  shall  set  the  value  of  the  Join_Path
                 attribute of the batch job to NO_JOIN.<!-- ACCEPT >=> 0e941eba-1a5a-4b5a-a3a7-8a803be781a4 -->

<!-- 2aea5df1-5d83-4f1d-a24a-361403d447d0 <=< ACCEPT -->       −k keep_list
                 Define which output of the batch job to retain on the execution host.

                 The  qsub  −k  option  shall  accept a value for the keep_list option-argument that is a string of alphanumeric
                 characters in the portable character set (see the Base Definitions volume of POSIX.1‐2008, Section 6.1,  Porta‐
                 ble Character Set).

                 The  qsub  utility  shall accept a keep_list option-argument that consists of one or more of the characters 'e'
                 and 'o', or the single character 'n'.

                 For each unique character in the keep_list  option-argument,  the  qsub  utility  shall  add  a  value  to  the
                 Keep_Files attribute of the batch job as follows, each representing a different batch job stream to keep:

                 e     The standard error of the batch job (KEEP_STD_ERROR).

                 o     The standard output of the batch job (KEEP_STD_OUTPUT).

                 If  both  'e'  and  'o'  are  specified,  then both files are retained. An existing Keep_Files attribute can be
                 cleared by the following keep type:

                 n     NO_KEEP

                 If 'n' is specified, then no files are retained. The qsub utility shall consider it an error if any  keep  type
                 other than 'n' is combined with keep type 'n'.

                 Strictly  conforming  applications shall not repeat any of the characters 'e', 'o', or 'n' within the keep_list
                 option-argument. The qsub utility shall permit the repetition of characters, but shall  not  assign  additional
                 meaning to the repeated characters.

                 An  implementation  may  define other keep types. The conformance document for an implementation shall describe
                 any additional keep types, how they are specified, their internal behavior, and how they affect the behavior of
                 the  utility.  If  the  −k  option  is  not presented to the qsub utility, the utility shall set the Keep_Files
                 attribute of the batch job to the value NO_KEEP.
<!-- ACCEPT >=> 2aea5df1-5d83-4f1d-a24a-361403d447d0 -->
       −m mail_options
                 Define the points in the execution of the batch job at which the batch server that manages the batch job  shall
                 send mail about a change in the state of the batch job.

                 The  qsub  −m option shall accept a value for the mail_options option-argument that is a string of alphanumeric
                 characters in the portable character set (see the Base Definitions volume of POSIX.1‐2008, Section 6.1,  Porta‐
                 ble Character Set).

                 The  qsub  utility shall accept a value for the mail_options option-argument that is a string of one or more of
                 the characters 'e', 'b', and 'a', or the single character 'n'.

                 For each unique character in the mail_options option-argument, the qsub  utility  shall  add  a  value  to  the
                 Mail_Users attribute of the batch job as follows, each representing a different time during the life of a batch
                 job at which to send mail:

                 e     MAIL_AT_EXIT

                 b     MAIL_AT_BEGINNING

                 a     MAIL_AT_ABORT

                 If any of these characters are duplicated in the mail_options option-argument, the duplicates shall be ignored.

                 An existing Mail_Points attribute can be cleared by the following mail type:

                 n     NO_MAIL

                 If 'n' is specified, then mail is not sent. The qsub utility shall consider it an error if any mail type  other
                 than 'n' is combined with mail type 'n'.

                 Strictly  conforming  applications  shall  not  repeat  any  of the characters 'e', 'b', 'a', or 'n' within the
                 mail_options option-argument.

                 The qsub utility shall permit the repetition of characters, but shall not  assign  additional  meaning  to  the
                 repeated characters. An implementation may define other mail types. The conformance document for an implementa‐
                 tion shall describe any additional mail types, how they are specified, their internal behavior,  and  how  they
                 affect the behavior of the utility.

                 If  the  −m option is not presented to the qsub utility, the utility shall set the Mail_Points attribute to the
                 value MAIL_AT_ABORT.

       −M mail_list
                 Define the list of users to which a batch server that executes the batch job shall send  mail,  if  the  server
                 sends mail about the batch job.

                 The syntax of the mail_list option-argument is unspecified.

                 If  the  implementation  of the qsub utility uses a name service to locate users, the utility should accept the
                 syntax used by the name service.

                 If the implementation of the qsub utility does not use a name  service  to  locate  users,  the  implementation
                 should accept the following syntax for user names:

                     mail_address[,,mail_address,, ...]

                 The interpretation of mail_address is implementation-defined.

                 The qsub utility shall set the Mail_Users attribute of the batch job to the value of the mail_list option-argu‐
                 ment.

                 If the −M option is not presented to the qsub utility, the utility shall place only the user name and host name
                 for the current process in the Mail_Users attribute of the batch job.

       −N name   Define the name of the batch job.

                 The  qsub −N option shall accept a value for the name option-argument that is a string of up to 15 alphanumeric
                 characters in the portable character set (see the Base Definitions volume of POSIX.1‐2008, Section 6.1,  Porta‐
                 ble Character Set) where the first character is alphabetic.

                 The  qsub  utility  shall  set  the  value  of the Job_Name attribute of the batch job to the value of the name
                 option-argument.

                 If the −N option is not presented to the qsub utility, the utility shall set  the  Job_Name  attribute  of  the
                 batch job to the name of the script argument from which the directory specification if any, has been removed.

                 If  the −N option is not presented to the qsub utility, and the script is read from standard input, the utility
                 shall set the Job_Name attribute of the batch job to the value STDIN.

       −o path_name
                 Define the path for the standard output of the batch job.

                 The qsub utility shall accept a path_name option-argument that conforms to the syntax of the path_name  element
                 defined  in  the  System Interfaces volume of POSIX.1‐2008, which can be preceded by a host name element of the
                 form hostname:.

                 If the path_name option-argument constitutes an absolute pathname, the qsub utility shall set  the  Output_Path
                 attribute of the batch job to the value of the path_name option-argument without expansion.

                 If  the  path_name  option-argument  constitutes a relative pathname and no host name element is specified, the
                 qsub utility shall set the Output_Path attribute of the batch job to the  pathname  derived  by  expanding  the
                 value of the path_name option-argument relative to the current directory of the process executing the qsub.

                 If the path_name option-argument constitutes a relative pathname and a host name element is specified, the qsub
                 utility shall set the Output_Path attribute of the batch job to the  value  of  the  path_name  option-argument
                 without expansion.

                 If  the path_name option-argument does not specify a host name element, the qsub utility shall prefix the path‐
                 name with hostname:, where hostname is the name of the host upon which the qsub utility is executing.

                 If the −o option is not presented to the qsub utility, the utility shall set the Output_Path attribute  of  the
                 batch  job  to  the host name and path of the current directory of the submitting process and the default file‐
                 name.

                 The default filename for standard output has the following format:

                     job_name.osequence_number

       −p priority
                 Define the priority the batch job should have relative to other batch jobs owned by the batch server.

                 The qsub utility shall set the Priority attribute of the batch job to the value of  the  priority  option-argu‐
                 ment.

                 If  the  −p option is not presented to the qsub utility, the value of the Priority attribute is implementation-
                 defined.

                 The qsub utility shall accept a value for the priority option-argument that conforms to the syntax  for  signed
                 decimal integers, and which is not less than −1024 and not greater than 1023.

       −q destination
                 Define the destination of the batch job.

                 The  destination is not a batch job attribute; it determines the batch server, and possibly the batch queue, to
                 which the qsub utility batch queues the batch job.

                 The qsub utility shall submit the script to the batch server named by the destination  option-argument  or  the
                 server that owns the batch queue named in the destination option-argument.

                 The  qsub  utility shall accept an option-argument for the −q option that conforms to the syntax for a destina‐
                 tion (see Section 3.3.2, Destination).

                 If the −q option is not presented to the qsub utility, the qsub utility shall  submit  the  batch  job  to  the
                 default destination. The mechanism for determining the default destination is implementation-defined.

       −r y|n    Define whether the batch job is rerunnable.

                 If  the  value of the option-argument is y, the qsub utility shall set the Rerunable attribute of the batch job
                 to TRUE.

                 If the value of the option-argument is n, the qsub utility shall set the Rerunable attribute of the  batch  job
                 to FALSE.

                 If  the  −r  option  is not presented to the qsub utility, the utility shall set the Rerunable attribute of the
                 batch job to TRUE.

       −S path_name_list
                 Define the pathname to the shell under which the batch job is to execute.

                 The qsub utility shall accept a path_name_list option-argument that conforms to the following syntax:

                     pathname[@host][,,pathname[@host],, ...]

                 The qsub utility shall allow only one pathname for a given host name. The qsub utility  shall  allow  only  one
                 pathname that is missing a corresponding host name.

                 The  qsub  utility  shall  add  a value to the Shell_Path_List attribute of the batch job for each entry in the
                 path_name_list option-argument.

                 If the −S option is not presented to the qsub utility, the utility shall set the Shell_Path_List  attribute  of
                 the batch job to the null string.

                 The  conformance  document for an implementation shall describe the mechanism used to set the default shell and
                 determine the current value of the default shell. An implementation shall provide a means for the  installation
                 to  set  the  default shell to the login shell of the user under which the batch job is to execute. See Section
                 3.3.3, Multiple Keyword-Value Pairs for a means of removing keyword=value (and value@keyword) pairs  and  other
                 general rules for list-oriented batch job attributes.

       −u user_list
                 Define the user name under which the batch job is to execute.

                 The qsub utility shall accept a user_list option-argument that conforms to the following syntax:

                     username[@host][,,username[@host],, ...]

                 The  qsub  utility  shall accept only one user name that is missing a corresponding host name. The qsub utility
                 shall accept only one user name per named host.

                 The qsub utility shall add a value to the User_List attribute of the batch job for each entry in the  user_list
                 option-argument.

                 If  the  −u  option  is not presented to the qsub utility, the utility shall set the User_List attribute of the
                 batch job to the user name from which the utility is executing. See Section 3.3.3, Multiple Keyword-Value Pairs
                 for a means of removing keyword=value (and value@keyword) pairs and other general rules for list-oriented batch
                 job attributes.

       −v variable_list
                 Add to the list of variables that are exported to the session leader of the batch job.

                 A variable_list is a set of strings of either the form &amp;lt;variable&amp;gt; or  &amp;lt;variable=value&amp;gt;,  delimited  by  &amp;lt;comma&amp;gt;
                 characters.

                 If the −v option is presented to the qsub utility, the utility shall also add, to the environment Variable_List
                 attribute of the batch job, every variable named in the environment variable_list option-argument and,  option‐
                 ally, values of specified variables.

                 If  a  value  is not provided on the command line, the qsub utility shall set the value of each variable in the
                 environment Variable_List attribute of the batch job to the value of the corresponding environment variable for
                 the process in which the utility is executing; see Table 4-19, Environment Variable Values (Utilities).

                 A conforming application shall not repeat a variable in the environment variable_list option-argument.

                 The  qsub  utility shall not repeat a variable in the environment Variable_List attribute of the batch job. See
                 Section 3.3.3, Multiple Keyword-Value Pairs for a means of removing keyword=value (and value@keyword) pairs and
                 other general rules for list-oriented batch job attributes.

       −V        Specify that all of the environment variables of the process are exported to the context of the batch job.

                 The qsub utility shall place every environment variable in the process in which the utility is executing in the
                 list and shall set the value of each variable in the attribute to the value of that variable in the process.

       −z        Specify that the utility does not write the batch job_identifier of the created batch job to standard output.

                 If the −z option is presented to the qsub utility, the utility shall not write the batch job_identifier of  the
                 created batch job to standard output.

                 If  the  −z  option is not presented to the qsub utility, the utility shall write the identifier of the created
                 batch job to standard output.

OPERANDS
       The qsub utility shall accept a script operand that indicates the path to the script of the batch job.

       If the script operand is not presented to the qsub utility, or if the operand is the  single-character  string  '−',  the
       utility shall read the script from standard input.

       If  the script represents a partial path, the qsub utility shall expand the path relative to the current directory of the
       process executing the utility.

STDIN
       The qsub utility reads the script of the batch job from standard input if the script operand is omitted or is the  single
       character '−'.

INPUT FILES
       In  addition to binding the file indicated by the script operand to the batch job, the qsub utility reads the script file
       and acts on directives in the script.

<!-- 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 <=< ACCEPT -->ENVIRONMENT VARIABLES
       The following environment variables shall affect the execution of qsub:

       LANG      Provide a default value for the internationalization variables that are unset or null. (See  the  Base  Defini‐
                 tions  volume  of POSIX.1‐2008, Section 8.2, Internationalization Variables the precedence of internationaliza‐
                 tion variables used to determine the values of locale categories.)

       LC_ALL    If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_CTYPE  Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, sin‐
                 gle-byte as opposed to multi-byte characters in arguments).

       LC_MESSAGES
                 Determine  the  locale  that should be used to affect the format and contents of diagnostic messages written to
                 standard error.

       LOGNAME   Determine the login name of the user.
<!-- ACCEPT >=> 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 -->
       PBS_DPREFIX
                 Determine the default prefix for directives within the script.

       SHELL     Determine the pathname of the preferred command language interpreter of the user.

       TZ        Determine the timezone used to interpret the date-time option-argument. If TZ is unset or null, an  unspecified
                 default timezone shall be used.

ASYNCHRONOUS EVENTS
       Once created, a batch job exists until it exits, aborts, or is deleted.

       After a batch job is created by the qsub utility, batch servers might route, execute, modify, or delete the batch job.

STDOUT
       The  qsub  utility  writes the batch job_identifier assigned to the batch job to standard output, unless the −z option is
       specified.

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
   Script Preservation
       The qsub utility shall make the script available to the server executing the batch job in such a way that the server exe‐
       cutes the script as it exists at the time of submission.

       The  qsub utility can send a copy of the script to the server with the Queue Job Request or store a temporary copy of the
       script in a location specified to the server.

   Option Specification
       A script can contain directives to the qsub utility.

       The qsub utility shall scan the lines of the script for directives, skipping blank  lines,  until  the  first  line  that
       begins  with  a string other than the directive string; if directives occur on subsequent lines, the utility shall ignore
       those directives.

       Lines are separated by a &amp;lt;newline&amp;gt;.  If the first line of the script begins with "#!" or a  &amp;lt;colon&amp;gt;  (':'),  then  it  is
       skipped.  The qsub utility shall process a line in the script as a directive if and only if the string of characters from
       the first non-white-space character on the line until the first &amp;lt;space&amp;gt; or &amp;lt;tab&amp;gt; on the line match the directive  prefix.
       If a line in the script contains a directive and the final characters of the line are &amp;lt;backslash&amp;gt; and &amp;lt;newline&amp;gt;, then the
       next line shall be interpreted as a continuation of that directive.

       The qsub utility shall process the options and option-arguments contained on the directive prefix  line  using  the  same
       syntax as if the options were input on the qsub utility.

       The qsub utility shall continue to process a directive prefix line until after a &amp;lt;newline&amp;gt; is encountered. An implementa‐
       tion may ignore lines which, according to the syntax of the shell that will  interpret  the  script,  are  comments.   An
       implementation shall describe in the conformance document the format of any shell comments that it will recognize.

       If  an  option  is present in both a directive and the arguments to the qsub utility, the utility shall ignore the option
       and the corresponding option-argument, if any, in the directive.

       If an option that is present in the directive is not present in the arguments to the  qsub  utility,  the  utility  shall
       process the option and the option-argument, if any.

       In order of preference, the qsub utility shall select the directive prefix from one of the following sources:

        *  If the −C option is presented to the utility, the value of the directive_prefix option-argument

        *  If the environment variable PBS_DPREFIX is defined, the value of that variable

        *  The four-character string "#PBS" encoded in the portable character set

       If the −C option is present in the script file it shall be ignored.

<!-- a42f9355-e63b-4205-ac0b-0b19b24faf9d <=< ACCEPT -->EXIT STATUS
       The following exit values shall be returned:

        0    Successful completion.

       &amp;gt;0    An error occurred.<!-- ACCEPT >=> a42f9355-e63b-4205-ac0b-0b19b24faf9d -->

CONSEQUENCES OF ERRORS
       Default.

       The following sections are informative.

APPLICATION USAGE
       None.

EXAMPLES
       None.

RATIONALE
       The qsub utility allows users to create a batch job that will process the script specified as the operand of the utility.

       The options of the qsub utility allow users to control many aspects of the queuing and execution of a batch job.

       The  −a option allows users to designate the time after which the batch job will become eligible to run. By specifying an
       execution time, users can take advantage of resources at off-peak  hours,  synchronize  jobs  with  chronologically  pre‐
       dictable events, and perhaps take advantage of off-peak pricing of computing time. For these reasons and others, a timing
       option is existing practice on the part of almost every batch system, including NQS.

       The −A option allows users to specify the account that will be charged for the batch job.  Support  for  account  is  not
       mandatory for conforming batch servers.

       The  −C  option allows users to prescribe the prefix for directives within the script file. The default prefix "#PBS" may
       be inappropriate if the script will be interpreted with an alternate shell, as specified by the −S option.

       The −c option allows users to establish the checkpointing interval for their jobs. A checkpointing system, which  is  not
       defined  by  this  volume of POSIX.1‐2008, allows recovery of a batch job at the most recent checkpoint in the event of a
       crash. Checkpointing is typically used for jobs that consume expensive computing time or must meet a  critical  schedule.
       Users  should be allowed to make the tradeoff between the overhead of checkpointing and the risk to the timely completion
       of the batch job; therefore, this volume of POSIX.1‐2008 provides the checkpointing interval option. Support  for  check‐
       pointing is optional for batch servers.

       The  −e  option  allows users to redirect the standard error streams of their jobs to a non-default path. For example, if
       the submitted script generally produces a great deal of useless error output, a user might redirect  the  standard  error
       output  to  the null device. Or, if the file system holding the default location (the home directory of the user) has too
       little free space, the user might redirect the standard error stream to a file in another file system.

       The −h option allows users to create a batch job that is held until explicitly released. The ability to create a held job
       is  useful  when some external event must complete before the batch job can execute. For example, the user might submit a
       held job and release it when the system load has dropped.

       The −j option allows users to merge the standard error of a batch job into its standard  output  stream,  which  has  the
       advantage of showing the sequential relationship between output and error messages.

       The  −m  option  allows users to designate those points in the execution of a batch job at which mail will be sent to the
       submitting user, or to the account(s) indicated by the −M option. By requesting mail notification at points  of  interest
       in the life of a job, the submitting user, or other designated users, can track the progress of a batch job.

       The  −N  option allows users to associate a name with the batch job. The job name in no way affects the processing of the
       batch job, but rather serves as a mnemonic handle for users. For example, the batch job name can help  the  user  distin‐
       guish between multiple jobs listed by the qstat utility.

       The  −o  option  allows  users to redirect the standard output stream. A user might, for example, wish to redirect to the
       null device the standard output stream of a job that produces copious yet superfluous output.

       The −P option allows users to designate the relative priority of a batch job for selection from a queue.

       The −q option allows users to specify an initial queue for the batch job. If the user  specifies  a  routing  queue,  the
       batch  server routes the batch job to another queue for execution or further routing. If the user specifies a non-routing
       queue, the batch server of the queue eventually executes the batch job.

       The −r option allows users to control whether the submitted job will be rerun if the controlling batch node fails  during
       execution  of the batch job.  The −r option likewise allows users to indicate whether or not the batch job is eligible to
       be rerun by the qrerun utility. Some jobs cannot be correctly rerun because of changes they make in the  state  of  data‐
       bases or other aspects of their environment.  This volume of POSIX.1‐2008 specifies that the default, if the −r option is
       not presented to the utility, will be that the batch job cannot be rerun, since the result of rerunning a  non-rerunnable
       job might be catastrophic.

       The  −S  option  allows  users to specify the program (usually a shell) that will be invoked to process the script of the
       batch job. This option has been modified to allow a list of shell names and locations associated with different hosts.

       The −u option is useful when the submitting user is authorized to use more than one account on a  given  host,  in  which
       case the −u option allows the user to select from among those accounts. The option-argument is a list of user-host pairs,
       so that the submitting user can provide different user identifiers for different nodes in the  event  the  batch  job  is
       routed. The −u option provides a lot of flexibility to accommodate sites with complex account structures. Users that have
       the same user identifier on all the hosts they are authorized to use will not need to use the −u option.

       The −V option allows users to export all their current environment variables, as of the time the batch job is  submitted,
       to the context of the processes of the batch job.

       The  −v  option  allows users to export specific environment variables from their current process to the processes of the
       batch job.

       The −z option allows users to suppress the writing of the batch job identifier to standard output. The −z  option  is  an
       existing NQS practice that has been standardized.

       Historically,  the  qsub utility has served the batch job-submission function in the NQS system, the existing practice on
       which it is based. Some changes and additions have been made to the qsub utility in this volume of  POSIX.1‐2008,  vis-a-
       vis NQS, as a result of the growing pool of experience with distributed batch systems.

       The  set  of features of the qsub utility as defined in this volume of POSIX.1‐2008 appears to incorporate all the common
       existing practice on potentially conforming platforms.

FUTURE DIRECTIONS
       The qsub utility may be removed in a future version.

SEE ALSO
       Chapter 3, Batch Environment Services, qrerun, qstat, touch

       The Base Definitions volume of POSIX.1‐2008, Section 3.150, Epoch, Section 6.1, Portable Character Set, Chapter 8,  Envi‐
       ronment Variables, Section 12.2, Utility Syntax Guidelines

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions  of  this  text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013 Edition, Standard for
       Information Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7,  Copy‐
       right  (C)  2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This is POSIX.1-2008
       with the 2013 Technical Corrigendum 1 applied.) In the event of any discrepancy between this  version  and  the  original
       IEEE  and  The  Open  Group Standard, the original IEEE and The Open Group Standard is the referee document. The original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any typographical or formatting errors that appear in this page are most likely to have been introduced during  the  con‐
       version  of  the source files to man page format. To report such errors, see https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                      QSUB(1P)
READ(1P)                                            POSIX Programmer's Manual                                           READ(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->

NAME
       read — read a line from standard input

SYNOPSIS
       read [−r] var...

DESCRIPTION
       The read utility shall read a single line from standard input.

       By  default,  unless  the  −r option is specified, &amp;lt;backslash&amp;gt; shall act as an escape character. An unescaped &amp;lt;backslash&amp;gt;
       shall preserve the literal value of the following character, with the exception of a &amp;lt;newline&amp;gt;.  If a  &amp;lt;newline&amp;gt;  follows
       the  &amp;lt;backslash&amp;gt;,  the  read  utility  shall  interpret this as line continuation. The &amp;lt;backslash&amp;gt; and &amp;lt;newline&amp;gt; shall be
       removed before splitting the input into fields. All other unescaped &amp;lt;backslash&amp;gt; characters shall be removed after  split‐
       ting the input into fields.

       If  standard  input is a terminal device and the invoking shell is interactive, read shall prompt for a continuation line
       when it reads an input line ending with a &amp;lt;backslash&amp;gt; &amp;lt;newline&amp;gt;, unless the −r option is specified.

       The terminating &amp;lt;newline&amp;gt; (if any) shall be removed from the input and the results shall be split into fields as  in  the
       shell  for  the results of parameter expansion (see Section 2.6.5, Field Splitting); the first field shall be assigned to
       the first variable var, the second field to the second variable var, and so on. If there are fewer fields than there  are
       var  operands,  the remaining vars shall be set to empty strings. If there are fewer vars than fields, the last var shall
       be set to a value comprising the following elements:

        *  The field that corresponds to the last var in the normal assignment sequence described above

        *  The delimiter(s) that follow the field corresponding to the last var

        *  The remaining fields and their delimiters, with trailing IFS white space ignored

       The setting of variables specified by the var operands shall affect the current shell execution environment; see  Section
       2.12,  Shell Execution Environment.  If it is called in a subshell or separate utility execution environment, such as one
       of the following:

           (read foo)
           nohup read ...
           find . −exec read ... \;

       it shall not affect the shell variables in the caller's environment.

OPTIONS
       The read utility shall conform to the Base Definitions volume of POSIX.1‐2008, Section 12.2, Utility Syntax Guidelines.

       The following option is supported:

       −r        Do not treat a &amp;lt;backslash&amp;gt; character in any special way. Consider each &amp;lt;backslash&amp;gt; to  be  part  of  the  input
                 line.

OPERANDS
       The following operand shall be supported:

       var       The name of an existing or nonexisting shell variable.

STDIN
       The standard input shall be a text file.

INPUT FILES
       None.

<!-- 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 <=< ACCEPT -->ENVIRONMENT VARIABLES
       The following environment variables shall affect the execution of read:

       IFS       Determine the internal field separators used to delimit fields; see Section 2.5.3, Shell Variables.

       LANG      Provide  a  default  value for the internationalization variables that are unset or null. (See the Base Defini‐
                 tions volume of POSIX.1‐2008, Section 8.2, Internationalization Variables for the precedence of  international‐
                 ization variables used to determine the values of locale categories.)

       LC_ALL    If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_CTYPE  Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, sin‐
                 gle-byte as opposed to multi-byte characters in arguments).

       LC_MESSAGES
                 Determine the locale that should be used to affect the format and contents of diagnostic  messages  written  to
                 standard error.

       NLSPATH   Determine the location of message catalogs for the processing of LC_MESSAGES.<!-- ACCEPT >=> 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 -->

       PS2       Provide  the  prompt  string  that an interactive shell shall write to standard error when a line ending with a
                 &amp;lt;backslash&amp;gt; &amp;lt;newline&amp;gt; is read and the −r option was not specified.

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       Not used.

STDERR
       The standard error shall be used for diagnostic messages and prompts for continued input.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       None.

<!-- a42f9355-e63b-4205-ac0b-0b19b24faf9d <=< ACCEPT -->EXIT STATUS
       The following exit values shall be returned:

        0    Successful completion.

       &amp;gt;0    End-of-file was detected or an error occurred.<!-- ACCEPT >=> a42f9355-e63b-4205-ac0b-0b19b24faf9d -->

CONSEQUENCES OF ERRORS
       Default.

       The following sections are informative.

APPLICATION USAGE
       The −r option is included to enable read to  subsume  the  purpose  of  the  line  utility,  which  is  not  included  in
       POSIX.1‐2008.

EXAMPLES
       The following command:

           while read −r xx yy
           do
               printf "%s %s\n$yy$xx"
           done &amp;lt; input_file

       prints a file with the first field of each line moved to the end of the line.

RATIONALE
       The  read  utility historically has been a shell built-in. It was separated off into its own utility to take advantage of
       the richer description of functionality introduced by this volume of POSIX.1‐2008.

       Since read affects the current shell execution environment, it is generally provided as a shell regular built-in.  If  it
       is called in a subshell or separate utility execution environment, such as one of the following:

           (read foo)
           nohup read ...
           find . −exec read ... \;

       it does not affect the shell variables in the environment of the caller.

       Although  the  standard input is required to be a text file, and therefore will always end with a &amp;lt;newline&amp;gt; (unless it is
       an empty file), the processing of continuation lines when the −r option is not used can result in the  input  not  ending
       with a &amp;lt;newline&amp;gt;.  This occurs if the last line of the input file ends with a &amp;lt;backslash&amp;gt; &amp;lt;newline&amp;gt;.  It is for this rea‐
       son that ``if any'' is used in ``The terminating &amp;lt;newline&amp;gt; (if any) shall be removed from the input'' in the description.
       It is not a relaxation of the requirement for standard input to be a text file.

FUTURE DIRECTIONS
       None.

SEE ALSO
       Chapter 2, Shell Command Language

       The Base Definitions volume of POSIX.1‐2008, Chapter 8, Environment Variables, Section 12.2, Utility Syntax Guidelines

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions  of  this  text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013 Edition, Standard for
       Information Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7,  Copy‐
       right  (C)  2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This is POSIX.1-2008
       with the 2013 Technical Corrigendum 1 applied.) In the event of any discrepancy between this  version  and  the  original
       IEEE  and  The  Open  Group Standard, the original IEEE and The Open Group Standard is the referee document. The original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any typographical or formatting errors that appear in this page are most likely to have been introduced during  the  con‐
       version  of  the source files to man page format. To report such errors, see https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                      READ(1P)
READONLY(1P)                                        POSIX Programmer's Manual                                       READONLY(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->

NAME
       readonly — set the readonly attribute for variables

SYNOPSIS
       readonly name[=word]...

       readonly −p

DESCRIPTION
       The  variables whose names are specified shall be given the readonly attribute. The values of variables with the readonly
       attribute cannot be changed by subsequent assignment, nor can those variables be unset by the unset utility. If the  name
       of a variable is followed by =word, then the value of that variable shall be set to word.

       The  readonly  special  built-in  shall support the Base Definitions volume of POSIX.1‐2008, Section 12.2, Utility Syntax
       Guidelines.

       When −p is specified, readonly writes to the standard output the names and values of all read-only variables, in the fol‐
       lowing format:

           "readonly %s=%s\n", &amp;lt;name&amp;gt;, &amp;lt;value&amp;gt;

       if name is set, and

           "readonly %s\n", &amp;lt;name&amp;gt;

       if name is unset.

       The  shell  shall format the output, including the proper use of quoting, so that it is suitable for reinput to the shell
       as commands that achieve the same value and readonly attribute-setting results in a shell execution environment in which:

        1. Variables with values at the time they were output do not have the readonly attribute set.

        2. Variables that were unset at the time they were output do not have a value at the time at which the saved  output  is
           reinput to the shell.

       When no arguments are given, the results are unspecified.

OPTIONS
       See the DESCRIPTION.

OPERANDS
       See the DESCRIPTION.

<!-- fe96d119-27ce-4a62-99a9-ff5840fe1a84 <=< ACCEPT -->STDIN
       Not used.

INPUT FILES
       None.

ENVIRONMENT VARIABLES
       None.

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       See the DESCRIPTION.

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       None.

EXIT STATUS
       Zero.

CONSEQUENCES OF ERRORS
       Default.

       The following sections are informative.<!-- ACCEPT >=> fe96d119-27ce-4a62-99a9-ff5840fe1a84 -->

APPLICATION USAGE
       None.

EXAMPLES
       readonly HOME PWD

RATIONALE
       Some  historical  shells  preserve the readonly attribute across separate invocations. This volume of POSIX.1‐2008 allows
       this behavior, but does not require it.

       The −p option allows portable access to the values that can be saved and then later restored using, for  example,  a  dot
       script. Also see the RATIONALE for export for a description of the no-argument and −p output cases and a related example.

       Read-only  functions were considered, but they were omitted as not being historical practice or particularly useful. Fur‐
       thermore, functions must not be read-only across invocations to preclude ``spoofing'' (spoofing is the term for the prac‐
       tice of creating a program that acts like a well-known utility with the intent of subverting the real intent of the user)
       of administrative or security-relevant (or security-conscious) shell scripts.

FUTURE DIRECTIONS
       None.

SEE ALSO
       Section 2.14, Special Built-In Utilities

       The Base Definitions volume of POSIX.1‐2008, Section 12.2, Utility Syntax Guidelines

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013  Edition,  Standard  for
       Information  Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7, Copy‐
       right (C) 2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This  is  POSIX.1-2008
       with  the  2013  Technical  Corrigendum 1 applied.) In the event of any discrepancy between this version and the original
       IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the  referee  document.  The  original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any  typographical  or formatting errors that appear in this page are most likely to have been introduced during the con‐
       version of the source files to man page format. To report such errors,  see  https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                  READONLY(1P)
RENICE(1)                                                 User Commands                                                RENICE(1)

NAME
       renice - alter priority of running processes

SYNOPSIS
       renice [-n] priority [-g|-p|-u] identifier...

DESCRIPTION
       renice  alters  the scheduling priority of one or more running processes.  The first argument is the priority value to be
       used.  The other arguments are interpreted as process IDs (by default), process group  IDs,  user  IDs,  or  user  names.
       renice'ing  a  process  group  causes  all  processes  in  the  process  group to have their scheduling priority altered.
       renice'ing a user causes all processes owned by the user to have their scheduling priority altered.

OPTIONS
       -n, --priority priority
              Specify the scheduling priority to be used for the process, process group, or user.   Use  of  the  option  -n  or
              --priority is optional, but when used it must be the first argument.

       -g, --pgrp
              Interpret the succeeding arguments as process group IDs.

       -p, --pid
              Interpret the succeeding arguments as process IDs (the default).

       -u, --user
              Interpret the succeeding arguments as usernames or UIDs.

       -V, --version
              Display version information and exit.

       -h, --help
              Display help text and exit.

EXAMPLES
       The  following  command  would change the priority of the processes with PIDs 987 and 32, plus all processes owned by the
       users daemon and root:

              renice +1 987 -u daemon root -p 32

NOTES
       Users other than the superuser may only alter the priority of processes they own, and  can  only  monotonically  increase
       their  ``nice  value'' (for security reasons) within the range 0 to 19, unless a nice resource limit is set (Linux 2.6.12
       and higher).  The superuser may alter the priority of any process and set the priority to any value in the range  -20  to
       19.   Useful  priorities  are: 19 (the affected processes will run only when nothing else in the system wants to), 0 (the
       ``base'' scheduling priority), anything negative (to make things go very fast).

FILES
       /etc/passwd
              to map user names to user IDs

SEE ALSO
       nice(1), getpriority(2), setpriority(2)

BUGS
       Non-superusers cannot increase scheduling priorities of their own processes, even if they were the  ones  that  decreased
       the priorities in the first place.

       The  Linux  kernel  (at least version 2.0.0) and linux libc (at least version 5.2.18) does not agree entirely on what the
       specifics of the systemcall interface to set nice values is.  Thus causes renice to report bogus previous nice values.

HISTORY
       The renice command appeared in 4.0BSD.

AVAILABILITY
       The renice command is part of the util-linux package and is available from Linux Kernel Archive ⟨ftp://ftp.kernel.org/pub
       /linux/utils/util-linux/⟩.

util-linux                                                  July 2014                                                  RENICE(1)
RETURN(1P)                                          POSIX Programmer's Manual                                         RETURN(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->

NAME
       return — return from a function or dot script

SYNOPSIS
       return [n]

DESCRIPTION
       The  return  utility shall cause the shell to stop executing the current function or dot script. If the shell is not cur‐
       rently executing a function or dot script, the results are unspecified.

OPTIONS
       None.

OPERANDS
       See the DESCRIPTION.

<!-- fe96d119-27ce-4a62-99a9-ff5840fe1a84 <=< ACCEPT -->STDIN
       Not used.

INPUT FILES
       None.

ENVIRONMENT VARIABLES
       None.

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       Not used.

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       None.

EXIT STATUS
       The value of the special parameter '?'  shall be set to n, an unsigned decimal integer, or to the exit status of the last
       command  executed if n is not specified. If the value of n is greater than 255, the results are undefined. When return is
       executed in a trap action, the last command is considered to be the command that executed immediately preceding the  trap
       action.

CONSEQUENCES OF ERRORS
       Default.<!-- ACCEPT >=> fe96d119-27ce-4a62-99a9-ff5840fe1a84 -->

       The following sections are informative.

APPLICATION USAGE
       None.

EXAMPLES
       None.

RATIONALE
       The  behavior of return when not in a function or dot script differs between the System V shell and the KornShell. In the
       System V shell this is an error, whereas in the KornShell, the effect is the same as exit.

       The results of returning a number greater than 255 are undefined because of differing practices in the various historical
       implementations. Some shells AND out all but the low-order 8 bits; others allow larger values, but not of unlimited size.

       See the discussion of appropriate exit status values under exit.

FUTURE DIRECTIONS
       None.

SEE ALSO
       Section 2.9.5, Function Definition Command, Section 2.14, Special Built-In Utilities, dot

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions  of  this  text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013 Edition, Standard for
       Information Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7,  Copy‐
       right  (C)  2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This is POSIX.1-2008
       with the 2013 Technical Corrigendum 1 applied.) In the event of any discrepancy between this  version  and  the  original
       IEEE  and  The  Open  Group Standard, the original IEEE and The Open Group Standard is the referee document. The original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any typographical or formatting errors that appear in this page are most likely to have been introduced during  the  con‐
       version  of  the source files to man page format. To report such errors, see https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                    RETURN(1P)
RM(1)                                                     User Commands                                                    RM(1)

NAME
       rm - remove files or directories

SYNOPSIS
       rm [OPTION]... [FILE]...

DESCRIPTION
       This manual page documents the GNU version of rm.  rm removes each specified file.  By default, it does not remove direc‐
       tories.

       If the -I or --interactive=once option is given, and there are more than three files or the -r, -R,  or  --recursive  are
       given,  then  rm  prompts the user for whether to proceed with the entire operation.  If the response is not affirmative,
       the entire command is aborted.

       Otherwise, if a file is unwritable, standard input is a terminal, and the -f or --force option is not given, or the -i or
       --interactive=always  option is given, rm prompts the user for whether to remove the file.  If the response is not affir‐
       mative, the file is skipped.

OPTIONS
       Remove (unlink) the FILE(s).

       -f, --force
              ignore nonexistent files and arguments, never prompt

       -i     prompt before every removal

       -I     prompt once before removing more than three files, or when removing recursively; less  intrusive  than  -i,  while
              still giving protection against most mistakes

       --interactive[=WHEN]
              prompt according to WHEN: never, once (-I), or always (-i); without WHEN, prompt always

       --one-file-system
              when removing a hierarchy recursively, skip any directory that is on a file system different from that of the cor‐
              responding command line argument

       --no-preserve-root
              do not treat '/' specially

       --preserve-root
              do not remove '/' (default)

       -r, -R, --recursive
              remove directories and their contents recursively

       -d, --dir
              remove empty directories

       -v, --verbose
              explain what is being done

       --help display this help and exit

       --version
              output version information and exit

       By default, rm does not remove directories.  Use the --recursive (-r or -R) option to remove each listed directory,  too,
       along with all of its contents.

       To remove a file whose name starts with a '-', for example '-foo', use one of these commands:

              rm -- -foo

              rm ./-foo

       Note  that  if you use rm to remove a file, it might be possible to recover some of its contents, given sufficient exper‐
       tise and/or time.  For greater assurance that the contents are truly unrecoverable, consider using shred.

AUTHOR
       Written by Paul Rubin, David MacKenzie, Richard M. Stallman, and Jim Meyering.

REPORTING BUGS
       GNU coreutils online help: &amp;lt;http://www.gnu.org/software/coreutils/&amp;gt;
       Report rm translation bugs to &amp;lt;http://translationproject.org/team/&amp;gt;

COPYRIGHT
       Copyright   ©   2016   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3    or    later
       &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       unlink(1), unlink(2), chattr(1), shred(1)

       Full documentation at: &amp;lt;http://www.gnu.org/software/coreutils/rm&amp;gt;
       or available locally via: info '(coreutils) rm invocation'

GNU coreutils 8.26                                        November 2016                                                    RM(1)
RMDEL(1P)                                           POSIX Programmer's Manual                                          RMDEL(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.
<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->
NAME
       rmdel — remove a delta from an SCCS file (DEVELOPMENT)

SYNOPSIS
       rmdel −r SID file...

DESCRIPTION
       The rmdel utility shall remove the delta specified by the SID from each named SCCS file. The delta to be removed shall be
       the most recent delta in its branch in the delta chain of each named SCCS file. In addition, the application shall ensure
       that the SID specified is not that of a version being edited for the purpose of making a delta; that is, if a p-file (see
       get) exists for the named SCCS file, the SID specified shall not appear in any entry of the p-file.

       Removal of a delta shall be restricted to:

        1. The user who made the delta

        2. The owner of the SCCS file

        3. The owner of the directory containing the SCCS file

OPTIONS
       The rmdel utility shall conform to the Base Definitions volume of POSIX.1‐2008, Section 12.2, Utility Syntax Guidelines.

       The following option shall be supported:

       −r SID    Specify the SCCS identification string (SID) of the delta to be deleted.

OPERANDS
       The following operand shall be supported:

       file      A pathname of an existing SCCS file or a directory. If file is a directory, the rmdel utility shall  behave  as
                 though each file in the directory were specified as a named file, except that non-SCCS files (last component of
                 the pathname does not begin with s.)  and unreadable files shall be silently ignored.

                 If exactly one file operand appears, and it is '−', the standard input shall be read; each line of the standard
                 input  is  taken  to  be the name of an SCCS file to be processed. Non-SCCS files and unreadable files shall be
                 silently ignored.

STDIN
       The standard input shall be a text file used only when the file operand is specified as '−'.  Each line of the text  file
       shall be interpreted as an SCCS pathname.

INPUT FILES
       The SCCS files shall be files of unspecified format.

<!-- 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 <=< ACCEPT -->ENVIRONMENT VARIABLES
       The following environment variables shall affect the execution of rmdel:

       LANG      Provide  a  default  value for the internationalization variables that are unset or null. (See the Base Defini‐
                 tions volume of POSIX.1‐2008, Section 8.2, Internationalization Variables for the precedence of  international‐
                 ization variables used to determine the values of locale categories.)

       LC_ALL    If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_CTYPE  Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, sin‐
                 gle-byte as opposed to multi-byte characters in arguments and input files).

       LC_MESSAGES
                 Determine the locale that should be used to affect the format and contents of diagnostic  messages  written  to
                 standard error.

       NLSPATH   Determine the location of message catalogs for the processing of LC_MESSAGES.<!-- ACCEPT >=> 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 -->

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       Not used.

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       The  SCCS  files  shall  be files of unspecified format. During processing of a file, a temporary x-file, as described in
       admin, may be created and deleted; a locking z-file, as described in get, may be created and deleted.

EXTENDED DESCRIPTION
       None.

<!-- a42f9355-e63b-4205-ac0b-0b19b24faf9d <=< ACCEPT -->EXIT STATUS
       The following exit values shall be returned:

        0    Successful completion.

       &amp;gt;0    An error occurred.<!-- ACCEPT >=> a42f9355-e63b-4205-ac0b-0b19b24faf9d -->

CONSEQUENCES OF ERRORS
       Default.

       The following sections are informative.

APPLICATION USAGE
       None.

EXAMPLES
       None.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       admin, delta, get, prs

       The Base Definitions volume of POSIX.1‐2008, Chapter 8, Environment Variables, Section 12.2, Utility Syntax Guidelines

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013  Edition,  Standard  for
       Information  Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7, Copy‐
       right (C) 2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This  is  POSIX.1-2008
       with  the  2013  Technical  Corrigendum 1 applied.) In the event of any discrepancy between this version and the original
       IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the  referee  document.  The  original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any  typographical  or formatting errors that appear in this page are most likely to have been introduced during the con‐
       version of the source files to man page format. To report such errors,  see  https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                     RMDEL(1P)
RMDIR(1)                                                  User Commands                                                 RMDIR(1)

NAME
       rmdir - remove empty directories

SYNOPSIS
       rmdir [OPTION]... DIRECTORY...

DESCRIPTION
       Remove the DIRECTORY(ies), if they are empty.

       --ignore-fail-on-non-empty

              ignore each failure that is solely because a directory

              is non-empty

       -p, --parents
              remove DIRECTORY and its ancestors; e.g., 'rmdir -p a/b/c' is similar to 'rmdir a/b/c a/b a'

       -v, --verbose
              output a diagnostic for every directory processed

       --help display this help and exit

       --version
              output version information and exit

AUTHOR
       Written by David MacKenzie.

REPORTING BUGS
       GNU coreutils online help: &amp;lt;http://www.gnu.org/software/coreutils/&amp;gt;
       Report rmdir translation bugs to &amp;lt;http://translationproject.org/team/&amp;gt;

COPYRIGHT
       Copyright    ©    2016   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3   or   later
       &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       rmdir(2)

       Full documentation at: &amp;lt;http://www.gnu.org/software/coreutils/rmdir&amp;gt;
       or available locally via: info '(coreutils) rmdir invocation'

GNU coreutils 8.26                                        November 2016                                                 RMDIR(1)
SACT(1P)                                            POSIX Programmer's Manual                                           SACT(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->

NAME
       sact — print current SCCS file-editing activity (DEVELOPMENT)

SYNOPSIS
       sact file...

DESCRIPTION
       The sact utility shall inform the user of any impending deltas to a named SCCS file by writing a list to standard output.
       This situation occurs when get −e has been executed previously without a subsequent execution of delta,  unget,  or  sccs
       unedit.

OPTIONS
       None.

OPERANDS
       The following operand shall be supported:

       file      A  pathname  of  an existing SCCS file or a directory. If file is a directory, the sact utility shall behave as
                 though each file in the directory were specified as a named file, except that non-SCCS files (last component of
                 the pathname does not begin with s.)  and unreadable files shall be silently ignored.

                 If exactly one file operand appears, and it is '−', the standard input shall be read; each line of the standard
                 input shall be taken to be the name of an SCCS file to be processed. Non-SCCS files and unreadable files  shall
                 be silently ignored.

STDIN
       The  standard input shall be a text file used only when the file operand is specified as '−'.  Each line of the text file
       shall be interpreted as an SCCS pathname.

INPUT FILES
       Any SCCS files interrogated are files of an unspecified format.

<!-- 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 <=< ACCEPT -->ENVIRONMENT VARIABLES
       The following environment variables shall affect the execution of sact:

       LANG      Provide a default value for the internationalization variables that are unset or null. (See  the  Base  Defini‐
                 tions  volume of POSIX.1‐2008, Section 8.2, Internationalization Variables for the precedence of international‐
                 ization variables used to determine the values of locale categories.)

       LC_ALL    If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_CTYPE  Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, sin‐
                 gle-byte as opposed to multi-byte characters in arguments and input files).

       LC_MESSAGES
                 Determine  the  locale  that should be used to affect the format and contents of diagnostic messages written to
                 standard error.

       NLSPATH   Determine the location of message catalogs for the processing of LC_MESSAGES.<!-- ACCEPT >=> 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 -->

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       The output for each named file shall consist of a line in the following format:

           "%s %s %s %s %s\n", &amp;lt;SID&amp;gt;, &amp;lt;new SID&amp;gt;, &amp;lt;login&amp;gt;, &amp;lt;date&amp;gt;, &amp;lt;time&amp;gt;

       &amp;lt;SID&amp;gt;     Specifies the SID of a delta that currently exists in the SCCS file to which changes are made to make  the  new
                 delta.

       &amp;lt;new SID&amp;gt; Specifies the SID for the new delta to be created.

       &amp;lt;login&amp;gt;   Contains the login name of the user who makes the delta (that is, who executed a get for editing).

       &amp;lt;date&amp;gt;    Contains the date that get −e was executed, in the format used by the prs :D: data keyword.

       &amp;lt;time&amp;gt;    Contains the time that get −e was executed, in the format used by the prs :T: data keyword.

       If  there is more than one named file or if a directory or standard input is named, each pathname shall be written before
       each of the preceding lines:

           "\n%s:\n", &amp;lt;pathname&amp;gt;

STDERR
       The standard error shall be used only for optional informative messages concerning SCCS files with no  impending  deltas,
       and for diagnostic messages.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       None.

<!-- a42f9355-e63b-4205-ac0b-0b19b24faf9d <=< ACCEPT -->EXIT STATUS
       The following exit values shall be returned:

        0    Successful completion.

       &amp;gt;0    An error occurred.<!-- ACCEPT >=> a42f9355-e63b-4205-ac0b-0b19b24faf9d -->

CONSEQUENCES OF ERRORS
       Default.

       The following sections are informative.

APPLICATION USAGE
       None.

EXAMPLES
       None.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       delta, get, sccs, unget

       The Base Definitions volume of POSIX.1‐2008, Chapter 8, Environment Variables

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions  of  this  text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013 Edition, Standard for
       Information Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7,  Copy‐
       right  (C)  2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This is POSIX.1-2008
       with the 2013 Technical Corrigendum 1 applied.) In the event of any discrepancy between this  version  and  the  original
       IEEE  and  The  Open  Group Standard, the original IEEE and The Open Group Standard is the referee document. The original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any typographical or formatting errors that appear in this page are most likely to have been introduced during  the  con‐
       version  of  the source files to man page format. To report such errors, see https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                      SACT(1P)
SCCS(1P)                                            POSIX Programmer's Manual                                           SCCS(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->

NAME
       sccs — front end for the SCCS subsystem (DEVELOPMENT)

SYNOPSIS
       sccs [−r] [−d path] [−p path] command [options...] [operands...]

DESCRIPTION
       The  sccs utility is a front end to the SCCS programs. It also includes the capability to run set-user-id to another user
       to provide additional protection.

       The sccs utility shall invoke the specified command with the specified options and operands.  By default, each of the op‐
       erands shall be modified by prefixing it with the string "SCCS/s.".

       The  command  can be the name of one of the SCCS utilities in this volume of POSIX.1‐2008 (admin, delta, get, prs, rmdel,
       sact, unget, val, or what) or one of the pseudo-utilities listed in the EXTENDED DESCRIPTION section.

OPTIONS
       The sccs utility shall conform to the Base Definitions volume of POSIX.1‐2008, Section 12.2, Utility  Syntax  Guidelines,
       except  that options operands are actually options to be passed to the utility named by command.  When the portion of the
       command:

           command [options ... ] [operands ... ]

       is considered, all of the pseudo-utilities used as command shall support the Utility Syntax Guidelines. Any of the  other
       SCCS  utilities  that  can  be  invoked in this manner support the Guidelines to the extent indicated by their individual
       OPTIONS sections.

       The following options shall be supported preceding the command operand:

       −d path   A pathname of a directory to be used as a root directory for the SCCS files. The default shall be  the  current
                 directory. The −d option shall take precedence over the PROJECTDIR variable. See −p.

       −p path   A pathname of a directory in which the SCCS files are located. The default shall be the SCCS directory.

                 The  −p  option differs from the −d option in that the −d option-argument shall be prefixed to the entire path‐
                 name and the −p option-argument shall be inserted before the final component of the pathname. For example:

                     sccs −d /x −p y get a/b

                 converts to:

                     get /x/a/y/s.b

                 This allows the creation of aliases such as:

                     alias syssccs="sccs −d /usr/src"

                 which is used as:

                     syssccs get cmd/who.c

       −r        Invoke command with the real user ID of the process, not any effective user ID that the sccs utility is set to.
                 Certain  commands  (admin,  check, clean, diffs, info, rmdel, and tell) cannot be run set-user-ID by all users,
                 since this would allow anyone to change the authorizations. These commands are always run as the real user.

OPERANDS
       The following operands shall be supported:

       command   An SCCS utility name or the name of one of the pseudo-utilities listed in the EXTENDED DESCRIPTION section.

       options   An option or option-argument to be passed to command.

       operands  An operand to be passed to command.

STDIN
       See the utility description for the specified command.

INPUT FILES
       See the utility description for the specified command.

<!-- 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 <=< ACCEPT -->ENVIRONMENT VARIABLES
       The following environment variables shall affect the execution of sccs:

       LANG      Provide a default value for the internationalization variables that are unset or null. (See  the  Base  Defini‐
                 tions  volume of POSIX.1‐2008, Section 8.2, Internationalization Variables for the precedence of international‐
                 ization variables used to determine the values of locale categories.)

       LC_ALL    If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_CTYPE  Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, sin‐
                 gle-byte as opposed to multi-byte characters in arguments and input files).

       LC_MESSAGES
                 Determine  the  locale  that should be used to affect the format and contents of diagnostic messages written to
                 standard error.

       NLSPATH   Determine the location of message catalogs for the processing of LC_MESSAGES.<!-- ACCEPT >=> 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 -->

       PROJECTDIR
                 Provide a default value for the −d path option. If the value of PROJECTDIR begins with a &amp;lt;slash&amp;gt;, it  shall  be
                 considered  an  absolute pathname; otherwise, the value of PROJECTDIR is treated as a user name and that user's
                 initial working directory shall be examined for a subdirectory src or source.  If such a directory is found, it
                 shall be used. Otherwise, the value shall be used as a relative pathname.

       Additional environment variable effects may be found in the utility description for the specified command.

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       See the utility description for the specified command.

STDERR
       See the utility description for the specified command.

OUTPUT FILES
       See the utility description for the specified command.

EXTENDED DESCRIPTION
       The  following pseudo-utilities shall be supported as command operands. All options referred to in the following list are
       values given in the options operands following command.

       check   Equivalent to info, except that nothing shall be printed if nothing is being edited, and a non-zero  exit  status
               shall  be  returned if anything is being edited. The intent is to have this included in an ``install'' entry in a
               makefile to ensure that everything is included into the SCCS file before a version is installed.

       clean   Remove everything from the current directory that can be recreated from SCCS files, but do not remove  any  files
               being edited. If the −b option is given, branches shall be ignored in the determination of whether they are being
               edited; this is dangerous if branches are kept in the same directory.

       create  Create an SCCS file, taking the initial contents from the file of  the  same  name.  Any  options  to  admin  are
               accepted.  If  the  creation is successful, the original files shall be renamed by prefixing the basenames with a
               comma. These renamed files should be removed after it has been verified that the SCCS  files  have  been  created
               successfully.

       delget  Perform  a  delta  on the named files and then get new versions. The new versions shall have ID keywords expanded
               and shall not be editable. Any −m, −p, −r, −s, and −y options shall be passed to delta, and any −b, −c,  −e,  −i,
               −k, −l, −s, and −x options shall be passed to get.

       deledit Equivalent  to  delget, except that the get phase shall include the −e option. This option is useful for making a
               checkpoint of the current editing phase. The same options shall be passed to delta as described  above,  and  all
               the options listed for get above except −e shall be passed to edit.

       diffs   Write  a  difference listing between the current version of the files checked out for editing and the versions in
               SCCS format. Any −r, −c, −i, −x, and −t options shall be passed to get; any −l, −s, −e, −f, −h,  and  −b  options
               shall be passed to diff.  A −C option shall be passed to diff as −c.

       edit    Equivalent to get −e.

       fix     Remove  the  named delta, but leave a copy of the delta with the changes that were in it. It is useful for fixing
               small compiler bugs, and so on. The application shall ensure that it is followed by a −r SID  option.  Since  fix
               does not leave audit trails, it should be used carefully.

       info    Write  a  listing of all files being edited. If the −b option is given, branches (that is, SIDs with two or fewer
               components) shall be ignored. If a −u user option is given, then only files being edited by the named user  shall
               be listed. A −U option shall be equivalent to −u&amp;lt;current user&amp;gt;.

       print   Write out verbose information about the named files, equivalent to sccs prs.

       tell    Write  a  &amp;lt;newline&amp;gt;-separated list of the files being edited to standard output. Takes the −b, −u, and −U options
               like info and check.

       unedit  This is the opposite of an edit or a get −e.  It should be used with caution, since any changes  made  since  the
               get are lost.

<!-- a42f9355-e63b-4205-ac0b-0b19b24faf9d <=< ACCEPT -->EXIT STATUS
       The following exit values shall be returned:

        0    Successful completion.

       &amp;gt;0    An error occurred.<!-- ACCEPT >=> a42f9355-e63b-4205-ac0b-0b19b24faf9d -->

CONSEQUENCES OF ERRORS
       Default.

       The following sections are informative.

APPLICATION USAGE
       Many of the SCCS utilities take directory names as operands as well as specific filenames. The pseudo-utilities supported
       by sccs are not described as having this capability, but are not prohibited from doing so.

EXAMPLES
        1. To get a file for editing, edit it and produce a new delta:

               sccs get −e file.c
               ex file.c
               sccs delta file.c

        2. To get a file from another directory:

               sccs −p /usr/src/sccs/s. get cc.c

           or:

               sccs get /usr/src/sccs/s.cc.c

        3. To make a delta of a large number of files in the current directory:

               sccs delta *.c

        4. To get a list of files being edited that are not on branches:

               sccs info −b

        5. To delta everything being edited by the current user:

               sccs delta $(sccs tell −U)

        6. In a makefile, to get source files from an SCCS file if it does not already exist:

               SRCS = &amp;lt;list of source files&amp;gt;
               $(SRCS):
                   sccs get $(REL) $@

RATIONALE
       sccs and its associated utilities are part of the XSI Development Utilities option within the XSI option.

       SCCS is an abbreviation for Source Code Control System. It is a maintenance and enhancement tracking tool. When a file is
       put  under SCCS, the source code control system maintains the file and, when changes are made, identifies and stores them
       in the file with the original source code and/or documentation. As other changes are made, they too  are  identified  and
       retained in the file.

       Retrieval of the original and any set of changes is possible. Any version of the file as it develops can be reconstructed
       for inspection or additional modification. History data can be stored with each version, documenting why the changes were
       made, who made them, and when they were made.

FUTURE DIRECTIONS
       None.

SEE ALSO
       admin, delta, get, make, prs, rmdel, sact, unget, val, what

       The Base Definitions volume of POSIX.1‐2008, Chapter 8, Environment Variables, Section 12.2, Utility Syntax Guidelines

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions  of  this  text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013 Edition, Standard for
       Information Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7,  Copy‐
       right  (C)  2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This is POSIX.1-2008
       with the 2013 Technical Corrigendum 1 applied.) In the event of any discrepancy between this  version  and  the  original
       IEEE  and  The  Open  Group Standard, the original IEEE and The Open Group Standard is the referee document. The original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any typographical or formatting errors that appear in this page are most likely to have been introduced during  the  con‐
       version  of  the source files to man page format. To report such errors, see https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                      SCCS(1P)
SED(1)                                                    User Commands                                                   SED(1)

NAME
       sed - stream editor for filtering and transforming text

SYNOPSIS
       sed [OPTION]... {script-only-if-no-other-script} [input-file]...

DESCRIPTION
       Sed  is  a  stream  editor.   A stream editor is used to perform basic text transformations on an input stream (a file or
       input from a pipeline).  While in some ways similar to an editor which permits scripted edits (such as ed), sed works  by
       making  only one pass over the input(s), and is consequently more efficient.  But it is sed's ability to filter text in a
       pipeline which particularly distinguishes it from other types of editors.

       -n, --quiet, --silent

              suppress automatic printing of pattern space

       -e script, --expression=script

              add the script to the commands to be executed

       -f script-file, --file=script-file

              add the contents of script-file to the commands to be executed

       --follow-symlinks

              follow symlinks when processing in place

       -i[SUFFIX], --in-place[=SUFFIX]

              edit files in place (makes backup if SUFFIX supplied)

       -l N, --line-length=N

              specify the desired line-wrap length for the `l' command

       --posix

              disable all GNU extensions.

       -E, -r, --regexp-extended

              use extended regular expressions in the script (for portability use POSIX -E).

       -s, --separate

              consider files as separate rather than as a single, continuous long stream.

       --sandbox

              operate in sandbox mode.

       -u, --unbuffered

              load minimal amounts of data from the input files and flush the output buffers more often

       -z, --null-data

              separate lines by NUL characters

       --help
              display this help and exit

       --version
              output version information and exit

       If no -e, --expression, -f, or --file option is given, then the first non-option argument is taken as the sed  script  to
       interpret.  All remaining arguments are names of input files; if no input files are specified, then the standard input is
       read.

       GNU sed home page: &amp;lt;http://www.gnu.org/software/sed/&amp;gt;.  General help using GNU  software:  &amp;lt;http://www.gnu.org/gethelp/&amp;gt;.
       E-mail bug reports to: &amp;lt;bug-sed@gnu.org&amp;gt;.

COMMAND SYNOPSIS
       This  is  just a brief synopsis of sed commands to serve as a reminder to those who already know sed; other documentation
       (such as the texinfo document) must be consulted for fuller descriptions.

   Zero-address ``commands''
       : label
              Label for b and t commands.

       #comment
              The comment extends until the next newline (or the end of a -e script fragment).

       }      The closing bracket of a { } block.

   Zero- or One- address commands
       =      Print the current line number.

       a \

       text   Append text, which has each embedded newline preceded by a backslash.

       i \

       text   Insert text, which has each embedded newline preceded by a backslash.

       q [exit-code]
              Immediately quit the sed script without processing any more input, except that if auto-print is not  disabled  the
              current pattern space will be printed.  The exit code argument is a GNU extension.

       Q [exit-code]
              Immediately quit the sed script without processing any more input.  This is a GNU extension.

       r filename
              Append text read from filename.

       R filename
              Append  a  line  read  from  filename.   Each invocation of the command reads a line from the file.  This is a GNU
              extension.

   Commands which accept address ranges
       {      Begin a block of commands (end with a }).

       b label
              Branch to label; if label is omitted, branch to end of script.

       c \

       text   Replace the selected lines with text, which has each embedded newline preceded by a backslash.

       d      Delete pattern space.  Start next cycle.

       D      If pattern space contains no newline, start a normal new cycle as if the d command was issued.  Otherwise,  delete
              text  in  the  pattern  space up to the first newline, and restart cycle with the resultant pattern space, without
              reading a new line of input.

       h H    Copy/append pattern space to hold space.

       g G    Copy/append hold space to pattern space.

       l      List out the current line in a ``visually unambiguous'' form.

       l width
              List out the current line in a ``visually unambiguous'' form, breaking it at width  characters.   This  is  a  GNU
              extension.

       n N    Read/append the next line of input into the pattern space.

       p      Print the current pattern space.

       P      Print up to the first embedded newline of the current pattern space.

       s/regexp/replacement/
              Attempt  to match regexp against the pattern space.  If successful, replace that portion matched with replacement.
              The replacement may contain the special character &amp; to refer to that portion of the pattern space  which  matched,
              and the special escapes \1 through \9 to refer to the corresponding matching sub-expressions in the regexp.

       t label
              If a s/// has done a successful substitution since the last input line was read and since the last t or T command,
              then branch to label; if label is omitted, branch to end of script.

       T label
              If no s/// has done a successful substitution since the last input line was read and since the last t  or  T  com‐
              mand, then branch to label; if label is omitted, branch to end of script.  This is a GNU extension.

       w filename
              Write the current pattern space to filename.

       W filename
              Write the first line of the current pattern space to filename.  This is a GNU extension.

       x      Exchange the contents of the hold and pattern spaces.

       y/source/dest/
              Transliterate the characters in the pattern space which appear in source to the corresponding character in dest.

Addresses
       Sed  commands  can  be  given with no addresses, in which case the command will be executed for all input lines; with one
       address, in which case the command will only be executed for input lines which match that address; or with two addresses,
       in which case the command will be executed for all input lines which match the inclusive range of lines starting from the
       first address and continuing to the second address.  Three things to note about address ranges: the syntax is addr1,addr2
       (i.e.,  the  addresses  are  separated  by  a comma); the line which addr1 matched will always be accepted, even if addr2
       selects an earlier line; and if addr2 is a regexp, it will not be tested against the line that addr1 matched.

       After the address (or address-range), and before the command, a !  may be inserted,  which  specifies  that  the  command
       shall only be executed if the address (or address-range) does not match.

       The following address types are supported:

       number Match  only  the specified line number (which increments cumulatively across files, unless the -s option is speci‐
              fied on the command line).

       first~step
              Match every step'th line starting with line first.  For example, ``sed -n 1~2p'' will print all  the  odd-numbered
              lines  in  the input stream, and the address 2~5 will match every fifth line, starting with the second.  first can
              be zero; in this case, sed operates as if it were equal to step.  (This is an extension.)

       $      Match the last line.

       /regexp/
              Match lines matching the regular expression regexp.

       \cregexpc
              Match lines matching the regular expression regexp.  The c may be any character.

       GNU sed also supports some special 2-address forms:

       0,addr2
              Start out in "matched first address" state, until addr2 is found.  This is similar  to  1,addr2,  except  that  if
              addr2  matches  the very first line of input the 0,addr2 form will be at the end of its range, whereas the 1,addr2
              form will still be at the beginning of its range.  This works only when addr2 is a regular expression.

       addr1,+N
              Will match addr1 and the N lines following addr1.

       addr1,~N
              Will match addr1 and the lines following addr1 until the next line whose input line number is a multiple of N.

REGULAR EXPRESSIONS
       POSIX.2 BREs should be supported, but they aren't completely because of performance problems.  The \n sequence in a regu‐
       lar  expression  matches the newline character, and similarly for \a, \t, and other sequences.  The -E option switches to
       using extended regular expressions instead; the -E option has been supported for years by GNU sed, and is now included in
       POSIX.

BUGS
       E-mail  bug  reports to bug-sed@gnu.org.  Also, please include the output of ``sed --version'' in the body of your report
       if at all possible.

AUTHOR
       Written by Jay Fenlason, Tom Lord, Ken  Pizzini,  and  Paolo  Bonzini.   GNU  sed  home  page:  &amp;lt;http://www.gnu.org/soft‐
       ware/sed/&amp;gt;.  General help using GNU software: &amp;lt;http://www.gnu.org/gethelp/&amp;gt;.  E-mail bug reports to: &amp;lt;bug-sed@gnu.org&amp;gt;.

COPYRIGHT
       Copyright    ©    2016   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3   or   later
       &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       awk(1), ed(1), grep(1), tr(1), perlre(1), sed.info, any of various books on sed, the sed FAQ (http://sed.sf.net/grab‐
       bag/tutorials/sedfaq.txt), http://sed.sf.net/grabbag/.

       The full documentation for sed is maintained as a Texinfo manual.  If the info and sed programs are properly installed at
       your site, the command

              info sed

       should give you access to the complete manual.

sed 4.3                                                   January 2017                                                    SED(1)
SET(1P)                                             POSIX Programmer's Manual                                            SET(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->

NAME
       set — set or unset options and positional parameters

SYNOPSIS
       set [−abCefhmnuvx] [−o option] [argument...]

       set [+abCefhmnuvx] [+o option] [argument...]

       set −− [argument...]

       set −o

       set +o

DESCRIPTION
       If  no  options  or arguments are specified, set shall write the names and values of all shell variables in the collation
       sequence of the current locale. Each name shall start on a separate line, using the format:

           "%s=%s\n", &amp;lt;name&amp;gt;, &amp;lt;value&amp;gt;

       The value string shall be written with appropriate quoting; see the description of shell quoting in Section 2.2, Quoting.
       The  output  shall be suitable for reinput to the shell, setting or resetting, as far as possible, the variables that are
       currently set; read-only variables cannot be reset.

       When options are specified, they shall set or unset attributes of the shell, as described below. When arguments are spec‐
       ified, they cause positional parameters to be set or unset, as described below. Setting or unsetting attributes and posi‐
       tional parameters are not necessarily related actions, but they can be combined in a single invocation of set.

       The set special built-in shall support the Base Definitions volume of POSIX.1‐2008, Section 12.2, Utility  Syntax  Guide‐
       lines  except  that  options  can  be specified with either a leading &amp;lt;hyphen&amp;gt; (meaning enable the option) or &amp;lt;plus-sign&amp;gt;
       (meaning disable it) unless otherwise specified.

       Implementations shall support the options in the following list in both  their  &amp;lt;hyphen&amp;gt;  and  &amp;lt;plus-sign&amp;gt;  forms.  These
       options can also be specified as options to sh.

       −a    When  this  option  is on, the export attribute shall be set for each variable to which an assignment is performed;
             see the Base Definitions volume of POSIX.1‐2008, Section 4.22, Variable Assignment.  If the assignment  precedes  a
             utility  name  in  a command, the export attribute shall not persist in the current execution environment after the
             utility completes, with the exception that preceding one of  the  special  built-in  utilities  causes  the  export
             attribute  to  persist  after  the built-in has completed. If the assignment does not precede a utility name in the
             command, or if the assignment is a result of the operation of the getopts or read utilities, the  export  attribute
             shall persist until the variable is unset.

       −b    This option shall be supported if the implementation supports the User Portability Utilities option. It shall cause
             the shell to notify the user asynchronously of background job completions. The  following  message  is  written  to
             standard error:

                 "[%d]%c %s%s\n", &amp;lt;job-number&amp;gt;, &amp;lt;current&amp;gt;, &amp;lt;status&amp;gt;, &amp;lt;job-name&amp;gt;

             where the fields shall be as follows:

             &amp;lt;current&amp;gt;   The  character  '+' identifies the job that would be used as a default for the fg or bg utilities; this
                         job can also be specified using the job_id "%+" or "%%".  The character '−'  identifies  the  job  that
                         would  become the default if the current default job were to exit; this job can also be specified using
                         the job_id "%−".  For other jobs, this field is a &amp;lt;space&amp;gt;.  At most one job can be identified with  '+'
                         and  at  most  one job can be identified with '−'.  If there is any suspended job, then the current job
                         shall be a suspended job. If there are at least two suspended jobs, then the previous job also shall be
                         a suspended job.

             &amp;lt;job-number&amp;gt;
                         A  number that can be used to identify the process group to the wait, fg, bg, and kill utilities. Using
                         these utilities, the job can be identified by prefixing the job number with '%'.

             &amp;lt;status&amp;gt;    Unspecified.

             &amp;lt;job-name&amp;gt;  Unspecified.

             When the shell notifies the user a job has been completed, it may remove the job's process  ID  from  the  list  of
             those  known  in the current shell execution environment; see Section 2.9.3.1, Examples.  Asynchronous notification
             shall not be enabled by default.

       −C    (Uppercase C.) Prevent existing files from being overwritten by the shell's '&amp;gt;' redirection operator  (see  Section
             2.7.2,  Redirecting  Output);  the "&amp;gt;|" redirection operator shall override this noclobber option for an individual
             file.

       −e    When this option is on, when any command fails (for any of the reasons listed in  Section  2.8.1,  Consequences  of
             Shell Errors or by returning an exit status greater than zero), the shell immediately shall exit with the following
             exceptions:

              1. The failure of any individual command in a multi-command pipeline shall not cause the shell to exit.  Only  the
                 failure of the pipeline itself shall be considered.

              2. The  −e  setting  shall  be  ignored  when  executing the compound list following the while, until, if, or elif
                 reserved word, a pipeline beginning with the !  reserved word, or any command of an AND-OR list other than  the
                 last.

              3. If the exit status of a compound command other than a subshell command was the result of a failure while −e was
                 being ignored, then −e shall not apply to this command.

             This requirement applies to the shell environment and each subshell environment separately. For example, in:

                 set -e; (false; echo one) | cat; echo two

             the false command causes the subshell to exit without executing echo one; however, echo two is executed because the
             exit status of the pipeline (false; echo one) | cat is zero.

       −f    The shell shall disable pathname expansion.

       −h    Locate  and  remember  utilities  invoked  by  functions as those functions are defined (the utilities are normally
             located when the function is executed).

       −m    This option shall be supported if the implementation supports the User Portability Utilities option. All jobs shall
             be run in their own process groups. Immediately before the shell issues a prompt after completion of the background
             job, a message reporting the exit status of the background job shall be written to standard error. If a  foreground
             job  stops,  the  shell  shall write a message to standard error to that effect, formatted as described by the jobs
             utility. In addition, if a job changes status other than exiting (for example, if it stops for input or  output  or
             is  stopped  by  a  SIGSTOP  signal), the shell shall write a similar message immediately prior to writing the next
             prompt. This option is enabled by default for interactive shells.

       −n    The shell shall read commands but does not execute them; this can be used to check for shell script syntax  errors.
             An interactive shell may ignore this option.

       −o    Write the current settings of the options to standard output in an unspecified format.

       +o    Write  the current option settings to standard output in a format that is suitable for reinput to the shell as com‐
             mands that achieve the same options settings.

       −o option
             This option is supported if the system supports the  User  Portability  Utilities  option.  It  shall  set  various
             options,  many  of  which shall be equivalent to the single option letters. The following values of option shall be
             supported:

             allexport Equivalent to −a.

             errexit   Equivalent to −e.

             ignoreeof Prevent an interactive shell from exiting on end-of-file. This setting prevents accidental  logouts  when
                       &amp;lt;control&amp;gt;‐D is entered. A user shall explicitly exit to leave the interactive shell.

             monitor   Equivalent to −m.  This option is supported if the system supports the User Portability Utilities option.

             noclobber Equivalent to −C (uppercase C).

             noglob    Equivalent to −f.

             noexec    Equivalent to −n.

             nolog     Prevent the entry of function definitions into the command history; see Command History List.

             notify    Equivalent to −b.

             nounset   Equivalent to −u.

             verbose   Equivalent to −v.

             vi        Allow  shell  command line editing using the built-in vi editor. Enabling vi mode shall disable any other
                       command line editing mode provided as an implementation extension.

                       It need not be possible to set vi mode on for certain block-mode terminals.

             xtrace    Equivalent to −x.

       −u    When the shell tries to expand an unset parameter other than the '@' and '*' special parameters, it shall  write  a
             message  to standard error and shall not execute the command containing the expansion, but for the purposes of set‐
             ting the '?'  special parameter and the exit status of the shell the command shall be treated as having  been  exe‐
             cuted  and  returned an exit status of between 1 and 125 inclusive. A non-interactive shell shall immediately exit.
             An interactive shell shall not exit.

       −v    The shell shall write its input to standard error as it is read.

       −x    The shell shall write to standard error a trace for each command after it expands the command and  before  it  exe‐
             cutes it. It is unspecified whether the command that turns tracing off is traced.

       The default for all these options shall be off (unset) unless stated otherwise in the description of the option or unless
       the shell was invoked with them on; see sh.

       The remaining arguments shall be assigned in order to the positional parameters. The special parameter '#' shall  be  set
       to  reflect  the  number  of  positional  parameters.  All positional parameters shall be unset before any new values are
       assigned.

       If the first argument is '−', the results are unspecified.

       The special argument "−−" immediately following the set command name can be used to delimit the arguments  if  the  first
       argument  begins  with  '+' or '−', or to prevent inadvertent listing of all shell variables when there are no arguments.
       The command set −− without argument shall unset all positional parameters and set the special parameter '#' to zero.

OPTIONS
       See the DESCRIPTION.

OPERANDS
       See the DESCRIPTION.

<!-- fe96d119-27ce-4a62-99a9-ff5840fe1a84 <=< ACCEPT -->STDIN
       Not used.

INPUT FILES
       None.

ENVIRONMENT VARIABLES
       None.

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       See the DESCRIPTION.

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       None.

EXIT STATUS
       Zero.

CONSEQUENCES OF ERRORS
       Default.

       The following sections are informative.<!-- ACCEPT >=> fe96d119-27ce-4a62-99a9-ff5840fe1a84 -->

APPLICATION USAGE
       Application writers should avoid relying on set −e within functions. For example, in the following script:

           set -e
           start() {
               some_server
               echo some_server started successfully
           }
           start || echo &amp;gt;&amp;2 some_server failed

       the −e setting is ignored within the function body (because the function is a command in an AND-OR list  other  than  the
       last).  Therefore,  if  some_server fails, the function carries on to echo "some_serverstartedsuccessfully", and the exit
       status of the function is zero (which means "some_serverfailed" is not output).

EXAMPLES
       Write out all variables and their values:

           set

       Set $1, $2, and $3 and set "$#" to 3:

           set c a b

       Turn on the −x and −v options:

           set −xv

       Unset all positional parameters:

           set −−

       Set $1 to the value of x, even if it begins with '−' or '+':

           set −− "$x"

       Set the positional parameters to the expansion of x, even if x expands with a leading '−' or '+':

           set −− $x

RATIONALE
       The set −− form is listed specifically in the SYNOPSIS even though this usage is implied by  the  Utility  Syntax  Guide‐
       lines.  The  explanation  of  this feature removes any ambiguity about whether the set −− form might be misinterpreted as
       being equivalent to set without any options or arguments. The functionality of this form has been adopted from the  Korn‐
       Shell. In System V, set −− only unsets parameters if there is at least one argument; the only way to unset all parameters
       is to use shift.  Using the KornShell version should not affect System V scripts because there should  be  no  reason  to
       issue it without arguments deliberately; if it were issued as, for example:

           set −− "$@"

       and there were in fact no arguments resulting from "$@", unsetting the parameters would have no result.

       The set + form in early proposals was omitted as being an unnecessary duplication of set alone and not widespread histor‐
       ical practice.

       The noclobber option was changed to allow set −C as well as the set −o noclobber option. The  single-letter  version  was
       added so that the historical "$−" paradigm would not be broken; see Section 2.5.2, Special Parameters.

       The description of the −e option is intended to match the behavior of the 1988 version of the KornShell.

       The −h flag is related to command name hashing. See hash.

       The following set flags were omitted intentionally with the following rationale:

       −k    The  −k flag was originally added by the author of the Bourne shell to make it easier for users of pre-release ver‐
             sions of the shell. In early versions of the Bourne shell the construct set name=value had to  be  used  to  assign
             values  to  shell variables. The problem with −k is that the behavior affects parsing, virtually precluding writing
             any compilers. To explain the behavior of −k, it is necessary to describe the parsing algorithm, which is implemen‐
             tation-defined. For example:

                 set −k; echo name=value

             and:

                 set −k
                 echo name=value

             behave differently. The interaction with functions is even more complex. What is more, the −k flag is never needed,
             since the command line could have been reordered.

       −t    The −t flag is hard to specify and almost never used. The only known use could be done with  here-documents.  More‐
             over,  the  behavior with ksh and sh differs. The reference page says that it exits after reading and executing one
             command. What is one command? If the input is date;date, sh executes both date commands while  ksh  does  only  the
             first.

       Consideration was given to rewriting set to simplify its confusing syntax. A specific suggestion was that the unset util‐
       ity should be used to unset options instead of using the non-getopt()-able +option syntax. However,  the  conclusion  was
       reached  that the historical practice of using +option was satisfactory and that there was no compelling reason to modify
       such widespread historical practice.

       The −o option was adopted from the KornShell to address user needs. In addition to its generally friendly  interface,  −o
       is needed to provide the vi command line editing mode, for which historical practice yields no single-letter option name.
       (Although it might have been possible to invent such a letter, it was recognized that other editing modes would be devel‐
       oped and −o provides ample name space for describing such extensions.)

       Historical  implementations  are inconsistent in the format used for −o option status reporting. The +o format without an
       option-argument was added to allow portable access to the options that can be saved and then later  restored  using,  for
       instance, a dot script.

       Historically, sh did trace the command set +x, but ksh did not.

       The  ignoreeof  setting  prevents accidental logouts when the end-of-file character (typically &amp;lt;control&amp;gt;‐D) is entered. A
       user shall explicitly exit to leave the interactive shell.

       The set −m option was added to apply only to the UPE because it applies primarily to interactive use,  not  shell  script
       applications.

       The  ability to do asynchronous notification became available in the 1988 version of the KornShell. To have it occur, the
       user had to issue the command:

           trap "jobs −n" CLD

       The C shell provides two different levels of an asynchronous notification capability. The environment variable notify  is
       analogous  to what is done in set −b or set −o notify.  When set, it notifies the user immediately of background job com‐
       pletions. When unset, this capability is turned off.

       The other notification ability comes through the built-in utility notify.  The syntax is:

           notify [%job ... ]

       By issuing notify with no operands, it causes the C shell to notify the user asynchronously when the state of the current
       job changes. If given operands, notify asynchronously informs the user of changes in the states of the specified jobs.

       To  add  asynchronous  notification  to the POSIX shell, neither the KornShell extensions to trap, nor the C shell notify
       environment variable seemed appropriate (notify is not a proper POSIX environment variable name).

       The set −b option was selected as a compromise.

       The notify built-in was considered to have more functionality than was required for simple asynchronous notification.

       Historically, some shells applied the −u option to all parameters including $@ and $*.  The standard developers felt that
       this  was a misfeature since it is normal and common for $@ and $* to be used in shell scripts regardless of whether they
       were passed any arguments. Treating these uses as an error when no arguments are passed reduces the value of −u  for  its
       intended purpose of finding spelling mistakes in variable names and uses of unset positional parameters.

FUTURE DIRECTIONS
       None.

SEE ALSO
       Section 2.14, Special Built-In Utilities, hash

       The Base Definitions volume of POSIX.1‐2008, Section 4.22, Variable Assignment, Section 12.2, Utility Syntax Guidelines

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions  of  this  text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013 Edition, Standard for
       Information Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7,  Copy‐
       right  (C)  2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This is POSIX.1-2008
       with the 2013 Technical Corrigendum 1 applied.) In the event of any discrepancy between this  version  and  the  original
       IEEE  and  The  Open  Group Standard, the original IEEE and The Open Group Standard is the referee document. The original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any typographical or formatting errors that appear in this page are most likely to have been introduced during  the  con‐
       version  of  the source files to man page format. To report such errors, see https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                       SET(1P)
SH(1P)                                              POSIX Programmer's Manual                                             SH(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->

NAME
       sh — shell, the standard command language interpreter

SYNOPSIS
       sh [−abCefhimnuvx] [−o option]... [+abCefhimnuvx] [+o option]...
           [command_file [argument...]]

       sh −c [−abCefhimnuvx] [−o option]... [+abCefhimnuvx] [+o option]...
           command_string [command_name [argument...]]

       sh −s [−abCefhimnuvx] [−o option]... [+abCefhimnuvx] [+o option]...
           [argument...]

DESCRIPTION
       The  sh  utility is a command language interpreter that shall execute commands read from a command line string, the stan‐
       dard input, or a specified file. The application shall ensure that the commands to be executed are expressed in the  lan‐
       guage described in Chapter 2, Shell Command Language.

       Pathname expansion shall not fail due to the size of a file.

       Shell  input  and  output redirections have an implementation-defined offset maximum that is established in the open file
       description.

OPTIONS
       The sh utility shall conform to the Base Definitions volume of POSIX.1‐2008, Section  12.2,  Utility  Syntax  Guidelines,
       with an extension for support of a leading &amp;lt;plus-sign&amp;gt; ('+') as noted below.

       The  −a,  −b,  −C,  −e, −f, −m, −n, −o option, −u, −v, and −x options are described as part of the set utility in Section
       2.14, Special Built-In Utilities.  The option letters derived from the set special built-in shall also be accepted with a
       leading &amp;lt;plus-sign&amp;gt; ('+') instead of a leading &amp;lt;hyphen&amp;gt; (meaning the reverse case of the option as described in this vol‐
       ume of POSIX.1‐2008).

       The following additional options shall be supported:

       −c        Read commands from the command_string operand. Set the value of special parameter 0 (see Section 2.5.2, Special
                 Parameters)  from  the  value  of the command_name operand and the positional parameters ($1, $2, and so on) in
                 sequence from the remaining argument operands. No commands shall be read from the standard input.

       −i        Specify that the shell is interactive; see below. An implementation may treat specifying the −i  option  as  an
                 error  if  the real user ID of the calling process does not equal the effective user ID or if the real group ID
                 does not equal the effective group ID.

       −s        Read commands from the standard input.

       If there are no operands and the −c option is not specified, the −s option shall be assumed.

       If the −i option is present, or if there are no operands and the shell's standard input and standard error  are  attached
       to a terminal, the shell is considered to be interactive.

OPERANDS
       The following operands shall be supported:

       −         A  single  &amp;lt;hyphen&amp;gt;  shall  be treated as the first operand and then ignored. If both '−' and "−−" are given as
                 arguments, or if other operands precede the single &amp;lt;hyphen&amp;gt;, the results are undefined.

       argument  The positional parameters ($1, $2, and so on) shall be set to arguments, if any.

       command_file
                 The pathname of a file containing commands. If the pathname contains one or more &amp;lt;slash&amp;gt; characters, the imple‐
                 mentation  attempts  to  read  that  file;  the file need not be executable. If the pathname does not contain a
                 &amp;lt;slash&amp;gt; character:

                  *  The implementation shall attempt to read that file from the current working directory; the file need not be
                     executable.

                  *  If  the  file  is not in the current working directory, the implementation may perform a search for an exe‐
                     cutable file using the value of PATH, as described in Section 2.9.1.1, Command Search and Execution.

                 Special parameter 0 (see Section 2.5.2, Special Parameters) shall be set to the value of command_file.   If  sh
                 is  called  using a synopsis form that omits command_file, special parameter 0 shall be set to the value of the
                 first argument passed to sh from its parent (for example, argv[0] for a C program), which is normally  a  path‐
                 name used to execute the sh utility.

       command_name
                 A string assigned to special parameter 0 when executing the commands in command_string.  If command_name is not
                 specified, special parameter 0 shall be set to the value of the first argument passed to  sh  from  its  parent
                 (for example, argv[0] for a C program), which is normally a pathname used to execute the sh utility.

       command_string
                 A  string that shall be interpreted by the shell as one or more commands, as if the string were the argument to
                 the system() function defined in the System Interfaces volume of POSIX.1‐2008. If the command_string operand is
                 an empty string, sh shall exit with a zero exit status.

STDIN
       The standard input shall be used only if one of the following is true:

        *  The −s option is specified.

        *  The −c option is not specified and no operands are specified.

        *  The script executes one or more commands that require input from standard input (such as a read command that does not
           redirect its input).

       See the INPUT FILES section.

       When the shell is using standard input and it invokes a command that also uses standard input,  the  shell  shall  ensure
       that  the standard input file pointer points directly after the command it has read when the command begins execution. It
       shall not read ahead in such a manner that any characters intended to be read by the invoked command are consumed by  the
       shell  (whether interpreted by the shell or not) or that characters that are not read by the invoked command are not seen
       by the shell. When the command expecting to read standard input is started asynchronously by an interactive shell, it  is
       unspecified whether characters are read by the command or interpreted by the shell.

       If  the standard input to sh is a FIFO or terminal device and is set to non-blocking reads, then sh shall enable blocking
       reads on standard input. This shall remain in effect when the command completes.

INPUT FILES
       The input file shall be a text file, except that line lengths shall be unlimited. If the input file is empty or  consists
       solely of blank lines or comments, or both, sh shall exit with a zero exit status.

ENVIRONMENT VARIABLES
       The following environment variables shall affect the execution of sh:

       ENV       This  variable,  when  and only when an interactive shell is invoked, shall be subjected to parameter expansion
                 (see Section 2.6.2, Parameter Expansion) by the shell, and the resulting value shall be used as a pathname of a
                 file  containing shell commands to execute in the current environment.  The file need not be executable. If the
                 expanded value of ENV is not an absolute pathname, the results are unspecified.  ENV shall be  ignored  if  the
                 real and effective user IDs or real and effective group IDs of the process are different.

<!-- 5d77cd22-07ec-4e89-93a7-99d49d8d9490 <=< ACCEPT -->       FCEDIT    This  variable, when expanded by the shell, shall determine the default value for the −e editor option's editor
                 option-argument. If FCEDIT is null or unset, ed shall be used as the editor.

       HISTFILE  Determine a pathname naming a command history file. If the HISTFILE variable is not set, the shell may  attempt
                 to  access  or  create a file .sh_history in the directory referred to by the HOME environment variable. If the
                 shell cannot obtain both read and write access to, or create, the history file, it  shall  use  an  unspecified
                 mechanism  that  allows the history to operate properly.  (References to history ``file'' in this section shall
                 be understood to mean this unspecified mechanism in such cases.) An implementation may choose  to  access  this
                 variable  only  when initializing the history file; this initialization shall occur when fc or sh first attempt
                 to retrieve entries from, or add entries to, the file, as the result of commands issued by the user,  the  file
                 named by the ENV variable, or implementation-defined system start-up files.  Implementations may choose to dis‐
                 able the history list mechanism for users with appropriate privileges who do not  set  HISTFILE;  the  specific
                 circumstances  under  which  this  occurs are implementation-defined. If more than one instance of the shell is
                 using the same history file, it is unspecified how updates to the history file from those shells  interact.  As
                 entries  are  deleted from the history file, they shall be deleted oldest first. It is unspecified when history
                 file entries are physically removed from the history file.

       HISTSIZE  Determine a decimal number representing the limit to the number of previous commands that  are  accessible.  If
                 this  variable  is unset, an unspecified default greater than or equal to 128 shall be used. The maximum number
                 of commands in the history list is unspecified, but shall be at least 128.  An  implementation  may  choose  to
                 access  this  variable  only when initializing the history file, as described under HISTFILE.  Therefore, it is
                 unspecified whether changes made to HISTSIZE after the history file has been initialized are effective.<!-- ACCEPT >=> 5d77cd22-07ec-4e89-93a7-99d49d8d9490 -->

       HOME      Determine the pathname of the user's home directory. The contents of  HOME  are  used  in  tilde  expansion  as
                 described in Section 2.6.1, Tilde Expansion.

       IFS       A  string  treated as a list of characters that is used for field splitting and to split lines into fields with
                 the read command.

                 If IFS is not set, it shall behave as normal for an unset variable, except that field splitting  by  the  shell
                 and  line splitting by the read command shall be performed as if the value of IFS is &amp;lt;space&amp;gt;&amp;lt;tab&amp;gt;&amp;lt;newline&amp;gt;; see
                 Section 2.6.5, Field Splitting.

                 Implementations may ignore the value of IFS in the environment, or the absence of IFS from the environment,  at
                 the  time  the  shell  is  invoked,  in  which case the shell shall set IFS to &amp;lt;space&amp;gt;&amp;lt;tab&amp;gt;&amp;lt;newline&amp;gt; when it is
                 invoked.

       LANG      Provide a default value for the internationalization variables that are unset or null. (See  the  Base  Defini‐
                 tions  volume of POSIX.1‐2008, Section 8.2, Internationalization Variables for the precedence of international‐
                 ization variables used to determine the values of locale categories.)

       LC_ALL    If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_COLLATE
                 Determine the behavior of range expressions, equivalence classes, and multi-character collating elements within
                 pattern matching.

       LC_CTYPE  Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, sin‐
                 gle-byte as opposed to multi-byte characters in arguments and input files), which  characters  are  defined  as
                 letters (character class alpha), and the behavior of character classes within pattern matching.

       LC_MESSAGES
                 Determine  the  locale  that should be used to affect the format and contents of diagnostic messages written to
                 standard error.

       MAIL      Determine a pathname of the user's mailbox file for purposes of incoming mail notification. If this variable is
                 set,  the  shell shall inform the user if the file named by the variable is created or if its modification time
                 has changed. Informing the user shall be accomplished by writing a string of  unspecified  format  to  standard
                 error prior to the writing of the next primary prompt string. Such check shall be performed only after the com‐
                 pletion of the interval defined by the MAILCHECK variable after the last such check. The user shall be informed
                 only if MAIL is set and MAILPATH is not set.

       MAILCHECK
                 Establish  a  decimal integer value that specifies how often (in seconds) the shell shall check for the arrival
                 of mail in the files specified by the MAILPATH or MAIL variables. The default value shall be  600  seconds.  If
                 set to zero, the shell shall check before issuing each primary prompt.

       MAILPATH  Provide a list of pathnames and optional messages separated by &amp;lt;colon&amp;gt; characters. If this variable is set, the
                 shell shall inform the user if any of the files named by the variable are created or if any of their  modifica‐
                 tion times change. (See the preceding entry for MAIL for descriptions of mail arrival and user informing.) Each
                 pathname can be followed by '%' and a string that shall be subjected to  parameter  expansion  and  written  to
                 standard  error  when the modification time changes. If a '%' character in the pathname is preceded by a &amp;lt;back‐
                 slash&amp;gt;, it shall be treated as a literal '%' in the pathname. The default message is unspecified.

                 The MAILPATH environment variable takes precedence over the MAIL variable.

       NLSPATH   Determine the location of message catalogs for the processing of LC_MESSAGES.

       PATH      Establish a string formatted as described in the Base Definitions volume of POSIX.1‐2008, Chapter  8,  Environ‐
                 ment Variables, used to effect command interpretation; see Section 2.9.1.1, Command Search and Execution.

       PWD       This  variable shall represent an absolute pathname of the current working directory. Assignments to this vari‐
                 able may be ignored.

ASYNCHRONOUS EVENTS
       The sh utility shall take the standard action for all signals (see Section 1.4, Utility Description  Defaults)  with  the
       following exceptions.

       If  the  shell  is  interactive, SIGINT signals received during command line editing shall be handled as described in the
       EXTENDED DESCRIPTION, and SIGINT signals received at other times shall be caught but no action performed.

       If the shell is interactive:

        *  SIGQUIT and SIGTERM signals shall be ignored.

        *  If the −m option is in effect, SIGTTIN, SIGTTOU, and SIGTSTP signals shall be ignored.

        *  If the −m option is not in effect, it is unspecified whether SIGTTIN, SIGTTOU, and SIGTSTP signals are  ignored,  set
           to the default action, or caught.  If they are caught, the shell shall, in the signal-catching function, set the sig‐
           nal to the default action and raise the signal (after taking any appropriate steps, such as restoring  terminal  set‐
           tings).

       The  standard  actions, and the actions described above for interactive shells, can be overridden by use of the trap spe‐
       cial built-in utility (see trap and Section 2.11, Signals and Error Handling).

STDOUT
       See the STDERR section.

STDERR
       Except as otherwise stated (by the descriptions of any invoked utilities or in interactive mode), standard error shall be
       used only for diagnostic messages.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       See Chapter 2, Shell Command Language.  The functionality described in the rest of the EXTENDED DESCRIPTION section shall
       be provided on implementations that support the User Portability Utilities option (and the rest of this  section  is  not
       further shaded for this option).

   Command History List
       When  the sh utility is being used interactively, it shall maintain a list of commands previously entered from the termi‐
       nal in the file named by the HISTFILE environment variable. The type, size, and internal format of this file are unspeci‐
       fied.  Multiple  sh  processes  can  share  access to the file for a user, if file access permissions allow this; see the
       description of the HISTFILE environment variable.

   Command Line Editing
       When sh is being used interactively from a terminal, the current command and the command history (see fc) can  be  edited
       using  vi-mode  command line editing. This mode uses commands, described below, similar to a subset of those described in
       the vi utility. Implementations may offer other command line editing modes corresponding to other editing utilities.

       The command set −o vi shall enable vi-mode editing and place sh into vi insert mode (see Command Line Editing (vi-mode)).
       This  command  also  shall disable any other editing mode that the implementation may provide. The command set +o vi dis‐
       ables vi-mode editing.

       Certain block-mode terminals may be unable to support shell command line editing. If a  terminal  is  unable  to  provide
       either edit mode, it need not be possible to set −o vi when using the shell on this terminal.

       In the following sections, the characters erase, interrupt, kill, and end-of-file are those set by the stty utility.

   Command Line Editing (vi-mode)
       In  vi  editing  mode, there shall be a distinguished line, the edit line. All the editing operations which modify a line
       affect the edit line. The edit line is always the newest line in the command history buffer.

       With vi-mode enabled, sh can be switched between insert mode and command mode.

       When in insert mode, an entered character shall be inserted into the command line, except as noted  in  vi  Line  Editing
       Insert Mode.  Upon entering sh and after termination of the previous command, sh shall be in insert mode.

       Typing  an  escape  character  shall switch sh into command mode (see vi Line Editing Command Mode).  In command mode, an
       entered character shall either invoke a defined operation, be used as part of a multi-character operation, or be  treated
       as  an  error. A character that is not recognized as part of an editing command shall terminate any specific editing com‐
       mand and shall alert the terminal. If sh receives a SIGINT signal in command mode (whether generated by typing the inter‐
       rupt  character  or  by  other  means),  it shall terminate command line editing on the current command line, reissue the
       prompt on the next line of the terminal, and reset the command history (see fc) so that the most recently  executed  com‐
       mand  is  the previous command (that is, the command that was being edited when it was interrupted is not re-entered into
       the history).

       In the following sections, the phrase ``move the cursor to the beginning of the word'' shall mean ``move  the  cursor  to
       the first character of the current word'' and the phrase ``move the cursor to the end of the word'' shall mean ``move the
       cursor to the last character of the current word''. The phrase ``beginning of the  command  line''  indicates  the  point
       between  the  end  of the prompt string issued by the shell (or the beginning of the terminal line, if there is no prompt
       string) and the first character of the command text.

   vi Line Editing Insert Mode
       While in insert mode, any character typed shall be inserted in the current command line, unless it is from the  following
       set.

       &amp;lt;newline&amp;gt; Execute the current command line. If the current command line is not empty, this line shall be entered into the
                 command history (see fc).

       erase     Delete the character previous to the current cursor position and move the  current  cursor  position  back  one
                 character. In insert mode, characters shall be erased from both the screen and the buffer when backspacing.

       interrupt If  sh receives a SIGINT signal in insert mode (whether generated by typing the interrupt character or by other
                 means), it shall terminate command line editing with the same effects as  described  for  interrupting  command
                 mode; see Command Line Editing (vi-mode).

       kill      Clear all the characters from the input line.

       &amp;lt;control&amp;gt;‐V
                 Insert the next character input, even if the character is otherwise a special insert mode character.

       &amp;lt;control&amp;gt;‐W
                 Delete  the  characters  from the one preceding the cursor to the preceding word boundary. The word boundary in
                 this case is the closer to the cursor of either the beginning of the line or a character that is in neither the
                 blank nor punct character classification of the current locale.

       end-of-file
                 Interpreted as the end of input in sh.  This interpretation shall occur only at the beginning of an input line.
                 If end-of-file is entered other than at the beginning of the line, the results are unspecified.

       &amp;lt;ESC&amp;gt;     Place sh into command mode.

   vi Line Editing Command Mode
       In command mode for the command line editing feature, decimal digits not beginning with 0 that precede a  command  letter
       shall be remembered. Some commands use these decimal digits as a count number that affects the operation.

       The term motion command represents one of the commands:

           &amp;lt;space&amp;gt;  0  b  F  l  W  ^  $  ;  E  f  T  w  |  ,  B  e  h  t

       If  the current line is not the edit line, any command that modifies the current line shall cause the content of the cur‐
       rent line to replace the content of the edit line, and the current line shall become the edit line. This replacement can‐
       not be undone (see the u and U commands below). The modification requested shall then be performed to the edit line. When
       the current line is the edit line, the modification shall be done directly to the edit line.

       Any command that is preceded by count shall take a count (the numeric value of any preceding decimal digits). Unless oth‐
       erwise  noted,  this  count  shall cause the specified operation to repeat by the number of times specified by the count.
       Also unless otherwise noted, a count that is out of range is considered an error condition and shall alert the  terminal,
       but neither the cursor position, nor the command line, shall change.

       The  terms  word  and  bigword  are  used  as defined in the vi description. The term save buffer corresponds to the term
       unnamed buffer in vi.

       The following commands shall be recognized in command mode:

       &amp;lt;newline&amp;gt; Execute the current command line. If the current command line is not empty, this line shall be entered into the
                 command history (see fc).

       &amp;lt;control&amp;gt;‐L
                 Redraw the current command line. Position the cursor at the same location on the redrawn line.

       #         Insert  the  character  '#' at the beginning of the current command line and treat the resulting edit line as a
                 comment. This line shall be entered into the command history; see fc.

       =         Display the possible shell word expansions (see Section 2.6, Word Expansions) of the  bigword  at  the  current
                 command line position.

                 Note:     This  does  not modify the content of the current line, and therefore does not cause the current line
                           to become the edit line.

                 These expansions shall be displayed on subsequent terminal lines. If the bigword contains none of  the  charac‐
                 ters  '?',  '*',  or  '[',  an  &amp;lt;asterisk&amp;gt; ('*') shall be implicitly assumed at the end. If any directories are
                 matched, these expansions shall have a '/' character appended. After the expansion, the line shall be  redrawn,
                 the cursor repositioned at the current cursor position, and sh shall be placed in command mode.

       \         Perform  pathname  expansion  (see Section 2.6.6, Pathname Expansion) on the current bigword, up to the largest
                 set of characters that can be matched uniquely. If the bigword contains none of the  characters  '?',  '*',  or
                 '[',  an &amp;lt;asterisk&amp;gt; ('*') shall be implicitly assumed at the end. This maximal expansion then shall replace the
                 original bigword in the command line, and the cursor shall be placed after this  expansion.  If  the  resulting
                 bigword  completely and uniquely matches a directory, a '/' character shall be inserted directly after the big‐
                 word. If some other file is completely matched, a single &amp;lt;space&amp;gt; shall be inserted  after  the  bigword.  After
                 this operation, sh shall be placed in insert mode.

       *         Perform  pathname  expansion  on  the current bigword and insert all expansions into the command to replace the
                 current bigword, with each expansion separated by a single &amp;lt;space&amp;gt;.  If at the end of  the  line,  the  current
                 cursor  position shall be moved to the first column position following the expansions and sh shall be placed in
                 insert mode. Otherwise, the current cursor position shall be the last column position of  the  first  character
                 after the expansions and sh shall be placed in insert mode. If the current bigword contains none of the charac‐
                 ters '?', '*', or '[', before the operation, an &amp;lt;asterisk&amp;gt; ('*') shall be implicitly assumed at the end.

       @letter   Insert the value of the alias named _letter.  The symbol letter represents a single alphabetic  character  from
                 the  portable  character  set;  implementations may support additional characters as an extension. If the alias
                 _letter contains other editing commands, these commands shall be performed as part  of  the  insertion.  If  no
                 alias _letter is enabled, this command shall have no effect.

       [count]~  Convert,  if the current character is a lowercase letter, to the equivalent uppercase letter and vice versa, as
                 prescribed by the current locale. The current cursor position then shall be advanced by one character.  If  the
                 cursor  was positioned on the last character of the line, the case conversion shall occur, but the cursor shall
                 not advance. If the '~' command is preceded by a count, that number of characters shall be converted,  and  the
                 cursor  shall be advanced to the character position after the last character converted.  If the count is larger
                 than the number of characters after the cursor, this shall not be considered an error; the cursor shall advance
                 to the last character on the line.

       [count].  Repeat  the most recent non-motion command, even if it was executed on an earlier command line. If the previous
                 command was preceded by a count, and no count is given on the '.'  command, the count from the previous command
                 shall be included as part of the repeated command. If the '.'  command is preceded by a count, this shall over‐
                 ride any count argument to the previous command. The count specified in the '.'  command shall become the count
                 for subsequent '.'  commands issued without a count.

       [number]v Invoke  the vi editor to edit the current command line in a temporary file. When the editor exits, the commands
                 in the temporary file shall be executed and placed in the command history. If a number is included,  it  speci‐
                 fies the command number in the command history to be edited, rather than the current command line.

       [count]l   (ell)

       [count]&amp;lt;space&amp;gt;
                 Move the current cursor position to the next character position. If the cursor was positioned on the last char‐
                 acter of the line, the terminal shall be alerted and the cursor shall not be advanced. If the count  is  larger
                 than the number of characters after the cursor, this shall not be considered an error; the cursor shall advance
                 to the last character on the line.

       [count]h  Move the current cursor position to the countth (default 1) previous character  position.  If  the  cursor  was
                 positioned on the first character of the line, the terminal shall be alerted and the cursor shall not be moved.
                 If the count is larger than the number of characters before the cursor, this shall not be considered an  error;
                 the cursor shall move to the first character on the line.

       [count]w  Move  to the start of the next word. If the cursor was positioned on the last character of the line, the termi‐
                 nal shall be alerted and the cursor shall not be advanced. If the count is larger  than  the  number  of  words
                 after  the cursor, this shall not be considered an error; the cursor shall advance to the last character on the
                 line.

       [count]W  Move to the start of the next bigword. If the cursor was positioned on the last character of the line, the ter‐
                 minal shall be alerted and the cursor shall not be advanced. If the count is larger than the number of bigwords
                 after the cursor, this shall not be considered an error; the cursor shall advance to the last character on  the
                 line.

       [count]e  Move  to  the end of the current word. If at the end of a word, move to the end of the next word. If the cursor
                 was positioned on the last character of the line, the terminal shall be alerted and the  cursor  shall  not  be
                 advanced.  If  the  count  is larger than the number of words after the cursor, this shall not be considered an
                 error; the cursor shall advance to the last character on the line.

       [count]E  Move to the end of the current bigword. If at the end of a bigword, move to the end of the next bigword. If the
                 cursor was positioned on the last character of the line, the terminal shall be alerted and the cursor shall not
                 be advanced. If the count is larger than the number of bigwords after the cursor, this shall not be  considered
                 an error; the cursor shall advance to the last character on the line.

       [count]b  Move to the beginning of the current word. If at the beginning of a word, move to the beginning of the previous
                 word. If the cursor was positioned on the first character of the line, the terminal shall be  alerted  and  the
                 cursor shall not be moved. If the count is larger than the number of words preceding the cursor, this shall not
                 be considered an error; the cursor shall return to the first character on the line.

       [count]B  Move to the beginning of the current bigword. If at the beginning of a bigword, move to the  beginning  of  the
                 previous  bigword.  If  the  cursor  was  positioned  on the first character of the line, the terminal shall be
                 alerted and the cursor shall not be moved. If the count is larger than the number  of  bigwords  preceding  the
                 cursor, this shall not be considered an error; the cursor shall return to the first character on the line.

       ^         Move the current cursor position to the first character on the input line that is not a &amp;lt;blank&amp;gt;.

       $         Move to the last character position on the current command line.

       0         (Zero.) Move to the first character position on the current command line.

       [count]|  Move  to  the  countth  character  position on the current command line. If no number is specified, move to the
                 first position. The first character position shall be numbered 1. If the count is larger  than  the  number  of
                 characters on the line, this shall not be considered an error; the cursor shall be placed on the last character
                 on the line.

       [count]fc Move to the first occurrence of the character 'c' that occurs after the current cursor position. If the  cursor
                 was  positioned  on  the  last character of the line, the terminal shall be alerted and the cursor shall not be
                 advanced. If the character 'c' does not occur in the line after the current cursor position, the terminal shall
                 be alerted and the cursor shall not be moved.

       [count]Fc Move to the first occurrence of the character 'c' that occurs before the current cursor position. If the cursor
                 was positioned on the first character of the line, the terminal shall be alerted and the cursor  shall  not  be
                 moved.  If  the character 'c' does not occur in the line before the current cursor position, the terminal shall
                 be alerted and the cursor shall not be moved.

       [count]tc Move to the character before the first occurrence of the character 'c' that occurs  after  the  current  cursor
                 position. If the cursor was positioned on the last character of the line, the terminal shall be alerted and the
                 cursor shall not be advanced. If the character 'c' does not occur in the line after the  current  cursor  posi‐
                 tion, the terminal shall be alerted and the cursor shall not be moved.

       [count]Tc Move  to  the  character  after the first occurrence of the character 'c' that occurs before the current cursor
                 position. If the cursor was positioned on the first character of the line, the terminal shall  be  alerted  and
                 the  cursor shall not be moved. If the character 'c' does not occur in the line before the current cursor posi‐
                 tion, the terminal shall be alerted and the cursor shall not be moved.

       [count];  Repeat the most recent f, F, t, or T command. Any number argument on that previous command  shall  be  ignored.
                 Errors are those described for the repeated command.

       [count],  Repeat  the  most  recent f, F, t, or T command. Any number argument on that previous command shall be ignored.
                 However, reverse the direction of that command.

       a         Enter insert mode after the current cursor position. Characters that are entered shall be inserted  before  the
                 next character.

       A         Enter insert mode after the end of the current command line.

       i         Enter insert mode at the current cursor position. Characters that are entered shall be inserted before the cur‐
                 rent character.

       I         Enter insert mode at the beginning of the current command line.

       R         Enter insert mode, replacing characters from the command line beginning at the current cursor position.

       [count]cmotion
                 Delete the characters between the current cursor position and the cursor position that would  result  from  the
                 specified  motion  command. Then enter insert mode before the first character following any deleted characters.
                 If count is specified, it shall be applied to the motion command. A count shall be ignored  for  the  following
                 motion commands:

                     0    ^    $    c

                 If  the motion command is the character 'c', the current command line shall be cleared and insert mode shall be
                 entered. If the motion command would move the current cursor position toward the beginning of the command line,
                 the character under the current cursor position shall not be deleted. If the motion command would move the cur‐
                 rent cursor position toward the end of the command line, the character under the current cursor position  shall
                 be  deleted.   If the count is larger than the number of characters between the current cursor position and the
                 end of the command line toward which the motion command would move the cursor, this shall not be considered  an
                 error;  all  of  the remaining characters in the aforementioned range shall be deleted and insert mode shall be
                 entered. If the motion command is invalid, the terminal shall be alerted, the cursor shall not be moved, and no
                 text shall be deleted.

       C         Delete from the current character to the end of the line and enter insert mode at the new end-of-line.

       S         Clear the entire edit line and enter insert mode.

       [count]rc Replace the current character with the character 'c'.  With a number count, replace the current and the follow‐
                 ing count−1 characters. After this command, the current cursor position shall be on the last character that was
                 changed. If the count is larger than the number of characters after the cursor, this shall not be considered an
                 error; all of the remaining characters shall be changed.

       [count]_  Append a &amp;lt;space&amp;gt; after the current character position and then append the last bigword in  the  previous  input
                 line  after  the  &amp;lt;space&amp;gt;.  Then enter insert mode after the last character just appended. With a number count,
                 append the countth bigword in the previous line.

       [count]x  Delete the character at the current cursor position and place the deleted characters in the save buffer. If the
                 cursor was positioned on the last character of the line, the character shall be deleted and the cursor position
                 shall be moved to the previous character (the new last character). If the count is larger than  the  number  of
                 characters  after  the cursor, this shall not be considered an error; all the characters from the cursor to the
                 end of the line shall be deleted.

       [count]X  Delete the character before the current cursor position and place the deleted characters in  the  save  buffer.
                 The  character  under  the  current cursor position shall not change. If the cursor was positioned on the first
                 character of the line, the terminal shall be alerted, and the X command shall have no effect. If the line  con‐
                 tained  a single character, the X command shall have no effect. If the line contained no characters, the termi‐
                 nal shall be alerted and the cursor shall not be moved. If the count is larger than the  number  of  characters
                 before  the  cursor,  this  shall  not be considered an error; all the characters from before the cursor to the
                 beginning of the line shall be deleted.

       [count]dmotion
                 Delete the characters between the current cursor position and the character position that would result from the
                 motion  command. A number count repeats the motion command count times. If the motion command would move toward
                 the beginning of the command line, the character under the current cursor position shall not be deleted. If the
                 motion  command  is d, the entire current command line shall be cleared. If the count is larger than the number
                 of characters between the current cursor position and the end of the command line toward which the motion  com‐
                 mand  would  move  the  cursor,  this  shall not be considered an error; all of the remaining characters in the
                 aforementioned range shall be deleted. The deleted characters shall be placed in the save buffer.

       D         Delete all characters from the current cursor position to the end of the line. The deleted characters shall  be
                 placed in the save buffer.

       [count]ymotion
                 Yank  (that is, copy) the characters from the current cursor position to the position resulting from the motion
                 command into the save buffer. A number count shall be applied to the motion  command.  If  the  motion  command
                 would  move toward the beginning of the command line, the character under the current cursor position shall not
                 be included in the set of yanked characters. If the motion command is y, the entire current command line  shall
                 be  yanked  into  the save buffer.  The current cursor position shall be unchanged. If the count is larger than
                 the number of characters between the current cursor position and the end of the command line toward  which  the
                 motion command would move the cursor, this shall not be considered an error; all of the remaining characters in
                 the aforementioned range shall be yanked.

       Y         Yank the characters from the current cursor position to the end of the line into the save buffer.  The  current
                 character position shall be unchanged.

       [count]p  Put  a  copy  of  the current contents of the save buffer after the current cursor position. The current cursor
                 position shall be advanced to the last character put from the save buffer. A  count  shall  indicate  how  many
                 copies of the save buffer shall be put.

       [count]P  Put  a  copy  of the current contents of the save buffer before the current cursor position. The current cursor
                 position shall be moved to the last character put from the save buffer. A count shall indicate how many  copies
                 of the save buffer shall be put.

       u         Undo the last command that changed the edit line. This operation shall not undo the copy of any command line to
                 the edit line.

       U         Undo all changes made to the edit line. This operation shall not undo the copy of any command line to the  edit
                 line.

       [count]k

       [count]−  Set  the current command line to be the countth previous command line in the shell command history. If count is
                 not specified, it shall default to 1. The cursor shall be positioned on the first character of the new command.
                 If a k or − command would retreat past the maximum number of commands in effect for this shell (affected by the
                 HISTSIZE environment variable), the terminal shall be alerted, and the command shall have no effect.

       [count]j

       [count]+  Set the current command line to be the countth next command line in the shell command history. If count is  not
                 specified,  it shall default to 1. The cursor shall be positioned on the first character of the new command. If
                 a j or + command advances past the edit line, the current command line shall be restored to the edit  line  and
                 the terminal shall be alerted.

       [number]G Set  the  current command line to be the oldest command line stored in the shell command history. With a number
                 number, set the current command line to be the command line number in the history. If command line number  does
                 not exist, the terminal shall be alerted and the command line shall not be changed.

       /pattern&amp;lt;newline&amp;gt;
                 Move  backwards  through  the command history, searching for the specified pattern, beginning with the previous
                 command line. Patterns use the pattern matching notation described in Section 2.13, Pattern Matching  Notation,
                 except that the '^' character shall have special meaning when it appears as the first character of pattern.  In
                 this case, the '^' is discarded and the characters after the '^' shall be matched only at the  beginning  of  a
                 line.  Commands  in  the  command  history shall be treated as strings, not as filenames. If the pattern is not
                 found, the current command line shall be unchanged and the terminal is alerted. If it is found  in  a  previous
                 line,  the current command line shall be set to that line and the cursor shall be set to the first character of
                 the new command line.

                 If pattern is empty, the last non-empty pattern provided to / or ?  shall be used. If there is no previous non-
                 empty pattern, the terminal shall be alerted and the current command line shall remain unchanged.

       ?pattern&amp;lt;newline&amp;gt;
                 Move forwards through the command history, searching for the specified pattern, beginning with the next command
                 line. Patterns use the pattern matching notation described in Section 2.13, Pattern Matching  Notation,  except
                 that  the  '^' character shall have special meaning when it appears as the first character of pattern.  In this
                 case, the '^' is discarded and the characters after the '^' shall be matched only at the beginning of  a  line.
                 Commands in the command history shall be treated as strings, not as filenames. If the pattern is not found, the
                 current command line shall be unchanged and the terminal alerted. If it is found in a following line, the  cur‐
                 rent  command  line shall be set to that line and the cursor shall be set to the fist character of the new com‐
                 mand line.

                 If pattern is empty, the last non-empty pattern provided to / or ?  shall be used. If there is no previous non-
                 empty pattern, the terminal shall be alerted and the current command line shall remain unchanged.

       n         Repeat  the  most recent / or ?  command. If there is no previous / or ?, the terminal shall be alerted and the
                 current command line shall remain unchanged.

       N         Repeat the most recent / or ?  command, reversing the direction of the search. If there is no previous / or  ?,
                 the terminal shall be alerted and the current command line shall remain unchanged.

<!-- a42f9355-e63b-4205-ac0b-0b19b24faf9d <=< ACCEPT -->EXIT STATUS
       The following exit values shall be returned:

           0   The script to be executed consisted solely of zero or more blank lines or comments, or both.

       1‐125   A non-interactive shell detected an error other than command_file not found, including but not limited to syntax,
               redirection, or variable assignment errors.

         127   A specified command_file could not be found by a non-interactive shell.<!-- ACCEPT >=> a42f9355-e63b-4205-ac0b-0b19b24faf9d -->

       Otherwise, the shell shall return the exit status of the last command it invoked or attempted to  invoke  (see  also  the
       exit utility in Section 2.14, Special Built-In Utilities).

CONSEQUENCES OF ERRORS
       See Section 2.8.1, Consequences of Shell Errors.

       The following sections are informative.

APPLICATION USAGE
       Standard  input  and standard error are the files that determine whether a shell is interactive when −i is not specified.
       For example:

           sh &amp;gt; file

       and:

           sh 2&amp;gt; file

       create interactive and non-interactive shells, respectively. Although both accept terminal input, the  results  of  error
       conditions  are different, as described in Section 2.8.1, Consequences of Shell Errors; in the second example a redirect‐
       ion error encountered by a special built-in utility aborts the shell.

       A conforming application must protect its first operand, if it starts with a &amp;lt;plus-sign&amp;gt;, by preceding it with  the  "−−"
       argument that denotes the end of the options.

       Applications  should  note that the standard PATH to the shell cannot be assumed to be either /bin/sh or /usr/bin/sh, and
       should be determined by interrogation of the PATH returned by getconf PATH, ensuring that the  returned  pathname  is  an
       absolute pathname and not a shell built-in.

       For example, to determine the location of the standard sh utility:

           command −v sh

       On some implementations this might return:

           /usr/xpg4/bin/sh

       Furthermore,  on  systems that support executable scripts (the "#!" construct), it is recommended that applications using
       executable scripts install them using getconf PATH to determine the shell pathname and update the "#!"  script  appropri‐
       ately as it is being installed (for example, with sed).  For example:

           #
           # Installation time script to install correct POSIX shell pathname
           #
           # Get list of paths to check
           #
           Sifs=$IFS
           Sifs_set=${IFS+y}
           IFS=:
           set −− $(getconf PATH)
           if [ "$Sifs_set" = y ]
           then
               IFS=$Sifs
           else
               unset IFS
           fi
           #
           # Check each path for 'sh'
           #
           for i
           do
               if [ −x "${i}"/sh ]
               then
                   Pshell=${i}/sh
               fi
           done
           #
           # This is the list of scripts to update. They should be of the
           # form '${name}.source' and will be transformed to '${name}'.
           # Each script should begin:
           #
           # #!INSTALLSHELLPATH
           #
           scripts="a b c"
           #
           # Transform each script
           #
           for i in ${scripts}
           do
               sed −e "s|INSTALLSHELLPATH|${Pshell}|" &amp;lt; ${i}.source &amp;gt; ${i}
           done

EXAMPLES
        1. Execute a shell command from a string:

               sh −c "cat myfile"

        2. Execute a shell script from a file in the current directory:

               sh my_shell_cmds

RATIONALE
       The sh utility and the set special built-in utility share a common set of options.

       The  name  IFS  was originally an abbreviation of ``Input Field Separators''; however, this name is misleading as the IFS
       characters are actually used as field terminators. The KornShell ignores the contents of IFS upon entry to the script.  A
       conforming  application  cannot rely on importing IFS.  One justification for this, beyond security considerations, is to
       assist possible future shell compilers. Allowing IFS to be imported from the environment prevents many optimizations that
       might otherwise be performed via dataflow analysis of the script itself.

       The text in the STDIN section about non-blocking reads concerns an instance of sh that has been invoked, probably by a C-
       language program, with standard input that has been opened using the O_NONBLOCK flag; see open() in the System Interfaces
       volume  of POSIX.1‐2008. If the shell did not reset this flag, it would immediately terminate because no input data would
       be available yet and that would be considered the same as end-of-file.

       The options associated with a restricted shell (command name rsh and the −r option) were excluded  because  the  standard
       developers  considered  that  the  implied  level  of security could not be achieved and they did not want to raise false
       expectations.

       On systems that support set-user-ID scripts, a historical trapdoor has been to link a script to the name −i.  When it  is
       called by a sequence such as:

           sh −

       or by:

           #! usr/bin/sh −

       the  historical  systems have assumed that no option letters follow.  Thus, this volume of POSIX.1‐2008 allows the single
       &amp;lt;hyphen&amp;gt; to mark the end of the options, in addition to the use of the regular "−−" argument, because it  was  considered
       that  the  older  practice  was so pervasive. An alternative approach is taken by the KornShell, where real and effective
       user/group IDs must match for an interactive shell; this behavior is specifically allowed by this volume of POSIX.1‐2008.

       Note:     There are other problems with set-user-ID scripts that the two approaches described here do not resolve.

       The initialization process for the history file can be dependent on the system start-up files, in that they  may  contain
       commands  that  effectively  preempt the user's settings of HISTFILE and HISTSIZE.  For example, function definition com‐
       mands are recorded in the history file, unless the set −o nolog option is set. If the system administrator includes func‐
       tion definitions in some system start-up file called before the ENV file, the history file is initialized before the user
       gets a chance to influence its characteristics. In some historical shells, the history file is initialized just after the
       ENV  file  has been processed. Therefore, it is implementation-defined whether changes made to HISTFILE after the history
       file has been initialized are effective.

       The default messages for the various MAIL-related messages are unspecified  because  they  vary  across  implementations.
       Typical messages are:

           "you have mail\n"

       or:

           "you have new mail\n"

       It  is  important  that  the descriptions of command line editing refer to the same shell as that in POSIX.1‐2008 so that
       interactive users can also be application programmers without having to deal with programmatic differences in  their  two
       environments. It is also essential that the utility name sh be specified because this explicit utility name is too firmly
       rooted in historical practice of application programs for it to change.

       Consideration was given to mandating a diagnostic message when attempting to set vi-mode on terminals that do not support
       command line editing. However, it is not historical practice for the shell to be cognizant of all terminal types and thus
       be able to detect inappropriate terminals in all cases.  Implementations are encouraged to  supply  diagnostics  in  this
       case whenever possible, rather than leaving the user in a state where editing commands work incorrectly.

       In  early  proposals, the KornShell-derived emacs mode of command line editing was included, even though the emacs editor
       itself was not. The community of emacs proponents was adamant that the full emacs editor not be standardized because they
       were  concerned  that  an  attempt to standardize this very powerful environment would encourage vendors to ship strictly
       conforming versions lacking the extensibility required by the community. The author of the original  emacs  program  also
       expressed  his  desire  to  omit the program. Furthermore, there were a number of historical systems that did not include
       emacs, or included it without supporting it, but there were very few that did not include  and  support  vi.   The  shell
       emacs  command line editing mode was finally omitted because it became apparent that the KornShell version and the editor
       being distributed with the GNU system had diverged in some respects. The author of emacs requested that the  POSIX  emacs
       mode  either  be  deleted or have a significant number of unspecified conditions. Although the KornShell author agreed to
       consider changes to bring the shell into alignment, the standard developers decided to defer specification at that  time.
       At the time, it was assumed that convergence on an acceptable definition would occur for a subsequent draft, but that has
       not happened, and there appears to be no impetus to do so. In any case, implementations are free to offer additional com‐
       mand line editing modes based on the exact models of editors their users are most comfortable with.

       Early proposals had the following list entry in vi Line Editing Insert Mode:

       \     If  followed  by the erase or kill character, that character shall be inserted into the input line.  Otherwise, the
             &amp;lt;backslash&amp;gt; itself shall be inserted into the input line.

       However, this is not actually a feature of sh command line editing insert mode, but one of some historical terminal  line
       drivers. Some conforming implementations continue to do this when the stty iexten flag is set.

       In  interactive  shells,  SIGTERM is ignored so that kill 0 does not kill the shell, and SIGINT is caught so that wait is
       interruptible. If the shell does not ignore SIGTTIN, SIGTTOU, and SIGTSTP signals when  it  is  interactive  and  the  −m
       option  is  not  in effect, these signals suspend the shell if it is not a session leader. If it is a session leader, the
       signals are discarded if they would stop the process, as required by the System Interfaces volume of  POSIX.1‐2008,  Sec‐
       tion 2.4.3, Signal Actions for orphaned process groups.

FUTURE DIRECTIONS
       None.

SEE ALSO
       Chapter 2, Shell Command Language, cd, echo, exit, fc, pwd, invalid, set, stty, test, trap, umask, vi

       The Base Definitions volume of POSIX.1‐2008, Chapter 8, Environment Variables, Section 12.2, Utility Syntax Guidelines

       The  System Interfaces volume of POSIX.1‐2008, dup(), exec, exit(), fork(), open(), pipe(), signal(), system(), ulimit(),
       umask(), wait()

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013  Edition,  Standard  for
       Information  Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7, Copy‐
       right (C) 2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This  is  POSIX.1-2008
       with  the  2013  Technical  Corrigendum 1 applied.) In the event of any discrepancy between this version and the original
       IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the  referee  document.  The  original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any  typographical  or formatting errors that appear in this page are most likely to have been introduced during the con‐
       version of the source files to man page format. To report such errors,  see  https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                        SH(1P)
SHIFT(1P)                                           POSIX Programmer's Manual                                          SHIFT(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->

NAME
       shift — shift positional parameters

SYNOPSIS
       shift [n]

DESCRIPTION
       The positional parameters shall be shifted. Positional parameter 1 shall be assigned the value of parameter (1+n), param‐
       eter 2 shall be assigned the value of parameter (2+n), and so on. The parameters represented by the numbers "$#" down  to
       "$#−n+1" shall be unset, and the parameter '#' is updated to reflect the new number of positional parameters.

       The  value  n shall be an unsigned decimal integer less than or equal to the value of the special parameter '#'.  If n is
       not given, it shall be assumed to be 1. If n is 0, the positional and special parameters are not changed.

OPTIONS
       None.

OPERANDS
       See the DESCRIPTION.

<!-- fe96d119-27ce-4a62-99a9-ff5840fe1a84 <=< ACCEPT -->STDIN
       Not used.

INPUT FILES
       None.

ENVIRONMENT VARIABLES
       None.

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       Not used.

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       None.

EXIT STATUS
       If the n operand is invalid or is greater than "$#", this may be considered a syntax error and  a  non-interactive  shell
       may  exit;  if  the  shell does not exit in this case, a non-zero exit status shall be returned. Otherwise, zero shall be
       returned.

CONSEQUENCES OF ERRORS
       Default.

       The following sections are informative.<!-- ACCEPT >=> fe96d119-27ce-4a62-99a9-ff5840fe1a84 -->

APPLICATION USAGE
       None.

EXAMPLES
       $ set a b c d e
       $ shift 2
       $ echo $*
       c d e

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       Section 2.14, Special Built-In Utilities

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013  Edition,  Standard  for
       Information  Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7, Copy‐
       right (C) 2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This  is  POSIX.1-2008
       with  the  2013  Technical  Corrigendum 1 applied.) In the event of any discrepancy between this version and the original
       IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the  referee  document.  The  original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any  typographical  or formatting errors that appear in this page are most likely to have been introduced during the con‐
       version of the source files to man page format. To report such errors,  see  https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                     SHIFT(1P)
SLEEP(1)                                                  User Commands                                                 SLEEP(1)

NAME
       sleep - delay for a specified amount of time

SYNOPSIS
       sleep NUMBER[SUFFIX]...
       sleep OPTION

DESCRIPTION
       Pause  for  NUMBER seconds.  SUFFIX may be 's' for seconds (the default), 'm' for minutes, 'h' for hours or 'd' for days.
       Unlike most implementations that require NUMBER be an integer, here NUMBER may be an  arbitrary  floating  point  number.
       Given two or more arguments, pause for the amount of time specified by the sum of their values.

       --help display this help and exit

       --version
              output version information and exit

AUTHOR
       Written by Jim Meyering and Paul Eggert.

REPORTING BUGS
       GNU coreutils online help: &amp;lt;http://www.gnu.org/software/coreutils/&amp;gt;
       Report sleep translation bugs to &amp;lt;http://translationproject.org/team/&amp;gt;

COPYRIGHT
       Copyright    ©    2016   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3   or   later
       &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       sleep(3)

       Full documentation at: &amp;lt;http://www.gnu.org/software/coreutils/sleep&amp;gt;
       or available locally via: info '(coreutils) sleep invocation'

GNU coreutils 8.26                                        November 2016                                                 SLEEP(1)
SORT(1)                                                   User Commands                                                  SORT(1)

NAME
       sort - sort lines of text files

SYNOPSIS
       sort [OPTION]... [FILE]...
       sort [OPTION]... --files0-from=F

DESCRIPTION
       Write sorted concatenation of all FILE(s) to standard output.

       With no FILE, or when FILE is -, read standard input.

       Mandatory arguments to long options are mandatory for short options too.  Ordering options:

       -b, --ignore-leading-blanks
              ignore leading blanks

       -d, --dictionary-order
              consider only blanks and alphanumeric characters

       -f, --ignore-case
              fold lower case to upper case characters

       -g, --general-numeric-sort
              compare according to general numerical value

       -i, --ignore-nonprinting
              consider only printable characters

       -M, --month-sort
              compare (unknown) &amp;lt; 'JAN' &amp;lt; ... &amp;lt; 'DEC'

       -h, --human-numeric-sort
              compare human readable numbers (e.g., 2K 1G)

       -n, --numeric-sort
              compare according to string numerical value

       -R, --random-sort
              shuffle, but group identical keys.  See shuf(1)

       --random-source=FILE
              get random bytes from FILE

       -r, --reverse
              reverse the result of comparisons

       --sort=WORD
              sort according to WORD: general-numeric -g, human-numeric -h, month -M, numeric -n, random -R, version -V

       -V, --version-sort
              natural sort of (version) numbers within text

       Other options:

       --batch-size=NMERGE
              merge at most NMERGE inputs at once; for more use temp files

       -c, --check, --check=diagnose-first
              check for sorted input; do not sort

       -C, --check=quiet, --check=silent
              like -c, but do not report first bad line

       --compress-program=PROG
              compress temporaries with PROG; decompress them with PROG -d

       --debug
              annotate the part of the line used to sort, and warn about questionable usage to stderr

       --files0-from=F
              read  input  from  the  files specified by NUL-terminated names in file F; If F is - then read names from standard
              input

       -k, --key=KEYDEF
              sort via a key; KEYDEF gives location and type

       -m, --merge
              merge already sorted files; do not sort

       -o, --output=FILE
              write result to FILE instead of standard output

       -s, --stable
              stabilize sort by disabling last-resort comparison

       -S, --buffer-size=SIZE
              use SIZE for main memory buffer

       -t, --field-separator=SEP
              use SEP instead of non-blank to blank transition

       -T, --temporary-directory=DIR
              use DIR for temporaries, not $TMPDIR or /tmp; multiple options specify multiple directories

       --parallel=N
              change the number of sorts run concurrently to N

       -u, --unique
              with -c, check for strict ordering; without -c, output only the first of an equal run

       -z, --zero-terminated
              line delimiter is NUL, not newline

       --help display this help and exit

       --version
              output version information and exit

       KEYDEF is F[.C][OPTS][,F[.C][OPTS]] for start and stop position, where F is a field number and C a character position  in
       the field; both are origin 1, and the stop position defaults to the line's end.  If neither -t nor -b is in effect, char‐
       acters in a field are counted from the beginning of the preceding whitespace.  OPTS is one or more single-letter ordering
       options  [bdfgiMhnRrV],  which override global ordering options for that key.  If no key is given, use the entire line as
       the key.  Use --debug to diagnose incorrect key usage.

       SIZE may be followed by the following multiplicative suffixes: % 1% of memory, b 1, K 1024 (default), and so on for M, G,
       T, P, E, Z, Y.

       ***  WARNING  ***  The  locale specified by the environment affects sort order.  Set LC_ALL=C to get the traditional sort
       order that uses native byte values.

AUTHOR
       Written by Mike Haertel and Paul Eggert.

REPORTING BUGS
       GNU coreutils online help: &amp;lt;http://www.gnu.org/software/coreutils/&amp;gt;
       Report sort translation bugs to &amp;lt;http://translationproject.org/team/&amp;gt;

COPYRIGHT
       Copyright   ©   2016   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3    or    later
       &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       shuf(1), uniq(1)

       Full documentation at: &amp;lt;http://www.gnu.org/software/coreutils/sort&amp;gt;
       or available locally via: info '(coreutils) sort invocation'

GNU coreutils 8.26                                        November 2016                                                  SORT(1)
SPLIT(1)                                                  User Commands                                                 SPLIT(1)

NAME
       split - split a file into pieces

SYNOPSIS
       split [OPTION]... [FILE [PREFIX]]

DESCRIPTION
       Output pieces of FILE to PREFIXaa, PREFIXab, ...; default size is 1000 lines, and default PREFIX is 'x'.

       With no FILE, or when FILE is -, read standard input.

       Mandatory arguments to long options are mandatory for short options too.

       -a, --suffix-length=N
              generate suffixes of length N (default 2)

       --additional-suffix=SUFFIX
              append an additional SUFFIX to file names

       -b, --bytes=SIZE
              put SIZE bytes per output file

       -C, --line-bytes=SIZE
              put at most SIZE bytes of records per output file

       -d     use numeric suffixes starting at 0, not alphabetic

       --numeric-suffixes[=FROM]
              same as -d, but allow setting the start value

       -e, --elide-empty-files
              do not generate empty output files with '-n'

       --filter=COMMAND
              write to shell COMMAND; file name is $FILE

       -l, --lines=NUMBER
              put NUMBER lines/records per output file

       -n, --number=CHUNKS
              generate CHUNKS output files; see explanation below

       -t, --separator=SEP
              use SEP instead of newline as the record separator; '\0' (zero) specifies the NUL character

       -u, --unbuffered
              immediately copy input to output with '-n r/...'

       --verbose
              print a diagnostic just before each output file is opened

       --help display this help and exit

       --version
              output version information and exit

       The  SIZE argument is an integer and optional unit (example: 10K is 10*1024).  Units are K,M,G,T,P,E,Z,Y (powers of 1024)
       or KB,MB,... (powers of 1000).

   CHUNKS may be:
       N      split into N files based on size of input

       K/N    output Kth of N to stdout

       l/N    split into N files without splitting lines/records

       l/K/N  output Kth of N to stdout without splitting lines/records

       r/N    like 'l' but use round robin distribution

       r/K/N  likewise but only output Kth of N to stdout

AUTHOR
       Written by Torbjorn Granlund and Richard M. Stallman.

REPORTING BUGS
       GNU coreutils online help: &amp;lt;http://www.gnu.org/software/coreutils/&amp;gt;
       Report split translation bugs to &amp;lt;http://translationproject.org/team/&amp;gt;

COPYRIGHT
       Copyright   ©   2016   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3    or    later
       &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       Full documentation at: &amp;lt;http://www.gnu.org/software/coreutils/split&amp;gt;
       or available locally via: info '(coreutils) split invocation'

GNU coreutils 8.26                                        November 2016                                                 SPLIT(1)
STRINGS(1)                                            GNU Development Tools                                           STRINGS(1)

NAME
       strings - print the strings of printable characters in files.

SYNOPSIS
       strings [-afovV] [-min-len]
               [-n min-len] [--bytes=min-len]
               [-t radix] [--radix=radix]
               [-e encoding] [--encoding=encoding]
               [-] [--all] [--print-file-name]
               [-T bfdname] [--target=bfdname]
               [-w] [--include-all-whitespace]
               [-s] [--output-separatorsep_string]
               [--help] [--version] file...

DESCRIPTION
       For each file given, GNU strings prints the printable character sequences that are at least 4 characters long (or the
       number given with the options below) and are followed by an unprintable character.

       Depending upon how the strings program was configured it will default to either displaying all the printable sequences
       that it can find in each file, or only those sequences that are in loadable, initialized data sections.  If the file type
       in unrecognizable, or if strings is reading from stdin then it will always display all of the printable sequences that it
       can find.

       For backwards compatibility any file that occurs after a command line option of just - will also be scanned in full,
       regardless of the presence of any -d option.

       strings is mainly useful for determining the contents of non-text files.

OPTIONS
       -a
       --all
       -   Scan the whole file, regardless of what sections it contains or whether those sections are loaded or initialized.
           Normally this is the default behaviour, but strings can be configured so that the -d is the default instead.

           The - option is position dependent and forces strings to perform full scans of any file that is mentioned after the -
           on the command line, even if the -d option has been specified.

       -d
       --data
           Only print strings from initialized, loaded data sections in the file.  This may reduce the amount of garbage in the
           output, but it also exposes the strings program to any security flaws that may be present in the BFD library used to
           scan and load sections.  Strings can be configured so that this option is the default behaviour.  In such cases the
           -a option can be used to avoid using the BFD library and instead just print all of the strings found in the file.

       -f
       --print-file-name
           Print the name of the file before each string.

       --help
           Print a summary of the program usage on the standard output and exit.

       -min-len
       -n min-len
       --bytes=min-len
           Print sequences of characters that are at least min-len characters long, instead of the default 4.

       -o  Like -t o.  Some other versions of strings have -o act like -t d instead.  Since we can not be compatible with both
           ways, we simply chose one.

       -t radix
       --radix=radix
           Print the offset within the file before each string.  The single character argument specifies the radix of the
           offset---o for octal, x for hexadecimal, or d for decimal.

       -e encoding
       --encoding=encoding
           Select the character encoding of the strings that are to be found.  Possible values for encoding are: s =
           single-7-bit-byte characters (ASCII, ISO 8859, etc., default), S = single-8-bit-byte characters, b = 16-bit
           bigendian, l = 16-bit littleendian, B = 32-bit bigendian, L = 32-bit littleendian.  Useful for finding wide character
           strings. (l and b apply to, for example, Unicode UTF-16/UCS-2 encodings).

       -T bfdname
       --target=bfdname
           Specify an object code format other than your system's default format.

       -v
       -V
       --version
           Print the program version number on the standard output and exit.

       -w
       --include-all-whitespace
           By default tab and space characters are included in the strings that are displayed, but other whitespace characters,
           such a newlines and carriage returns, are not.  The -w option changes this so that all whitespace characters are
           considered to be part of a string.

       -s
       --output-separator
           By default, output strings are delimited by a new-line. This option allows you to supply any string to be used as the
           output record separator.  Useful with --include-all-whitespace where strings may contain new-lines internally.

       @file
           Read command-line options from file.  The options read are inserted in place of the original @file option.  If file
           does not exist, or cannot be read, then the option will be treated literally, and not removed.

           Options in file are separated by whitespace.  A whitespace character may be included in an option by surrounding the
           entire option in either single or double quotes.  Any character (including a backslash) may be included by prefixing
           the character to be included with a backslash.  The file may itself contain additional @file options; any such
           options will be processed recursively.

SEE ALSO
       ar(1), nm(1), objdump(1), ranlib(1), readelf(1) and the Info entries for binutils.

COPYRIGHT
       Copyright (c) 1991-2016 Free Software Foundation, Inc.

       Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation
       License, Version 1.3 or any later version published by the Free Software Foundation; with no Invariant Sections, with no
       Front-Cover Texts, and with no Back-Cover Texts.  A copy of the license is included in the section entitled "GNU Free
       Documentation License".

binutils-2.27                                              2016-08-06                                                 STRINGS(1)
STRIP(1)                                              GNU Development Tools                                             STRIP(1)

NAME
       strip - Discard symbols from object files.

SYNOPSIS
       strip [-F bfdname |--target=bfdname]
             [-I bfdname |--input-target=bfdname]
             [-O bfdname |--output-target=bfdname]
             [-s|--strip-all]
             [-S|-g|-d|--strip-debug]
             [--strip-dwo]
             [-K symbolname |--keep-symbol=symbolname]
             [-N symbolname |--strip-symbol=symbolname]
             [-w|--wildcard]
             [-x|--discard-all] [-X |--discard-locals]
             [-R sectionname |--remove-section=sectionname]
             [-o file] [-p|--preserve-dates]
             [-D|--enable-deterministic-archives]
             [-U|--disable-deterministic-archives]
             [--keep-file-symbols]
             [--only-keep-debug]
             [-v |--verbose] [-V|--version]
             [--help] [--info]
             objfile...

DESCRIPTION
       GNU strip discards all symbols from object files objfile.  The list of object files may include archives.  At least one
       object file must be given.

       strip modifies the files named in its argument, rather than writing modified copies under different names.

OPTIONS
       -F bfdname
       --target=bfdname
           Treat the original objfile as a file with the object code format bfdname, and rewrite it in the same format.

       --help
           Show a summary of the options to strip and exit.

       --info
           Display a list showing all architectures and object formats available.

       -I bfdname
       --input-target=bfdname
           Treat the original objfile as a file with the object code format bfdname.

       -O bfdname
       --output-target=bfdname
           Replace objfile with a file in the output format bfdname.

       -R sectionname
       --remove-section=sectionname
           Remove any section named sectionname from the output file, in addition to whatever sections would otherwise be
           removed.  This option may be given more than once.  Note that using this option inappropriately may make the output
           file unusable.  The wildcard character * may be given at the end of sectionname.  If so, then any section starting
           with sectionname will be removed.

       -s
       --strip-all
           Remove all symbols.

       -g
       -S
       -d
       --strip-debug
           Remove debugging symbols only.

       --strip-dwo
           Remove the contents of all DWARF .dwo sections, leaving the remaining debugging sections and all symbols intact.  See
           the description of this option in the objcopy section for more information.

       --strip-unneeded
           Remove all symbols that are not needed for relocation processing.

       -K symbolname
       --keep-symbol=symbolname
           When stripping symbols, keep symbol symbolname even if it would normally be stripped.  This option may be given more
           than once.

       -N symbolname
       --strip-symbol=symbolname
           Remove symbol symbolname from the source file. This option may be given more than once, and may be combined with
           strip options other than -K.

       -o file
           Put the stripped output in file, rather than replacing the existing file.  When this argument is used, only one
           objfile argument may be specified.

       -p
       --preserve-dates
           Preserve the access and modification dates of the file.

       -D
       --enable-deterministic-archives
           Operate in deterministic mode.  When copying archive members and writing the archive index, use zero for UIDs, GIDs,
           timestamps, and use consistent file modes for all files.

           If binutils was configured with --enable-deterministic-archives, then this mode is on by default.  It can be disabled
           with the -U option, below.

       -U
       --disable-deterministic-archives
           Do not operate in deterministic mode.  This is the inverse of the -D option, above: when copying archive members and
           writing the archive index, use their actual UID, GID, timestamp, and file mode values.

           This is the default unless binutils was configured with --enable-deterministic-archives.

       -w
       --wildcard
           Permit regular expressions in symbolnames used in other command line options.  The question mark (?), asterisk (*),
           backslash (\) and square brackets ([]) operators can be used anywhere in the symbol name.  If the first character of
           the symbol name is the exclamation point (!) then the sense of the switch is reversed for that symbol.  For example:

                     -w -K !foo -K fo*

           would cause strip to only keep symbols that start with the letters "fo", but to discard the symbol "foo".

       -x
       --discard-all
           Remove non-global symbols.

       -X
       --discard-locals
           Remove compiler-generated local symbols.  (These usually start with L or ..)

       --keep-file-symbols
           When stripping a file, perhaps with --strip-debug or --strip-unneeded, retain any symbols specifying source file
           names, which would otherwise get stripped.

       --only-keep-debug
           Strip a file, emptying the contents of any sections that would not be stripped by --strip-debug and leaving the
           debugging sections intact.  In ELF files, this preserves all the note sections in the output as well.

           Note - the section headers of the stripped sections are preserved, including their sizes, but the contents of the
           section are discarded.  The section headers are preserved so that other tools can match up the debuginfo file with
           the real executable, even if that executable has been relocated to a different address space.

           The intention is that this option will be used in conjunction with --add-gnu-debuglink to create a two part
           executable.  One a stripped binary which will occupy less space in RAM and in a distribution and the second a
           debugging information file which is only needed if debugging abilities are required.  The suggested procedure to
           create these files is as follows:

           1.&amp;lt;Link the executable as normal.  Assuming that is is called&amp;gt;
               "foo" then...

           1.&amp;lt;Run "objcopy --only-keep-debug foo foo.dbg" to&amp;gt;
               create a file containing the debugging info.

           1.&amp;lt;Run "objcopy --strip-debug foo" to create a&amp;gt;
               stripped executable.

           1.&amp;lt;Run "objcopy --add-gnu-debuglink=foo.dbg foo"&amp;gt;
               to add a link to the debugging info into the stripped executable.

           Note---the choice of ".dbg" as an extension for the debug info file is arbitrary.  Also the "--only-keep-debug" step
           is optional.  You could instead do this:

           1.&amp;lt;Link the executable as normal.&amp;gt;
           1.&amp;lt;Copy "foo" to "foo.full"&amp;gt;
           1.&amp;lt;Run "strip --strip-debug foo"&amp;gt;
           1.&amp;lt;Run "objcopy --add-gnu-debuglink=foo.full foo"&amp;gt;

           i.e., the file pointed to by the --add-gnu-debuglink can be the full executable.  It does not have to be a file
           created by the --only-keep-debug switch.

           Note---this switch is only intended for use on fully linked files.  It does not make sense to use it on object files
           where the debugging information may be incomplete.  Besides the gnu_debuglink feature currently only supports the
           presence of one filename containing debugging information, not multiple filenames on a one-per-object-file basis.

       -V
       --version
           Show the version number for strip.

       -v
       --verbose
           Verbose output: list all object files modified.  In the case of archives, strip -v lists all members of the archive.

       @file
           Read command-line options from file.  The options read are inserted in place of the original @file option.  If file
           does not exist, or cannot be read, then the option will be treated literally, and not removed.

           Options in file are separated by whitespace.  A whitespace character may be included in an option by surrounding the
           entire option in either single or double quotes.  Any character (including a backslash) may be included by prefixing
           the character to be included with a backslash.  The file may itself contain additional @file options; any such
           options will be processed recursively.

SEE ALSO
       the Info entries for binutils.

COPYRIGHT
       Copyright (c) 1991-2016 Free Software Foundation, Inc.

       Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation
       License, Version 1.3 or any later version published by the Free Software Foundation; with no Invariant Sections, with no
       Front-Cover Texts, and with no Back-Cover Texts.  A copy of the license is included in the section entitled "GNU Free
       Documentation License".

binutils-2.27                                              2016-08-06                                                   STRIP(1)
STTY(1)                                                   User Commands                                                  STTY(1)

NAME
       stty - change and print terminal line settings

SYNOPSIS
       stty [-F DEVICE | --file=DEVICE] [SETTING]...
       stty [-F DEVICE | --file=DEVICE] [-a|--all]
       stty [-F DEVICE | --file=DEVICE] [-g|--save]

DESCRIPTION
       Print or change terminal characteristics.

       Mandatory arguments to long options are mandatory for short options too.

       -a, --all
              print all current settings in human-readable form

       -g, --save
              print all current settings in a stty-readable form

       -F, --file=DEVICE
              open and use the specified DEVICE instead of stdin

       --help display this help and exit

       --version
              output version information and exit

       Optional  -  before SETTING indicates negation.  An * marks non-POSIX settings.  The underlying system defines which set‐
       tings are available.

   Special characters:
       * discard CHAR
              CHAR will toggle discarding of output

       eof CHAR
              CHAR will send an end of file (terminate the input)

       eol CHAR
              CHAR will end the line

       * eol2 CHAR
              alternate CHAR for ending the line

       erase CHAR
              CHAR will erase the last character typed

       intr CHAR
              CHAR will send an interrupt signal

       kill CHAR
              CHAR will erase the current line

       * lnext CHAR
              CHAR will enter the next character quoted

       quit CHAR
              CHAR will send a quit signal

       * rprnt CHAR
              CHAR will redraw the current line

       start CHAR
              CHAR will restart the output after stopping it

       stop CHAR
              CHAR will stop the output

       susp CHAR
              CHAR will send a terminal stop signal

       * swtch CHAR
              CHAR will switch to a different shell layer

       * werase CHAR
              CHAR will erase the last word typed

   Special settings:
       N      set the input and output speeds to N bauds

       * cols N
              tell the kernel that the terminal has N columns

       * columns N
              same as cols N

       * [-]drain
              wait for transmission before applying settings (on by default)

       ispeed N
              set the input speed to N

       * line N
              use line discipline N

       min N  with -icanon, set N characters minimum for a completed read

       ospeed N
              set the output speed to N

       * rows N
              tell the kernel that the terminal has N rows

       * size print the number of rows and columns according to the kernel

       speed  print the terminal speed

       time N with -icanon, set read timeout of N tenths of a second

   Control settings:
       [-]clocal
              disable modem control signals

       [-]cread
              allow input to be received

       * [-]crtscts
              enable RTS/CTS handshaking

       csN    set character size to N bits, N in [5..8]

       [-]cstopb
              use two stop bits per character (one with '-')

       [-]hup send a hangup signal when the last process closes the tty

       [-]hupcl
              same as [-]hup

       [-]parenb
              generate parity bit in output and expect parity bit in input

       [-]parodd
              set odd parity (or even parity with '-')

       * [-]cmspar
              use "stick" (mark/space) parity

   Input settings:
       [-]brkint
              breaks cause an interrupt signal

       [-]icrnl
              translate carriage return to newline

       [-]ignbrk
              ignore break characters

       [-]igncr
              ignore carriage return

       [-]ignpar
              ignore characters with parity errors

       * [-]imaxbel
              beep and do not flush a full input buffer on a character

       [-]inlcr
              translate newline to carriage return

       [-]inpck
              enable input parity checking

       [-]istrip
              clear high (8th) bit of input characters

       * [-]iutf8
              assume input characters are UTF-8 encoded

       * [-]iuclc
              translate uppercase characters to lowercase

       * [-]ixany
              let any character restart output, not only start character

       [-]ixoff
              enable sending of start/stop characters

       [-]ixon
              enable XON/XOFF flow control

       [-]parmrk
              mark parity errors (with a 255-0-character sequence)

       [-]tandem
              same as [-]ixoff

   Output settings:
       * bsN  backspace delay style, N in [0..1]

       * crN  carriage return delay style, N in [0..3]

       * ffN  form feed delay style, N in [0..1]

       * nlN  newline delay style, N in [0..1]

       * [-]ocrnl
              translate carriage return to newline

       * [-]ofdel
              use delete characters for fill instead of NUL characters

       * [-]ofill
              use fill (padding) characters instead of timing for delays

       * [-]olcuc
              translate lowercase characters to uppercase

       * [-]onlcr
              translate newline to carriage return-newline

       * [-]onlret
              newline performs a carriage return

       * [-]onocr
              do not print carriage returns in the first column

       [-]opost
              postprocess output

       * tabN horizontal tab delay style, N in [0..3]

       * tabs same as tab0

       * -tabs
              same as tab3

       * vtN  vertical tab delay style, N in [0..1]

   Local settings:
       [-]crterase
              echo erase characters as backspace-space-backspace

       * crtkill
              kill all line by obeying the echoprt and echoe settings

       * -crtkill
              kill all line by obeying the echoctl and echok settings

       * [-]ctlecho
              echo control characters in hat notation ('^c')

       [-]echo
              echo input characters

       * [-]echoctl
              same as [-]ctlecho

       [-]echoe
              same as [-]crterase

       [-]echok
              echo a newline after a kill character

       * [-]echoke
              same as [-]crtkill

       [-]echonl
              echo newline even if not echoing other characters

       * [-]echoprt
              echo erased characters backward, between '\' and '/'

       * [-]extproc
              enable "LINEMODE"; useful with high latency links

       * [-]flusho
              discard output

       [-]icanon
              enable special characters: erase, kill, werase, rprnt

       [-]iexten
              enable non-POSIX special characters

       [-]isig
              enable interrupt, quit, and suspend special characters

       [-]noflsh
              disable flushing after interrupt and quit special characters

       * [-]prterase
              same as [-]echoprt

       * [-]tostop
              stop background jobs that try to write to the terminal

       * [-]xcase
              with icanon, escape with '\' for uppercase characters

   Combination settings:
       * [-]LCASE
              same as [-]lcase

       cbreak same as -icanon

       -cbreak
              same as icanon

       cooked same as brkint ignpar istrip icrnl ixon opost isig icanon, eof and eol characters to their default values

       -cooked
              same as raw

       crt    same as echoe echoctl echoke

       dec    same as echoe echoctl echoke -ixany intr ^c erase 0177 kill ^u

       * [-]decctlq
              same as [-]ixany

       ek     erase and kill characters to their default values

       evenp  same as parenb -parodd cs7

       -evenp same as -parenb cs8

       * [-]lcase
              same as xcase iuclc olcuc

       litout same as -parenb -istrip -opost cs8

       -litout
              same as parenb istrip opost cs7

       nl     same as -icrnl -onlcr

       -nl    same as icrnl -inlcr -igncr onlcr -ocrnl -onlret

       oddp   same as parenb parodd cs7

       -oddp  same as -parenb cs8

       [-]parity
              same as [-]evenp

       pass8  same as -parenb -istrip cs8

       -pass8 same as parenb istrip cs7

       raw    same as -ignbrk -brkint -ignpar -parmrk -inpck -istrip -inlcr -igncr -icrnl  -ixon  -ixoff  -icanon  -opost  -isig
              -iuclc -ixany -imaxbel -xcase min 1 time 0

       -raw   same as cooked

       sane   same  as  cread  -ignbrk  brkint  -inlcr -igncr icrnl icanon iexten echo echoe echok -echonl -noflsh -ixoff -iutf8
              -iuclc -ixany imaxbel -xcase -olcuc -ocrnl opost -ofill onlcr -onocr -onlret nl0 cr0 tab0 bs0 vt0 ff0 isig -tostop
              -ofdel -echoprt echoctl echoke -extproc -flusho, all special characters to their default values

       Handle  the  tty  line connected to standard input.  Without arguments, prints baud rate, line discipline, and deviations
       from stty sane.  In settings, CHAR is taken literally, or coded as in ^c, 0x37, 0177 or 127; special values ^-  or  undef
       used to disable special characters.

AUTHOR
       Written by David MacKenzie.

REPORTING BUGS
       GNU coreutils online help: &amp;lt;http://www.gnu.org/software/coreutils/&amp;gt;
       Report stty translation bugs to &amp;lt;http://translationproject.org/team/&amp;gt;

COPYRIGHT
       Copyright    ©    2016   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3   or   later
       &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       Full documentation at: &amp;lt;http://www.gnu.org/software/coreutils/stty&amp;gt;
       or available locally via: info '(coreutils) stty invocation'

GNU coreutils 8.26                                        November 2016                                                  STTY(1)
tabs(1)                                              General Commands Manual                                             tabs(1)

NAME
       tabs - set tabs on a terminal

SYNOPSIS
       tabs [options]] [tabstop-list]

DESCRIPTION
       The  tabs program clears and sets tab-stops on the terminal.  This uses the terminfo clear_all_tabs and set_tab capabili‐
       ties.  If either is absent, tabs is unable to clear/set tab-stops.  The terminal should be configured to use  hard  tabs,
       e.g.,

              stty tab0

OPTIONS
   General Options
       -Tname
            Tell  tabs  which  terminal type to use.  If this option is not given, tabs will use the $TERM environment variable.
            If that is not set, it will use the ansi+tabs entry.

       -d   The debugging option shows a ruler line, followed by two data lines.  The first data line shows  the  expected  tab-
            stops marked with asterisks.  The second data line shows the actual tab-stops, marked with asterisks.

       -n   This option tells tabs to check the options and run any debugging option, but not to modify the terminal settings.

       -V   reports the version of ncurses which was used in this program, and exits.

       The  tabs  program processes a single list of tab stops.  The last option to be processed which defines a list is the one
       that determines the list to be processed.

   Implicit Lists
       Use a single number as an option, e.g., "-5" to set tabs at the given interval (in this case 1, 6,  11,  16,  21,  etc.).
       Tabs are repeated up to the right margin of the screen.

       Use "-0" to clear all tabs.

       Use "-8" to set tabs to the standard interval.

   Explicit Lists
       An  explicit list can be defined after the options (this does not use a "-").  The values in the list must be in increas‐
       ing numeric order, and greater than zero.  They are separated by a comma or a blank, for example,

              tabs 1,6,11,16,21
              tabs 1 6 11 16 21
       Use a '+' to treat a number as an increment relative to the previous value, e.g.,

              tabs 1,+5,+5,+5,+5
       which is equivalent to the 1,6,11,16,21 example.

   Predefined Tab-Stops
       X/Open defines several predefined lists of tab stops.

       -a   Assembler, IBM S/370, first format

       -a2  Assembler, IBM S/370, second format

       -c   COBOL, normal format

       -c2  COBOL compact format

       -c3  COBOL compact format extended

       -f   FORTRAN

       -p   PL/I

       -s   SNOBOL

       -u   UNIVAC 1100 Assembler

PORTABILITY
       IEEE Std 1003.1/The Open Group  Base Specifications Issue 7 (POSIX.1-2008) describes a tabs utility.  However

       ·   This standard describes a +m option, to set a terminal's left-margin.  Very few of the entries in the terminal  data‐
           base provide this capability.

       ·   There is no counterpart in X/Open Curses Issue 7 for this utility, unlike tput(1).

       The -d (debug) and -n (no-op) options are extensions not provided by other implementations.

       Documentation  for  other  implementations states that there is a limit on the number of tab stops.  While some terminals
       may not accept an arbitrary number of tab stops, this implementation will attempt to set tab stops up to the right margin
       of the screen, if the given list happens to be that long.

SEE ALSO
       tset(1), infocmp(1M), curses(3X), terminfo(5).

       This describes ncurses version 6.0 (patch 20161224).

                                                                                                                         tabs(1)
TAIL(1)                                                   User Commands                                                  TAIL(1)

NAME
       tail - output the last part of files

SYNOPSIS
       tail [OPTION]... [FILE]...

DESCRIPTION
       Print  the last 10 lines of each FILE to standard output.  With more than one FILE, precede each with a header giving the
       file name.

       With no FILE, or when FILE is -, read standard input.

       Mandatory arguments to long options are mandatory for short options too.

       -c, --bytes=[+]NUM
              output the last NUM bytes; or use -c +NUM to output starting with byte NUM of each file

       -f, --follow[={name|descriptor}]
              output appended data as the file grows;

              an absent option argument means 'descriptor'

       -F     same as --follow=name --retry

       -n, --lines=[+]NUM
              output the last NUM lines, instead of the last 10; or use -n +NUM to output starting with line NUM

       --max-unchanged-stats=N
              with --follow=name, reopen a FILE which has not

              changed size after N (default 5) iterations to see if it has been unlinked or renamed (this is the usual  case  of
              rotated log files); with inotify, this option is rarely useful

       --pid=PID
              with -f, terminate after process ID, PID dies

       -q, --quiet, --silent
              never output headers giving file names

       --retry
              keep trying to open a file if it is inaccessible

       -s, --sleep-interval=N
              with  -f,  sleep  for  approximately  N  seconds (default 1.0) between iterations; with inotify and --pid=P, check
              process P at least once every N seconds

       -v, --verbose
              always output headers giving file names

       -z, --zero-terminated
              line delimiter is NUL, not newline

       --help display this help and exit

       --version
              output version information and exit

       NUM may have a multiplier suffix: b 512, kB 1000, K 1024, MB 1000*1000, M 1024*1024, GB 1000*1000*1000, G 1024*1024*1024,
       and so on for T, P, E, Z, Y.

       With  --follow  (-f), tail defaults to following the file descriptor, which means that even if a tail'ed file is renamed,
       tail will continue to track its end.  This default behavior is not desirable when you really want  to  track  the  actual
       name  of  the  file,  not the file descriptor (e.g., log rotation).  Use --follow=name in that case.  That causes tail to
       track the named file in a way that accommodates renaming, removal and creation.

AUTHOR
       Written by Paul Rubin, David MacKenzie, Ian Lance Taylor, and Jim Meyering.

REPORTING BUGS
       GNU coreutils online help: &amp;lt;http://www.gnu.org/software/coreutils/&amp;gt;
       Report tail translation bugs to &amp;lt;http://translationproject.org/team/&amp;gt;

COPYRIGHT
       Copyright   ©   2016   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3    or    later
       &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       head(1)

       Full documentation at: &amp;lt;http://www.gnu.org/software/coreutils/tail&amp;gt;
       or available locally via: info '(coreutils) tail invocation'

GNU coreutils 8.26                                        November 2016                                                  TAIL(1)
TALK(1)                                                   User Commands                                                  TALK(1)

NAME
       talk - Talk client

SYNOPSIS
       talk [OPTION...] person [ttyname]

DESCRIPTION
       Talk to another user.

       -?, --help
              give this help list

       --usage
              give a short usage message

       -V, --version
              print program version

AUTHOR
       Written by Kipp Hickman, Clem Cole, and Peter Moore.

REPORTING BUGS
       Report bugs to &amp;lt;bug-inetutils@gnu.org&amp;gt;.

COPYRIGHT
       Copyright    ©    2015   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3   or   later
       &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       talkd(1)

       The full documentation for talk is maintained as a Texinfo manual.  If the info and talk programs are properly  installed
       at your site, the command

              info talk

       should give you access to the complete manual.

GNU inetutils 1.9.2.67-d7a1                                 May 2015                                                     TALK(1)
TEE(1)                                                    User Commands                                                   TEE(1)

NAME
       tee - read from standard input and write to standard output and files

SYNOPSIS
       tee [OPTION]... [FILE]...

DESCRIPTION
       Copy standard input to each FILE, and also to standard output.

       -a, --append
              append to the given FILEs, do not overwrite

       -i, --ignore-interrupts
              ignore interrupt signals

       -p     diagnose errors writing to non pipes

       --output-error[=MODE]
              set behavior on write error.  See MODE below

       --help display this help and exit

       --version
              output version information and exit

   MODE determines behavior with write errors on the outputs:
       'warn' diagnose errors writing to any output

       'warn-nopipe'
              diagnose errors writing to any output not a pipe

       'exit' exit on error writing to any output

       'exit-nopipe'
              exit on error writing to any output not a pipe

       The  default  MODE for the -p option is 'warn-nopipe'.  The default operation when --output-error is not specified, is to
       exit immediately on error writing to a pipe, and diagnose errors writing to non pipe outputs.

AUTHOR
       Written by Mike Parker, Richard M. Stallman, and David MacKenzie.

REPORTING BUGS
       GNU coreutils online help: &amp;lt;http://www.gnu.org/software/coreutils/&amp;gt;
       Report tee translation bugs to &amp;lt;http://translationproject.org/team/&amp;gt;

COPYRIGHT
       Copyright   ©   2016   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3    or    later
       &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       Full documentation at: &amp;lt;http://www.gnu.org/software/coreutils/tee&amp;gt;
       or available locally via: info '(coreutils) tee invocation'

GNU coreutils 8.26                                        November 2016                                                   TEE(1)
TEST(1)                                                   User Commands                                                  TEST(1)

NAME
       test - check file types and compare values

SYNOPSIS
       test EXPRESSION
       test

       [ EXPRESSION ]
       [ ]
       [ OPTION

DESCRIPTION
       Exit with the status determined by EXPRESSION.

       --help display this help and exit

       --version
              output version information and exit

       An omitted EXPRESSION defaults to false.  Otherwise, EXPRESSION is true or false and sets exit status.  It is one of:

       ( EXPRESSION )
              EXPRESSION is true

       ! EXPRESSION
              EXPRESSION is false

       EXPRESSION1 -a EXPRESSION2
              both EXPRESSION1 and EXPRESSION2 are true

       EXPRESSION1 -o EXPRESSION2
              either EXPRESSION1 or EXPRESSION2 is true

       -n STRING
              the length of STRING is nonzero

       STRING equivalent to -n STRING

       -z STRING
              the length of STRING is zero

       STRING1 = STRING2
              the strings are equal

       STRING1 != STRING2
              the strings are not equal

       INTEGER1 -eq INTEGER2
              INTEGER1 is equal to INTEGER2

       INTEGER1 -ge INTEGER2
              INTEGER1 is greater than or equal to INTEGER2

       INTEGER1 -gt INTEGER2
              INTEGER1 is greater than INTEGER2

       INTEGER1 -le INTEGER2
              INTEGER1 is less than or equal to INTEGER2

       INTEGER1 -lt INTEGER2
              INTEGER1 is less than INTEGER2

       INTEGER1 -ne INTEGER2
              INTEGER1 is not equal to INTEGER2

       FILE1 -ef FILE2
              FILE1 and FILE2 have the same device and inode numbers

       FILE1 -nt FILE2
              FILE1 is newer (modification date) than FILE2

       FILE1 -ot FILE2
              FILE1 is older than FILE2

       -b FILE
              FILE exists and is block special

       -c FILE
              FILE exists and is character special

       -d FILE
              FILE exists and is a directory

       -e FILE
              FILE exists

       -f FILE
              FILE exists and is a regular file

       -g FILE
              FILE exists and is set-group-ID

       -G FILE
              FILE exists and is owned by the effective group ID

       -h FILE
              FILE exists and is a symbolic link (same as -L)

       -k FILE
              FILE exists and has its sticky bit set

       -L FILE
              FILE exists and is a symbolic link (same as -h)

       -O FILE
              FILE exists and is owned by the effective user ID

       -p FILE
              FILE exists and is a named pipe

       -r FILE
              FILE exists and read permission is granted

       -s FILE
              FILE exists and has a size greater than zero

       -S FILE
              FILE exists and is a socket

       -t FD  file descriptor FD is opened on a terminal

       -u FILE
              FILE exists and its set-user-ID bit is set

       -w FILE
              FILE exists and write permission is granted

       -x FILE
              FILE exists and execute (or search) permission is granted

       Except  for  -h  and  -L,  all FILE-related tests dereference symbolic links.  Beware that parentheses need to be escaped
       (e.g., by backslashes) for shells.  INTEGER may also be -l STRING, which evaluates to the length of STRING.

       NOTE: Binary -a and -o are inherently ambiguous.  Use 'test EXPR1 &amp;&amp; test EXPR2' or 'test EXPR1 || test EXPR2' instead.

       NOTE: [ honors the --help and --version options, but test does not.  test treats each of those as  it  treats  any  other
       nonempty STRING.

       NOTE:  your shell may have its own version of test and/or [, which usually supersedes the version described here.  Please
       refer to your shell's documentation for details about the options it supports.

AUTHOR
       Written by Kevin Braunsdorf and Matthew Bradburn.

REPORTING BUGS
       GNU coreutils online help: &amp;lt;http://www.gnu.org/software/coreutils/&amp;gt;
       Report [ translation bugs to &amp;lt;http://translationproject.org/team/&amp;gt;

COPYRIGHT
       Copyright   ©   2016   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3    or    later
       &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       Full documentation at: &amp;lt;http://www.gnu.org/software/coreutils/[&amp;gt;
       or available locally via: info '(coreutils) test invocation'

GNU coreutils 8.26                                        November 2016                                                  TEST(1)
TIME(1)                                                Linux User's Manual                                               TIME(1)

NAME
       time - time a simple command or give resource usage

SYNOPSIS
       time [options] command [arguments...]

DESCRIPTION
       The  time command runs the specified program command with the given arguments.  When command finishes, time writes a mes‐
       sage to standard error giving timing statistics about this program run.  These statistics consist of (i) the elapsed real
       time  between  invocation  and  termination,  (ii) the user CPU time (the sum of the tms_utime and tms_cutime values in a
       struct tms as returned by times(2)), and (iii) the system CPU time (the sum of the tms_stime and tms_cstime values  in  a
       struct tms as returned by times(2)).

       Note: some shells (e.g., bash(1)) have a built-in time command that provides similar information on the usage of time and
       possibly other resources.   To  access  the  real  command,  you  may  need  to  specify  its  pathname  (something  like
       /usr/bin/time).

OPTIONS
       -p     When in the POSIX locale, use the precise traditional format

                  "real %f\nuser %f\nsys %f\n"

              (with  numbers  in  seconds) where the number of decimals in the output for %f is unspecified but is sufficient to
              express the clock tick accuracy, and at least one.

EXIT STATUS
       If command was invoked, the exit status is that of command.  Otherwise, it is 127 if command could not be found,  126  if
       it could be found but could not be invoked, and some other nonzero value (1-125) if something else went wrong.

ENVIRONMENT
       The  variables  LANG,  LC_ALL, LC_CTYPE, LC_MESSAGES, LC_NUMERIC, NLSPATH, and PATH are used.  The last one to search for
       command.  The remaining ones for the text and formatting of the output.

GNU VERSION
       Below a description of the GNU 1.7 version of time.  Disregarding the name of the utility, GNU makes it  output  lots  of
       useful  information,  not  only about time used, but also on other resources like memory, I/O and IPC calls (where avail‐
       able).  The output is formatted using a format string that can be specified using the -f option or the  TIME  environment
       variable.

       The default format string is:

           %Uuser %Ssystem %Eelapsed %PCPU (%Xtext+%Ddata %Mmax)k
           %Iinputs+%Ooutputs (%Fmajor+%Rminor)pagefaults %Wswaps

       When the -p option is given the (portable) output format

           real %e
           user %U
           sys %S

       is used.

   The format string
       The  format is interpreted in the usual printf-like way.  Ordinary characters are directly copied, tab, newline and back‐
       slash are escaped using \t, \n and \\, a percent sign is represented by %%, and otherwise % indicates a conversion.   The
       program  time  will always add a trailing newline itself.  The conversions follow.  All of those used by tcsh(1) are sup‐
       ported.

       Time

       %E     Elapsed real time (in [hours:]minutes:seconds).

       %e     (Not in tcsh(1).)  Elapsed real time (in seconds).

       %S     Total number of CPU-seconds that the process spent in kernel mode.

       %U     Total number of CPU-seconds that the process spent in user mode.

       %P     Percentage of the CPU that this job got, computed as (%U + %S) / %E.

       Memory

       %M     Maximum resident set size of the process during its lifetime, in Kbytes.

       %t     (Not in tcsh(1).)  Average resident set size of the process, in Kbytes.

       %K     Average total (data+stack+text) memory use of the process, in Kbytes.

       %D     Average size of the process's unshared data area, in Kbytes.

       %p     (Not in tcsh(1).)  Average size of the process's unshared stack space, in Kbytes.

       %X     Average size of the process's shared text space, in Kbytes.

       %Z     (Not in tcsh(1).)  System's page size, in bytes.  This is a per-system constant, but varies between systems.

       %F     Number of major page faults that occurred while the process was running.  These are faults where the page  has  to
              be read in from disk.

       %R     Number  of  minor,  or recoverable, page faults.  These are faults for pages that are not valid but which have not
              yet been claimed by other virtual pages.  Thus the data in the page is still valid but the system tables  must  be
              updated.

       %W     Number of times the process was swapped out of main memory.

       %c     Number of times the process was context-switched involuntarily (because the time slice expired).

       %w     Number  of  waits:  times that the program was context-switched voluntarily, for instance while waiting for an I/O
              operation to complete.

       I/O

       %I     Number of filesystem inputs by the process.

       %O     Number of filesystem outputs by the process.

       %r     Number of socket messages received by the process.

       %s     Number of socket messages sent by the process.

       %k     Number of signals delivered to the process.

       %C     (Not in tcsh(1).)  Name and command-line arguments of the command being timed.

       %x     (Not in tcsh(1).)  Exit status of the command.

   GNU options
       -f format, --format=format
              Specify output format, possibly overriding the format specified in the environment variable TIME.

       -p, --portability
              Use the portable output format.

       -o file, --output=file
              Do not send the results to stderr, but overwrite the specified file.

       -a, --append
              (Used together with -o.) Do not overwrite but append.

       -v, --verbose
              Give very verbose output about all the program knows about.

   GNU standard options
       --help Print a usage message on standard output and exit successfully.

       -V, --version
              Print version information on standard output, then exit successfully.

       --     Terminate option list.

BUGS
       Not all resources are measured by all versions of UNIX, so some of the values might be reported  as  zero.   The  present
       selection was mostly inspired by the data provided by 4.2 or 4.3BSD.

       GNU time version 1.7 is not yet localized.  Thus, it does not implement the POSIX requirements.

       The  environment  variable TIME was badly chosen.  It is not unusual for systems like autoconf(1) or make(1) to use envi‐
       ronment variables with the name of a utility to override the utility to be used.  Uses like MORE or TIME for  options  to
       programs (instead of program pathnames) tend to lead to difficulties.

       It seems unfortunate that -o overwrites instead of appends.  (That is, the -a option should be the default.)

       Mail suggestions and bug reports for GNU time to
       bug-utils@prep.ai.mit.edu
       Please include the version of time, which you can get by running
       time --version
       and the operating system and C compiler you used.

SEE ALSO
       bash(1), tcsh(1), times(2), wait3(2)

COLOPHON
       This  page  is  part  of  release  4.09  of the Linux man-pages project.  A description of the project, information about
       reporting bugs, and the latest version of this page, can be found at https://www.kernel.org/doc/man-pages/.

                                                           2015-02-21                                                    TIME(1)
TIMES(1P)                                           POSIX Programmer's Manual                                          TIMES(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->

NAME
       times — write process times

SYNOPSIS
       times

DESCRIPTION
       The  times utility shall write the accumulated user and system times for the shell and for all of its child processes, in
       the following POSIX locale format:

           "%dm%fs %dm%fs\n%dm%fs %dm%fs\n", &amp;lt;shell user minutes&amp;gt;,
               &amp;lt;shell user seconds&amp;gt;, &amp;lt;shell system minutes&amp;gt;,
               &amp;lt;shell system seconds&amp;gt;, &amp;lt;children user minutes&amp;gt;,
               &amp;lt;children user seconds&amp;gt;, &amp;lt;children system minutes&amp;gt;,
               &amp;lt;children system seconds&amp;gt;

       The four pairs of times shall correspond to the members of the &amp;lt;sys/times.h&amp;gt; tms structure (defined in the  Base  Defini‐
       tions  volume  of  POSIX.1‐2008,  Chapter  13,  Headers)  as  returned  by times(): tms_utime, tms_stime, tms_cutime, and
       tms_cstime, respectively.

OPTIONS
       None.

OPERANDS
       None.

<!-- fe96d119-27ce-4a62-99a9-ff5840fe1a84 <=< ACCEPT -->STDIN
       Not used.

INPUT FILES
       None.

ENVIRONMENT VARIABLES
       None.

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       See the DESCRIPTION.

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       None.

EXIT STATUS
       Zero.

CONSEQUENCES OF ERRORS
       Default.<!-- ACCEPT >=> fe96d119-27ce-4a62-99a9-ff5840fe1a84 -->

       The following sections are informative.

APPLICATION USAGE
       None.

EXAMPLES
       $ times
       0m0.43s 0m1.11s
       8m44.18s 1m43.23s

RATIONALE
       The times special built-in from the Single UNIX Specification is now required for all conforming shells.

FUTURE DIRECTIONS
       None.

SEE ALSO
       Section 2.14, Special Built-In Utilities

       The Base Definitions volume of POSIX.1‐2008, &amp;lt;sys_times.h&amp;gt;

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013  Edition,  Standard  for
       Information  Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7, Copy‐
       right (C) 2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This  is  POSIX.1-2008
       with  the  2013  Technical  Corrigendum 1 applied.) In the event of any discrepancy between this version and the original
       IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the  referee  document.  The  original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any  typographical  or formatting errors that appear in this page are most likely to have been introduced during the con‐
       version of the source files to man page format. To report such errors,  see  https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                     TIMES(1P)
TOUCH(1)                                                  User Commands                                                 TOUCH(1)

NAME
       touch - change file timestamps

SYNOPSIS
       touch [OPTION]... FILE...

DESCRIPTION
       Update the access and modification times of each FILE to the current time.

       A FILE argument that does not exist is created empty, unless -c or -h is supplied.

       A  FILE  argument string of - is handled specially and causes touch to change the times of the file associated with stan‐
       dard output.

       Mandatory arguments to long options are mandatory for short options too.

       -a     change only the access time

       -c, --no-create
              do not create any files

       -d, --date=STRING
              parse STRING and use it instead of current time

       -f     (ignored)

       -h, --no-dereference
              affect each symbolic link instead of any referenced file (useful only on systems that can change the timestamps of
              a symlink)

       -m     change only the modification time

       -r, --reference=FILE
              use this file's times instead of current time

       -t STAMP
              use [[CC]YY]MMDDhhmm[.ss] instead of current time

       --time=WORD
              change  the specified time: WORD is access, atime, or use: equivalent to -a WORD is modify or mtime: equivalent to
              -m

       --help display this help and exit

       --version
              output version information and exit

       Note that the -d and -t options accept different time-date formats.

DATE STRING
       The --date=STRING is a mostly free format human readable date string such  as  "Sun,  29  Feb  2004  16:21:42  -0800"  or
       "2004-02-29  16:21:42"  or  even "next Thursday".  A date string may contain items indicating calendar date, time of day,
       time zone, day of week, relative time, relative date, and numbers.  An empty string indicates the beginning of  the  day.
       The date string format is more complex than is easily documented here but is fully described in the info documentation.

AUTHOR
       Written by Paul Rubin, Arnold Robbins, Jim Kingdon, David MacKenzie, and Randy Smith.

REPORTING BUGS
       GNU coreutils online help: &amp;lt;http://www.gnu.org/software/coreutils/&amp;gt;
       Report touch translation bugs to &amp;lt;http://translationproject.org/team/&amp;gt;

COPYRIGHT
       Copyright    ©    2016   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3   or   later
       &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       Full documentation at: &amp;lt;http://www.gnu.org/software/coreutils/touch&amp;gt;
       or available locally via: info '(coreutils) touch invocation'

GNU coreutils 8.26                                        November 2016                                                 TOUCH(1)
tput(1)                                              General Commands Manual                                             tput(1)

NAME
       tput, reset - initialize a terminal or query terminfo database

SYNOPSIS
       tput [-Ttype] capname [parameters]
       tput [-Ttype] clear
       tput [-Ttype] init
       tput [-Ttype] reset
       tput [-Ttype] longname
       tput -S  &amp;lt;&amp;lt;
       tput -V

DESCRIPTION
       The  tput utility uses the terminfo database to make the values of terminal-dependent capabilities and information avail‐
       able to the shell (see sh(1)), to initialize or reset the terminal, or return the long name  of  the  requested  terminal
       type.  The result depends upon the capability's type:

          string
               tput writes the string to the standard output.  No trailing newline is supplied.

          integer
               tput writes the decimal value to the standard output, with a trailing newline.

          boolean
               tput  simply  sets the exit code (0 for TRUE if the terminal has the capability, 1 for FALSE if it does not), and
               writes nothing to the standard output.

       Before using a value returned on the standard output, the application should test the exit code (e.g., $?, see sh(1))  to
       be  sure  it  is  0.  (See the EXIT CODES and DIAGNOSTICS sections.)  For a complete list of capabilities and the capname
       associated with each, see terminfo(5).

   Options
       -Ttype indicates the type of terminal.  Normally this option is unnecessary, because the default is taken from the  envi‐
              ronment variable TERM.  If -T is specified, then the shell variables LINES and COLUMNS will also be ignored.

       -S     allows more than one capability per invocation of tput.  The capabilities must be passed to tput from the standard
              input instead of from the command line (see example).  Only one capname  is  allowed  per  line.   The  -S  option
              changes the meaning of the 0 and 1 boolean and string exit codes (see the EXIT CODES section).

              Again,  tput  uses a table and the presence of parameters in its input to decide whether to use tparm(3X), and how
              to interpret the parameters.

       -V     reports the version of ncurses which was used in this program, and exits.

   Commands
       capname
              indicates the capability from the terminfo database.  When termcap support is compiled in, the  termcap  name  for
              the capability is also accepted.

              If the capability is a string that takes parameters, the arguments following the capability will be used as param‐
              eters for the string.

              Most parameters are numbers.  Only a few terminfo capabilities require string parameters; tput  uses  a  table  to
              decide  which to pass as strings.  Normally tput uses tparm(3X) to perform the substitution.  If no parameters are
              given for the capability, tput writes the string without performing the substitution.

       init   If the terminfo database is present and an entry for the user's terminal exists (see -Ttype, above), the following
              will occur:

              (1)  if  present,  the  terminal's initialization strings will be output as detailed in the terminfo(5) section on
                   Tabs and Initialization,

              (2)  any delays (e.g., newline) specified in the entry will be set in the tty driver,

              (3)  tabs expansion will be turned on or off according to the specification in the entry, and

              (4)  if tabs are not expanded, standard tabs will be set (every 8 spaces).

              If an entry does not contain the information needed for any of these activities, that activity  will  silently  be
              skipped.

       reset  Instead  of  putting out initialization strings, the terminal's reset strings will be output if present (rs1, rs2,
              rs3, rf).  If the reset strings are not present, but initialization strings are, the initialization  strings  will
              be output.  Otherwise, reset acts identically to init.

       longname
              If  the terminfo database is present and an entry for the user's terminal exists (see -Ttype above), then the long
              name of the terminal will be put out.  The long name is the last name in the first line of the terminal's descrip‐
              tion in the terminfo database [see term(5)].

   Aliases
       tput  handles  the  clear,  init and reset commands specially: it allows for the possibility that it is invoked by a link
       with those names.

       If tput is invoked by a link named reset, this has the same effect as tput reset.  The tset(1) utility also treats a link
       named reset specially.

       Before ncurses 6.1, the two utilities were different from each other:

       ·   tset utility reset the terminal modes and special characters (not done with tput).

       ·   On the other hand, tset's repertoire of terminal capabilities for resetting the terminal was more limited, i.e., only
           reset_1string, reset_2string and reset_file in contrast to the tab-stops and margins which are set by this utility.

       ·   The reset program is usually an alias for tset, because of this difference with resetting terminal modes and  special
           characters.

       If  tput  is invoked by a link named init, this has the same effect as tput init.  Again, you are less likely to use that
       link because another program named init has a more well-established use.

EXAMPLES
       tput init
            Initialize the terminal according to the type of terminal in the environmental variable TERM.  This  command  should
            be  included  in  everyone's .profile after the environmental variable TERM has been exported, as illustrated on the
            profile(5) manual page.

       tput -T5620 reset
            Reset an AT&amp;T 5620 terminal, overriding the type of terminal in the environmental variable TERM.

       tput cup 0 0
            Send the sequence to move the cursor to row 0, column 0 (the upper left corner of the screen, usually known  as  the
            “home” cursor position).

       tput clear
            Echo the clear-screen sequence for the current terminal.

       tput cols
            Print the number of columns for the current terminal.

       tput -T450 cols
            Print the number of columns for the 450 terminal.

       bold=`tput smso` offbold=`tput rmso`
            Set  the shell variables bold, to begin stand-out mode sequence, and offbold, to end standout mode sequence, for the
            current terminal.  This might be followed by a prompt: echo "${bold}Please type in your name: ${offbold}\c"

       tput hc
            Set exit code to indicate if the current terminal is a hard copy terminal.

       tput cup 23 4
            Send the sequence to move the cursor to row 23, column 4.

       tput cup
            Send the terminfo string for cursor-movement, with no parameters substituted.

       tput longname
            Print the long name from the terminfo database for the type of terminal  specified  in  the  environmental  variable
            TERM.

            tput -S &amp;lt;&amp;lt;!
            &amp;gt; clear
            &amp;gt; cup 10 10
            &amp;gt; bold
            &amp;gt; !

            This  example  shows tput processing several capabilities in one invocation.  It clears the screen, moves the cursor
            to position 10, 10 and turns on bold (extra bright) mode.  The list is terminated by an exclamation mark  (!)  on  a
            line by itself.

FILES
       /usr/share/terminfo
              compiled terminal description database

       /usr/share/tabset/*
              tab  settings  for some terminals, in a format appropriate to be output to the terminal (escape sequences that set
              margins and tabs); for more information, see the Tabs and Initialization, section of terminfo(5)

EXIT CODES
       If the -S option is used, tput checks for errors from each line, and if any errors are found, will set the exit code to 4
       plus  the  number  of lines with errors.  If no errors are found, the exit code is 0.  No indication of which line failed
       can be given so exit code 1 will never appear.  Exit codes 2, 3, and 4 retain their  usual  interpretation.   If  the  -S
       option is not used, the exit code depends on the type of capname:

          boolean
                 a value of 0 is set for TRUE and 1 for FALSE.

          string a value of 0 is set if the capname is defined for this terminal type (the value of capname is returned on stan‐
                 dard output); a value of 1 is set if capname is not defined for this terminal type (nothing is written to stan‐
                 dard output).

          integer
                 a  value of 0 is always set, whether or not capname is defined for this terminal type.  To determine if capname
                 is defined for this terminal type, the user must test the value written to standard  output.   A  value  of  -1
                 means that capname is not defined for this terminal type.

          other  reset or init may fail to find their respective files.  In that case, the exit code is set to 4 + errno.

       Any other exit code indicates an error; see the DIAGNOSTICS section.

DIAGNOSTICS
       tput prints the following error messages and sets the corresponding exit codes.

       exit code   error message
       ─────────────────────────────────────────────────────────────────────
       0           (capname  is a numeric variable that is not specified in
                   the terminfo(5) database for this  terminal  type,  e.g.
                   tput -T450 lines and tput -T2621 xmc)
       1           no error message is printed, see the EXIT CODES section.
       2           usage error
       3           unknown terminal type or no terminfo database
       4           unknown terminfo capability capname
       &amp;gt;4          error occurred in -S
       ─────────────────────────────────────────────────────────────────────

HISTORY
       The tput command was begun by Bill Joy in 1980.  The initial version only cleared the screen.

       AT&amp;T  System  V  provided  a  different tput command, whose init and reset  subcommands (more than half the program) were
       incorporated from the reset feature of BSD tset written by Eric Allman.  Later the corresponding source  code  for  reset
       was removed from the BSD tset (in June 1993, released in 4.4BSD-Lite a year later).

       Keith  Bostic  replaced  the  BSD tput command in 1989 with a new implementation based on the AT&amp;T System V program tput.
       Like the AT&amp;T program, Bostic's version accepted some parameters named for terminfo capabilities (clear,  init,  longname
       and  reset).   However  (because he had only termcap available), it accepted termcap names for other capabilities.  Also,
       Bostic's BSD tput did not modify the terminal I/O modes as the earlier BSD tset had done.

       At the same time, Bostic added a shell script named “clear”, which used tput to clear the screen.

       Both of these appeared in 4.4BSD, becoming the “modern” BSD implementation of tput.

PORTABILITY
       This implementation of tput differs from AT&amp;T tput in two important areas:

       ·   tput capname writes to the standard output.  That need not be a regular terminal.   However,  the  subcommands  which
           manipulate terminal modes may not use the standard output.

           The  AT&amp;T  implementation's init and reset commands use the BSD (4.1c) tset source, which manipulates terminal modes.
           It successively tries standard output, standard error, standard input before falling back to “/dev/tty”  and  finally
           just assumes a 1200Bd terminal.  When updating terminal modes, it ignores errors.

           Until  changes  made  after  ncurses  6.0, tput did not modify terminal modes.  tput now uses a similar scheme, using
           functions shared with tset (and ultimately based on the 4.4BSD tset).  If it is not able to open  a  terminal,  e.g.,
           when running in cron, tput will return an error.

       ·   AT&amp;T tput guesses the type of its capname operands by seeing if all of the characters are numeric, or not.

           Most  implementations  which  provide support for capname operands use the tparm function to expand parameters in it.
           That function expects a mixture of numeric and string parameters, requiring tput to know which type to use.

           This implementation uses a table to determine the parameter types for the standard capname operands, and an  internal
           library function to analyze nonstandard capname operands.

       The  longname  and -S options, and the parameter-substitution features used in the cup example, were not supported in BSD
       curses before 4.3reno (1989) or in AT&amp;T/USL curses before SVr4 (1988).

       IEEE Std 1003.1/The Open Group  Base Specifications Issue 7 (POSIX.1-2008) documents only the operands  for  clear,  init
       and reset.  There are a few interesting observations to make regarding that:

       ·   In  this  implementation,  clear is part of the capname support.  The others (init and longname) do not correspond to
           terminal capabilities.

       ·   Other implementations of tput on SVr4-based systems such as Solaris, IRIX64 and HPUX as well as others  such  as  AIX
           and Tru64 provide support for capname operands.

       ·   A  few  platforms  such  as FreeBSD recognize termcap names rather than terminfo capability names in their respective
           tput commands.  Since 2010, NetBSD's tput uses terminfo names.  Before that, it  (like  FreeBSD)  recognized  termcap
           names.

       Because  (apparently) all of the certified Unix systems support the full set of capability names, the reasoning for docu‐
       menting only a few may not be apparent.

       ·   X/Open Curses Issue 7 documents tput differently, with capname and the other features used in this implementation.

       ·   That is, there are two standards for tput: POSIX (a subset) and X/Open Curses (the full implementation).  POSIX docu‐
           ments a subset to avoid the complication of including X/Open Curses and the terminal capabilities database.

       ·   While  it is certainly possible to write a tput program without using curses, none of the systems which have a curses
           implementation provide a tput utility which does not provide the capname feature.

SEE ALSO
       clear(1), stty(1), tabs(1), tset(1), terminfo(5), curs_termcap(3X).

       This describes ncurses version 6.0 (patch 20161224).

                                                                                                                         tput(1)
TR(1)                                                     User Commands                                                    TR(1)

NAME
       tr - translate or delete characters

SYNOPSIS
       tr [OPTION]... SET1 [SET2]

DESCRIPTION
       Translate, squeeze, and/or delete characters from standard input, writing to standard output.

       -c, -C, --complement
              use the complement of SET1

       -d, --delete
              delete characters in SET1, do not translate

       -s, --squeeze-repeats
              replace  each  sequence of a repeated character that is listed in the last specified SET, with a single occurrence
              of that character

       -t, --truncate-set1
              first truncate SET1 to length of SET2

       --help display this help and exit

       --version
              output version information and exit

       SETs are specified as strings of characters.  Most represent themselves.  Interpreted sequences are:

       \NNN   character with octal value NNN (1 to 3 octal digits)

       \\     backslash

       \a     audible BEL

       \b     backspace

       \f     form feed

       \n     new line

       \r     return

       \t     horizontal tab

       \v     vertical tab

       CHAR1-CHAR2
              all characters from CHAR1 to CHAR2 in ascending order

       [CHAR*]
              in SET2, copies of CHAR until length of SET1

       [CHAR*REPEAT]
              REPEAT copies of CHAR, REPEAT octal if starting with 0

       [:alnum:]
              all letters and digits

       [:alpha:]
              all letters

       [:blank:]
              all horizontal whitespace

       [:cntrl:]
              all control characters

       [:digit:]
              all digits

       [:graph:]
              all printable characters, not including space

       [:lower:]
              all lower case letters

       [:print:]
              all printable characters, including space

       [:punct:]
              all punctuation characters

       [:space:]
              all horizontal or vertical whitespace

       [:upper:]
              all upper case letters

       [:xdigit:]
              all hexadecimal digits

       [=CHAR=]
              all characters which are equivalent to CHAR

       Translation occurs if -d is not given and both SET1 and SET2 appear.  -t may be used  only  when  translating.   SET2  is
       extended  to  length  of SET1 by repeating its last character as necessary.  Excess characters of SET2 are ignored.  Only
       [:lower:] and [:upper:] are guaranteed to expand in ascending order; used in SET2 while translating,  they  may  only  be
       used in pairs to specify case conversion.  -s uses the last specified SET, and occurs after translation or deletion.

AUTHOR
       Written by Jim Meyering.

REPORTING BUGS
       GNU coreutils online help: &amp;lt;http://www.gnu.org/software/coreutils/&amp;gt;
       Report tr translation bugs to &amp;lt;http://translationproject.org/team/&amp;gt;

COPYRIGHT
       Copyright    ©    2016   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3   or   later
       &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       Full documentation at: &amp;lt;http://www.gnu.org/software/coreutils/tr&amp;gt;
       or available locally via: info '(coreutils) tr invocation'

GNU coreutils 8.26                                        November 2016                                                    TR(1)
TRAP(1P)                                            POSIX Programmer's Manual                                           TRAP(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->

NAME
       trap — trap signals

SYNOPSIS
       trap n [condition...]
       trap [action condition...]

DESCRIPTION
       If  the  first  operand is an unsigned decimal integer, the shell shall treat all operands as conditions, and shall reset
       each condition to the default value. Otherwise, if there are operands, the first is treated as an action and the  remain‐
       ing as conditions.

       If  action  is  '−',  the  shell shall reset each condition to the default value. If action is null (""), the shell shall
       ignore each specified condition if it arises. Otherwise, the argument action shall be read and executed by the shell when
       one of the corresponding conditions arises. The action of trap shall override a previous action (either default action or
       one explicitly set). The value of "$?" after the trap action completes shall be the value it had before trap was invoked.

       The condition can be EXIT, 0 (equivalent to EXIT), or a signal specified using a symbolic name, without the  SIG  prefix,
       as  listed in the tables of signal names in the &amp;lt;signal.h&amp;gt; header defined in the Base Definitions volume of POSIX.1‐2008,
       Chapter 13, Headers; for example, HUP, INT, QUIT, TERM. Implementations may permit names with the SIG  prefix  or  ignore
       case in signal names as an extension. Setting a trap for SIGKILL or SIGSTOP produces undefined results.

       The  environment  in  which the shell executes a trap on EXIT shall be identical to the environment immediately after the
       last command executed before the trap on EXIT was taken.

       Each time trap is invoked, the action argument shall be processed in a manner equivalent to:

           eval action

       Signals that were ignored on entry to a non-interactive shell cannot be trapped or  reset,  although  no  error  need  be
       reported  when  attempting to do so. An interactive shell may reset or catch signals ignored on entry. Traps shall remain
       in place for a given shell until explicitly changed with another trap command.

       When a subshell is entered, traps that are not being ignored shall be set to the default actions, except in the case of a
       command substitution containing only a single trap command, when the traps need not be altered. Implementations may check
       for this case using only lexical analysis; for example, if `trap` and $( trap -- ) do not alter the  traps  in  the  sub‐
       shell,  cases  such  as assigning var=trap and then using $($var) may still alter them. This does not imply that the trap
       command cannot be used within the subshell to set new traps.

       The trap command with no operands shall write to standard output a list of commands associated with  each  condition.  If
       the  command is executed in a subshell, the implementation does not perform the optional check described above for a com‐
       mand substitution containing only a single trap command, and no trap commands with  operands  have  been  executed  since
       entry  to  the  subshell, the list shall contain the commands that were associated with each condition immediately before
       the subshell environment was entered.  Otherwise, the list shall contain the commands currently associated with each con‐
       dition. The format shall be:

           "trap −− %s %s ...\n", &amp;lt;action&amp;gt;, &amp;lt;condition&amp;gt; ...

       The  shell  shall format the output, including the proper use of quoting, so that it is suitable for reinput to the shell
       as commands that achieve the same trapping results. For example:

           save_traps=$(trap)
           ...
           eval "$save_traps"

       XSI-conformant systems also allow numeric signal numbers for the conditions corresponding to the following signal names:

       1     SIGHUP

       2     SIGINT

       3     SIGQUIT

       6     SIGABRT

       9     SIGKILL

       14    SIGALRM

       15    SIGTERM

       The trap special built-in shall conform to the Base Definitions volume of  POSIX.1‐2008,  Section  12.2,  Utility  Syntax
       Guidelines.

OPTIONS
       None.

OPERANDS
       See the DESCRIPTION.

<!-- fe96d119-27ce-4a62-99a9-ff5840fe1a84 <=< ACCEPT -->STDIN
       Not used.

INPUT FILES
       None.

ENVIRONMENT VARIABLES
       None.

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       See the DESCRIPTION.

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       None.

EXIT STATUS
       If  the  trap name or number is invalid, a non-zero exit status shall be returned; otherwise, zero shall be returned. For
       both interactive and non-interactive shells, invalid signal names or numbers shall not be considered a syntax  error  and
       do not cause the shell to abort.

CONSEQUENCES OF ERRORS
       Default.<!-- ACCEPT >=> fe96d119-27ce-4a62-99a9-ff5840fe1a84 -->

       The following sections are informative.

APPLICATION USAGE
       None.

EXAMPLES
       Write out a list of all traps and actions:

           trap

       Set  a  trap  so the logout utility in the directory referred to by the HOME environment variable executes when the shell
       terminates:

           trap '"$HOME"/logout' EXIT

       or:

           trap '"$HOME"/logout' 0

       Unset traps on INT, QUIT, TERM, and EXIT:

           trap − INT QUIT TERM EXIT

RATIONALE
       Implementations may permit lowercase signal names as an extension.  Implementations may also accept the  names  with  the
       SIG prefix; no known historical shell does so. The trap and kill utilities in this volume of POSIX.1‐2008 are now consis‐
       tent in their omission of the SIG prefix for signal names. Some kill implementations do not allow the prefix, and kill −l
       lists the signals without prefixes.

       Trapping  SIGKILL or SIGSTOP is syntactically accepted by some historical implementations, but it has no effect. Portable
       POSIX applications cannot attempt to trap these signals.

       The output format is not historical practice. Since the output of historical  trap  commands  is  not  portable  (because
       numeric  signal values are not portable) and had to change to become so, an opportunity was taken to format the output in
       a way that a shell script could use to save and then later reuse a trap if it wanted.

       The KornShell uses an ERR trap that is triggered whenever set −e would cause an exit. This is allowable as an  extension,
       but was not mandated, as other shells have not used it.

       The  text  about  the  environment  for the EXIT trap invalidates the behavior of some historical versions of interactive
       shells which, for example, close the standard input before executing a trap on 0. For example, in some historical  inter‐
       active shell sessions the following trap on 0 would always print "−−":

           trap 'read foo; echo "−$foo−"' 0

       The command:

           trap 'eval " $cmd"' 0

       causes the contents of the shell variable cmd to be executed as a command when the shell exits. Using:

           trap '$cmd' 0

       does not work correctly if cmd contains any special characters such as quoting or redirections. Using:

           trap " $cmd" 0

       also  works  (the leading &amp;lt;space&amp;gt; character protects against unlikely cases where cmd is a decimal integer or begins with
       '−'), but it expands the cmd variable when the trap command is executed, not when the exit action is executed.

FUTURE DIRECTIONS
       None.

SEE ALSO
       Section 2.14, Special Built-In Utilities

       The Base Definitions volume of POSIX.1‐2008, Section 12.2, Utility Syntax Guidelines, &amp;lt;signal.h&amp;gt;

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013  Edition,  Standard  for
       Information  Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7, Copy‐
       right (C) 2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This  is  POSIX.1-2008
       with  the  2013  Technical  Corrigendum 1 applied.) In the event of any discrepancy between this version and the original
       IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the  referee  document.  The  original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any  typographical  or formatting errors that appear in this page are most likely to have been introduced during the con‐
       version of the source files to man page format. To report such errors,  see  https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                      TRAP(1P)
TRUE(1)                                                   User Commands                                                  TRUE(1)

NAME
       true - do nothing, successfully

SYNOPSIS
       true [ignored command line arguments]
       true OPTION

DESCRIPTION
       Exit with a status code indicating success.

       --help display this help and exit

       --version
              output version information and exit

       NOTE:  your shell may have its own version of true, which usually supersedes the version described here.  Please refer to
       your shell's documentation for details about the options it supports.

AUTHOR
       Written by Jim Meyering.

REPORTING BUGS
       GNU coreutils online help: &amp;lt;http://www.gnu.org/software/coreutils/&amp;gt;
       Report true translation bugs to &amp;lt;http://translationproject.org/team/&amp;gt;

COPYRIGHT
       Copyright   ©   2016   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3    or    later
       &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       Full documentation at: &amp;lt;http://www.gnu.org/software/coreutils/true&amp;gt;
       or available locally via: info '(coreutils) true invocation'

GNU coreutils 8.26                                        November 2016                                                  TRUE(1)
TSORT(1)                                                  User Commands                                                 TSORT(1)

NAME
       tsort - perform topological sort

SYNOPSIS
       tsort [OPTION] [FILE]

DESCRIPTION
       Write totally ordered list consistent with the partial ordering in FILE.

       With no FILE, or when FILE is -, read standard input.

       --help display this help and exit

       --version
              output version information and exit

AUTHOR
       Written by Mark Kettenis.

<!-- 30b0cf8a-458a-435b-a2e0-993472636e53 <=< ACCEPT -->REPORTING BUGS
       GNU coreutils online help: &amp;lt;http://www.gnu.org/software/coreutils/&amp;gt;
       Report tsort translation bugs to &amp;lt;http://translationproject.org/team/&amp;gt;

COPYRIGHT
       Copyright    ©    2016   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3   or   later
       &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.<!-- ACCEPT >=> 30b0cf8a-458a-435b-a2e0-993472636e53 -->

SEE ALSO
       Full documentation at: &amp;lt;http://www.gnu.org/software/coreutils/tsort&amp;gt;
       or available locally via: info '(coreutils) tsort invocation'

GNU coreutils 8.26                                        November 2016                                                 TSORT(1)
TTY(1)                                                    User Commands                                                   TTY(1)

NAME
       tty - print the file name of the terminal connected to standard input

SYNOPSIS
       tty [OPTION]...

DESCRIPTION
       Print the file name of the terminal connected to standard input.

       -s, --silent, --quiet
              print nothing, only return an exit status

       --help display this help and exit

       --version
              output version information and exit

AUTHOR
       Written by David MacKenzie.

<!-- 30b0cf8a-458a-435b-a2e0-993472636e53 <=< ACCEPT -->REPORTING BUGS
       GNU coreutils online help: &amp;lt;http://www.gnu.org/software/coreutils/&amp;gt;
       Report tty translation bugs to &amp;lt;http://translationproject.org/team/&amp;gt;

COPYRIGHT
       Copyright    ©    2016   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3   or   later
       &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.<!-- ACCEPT >=> 30b0cf8a-458a-435b-a2e0-993472636e53 -->

SEE ALSO
       Full documentation at: &amp;lt;http://www.gnu.org/software/coreutils/tty&amp;gt;
       or available locally via: info '(coreutils) tty invocation'

GNU coreutils 8.26                                        November 2016                                                   TTY(1)
TYPE(1P)                                            POSIX Programmer's Manual                                           TYPE(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->

NAME
       type — write a description of command type

SYNOPSIS
       type name...

DESCRIPTION
       The type utility shall indicate how each argument would be interpreted if used as a command name.

OPTIONS
       None.

OPERANDS
       The following operand shall be supported:

       name      A name to be interpreted.

STDIN
       Not used.

INPUT FILES
       None.

<!-- 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 <=< ACCEPT -->ENVIRONMENT VARIABLES
       The following environment variables shall affect the execution of type:

       LANG      Provide  a  default  value for the internationalization variables that are unset or null. (See the Base Defini‐
                 tions volume of POSIX.1‐2008, Section 8.2, Internationalization Variables for the precedence of  international‐
                 ization variables used to determine the values of locale categories.)

       LC_ALL    If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_CTYPE  Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, sin‐
                 gle-byte as opposed to multi-byte characters in arguments).

       LC_MESSAGES
                 Determine the locale that should be used to affect the format and contents of diagnostic  messages  written  to
                 standard error.

       NLSPATH   Determine the location of message catalogs for the processing of LC_MESSAGES.<!-- ACCEPT >=> 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 -->

       PATH      Determine  the  location of name, as described in the Base Definitions volume of POSIX.1‐2008, Chapter 8, Envi‐
                 ronment Variables.

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       The standard output of type contains information about each operand in an unspecified format.  The  information  provided
       typically  identifies the operand as a shell built-in, function, alias, or keyword, and where applicable, may display the
       operand's pathname.

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       None.

<!-- a42f9355-e63b-4205-ac0b-0b19b24faf9d <=< ACCEPT -->EXIT STATUS
       The following exit values shall be returned:

        0    Successful completion.

       &amp;gt;0    An error occurred.<!-- ACCEPT >=> a42f9355-e63b-4205-ac0b-0b19b24faf9d -->

CONSEQUENCES OF ERRORS
       Default.

       The following sections are informative.

APPLICATION USAGE
       Since type must be aware of the contents of the current shell execution environment (such as the lists of commands, func‐
       tions, and built-ins processed by hash), it is always provided as a shell regular built-in. If it is called in a separate
       utility execution environment, such as one of the following:

           nohup type writer
           find . −type f | xargs type

       it might not produce accurate results.

EXAMPLES
       None.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       command, hash

       The Base Definitions volume of POSIX.1‐2008, Chapter 8, Environment Variables

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013  Edition,  Standard  for
       Information  Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7, Copy‐
       right (C) 2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This  is  POSIX.1-2008
       with  the  2013  Technical  Corrigendum 1 applied.) In the event of any discrepancy between this version and the original
       IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the  referee  document.  The  original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any  typographical  or formatting errors that appear in this page are most likely to have been introduced during the con‐
       version of the source files to man page format. To report such errors,  see  https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                      TYPE(1P)
ULIMIT(1P)                                          POSIX Programmer's Manual                                         ULIMIT(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.
<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->
NAME
       ulimit — set or report file size limit

SYNOPSIS
       ulimit [−f] [blocks]

DESCRIPTION
       The  ulimit  utility  shall set or report the file-size writing limit imposed on files written by the shell and its child
       processes (files of any size may be read). Only a process with appropriate privileges can increase the limit.

OPTIONS
       The ulimit utility shall conform to the Base Definitions volume of POSIX.1‐2008, Section 12.2, Utility Syntax Guidelines.

       The following option shall be supported:

       −f        Set (or report, if no blocks operand is present), the file size limit in blocks. The −f option  shall  also  be
                 the default case.

OPERANDS
       The following operand shall be supported:

       blocks    The number of 512-byte blocks to use as the new file size limit.

STDIN
       Not used.

INPUT FILES
       None.

<!-- 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 <=< ACCEPT -->ENVIRONMENT VARIABLES
       The following environment variables shall affect the execution of ulimit:

       LANG      Provide  a  default  value for the internationalization variables that are unset or null. (See the Base Defini‐
                 tions volume of POSIX.1‐2008, Section 8.2, Internationalization Variables for the precedence of  international‐
                 ization variables used to determine the values of locale categories.)

       LC_ALL    If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_CTYPE  Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, sin‐
                 gle-byte as opposed to multi-byte characters in arguments).

       LC_MESSAGES
                 Determine the locale that should be used to affect the format and contents of diagnostic  messages  written  to
                 standard error.

       NLSPATH   Determine the location of message catalogs for the processing of LC_MESSAGES.<!-- ACCEPT >=> 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 -->

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       The standard output shall be used when no blocks operand is present. If the current number of blocks is limited, the num‐
       ber of blocks in the current limit shall be written in the following format:

           "%d\n", &amp;lt;number of 512-byte blocks&amp;gt;

       If there is no current limit on the number of blocks, in the POSIX locale the following format shall be used:

           "unlimited\n"

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       None.

<!-- a42f9355-e63b-4205-ac0b-0b19b24faf9d <=< ACCEPT -->EXIT STATUS
       The following exit values shall be returned:

        0    Successful completion.

       &amp;gt;0    A request for a higher limit was rejected or an error occurred.<!-- ACCEPT >=> a42f9355-e63b-4205-ac0b-0b19b24faf9d -->

CONSEQUENCES OF ERRORS
       Default.

       The following sections are informative.

APPLICATION USAGE
       Since ulimit affects the current shell execution environment, it is always provided as a shell regular built-in. If it is
       called in a separate utility execution environment, such as one of the following:

           nohup ulimit −f 10000
           env ulimit 10000

       it does not affect the file size limit of the caller's environment.

       Once  a  limit has been decreased by a process, it cannot be increased (unless appropriate privileges are involved), even
       back to the original system limit.

EXAMPLES
       Set the file size limit to 51200 bytes:

           ulimit −f 100

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       The Base Definitions volume of POSIX.1‐2008, Chapter 8, Environment Variables, Section 12.2, Utility Syntax Guidelines

       The System Interfaces volume of POSIX.1‐2008, ulimit()

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013  Edition,  Standard  for
       Information  Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7, Copy‐
       right (C) 2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This  is  POSIX.1-2008
       with  the  2013  Technical  Corrigendum 1 applied.) In the event of any discrepancy between this version and the original
       IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the  referee  document.  The  original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any  typographical  or formatting errors that appear in this page are most likely to have been introduced during the con‐
       version of the source files to man page format. To report such errors,  see  https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                    ULIMIT(1P)
UMASK(1P)                                           POSIX Programmer's Manual                                          UMASK(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.
<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->
NAME
       umask — get or set the file mode creation mask

SYNOPSIS
       umask [−S] [mask]

DESCRIPTION
       The  umask  utility  shall  set the file mode creation mask of the current shell execution environment (see Section 2.12,
       Shell Execution Environment) to the value specified by the mask operand. This mask shall affect the initial value of  the
       file  permission bits of subsequently created files. If umask is called in a subshell or separate utility execution envi‐
       ronment, such as one of the following:

           (umask 002)
           nohup umask ...
           find . −exec umask ... \;

       it shall not affect the file mode creation mask of the caller's environment.

       If the mask operand is not specified, the umask utility shall write to standard output the value of the  file  mode  cre‐
       ation mask of the invoking process.

OPTIONS
       The umask utility shall conform to the Base Definitions volume of POSIX.1‐2008, Section 12.2, Utility Syntax Guidelines.

       The following option shall be supported:

       −S        Produce symbolic output.

       The  default  output style is unspecified, but shall be recognized on a subsequent invocation of umask on the same system
       as a mask operand to restore the previous file mode creation mask.

OPERANDS
       The following operand shall be supported:

       mask      A string specifying the new file mode creation mask. The string is treated in the same way as the mode  operand
                 described in the EXTENDED DESCRIPTION section for chmod.

                 For  a symbolic_mode value, the new value of the file mode creation mask shall be the logical complement of the
                 file permission bits portion of the file mode specified by the symbolic_mode string.

                 In a symbolic_mode value, the permissions op characters '+' and '−' shall be interpreted relative to  the  cur‐
                 rent file mode creation mask; '+' shall cause the bits for the indicated permissions to be cleared in the mask;
                 '−' shall cause the bits for the indicated permissions to be set in the mask.

                 The interpretation of mode values that specify file mode bits other than the file permission bits  is  unspeci‐
                 fied.

                 In the octal integer form of mode, the specified bits are set in the file mode creation mask.

                 The file mode creation mask shall be set to the resulting numeric value.

                 The  default  output of a prior invocation of umask on the same system with no operand also shall be recognized
                 as a mask operand.

STDIN
       Not used.

INPUT FILES
       None.

<!-- 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 <=< ACCEPT -->ENVIRONMENT VARIABLES
       The following environment variables shall affect the execution of umask:

       LANG      Provide a default value for the internationalization variables that are unset or null. (See  the  Base  Defini‐
                 tions  volume of POSIX.1‐2008, Section 8.2, Internationalization Variables for the precedence of international‐
                 ization variables used to determine the values of locale categories.)

       LC_ALL    If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_CTYPE  Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, sin‐
                 gle-byte as opposed to multi-byte characters in arguments).

       LC_MESSAGES
                 Determine  the  locale  that should be used to affect the format and contents of diagnostic messages written to
                 standard error.

       NLSPATH   Determine the location of message catalogs for the processing of LC_MESSAGES.<!-- ACCEPT >=> 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 -->

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       When the mask operand is not specified, the umask utility shall write a message to standard output that can later be used
       as a umask mask operand.

       If −S is specified, the message shall be in the following format:

           "u=%s,g=%s,o=%s\n", &amp;lt;owner permissions&amp;gt;, &amp;lt;group permissions&amp;gt;,
               &amp;lt;other permissions&amp;gt;

       where  the  three values shall be combinations of letters from the set {r, w, x}; the presence of a letter shall indicate
       that the corresponding bit is clear in the file mode creation mask.

       If a mask operand is specified, there shall be no output written to standard output.

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       None.

<!-- a42f9355-e63b-4205-ac0b-0b19b24faf9d <=< ACCEPT -->EXIT STATUS
       The following exit values shall be returned:

        0    The file mode creation mask was successfully changed, or no mask operand was supplied.

       &amp;gt;0    An error occurred.<!-- ACCEPT >=> a42f9355-e63b-4205-ac0b-0b19b24faf9d -->

CONSEQUENCES OF ERRORS
       Default.

       The following sections are informative.

APPLICATION USAGE
       Since umask affects the current shell execution environment, it is generally provided as a shell regular built-in.

       In contrast to the negative permission logic provided by the file mode creation mask and the octal  number  form  of  the
       mask argument, the symbolic form of the mask argument specifies those permissions that are left alone.

EXAMPLES
       Either of the commands:

           umask a=rx,ug+w

           umask 002

       sets the mode mask so that subsequently created files have their S_IWOTH bit cleared.

       After  setting  the  mode  mask with either of the above commands, the umask command can be used to write out the current
       value of the mode mask:

           $ umask
           0002

       (The output format is unspecified, but historical implementations use the octal integer mode format.)

           $ umask −S
           u=rwx,g=rwx,o=rx

       Either of these outputs can be used as the mask operand to a subsequent invocation of the umask utility.

       Assuming the mode mask is set as above, the command:

           umask g−w

       sets the mode mask so that subsequently created files have their S_IWGRP and S_IWOTH bits cleared.

       The command:

           umask −− −w

       sets the mode mask so that subsequently created files have all their write bits cleared. Note that mask operands −r,  −w,
       −x or anything beginning with a &amp;lt;hyphen&amp;gt;, must be preceded by "−−" to keep it from being interpreted as an option.

RATIONALE
       Since  umask affects the current shell execution environment, it is generally provided as a shell regular built-in. If it
       is called in a subshell or separate utility execution environment, such as one of the following:

           (umask 002)
           nohup umask ...
           find . −exec umask ... \;

       it does not affect the file mode creation mask of the environment of the caller.

       The description of the historical utility was modified to allow it to use the symbolic modes of  chmod.   The  −s  option
       used in early proposals was changed to −S because −s could be confused with a symbolic_mode form of mask referring to the
       S_ISUID and S_ISGID bits.

       The default output style is unspecified to permit implementors to provide migration to the new symbolic style at the time
       most  appropriate to their users. A −o flag to force octal mode output was omitted because the octal mode may not be suf‐
       ficient to specify all of the information that may be present in the file mode creation mask when more secure file access
       permission checks are implemented.

       It  has  been  suggested that trusted systems developers might appreciate ameliorating the requirement that the mode mask
       ``affects'' the file access permissions, since it seems access control lists might replace the mode mask to some  degree.
       The  wording  has been changed to say that it affects the file permission bits, and it leaves the details of the behavior
       of how they affect the file access permissions to the description in the System Interfaces volume of POSIX.1‐2008.

FUTURE DIRECTIONS
       None.

SEE ALSO
       Chapter 2, Shell Command Language, chmod

       The Base Definitions volume of POSIX.1‐2008, Chapter 8, Environment Variables, Section 12.2, Utility Syntax Guidelines

       The System Interfaces volume of POSIX.1‐2008, umask()

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013  Edition,  Standard  for
       Information  Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7, Copy‐
       right (C) 2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This  is  POSIX.1-2008
       with  the  2013  Technical  Corrigendum 1 applied.) In the event of any discrepancy between this version and the original
       IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the  referee  document.  The  original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any  typographical  or formatting errors that appear in this page are most likely to have been introduced during the con‐
       version of the source files to man page format. To report such errors,  see  https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                     UMASK(1P)
UNALIAS(1P)                                         POSIX Programmer's Manual                                        UNALIAS(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->

NAME
       unalias — remove alias definitions

SYNOPSIS
       unalias alias-name...

       unalias −a

DESCRIPTION
       The  unalias  utility  shall  remove the definition for each alias name specified. See Section 2.3.1, Alias Substitution.
       The aliases shall be removed from the current shell execution environment; see Section 2.12, Shell Execution Environment.

OPTIONS
       The unalias utility shall conform to the Base Definitions volume of POSIX.1‐2008, Section  12.2,  Utility  Syntax  Guide‐
       lines.

       The following option shall be supported:

       −a        Remove all alias definitions from the current shell execution environment.

OPERANDS
       The following operand shall be supported:

       alias-name
                 The name of an alias to be removed.

STDIN
       Not used.

INPUT FILES
       None.

<!-- 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 <=< ACCEPT -->ENVIRONMENT VARIABLES
       The following environment variables shall affect the execution of unalias:

       LANG      Provide  a  default  value for the internationalization variables that are unset or null. (See the Base Defini‐
                 tions volume of POSIX.1‐2008, Section 8.2, Internationalization Variables for the precedence of  international‐
                 ization variables used to determine the values of locale categories.)

       LC_ALL    If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_CTYPE  Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, sin‐
                 gle-byte as opposed to multi-byte characters in arguments).

       LC_MESSAGES
                 Determine the locale that should be used to affect the format and contents of diagnostic  messages  written  to
                 standard error.

       NLSPATH   Determine the location of message catalogs for the processing of LC_MESSAGES.<!-- ACCEPT >=> 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 -->

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       Not used.

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       None.

<!-- a42f9355-e63b-4205-ac0b-0b19b24faf9d <=< ACCEPT -->EXIT STATUS
       The following exit values shall be returned:

        0    Successful completion.

       &amp;gt;0    One of the alias-name operands specified did not represent a valid alias definition, or an error occurred.<!-- ACCEPT >=> a42f9355-e63b-4205-ac0b-0b19b24faf9d -->

CONSEQUENCES OF ERRORS
       Default.

       The following sections are informative.

APPLICATION USAGE
       Since unalias affects the current shell execution environment, it is generally provided as a shell regular built-in.

EXAMPLES
       None.

RATIONALE
       The unalias description is based on that from historical KornShell implementations.  Known differences exist between that
       and the C shell. The KornShell version was adopted to be consistent with all the other KornShell features in this  volume
       of POSIX.1‐2008, such as command line editing.

       The  −a  option is the equivalent of the unalias * form of the C shell and is provided to address security concerns about
       unknown aliases entering the environment of a user (or application) through the allowable  implementation-defined  prede‐
       fined  alias route or as a result of an ENV file. (Although unalias could be used to simplify the ``secure'' shell script
       shown in the command rationale, it does not obviate the need to quote all command names. An initial call  to  unalias  −a
       would have to be quoted in case there was an alias for unalias.)

FUTURE DIRECTIONS
       None.

SEE ALSO
       Chapter 2, Shell Command Language, alias

       The Base Definitions volume of POSIX.1‐2008, Chapter 8, Environment Variables, Section 12.2, Utility Syntax Guidelines

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions  of  this  text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013 Edition, Standard for
       Information Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7,  Copy‐
       right  (C)  2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This is POSIX.1-2008
       with the 2013 Technical Corrigendum 1 applied.) In the event of any discrepancy between this  version  and  the  original
       IEEE  and  The  Open  Group Standard, the original IEEE and The Open Group Standard is the referee document. The original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any typographical or formatting errors that appear in this page are most likely to have been introduced during  the  con‐
       version  of  the source files to man page format. To report such errors, see https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                   UNALIAS(1P)
UNAME(1)                                                  User Commands                                                 UNAME(1)

NAME
       uname - print system information

SYNOPSIS
       uname [OPTION]...

DESCRIPTION
       Print certain system information.  With no OPTION, same as -s.

       -a, --all
              print all information, in the following order, except omit -p and -i if unknown:

       -s, --kernel-name
              print the kernel name

       -n, --nodename
              print the network node hostname

       -r, --kernel-release
              print the kernel release

       -v, --kernel-version
              print the kernel version

       -m, --machine
              print the machine hardware name

       -p, --processor
              print the processor type (non-portable)

       -i, --hardware-platform
              print the hardware platform (non-portable)

       -o, --operating-system
              print the operating system

       --help display this help and exit

       --version
              output version information and exit

AUTHOR
       Written by David MacKenzie.

<!-- 30b0cf8a-458a-435b-a2e0-993472636e53 <=< ACCEPT -->REPORTING BUGS
       GNU coreutils online help: &amp;lt;http://www.gnu.org/software/coreutils/&amp;gt;
       Report uname translation bugs to &amp;lt;http://translationproject.org/team/&amp;gt;

COPYRIGHT
       Copyright    ©    2016   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3   or   later
       &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.
<!-- ACCEPT >=> 30b0cf8a-458a-435b-a2e0-993472636e53 -->
SEE ALSO
       arch(1), uname(2)

       Full documentation at: &amp;lt;http://www.gnu.org/software/coreutils/uname&amp;gt;
       or available locally via: info '(coreutils) uname invocation'

GNU coreutils 8.26                                        November 2016                                                 UNAME(1)
UNCOMPRESS(1P)                                      POSIX Programmer's Manual                                     UNCOMPRESS(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->

NAME
       uncompress — expand compressed data

SYNOPSIS
       uncompress [−cfv] [file...]

DESCRIPTION
       The  uncompress  utility  shall  restore files to their original state after they have been compressed using the compress
       utility. If no files are specified, the standard input shall be uncompressed to the  standard  output.  If  the  invoking
       process  has  appropriate privileges, the ownership, modes, access time, and modification time of the original file shall
       be preserved.

       This utility shall support the uncompressing of any files produced by the compress utility on  the  same  implementation.
       For  files  produced  by compress on other systems, uncompress supports 9 to 14-bit compression (see compress, −b); it is
       implementation-defined whether values of −b greater than 14 are supported.

OPTIONS
       The uncompress utility shall conform to the Base Definitions volume of POSIX.1‐2008, Section 12.2, Utility Syntax  Guide‐
       lines, except that Guideline 1 does apply since the utility name has ten letters.

       The following options shall be supported:

       −c        Write to standard output; no files are changed.

       −f        Do  not  prompt  for overwriting files. Except when run in the background, if −f is not given the user shall be
                 prompted as to whether an existing file should be overwritten. If the standard input is not a terminal  and  −f
                 is not given, uncompress shall write a diagnostic message to standard error and exit with a status greater than
                 zero.

       −v        Write messages to standard error concerning the expansion of each file.

OPERANDS
       The following operand shall be supported:

       file      A pathname of a file. If file already has the .Z suffix specified, it shall be used as the input file  and  the
                 output  file  shall  be named file with the .Z suffix removed. Otherwise, file shall be used as the name of the
                 output file and file with the .Z suffix appended shall be used as the input file.

STDIN
       The standard input shall be used only if no file operands are specified, or if a file operand is '−'.

INPUT FILES
       Input files shall be in the format produced by the compress utility.

<!-- 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 <=< ACCEPT -->ENVIRONMENT VARIABLES
       The following environment variables shall affect the execution of uncompress:

       LANG      Provide a default value for the internationalization variables that are unset or null. (See  the  Base  Defini‐
                 tions  volume of POSIX.1‐2008, Section 8.2, Internationalization Variables for the precedence of international‐
                 ization variables used to determine the values of locale categories.)

       LC_ALL    If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_CTYPE  Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, sin‐
                 gle-byte as opposed to multi-byte characters in arguments).

       LC_MESSAGES
                 Determine  the  locale  that should be used to affect the format and contents of diagnostic messages written to
                 standard error.

       NLSPATH   Determine the location of message catalogs for the processing of LC_MESSAGES.<!-- ACCEPT >=> 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 -->

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       When there are no file operands or the −c option is specified, the uncompressed output is written to standard output.

STDERR
       Prompts shall be written to the standard error output under the conditions specified in the DESCRIPTION and OPTIONS  sec‐
       tions.  The  prompts  shall contain the file pathname, but their format is otherwise unspecified. Otherwise, the standard
       error output shall be used only for diagnostic messages.

OUTPUT FILES
       Output files are the same as the respective input files to compress.

EXTENDED DESCRIPTION
       None.

<!-- a42f9355-e63b-4205-ac0b-0b19b24faf9d <=< ACCEPT -->EXIT STATUS
       The following exit values shall be returned:

        0    Successful completion.

       &amp;gt;0    An error occurred.<!-- ACCEPT >=> a42f9355-e63b-4205-ac0b-0b19b24faf9d -->

CONSEQUENCES OF ERRORS
       The input file remains unmodified.

       The following sections are informative.

APPLICATION USAGE
       The limit of 14 on the compress −b bits argument is to achieve  portability  to  all  systems  (within  the  restrictions
       imposed by the lack of an explicit published file format). Some implementations based on 16-bit architectures cannot sup‐
       port 15 or 16-bit uncompression.

EXAMPLES
       None.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       compress, zcat

       The Base Definitions volume of POSIX.1‐2008, Chapter 8, Environment Variables, Section 12.2, Utility Syntax Guidelines

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013  Edition,  Standard  for
       Information  Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7, Copy‐
       right (C) 2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This  is  POSIX.1-2008
       with  the  2013  Technical  Corrigendum 1 applied.) In the event of any discrepancy between this version and the original
       IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the  referee  document.  The  original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any  typographical  or formatting errors that appear in this page are most likely to have been introduced during the con‐
       version of the source files to man page format. To report such errors,  see  https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                UNCOMPRESS(1P)
UNEXPAND(1)                                               User Commands                                              UNEXPAND(1)

NAME
       unexpand - convert spaces to tabs

SYNOPSIS
       unexpand [OPTION]... [FILE]...

DESCRIPTION
       Convert blanks in each FILE to tabs, writing to standard output.

       With no FILE, or when FILE is -, read standard input.

       Mandatory arguments to long options are mandatory for short options too.

       -a, --all
              convert all blanks, instead of just initial blanks

       --first-only
              convert only leading sequences of blanks (overrides -a)

       -t, --tabs=N
              have tabs N characters apart instead of 8 (enables -a)

       -t, --tabs=LIST
              use comma separated LIST of tab positions (enables -a)

       --help display this help and exit

       --version
              output version information and exit

AUTHOR
       Written by David MacKenzie.

<!-- 30b0cf8a-458a-435b-a2e0-993472636e53 <=< ACCEPT -->REPORTING BUGS
       GNU coreutils online help: &amp;lt;http://www.gnu.org/software/coreutils/&amp;gt;
       Report unexpand translation bugs to &amp;lt;http://translationproject.org/team/&amp;gt;

COPYRIGHT
       Copyright    ©    2016   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3   or   later
       &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.<!-- ACCEPT >=> 30b0cf8a-458a-435b-a2e0-993472636e53 -->

SEE ALSO
       expand(1)

       Full documentation at: &amp;lt;http://www.gnu.org/software/coreutils/unexpand&amp;gt;
       or available locally via: info '(coreutils) unexpand invocation'

GNU coreutils 8.26                                        November 2016                                              UNEXPAND(1)
UNGET(1P)                                           POSIX Programmer's Manual                                          UNGET(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->

NAME
       unget — undo a previous get of an SCCS file (DEVELOPMENT)

SYNOPSIS
       unget [−ns] [−r SID] file...

DESCRIPTION
       The unget utility shall reverse the effect of a get −e done prior to creating the intended new delta.

OPTIONS
       The unget utility shall conform to the Base Definitions volume of POSIX.1‐2008, Section 12.2, Utility Syntax Guidelines.

       The following options shall be supported:

       −r SID    Uniquely  identify which delta is no longer intended. (This would have been specified by get as the new delta.)
                 The use of this option is necessary only if two or more outstanding get commands for editing on the  same  SCCS
                 file were done by the same person (login name).

       −s        Suppress the writing to standard output of the intended delta's SID.

       −n        Retain the file that was obtained by get, which would normally be removed from the current directory.

OPERANDS
       The following operands shall be supported:

       file      A  pathname  of an existing SCCS file or a directory. If file is a directory, the unget utility shall behave as
                 though each file in the directory were specified as a named file, except that non-SCCS files (last component of
                 the pathname does not begin with s.)  and unreadable files shall be silently ignored.

                 If exactly one file operand appears, and it is '−', the standard input shall be read; each line of the standard
                 input shall be taken to be the name of an SCCS file to be processed. Non-SCCS files and unreadable files  shall
                 be silently ignored.

STDIN
       The  standard input shall be a text file used only when the file operand is specified as '−'.  Each line of the text file
       shall be interpreted as an SCCS pathname.

INPUT FILES
       Any SCCS files processed shall be files of an unspecified format.

<!-- 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 <=< ACCEPT -->ENVIRONMENT VARIABLES
       The following environment variables shall affect the execution of unget:

       LANG      Provide a default value for the internationalization variables that are unset or null. (See  the  Base  Defini‐
                 tions  volume of POSIX.1‐2008, Section 8.2, Internationalization Variables for the precedence of international‐
                 ization variables used to determine the values of locale categories.)

       LC_ALL    If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_CTYPE  Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, sin‐
                 gle-byte as opposed to multi-byte characters in arguments and input files).

       LC_MESSAGES
                 Determine  the  locale  that should be used to affect the format and contents of diagnostic messages written to
                 standard error.

       NLSPATH   Determine the location of message catalogs for the processing of LC_MESSAGES.<!-- ACCEPT >=> 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 -->

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       The standard output shall consist of a line for each file, in the following format:

           "%s\n", &amp;lt;SID removed from file&amp;gt;

       If there is more than one named file or if a directory or standard input is named, each pathname shall be written  before
       each of the preceding lines:

           "\n%s:\n", &amp;lt;pathname&amp;gt;

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       Any  SCCS  files  updated  shall  be  files  of an unspecified format.  During processing of a file, a locking z-file, as
       described in get, and a q-file (a working copy of the p-file), may be created and deleted.  The  p-file  and  g-file,  as
       described in get, shall be deleted.

EXTENDED DESCRIPTION
       None.

<!-- a42f9355-e63b-4205-ac0b-0b19b24faf9d <=< ACCEPT -->EXIT STATUS
       The following exit values shall be returned:

        0    Successful completion.

       &amp;gt;0    An error occurred.<!-- ACCEPT >=> a42f9355-e63b-4205-ac0b-0b19b24faf9d -->

CONSEQUENCES OF ERRORS
       Default.

       The following sections are informative.

APPLICATION USAGE
       None.

EXAMPLES
       None.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       delta, get, sact

       The Base Definitions volume of POSIX.1‐2008, Chapter 8, Environment Variables, Section 12.2, Utility Syntax Guidelines

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions  of  this  text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013 Edition, Standard for
       Information Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7,  Copy‐
       right  (C)  2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This is POSIX.1-2008
       with the 2013 Technical Corrigendum 1 applied.) In the event of any discrepancy between this  version  and  the  original
       IEEE  and  The  Open  Group Standard, the original IEEE and The Open Group Standard is the referee document. The original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any typographical or formatting errors that appear in this page are most likely to have been introduced during  the  con‐
       version  of  the source files to man page format. To report such errors, see https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                     UNGET(1P)
UNIQ(1)                                                   User Commands                                                  UNIQ(1)

NAME
       uniq - report or omit repeated lines

SYNOPSIS
       uniq [OPTION]... [INPUT [OUTPUT]]

DESCRIPTION
       Filter adjacent matching lines from INPUT (or standard input), writing to OUTPUT (or standard output).

       With no options, matching lines are merged to the first occurrence.

       Mandatory arguments to long options are mandatory for short options too.

       -c, --count
              prefix lines by the number of occurrences

       -d, --repeated
              only print duplicate lines, one for each group

       -D     print all duplicate lines

       --all-repeated[=METHOD]
              like -D, but allow separating groups with an empty line; METHOD={none(default),prepend,separate}

       -f, --skip-fields=N
              avoid comparing the first N fields

       --group[=METHOD]
              show all items, separating groups with an empty line; METHOD={separate(default),prepend,append,both}

       -i, --ignore-case
              ignore differences in case when comparing

       -s, --skip-chars=N
              avoid comparing the first N characters

       -u, --unique
              only print unique lines

       -z, --zero-terminated
              line delimiter is NUL, not newline

       -w, --check-chars=N
              compare no more than N characters in lines

       --help display this help and exit

       --version
              output version information and exit

       A field is a run of blanks (usually spaces and/or TABs), then non-blank characters.  Fields are skipped before chars.

       Note: 'uniq' does not detect repeated lines unless they are adjacent.  You may want to sort the input first, or use 'sort
       -u' without 'uniq'.  Also, comparisons honor the rules specified by 'LC_COLLATE'.

AUTHOR
       Written by Richard M. Stallman and David MacKenzie.

<!-- 30b0cf8a-458a-435b-a2e0-993472636e53 <=< ACCEPT -->REPORTING BUGS
       GNU coreutils online help: &amp;lt;http://www.gnu.org/software/coreutils/&amp;gt;
       Report uniq translation bugs to &amp;lt;http://translationproject.org/team/&amp;gt;

COPYRIGHT
       Copyright   ©   2016   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3    or    later
       &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.<!-- ACCEPT >=> 30b0cf8a-458a-435b-a2e0-993472636e53 -->

SEE ALSO
       comm(1), join(1), sort(1)

       Full documentation at: &amp;lt;http://www.gnu.org/software/coreutils/uniq&amp;gt;
       or available locally via: info '(coreutils) uniq invocation'

GNU coreutils 8.26                                        November 2016                                                  UNIQ(1)
UNLINK(1)                                                 User Commands                                                UNLINK(1)

NAME
       unlink - call the unlink function to remove the specified file

SYNOPSIS
       unlink FILE
       unlink OPTION

DESCRIPTION
       Call the unlink function to remove the specified FILE.

       --help display this help and exit

       --version
              output version information and exit

AUTHOR
       Written by Michael Stone.

<!-- 30b0cf8a-458a-435b-a2e0-993472636e53 <=< ACCEPT -->REPORTING BUGS
       GNU coreutils online help: &amp;lt;http://www.gnu.org/software/coreutils/&amp;gt;
       Report unlink translation bugs to &amp;lt;http://translationproject.org/team/&amp;gt;

COPYRIGHT
       Copyright    ©    2016   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3   or   later
       &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.<!-- ACCEPT >=> 30b0cf8a-458a-435b-a2e0-993472636e53 -->

SEE ALSO
       unlink(2)

       Full documentation at: &amp;lt;http://www.gnu.org/software/coreutils/unlink&amp;gt;
       or available locally via: info '(coreutils) unlink invocation'

GNU coreutils 8.26                                        November 2016                                                UNLINK(1)
UNSET(1P)                                           POSIX Programmer's Manual                                          UNSET(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->

NAME
       unset — unset values and attributes of variables and functions

SYNOPSIS
       unset [−fv] name...

DESCRIPTION
       Each variable or function specified by name shall be unset.

       If −v is specified, name refers to a variable name and the shell shall unset it and remove it from the environment. Read-
       only variables cannot be unset.

       If −f is specified, name refers to a function and the shell shall unset the function definition.

       If neither −f nor −v is specified, name refers to a variable; if a variable by that name does not exist, it  is  unspeci‐
       fied whether a function by that name, if any, shall be unset.

       Unsetting  a  variable  or  function  that was not previously set shall not be considered an error and does not cause the
       shell to abort.

       The unset special built-in shall support the Base Definitions volume of POSIX.1‐2008, Section 12.2, Utility Syntax Guide‐
       lines.

       Note that:

           VARIABLE=

       is  not equivalent to an unset of VARIABLE; in the example, VARIABLE is set to "".  Also, the variables that can be unset
       should not be misinterpreted to include the special parameters (see Section 2.5.2, Special Parameters).

OPTIONS
       See the DESCRIPTION.

OPERANDS
       See the DESCRIPTION.

<!-- fe96d119-27ce-4a62-99a9-ff5840fe1a84 <=< ACCEPT -->STDIN
       Not used.

INPUT FILES
       None.

ENVIRONMENT VARIABLES
       None.

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       Not used.

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       None.

EXIT STATUS
        0    All name operands were successfully unset.

       &amp;gt;0    At least one name could not be unset.

CONSEQUENCES OF ERRORS
       Default.<!-- ACCEPT >=> fe96d119-27ce-4a62-99a9-ff5840fe1a84 -->

       The following sections are informative.

APPLICATION USAGE
       None.

EXAMPLES
       Unset VISUAL variable:

           unset −v VISUAL

       Unset the functions foo and bar:

           unset −f foo bar

RATIONALE
       Consideration was given to omitting the −f option in favor of an unfunction utility, but the standard developers  decided
       to retain historical practice.

       The  −v  option  was  introduced because System V historically used one name space for both variables and functions. When
       unset is used without options, System V historically unset either a function or a variable, and there  was  no  confusion
       about  which one was intended.  A portable POSIX application can use unset without an option to unset a variable, but not
       a function; the −f option must be used.

FUTURE DIRECTIONS
       None.

SEE ALSO
       Section 2.14, Special Built-In Utilities

       The Base Definitions volume of POSIX.1‐2008, Section 12.2, Utility Syntax Guidelines

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013  Edition,  Standard  for
       Information  Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7, Copy‐
       right (C) 2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This  is  POSIX.1-2008
       with  the  2013  Technical  Corrigendum 1 applied.) In the event of any discrepancy between this version and the original
       IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the  referee  document.  The  original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any  typographical  or formatting errors that appear in this page are most likely to have been introduced during the con‐
       version of the source files to man page format. To report such errors,  see  https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                     UNSET(1P)
uucp(1)                                              General Commands Manual                                             uucp(1)

NAME
       uucp - Unix to Unix copy

SYNOPSIS
       uucp [ options ] source-file destination-file

       uucp [ options ] source-file... destination-directory

DESCRIPTION
       The uucp command copies files between systems.  Each file argument is either a pathname on the local machine or is of the
       form

              system!path

       which is interpreted as being on a remote system.  In the first form, the contents of the first file are  copied  to  the
       second.  In the second form, each source file is copied into the destination directory.

       A file be transferred to or from system2 via system1 by using

              system1!system2!path.

       Any  pathname  that  does  not  begin  with / or ~ will be appended to the current directory (unless the -W or --noexpand
       option is used); this resulting path will not necessarily exist on a remote system.  A pathname beginning with a simple ~
       starts at the UUCP public directory; a pathname beginning with ~name starts at the home directory of the named user.  The
       ~ is interpreted on the appropriate system.  Note that some shells will interpret a simple ~ to the local home  directory
       before uucp sees it; to avoid this the ~ must be quoted.

       Shell  metacharacters  ?  *  [ ] are interpreted on the appropriate system, assuming they are quoted to prevent the shell
       from interpreting them first.

       The copy does not take place immediately, but is queued up for the uucico (8) daemon; the daemon is  started  immediately
       unless  the -r or --nouucico switch is given.  In any case, the next time the remote system is called the file(s) will be
       copied.

OPTIONS
       The following options may be given to uucp.

       -c, --nocopy
            Do not copy local source files to the spool directory.  If they are removed before being processed by the uucico (8)
            daemon, the copy will fail.  The files must be readable by the uucico (8) daemon, and by the invoking user.

       -C, --copy
            Copy local source files to the spool directory.  This is the default.

       -d, --directories
            Create all necessary directories when doing the copy.  This is the default.

       -f, --nodirectories
            If any necessary directories do not exist for the destination path, abort the copy.

       -R, --recursive
            If  any  of  the  source  file names are directories, copy their contents recursively to the destination (which must
            itself be a directory).

       -g grade, --grade grade
            Set the grade of the file transfer command.  Jobs of a higher grade are executed first.  Grades run 0 ... 9 A ...  Z
            a ... z from high to low.

       -m, --mail
            Report completion or failure of the file transfer by mail (1).

       -n user, --notify user
            Report completion or failure of the file transfer by mail (1) to the named user on the remote system.

       -r, --nouucico
            Do not start uucico (8) daemon immediately; merely queue up the file transfer for later execution.

       -j, --jobid
            Print jobid on standard output.  The job may be later cancelled by passing the jobid to the -k switch of uustat (1).
            It is possible for some complex operations to produce more than one jobid, in which case each will be printed  on  a
            separate line.  For example
                 uucp sys1!~user1/file1 sys2!~user2/file2 ~user3
            will generate two separate jobs, one for the system sys1 and one for the system sys2.

       -W, --noexpand
            Do not prepend remote relative path names with the current directory.

       -t, --uuto
            This  option  is used by the uuto shell script.  It causes uucp to interpret the final argument as system!user.  The
            file(s) are sent to ~/receive/USER/LOCAL on the remote system, where USER is from the final argument  and  LOCAL  is
            the local UUCP system name.  Also, uucp will act as though --notify user were specified.

       -x type, --debug type
            Turn  on  particular  debugging  types.   The following types are recognized: abnormal, chat, handshake, uucp-proto,
            proto, port, config, spooldir, execute, incoming, outgoing.  Only abnormal, config, spooldir and execute  are  mean‐
            ingful for uucp.

            Multiple  types  may  be given, separated by commas, and the --debug option may appear multiple times.  A number may
            also be given, which will turn on that many types from the foregoing list; for example, --debug 2 is  equivalent  to
            --debug abnormal,chat.

       -I file, --config file
            Set configuration file to use.  This option may not be available, depending upon how uucp was compiled.

       -v, --version
            Report version information and exit.

       --help
            Print a help message and exit.

SEE ALSO
       mail(1), uux(1), uustat(1), uucico(8)

BUGS
       Some of the options are dependent on the capabilities of the uucico (8) daemon on the remote system.

       The -n and -m switches do not work when transferring a file from one remote system to another.

       File modes are not preserved, except for the execute bit.  The resulting file is owned by the uucp user.

AUTHOR
       Ian Lance Taylor &amp;lt;ian@airs.com&amp;gt;

                                                        Taylor UUCP 1.07                                                 uucp(1)
UUDECODE(1P)                                        POSIX Programmer's Manual                                       UUDECODE(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->

NAME
       uudecode — decode a binary file

SYNOPSIS
       uudecode [−o outfile] [file]

DESCRIPTION
       The  uudecode  utility  shall  read  a file, or standard input if no file is specified, that includes data created by the
       uuencode utility. The uudecode utility shall scan the input file, searching for data compatible with one of  the  formats
       specified  in  uuencode,  and  attempt  to  create  or  overwrite the file described by the data (or overridden by the −o
       option). The pathname shall be contained in the data or specified by the −o option. The file access permission  bits  and
       contents for the file to be produced shall be contained in that data. The mode bits of the created file (other than stan‐
       dard output) shall be set from the file access permission bits contained in the data; that is, other  attributes  of  the
       mode,  including  the  file mode creation mask (see umask), shall not affect the file being produced. If either of the op
       characters '+' and '−' (see chmod) are specified in symbolic mode, the initial mode on which those operations  are  based
       is unspecified.

       If  the  pathname  of  the file to be produced exists, and the user does not have write permission on that file, uudecode
       shall terminate with an error. If the pathname of the file to be produced exists, and the user has  write  permission  on
       that file, the existing file shall be overwritten.

       If  the  input data was produced by uuencode on a system with a different number of bits per byte than on the target sys‐
       tem, the results of uudecode are unspecified.

OPTIONS
       The uudecode utility shall conform to the Base Definitions volume of POSIX.1‐2008, Section 12.2,  Utility  Syntax  Guide‐
       lines.

       The following option shall be supported by the implementation:

       −o outfile
                 A pathname of a file that shall be used instead of any pathname contained in the input data. Specifying an out‐
                 file option-argument of /dev/stdout shall indicate standard output.

OPERANDS
       The following operand shall be supported:

       file      The pathname of a file containing the output of uuencode.

STDIN
       See the INPUT FILES section.

INPUT FILES
       The input files shall be files containing the output of uuencode.

<!-- 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 <=< ACCEPT -->ENVIRONMENT VARIABLES
       The following environment variables shall affect the execution of uudecode:

       LANG      Provide a default value for the internationalization variables that are unset or null. (See  the  Base  Defini‐
                 tions  volume of POSIX.1‐2008, Section 8.2, Internationalization Variables for the precedence of international‐
                 ization variables used to determine the values of locale categories.)

       LC_ALL    If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_CTYPE  Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, sin‐
                 gle-byte as opposed to multi-byte characters in arguments and input files).

       LC_MESSAGES
                 Determine  the  locale  that should be used to affect the format and contents of diagnostic messages written to
                 standard error.

       NLSPATH   Determine the location of message catalogs for the processing of LC_MESSAGES.<!-- ACCEPT >=> 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 -->

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       If the file data header encoded by uuencode is − or /dev/stdout, or the −o /dev/stdout option overrides  the  file  data,
       the standard output shall be in the same format as the file originally encoded by uuencode.  Otherwise, the standard out‐
       put shall not be used.

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       The output file shall be in the same format as the file originally encoded by uuencode.

EXTENDED DESCRIPTION
       None.

<!-- a42f9355-e63b-4205-ac0b-0b19b24faf9d <=< ACCEPT -->EXIT STATUS
       The following exit values shall be returned:

        0    Successful completion.

       &amp;gt;0    An error occurred.<!-- ACCEPT >=> a42f9355-e63b-4205-ac0b-0b19b24faf9d -->

CONSEQUENCES OF ERRORS
       Default.

       The following sections are informative.

APPLICATION USAGE
       The user who is invoking uudecode must have write permission on any file being created.

       The output of uuencode is essentially an encoded bit stream that is not cognizant of byte boundaries. It is possible that
       a 9-bit byte target machine can process input from an 8-bit source, if it is aware of the requirement, but the reverse is
       unlikely to be satisfying. Of course, the only data that is meaningful for such a transfer between architectures is  gen‐
       erally character data.

EXAMPLES
       None.

RATIONALE
       Input  files are not necessarily text files, as stated by an early proposal. Although the uuencode output is a text file,
       that output could have been wrapped within another file or mail message that is not a text file.

       The −o option is not historical practice, but was added at the request of WG15 so that the user could override the target
       pathname without having to edit the input data itself.

       In  early  drafts,  the  [−o outfile] option-argument allowed the use of − to mean standard output. The symbol − has only
       been used previously in POSIX.1‐2008 as a standard input indicator.  The standard developers did not wish to overload the
       meaning of − in this manner. The /dev/stdout concept exists on most modern systems. The /dev/stdout syntax does not refer
       to a new special file. It is just a magic cookie to specify standard output.

FUTURE DIRECTIONS
       None.

SEE ALSO
       chmod, umask, uuencode

       The Base Definitions volume of POSIX.1‐2008, Chapter 8, Environment Variables, Section 12.2, Utility Syntax Guidelines

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013  Edition,  Standard  for
       Information  Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7, Copy‐
       right (C) 2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This  is  POSIX.1-2008
       with  the  2013  Technical  Corrigendum 1 applied.) In the event of any discrepancy between this version and the original
       IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the  referee  document.  The  original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any  typographical  or formatting errors that appear in this page are most likely to have been introduced during the con‐
       version of the source files to man page format. To report such errors,  see  https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                  UUDECODE(1P)
UUENCODE(1P)                                        POSIX Programmer's Manual                                       UUENCODE(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->

NAME
       uuencode — encode a binary file

SYNOPSIS
       uuencode [−m] [file] decode_pathname

DESCRIPTION
       The  uuencode  utility shall write an encoded version of the named input file, or standard input if no file is specified,
       to standard output. The output shall be encoded using one of the algorithms described in the  STDOUT  section  and  shall
       include  the file access permission bits (in chmod octal or symbolic notation) of the input file and the decode_pathname,
       for re-creation of the file on another system that conforms to this volume of POSIX.1‐2008.

OPTIONS
       The uuencode utility shall conform to the Base Definitions volume of POSIX.1‐2008, Section 12.2,  Utility  Syntax  Guide‐
       lines.

       The following option shall be supported by the implementation:

       −m        Encode  the output using the MIME Base64 algorithm described in STDOUT.  If −m is not specified, the historical
                 algorithm described in STDOUT shall be used.

OPERANDS
       The following operands shall be supported:

       decode_pathname
                 The pathname of the file  into  which  the  uudecode  utility  shall  place  the  decoded  file.  Specifying  a
                 decode_pathname  operand  of  /dev/stdout  shall indicate that uudecode is to use standard output. If there are
                 characters in decode_pathname that are not in the portable filename character set the results are unspecified.

       file      A pathname of the file to be encoded.

STDIN
       See the INPUT FILES section.

INPUT FILES
       Input files can be files of any type.

<!-- 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 <=< ACCEPT -->ENVIRONMENT VARIABLES
       The following environment variables shall affect the execution of uuencode:

       LANG      Provide a default value for the internationalization variables that are unset or null. (See  the  Base  Defini‐
                 tions  volume of POSIX.1‐2008, Section 8.2, Internationalization Variables for the precedence of international‐
                 ization variables used to determine the values of locale categories.)

       LC_ALL    If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_CTYPE  Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, sin‐
                 gle-byte as opposed to multi-byte characters in arguments and input files).

       LC_MESSAGES
                 Determine  the  locale  that should be used to affect the format and contents of diagnostic messages written to
                 standard error.

       NLSPATH   Determine the location of message catalogs for the processing of LC_MESSAGES.<!-- ACCEPT >=> 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 -->

ASYNCHRONOUS EVENTS
       Default.

STDOUT
   uuencode Base64 Algorithm
       The standard output shall be a text file (encoded in the character set of the current locale) that begins with the line:

           "begin-base64 %s %s\n", &amp;lt;mode&amp;gt;, &amp;lt;decode_pathname&amp;gt;

       and ends with the line:

           "====\n"

       In both cases, the lines shall have no preceding or trailing &amp;lt;blank&amp;gt; characters.

       The encoding process represents 24-bit groups of input bits as output strings of four encoded characters. Proceeding from
       left  to  right,  a 24-bit input group shall be formed by concatenating three 8-bit input groups. Each 24-bit input group
       then shall be treated as four concatenated 6-bit groups, each of which shall be translated into a  single  digit  in  the
       Base64  alphabet. When encoding a bit stream via the Base64 encoding, the bit stream shall be presumed to be ordered with
       the most-significant bit first. That is, the first bit in the stream shall be the high-order bit in the first  byte,  and
       the  eighth  bit  shall  be  the low-order bit in the first byte, and so on. Each 6-bit group is used as an index into an
       array of 64 printable characters, as shown in Table 4-22, uuencode Base64 Values.

                                                  Table 4-22: uuencode Base64 Values

                              ┌──────┬──────────┬┬──────┬──────────┬┬──────┬──────────┬┬──────┬──────────┐
                              │Value │ Encoding ││Value │ Encoding ││Value │ Encoding ││Value │ Encoding │
                              ├──────┼──────────┼┼──────┼──────────┼┼──────┼──────────┼┼──────┼──────────┤
                              │  0   │    A     ││ 17   │    R     ││ 34   │    i     ││ 51   │    z     │
                              │  1   │    B     ││ 18   │    S     ││ 35   │    j     ││ 52   │    0     │
                              │  2   │    C     ││ 19   │    T     ││ 36   │    k     ││ 53   │    1     │
                              │  3   │    D     ││ 20   │    U     ││ 37   │    l     ││ 54   │    2     │
                              │  4   │    E     ││ 21   │    V     ││ 38   │    m     ││ 55   │    3     │
                              │  5   │    F     ││ 22   │    W     ││ 39   │    n     ││ 56   │    4     │
                              │  6   │    G     ││ 23   │    X     ││ 40   │    o     ││ 57   │    5     │
                              │  7   │    H     ││ 24   │    Y     ││ 41   │    p     ││ 58   │    6     │
                              │  8   │    I     ││ 25   │    Z     ││ 42   │    q     ││ 59   │    7     │
                              │  9   │    J     ││ 26   │    a     ││ 43   │    r     ││ 60   │    8     │
                              │ 10   │    K     ││ 27   │    b     ││ 44   │    s     ││ 61   │    9     │
                              │ 11   │    L     ││ 28   │    c     ││ 45   │    t     ││ 62   │    +     │
                              │ 12   │    M     ││ 29   │    d     ││ 46   │    u     ││ 63   │    /     │
                              │ 13   │    N     ││ 30   │    e     ││ 47   │    v     ││      │          │
                              │ 14   │    O     ││ 31   │    f     ││ 48   │    w     ││(pad) │    =     │
                              │ 15   │    P     ││ 32   │    g     ││ 49   │    x     ││      │          │
                              │ 16   │    Q     ││ 33   │    h     ││ 50   │    y     ││      │          │
                              └──────┴──────────┴┴──────┴──────────┴┴──────┴──────────┴┴──────┴──────────┘
       The character referenced by the index shall be placed in the output string.

       The output stream (encoded bytes) shall be represented in lines of no more than 76 characters each. All  line  breaks  or
       other characters not found in the table shall be ignored by decoding software (see uudecode).

       Special processing shall be performed if fewer than 24 bits are available at the end of a message or encapsulated part of
       a message. A full encoding quantum shall always be completed at the end of a message. When fewer than 24 input  bits  are
       available  in  an input group, zero bits shall be added (on the right) to form an integral number of 6-bit groups. Output
       character positions that are not required to represent actual input data shall be set to the character  '='.   Since  all
       Base64 input is an integral number of octets, only the following cases can arise:

        1. The  final quantum of encoding input is an integral multiple of 24 bits; here, the final unit of encoded output shall
           be an integral multiple of 4 characters with no '=' padding.

        2. The final quantum of encoding input is exactly 16 bits; here, the final unit of encoded output shall be three charac‐
           ters followed by one '=' padding character.

        3. The final quantum of encoding input is exactly 8 bits; here, the final unit of encoded output shall be two characters
           followed by two '=' padding characters.

       A terminating "====" evaluates to nothing and denotes the end of the encoded data.

   uuencode Historical Algorithm
       The standard output shall be a text file (encoded in the character set of the current locale) that begins with the line:

           "begin %s %s\n" &amp;lt;mode&amp;gt;, &amp;lt;decode_pathname&amp;gt;

       and ends with the line:

           "end\n"

       In both cases, the lines shall have no preceding or trailing &amp;lt;blank&amp;gt; characters.

       The algorithm that shall be used for lines in between begin and end takes three octets as input and writes  four  charac‐
       ters  of output by splitting the input at six-bit intervals into four octets, containing data in the lower six bits only.
       These octets shall be converted to characters by adding a value of 0x20 to each octet, so that each octet is in the range
       [0x20,0x5f],  and  then  it  shall be assumed to represent a printable character in the ISO/IEC 646:1991 standard encoded
       character set. It then shall be translated into the corresponding character codes for the codeset in use in  the  current
       locale.  (For  example, the octet 0x41, representing 'A', would be translated to 'A' in the current codeset, such as 0xc1
       if it were EBCDIC.)

       Where the bits of two octets are combined, the least significant bits of the first octet shall be shifted left  and  com‐
       bined  with the most significant bits of the second octet shifted right. Thus the three octets A, B, C shall be converted
       into the four octets:

           0x20 + (( A &amp;gt;&amp;gt; 2                    ) &amp; 0x3F)
           0x20 + (((A &amp;lt;&amp;lt; 4) | ((B &amp;gt;&amp;gt; 4) &amp; 0xF)) &amp; 0x3F)
           0x20 + (((B &amp;lt;&amp;lt; 2) | ((C &amp;gt;&amp;gt; 6) &amp; 0x3)) &amp; 0x3F)
           0x20 + (( C                         ) &amp; 0x3F)

       These octets then shall be translated into the local character set.

       Each encoded line contains a length character, equal to the number of characters to be decoded plus  0x20  translated  to
       the  local  character  set  as  described  above,  followed by the encoded characters. The maximum number of octets to be
       encoded on each line shall be 45.

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       None.

<!-- a42f9355-e63b-4205-ac0b-0b19b24faf9d <=< ACCEPT -->EXIT STATUS
       The following exit values shall be returned:

        0    Successful completion.

       &amp;gt;0    An error occurred.<!-- ACCEPT >=> a42f9355-e63b-4205-ac0b-0b19b24faf9d -->

CONSEQUENCES OF ERRORS
       Default.

       The following sections are informative.

APPLICATION USAGE
       The file is expanded by 35 percent (each three octets become four, plus control information) causing it to take longer to
       transmit.

       Since  this  utility  is intended to create files to be used for data interchange between systems with possibly different
       codesets, and to represent binary data as a text file, the ISO/IEC 646:1991 standard was chosen for  a  midpoint  in  the
       algorithm  as a known reference point. The output from uuencode is a text file on the local system. If the output were in
       the ISO/IEC 646:1991 standard codeset, it might not be a text file (at least because the &amp;lt;newline&amp;gt; characters  might  not
       match),  and  the  goal  of creating a text file would be defeated. If this text file was then carried to another machine
       with the same codeset, it would be perfectly compatible with that system's uudecode.  If it was transmitted over  a  mail
       system  or sent to a machine with a different codeset, it is assumed that, as for every other text file, some translation
       mechanism would convert it (by the time it reached a user on the other system) into an appropriate codeset. This transla‐
       tion  only  makes sense from the local codeset, not if the file has been put into a ISO/IEC 646:1991 standard representa‐
       tion first. Similarly, files processed by uuencode can be placed in pax archives, intermixed with other text files in the
       same codeset.

EXAMPLES
       None.

RATIONALE
       A  new algorithm was added at the request of the international community to parallel work in RFC 2045 (MIME). As with the
       historical uuencode format, the Base64 Content-Transfer-Encoding is designed to represent arbitrary sequences  of  octets
       in  a  form that is not humanly readable. A 65-character subset of the ISO/IEC 646:1991 standard is used, enabling 6 bits
       to be represented per printable character. (The extra 65th character, '=', is used to signify a special processing  func‐
       tion.)

       This  subset  has the important property that it is represented identically in all versions of the ISO/IEC 646:1991 stan‐
       dard, including US ASCII, and all characters in the subset are also represented identically in all  versions  of  EBCDIC.
       The  historical uuencode algorithm does not share this property, which is the reason that a second algorithm was added to
       the ISO POSIX‐2 standard.

       The string "====" was used for the termination instead of the end used in the original format because  the  latter  is  a
       string that could be valid encoded input.

       In  an  early  draft,  the  −m  option  was  named −b (for Base64), but it was renamed to reflect its relationship to the
       RFC 2045. A −u was also present to invoke the default algorithm, but since this was not historical practice, it was omit‐
       ted as being unnecessary.

       See the RATIONALE section in uudecode for the derivation of the /dev/stdout symbol.

FUTURE DIRECTIONS
       None.

SEE ALSO
       chmod, mailx, uudecode

       The Base Definitions volume of POSIX.1‐2008, Chapter 8, Environment Variables, Section 12.2, Utility Syntax Guidelines

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions  of  this  text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013 Edition, Standard for
       Information Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7,  Copy‐
       right  (C)  2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This is POSIX.1-2008
       with the 2013 Technical Corrigendum 1 applied.) In the event of any discrepancy between this  version  and  the  original
       IEEE  and  The  Open  Group Standard, the original IEEE and The Open Group Standard is the referee document. The original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any typographical or formatting errors that appear in this page are most likely to have been introduced during  the  con‐
       version  of  the source files to man page format. To report such errors, see https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                  UUENCODE(1P)
uustat(1)                                            General Commands Manual                                           uustat(1)

NAME
       uustat - UUCP status inquiry and control

SYNOPSIS
       uustat -a

       uustat --all

       uustat  [ -eKRiMNQ ] [ -sS system ] [ -uU user ] [ -cC command ] [ -oy hours ] [ -B lines ] [ --executions ] [ --kill-all
       ] [ --rejuvenate-all ] [ --prompt ] [ --mail ] [ --notify ] [ --no-list ] [ --system system ] [ --not-system system  ]  [
       --user user ] [ --not-user user ] [ --command command ] [ --not-command command ] [ --older-than hours ] [ --younger-than
       hours ] [ --mail-lines lines ]

       uustat [ -kr jobid ] [ --kill jobid ] [ --rejuvenate jobid ]

       uustat -q [ -sS system ] [ -oy hours ] [ --system system ] [ --not-system system ] [ --older-than hours  ]  [  --younger-
       than hours ]

       uustat  --list  [  -sS  system  ]  [  -oy  hours  ]  [ --system system ] [ --not-system system ] [ --older-than hours ] [
       --younger-than hours ]

       uustat -m

       uustat --status

       uustat -p

       uustat --ps

DESCRIPTION
       The uustat command can display various types of status information about the UUCP system.  It can also be used to  cancel
       or rejuvenate requests made by uucp (1) or uux (1).

       By  default  uustat displays all jobs queued up for the invoking user, as if given the --user option with the appropriate
       argument.

       If any of the -a, --all, -e, --executions, -s, --system, -S, --not-system, -u, --user, -U, --not-user, -c, --command, -C,
       --not-command,  -o, --older-than, -y, --younger-than options are given, then all jobs which match the combined specifica‐
       tions are displayed.

       The -K or --kill-all option may be used to kill off a selected group of jobs, such as all jobs more than 7 days old.

OPTIONS
       The following options may be given to uustat.

       -a, --all
            List all queued file transfer requests.

       -e, --executions
            List queued execution requests rather than queued file transfer requests.  Queued execution requests  are  processed
            by  uuxqt (8) rather than uucico (8).  Queued execution requests may be waiting for some file to be transferred from
            a remote system.  They are created by an invocation of uux (1).

       -s system, --system system
            List all jobs queued up for the named system.  These options may be specified multiple times, in which case all jobs
            for all the systems will be listed.  If used with --list only the systems named will be listed.

       -S system, --not-system system
            List  all jobs queued for systems other than the one named.  These options may be specified multiple times, in which
            case no jobs from any of the specified systems will be listed.  If used with --list only the systems not named  will
            be listed.  These options may not be used with -s or --system.

       -u user, --user user
            List  all  jobs queued up for the named user.  These options may be specified multiple times, in which case all jobs
            for all the users will be listed.

       -U user, --not-user user
            List all jobs queued up for users other than the one named.  These options may be specified multiple times, in which
            case no jobs from any of the specified users will be listed.  These options may not be used with -u or --user.

       -c command, --command command
            List  all  jobs requesting the execution of the named command.  If command is ALL this will list all jobs requesting
            the execution of some command (as opposed to simply requesting a file transfer).  These  options  may  be  specified
            multiple times, in which case all jobs requesting any of the commands will be listed.

       -C command, --not-command command
            List  all  jobs  requesting  execution of some command other than the named command, or, if command is ALL, list all
            jobs that simply request a file transfer (as opposed to requesting the execution of some  command).   These  options
            may  be  specified  multiple  times,  in  which case no job requesting one of the specified commands will be listed.
            These options may not be used with -c or --command.

       -o hours, --older-than hours
            List all queued jobs older than the given number of hours.  If used with --list only systems  whose  oldest  job  is
            older than the given number of hours will be listed.

       -y hours, --younger-than hours
            List  all  queued jobs younger than the given number of hours.  If used with --list only systems whose oldest job is
            younger than the given number of hours will be listed.

       -k jobid, --kill jobid
            Kill the named job.  The job id is shown by the default output format, as well as by the -j  or  --jobid  option  to
            uucp  (1) or uux (1).  A job may only be killed by the user who created the job, or by the UUCP administrator or the
            superuser.  The -k or --kill options may be used multiple times on the command line to kill several jobs.

       -r jobid, --rejuvenate jobid
            Rejuvenate the named job.  This will mark it as having been invoked at the current time, affecting the output of the
            -o,  --older-than, -y, or --younger-than options and preserving it from any automated cleanup daemon.  The job id is
            shown by the default output format, as well as by the -j or --jobid options to uucp (1) or uux (1).  A job may  only
            be  rejuvenated by the user who created the job, or by the UUCP administrator or the superuser.  The -r or --rejuve‐
            nate options may be used multiple times on the command line to rejuvenate several jobs.

       -q, --list
            Display the status of commands, executions and conversations for all remote systems for which commands or executions
            are  queued.   The  -s,  --system, -S, --not-system, -o, --older-than, -y, and --younger-than options may be used to
            restrict the systems which are listed.  Systems for which no commands or executions are queued will never be listed.

       -m, --status
            Display the status of conversations for all remote systems.

       -p, --ps
            Display the status of all processes holding UUCP locks on systems or ports.

       -i, --prompt
            For each listed job, prompt whether to kill the job or not.  If the first character of the input line is y or Y  the
            job will be killed.

       -K, --kill-all
            Automatically  kill  each  listed  job.   This  can be useful for automatic cleanup scripts, in conjunction with the
            --mail and --notify options.

       -R, --rejuvenate-all
            Automatically rejuvenate each listed job.  This may not be used with --kill-all.

       -M, --mail
            For each listed job, send mail to the UUCP administrator.  If the job is killed (due to --kill-all or --prompt  with
            an  affirmative response) the mail will indicate that.  A comment specified by the --comment option may be included.
            If the job is an execution, the initial portion of its standard input will be included in the mail message; the num‐
            ber  of  lines  to include may be set with the --mail-lines option (the default is 100).  If the standard input con‐
            tains null characters, it is assumed to be a binary file and is not included.

       -N, --notify
            For each listed job, send mail to the user who requested the job.  The mail is identical to that sent by the  -M  or
            --mail options.

       -W comment, --comment comment
            Specify a comment to be included in mail sent with the -M, --mail, -N, or --notify options.

       -B lines, --mail-lines lines
            When  the  -M,  --mail,  -N,  or --notify options are used to send mail about an execution with standard input, this
            option controls the number of lines of standard input to include in the message.  The default is 100.

       -Q, --no-list
            Do not actually list the job, but only take any actions indicated by the -i, --prompt, -K, --kill-all,  -M,  --mail,
            -N or --notify options.

       -x type, --debug type
            Turn  on  particular  debugging  types.   The following types are recognized: abnormal, chat, handshake, uucp-proto,
            proto, port, config, spooldir, execute, incoming, outgoing.  Only abnormal, config, spooldir and execute  are  mean‐
            ingful for uustat.

            Multiple  types  may  be given, separated by commas, and the --debug option may appear multiple times.  A number may
            also be given, which will turn on that many types from the foregoing list; for example, --debug 2 is  equivalent  to
            --debug abnormal,chat.

       -I file, --config file
            Set configuration file to use.  This option may not be available, depending upon how uustat was compiled.

       -v, --version
            Report version information and exit.

       --help
            Print a help message and exit.

EXAMPLES
       uustat --all
       Display status of all jobs.  A sample output line is as follows:
            bugsA027h bugs ian 04-01 13:50 Executing rmail ian@airs.com (sending 1283 bytes)
       The format is
            jobid system user queue-date command (size)
       The  jobid may be passed to the --kill or --rejuvenate options.  The size indicates how much data is to be transferred to
       the remote system, and is absent for a file receive request.  The --system, --not-system, --user, --not-user,  --command,
       --not-command, --older-than, and --younger-than options may be used to control which jobs are listed.

       uustat --executions
       Display status of queued up execution requests.  A sample output line is as follows:
            bugs bugs!ian 05-20 12:51 rmail ian
       The format is
            system requestor queue-date command
       The --system, --not-system, --user, --not-user, --command, --not-command, --older-than, and --younger-than options may be
       used to control which requests are listed.

       uustat --list
       Display status for all systems with queued up commands.  A sample output line is as follows:
            bugs            4C (1 hour)   0X (0 secs) 04-01 14:45 Dial failed
       This indicates the system, the number of queued commands, the age of the oldest queued  command,  the  number  of  queued
       local  executions, the age of the oldest queued execution, the date of the last conversation, and the status of that con‐
       versation.

       uustat --status
       Display conversation status for all remote systems.  A sample output line is as follows:
            bugs           04-01 15:51 Conversation complete
       This indicates the system, the date of the last conversation, and the status of that conversation.  If the last conversa‐
       tion  failed, uustat will indicate how many attempts have been made to call the system.  If the retry period is currently
       preventing calls to that system, uustat also displays the time when the next call will be permitted.

       uustat --ps
       Display the status of all processes holding UUCP locks.  The output format is system dependent, as uustat simply  invokes
       ps (1) on each process holding a lock.

            uustat --command rmail --older-than 168 --kill-all --no-list --mail --notify --comment "Queued for over 1 week"
       This  will  kill  all rmail commands that have been queued up waiting for delivery for over 1 week (168 hours).  For each
       such command, mail will be sent both to the UUCP administrator and to the user who requested the  rmail  execution.   The
       mail  message  sent will include the string given by the --comment option.  The --no-list option prevents any of the jobs
       from being listed on the terminal, so any output from the program will be error messages.

SEE ALSO
       ps(1), rmail(1), uucp(1), uux(1), uucico(8), uuxqt(8)

AUTHOR
       Ian Lance Taylor (ian@airs.com)

                                                        Taylor UUCP 1.07                                               uustat(1)
uux(1)                                               General Commands Manual                                              uux(1)

NAME
       uux - Remote command execution over UUCP

SYNOPSIS
       uux [ options ] command

DESCRIPTION
       The  uux command is used to execute a command on a remote system, or to execute a command on the local system using files
       from remote systems.  The command is not executed immediately; the request is queued until the uucico  (8)  daemon  calls
       the system and executes it.  The daemon is started automatically unless one of the -r or --nouucico options is given.

       The actual command execution is done by the uuxqt (8) daemon.

       File  arguments  can be gathered from remote systems to the execution system, as can standard input.  Standard output may
       be directed to a file on a remote system.

       The command name may be preceded by a system name followed by an exclamation point if it is to be executed  on  a  remote
       system.  An empty system name is taken as the local system.

       Each  argument that contains an exclamation point is treated as naming a file.  The system which the file is on is before
       the exclamation point, and the pathname on that system follows it.  An empty system name is taken as  the  local  system;
       this  must  be  used  to transfer a file to a command being executed on a remote system.  If the path is not absolute, it
       will be appended to the current working directory on the local system; the result may not be  meaningful  on  the  remote
       system.   A  pathname  may  begin  with  ~/,  in  which  case  it  is  relative  to  the  UUCP  public directory (usually
       /usr/spool/uucppublic or /var/spool/uucppublic) on the appropriate system.  A pathname may begin with  ~name/,  in  which
       case it is relative to the home directory of the named user on the appropriate system.

       Standard  input and output may be redirected as usual; the pathnames used may contain exclamation points to indicate that
       they are on remote systems.  Note that the redirection characters must be quoted so that they are passed  to  uux  rather
       than interpreted by the shell.  Append redirection (&amp;gt;&amp;gt;) does not work.

       All  specified  files  are  gathered together into a single directory before execution of the command begins.  This means
       that each file must have a distinct base name.  For example,
            uux 'sys1!diff sys2!~user1/foo sys3!~user2/foo &amp;gt;!foo.diff'
       will fail because both files will be copied to sys1 and stored under the name foo.

       Arguments may be quoted by parentheses to avoid interpretation of exclamation points.  This is useful when executing  the
       uucp command on a remote system.

       A request to execute an empty command (e.g., uux sys!)  will create a poll file for the specified system.

       The  exit  status  of  uux is one of the codes found in the header file sysexits.h.  In particular, EX_OK ( 0 ) indicates
       success, and EX_TEMPFAIL ( 75 ) indicates a temporary failure.

OPTIONS
       The following options may be given to uux.

       -, -p, --stdin
            Read standard input and use it as the standard input for the command to be executed.

       -c, --nocopy
            Do not copy local files to the spool directory.  This is the default.  If they are removed before being processed by
            the  uucico  (8) daemon, the copy will fail.  The files must be readable by the uucico (8) daemon, as well as the by
            the invoker of uux.

       -C, --copy
            Copy local files to the spool directory.

       -l, --link
            Link local files into the spool directory.  If a file can not be linked because it is on a different device, it will
            be  copied unless one of the -c or --nocopy options also appears (in other words, use of --link switches the default
            from --nocopy to --copy).  If the files are changed before being processed by the uucico  (8)  daemon,  the  changed
            versions will be used.  The files must be readable by the uucico (8) daemon, as well as by the invoker of uux.

       -g grade, --grade grade
            Set  the grade of the file transfer command.  Jobs of a higher grade are executed first.  Grades run 0 ... 9 A ... Z
            a ... z from high to low.

       -n, --notification=no
            Do not send mail about the status of the job, even if it fails.

       -z, --notification=error
            Send mail about the status of the job if an error occurs.  For many uuxqt daemons, including the Taylor UUCP  uuxqt,
            this  is  the default action; for those, --notification=error will have no effect.  However, some uuxqt daemons will
            send mail if the job succeeds unless the --notification=error option is used, and some other uuxqt daemons will  not
            send mail if the job fails unless the --notification=error option is used.

       -r, --nouucico
            Do not start the uucico (8) daemon immediately; merely queue up the execution request for later processing.

       -j, --jobid
            Print  jobids  on  standard  output.  A jobid will be generated for each file copy operation required to perform the
            operation.  These file copies may be cancelled by passing the jobid to the --kill switch of uustat (1),  which  will
            make the execution impossible to complete.

       -a address, --requestor address
            Report job status to the specified e-mail address.

       -x type, --debug type
            Turn  on  particular  debugging  types.   The following types are recognized: abnormal, chat, handshake, uucp-proto,
            proto, port, config, spooldir, execute, incoming, outgoing.  Only abnormal, config, spooldir and execute  are  mean‐
            ingful for uux.

            Multiple  types  may  be given, separated by commas, and the --debug option may appear multiple times.  A number may
            also be given, which will turn on that many types from the foregoing list; for example, --debug 2 is  equivalent  to
            --debug abnormal,chat.

       -I file, --config file
            Set configuration file to use.  This option may not be available, depending upon how uux was compiled.

       -v, --version
            Report version information and exit.

       --help
            Print a help message and exit.

EXAMPLES
       uux -z - sys1!rmail user1
       Execute  the command ``rmail user1'' on the system sys1, giving it as standard input whatever is given to uux as standard
       input.  If a failure occurs, send a message using mail (1).

       uux 'diff -c sys1!~user1/file1 sys2!~user2/file2 &amp;gt;!file.diff'
       Fetch the two named files from system sys1 and system sys2 and execute diff putting the result in file.diff in  the  cur‐
       rent directory.  The current directory must be writable by the uuxqt (8) daemon for this to work.

       uux 'sys1!uucp ~user1/file1 (sys2!~user2/file2)'
       Execute  uucp  on  the  system  sys1 copying file1 (on system sys1) to sys2.  This illustrates the use of parentheses for
       quoting.

RESTRICTIONS
       The remote system may not permit you to execute certain commands.  Many remote systems only permit the execution of rmail
       and rnews.

       Some of the options are dependent on the capabilities of the uuxqt (8) daemon on the remote system.

SEE ALSO
       mail(1), uustat(1), uucp(1), uucico(8), uuxqt(8)

BUGS
       Files can not be referenced across multiple systems.

       Too many jobids are output by --jobid, and there is no good way to cancel a local execution requiring remote files.

AUTHOR
       Ian Lance Taylor (ian@airs.com)

                                                        Taylor UUCP 1.07                                                  uux(1)
VAL(1P)                                             POSIX Programmer's Manual                                            VAL(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->

NAME
       val — validate SCCS files (DEVELOPMENT)

SYNOPSIS
       val −

       val [−s] [−m name] [−r SID] [−y type] file...

DESCRIPTION
       The  val  utility shall determine whether the specified file is an SCCS file meeting the characteristics specified by the
       options.

OPTIONS
       The val utility shall conform to the Base Definitions volume of POSIX.1‐2008, Section 12.2,  Utility  Syntax  Guidelines,
       except  that the usage of the '−' operand is not strictly as intended by the guidelines (that is, reading options and op‐
       erands from standard input).

       The following options shall be supported:

       −m name   Specify a name, which is compared with the SCCS %M% keyword in file; see get.

       −r SID    Specify a SID (SCCS Identification String), an SCCS delta number. A check shall be made  to  determine  whether
                 the SID is ambiguous (for example, −r 1 is ambiguous because it physically does not exist but implies 1.1, 1.2,
                 and so on, which may exist) or invalid (for example, −r 1.0 or −r 1.1.0 are invalid because  neither  case  can
                 exist  as  a  valid  delta  number).  If the SID is valid and not ambiguous, a check shall be made to determine
                 whether it actually exists.

       −s        Silence the diagnostic message normally written to standard output for any error that is  detected  while  pro‐
                 cessing each named file on a given command line.

       −y type   Specify a type, which shall be compared with the SCCS %Y% keyword in file; see get.

OPERANDS
       The following operands shall be supported:

       file      A  pathname  of  an  existing SCCS file. If exactly one file operand appears, and it is '−', the standard input
                 shall be read: each line shall be independently processed as if it were a command line argument list. (However,
                 the line is not subjected to any of the shell word expansions, such as parameter expansion or quote removal.)

STDIN
       The standard input shall be a text file used only when the file operand is specified as '−'.

INPUT FILES
       Any SCCS files processed shall be files of an unspecified format.

<!-- 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 <=< ACCEPT -->ENVIRONMENT VARIABLES
       The following environment variables shall affect the execution of val:

       LANG      Provide  a  default  value for the internationalization variables that are unset or null. (See the Base Defini‐
                 tions volume of POSIX.1‐2008, Section 8.2, Internationalization Variables for the precedence of  international‐
                 ization variables used to determine the values of locale categories.)

       LC_ALL    If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_CTYPE  Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, sin‐
                 gle-byte as opposed to multi-byte characters in arguments and input files).

       LC_MESSAGES
                 Determine the locale that should be used to affect the format and contents of diagnostic  messages  written  to
                 standard error, and informative messages written to standard output.

       NLSPATH   Determine the location of message catalogs for the processing of LC_MESSAGES.<!-- ACCEPT >=> 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 -->

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       The standard output shall consist of informative messages about either:

        1. Each file processed

        2. Each command line read from standard input

       If the standard input is not used, for each file operand yielding a discrepancy, the output line shall have the following
       format:

           "%s: %s\n", &amp;lt;pathname&amp;gt;, &amp;lt;unspecified string&amp;gt;

       If the standard input is used, for each input line yielding a discrepancy, the output shall have the following format:

           "%s\n\n %s: %s\n", &amp;lt;input&amp;gt;, &amp;lt;pathname&amp;gt;, &amp;lt;unspecified string&amp;gt;

       where &amp;lt;input&amp;gt; is the input line minus its terminating &amp;lt;newline&amp;gt;.

STDERR
       Not used.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       None.

EXIT STATUS
       The 8-bit code returned by val shall be a disjunction of the possible errors; that is, it can be  interpreted  as  a  bit
       string where set bits are interpreted as follows:

       0x80   =   Missing file argument.
       0x40   =   Unknown or duplicate option.
       0x20   =   Corrupted SCCS file.
       0x10   =   Cannot open file or file not SCCS.
       0x08   =   SID is invalid or ambiguous.
       0x04   =   SID does not exist.
       0x02   =   %Y%, −y mismatch.
       0x01   =   %M%, −m mismatch.

       Note  that val can process two or more files on a given command line and can process multiple command lines (when reading
       the standard input). In these cases an aggregate code shall be returned: a logical OR of the  codes  generated  for  each
       command line and file processed.

CONSEQUENCES OF ERRORS
       Default.

       The following sections are informative.

APPLICATION USAGE
       Since the val exit status sets the 0x80 bit, shell applications checking "$?" cannot tell if it terminated due to a miss‐
       ing file argument or receipt of a signal.

EXAMPLES
       In a directory with three SCCS files—s.x (of t type ``text''), s.y, and s.z  (a  corrupted  file)—the  following  command
       could produce the output shown:

           val − &amp;lt;&amp;lt;EOF
           −y source s.x
           −m y s.y
           s.z
           EOF
           −y source s.x

               s.x: %Y%, −y mismatch
           s.z

               s.z: corrupted SCCS file

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       admin, delta, get, prs

       The Base Definitions volume of POSIX.1‐2008, Chapter 8, Environment Variables, Section 12.2, Utility Syntax Guidelines

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions  of  this  text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013 Edition, Standard for
       Information Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7,  Copy‐
       right  (C)  2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This is POSIX.1-2008
       with the 2013 Technical Corrigendum 1 applied.) In the event of any discrepancy between this  version  and  the  original
       IEEE  and  The  Open  Group Standard, the original IEEE and The Open Group Standard is the referee document. The original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any typographical or formatting errors that appear in this page are most likely to have been introduced during  the  con‐
       version  of  the source files to man page format. To report such errors, see https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                       VAL(1P)
VI(1)                                                     User Commands                                                    VI(1)

NAME
       vi, view, vedit - screen oriented (visual) display editor based on ex

SYNOPSIS
       vi [-c command|+command] [-r [filename]] [-s|-] [-t tagstring] [-w size] [-lLRV] [file ...]

       view [-c command|+command] [-r [filename]] [-s|-] [-t tagstring] [-w size] [-lLRV] [file ...]

       vedit [-c command|+command] [-r [filename]] [-s|-] [-t tagstring] [-w size] [-lLRV] [file ...]

DESCRIPTION
       Vi  (visual) is a display oriented text editor based on ex(1).  Ex and vi run the same code; it is possible to get to the
       command mode of ex from within vi and vice-versa.

       The view command is identical to vi except that files are opened read-only.  The vedit command  is  also  identical,  but
       sets some options to values more useful for novices.

       The following options are accepted:

       -c command or +command
              Execute command when editing begins.

       -l     Start in a special mode useful for the Lisp programming language.

       -r [filename] or -L
              When  no  argument is supplied with this option, all files to be recovered are listed and the editor exits immedi‐
              ately.  If a filename is specified, the corresponding temporary file is opened in recovery mode.

       -R     Files are opened read-only when this option is given.

       -s or -
              Script mode; all feedback for interactive editing is disabled.  EXINIT and .exrc files are not processed.

       -t tagstring
              Read the tags file, then choose the file and position specified by tagstring for editing.

       -V     Echo command input to standard error, unless it originates from a terminal.

       -w size
              Specify the size of the editing window for visual mode.

       The Introduction to Display Editing with Vi provides full details on using vi.

       Most of the ex commands are available in visual mode when prefixed by a : character. See ex(1) for a description of them.

       The following gives the uses the editor makes of each character.  The characters are presented  in  their  order  in  the
       ASCII  character set:  Control characters come first, then most special characters, then the digits, upper and then lower
       case characters.

       For each character we tell a meaning it has as a command and any meaning it has during an insert.  If it has only meaning
       as  a  command, then only this is discussed.  Section numbers in parentheses indicate where the character is discussed in
       “An Introduction to Display Editing with Vi”; a `f' after the section number means that the character is mentioned  in  a
       footnote.

       ^@     Not  a  command  character.   If  typed  as  the first character of an insertion it is replaced with the last text
              inserted, and the insert terminates.  Only 128 characters are saved from the last insert; if more characters  were
              inserted the mechanism is not available.  A ^@ cannot be part of the file due to the editor implementation (7.5f).

       ^A     Unused.

       ^B     Backward window.  A count specifies repetition.  Two lines of continuity are kept if possible (2.1, 6.1, 7.2).

       ^C     Unused.

       ^D     As  a  command, scrolls down a half-window of text.  A count gives the number of (logical) lines to scroll, and is
              remembered for future ^D and ^U commands (2.1, 7.2).  During an insert, backtabs over autoindent  white  space  at
              the beginning of a line (6.6, 7.5); this white space cannot be backspaced over.

       ^E     Exposes one more line below the current screen in the file, leaving the cursor where it is if possible.

       ^F     Forward window.  A count specifies repetition.  Two lines of continuity are kept if possible (2.1, 6.1, 7.2).

       ^G     Equivalent  to :fCR, printing the current file, whether it has been modified, the current line number and the num‐
              ber of lines in the file, and the percentage of the way through the file.

       ^H (BS)
              Same as left arrow.  (See h).  During an insert, eliminates the last input character,  backing  over  it  but  not
              erasing  it;  it  remains so the user can see what he typed if he wishes to type something only slightly different
              (3.1, 7.5).

       ^I (TAB)
              Not a command character.  When inserted it prints as some number of spaces.  When the cursor is at a tab character
              it  rests at the last of the spaces which represent the tab.  The spacing of tabstops is controlled by the tabstop
              option (4.1, 6.6).

       ^J (LF)
              Same as down arrow (see j).

       ^K     Unused.

       ^L     The ASCII formfeed character, this causes the screen to be cleared and redrawn.  This is useful after a  transmis‐
              sion error, if characters typed by a program other than the editor scramble the screen, or after output is stopped
              by an interrupt (5.4, 7.2f).

       ^M (CR)
              A carriage return advances to the next line, at the first non-white position in  the  line.   Given  a  count,  it
              advances that many lines (2.3).  During an insert, a CR causes the insert to continue onto another line (3.1).

       ^N     Same as down arrow (see j).

       ^O     Unused.

       ^P     Same as up arrow (see k).

       ^Q     Not  a command character.  In input mode, ^Q quotes the next character, the same as ^V , except that some teletype
              drivers will eat the ^Q so that the editor never sees it.

       ^R     Redraws the current screen, eliminating logical lines not corresponding to physical lines (lines with only a  sin‐
              gle @ character on them).  On hardcopy terminals in open mode, retypes the current line (5.4, 7.2, 7.8).

       ^S     Unused.  Some teletype drivers use ^S to suspend output until ^Q is pressed.

       ^T     Not  a  command  character.   During  an  insert,  with  autoindent  set and at the beginning of the line, inserts
              shiftwidth white space.

       ^U     Scrolls the screen up, inverting ^D which scrolls down.  Counts work as they do for ^D, and  the  previous  scroll
              amount is common to both.  On a dumb terminal, ^U will often necessitate clearing and redrawing the screen further
              back in the file (2.1, 7.2).

       ^V     Not a command character.  In input mode, quotes the next character so that it is possible to  insert  non-printing
              and special characters into the file (4.2, 7.5).

       ^W     Not  a command character.  During an insert, backs up as b would in command mode; the deleted characters remain on
              the display (see ^H) (7.5).

       ^X     Unused.

       ^Y     Exposes one more line above the current screen, leaving the cursor where it is if possible.   (No  mnemonic  value
              for this key; however, it is next to ^U which scrolls up a bunch.)

       ^Z     If  supported  by the Unix system, stops the editor, exiting to the top level shell.  Same as :stopCR.  Otherwise,
              unused.

       ^[ (ESC)
              Cancels a partially formed command, such as a z when no following character has yet been given; terminates  inputs
              on  the last line (read by commands such as : / and ?); ends insertions of new text into the buffer.  If an ESC is
              given when quiescent in command state, the editor rings the bell or flashes the screen.  The user can thus hit ESC
              if  he  doesn't  know what is happening till the editor rings the bell.  If the user doesn't know whether he is in
              insert mode he can type ESCa, and then material to be input; the material will be inserted  correctly  whether  or
              not he was in insert mode when he started (1.6, 3.1, 7.5).

       ^\     Unused.

       ^]     Searches  for  the  word  which is after the cursor as a tag.  Equivalent to typing :ta, this word, and then a CR.
              Mnemonically, this command is “ right to” (7.3).

       ^^     Equivalent to :e #CR, returning to the previous position in the last edited file, or editing a file which the user
              specified  if  he  got  a  `No write since last change diagnostic' and does not want to have to type the file name
              again (7.3).  (The user has to do a :w before ^^ will work in this case.  If he does not wish to write the file he
              should do :e! #CR instead.)

       ^_     Unused.  Reserved as the command character for the Tektronix 4025 and 4027 terminal.

       SPACE  Same as right arrow (see l).

       !      An  operator,  which  processes  lines from the buffer with reformatting commands.  Follow ! with the object to be
              processed, and then the command name terminated by CR.  Doubling ! and preceding it by a count causes count  lines
              to  be filtered; otherwise the count is passed on to the object after the !.  Thus 2!}fmtCR reformats the next two
              paragraphs by running them through the program fmt.  If working on LISP,  the  command  !%grindCR,  given  at  the
              beginning of a function, will run the text of the function through the LISP grinder (6.7, 7.3).  To read a file or
              the output of a command into the buffer :r (7.3) can be used.  To simply execute a command, :! (7.3).  Precedes  a
              named  buffer  specification.  There are named buffers 1-9 used for saving deleted text and named buffers a-z into
              which the user can place text (4.3, 6.3)

       #      The macro character which, when followed by a number, will substitute for a  function  key  on  terminals  without
              function  keys  (6.9).   In input mode, if this is the erase character, it will delete the last character typed in
              input mode, and must be preceded with a \ to insert it, since it normally backs over the last input character.

       $      Moves to the end of the current line.  If the list option is set, then the end of  each  line  will  be  shown  by
              printing  a  $ after the end of the displayed text in the line.  Given a count, advances to the count'th following
              end of line; thus 2$ advances to the end of the following line.

       %      Moves to the parenthesis or brace { } which balances the parenthesis or brace at the current cursor position.

       &amp;      A synonym for :&amp;CR, by analogy with the ex &amp; command.

       '      When followed by a ' returns to the previous context at the beginning of a line.   The  previous  context  is  set
              whenever  the  current  line  is  moved in a non-relative way.  When followed by a letter a-z, returns to the line
              which was marked with this letter with a m command, at the first non-white character  in  the  line.  (2.2,  5.3).
              When  used  with an operator such as d, the operation takes place over complete lines; if ` is used, the operation
              takes place from the exact marked place to the current cursor position within the line.

       (      Retreats to the beginning of a sentence, or to the beginning of a LISP s-expression if the lisp option is set.   A
              sentence ends at a . ! or ? which is followed by either the end of a line or by two spaces.  Any number of closing
              ) ] " and ' characters may appear after the . ! or ?, and before the spaces or end of line.  Sentences also  begin
              at paragraph and section boundaries (see { and [[ below).  A count advances that many sentences (4.2, 6.8).

       )      Advances  to  the  beginning of a sentence.  A count repeats the effect.  See ( above for the definition of a sen‐
              tence (4.2, 6.8).

       *      Unused.

       +      Same as CR when used as a command.

       ,      Reverse of the last f F t or T command, looking the other way in the current line.  Especially useful  after  hit‐
              ting too many ; characters.  A count repeats the search.

       -      Retreats to the previous line at the first non-white character.  This is the inverse of + and RETURN.  If the line
              moved to is not on the screen, the screen is scrolled, or cleared and redrawn if this is not possible.  If a large
              amount  of scrolling would be required the screen is also cleared and redrawn, with the current line at the center
              (2.3).

       .      Repeats the last command which changed the buffer.  Especially useful when deleting words or lines; the  user  can
              delete some words/lines and then hit . to delete more and more words/lines.  Given a count, it passes it on to the
              command being repeated.  Thus after a 2dw, 3. deletes three words (3.3, 6.3, 7.2, 7.4).

       /      Reads a string from the last line on the screen, and scans forward for the next occurrence of  this  string.   The
              normal  input editing sequences may be used during the input on the bottom line; an returns to command state with‐
              out ever searching.  The search begins when the user hits CR to terminate the pattern; the  cursor  moves  to  the
              beginning  of  the  last line to indicate that the search is in progress; the search may then be terminated with a
              DEL or RUB, or by backspacing when at the beginning of the bottom line, returning the cursor to its initial  posi‐
              tion.  Searches normally wrap end-around to find a string anywhere in the buffer.

              When  used  with  an  operator  the  enclosed  region is normally affected.  By mentioning an offset from the line
              matched by the pattern the user can force whole lines to be affected.  To do this a pattern with a closing a clos‐
              ing / and then an offset +n or -n must be given.

              To  include  the character / in the search string, it must be escaped with a preceding \.  A ^ at the beginning of
              the pattern forces the match to occur at the beginning of a line only; this speeds the search.  A $ at the end  of
              the pattern forces the match to occur at the end of a line only.  More extended pattern matching is available, see
              section 7.4; unless nomagic ist set in the .exrc file the user will have to preceed the characters . [ * and ~  in
              the search pattern with a \ to get them to work as one would naively expect (1.6, 2.2, 6.1, 7.2, 7.4).

       0      Moves to the first character on the current line.  Also used, in forming numbers, after an initial 1-9.

       1-9    Used to form numeric arguments to commands (2.3, 7.2).

       :      A  prefix  to a set of commands for file and option manipulation and escapes to the system.  Input is given on the
              bottom line and terminated with an CR, and the command then executed.  The user can return to where he was by hit‐
              ting DEL or RUB if he hit : accidentally (see ex(1) and primarily 6.2 and 7.3).

       ;      Repeats the last single character find which used f F t or T.  A count iterates the basic scan (4.1).

       &amp;lt;      An  operator  which  shifts  lines left one shiftwidth, normally 8 spaces.  Like all operators, affects lines when
              repeated, as in &amp;lt;&amp;lt;.  Counts are passed through to the basic object, thus 3&amp;lt;&amp;lt; shifts three lines (6.6, 7.2).

       =      Reindents line for LISP, as though they were typed in with lisp and autoindent set (6.8).

       &amp;gt;      An operator which shifts lines right one shiftwidth, normally 8 spaces.  Affects lines when  repeated  as  in  &amp;gt;&amp;gt;.
              Counts repeat the basic object (6.6, 7.2).

       ?      Scans backwards, the opposite of /.  See the / description above for details on scanning (2.2, 6.1, 7.4).

       @      A  macro  character  (6.9).  If this is the kill character, it must be escaped with a \ to type it in during input
              mode, as it normally backs over the input given on the current line (3.1, 3.4, 7.5).

       A      Appends at the end of line, a synonym for $a (7.2).

       B      Backs up a word, where words are composed of non-blank sequences, placing the cursor at the beginning of the word.
              A count repeats the effect (2.4).

       C      Changes the rest of the text on the current line; a synonym for c$.

       D      Deletes the rest of the text on the current line; a synonym for d$.

       E      Moves forward to the end of a word, defined as blanks and non-blanks, like B and W.  A count repeats the effect.

       F      Finds  a  single  following character, backwards in the current line.  A count repeats this search that many times
              (4.1).

       G      Goes to the line number given as preceding argument, or the end of the file if no preceding count is  given.   The
              screen is redrawn with the new current line in the center if necessary (7.2).

       H      Home arrow.  Homes the cursor to the top line on the screen.  If a count is given, then the cursor is moved to the
              count'th line on the screen.  In any case the cursor is moved to the first non-white character on  the  line.   If
              used as the target of an operator, full lines are affected (2.3, 3.2).

       I      Inserts at the beginning of a line; a synonym for ^i.

       J      Joins  together  lines,  supplying  appropriate white space: one space between words, two spaces after a ., and no
              spaces at all if the first character of the joined on line is ).  A count causes that  many  lines  to  be  joined
              rather than the default two (6.5, 7.1f).

       K      Unused.

       L      Moves the cursor to the first non-white character of the last line on the screen.  With a count, to the first non-
              white of the count'th line from the bottom.  Operators affect whole lines when used with L (2.3).

       M      Moves the cursor to the middle line on the screen, at the first non-white position on the line (2.3).

       N      Scans for the next match of the last pattern given to / or ?, but in the reverse direction; this is the reverse of
              n.

       O      Opens a new line above the current line and inputs text there up to an ESC.  A count can be used on dumb terminals
              to specify a number of lines to be opened; this is generally obsolete, as the slowopen option works better (3.1).

       P      Puts the last deleted text back before/above the cursor.  The text goes back as whole lines above the cursor if it
              was  deleted as whole lines.  Otherwise the text is inserted between the characters before and at the cursor.  May
              be preceded by a named buffer specification "x to retrieve the contents of the buffer; buffers 1-9 contain deleted
              material, buffers a-z are available for general use (6.3).

       Q      Quits  from  vi  to ex command mode.  In this mode, whole lines form commands, ending with a RETURN.  One can give
              all the : commands; the editor supplies the : as a prompt (7.7).

       R      Replaces characters on the screen with characters typed (overlay fashion).  Terminates with an ESC.

       S      Changes whole lines, a synonym for cc.  A count substitutes for that many lines.   The  lines  are  saved  in  the
              numeric buffers, and erased on the screen before the substitution begins.

       T      Takes  a  single  following character, locates the character before the cursor in the current line, and places the
              cursor just after that character.  A count repeats the effect.  Most useful with operators such as d (4.1).

       U      Restores the current line to its state before the user started changing it (3.5).

       V      Unused.

       W      Moves forward to the beginning of a word in the current line, where words are defined as sequences  of  blank/non-
              blank characters.  A count repeats the effect (2.4).

       X      Deletes  the character before the cursor.  A count repeats the effect, but only characters on the current line are
              deleted.

       Y      Yanks a copy of the current line into the unnamed buffer, to be put back by a later p or P; a very useful  synonym
              for yy.  A count yanks that many lines.  May be preceded by a buffer name to put lines in that buffer (7.4).

       ZZ     Exits  the editor.  (Same as :xCR.)  If any changes have been made, the buffer is written out to the current file.
              Then the editor quits.

       [[     Backs up to the previous section boundary.  A section begins at each macro in  the  sections  option,  normally  a
              `.NH'  or `.SH' and also at lines which which start with a formfeed ^L.  Lines beginning with { also stop [[; this
              makes it useful for looking backwards, a function at a time, in C programs.  If the option lisp is set,  stops  at
              each  (  at  the beginning of a line, and is thus useful for moving backwards at the top level LISP objects. (4.2,
              6.1, 6.6, 7.2).

       \      Unused.

       ]]     Forward to a section boundary, see [[ for a definition (4.2, 6.1, 6.6, 7.2).

       ^      Moves to the first non-white position on the current line (4.4).

       _      Unused.

       `      When followed by a ` returns to the previous context.  The previous context is set whenever the  current  line  is
              moved  in  a  non-relative way.  When followed by a letter a-z, returns to the position which was marked with this
              letter with a m command.  When used with an operator such as d, the operation takes place from  the  exact  marked
              place  to  the  current  position within the line; if using ', the operation takes place over complete lines (2.2,
              5.3).

       a      Appends arbitrary text after the current cursor position; the insert can continue onto  multiple  lines  by  using
              RETURN within the insert.  A count causes the inserted text to be replicated, but only if the inserted text is all
              on one line.  The insertion terminates with an ESC (3.1, 7.2).

       b      Backs up to the beginning of a word in the current line.  A word is a sequence of alphanumerics, or a sequence  of
              special characters.  A count repeats the effect (2.4).

       c      An  operator which changes the following object, replacing it with the following input text up to an ESC.  If more
              than part of a single line is affected, the text which is changed away is saved in the numeric named buffers.   If
              only part of the current line is affected, then the last character to be changed away is marked with a $.  A count
              causes that many objects to be affected, thus both 3c) and c3) change the following three sentences (7.4).

       d      An operator which deletes the following object.  If more than part of a line is affected, the text is saved in the
              numeric  buffers.   A  count  causes that many objects to be affected; thus 3dw is the same as d3w (3.3, 3.4, 4.1,
              7.4).

       e      Advances to the end of the next word, defined as for b and w.  A count repeats the effect (2.4, 3.1).

       f      Finds the first instance of the next character following the cursor on the current line.  A count repeats the find
              (4.1).

       g      Unused.

              Arrow keys h, j, k, l, and H.

       h      Left  arrow  .   Moves  the cursor one character to the left.  Like the other arrow keys, either h, the left arrow
              key, or one of the synonyms (^H) has the same effect.  A count repeats the effect (3.1, 7.5).

       i      Inserts text before the cursor, otherwise like a (7.2).

       j      Down arrow .  Moves the cursor one line down in the same column.  If the position does  not  exist,  vi  comes  as
              close as possible to the same column.  Synonyms include ^J (linefeed) and ^N .

       k      Up arrow .  Moves the cursor one line up.  ^P is a synonym.

       l      Right arrow .  Moves the cursor one character to the right.  SPACE is a synonym.

       m      Marks  the  current position of the cursor in the mark register which is specified by the next character a-z.  The
              user can return to this position or use it with an operator using ` or ' (5.3).

       n      Repeats the last / or ? scanning commands (2.2).

       o      Opens new lines below the current line; otherwise like O (3.1).

       p      Puts text after/below the cursor; otherwise like P (6.3).

       q      Unused.

       r      Replaces the single character at the cursor with a single character typed.  The new character  may  be  a  RETURN;
              this  is  the easiest way to split lines.  A count replaces each of the following count characters with the single
              character given; see R above which is the more usually useful iteration of r (3.2).

       s      Changes the single character under the cursor to the text which follows up to an ESC; given  a  count,  that  many
              characters from the current line are changed.  The last character to be changed is marked with $ as in c (3.2).

       t      Advances  the cursor upto the character before the next character typed.  Most useful with operators such as d and
              c to delete the characters up to a following character.  One can use . to  delete  more  if  this  doesn't  delete
              enough the first time (4.1).

       u      Undoes  the last change made to the current buffer.  If repeated, will alternate between these two states, thus is
              its own inverse. When used after an insert which inserted text on more than one line, the lines are saved  in  the
              numeric named buffers (3.5).

       v      Unused.

       w      Advances to the beginning of the next word, as defined by b (2.4).

       x      Deletes the single character under the cursor.  With a count deletes deletes that many characters forward from the
              cursor position, but only on the current line (6.5).

       y      An operator, yanks the following object into the unnamed temporary buffer.  If preceded by a named buffer specifi‐
              cation, "x, the text is placed in that buffer also.  Text can be recovered by a later p or P (7.4).

       z      Redraws  the screen with the current line placed as specified by the following character: RETURN specifies the top
              of the screen, . the center of the screen, and - at the bottom of the screen.  A count may be given  after  the  z
              and  before the following character to specify the new screen size for the redraw.  A count before the z gives the
              number of the line to place in the center of the screen instead of the default current line. (5.4)

       {      Retreats to the beginning of the beginning of the preceding paragraph.  A paragraph begins at each  macro  in  the
              paragraphs  option,  normally  `.IP',  `.LP',  `.PP', `.QP' and `.bp'.  A paragraph also begins after a completely
              empty line, and at each section boundary (see [[ above) (4.2, 6.8, 7.6).

       |      Places the cursor on the character in the column specified by the count (7.1, 7.2).

       }      Advances to the beginning of the next paragraph.  See { for the definition of paragraph (4.2, 6.8, 7.6).

       ~      Switches the case of the given count of characters starting from the current cursor position to  the  end  of  the
              current line.  Non-alphabetic characters remain unchanged.

       ^? (DEL)
              Interrupts the editor, returning it to command accepting state (1.6, 7.5).

ENVIRONMENT VARIABLES
       The following environment variables affect the behaviour of vi:

       COLUMNS
              Overrides the system-supplied number of terminal columns.

       EXINIT Contains  commands  to  execute at editor startup.  If this variable is present, the .exrc file in the user's home
              directory is ignored.

       HOME   Used to locate the editor startup file.

       LANG, LC_ALL
              See locale(7).

       LC_CTYPE
              Determines the mapping of bytes to characters, types of characters, case conversion and composition  of  character
              classes in regular expressions.

       LC_MESSAGES
              Sets the language used for diagnostic and informal messages.

       LINES  Overrides the system-supplied number of terminal lines.

       NLSPATH
              See catopen(3).

       SHELL  The program file used to execute external commands.

       TERM   Determines the terminal type.

FILES
       /usr/lib/ex/expreserve
              preserve command

       /usr/lib/ex/exrecover
              recover command

       /etc/termcap
              describes capabilities of terminals

       $HOME/.exrc
              editor startup file

       /var/tmp/Exnnnnnnnnnn
              editor temporary

       /var/tmp/Rxnnnnnnnnnn
              named buffer temporary

       /var/lib/ex
              preservation directory

SEE ALSO
       ex(1), edit(1), “Vi Quick Reference” card, “An Introduction to Display Editing with Vi”.

AUTHOR
       William Joy.

       Mark Horton added macros to visual mode and was maintaining version 3.

       This version incorporates changes by Gunnar Ritter.

NOTES
       Software tabs using ^T work only immediately after the autoindent.

       Left and right shifts on intelligent terminals don't make use of insert and delete character operations in the terminal.

       The  wrapmargin  option  can  be  fooled  since  it looks at output columns when blanks are typed.  If a long word passes
       through the margin and onto the next line without a break, then the line won't be broken.

       Insert/delete within a line can be slow if tabs are present on intelligent terminals, since the terminals  need  help  in
       doing this correctly.

       The  source command does not work when executed as :source; there is no way to use the :append, :change, and :insert com‐
       mands, since it is not possible to give more than one line of input to a : escape.  To use these on a :global one must  Q
       to ex command mode, execute them, and then reenter the screen editor with vi or open.

Ancient Unix Ports                                           3/12/03                                                       VI(1)
WAIT(1P)                                            POSIX Programmer's Manual                                           WAIT(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->

NAME
       wait — await process completion

SYNOPSIS
       wait [pid...]

DESCRIPTION
       When  an asynchronous list (see Section 2.9.3.1, Examples) is started by the shell, the process ID of the last command in
       each element of the asynchronous list shall become known in the current shell execution environment;  see  Section  2.12,
       Shell Execution Environment.

       If  the  wait  utility  is invoked with no operands, it shall wait until all process IDs known to the invoking shell have
       terminated and exit with a zero exit status.

       If one or more pid operands are specified that represent known process IDs, the wait utility shall wait until all of them
       have  terminated.  If one or more pid operands are specified that represent unknown process IDs, wait shall treat them as
       if they were known process IDs that exited with exit status 127. The exit status returned by the wait  utility  shall  be
       the exit status of the process requested by the last pid operand.

       The known process IDs are applicable only for invocations of wait in the current shell execution environment.

OPTIONS
       None.

OPERANDS
       The following operand shall be supported:

       pid       One of the following:

                  1. The unsigned decimal integer process ID of a command, for which the utility is to wait for the termination.

                  2. A  job  control job ID (see the Base Definitions volume of POSIX.1‐2008, Section 3.204, Job Control Job ID)
                     that identifies a background process group to be waited for. The job control job ID notation is  applicable
                     only  for invocations of wait in the current shell execution environment; see Section 2.12, Shell Execution
                     Environment.  The exit status of wait shall be determined by the last command in the pipeline.

                     Note:     The job control job ID type of pid is only available on systems supporting the  User  Portability
                               Utilities option.

STDIN
       Not used.

INPUT FILES
       None.

<!-- 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 <=< ACCEPT -->ENVIRONMENT VARIABLES
       The following environment variables shall affect the execution of wait:

       LANG      Provide  a  default  value for the internationalization variables that are unset or null. (See the Base Defini‐
                 tions volume of POSIX.1‐2008, Section 8.2, Internationalization Variables for the precedence of  international‐
                 ization variables used to determine the values of locale categories.)

       LC_ALL    If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_CTYPE  Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, sin‐
                 gle-byte as opposed to multi-byte characters in arguments).

       LC_MESSAGES
                 Determine the locale that should be used to affect the format and contents of diagnostic  messages  written  to
                 standard error.

       NLSPATH   Determine the location of message catalogs for the processing of LC_MESSAGES.
<!-- ACCEPT >=> 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 -->
ASYNCHRONOUS EVENTS
       Default.

STDOUT
       Not used.

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       None.

EXIT STATUS
       If one or more operands were specified, all of them have terminated or were not known by the invoking shell, and the sta‐
       tus of the last operand specified is known, then the exit status of wait shall be the exit status information of the com‐
       mand  indicated  by  the last operand specified. If the process terminated abnormally due to the receipt of a signal, the
       exit status shall be greater than 128 and shall be distinct from the exit status generated  by  other  signals,  but  the
       exact  value  is  unspecified. (See the kill −l option.) Otherwise, the wait utility shall exit with one of the following
       values:

           0   The wait utility was invoked with no operands and all process IDs known by the invoking shell have terminated.

       1‐126   The wait utility detected an error.

         127   The command identified by the last pid operand specified is unknown.

CONSEQUENCES OF ERRORS
       Default.

       The following sections are informative.

APPLICATION USAGE
       On most implementations, wait is a shell built-in. If it is called in a subshell or separate utility  execution  environ‐
       ment, such as one of the following:

           (wait)
           nohup wait ...
           find . −exec wait ... \;

       it returns immediately because there are no known process IDs to wait for in those environments.

       Historical implementations of interactive shells have discarded the exit status of terminated background processes before
       each shell prompt. Therefore, the status of background processes was usually lost unless it  terminated  while  wait  was
       waiting  for  it. This could be a serious problem when a job that was expected to run for a long time actually terminated
       quickly with a syntax or initialization error because the exit status returned was usually zero if the requested  process
       ID was not found. This volume of POSIX.1‐2008 requires the implementation to keep the status of terminated jobs available
       until the status is requested, so that scripts like:

           j1&amp;
           p1=$!
           j2&amp;
           wait $p1
           echo Job 1 exited with status $?
           wait $!
           echo Job 2 exited with status $?

       work without losing status on any of the jobs. The shell is allowed to discard the status of any process if it determines
       that  the  application  cannot  get  the process ID for that process from the shell. It is also required to remember only
       {CHILD_MAX} number of processes in this way. Since the only way to get the process ID from the shell is by using the  '!'
       shell  parameter,  the  shell  is allowed to discard the status of an asynchronous list if "$!" was not referenced before
       another asynchronous list was started. (This means that the shell only has to keep the status of  the  last  asynchronous
       list  started if the application did not reference "$!".  If the implementation of the shell is smart enough to determine
       that a reference to "$!" was not saved anywhere that the application can retrieve it later, it can use  this  information
       to trim the list of saved information. Note also that a successful call to wait with no operands discards the exit status
       of all asynchronous lists.)

       If the exit status of wait is greater than 128, there is no way for the application to know  if  the  waited-for  process
       exited with that value or was killed by a signal.  Since most utilities exit with small values, there is seldom any ambi‐
       guity. Even in the ambiguous cases, most applications just need to know that the asynchronous job  failed;  it  does  not
       matter whether it detected an error and failed or was killed and did not complete its job normally.

EXAMPLES
       Although  the exact value used when a process is terminated by a signal is unspecified, if it is known that a signal ter‐
       minated a process, a script can still reliably determine which signal by using kill as shown by the following script:

           sleep 1000&amp;
           pid=$!
           kill −kill $pid
           wait $pid
           echo $pid was terminated by a SIG$(kill −l $?) signal.

       If the following sequence of commands is run in less than 31 seconds:

           sleep 257 | sleep 31 &amp;
           jobs −l %%

       either of the following commands returns the exit status of the second sleep in the pipeline:

           wait &amp;lt;pid of sleep 31&amp;gt;
           wait %%

RATIONALE
       The description of wait does not refer to the waitpid() function  from  the  System  Interfaces  volume  of  POSIX.1‐2008
       because that would needlessly overspecify this interface. However, the wording means that wait is required to wait for an
       explicit process when it is given an argument so that the status information of other processes is not consumed. Histori‐
       cal  implementations use the wait() function defined in the System Interfaces volume of POSIX.1‐2008 until wait() returns
       the requested process ID or finds that the requested process does not exist. Because this means that a shell script could
       not  reliably  get the status of all background children if a second background job was ever started before the first job
       finished, it is recommended that the wait utility use a method such as the functionality provided by the waitpid()  func‐
       tion.

       The ability to wait for multiple pid operands was adopted from the KornShell.

       This  new  functionality was added because it is needed to determine the exit status of any asynchronous list accurately.
       The only compatibility problem that this change creates is for a script like

           while sleep 60 do
               job&amp; echo Job started $(date) as $!  done

       which causes the shell to monitor all of the jobs started until the script terminates or runs out of memory.  This  would
       not be a problem if the loop did not reference "$!" or if the script would occasionally wait for jobs it started.

FUTURE DIRECTIONS
       None.

SEE ALSO
       Chapter 2, Shell Command Language, kill, sh

       The Base Definitions volume of POSIX.1‐2008, Section 3.204, Job Control Job ID, Chapter 8, Environment Variables

       The System Interfaces volume of POSIX.1‐2008, wait()

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions  of  this  text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013 Edition, Standard for
       Information Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7,  Copy‐
       right  (C)  2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This is POSIX.1-2008
       with the 2013 Technical Corrigendum 1 applied.) In the event of any discrepancy between this  version  and  the  original
       IEEE  and  The  Open  Group Standard, the original IEEE and The Open Group Standard is the referee document. The original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any typographical or formatting errors that appear in this page are most likely to have been introduced during  the  con‐
       version  of  the source files to man page format. To report such errors, see https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                      WAIT(1P)
WC(1)                                                     User Commands                                                    WC(1)

NAME
       wc - print newline, word, and byte counts for each file

SYNOPSIS
       wc [OPTION]... [FILE]...
       wc [OPTION]... --files0-from=F

DESCRIPTION
       Print  newline,  word,  and  byte counts for each FILE, and a total line if more than one FILE is specified.  A word is a
       non-zero-length sequence of characters delimited by white space.

       With no FILE, or when FILE is -, read standard input.

       The options below may be used to select which counts are printed, always in the following order: newline,  word,  charac‐
       ter, byte, maximum line length.

       -c, --bytes
              print the byte counts

       -m, --chars
              print the character counts

       -l, --lines
              print the newline counts

       --files0-from=F
              read  input  from  the  files specified by NUL-terminated names in file F; If F is - then read names from standard
              input

       -L, --max-line-length
              print the maximum display width

       -w, --words
              print the word counts

       --help display this help and exit

       --version
              output version information and exit

AUTHOR
       Written by Paul Rubin and David MacKenzie.

<!-- 30b0cf8a-458a-435b-a2e0-993472636e53 <=< ACCEPT -->REPORTING BUGS
       GNU coreutils online help: &amp;lt;http://www.gnu.org/software/coreutils/&amp;gt;
       Report wc translation bugs to &amp;lt;http://translationproject.org/team/&amp;gt;

COPYRIGHT
       Copyright   ©   2016   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3    or    later
       &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.<!-- ACCEPT >=> 30b0cf8a-458a-435b-a2e0-993472636e53 -->

SEE ALSO
       Full documentation at: &amp;lt;http://www.gnu.org/software/coreutils/wc&amp;gt;
       or available locally via: info '(coreutils) wc invocation'

GNU coreutils 8.26                                        November 2016                                                    WC(1)
WHAT(1P)                                            POSIX Programmer's Manual                                           WHAT(1P)

<!-- ad5e83de-81c0-437f-a6da-b16aeeb2ab52 <=< ACCEPT -->PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con‐
       sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
       Linux.<!-- ACCEPT >=> ad5e83de-81c0-437f-a6da-b16aeeb2ab52 -->

NAME
       what — identify SCCS files (DEVELOPMENT)

SYNOPSIS
       what [−s] file...

DESCRIPTION
       The  what  utility shall search the given files for all occurrences of the pattern that get (see get) substitutes for the
       %Z% keyword ("@(#)") and shall write to standard output what follows until the first occurrence of one of the following:

           "   &amp;gt;   newline   \   NUL

OPTIONS
       The what utility shall conform to the Base Definitions volume of POSIX.1‐2008, Section 12.2, Utility Syntax Guidelines.

       The following option shall be supported:

       −s        Quit after finding the first occurrence of the pattern in each file.

OPERANDS
       The following operands shall be supported:

       file      A pathname of a file to search.

STDIN
       Not used.

INPUT FILES
       The input files shall be of any file type.

<!-- 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 <=< ACCEPT -->ENVIRONMENT VARIABLES
       The following environment variables shall affect the execution of what:

       LANG      Provide a default value for the internationalization variables that are unset or null. (See  the  Base  Defini‐
                 tions  volume of POSIX.1‐2008, Section 8.2, Internationalization Variables for the precedence of international‐
                 ization variables used to determine the values of locale categories.)

       LC_ALL    If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_CTYPE  Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, sin‐
                 gle-byte as opposed to multi-byte characters in arguments and input files).

       LC_MESSAGES
                 Determine  the  locale  that should be used to affect the format and contents of diagnostic messages written to
                 standard error.

       NLSPATH   Determine the location of message catalogs for the processing of LC_MESSAGES.
<!-- ACCEPT >=> 58367c2b-84ba-4ef3-a97b-4ccf4b2adea9 -->
ASYNCHRONOUS EVENTS
       Default.

STDOUT
       The standard output shall consist of the following for each file operand:

           "%s:\n\t%s\n", &amp;lt;pathname&amp;gt;, &amp;lt;identification string&amp;gt;

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       None.

<!-- a42f9355-e63b-4205-ac0b-0b19b24faf9d <=< ACCEPT -->EXIT STATUS
       The following exit values shall be returned:

       0     Any matches were found.

       1     Otherwise.
<!-- ACCEPT >=> a42f9355-e63b-4205-ac0b-0b19b24faf9d -->
CONSEQUENCES OF ERRORS
       Default.

       The following sections are informative.

APPLICATION USAGE
       The what utility is intended to be used in conjunction with the SCCS command get, which automatically inserts identifying
       information, but it can also be used where the information is inserted by any other means.

       When the string "@(#)" is included in a library routine in a shared library, it might not be found in an a.out file using
       that library routine.

EXAMPLES
       If the C-language program in file f.c contains:

           char ident[] = "@(#)identification information";

       and f.c is compiled to yield f.o and a.out, then the command:

           what f.c f.o a.out

       writes:

           f.c:
               identification information
               ...
           f.o:
               identification information
               ...
           a.out:
               identification information
               ...

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       get

       The Base Definitions volume of POSIX.1‐2008, Chapter 8, Environment Variables, Section 12.2, Utility Syntax Guidelines

<!-- a108e221-dfcb-422d-8273-00868f7ba0fb <=< ACCEPT -->COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013  Edition,  Standard  for
       Information  Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7, Copy‐
       right (C) 2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This  is  POSIX.1-2008
       with  the  2013  Technical  Corrigendum 1 applied.) In the event of any discrepancy between this version and the original
       IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the  referee  document.  The  original
       Standard can be obtained online at http://www.unix.org/online.html .

       Any  typographical  or formatting errors that appear in this page are most likely to have been introduced during the con‐
       version of the source files to man page format. To report such errors,  see  https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .<!-- ACCEPT >=> a108e221-dfcb-422d-8273-00868f7ba0fb -->

IEEE/The Open Group                                           2013                                                      WHAT(1P)
WHO(1)                                                    User Commands                                                   WHO(1)

NAME
       who - show who is logged on

SYNOPSIS
       who [OPTION]... [ FILE | ARG1 ARG2 ]

DESCRIPTION
       Print information about users who are currently logged in.

       -a, --all
              same as -b -d --login -p -r -t -T -u

       -b, --boot
              time of last system boot

       -d, --dead
              print dead processes

       -H, --heading
              print line of column headings

       -l, --login
              print system login processes

       --lookup
              attempt to canonicalize hostnames via DNS

       -m     only hostname and user associated with stdin

       -p, --process
              print active processes spawned by init

       -q, --count
              all login names and number of users logged on

       -r, --runlevel
              print current runlevel

       -s, --short
              print only name, line, and time (default)

       -t, --time
              print last system clock change

       -T, -w, --mesg
              add user's message status as +, - or ?

       -u, --users
              list users logged in

       --message
              same as -T

       --writable
              same as -T

       --help display this help and exit

       --version
              output version information and exit

       If  FILE  is not specified, use /var/run/utmp.  /var/log/wtmp as FILE is common.  If ARG1 ARG2 given, -m presumed: 'am i'
       or 'mom likes' are usual.

AUTHOR
       Written by Joseph Arceneaux, David MacKenzie, and Michael Stone.

<!-- 30b0cf8a-458a-435b-a2e0-993472636e53 <=< ACCEPT -->REPORTING BUGS
       GNU coreutils online help: &amp;lt;http://www.gnu.org/software/coreutils/&amp;gt;
       Report who translation bugs to &amp;lt;http://translationproject.org/team/&amp;gt;

COPYRIGHT
       Copyright   ©   2016   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3    or    later
       &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.<!-- ACCEPT >=> 30b0cf8a-458a-435b-a2e0-993472636e53 -->

SEE ALSO
       Full documentation at: &amp;lt;http://www.gnu.org/software/coreutils/who&amp;gt;
       or available locally via: info '(coreutils) who invocation'

GNU coreutils 8.26                                        November 2016                                                   WHO(1)
WRITE(1)                                                  User Commands                                                 WRITE(1)

NAME
       write - send a message to another user

SYNOPSIS
       write user [ttyname]

DESCRIPTION
       write allows you to communicate with other users, by copying lines from your terminal to theirs.

       When you run the write command, the user you are writing to gets a message of the form:

              Message from yourname@yourhost on yourtty at hh:mm ...

       Any further lines you enter will be copied to the specified user's terminal.  If the other user wants to reply, they must
       run write as well.

       When you are done, type an end-of-file or interrupt character.  The other user will see the message EOF  indicating  that
       the conversation is over.

       You can prevent people (other than the superuser) from writing to you with the mesg(1) command.  Some commands, for exam‐
       ple nroff(1) and pr(1), may automatically disallow writing, so that the output they produce isn't overwritten.

       If the user you want to write to is logged in on more than one terminal, you can specify which terminal to  write  to  by
       giving  the terminal name as the second operand to the write command.  Alternatively, you can let write select one of the
       terminals - it will pick the one with the shortest idle time.  This is so that if the user is logged in at work and  also
       dialed up from home, the message will go to the right place.

       The  traditional  protocol  for  writing  to someone is that the string `-o', either at the end of a line or on a line by
       itself, means that it's the other person's turn to talk.  The string `oo' means that the person believes the conversation
       to be over.

SEE ALSO
       mesg(1), talk(1), who(1)

HISTORY
       A write command appeared in Version 6 AT&amp;T UNIX.

AVAILABILITY
       The  write  command  is  part  of the util-linux package and is available from ftp://ftp.kernel.org/pub/linux/utils/util-
       linux/.

util-linux                                                 March 1995                                                   WRITE(1)
XARGS(1)                                             General Commands Manual                                            XARGS(1)

NAME
       xargs - build and execute command lines from standard input

SYNOPSIS
       xargs  [-0prtx] [-E eof-str] [-e[eof-str]] [--eof[=eof-str]] [--null] [-d delimiter] [--delimiter delimiter] [-I replace-
       str] [-i[replace-str]] [--replace[=replace-str]] [-l[max-lines]] [-L max-lines] [--max-lines[=max-lines]]  [-n  max-args]
       [--max-args=max-args]     [-s     max-chars]     [--max-chars=max-chars]     [-P    max-procs]    [--max-procs=max-procs]
       [--process-slot-var=name] [--interactive]  [--verbose]  [--exit]  [--no-run-if-empty]  [--arg-file=file]  [--show-limits]
       [--version] [--help] [command [initial-arguments]]

DESCRIPTION
       This  manual  page  documents  the  GNU version of xargs.  xargs reads items from the standard input, delimited by blanks
       (which can be protected with double or single quotes or a backslash) or newlines, and executes the  command  (default  is
       /bin/echo)  one  or more times with any initial-arguments followed by items read from standard input.  Blank lines on the
       standard input are ignored.

       The command line for command is built up until it reaches a system-defined limit (unless the -n and -L options are used).
       The  specified  command  will be invoked as many times as necessary to use up the list of input items.  In general, there
       will be many fewer invocations of command than there were items in the input.  This will normally have  significant  per‐
       formance benefits.  Some commands can usefully be executed in parallel too; see the -P option.

       Because Unix filenames can contain blanks and newlines, this default behaviour is often problematic; filenames containing
       blanks and/or newlines are incorrectly processed by xargs.  In these situations it is better to use the -0 option,  which
       prevents  such  problems.    When using this option you will need to ensure that the program which produces the input for
       xargs also uses a null character as a separator.  If that program is GNU find for example, the -print0 option  does  this
       for you.

       If  any invocation of the command exits with a status of 255, xargs will stop immediately without reading any further in‐
       put.  An error message is issued on stderr when this happens.

OPTIONS
       -0, --null
              Input items are terminated by a null character instead of by whitespace, and the quotes and backslash are not spe‐
              cial (every character is taken literally).  Disables the end of file string, which is treated like any other argu‐
              ment.  Useful when input items might contain white space, quote marks, or backslashes.  The GNU find  -print0  op‐
              tion produces input suitable for this mode.

       -a file, --arg-file=file
              Read items from file instead of standard input.  If you use this option, stdin remains unchanged when commands are
              run.  Otherwise, stdin is redirected from /dev/null.

       --delimiter=delim, -d delim
              Input items are terminated by the specified character.  The specified delimiter may be a single  character,  a  C-
              style character escape such as \n, or an octal or hexadecimal escape code.  Octal and hexadecimal escape codes are
              understood as for the printf command.   Multibyte characters are not supported.  When processing the input, quotes
              and  backslash  are not special; every character in the input is taken literally.  The -d option disables any end-
              of-file string, which is treated like any other argument.  You can use this option when the input consists of sim‐
              ply  newline-separated  items, although it is almost always better to design your program to use --null where this
              is possible.

       -E eof-str
              Set the end of file string to eof-str.  If the end of file string occurs as a line of input, the rest of the input
              is ignored.  If neither -E nor -e is used, no end of file string is used.

       -e[eof-str], --eof[=eof-str]
              This  option  is  a synonym for the -E option.  Use -E instead, because it is POSIX compliant while this option is
              not.  If eof-str is omitted, there is no end of file string.  If neither -E nor -e is used, no end of file  string
              is used.

       -I replace-str
              Replace  occurrences  of replace-str in the initial-arguments with names read from standard input.  Also, unquoted
              blanks do not terminate input items; instead the separator is the newline character.  Implies -x and -L 1.

       -i[replace-str], --replace[=replace-str]
              This option is a synonym for -Ireplace-str if replace-str is specified.  If the replace-str argument  is  missing,
              the effect is the same as -I{}.  This option is deprecated; use -I instead.

       -L max-lines
              Use  at most max-lines nonblank input lines per command line.  Trailing blanks cause an input line to be logically
              continued on the next input line.  Implies -x.

       -l[max-lines], --max-lines[=max-lines]
              Synonym for the -L option.  Unlike -L, the max-lines argument is optional.  If max-lines is not specified, it  de‐
              faults to one.  The -l option is deprecated since the POSIX standard specifies -L instead.

       -n max-args, --max-args=max-args
              Use  at most max-args arguments per command line.  Fewer than max-args arguments will be used if the size (see the
              -s option) is exceeded, unless the -x option is given, in which case xargs will exit.

       -P max-procs, --max-procs=max-procs
              Run up to max-procs processes at a time; the default is 1.  If max-procs is 0, xargs will run as many processes as
              possible  at a time.  Use the -n option or the -L option with -P; otherwise chances are that only one exec will be
              done.  While xargs is running, you can send its process a SIGUSR1 signal to increase the number of commands to run
              simultaneously, or a SIGUSR2 to decrease the number.  You cannot increase it above an implementation-defined limit
              (which is shown with --show-limits).  You cannot decrease it below 1.  xargs never terminates its  commands;  when
              asked to decrease, it merely waits for more than one existing command to terminate before starting another.

              Please note that it is up to the called processes to properly manage parallel access to shared resources.  For ex‐
              ample, if more than one of them tries to print to stdout, the ouptut will be produced in  an  indeterminate  order
              (and very likely mixed up) unless the processes collaborate in some way to prevent this.  Using some kind of lock‐
              ing scheme is one way to prevent such problems.  In general, using a locking scheme will help ensure correct  out‐
              put  but  reduce  performance.   If you don't want to tolerate the performance difference, simply arrange for each
              process to produce a separate output file (or otherwise use separate resources).

       -p, --interactive
              Prompt the user about whether to run each command line and read a line from the terminal.  Only  run  the  command
              line if the response starts with `y' or `Y'.  Implies -t.

       --process-slot-var=name
              Set  the  environment variable name to a unique value in each running child process.  Values are reused once child
              processes exit.  This can be used in a rudimentary load distribution scheme, for example.

       -r, --no-run-if-empty
              If the standard input does not contain any nonblanks, do not run the command.  Normally, the command is  run  once
              even if there is no input.  This option is a GNU extension.

       -s max-chars, --max-chars=max-chars
              Use at most max-chars characters per command line, including the command and initial-arguments and the terminating
              nulls at the ends of the argument strings.  The largest allowed value is system-dependent, and  is  calculated  as
              the argument length limit for exec, less the size of your environment, less 2048 bytes of headroom.  If this value
              is more than 128KiB, 128Kib is used as the default value; otherwise, the default value is the  maximum.   1KiB  is
              1024 bytes.  xargs automatically adapts to tighter constraints.

       --show-limits
              Display  the  limits on the command-line length which are imposed by the operating system, xargs' choice of buffer
              size and the -s option.  Pipe the input from /dev/null (and perhaps specify --no-run-if-empty) if you  don't  want
              xargs to do anything.

       -t, --verbose
              Print the command line on the standard error output before executing it.

       -x, --exit
              Exit if the size (see the -s option) is exceeded.

       --help Print a summary of the options to xargs and exit.

       --version
              Print the version number of xargs and exit.

EXAMPLES
       find /tmp -name core -type f -print | xargs /bin/rm -f

       Find  files named core in or below the directory /tmp and delete them.  Note that this will work incorrectly if there are
       any filenames containing newlines or spaces.

       find /tmp -name core -type f -print0 | xargs -0 /bin/rm -f

       Find files named core in or below the directory /tmp and delete them, processing filenames in such a way that file or di‐
       rectory names containing spaces or newlines are correctly handled.

       find /tmp -depth -name core -type f -delete

       Find  files  named core in or below the directory /tmp and delete them, but more efficiently than in the previous example
       (because we avoid the need to use fork(2) and exec(2) to launch rm and we don't need the extra xargs process).

       cut -d: -f1 &amp;lt; /etc/passwd | sort | xargs echo

       Generates a compact listing of all the users on the system.

       xargs sh -c 'emacs "$@" &amp;lt; /dev/tty' emacs

       Launches the minimum number of copies of Emacs needed, one after the other, to edit the files listed on  xargs'  standard
       input.  This example achieves the same effect as BSD's -o option, but in a more flexible and portable way.

EXIT STATUS
       xargs exits with the following status:
       0 if it succeeds
       123 if any invocation of the command exited with status 1-125
       124 if the command exited with status 255
       125 if the command is killed by a signal
       126 if the command cannot be run
       127 if the command is not found
       1 if some other error occurred.

       Exit codes greater than 128 are used by the shell to indicate that a program died due to a fatal signal.

STANDARDS CONFORMANCE
       As  of  GNU xargs version 4.2.9, the default behaviour of xargs is not to have a logical end-of-file marker.  POSIX (IEEE
       Std 1003.1, 2004 Edition) allows this.

       The -l and -i options appear in the 1997 version of the POSIX standard, but do not appear in  the  2004  version  of  the
       standard.  Therefore you should use -L and -I instead, respectively.

       The  POSIX  standard  allows  implementations to have a limit on the size of arguments to the exec functions.  This limit
       could be as low as 4096 bytes including the size of the environment.  For scripts to be portable, they must not rely on a
       larger  value.   However,  I know of no implementation whose actual limit is that small.  The --show-limits option can be
       used to discover the actual limits in force on the current system.

SEE ALSO
       find(1), locate(1), locatedb(5), updatedb(1), fork(2), execvp(3), kill(1), signal(7),

       The  full documentation for xargs is maintained as a Texinfo manual.  If the info and xargs  programs  are  properly  in‐
       stalled at your site, the command info xargs should give you access to the complete manual.

BUGS
       The -L option is incompatible with the -I option, but perhaps should not be.

       It  is  not  possible  for xargs to be used securely, since there will always be a time gap between the production of the
       list of input files and their use in the commands that xargs issues.  If other users have access to the system, they  can
       manipulate  the  filesystem during this time window to force the action of the commands xargs runs to apply to files that
       you didn't intend.  For a more detailed discussion of this and related problems, please refer to the ``Security Consider‐
       ations''  chapter in the findutils Texinfo documentation.  The -execdir option of find can often be used as a more secure
       alternative.

       When you use the -I option, each line read from the input is buffered internally.   This means that  there  is  an  upper
       limit  on  the length of input line that xargs will accept when used with the -I option.  To work around this limitation,
       you can use the -s option to increase the amount of buffer space that xargs uses, and you can also use an  extra  invoca‐
       tion of xargs to ensure that very long lines do not occur.  For example:

       somecommand | xargs -s 50000 echo | xargs -I '{}' -s 100000 rm '{}'

       Here,  the first invocation of xargs has no input line length limit because it doesn't use the -i option.  The second in‐
       vocation of xargs does have such a limit, but we have ensured that the it never encounters a line which is longer than it
       can  handle.   This is not an ideal solution.  Instead, the -i option should not impose a line length limit, which is why
       this discussion appears in the BUGS section.  The problem doesn't occur with the output of find(1) because it emits  just
       one filename per line.

       The best way to report a bug is to use the form at http://savannah.gnu.org/bugs/?group=findutils.  The reason for this is
       that you will then be able to track progress in fixing the problem.   Other comments about xargs(1) and about the  findu‐
       tils package in general can be sent to the bug-findutils mailing list.  To join the list, send email to bug-findutils-re‐
       quest@gnu.org.

                                                                                                                        XARGS(1)
YACC(1)                                                   User Commands                                                  YACC(1)

NAME
       yacc - GNU Project parser generator

SYNOPSIS
       yacc [OPTION]... FILE

DESCRIPTION
       Yacc (Yet Another Compiler Compiler) is a parser generator.  This version is a simple wrapper around bison(1).  It passes
       option -y, --yacc to activate the upward compatibility mode.  See bison(1) for more information.

AUTHOR
       Written by Paul Eggert.

REPORTING BUGS
       Report bugs to &amp;lt;bug-bison@gnu.org&amp;gt;.

COPYRIGHT
       Copyright © 2015 Free Software Foundation, Inc.
       This is free software; see the source for copying conditions.  There is NO warranty; not even for MERCHANTABILITY or FIT‐
       NESS FOR A PARTICULAR PURPOSE.

SEE ALSO
       lex(1), flex(1), bison(1).

       The  full  documentation  for  bison  is  maintained  as  a  Texinfo manual.  If the info and bison programs are properly
       installed at your site, the command

              info bison

       should give you access to the complete manual.

GNU Bison 3.0.4                                           November 2007                                                  YACC(1)
GZIP(1)                                              General Commands Manual                                             GZIP(1)

NAME
       gzip, gunzip, zcat - compress or expand files

SYNOPSIS
       gzip [ -acdfhklLnNrtvV19 ] [-S suffix] [ name ...  ]
       gunzip [ -acfhklLnNrtvV ] [-S suffix] [ name ...  ]
       zcat [ -fhLV ] [ name ...  ]

DESCRIPTION
       Gzip reduces the size of the named files using Lempel-Ziv coding (LZ77).  Whenever possible, each file is replaced by one
       with the extension .gz, while keeping the same ownership modes, access and modification times.  (The default extension is
       -gz  for VMS, z for MSDOS, OS/2 FAT, Windows NT FAT and Atari.)  If no files are specified, or if a file name is "-", the
       standard input is compressed to the standard output.  Gzip will only attempt to compress regular files.   In  particular,
       it will ignore symbolic links.

       If the compressed file name is too long for its file system, gzip truncates it.  Gzip attempts to truncate only the parts
       of the file name longer than 3 characters.  (A part is delimited by dots.) If the name consists of small parts only,  the
       longest  parts  are  truncated.  For example, if file names are limited to 14 characters, gzip.msdos.exe is compressed to
       gzi.msd.exe.gz.  Names are not truncated on systems which do not have a limit on file name length.

       By default, gzip keeps the original file name and timestamp in the compressed file. These are used when decompressing the
       file  with  the -N option. This is useful when the compressed file name was truncated or when the time stamp was not pre‐
       served after a file transfer.

       Compressed files can be restored to their original form using gzip -d or gunzip or zcat.  If the original name  saved  in
       the  compressed  file  is  not  suitable  for its file system, a new name is constructed from the original one to make it
       legal.

       gunzip takes a list of files on its command line and replaces each file whose name ends with .gz,  -gz,  .z,  -z,  or  _z
       (ignoring  case) and which begins with the correct magic number with an uncompressed file without the original extension.
       gunzip also recognizes the special extensions .tgz and .taz as shorthands for .tar.gz and .tar.Z respectively.  When com‐
       pressing, gzip uses the .tgz extension if necessary instead of truncating a file with a .tar extension.

       gunzip  can  currently  decompress files created by gzip, zip, compress, compress -H or pack.  The detection of the input
       format is automatic.  When using the first two formats, gunzip checks a 32 bit CRC. For pack and gunzip checks the uncom‐
       pressed  length.  The  standard compress format was not designed to allow consistency checks. However gunzip is sometimes
       able to detect a bad .Z file. If you get an error when uncompressing a .Z file, do not assume that the .Z file is correct
       simply  because  the  standard  uncompress  does not complain. This generally means that the standard uncompress does not
       check its input, and happily generates garbage output.  The SCO compress -H format  (lzh  compression  method)  does  not
       include a CRC but also allows some consistency checks.

       Files  created  by  zip  can  be  uncompressed  by gzip only if they have a single member compressed with the 'deflation'
       method. This feature is only intended to help conversion of tar.zip files to the tar.gz format.  To extract  a  zip  file
       with  a  single  member, use a command like gunzip &amp;lt;foo.zip or gunzip -S .zip foo.zip.  To extract zip files with several
       members, use unzip instead of gunzip.

       zcat is identical to gunzip -c.  (On some systems, zcat may be installed as gzcat to preserve the original link  to  com‐
       press.)   zcat  uncompresses either a list of files on the command line or its standard input and writes the uncompressed
       data on standard output.  zcat will uncompress files that have the correct magic number whether they have a .gz suffix or
       not.

       Gzip  uses the Lempel-Ziv algorithm used in zip and PKZIP.  The amount of compression obtained depends on the size of the
       input and the distribution of common substrings.  Typically, text such as source code or English is  reduced  by  60-70%.
       Compression  is  generally much better than that achieved by LZW (as used in compress), Huffman coding (as used in pack),
       or adaptive Huffman coding (compact).

       Compression is always performed, even if the compressed file is slightly larger than the original. The worst case  expan‐
       sion  is  a  few  bytes for the gzip file header, plus 5 bytes every 32K block, or an expansion ratio of 0.015% for large
       files. Note that the actual number of used disk blocks almost never increases.  gzip preserves the  mode,  ownership  and
       timestamps of files when compressing or decompressing.

OPTIONS
       -a --ascii
              Ascii text mode: convert end-of-lines using local conventions. This option is supported only on some non-Unix sys‐
              tems. For MSDOS, CR LF is converted to LF when compressing, and LF is converted to CR LF when decompressing.

       -c --stdout --to-stdout
              Write output on standard output; keep original files unchanged.  If there are several input files, the output con‐
              sists of a sequence of independently compressed members. To obtain better compression, concatenate all input files
              before compressing them.

       -d --decompress --uncompress
              Decompress.

       -f --force
              Force compression or decompression even if the file has multiple links or the corresponding file  already  exists,
              or  if  the compressed data is read from or written to a terminal. If the input data is not in a format recognized
              by gzip, and if the option --stdout is also given, copy the input data without change to the standard output:  let
              zcat behave as cat.  If -f is not given, and when not running in the background, gzip prompts to verify whether an
              existing file should be overwritten.

       -h --help
              Display a help screen and quit.

       -k --keep
              Keep (don't delete) input files during compression or decompression.

       -l --list
              For each compressed file, list the following fields:

                  compressed size: size of the compressed file
                  uncompressed size: size of the uncompressed file
                  ratio: compression ratio (0.0% if unknown)
                  uncompressed_name: name of the uncompressed file

              The uncompressed size is given as -1 for files not in gzip format, such as compressed .Z files. To get the  uncom‐
              pressed size for such a file, you can use:

                  zcat file.Z | wc -c

              In combination with the --verbose option, the following fields are also displayed:

                  method: compression method
                  crc: the 32-bit CRC of the uncompressed data
                  date &amp; time: time stamp for the uncompressed file

              The  compression  methods  currently  supported are deflate, compress, lzh (SCO compress -H) and pack.  The crc is
              given as ffffffff for a file not in gzip format.

              With --name, the uncompressed name,  date and time  are those stored within the compress file if present.

              With --verbose, the size totals and compression ratio for all files is  also  displayed,  unless  some  sizes  are
              unknown. With --quiet, the title and totals lines are not displayed.

       -L --license
              Display the gzip license and quit.

       -n --no-name
              When compressing, do not save the original file name and time stamp by default. (The original name is always saved
              if the name had to be truncated.) When decompressing, do not restore the original file  name  if  present  (remove
              only the gzip suffix from the compressed file name) and do not restore the original time stamp if present (copy it
              from the compressed file). This option is the default when decompressing.

       -N --name
              When compressing, always save the original file name and time stamp; this  is  the  default.  When  decompressing,
              restore  the  original file name and time stamp if present. This option is useful on systems which have a limit on
              file name length or when the time stamp has been lost after a file transfer.

       -q --quiet
              Suppress all warnings.

       -r --recursive
              Travel the directory structure recursively. If any of the file names specified on the command  line  are  directo‐
              ries,  gzip  will  descend into the directory and compress all the files it finds there (or decompress them in the
              case of gunzip ).

       -S .suf --suffix .suf
              When compressing, use suffix .suf instead of .gz.  Any non-empty suffix can be given, but suffixes other  than  .z
              and .gz should be avoided to avoid confusion when files are transferred to other systems.

              When  decompressing,  add  .suf to the beginning of the list of suffixes to try, when deriving an output file name
              from an input file name.

       --synchronous
              Use synchronous output.  With this option, gzip is less likely to lose data during a system crash, but it  can  be
              considerably slower.

       -t --test
              Test. Check the compressed file integrity.

       -v --verbose
              Verbose. Display the name and percentage reduction for each file compressed or decompressed.

       -V --version
              Version. Display the version number and compilation options then quit.

       -# --fast --best
              Regulate  the  speed of compression using the specified digit #, where -1 or --fast indicates the fastest compres‐
              sion method (less compression) and -9 or --best indicates the slowest compression method (best compression).   The
              default compression level is -6 (that is, biased towards high compression at expense of speed).

       --rsyncable
              When you synchronize a compressed file between two computers, this option allows rsync to transfer only files that
              were changed in the archive instead of the entire archive.  Normally, after a change is made to any  file  in  the
              archive, the compression algorithm can generate a new version of the archive that does not match the previous ver‐
              sion of the archive. In this case, rsync transfers the entire new version of the archive to the  remote  computer.
              With this option, rsync can transfer only the changed files as well as a small amount of metadata that is required
              to update the archive structure in the area that was changed.

ADVANCED USAGE
       Multiple compressed files can be concatenated. In this case, gunzip will extract all members at once. For example:

             gzip -c file1  &amp;gt; foo.gz
             gzip -c file2 &amp;gt;&amp;gt; foo.gz

       Then

             gunzip -c foo

       is equivalent to

             cat file1 file2

       In case of damage to one member of a .gz file, other members can still be recovered (if the damaged member  is  removed).
       However, you can get better compression by compressing all members at once:

             cat file1 file2 | gzip &amp;gt; foo.gz

       compresses better than

             gzip -c file1 file2 &amp;gt; foo.gz

       If you want to recompress concatenated files to get better compression, do:

             gzip -cd old.gz | gzip &amp;gt; new.gz

       If  a compressed file consists of several members, the uncompressed size and CRC reported by the --list option applies to
       the last member only. If you need the uncompressed size for all members, you can use:

             gzip -cd file.gz | wc -c

       If you wish to create a single archive file with multiple members so that members can later be  extracted  independently,
       use  an  archiver  such as tar or zip. GNU tar supports the -z option to invoke gzip transparently. gzip is designed as a
       complement to tar, not as a replacement.

ENVIRONMENT
       The obsolescent environment variable GZIP can hold a set of default options for  gzip.   These  options  are  interpreted
       first  and  can  be overwritten by explicit command line parameters.  As this can cause problems when using scripts, this
       feature is supported only for options that are reasonably likely to not cause too much harm, and  gzip  warns  if  it  is
       used.  This feature will be removed in a future release of gzip.

       You  can  use an alias or script instead.  For example, if gzip is in the directory /usr/bin you can prepend $HOME/bin to
       your PATH and create an executable script $HOME/bin/gzip containing the following:

             #! /bin/sh
             export PATH=/usr/bin
             exec gzip -9 "$@"

       On VMS, the name of the obsolescent environment variable is GZIP_OPT, to avoid a conflict with the symbol set for invoca‐
       tion of the program.

SEE ALSO
       znew(1), zcmp(1), zmore(1), zforce(1), gzexe(1), zip(1), unzip(1), compress(1)

       The    gzip   file   format   is   specified   in   P.   Deutsch,   GZIP   file   format   specification   version   4.3,
       &amp;lt;http://www.ietf.org/rfc/rfc1952.txt&amp;gt;, Internet RFC 1952 (May 1996).   The  zip  deflation  format  is  specified  in  P.
       Deutsch,  DEFLATE  Compressed  Data Format Specification version 1.3, &amp;lt;http://www.ietf.org/rfc/rfc1951.txt&amp;gt;, Internet RFC
       1951 (May 1996).

DIAGNOSTICS
       Exit status is normally 0; if an error occurs, exit status is 1. If a warning occurs, exit status is 2.

       Usage: gzip [-cdfhklLnNrtvV19] [-S suffix] [file ...]
              Invalid options were specified on the command line.

       file: not in gzip format
              The file specified to gunzip has not been compressed.

       file: Corrupt input. Use zcat to recover some data.
              The compressed file has been damaged. The data up to the point of failure can be recovered using

                    zcat file &amp;gt; recover

       file: compressed with xx bits, can only handle yy bits
              File was compressed (using LZW) by a program that could deal with more bits  than  the  decompress  code  on  this
              machine.  Recompress the file with gzip, which compresses better and uses less memory.

       file: already has .gz suffix -- unchanged
              The file is assumed to be already compressed.  Rename the file and try again.

       file already exists; do you wish to overwrite (y or n)?
              Respond "y" if you want the output file to be replaced; "n" if not.

       gunzip: corrupt input
              A SIGSEGV violation was detected which usually means that the input file has been corrupted.

       xx.x% Percentage of the input saved by compression.
              (Relevant only for -v and -l.)

       -- not a regular file or directory: ignored
              When  the  input file is not a regular file or directory, (e.g. a symbolic link, socket, FIFO, device file), it is
              left unaltered.

       -- has xx other links: unchanged
              The input file has links; it is left unchanged.  See ln(1) for more information. Use the -f flag to force compres‐
              sion of multiply-linked files.

CAVEATS
       When  writing  compressed data to a tape, it is generally necessary to pad the output with zeroes up to a block boundary.
       When the data is read and the whole block is passed to gunzip for decompression,  gunzip  detects  that  there  is  extra
       trailing  garbage  after  the compressed data and emits a warning by default.  You can use the --quiet option to suppress
       the warning.

BUGS
       The gzip format represents the input size modulo 2^32, so the --list option reports incorrect uncompressed sizes and com‐
       pression  ratios  for uncompressed files 4 GB and larger.  To work around this problem, you can use the following command
       to discover a large uncompressed file's true size:

             zcat file.gz | wc -c

       The --list option reports sizes as -1 and crc as ffffffff if the compressed file is on a non seekable media.

       In some rare cases, the --best option gives worse compression than the default compression level  (-6).  On  some  highly
       redundant files, compress compresses better than gzip.

COPYRIGHT NOTICE
       Copyright © 1998-1999, 2001-2002, 2012, 2015-2016 Free Software Foundation, Inc.
       Copyright © 1992, 1993 Jean-loup Gailly

       Permission  is  granted to make and distribute verbatim copies of this manual provided the copyright notice and this per‐
       mission notice are preserved on all copies.

       Permission is granted to copy and distribute modified versions of this manual under the conditions for verbatim  copying,
       provided  that  the entire resulting derived work is distributed under the terms of a permission notice identical to this
       one.

       Permission is granted to copy and distribute translations of this manual into another language, under  the  above  condi‐
       tions  for  modified  versions, except that this permission notice may be stated in a translation approved by the Founda‐
       tion.

                                                              local                                                      GZIP(1)

</plainxml>
