<?xml version="1.0" encoding="utf-8" ?>
<plainxml>'\" et
.TH ADMIN "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
admin
\(em create and administer SCCS files (\fBDEVELOPMENT\fP)
.SH SYNOPSIS
.LP
.nf
admin \(mii\fB[\fIname\fB] [\fR\(min\fB] [\fR\(mia \fIlogin\fB] [\fR\(mid \fIflag\fB] [\fR\(mie \fIlogin\fB] [\fR\(mif \fIflag\fB]
[\fR\(mim \fImrlist\fB] [\fR\(mir \fIrel\fB] [\fR\(mit\fB[\fIname\fB] [\fR\(miy\fB[\fIcomment\fB]] \fInewfile\fR
.P
admin \(min\fB [\fR\(mia \fIlogin\fB] [\fR\(mid \fIflag\fB] [\fR\(mie \fIlogin\fB] [\fR\(mif \fIflag\fB] [\fR\(mim \fImrlist\fB]
[\fR\(mit\fB[\fIname\fB]] [\fR\(miy\fB[\fIcomment\fB]] \fInewfile\fR...
.P
admin \fB[\fR\(mia \fIlogin\fB] [\fR\(mid \fIflag\fB] [\fR\(mim \fImrlist\fB] [\fR\(mir \fIrel\fB] [\fR\(mit\fB[\fIname\fB]]\fR \fIfile\fR...
.P
admin \(mih \fIfile\fR...
.P
admin \(miz \fIfile\fR...
.fi
.SH DESCRIPTION
The
.IR admin
utility shall create new SCCS files or change parameters of existing
ones. If a named file does not exist, it shall be created, and its
parameters shall be initialized according to the specified options.
Parameters not initialized by an option shall be assigned a default
value. If a named file does exist, parameters corresponding to
specified options shall be changed, and other parameters shall be left
as is.
.P
All SCCS filenames supplied by the application shall be of the form
s.\fIfilename\fP. New SCCS files shall be given read-only permission
mode. Write permission in the parent directory is required to create a
file. All writing done by
.IR admin
shall be to a temporary
.IR x-file ,
named x.\fIfilename\fP (see
.IR "\fIget\fR\^")
created with read-only mode if
.IR admin
is creating a new SCCS file, or created with the same mode as that of
the SCCS file if the file already exists. After successful execution of
.IR admin ,
the SCCS file shall be removed (if it exists), and the
.IR x-file
shall be renamed with the name of the SCCS file. This ensures that
changes are made to the SCCS file only if no errors occur.
.P
The
.IR admin
utility shall also use a transient lock file (named z.\fIfilename\fP),
which is used to prevent simultaneous updates to the SCCS file; see
.IR "\fIget\fR\^".
.SH OPTIONS
The
.IR admin
utility shall conform to the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 12.2" ", " "Utility Syntax Guidelines",
except that the
.BR \(mii ,
.BR \(mit ,
and
.BR \(miy
options have optional option-arguments. These optional option-arguments
shall not be presented as separate arguments. The following options are
supported:
.IP "\fB\(min\fP" 10
Create a new SCCS file. When
.BR \(min
is used without
.BR \(mii ,
the SCCS file shall be created with control information but without any
file data.
.IP "\fB\(mii[\fIname\fB]\fR" 10
Specify the
.IR name
of a file from which the text for a new SCCS file shall be taken. The
text constitutes the first delta of the file (see the
.BR \(mir
option for the delta numbering scheme). If the
.BR \(mii
option is used, but the
.IR name
option-argument is omitted, the text shall be obtained by reading the
standard input. If this option is omitted, the SCCS file shall be
created with control information but without any file data. The
.BR \(mii
option implies the
.BR \(min
option.
.IP "\fB\(mir\ \fISID\fR" 10
Specify the SID of the initial delta to be inserted. This SID shall be
a trunk SID; that is, the branch and sequence numbers shall be zero or
missing. The level number is optional, and defaults to 1.
.IP "\fB\(mit[\fIname\fB]\fR" 10
Specify the
.IR name
of a file from which descriptive text for the SCCS file shall be taken.
In the case of existing SCCS files (neither
.BR \(mii
nor
.BR \(min
is specified):
.RS 10 
.IP " *" 4
A
.BR \(mit
option without a
.IR name
option-argument shall cause the removal of descriptive text (if any)
currently in the SCCS file.
.IP " *" 4
A
.BR \(mit
option with a
.IR name
option-argument shall cause the text (if any) in the named file to
replace the descriptive text (if any) currently in the SCCS file.
.RE
.IP "\fB\(mif\ \fIflag\fR" 10
Specify a
.IR flag ,
and, possibly, a value for the
.IR flag ,
to be placed in the SCCS file. Several
.BR \(mif
options may be supplied on a single
.IR admin
command line. Implementations shall recognize the following flags
and associated values:
.RS 10 
.IP "\fBb\fP" 8
Allow use of the
.BR \(mib
option on a
.IR get
command to create branch deltas.
.IP "\fBc\fIceil\fR" 8
Specify the highest release (that is, ceiling), a number less than or
equal to 9\|999, which may be retrieved by a
.IR get
command for editing. The default value for an unspecified
.BR c
flag shall be 9\|999.
.IP "\fBf\fIfloor\fR" 8
Specify the lowest release (that is, floor), a number greater than 0
but less than 9\|999, which may be retrieved by a
.IR get
command for editing. The default value for an unspecified
.BR f
flag shall be 1.
.IP "\fBd\fISID\fR" 8
Specify the default delta number (SID) to be used by a
.IR get
command.
.IP "\fBi\fIstr\fR" 8
Treat the ``No ID keywords'' message issued by
.IR get
or
.IR delta
as a fatal error. In the absence of this flag, the message is only a
warning. The message is issued if no SCCS identification keywords (see
.IR "\fIget\fR\^")
are found in the text retrieved or stored in the SCCS file. If a value
is supplied, the application shall ensure that the keywords exactly
match the given string; however, the string shall contain a keyword,
and no embedded
&lt;newline&gt;
characters.
.IP "\fBj\fP" 8
Allow concurrent
.IR get
commands for editing on the same SID of an SCCS file. This allows
multiple concurrent updates to the same version of the SCCS file.
.IP "\fBl\fIlist\fR" 8
Specify a
.IR list
of releases to which deltas can no longer be made (that is,
.IR get
.BR \(mie
against one of these locked releases fails). Conforming applications
shall use the following syntax to specify a
.IR list .
Implementations may accept additional forms as an extension:
.RS 8 
.sp
.RS 4
.nf
\fB
&lt;list&gt; ::= a | &lt;range-list&gt;
&lt;range-list&gt; ::= &lt;range&gt; | &lt;range-list&gt;, &lt;range&gt;
&lt;range&gt; ::= &lt;SID&gt;
.fi \fR
.P
.RE
.P
The character
.IR a
in the
.IR list
shall be equivalent to specifying all releases for the named SCCS file.
The non-terminal &lt;\fISID\fP&gt; in range shall be the delta number of an
existing delta associated with the SCCS file.
.RE
.IP "\fBn\fP" 8
Cause
.IR delta
to create a null delta in each of those releases (if any) being skipped
when a delta is made in a new release (for example, in making delta 5.1
after delta 2.7, releases 3 and 4 are skipped). These null deltas shall
serve as anchor points so that branch deltas may later be created from
them. The absence of this flag shall cause skipped releases to be
nonexistent in the SCCS file, preventing branch deltas from being
created from them in the future. During the initial creation of an SCCS
file, the
.BR n
flag may be ignored; that is, if the
.BR \(mir
option is used to set the release number of the initial SID to a value
greater than 1, null deltas need not be created for the ``skipped''
releases.
.IP "\fBq\fItext\fR" 8
Substitute user-definable
.IR text
for all occurrences of the %\fBQ\fP% keyword in the SCCS file text
retrieved by
.IR get .
.IP "\fBm\fImod\fR" 8
Specify the module name of the SCCS file substituted for all
occurrences of the %\fBM\fP% keyword in the SCCS file text retrieved by
.IR get .
If the
.BR m
flag is not specified, the value assigned shall be the name of the SCCS
file with the leading
.BR '.' 
removed.
.IP "\fBt\fItype\fR" 8
Specify the
.IR type
of module in the SCCS file substituted for all occurrences of the
%\fBY\fP% keyword in the SCCS file text retrieved by
.IR get .
.IP "\fBv\fIpgm\fR" 8
Cause
.IR delta
to prompt for modification request (MR) numbers as the reason for
creating a delta. The optional value specifies the name of an MR
number validation program. (If this flag is set when creating an SCCS
file, the application shall ensure that the
.BR m
option is also used even if its value is null.)
.RE
.IP "\fB\(mid\ \fIflag\fR" 10
Remove (delete) the specified
.IR flag
from an SCCS file. Several
.BR \(mid
options may be supplied on a single
.IR admin
command. See the
.BR \(mif
option for allowable
.IR flag
names. (The
.BR l \c
.IR list
flag gives a
.IR list
of releases to be unlocked. See the
.BR \(mif
option for further description of the
.BR l
flag and the syntax of a
.IR list .)
.IP "\fB\(mia\ \fIlogin\fR" 10
Specify a
.IR login
name, or numerical group ID, to be added to the list of users who may
make deltas (changes) to the SCCS file. A group ID shall be equivalent
to specifying all
.IR login
names common to that group ID. Several
.BR \(mia
options may be used on a single
.IR admin
command line. As many
.IR login s,
or numerical group IDs, as desired may be on the list simultaneously.
If the list of users is empty, then anyone may add deltas. If
.IR login
or group ID is preceded by a
.BR '!' ,
the users so specified shall be denied permission to make deltas.
.IP "\fB\(mie\ \fIlogin\fR" 10
Specify a
.IR login
name, or numerical group ID, to be erased from the list of users
allowed to make deltas (changes) to the SCCS file. Specifying a group
ID is equivalent to specifying all
.IR login
names common to that group ID. Several
.BR \(mie
options may be used on a single
.IR admin
command line.
.IP "\fB\(miy[\fIcomment\fB]\fR" 10
Insert the
.IR comment
text into the SCCS file as a comment for the initial delta in a manner
identical to that of
.IR delta .
In the POSIX locale, omission of the
.BR \(miy
option shall result in a default comment line being inserted in
the form:
.RS 10 
.sp
.RS 4
.nf
\fB
"date and time created %s %s by %s", &lt;\fIdate\fR&gt;, &lt;\fItime\fR&gt;, &lt;\fIlogin\fR&gt;
.fi \fR
.P
.RE
.P
where &lt;\fIdate\fP&gt; is expressed in the format of the
.IR date
utility's
.BR %y /\c
.BR %m /\c
.BR %d
conversion specification, &lt;\fItime\fP&gt; in the format of the
.IR date
utility's
.BR %T
conversion specification format, and &lt;\fIlogin\fP&gt; is the login name of
the user creating the file.
.RE
.IP "\fB\(mim\ \fImrlist\fR" 10
Insert the list of modification request (MR) numbers into the SCCS
file as the reason for creating the initial delta in a manner identical to
.IR delta .
The application shall ensure that the
.BR v
flag is set and the MR numbers are validated if the
.BR v
flag has a value (the name of an MR number validation program).
A diagnostic message shall be written if the
.BR v
flag is not set or MR validation fails.
.IP "\fB\(mih\fP" 10
Check the structure of the SCCS file and compare the newly computed
checksum with the checksum that is stored in the SCCS file. If the
newly computed checksum does not match the checksum in the SCCS file, a
diagnostic message shall be written.
.IP "\fB\(miz\fR" 10
Recompute the SCCS file checksum and store it in the first line of the
SCCS file (see the
.BR \(mih
option above). Note that use of this option on a truly corrupted
file may prevent future detection of the corruption.
.SH OPERANDS
The following operands shall be supported:
.IP "\fIfile\fR" 10
A pathname of an existing SCCS file or a directory. If
.IR file
is a directory, the
.IR admin
utility shall behave as though each file in the directory were
specified as a named file, except that non-SCCS files (last component
of the pathname does not begin with
.BR s. )
and unreadable files shall be silently ignored.
.IP "\fInewfile\fR" 10
A pathname of an SCCS file to be created.
.P
If exactly one
.IR file
or
.IR newfile
operand appears, and it is
.BR '\(mi' ,
the standard input shall be read; each line of the standard input shall
be taken to be the name of an SCCS file to be processed. Non-SCCS files
and unreadable files shall be silently ignored.
.SH STDIN
The standard input shall be a text file used only if
.BR \(mii
is specified without an option-argument or if a
.IR file
or
.IR newfile
operand is specified as
.BR '\(mi' .
If the first character of any standard input line is
&lt;SOH&gt;
in the POSIX locale, the results are unspecified.
.SH "INPUT FILES"
The existing SCCS files shall be text files of an unspecified format.
.P
The application shall ensure that the file named by the
.BR \(mii
option's
.IR name
option-argument shall be a text file; if the first character of any
line in this file is
&lt;SOH&gt;
in the POSIX locale, the results are unspecified. If this file contains
more than 99\|999 lines, the number of lines recorded in the header for
this file shall be 99\|999 for this delta.
.SH "ENVIRONMENT VARIABLES"
The following environment variables shall affect the execution of
.IR admin :
.IP "\fILANG\fP" 10
Provide a default value for the internationalization variables that are
unset or null. (See the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 8.2" ", " "Internationalization Variables"
for the precedence of internationalization variables used to determine
the values of locale categories.)
.IP "\fILC_ALL\fP" 10
If set to a non-empty string value, override the values of all the
other internationalization variables.
.IP "\fILC_CTYPE\fP" 10
Determine the locale for the interpretation of sequences of bytes of
text data as characters (for example, single-byte as opposed to
multi-byte characters in arguments and input files).
.IP "\fILC_MESSAGES\fP" 10
.br
Determine the locale that should be used to affect the format and
contents of diagnostic messages written to standard error and the
contents of the default
.BR \(miy
comment.
.IP "\fINLSPATH\fP" 10
Determine the location of message catalogs for the processing of
.IR LC_MESSAGES .
.SH "ASYNCHRONOUS EVENTS"
Default.
.SH STDOUT
Not used.
.SH STDERR
The standard error shall be used only for diagnostic messages.
.SH "OUTPUT FILES"
Any SCCS files created shall be text files of an unspecified format.
During processing of a
.IR file ,
a locking
.IR z-file ,
as described in
.IR "\fIget\fR\^",
may be created and deleted.
.SH "EXTENDED DESCRIPTION"
None.
.SH "EXIT STATUS"
The following exit values shall be returned:
.IP "\00" 6
Successful completion.
.IP &gt;0 6
An error occurred.
.SH "CONSEQUENCES OF ERRORS"
Default.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
It is recommended that directories containing SCCS files be writable by
the owner only, and that SCCS files themselves be read-only. The mode
of the directories should allow only the owner to modify SCCS files
contained in the directories. The mode of the SCCS files prevents any
modification at all except by SCCS commands.
.SH EXAMPLES
None.
.SH RATIONALE
None.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "\fIdelta\fR\^",
.IR "\fIget\fR\^",
.IR "\fIprs\fR\^",
.IR "\fIwhat\fR\^"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "Chapter 8" ", " "Environment Variables",
.IR "Section 12.2" ", " "Utility Syntax Guidelines"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
'\" et
.TH ALIAS "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
alias
\(em define or display aliases
.SH SYNOPSIS
.LP
.nf
alias \fB[\fIalias-name\fB[\fR=\fIstring\fB]\fR...\fB]\fR
.fi
.SH DESCRIPTION
The
.IR alias
utility shall create or redefine alias definitions or write the values
of existing alias definitions to standard output. An alias definition
provides a string value that shall replace a command name when it is
encountered; see
.IR "Section 2.3.1" ", " "Alias Substitution".
.P
An alias definition shall affect the current shell execution
environment and the execution environments of the subshells of the
current shell. When used as specified by this volume of POSIX.1\(hy2008, the alias definition
shall not affect the parent process of the current shell nor any
utility environment invoked by the shell; see
.IR "Section 2.12" ", " "Shell Execution Environment".
.SH OPTIONS
None.
.SH OPERANDS
The following operands shall be supported:
.IP "\fIalias-name\fR" 10
Write the alias definition to standard output.
.IP "\fIalias-name\fP=\fIstring\fR" 10
.br
Assign the value of
.IR string
to the alias
.IR alias-name .
.P
If no operands are given, all alias definitions shall be written to
standard output.
.SH STDIN
Not used.
.SH "INPUT FILES"
None.
.SH "ENVIRONMENT VARIABLES"
The following environment variables shall affect the execution of
.IR alias :
.IP "\fILANG\fP" 10
Provide a default value for the internationalization variables that are
unset or null. (See the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 8.2" ", " "Internationalization Variables"
for the precedence of internationalization variables used to determine
the values of locale categories.)
.IP "\fILC_ALL\fP" 10
If set to a non-empty string value, override the values of all the
other internationalization variables.
.IP "\fILC_CTYPE\fP" 10
Determine the locale for the interpretation of sequences of bytes of
text data as characters (for example, single-byte as opposed to
multi-byte characters in arguments).
.IP "\fILC_MESSAGES\fP" 10
.br
Determine the locale that should be used to affect the format and
contents of diagnostic messages written to standard error.
.IP "\fINLSPATH\fP" 10
Determine the location of message catalogs for the processing of
.IR LC_MESSAGES .
.SH "ASYNCHRONOUS EVENTS"
Default.
.SH STDOUT
The format for displaying aliases (when no operands or only
.IR name
operands are specified) shall be:
.sp
.RS 4
.nf
\fB
"%s=%s\en", \fIname\fR, \fIvalue\fR
.fi \fR
.P
.RE
.P
The
.IR value
string shall be written with appropriate quoting so that it is suitable
for reinput to the shell. See the description of shell quoting in
.IR "Section 2.2" ", " "Quoting".
.SH STDERR
The standard error shall be used only for diagnostic messages.
.SH "OUTPUT FILES"
None.
.SH "EXTENDED DESCRIPTION"
None.
.SH "EXIT STATUS"
The following exit values shall be returned:
.IP "\00" 6
Successful completion.
.IP &gt;0 6
One of the
.IR name
operands specified did not have an alias definition, or an error
occurred.
.SH "CONSEQUENCES OF ERRORS"
Default.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
None.
.SH EXAMPLES
.IP " 1." 4
Create a short alias for a commonly used
.IR ls
command:
.RS 4 
.sp
.RS 4
.nf
\fB
alias lf="ls \(miCF"
.fi \fR
.P
.RE
.RE
.IP " 2." 4
Create a simple ``redo'' command to repeat previous entries in the
command history file:
.RS 4 
.sp
.RS 4
.nf
\fB
alias r='fc \(mis'
.fi \fR
.P
.RE
.RE
.IP " 3." 4
Use 1K units for
.IR du :
.RS 4 
.sp
.RS 4
.nf
\fB
alias du=du\e \(mik
.fi \fR
.P
.RE
.RE
.IP " 4." 4
Set up
.IR nohup
so that it can deal with an argument that is itself an alias name:
.RS 4 
.sp
.RS 4
.nf
\fB
alias nohup="nohup "
.fi \fR
.P
.RE
.RE
.SH RATIONALE
The
.IR alias
description is based on historical KornShell implementations. Known
differences exist between that and the C shell. The KornShell version
was adopted to be consistent with all the other KornShell features in
\&amp;this volume of POSIX.1\(hy2008, such as command line editing.
.P
Since
.IR alias
affects the current shell execution environment, it is generally
provided as a shell regular built-in.
.P
Historical versions of the KornShell have allowed aliases to be
exported to scripts that are invoked by the same shell. This is
triggered by the
.IR alias
.BR \(mix
flag; it is allowed by this volume of POSIX.1\(hy2008 only when an explicit extension such as
.BR \(mix
is used. The standard developers considered that aliases were of use
primarily to interactive users and that they should normally not affect
shell scripts called by those users; functions are available to such
scripts.
.P
Historical versions of the KornShell had not written aliases in a
quoted manner suitable for reentry to the shell, but this volume of POSIX.1\(hy2008 has made
this a requirement for all similar output. Therefore, consistency was
chosen over this detail of historical practice.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "Section 2.9.5" ", " "Function Definition Command"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "Chapter 8" ", " "Environment Variables"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C&lt;&gt;.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&amp;(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&amp;(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X&lt;&gt; in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&amp;
.    ds #] \&amp;
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&amp;
.    ds ` \&amp;
.    ds ^ \&amp;
.    ds , \&amp;
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H&gt;23 .if \n(.V&gt;19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "AR 1"
.TH AR 1 "2017-03-02" "binutils-2.28" "GNU Development Tools"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ar \- create, modify, and extract from archives
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
ar [\fB\-X32_64\fR] [\fB\-\fR]\fIp\fR[\fImod\fR] [\fB\-\-plugin\fR \fIname\fR] [\fB\-\-target\fR \fIbfdname\fR] [\fIrelpos\fR] [\fIcount\fR] \fIarchive\fR [\fImember\fR...]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \s-1GNU \s0\fBar\fR program creates, modifies, and extracts from
archives.  An \fIarchive\fR is a single file holding a collection of
other files in a structure that makes it possible to retrieve
the original individual files (called \fImembers\fR of the archive).
.PP
The original files' contents, mode (permissions), timestamp, owner, and
group are preserved in the archive, and can be restored on
extraction.
.PP
\&amp;\s-1GNU \s0\fBar\fR can maintain archives whose members have names of any
length; however, depending on how \fBar\fR is configured on your
system, a limit on member-name length may be imposed for compatibility
with archive formats maintained with other tools.  If it exists, the
limit is often 15 characters (typical of formats related to a.out) or 16
characters (typical of formats related to coff).
.PP
\&amp;\fBar\fR is considered a binary utility because archives of this sort
are most often used as \fIlibraries\fR holding commonly needed
subroutines.
.PP
\&amp;\fBar\fR creates an index to the symbols defined in relocatable
object modules in the archive when you specify the modifier \fBs\fR.
Once created, this index is updated in the archive whenever \fBar\fR
makes a change to its contents (save for the \fBq\fR update operation).
An archive with such an index speeds up linking to the library, and
allows routines in the library to call each other without regard to
their placement in the archive.
.PP
You may use \fBnm \-s\fR or \fBnm \-\-print\-armap\fR to list this index
table.  If an archive lacks the table, another form of \fBar\fR called
\&amp;\fBranlib\fR can be used to add just the table.
.PP
\&amp;\s-1GNU \s0\fBar\fR can optionally create a \fIthin\fR archive,
which contains a symbol index and references to the original copies
of the member files of the archive.  This is useful for building
libraries for use within a local build tree, where the relocatable
objects are expected to remain available, and copying the contents of
each object would only waste time and space.
.PP
An archive can either be \fIthin\fR or it can be normal.  It cannot
be both at the same time.  Once an archive is created its format
cannot be changed without first deleting it and then creating a new
archive in its place.
.PP
Thin archives are also \fIflattened\fR, so that adding one thin
archive to another thin archive does not nest it, as would happen with
a normal archive.  Instead the elements of the first archive are added
individually to the second archive.
.PP
The paths to the elements of the archive are stored relative to the
archive itself.
.PP
\&amp;\s-1GNU \s0\fBar\fR is designed to be compatible with two different
facilities.  You can control its activity using command-line options,
like the different varieties of \fBar\fR on Unix systems; or, if you
specify the single command-line option \fB\-M\fR, you can control it
with a script supplied via standard input, like the \s-1MRI \s0\*(L"librarian\*(R"
program.
.SH "OPTIONS"
.IX Header "OPTIONS"
\&amp;\s-1GNU \s0\fBar\fR allows you to mix the operation code \fIp\fR and modifier
flags \fImod\fR in any order, within the first command-line argument.
.PP
If you wish, you may begin the first command-line argument with a
dash.
.PP
The \fIp\fR keyletter specifies what operation to execute; it may be
any of the following, but you must specify only one of them:
.IP "\fBd\fR" 4
.IX Item "d"
\&amp;\fIDelete\fR modules from the archive.  Specify the names of modules to
be deleted as \fImember\fR...; the archive is untouched if you
specify no files to delete.
.Sp
If you specify the \fBv\fR modifier, \fBar\fR lists each module
as it is deleted.
.IP "\fBm\fR" 4
.IX Item "m"
Use this operation to \fImove\fR members in an archive.
.Sp
The ordering of members in an archive can make a difference in how
programs are linked using the library, if a symbol is defined in more
than one member.
.Sp
If no modifiers are used with \f(CW\*(C`m\*(C'\fR, any members you name in the
\&amp;\fImember\fR arguments are moved to the \fIend\fR of the archive;
you can use the \fBa\fR, \fBb\fR, or \fBi\fR modifiers to move them to a
specified place instead.
.IP "\fBp\fR" 4
.IX Item "p"
\&amp;\fIPrint\fR the specified members of the archive, to the standard
output file.  If the \fBv\fR modifier is specified, show the member
name before copying its contents to standard output.
.Sp
If you specify no \fImember\fR arguments, all the files in the archive are
printed.
.IP "\fBq\fR" 4
.IX Item "q"
\&amp;\fIQuick append\fR; Historically, add the files \fImember\fR... to the end of
\&amp;\fIarchive\fR, without checking for replacement.
.Sp
The modifiers \fBa\fR, \fBb\fR, and \fBi\fR do \fInot\fR affect this
operation; new members are always placed at the end of the archive.
.Sp
The modifier \fBv\fR makes \fBar\fR list each file as it is appended.
.Sp
Since the point of this operation is speed, implementations of
\&amp;\fBar\fR have the option of not updating the archive's symbol
table if one exists.  Too many different systems however assume that
symbol tables are always up-to-date, so \s-1GNU \s0\fBar\fR will
rebuild the table even with a quick append.
.Sp
Note \- \s-1GNU \s0\fBar\fR treats the command \fBqs\fR as a
synonym for \fBr\fR \- replacing already existing files in the
archive and appending new ones at the end.
.IP "\fBr\fR" 4
.IX Item "r"
Insert the files \fImember\fR... into \fIarchive\fR (with
\&amp;\fIreplacement\fR). This operation differs from \fBq\fR in that any
previously existing members are deleted if their names match those being
added.
.Sp
If one of the files named in \fImember\fR... does not exist, \fBar\fR
displays an error message, and leaves undisturbed any existing members
of the archive matching that name.
.Sp
By default, new members are added at the end of the file; but you may
use one of the modifiers \fBa\fR, \fBb\fR, or \fBi\fR to request
placement relative to some existing member.
.Sp
The modifier \fBv\fR used with this operation elicits a line of
output for each file inserted, along with one of the letters \fBa\fR or
\&amp;\fBr\fR to indicate whether the file was appended (no old member
deleted) or replaced.
.IP "\fBs\fR" 4
.IX Item "s"
Add an index to the archive, or update it if it already exists.  Note
this command is an exception to the rule that there can only be one
command letter, as it is possible to use it as either a command or a
modifier.  In either case it does the same thing.
.IP "\fBt\fR" 4
.IX Item "t"
Display a \fItable\fR listing the contents of \fIarchive\fR, or those
of the files listed in \fImember\fR... that are present in the
archive.  Normally only the member name is shown; if you also want to
see the modes (permissions), timestamp, owner, group, and size, you can
request that by also specifying the \fBv\fR modifier.
.Sp
If you do not specify a \fImember\fR, all files in the archive
are listed.
.Sp
If there is more than one file with the same name (say, \fBfie\fR) in
an archive (say \fBb.a\fR), \fBar t b.a fie\fR lists only the
first instance; to see them all, you must ask for a complete
listing\-\-\-in our example, \fBar t b.a\fR.
.IP "\fBx\fR" 4
.IX Item "x"
\&amp;\fIExtract\fR members (named \fImember\fR) from the archive.  You can
use the \fBv\fR modifier with this operation, to request that
\&amp;\fBar\fR list each name as it extracts it.
.Sp
If you do not specify a \fImember\fR, all files in the archive
are extracted.
.Sp
Files cannot be extracted from a thin archive.
.IP "\fB\-\-help\fR" 4
.IX Item "--help"
Displays the list of command line options supported by \fBar\fR
and then exits.
.IP "\fB\-\-version\fR" 4
.IX Item "--version"
Displays the version information of \fBar\fR and then exits.
.PP
A number of modifiers (\fImod\fR) may immediately follow the \fIp\fR
keyletter, to specify variations on an operation's behavior:
.IP "\fBa\fR" 4
.IX Item "a"
Add new files \fIafter\fR an existing member of the
archive.  If you use the modifier \fBa\fR, the name of an existing archive
member must be present as the \fIrelpos\fR argument, before the
\&amp;\fIarchive\fR specification.
.IP "\fBb\fR" 4
.IX Item "b"
Add new files \fIbefore\fR an existing member of the
archive.  If you use the modifier \fBb\fR, the name of an existing archive
member must be present as the \fIrelpos\fR argument, before the
\&amp;\fIarchive\fR specification.  (same as \fBi\fR).
.IP "\fBc\fR" 4
.IX Item "c"
\&amp;\fICreate\fR the archive.  The specified \fIarchive\fR is always
created if it did not exist, when you request an update.  But a warning is
issued unless you specify in advance that you expect to create it, by
using this modifier.
.IP "\fBD\fR" 4
.IX Item "D"
Operate in \fIdeterministic\fR mode.  When adding files and the archive
index use zero for UIDs, GIDs, timestamps, and use consistent file modes
for all files.  When this option is used, if \fBar\fR is used with
identical options and identical input files, multiple runs will create
identical output files regardless of the input files' owners, groups,
file modes, or modification times.
.Sp
If \fIbinutils\fR was configured with
\&amp;\fB\-\-enable\-deterministic\-archives\fR, then this mode is on by default.
It can be disabled with the \fBU\fR modifier, below.
.IP "\fBf\fR" 4
.IX Item "f"
Truncate names in the archive.  \s-1GNU \s0\fBar\fR will normally permit file
names of any length.  This will cause it to create archives which are
not compatible with the native \fBar\fR program on some systems.  If
this is a concern, the \fBf\fR modifier may be used to truncate file
names when putting them in the archive.
.IP "\fBi\fR" 4
.IX Item "i"
Insert new files \fIbefore\fR an existing member of the
archive.  If you use the modifier \fBi\fR, the name of an existing archive
member must be present as the \fIrelpos\fR argument, before the
\&amp;\fIarchive\fR specification.  (same as \fBb\fR).
.IP "\fBl\fR" 4
.IX Item "l"
This modifier is accepted but not used.
.IP "\fBN\fR" 4
.IX Item "N"
Uses the \fIcount\fR parameter.  This is used if there are multiple
entries in the archive with the same name.  Extract or delete instance
\&amp;\fIcount\fR of the given name from the archive.
.IP "\fBo\fR" 4
.IX Item "o"
Preserve the \fIoriginal\fR dates of members when extracting them.  If
you do not specify this modifier, files extracted from the archive
are stamped with the time of extraction.
.IP "\fBP\fR" 4
.IX Item "P"
Use the full path name when matching names in the archive.  \s-1GNU
\&amp;\s0\fBar\fR can not create an archive with a full path name (such archives
are not \s-1POSIX\s0 complaint), but other archive creators can.  This option
will cause \s-1GNU \s0\fBar\fR to match file names using a complete path
name, which can be convenient when extracting a single file from an
archive created by another tool.
.IP "\fBs\fR" 4
.IX Item "s"
Write an object-file index into the archive, or update an existing one,
even if no other change is made to the archive.  You may use this modifier
flag either with any operation, or alone.  Running \fBar s\fR on an
archive is equivalent to running \fBranlib\fR on it.
.IP "\fBS\fR" 4
.IX Item "S"
Do not generate an archive symbol table.  This can speed up building a
large library in several steps.  The resulting archive can not be used
with the linker.  In order to build a symbol table, you must omit the
\&amp;\fBS\fR modifier on the last execution of \fBar\fR, or you must run
\&amp;\fBranlib\fR on the archive.
.IP "\fBT\fR" 4
.IX Item "T"
Make the specified \fIarchive\fR a \fIthin\fR archive.  If it already
exists and is a regular archive, the existing members must be present
in the same directory as \fIarchive\fR.
.IP "\fBu\fR" 4
.IX Item "u"
Normally, \fBar r\fR... inserts all files
listed into the archive.  If you would like to insert \fIonly\fR those
of the files you list that are newer than existing members of the same
names, use this modifier.  The \fBu\fR modifier is allowed only for the
operation \fBr\fR (replace).  In particular, the combination \fBqu\fR is
not allowed, since checking the timestamps would lose any speed
advantage from the operation \fBq\fR.
.IP "\fBU\fR" 4
.IX Item "U"
Do \fInot\fR operate in \fIdeterministic\fR mode.  This is the inverse
of the \fBD\fR modifier, above: added files and the archive index will
get their actual \s-1UID, GID,\s0 timestamp, and file mode values.
.Sp
This is the default unless \fIbinutils\fR was configured with
\&amp;\fB\-\-enable\-deterministic\-archives\fR.
.IP "\fBv\fR" 4
.IX Item "v"
This modifier requests the \fIverbose\fR version of an operation.  Many
operations display additional information, such as filenames processed,
when the modifier \fBv\fR is appended.
.IP "\fBV\fR" 4
.IX Item "V"
This modifier shows the version number of \fBar\fR.
.PP
\&amp;\fBar\fR ignores an initial option spelt \fB\-X32_64\fR, for
compatibility with \s-1AIX. \s0 The behaviour produced by this option is the
default for \s-1GNU \s0\fBar\fR.  \fBar\fR does not support any of the other
\&amp;\fB\-X\fR options; in particular, it does not support \fB\-X32\fR
which is the default for \s-1AIX \s0\fBar\fR.
.PP
The optional command line switch \fB\-\-plugin\fR \fIname\fR causes
\&amp;\fBar\fR to load the plugin called \fIname\fR which adds support
for more file formats.  This option is only available if the toolchain
has been built with plugin support enabled.
.PP
The optional command line switch \fB\-\-target\fR \fIbfdname\fR
specifies that the archive members are in an object code format
different from your system's default format.  See
.IP "\fB@\fR\fIfile\fR" 4
.IX Item "@file"
Read command-line options from \fIfile\fR.  The options read are
inserted in place of the original @\fIfile\fR option.  If \fIfile\fR
does not exist, or cannot be read, then the option will be treated
literally, and not removed.
.Sp
Options in \fIfile\fR are separated by whitespace.  A whitespace
character may be included in an option by surrounding the entire
option in either single or double quotes.  Any character (including a
backslash) may be included by prefixing the character to be included
with a backslash.  The \fIfile\fR may itself contain additional
@\fIfile\fR options; any such options will be processed recursively.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&amp;\fInm\fR\|(1), \fIranlib\fR\|(1), and the Info entries for \fIbinutils\fR.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1991\-2017 Free Software Foundation, Inc.
.PP
Permission is granted to copy, distribute and/or modify this document
under the terms of the \s-1GNU\s0 Free Documentation License, Version 1.3
or any later version published by the Free Software Foundation;
with no Invariant Sections, with no Front-Cover Texts, and with no
Back-Cover Texts.  A copy of the license is included in the
section entitled \*(L"\s-1GNU\s0 Free Documentation License\*(R".
'\" et
.TH ASA "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
asa
\(em interpret carriage-control characters
.SH SYNOPSIS
.LP
.nf
asa \fB[\fIfile\fR...\fB]\fR
.fi
.SH DESCRIPTION
The
.IR asa
utility shall write its input files to standard output, mapping
carriage-control characters from the text files to line-printer control
sequences in an implementation-defined manner.
.P
The first character of every line shall be removed from the input, and
the following actions are performed.
.P
If the character removed is:
.IP &lt;space&gt; 10
The rest of the line is output without change.
.IP 0 10
A
&lt;newline&gt;
is output, then the rest of the input line.
.IP 1 10
One or more implementation-defined characters that causes an advance
to the next page shall be output, followed by the rest of the input
line.
.IP "\fR+\fP" 10
The
&lt;newline&gt;
of the previous line shall be replaced with one or more
implementation-defined characters that causes printing to return to
column position 1, followed by the rest of the input line. If the
.BR '\(pl' 
is the first character in the input, it shall be equivalent to
&lt;space&gt;.
.P
The action of the
.IR asa
utility is unspecified upon encountering any character other than those
listed above as the first character in a line.
.SH OPTIONS
None.
.SH OPERANDS
.IP "\fIfile\fR" 10
A pathname of a text file used for input. If no
.IR file
operands are specified, the standard input shall be used.
.SH STDIN
The standard input shall be used if no
.IR file
operands are specified, and shall be used if a
.IR file
operand is
.BR '\(mi' 
and the implementation treats the
.BR '\(mi' 
as meaning standard input.
Otherwise, the standard input shall not be used.
See the INPUT FILES section.
.SH "INPUT FILES"
The input files shall be text files.
.SH "ENVIRONMENT VARIABLES"
The following environment variables shall affect the execution of
.IR asa :
.IP "\fILANG\fP" 10
Provide a default value for the internationalization variables that are
unset or null. (See the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 8.2" ", " "Internationalization Variables"
for the precedence of internationalization variables used to determine
the values of locale categories.)
.IP "\fILC_ALL\fP" 10
If set to a non-empty string value, override the values of all the
other internationalization variables.
.IP "\fILC_CTYPE\fP" 10
Determine the locale for the interpretation of sequences of bytes of
text data as characters (for example, single-byte as opposed to
multi-byte characters in arguments and input files).
.IP "\fILC_MESSAGES\fP" 10
.br
Determine the locale that should be used to affect the format and
contents of diagnostic messages written to standard error.
.IP "\fINLSPATH\fP" 10
Determine the location of message catalogs for the processing of
.IR LC_MESSAGES .
.SH "ASYNCHRONOUS EVENTS"
Default.
.SH STDOUT
The standard output shall be the text from the input file modified as
described in the DESCRIPTION section.
.SH STDERR
None.
.SH "OUTPUT FILES"
None.
.SH "EXTENDED DESCRIPTION"
None.
.SH "EXIT STATUS"
The following exit values shall be returned:
.IP "\00" 6
All input files were output successfully.
.IP &gt;0 6
An error occurred.
.SH "CONSEQUENCES OF ERRORS"
Default.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
None.
.SH EXAMPLES
.IP " 1." 4
The following command:
.RS 4 
.sp
.RS 4
.nf
\fB
asa \fIfile\fR
.fi \fR
.P
.RE
.P
permits the viewing of
.IR file
(created by a program using FORTRAN-style carriage-control characters)
on a terminal.
.RE
.IP " 2." 4
The following command:
.RS 4 
.sp
.RS 4
.nf
\fB
a.out | asa | lp
.fi \fR
.P
.RE
.P
formats the FORTRAN output of
.BR a.out
and directs it to the printer.
.RE
.SH RATIONALE
The
.IR asa
utility is needed to map ``standard'' FORTRAN 77 output into a form
acceptable to contemporary printers. Usually,
.IR asa
is used to pipe data to the
.IR lp
utility; see
.IR lp .
.P
This utility is generally used only by FORTRAN programs. The
standard developers decided to retain
.IR asa
to avoid breaking the historical large base of FORTRAN applications
that put carriage-control characters in their output files. There is no
requirement that a system have a FORTRAN compiler in order to run
applications that need
.IR asa .
.P
Historical implementations have used an ASCII
&lt;form-feed&gt;
in response to a 1 and an ASCII
&lt;carriage-return&gt;
in response to a
.BR '\(pl' .
It is suggested that implementations treat characters other than 0, 1,
and
.BR '\(pl' 
as
&lt;space&gt;
in the absence of any compelling reason to do otherwise. However, the
action is listed here as ``unspecified'', permitting an implementation
to provide extensions to access fast multiple-line slewing and channel
seeking in a non-portable manner.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "\fIfort77\fR\^",
.IR "\fIlp\fR\^"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "Chapter 8" ", " "Environment Variables"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
'\" et
.TH AT "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
at
\(em execute commands at a later time
.SH SYNOPSIS
.LP
.nf
at \fB[\fR\(mim\fB] [\fR\(mif \fIfile\fB] [\fR\(miq \fIqueuename\fB] \fR\(mit \fItime_arg\fR
.P
at \fB[\fR\(mim\fB] [\fR\(mif \fIfile\fB] [\fR\(miq \fIqueuename\fB] \fItimespec\fR...
.P
at \(mir \fIat_job_id\fR...
.P
at \(mil \(miq \fIqueuename\fR
.P
at \(mil \fB[\fIat_job_id\fR...\fB]\fR
.fi
.SH DESCRIPTION
The
.IR at
utility shall read commands from standard input and group them together
as an
.IR at-job ,
to be executed at a later time.
.P
The at-job shall be executed in a separate invocation of the shell,
running in a separate process group with no controlling terminal,
except that the environment variables, current working directory,
file creation mask, and other implementation-defined execution-time
attributes in effect when the
.IR at
utility is executed shall be retained and used when the at-job is
executed.
.P
When the at-job is submitted, the
.IR at_job_id
and scheduled time shall be written to standard error. The
.IR at_job_id
is an identifier that shall be a string consisting solely of
alphanumeric characters and the
&lt;period&gt;
character. The
.IR at_job_id
shall be assigned by the system when the job is scheduled such that it
uniquely identifies a particular job.
.P
User notification and the processing of the job's standard output and
standard error are described under the
.BR \(mim
option.
.P
Users shall be permitted to use
.IR at
if their name appears in the file
.BR at.allow
which is located in an implementation-defined directory.
If that file does not exist, the file
.BR at.deny ,
which is located in an implementation-defined directory,
shall be checked to determine whether the user shall be denied access to
.IR at .
If neither file exists, only a process with appropriate privileges
shall be allowed to submit a job. If only
.BR at.deny
exists and is empty, global usage shall be permitted. The
.BR at.allow
and
.BR at.deny
files shall consist of one user name per line.
.SH OPTIONS
The
.IR at
utility shall conform to the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 12.2" ", " "Utility Syntax Guidelines".
.P
The following options shall be supported:
.IP "\fB\(mif\ \fIfile\fR" 10
Specify the pathname of a file to be used as the source of the at-job,
instead of standard input.
.IP "\fB\(mil\fP" 10
(The letter ell.) Report all jobs scheduled for the invoking user if no
.IR at_job_id
operands are specified. If
.IR at_job_id s
are specified, report only information for these jobs. The output shall
be written to standard output.
.IP "\fB\(mim\fP" 10
Send mail to the invoking user after the at-job has run, announcing its
completion. Standard output and standard error produced by the at-job
shall be mailed to the user as well, unless redirected elsewhere. Mail
shall be sent even if the job produces no output.
.RS 10 
.P
If
.BR \(mim
is not used, the job's standard output and standard error shall be
provided to the user by means of mail, unless they are redirected
elsewhere; if there is no such output to provide, the implementation
need not notify the user of the job's completion.
.RE
.IP "\fB\(miq\ \fIqueuename\fR" 10
.br
Specify in which queue to schedule a job for submission. When used with
the
.BR \(mil
option, limit the search to that particular queue. By default, at-jobs
shall be scheduled in queue
.IR a .
In contrast, queue
.IR b
shall be reserved for batch jobs; see
.IR batch .
The meanings of all other
.IR queuename s
are implementation-defined. If
.BR \(miq
is specified along with either of the
.BR \(mit
.IR time_arg
or
.IR timespec
arguments, the results are unspecified.
.IP "\fB\(mir\fP" 10
Remove the jobs with the specified
.IR at_job_id
operands that were previously scheduled by the
.IR at
utility.
.IP "\fB\(mit\ \fItime_arg\fR" 10
Submit the job to be run at the time specified by the
.IR time
option-argument, which the application shall ensure has the format as
specified by the
.IR touch
.BR \(mit
.IR time
utility.
.SH OPERANDS
The following operands shall be supported:
.IP "\fIat_job_id\fR" 10
The name reported by a previous invocation of the
.IR at
utility at the time the job was scheduled.
.IP "\fItimespec\fR" 10
Submit the job to be run at the date and time specified. All of the
.IR timespec
operands are interpreted as if they were separated by
&lt;space&gt;
characters and concatenated, and shall be parsed as described in the
grammar at the end of this section. The date and time shall be interpreted
as being in the timezone of the user (as determined by the
.IR TZ
variable), unless a timezone name appears as part of
.IR time ,
below.
.RS 10 
.P
In the POSIX locale, the following describes the three parts of the
time specification string. All of the values from the
.IR LC_TIME
categories in the POSIX locale shall be recognized in a
case-insensitive manner.
.IP "\fItime\fR" 10
The time can be specified as one, two, or four digits. One-digit and
two-digit numbers shall be taken to be hours; four-digit numbers to be
hours and minutes. The time can alternatively be specified as two
numbers separated by a
&lt;colon&gt;,
meaning \fIhour\fP:\fIminute\fR. An AM/PM indication (one of the values
from the
.BR am_pm
keywords in the
.IR LC_TIME
locale category) can follow the time; otherwise, a 24-hour clock time
shall be understood. A timezone name can also follow to further qualify
the time. The acceptable timezone names are implementation-defined,
except that they shall be case-insensitive and the string
.BR utc
is supported to indicate the time is in Coordinated Universal Time.
In the POSIX locale, the
.IR time
field can also be one of the following tokens:
.RS 10 
.IP "\fBmidnight\fR" 10
Indicates the time 12:00 am (00:00).
.IP "\fBnoon\fR" 10
Indicates the time 12:00 pm.
.IP "\fBnow\fR" 10
Indicates the current day and time. Invoking
.IR at
&lt;\fBnow\fR&gt; shall submit an at-job for potentially immediate execution
(that is, subject only to unspecified scheduling delays).
.RE
.IP "\fIdate\fR" 10
An optional
.IR date
can be specified as either a month name (one of the values from the
.BR mon
or
.BR abmon
keywords in the
.IR LC_TIME
locale category) followed by a day number (and possibly year number
preceded by a comma), or a day of the week (one of the values from the
.BR day
or
.BR abday
keywords in the
.IR LC_TIME
locale category). In the POSIX locale, two special days shall be
recognized:
.RS 10 
.IP "\fBtoday\fR" 10
Indicates the current day.
.IP "\fBtomorrow\fR" 10
Indicates the day following the current day.
.P
If no
.IR date
is given,
.BR today
shall be assumed if the given time is greater than the current time,
and
.BR tomorrow
shall be assumed if it is less. If the given month is less than the
current month (and no year is given), next year shall be assumed.
.RE
.IP "\fIincrement\fR" 10
The optional
.IR increment
shall be a number preceded by a
&lt;plus-sign&gt;
(\c
.BR '\(pl' )
and suffixed by one of the following:
.BR minutes ,
.BR hours ,
.BR days ,
.BR weeks ,
.BR months ,
or
.BR years .
(The singular forms shall also be accepted.) The keyword
.BR next
shall be equivalent to an increment number of +1. For example, the
following are equivalent commands:
.RS 10 
.sp
.RS 4
.nf
\fB
at 2pm + 1 week
at 2pm next week
.fi \fR
.P
.RE
.RE
.RE
.P
The following grammar describes the precise format of
.IR timespec
in the POSIX locale. The general conventions for this style of grammar
are described in
.IR "Section 1.3" ", " "Grammar Conventions".
This formal syntax shall take precedence over the preceding text syntax
description. The longest possible token or delimiter shall be
recognized at a given point. When used in a
.IR timespec ,
white space shall also delimit tokens.
.sp
.RS 4
.nf
\fB
%token hr24clock_hr_min
%token hr24clock_hour
/*
An hr24clock_hr_min is a one, two, or four-digit number. A one-digit
or two-digit number constitutes an hr24clock_hour. An hr24clock_hour
may be any of the single digits [0,9], or may be double digits, ranging
from [00,23]. If an hr24clock_hr_min is a four-digit number, the
first two digits shall be a valid hr24clock_hour, while the last two
represent the number of minutes, from [00,59].
*/
.P
%token wallclock_hr_min
%token wallclock_hour
/*
A wallclock_hr_min is a one, two-digit, or four-digit number.
A one-digit or two-digit number constitutes a wallclock_hour.
A wallclock_hour may be any of the single digits [1,9], or may
be double digits, ranging from [01,12]. If a wallclock_hr_min
is a four-digit number, the first two digits shall be a valid
wallclock_hour, while the last two represent the number of
minutes, from [00,59].
*/
.P
%token minute
/*
A minute is a one or two-digit number whose value can be [0,9]
or [00,59].
*/
.P
%token day_number
/*
A day_number is a number in the range appropriate for the particular
month and year specified by month_name and year_number, respectively.
If no year_number is given, the current year is assumed if the given
date and time are later this year. If no year_number is given and
the date and time have already occurred this year and the month is
not the current month, next year is the assumed year.
*/
.P
%token year_number
/*
A year_number is a four-digit number representing the year A.D., in
which the at_job is to be run.
*/
.P
%token inc_number
/*
The inc_number is the number of times the succeeding increment
period is to be added to the specified date and time.
*/
.P
%token timezone_name
/*
The name of an optional timezone suffix to the time field, in an
implementation-defined format.
*/
.P
%token month_name
/*
One of the values from the mon or abmon keywords in the LC_TIME
locale category.
*/
.P
%token day_of_week
/*
One of the values from the day or abday keywords in the LC_TIME
locale category.
*/
.P
%token am_pm
/*
One of the values from the am_pm keyword in the LC_TIME locale
category.
*/
.P
%start timespec
%%
timespec    : time
| time date
| time increment
| time date increment
| nowspec
;
.P
nowspec     : "now"
| "now" increment
;
.P
time        : hr24clock_hr_min
| hr24clock_hr_min timezone_name
| hr24clock_hour ":" minute
| hr24clock_hour ":" minute timezone_name
| wallclock_hr_min am_pm
| wallclock_hr_min am_pm timezone_name
| wallclock_hour ":" minute am_pm
| wallclock_hour ":" minute am_pm timezone_name
| "noon"
| "midnight"
;
.P
date        : month_name day_number
| month_name day_number "," year_number
| day_of_week
| "today"
| "tomorrow"
;
.P
increment   : "+" inc_number inc_period
| "next" inc_period
;
.P
inc_period  : "minute" | "minutes"
| "hour" | "hours"
| "day" | "days"
| "week" | "weeks"
| "month" | "months"
| "year" | "years"
;
.fi \fR
.P
.RE
.SH STDIN
The standard input shall be a text file consisting of commands
acceptable to the shell command language described in
.IR "Chapter 2" ", " "Shell Command Language".
The standard input shall only be used if no
.BR \(mif
.IR file
option is specified.
.SH "INPUT FILES"
See the STDIN section.
.P
The text files
.BR at.allow
and
.BR at.deny ,
which are located in an implementation-defined directory,
shall contain zero or more user names, one per line, of users who are,
respectively, authorized or denied access to the
.IR at
and
.IR batch
utilities.
.SH "ENVIRONMENT VARIABLES"
The following environment variables shall affect the execution of
.IR at :
.IP "\fILANG\fP" 10
Provide a default value for the internationalization variables that are
unset or null. (See the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 8.2" ", " "Internationalization Variables"
for the precedence of internationalization variables used to determine
the values of locale categories.)
.IP "\fILC_ALL\fP" 10
If set to a non-empty string value, override the values of all the
other internationalization variables.
.IP "\fILC_CTYPE\fP" 10
Determine the locale for the interpretation of sequences of bytes of
text data as characters (for example, single-byte as opposed to
multi-byte characters in arguments and input files).
.IP "\fILC_MESSAGES\fP" 10
.br
Determine the locale that should be used to affect the format and
contents of diagnostic messages written to standard error and
informative messages written to standard output.
.IP "\fINLSPATH\fP" 10
Determine the location of message catalogs for the processing of
.IR LC_MESSAGES .
.IP "\fILC_TIME\fP" 10
Determine the format and contents for date and time strings written and
accepted by
.IR at .
.IP "\fISHELL\fP" 10
Determine a name of a command interpreter to be used to invoke the
at-job. If the variable is unset or null,
.IR sh
shall be used. If it is set to a value other than a name for
.IR sh ,
the implementation shall do one of the following: use that shell; use
.IR sh ;
use the login shell from the user database; or any of the preceding
accompanied by a warning diagnostic about which was chosen.
.IP "\fITZ\fP" 10
Determine the timezone. The job shall be submitted for execution at the
time specified by
.IR timespec
or
.BR \(mit
.IR time
relative to the timezone specified by the
.IR TZ
variable. If
.IR timespec
specifies a timezone, it shall override
.IR TZ .
If
.IR timespec
does not specify a timezone and
.IR TZ
is unset or null, an unspecified default timezone shall be used.
.SH "ASYNCHRONOUS EVENTS"
Default.
.SH STDOUT
When standard input is a terminal, prompts of unspecified format for
each line of the user input described in the STDIN section may be
written to standard output.
.P
In the POSIX locale, the following shall be written to the standard
output for each job when jobs are listed in response to the
.BR \(mil
option:
.sp
.RS 4
.nf
\fB
"%s\et%s\en", \fIat_job_id\fR, &lt;\fIdate\fR&gt;
.fi \fR
.P
.RE
.P
where
.IR date
shall be equivalent in format to the output of:
.sp
.RS 4
.nf
\fB
date +"%a %b %e %T %Y"
.fi \fR
.P
.RE
.P
The date and time written shall be adjusted so that they appear in the
timezone of the user (as determined by the
.IR TZ
variable).
.SH STDERR
In the POSIX locale, the following shall be written to standard error
when a job has been successfully submitted:
.sp
.RS 4
.nf
\fB
"job %s at %s\en", \fIat_job_id\fR, &lt;\fIdate\fR&gt;
.fi \fR
.P
.RE
.P
where
.IR date
has the same format as that described in the STDOUT section. Neither
this, nor warning messages concerning the selection of the command
interpreter, shall be considered a diagnostic that changes the exit
status.
.P
Diagnostic messages, if any, shall be written to standard error.
.SH "OUTPUT FILES"
None.
.SH "EXTENDED DESCRIPTION"
None.
.SH "EXIT STATUS"
The following exit values shall be returned:
.IP "\00" 6
The
.IR at
utility successfully submitted, removed, or listed a job or jobs.
.IP &gt;0 6
An error occurred.
.SH "CONSEQUENCES OF ERRORS"
The job shall not be scheduled, removed, or listed.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
The format of the
.IR at
command line shown here is guaranteed only for the POSIX locale. Other
cultures may be supported with substantially different interfaces,
although implementations are encouraged to provide comparable levels of
functionality.
.P
Since the commands run in a separate shell invocation, running in a
separate process group with no controlling terminal, open file
descriptors, traps, and priority inherited from the invoking
environment are lost.
.P
Some implementations do not allow substitution of different shells
using
.IR SHELL .
System V systems, for example, have used the login shell value for the
user in
.BR /etc/passwd .
To select reliably another command interpreter, the user must include
it as part of the script, such as:
.sp
.RS 4
.nf
\fB
\fB$\fR at 1800
myshell myscript
EOT
\fBjob ... at ...
\fB$\fR
.fi \fR
.P
.RE
.SH EXAMPLES
.IP " 1." 4
This sequence can be used at a terminal:
.RS 4 
.sp
.RS 4
.nf
\fB
at \(mim 0730 tomorrow
sort &lt; file &gt;outfile
EOT
.fi \fR
.P
.RE
.RE
.IP " 2." 4
This sequence, which demonstrates redirecting standard error to a pipe,
is useful in a command procedure (the sequence of output redirection
specifications is significant):
.RS 4 
.sp
.RS 4
.nf
\fB
at now + 1 hour &lt;&lt;!
diff file1 file2 2&gt;&amp;1 &gt;outfile | mailx mygroup
!
.fi \fR
.P
.RE
.RE
.IP " 3." 4
To have a job reschedule itself,
.IR at
can be invoked from within the at-job. For example, this daily
processing script named
.BR my.daily
runs every day (although
.IR crontab
is a more appropriate vehicle for such work):
.RS 4 
.sp
.RS 4
.nf
\fB
# my.daily runs every day
\fIdaily processing\fR
at now tomorrow &lt; my.daily
.fi \fR
.P
.RE
.RE
.IP " 4." 4
The spacing of the three portions of the POSIX locale
.IR timespec
is quite flexible as long as there are no ambiguities. Examples of
various times and operand presentation include:
.RS 4 
.sp
.RS 4
.nf
\fB
at 0815am Jan 24
at 8 :15amjan24
at now "+ 1day"
at 5 pm FRIday
at '17
utc+
30minutes'
.fi \fR
.P
.RE
.RE
.SH RATIONALE
The
.IR at
utility reads from standard input the commands to be executed at a
later time. It may be useful to redirect standard output and standard
error within the specified commands.
.P
The
.BR \(mit
.IR time
option was added as a new capability to support an internationalized
way of specifying a time for execution of the submitted job.
.P
Early proposals added a ``jobname'' concept as a way of giving
submitted jobs names that are meaningful to the user submitting them.
The historical, system-specified
.IR at_job_id
gives no indication of what the job is. Upon further reflection, it was
decided that the benefit of this was not worth the change in historical
interface. The
.IR at
functionality is useful in simple environments, but in large or complex
situations, the functionality provided by the Batch Services option is
more suitable.
.P
The
.BR \(miq
option historically has been an undocumented option, used mainly by the
.IR batch
utility.
.P
The System V
.BR \(mim
option was added to provide a method for informing users that an at-job
had completed. Otherwise, users are only informed when output to
standard error or standard output are not redirected.
.P
The behavior of
.IR at
&lt;\fBnow\fP&gt; was changed in an early proposal from being unspecified to
submitting a job for potentially immediate execution. Historical BSD
.IR at
implementations support this. Historical System V implementations give
an error in that case, but a change to the System V versions should
have no backwards-compatibility ramifications.
.P
On BSD-based systems, a
.BR \(miu
.IR user
option has allowed those with appropriate privileges to access the work
of other users. Since this is primarily a system administration feature
and is not universally implemented, it has been omitted. Similarly, a
specification for the output format for a user with appropriate
privileges viewing the queues of other users has been omitted.
.P
The
.BR \(mif
.IR file
option from System V is used instead of the BSD method of using the
last operand as the pathname. The BSD method is ambiguous\(emdoes:
.sp
.RS 4
.nf
\fB
at 1200 friday
.fi \fR
.P
.RE
.P
mean the same thing if there is a file named
.BR friday
in the current directory?
.P
The
.IR at_job_id
is composed of a limited character set in historical practice, and it
is mandated here to invalidate systems that might try using characters
that require shell quoting or that could not be easily parsed by shell
scripts.
.P
The
.IR at
utility varies between System V and BSD systems in the way timezones
are used. On System V systems, the
.IR TZ
variable affects the at-job submission times and the times displayed
for the user. On BSD systems,
.IR TZ
is not taken into account. The BSD behavior is easily achieved with
the current specification. If the user wishes to have the timezone
default to that of the system, they merely need to issue the
.IR at
command immediately following an unsetting or null assignment to
.IR TZ .
For example:
.sp
.RS 4
.nf
\fB
TZ= at noon ...
.fi \fR
.P
.RE
.P
gives the desired BSD result.
.P
While the
.IR yacc -like
grammar specified in the OPERANDS section is lexically unambiguous with
respect to the digit strings, a lexical analyzer would probably be
written to look for and return digit strings in those cases. The parser
could then check whether the digit string returned is a valid
.IR day_number ,
.IR year_number ,
and so on, based on the context.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "\fIbatch\fR\^",
.IR "\fIcrontab\fR\^"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "Chapter 8" ", " "Environment Variables",
.IR "Section 12.2" ", " "Utility Syntax Guidelines"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.
.TH BASENAME "1" "March 2017" "GNU coreutils 8.27" "User Commands"
.SH NAME
basename \- strip directory and suffix from filenames
.SH SYNOPSIS
.B basename
\fI\,NAME \/\fR[\fI\,SUFFIX\/\fR]
.br
.B basename
\fI\,OPTION\/\fR... \fI\,NAME\/\fR...
.SH DESCRIPTION
.\" Add any additional description here
.PP
Print NAME with any leading directory components removed.
If specified, also remove a trailing SUFFIX.
.PP
Mandatory arguments to long options are mandatory for short options too.
.TP
\fB\-a\fR, \fB\-\-multiple\fR
support multiple arguments and treat each as a NAME
.TP
\fB\-s\fR, \fB\-\-suffix\fR=\fI\,SUFFIX\/\fR
remove a trailing SUFFIX; implies \fB\-a\fR
.TP
\fB\-z\fR, \fB\-\-zero\fR
end each output line with NUL, not newline
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-\-version\fR
output version information and exit
.SH EXAMPLES
.TP
basename /usr/bin/sort
\-&gt; "sort"
.TP
basename include/stdio.h .h
\-&gt; "stdio"
.TP
basename \-s .h include/stdio.h
\-&gt; "stdio"
.TP
basename \-a any/str1 any/str2
\-&gt; "str1" followed by "str2"
.SH AUTHOR
Written by David MacKenzie.
.SH "REPORTING BUGS"
GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt;
.br
Report basename translation bugs to &lt;http://translationproject.org/team/&gt;
.SH COPYRIGHT
Copyright \(co 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
dirname(1), readlink(1)
.PP
.br
Full documentation at: &lt;http://www.gnu.org/software/coreutils/basename&gt;
.br
or available locally via: info \(aq(coreutils) basename invocation\(aq
'\" et
.TH BATCH "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
batch
\(em schedule commands to be executed in a batch queue
.SH SYNOPSIS
.LP
.nf
\fIbatch\fR
.fi
.SH DESCRIPTION
The
.IR batch
utility shall read commands from standard input and schedule them
for execution in a batch queue. It shall be the equivalent of
the command:
.sp
.RS 4
.nf
\fB
at \(miq b \(mim now
.fi \fR
.P
.RE
.P
where queue
.IR b
is a special
.IR at
queue, specifically for batch jobs. Batch jobs shall be submitted to the
batch queue with no time constraints and shall be run by the system using
algorithms, based on unspecified factors, that may vary with each
invocation of
.IR batch .
.P
Users shall be permitted to use
.IR batch
if their name appears in the file
.BR at.allow
which is located in an implementation-defined directory.
If that file does not exist, the file
.BR at.deny ,
which is located in an implementation-defined directory,
shall be checked to determine whether the user shall be denied access to
.IR batch .
If neither file exists, only a process with appropriate privileges
shall be allowed to submit a job. If only
.BR at.deny
exists and is empty, global usage shall be permitted. The
.BR at.allow
and
.BR at.deny
files shall consist of one user name per line.
.SH OPTIONS
None.
.SH OPERANDS
None.
.SH STDIN
The standard input shall be a text file consisting of commands
acceptable to the shell command language described in
.IR "Chapter 2" ", " "Shell Command Language".
.SH "INPUT FILES"
The text files
.BR at.allow
and
.BR at.deny ,
which are located in an implementation-defined directory,
shall contain zero or more user names, one per line, of users who are,
respectively, authorized or denied access to the
.IR at
and
.IR batch
utilities.
.SH "ENVIRONMENT VARIABLES"
The following environment variables shall affect the execution of
.IR batch :
.IP "\fILANG\fP" 10
Provide a default value for the internationalization variables that are
unset or null. (See the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 8.2" ", " "Internationalization Variables"
for the precedence of internationalization variables used to determine
the values of locale categories.)
.IP "\fILC_ALL\fP" 10
If set to a non-empty string value, override the values of all the
other internationalization variables.
.IP "\fILC_CTYPE\fP" 10
Determine the locale for the interpretation of sequences of bytes of
text data as characters (for example, single-byte as opposed to
multi-byte characters in arguments and input files).
.IP "\fILC_MESSAGES\fP" 10
.br
Determine the locale that should be used to affect the format and
contents of diagnostic messages written to standard error and
informative messages written to standard output.
.IP "\fILC_TIME\fP" 10
Determine the format and contents for date and time strings written by
.IR batch .
.IP "\fINLSPATH\fP" 10
Determine the location of message catalogs for the processing of
.IR LC_MESSAGES .
.IP "\fISHELL\fP" 10
Determine the name of a command interpreter to be used to invoke the
at-job. If the variable is unset or null,
.IR sh
shall be used. If it is set to a value other than a name for
.IR sh ,
the implementation shall do one of the following: use that shell; use
.IR sh ;
use the login shell from the user database; any of the preceding
accompanied by a warning diagnostic about which was chosen.
.IP "\fITZ\fP" 10
Determine the timezone. The job shall be submitted for execution at the
time specified by
.IR timespec
or
.BR \(mit
.IR time
relative to the timezone specified by the
.IR TZ
variable. If
.IR timespec
specifies a timezone, it overrides
.IR TZ .
If
.IR timespec
does not specify a timezone and
.IR TZ
is unset or null, an unspecified default timezone shall be used.
.SH "ASYNCHRONOUS EVENTS"
Default.
.SH STDOUT
When standard input is a terminal, prompts of unspecified format for
each line of the user input described in the STDIN section may be
written to standard output.
.SH STDERR
The following shall be written to standard error when a job has been
successfully submitted:
.sp
.RS 4
.nf
\fB
"job %s at %s\en", \fIat_job_id\fR, &lt;\fIdate\fR&gt;
.fi \fR
.P
.RE
.P
where
.IR date
shall be equivalent in format to the output of:
.sp
.RS 4
.nf
\fB
date +"%a %b %e %T %Y"
.fi \fR
.P
.RE
.P
The date and time written shall be adjusted so that they appear in the
timezone of the user (as determined by the
.IR TZ
variable).
.P
Neither this, nor warning messages concerning the selection of the
command interpreter, are considered a diagnostic that changes the exit
status.
.P
Diagnostic messages, if any, shall be written to standard error.
.SH "OUTPUT FILES"
None.
.SH "EXTENDED DESCRIPTION"
None.
.SH "EXIT STATUS"
The following exit values shall be returned:
.IP "\00" 6
Successful completion.
.IP &gt;0 6
An error occurred.
.SH "CONSEQUENCES OF ERRORS"
The job shall not be scheduled.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
It may be useful to redirect standard output within the specified
commands.
.SH EXAMPLES
.IP " 1." 4
This sequence can be used at a terminal:
.RS 4 
.sp
.RS 4
.nf
\fB
batch
sort &lt; file &gt;outfile
EOT
.fi \fR
.P
.RE
.RE
.IP " 2." 4
This sequence, which demonstrates redirecting standard error to a pipe,
is useful in a command procedure (the sequence of output redirection
specifications is significant):
.RS 4 
.sp
.RS 4
.nf
\fB
batch &lt;&lt;!
diff file1 file2 2&gt;&amp;1 &gt;outfile | mailx mygroup
!
.fi \fR
.P
.RE
.RE
.SH RATIONALE
Early proposals described
.IR batch
in a manner totally separated from
.IR at ,
even though the historical model treated it almost as a synonym for
.IR at
.BR \(miqb .
A number of features were added to list and control batch work
separately from those in
.IR at .
Upon further reflection, it was decided that the benefit of this did
not merit the change to the historical interface.
.P
The
.BR \(mim
option was included on the equivalent
.IR at
command because it is historical practice to mail results to the
submitter, even if all job-produced output is redirected. As explained
in the RATIONALE for
.IR at ,
the
.BR now
keyword submits the job for immediate execution (after scheduling
delays), despite some historical systems where
.IR at
.BR now
would have been considered an error.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "\fIat\fR\^"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "Chapter 8" ", " "Environment Variables"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
.\"
.\" bc.1 - the *roff document processor source for the bc manual
.\"
.\" This file is part of GNU bc.
.\" Copyright (C) 1991-1994, 1997, 2000, 2003, 2006, 2017 Free Software Foundation, Inc.
.\"
.\" This program is free software; you can redistribute it and/or modify
.\" it under the terms of the GNU General Public License as published by
.\" the Free Software Foundation; either version 2 of the License , or
.\" (at your option) any later version.
.\"
.\" This program is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public License
.\" along with this program; see the file COPYING.  If not, write to:
.\"   The Free Software Foundation, Inc.
.\"   51 Franklin Street, Fifth Floor
.\"   Boston, MA 02110-1301  USA
.\"
.\" You may contact the author by:
.\" e-mail: philnelson@acm.org
.\" us-mail: Philip A. Nelson
.\" Computer Science Department, 9062
.\" Western Washington University
.\" Bellingham, WA 98226-9062
.\"
.\"
.TH bc 1 "2006-06-11" "GNU Project"
.SH NAME
bc - An arbitrary precision calculator language
.SH SYNTAX
\fBbc\fR [ \fB-hlwsqv\fR ] [long-options] [ \fI file ...\fR ]
.SH DESCRIPTION
\fBbc\fR is a language that supports arbitrary precision numbers
with interactive execution of statements.  There are some similarities
in the syntax to the C programming language. 
A standard math library is available by command line option.
If requested, the math library is defined before processing any files.
\fBbc\fR starts by processing code from all the files listed
on the command line in the order listed.  After all files have been
processed, \fBbc\fR reads from the standard input.  All code is
executed as it is read.  (If a file contains a command to halt the
processor, \fBbc\fR will never read from the standard input.)
.PP
This version of \fBbc\fR contains several extensions beyond
traditional \fBbc\fR implementations and the POSIX draft standard.
Command line options can cause these extensions to print a warning 
or to be rejected.  This 
document describes the language accepted by this processor.
Extensions will be identified as such.
.SS OPTIONS
.IP "-h, --help"
Print the usage and exit.
.IP "-i, --interactive"
Force interactive mode.
.IP "-l, --mathlib"
Define the standard math library.
.IP "-w, --warn"
Give warnings for extensions to POSIX \fBbc\fR.
.IP "-s, --standard"
Process exactly the POSIX \fBbc\fR language.
.IP "-q, --quiet"
Do not print the normal GNU bc welcome.
.IP "-v, --version"
Print the version number and copyright and quit.
.SS NUMBERS
The most basic element in \fBbc\fR is the number.  Numbers are
arbitrary precision numbers.  This precision is both in the integer
part and the fractional part.  All numbers are represented internally
in decimal and all computation is done in decimal.  (This version
truncates results from divide and multiply operations.)  There are two
attributes of numbers, the length and the scale.  The length is the
total number of decimal digits used by \fBbc\fR to represent a number
and the scale is the total number of decimal digits after the decimal
point.  For example:
.nf
.RS
.000001 has a length of 6 and scale of 6.
1935.000 has a length of 7 and a scale of 3.
.RE
.fi
.SS VARIABLES
Numbers are stored in two types of variables, simple variables and
arrays.  Both simple variables and array variables are named.  Names
begin with a letter followed by any number of letters, digits and
underscores.  All letters must be lower case.  (Full alpha-numeric
names are an extension. In POSIX \fBbc\fR all names are a single
lower case letter.)  The type of variable is clear by the context
because all array variable names will be followed by brackets ([]).
.PP
There are four special variables, \fBscale, ibase, obase,\fR and
\fBlast\fR.  \fBscale\fR defines how some operations use digits after the
decimal point.  The default value of \fBscale\fR is 0. \fBibase\fR
and \fBobase\fR define the conversion base for input and output
numbers.  The default for both input and output is base 10.
\fBlast\fR (an extension) is a variable that has the value of the last
printed number.  These will be discussed in further detail where
appropriate.  All of these variables may have values assigned to them
as well as used in expressions.
.SS COMMENTS
Comments in \fBbc\fR start with the characters \fB/*\fR and end with
the characters \fB*/\fR.  Comments may start anywhere and appear as a
single space in the input.  (This causes comments to delimit other
input items.  For example, a comment can not be found in the middle of
a variable name.)  Comments include any newlines (end of line) between
the start and the end of the comment.
.PP
To support the use of scripts for \fBbc\fR, a single line comment has been
added as an extension.  A single line comment starts at a \fB#\fR
character and continues to the next end of the line.  The end of line
character is not part of the comment and is processed normally.
.SS EXPRESSIONS
The numbers are manipulated by expressions and statements.  Since
the language was designed to be interactive, statements and expressions
are executed as soon as possible.  There is no "main" program.  Instead,
code is executed as it is encountered.  (Functions, discussed in
detail later, are defined when encountered.)
.PP
A simple expression is just a constant. \fBbc\fR converts constants
into internal decimal numbers using the current input base, specified
by the variable \fBibase\fR. (There is an exception in functions.)
The legal values of \fBibase\fR are 2 through 36. (Bases greater than
16 are an extension.) Assigning a value outside this range to
\fBibase\fR will result in a value of 2 or 36.  Input numbers may
contain the characters 0-9 and A-Z. (Note: They must be capitals.
Lower case letters are variable names.)  Single digit numbers always
have the value of the digit regardless of the value of
\fBibase\fR. (i.e. A = 10.)  For multi-digit numbers, \fBbc\fR changes
all input digits greater or equal to ibase to the value of
\fBibase\fR-1.  This makes the number \fBZZZ\fR always be the largest
3 digit number of the input base.
.PP
Full expressions are similar to many other high level languages.
Since there is only one kind of number, there are no rules for mixing
types.  Instead, there are rules on the scale of expressions.  Every
expression has a scale.  This is derived from the scale of original
numbers, the operation performed and in many cases, the value of the
variable \fBscale\fR. Legal values of the variable \fBscale\fR are
0 to the maximum number representable by a C integer.
.PP
In the following descriptions of legal expressions, "expr" refers to a
complete expression and "var" refers to a simple or an array variable.
A simple variable is just a
.RS
\fIname\fR
.RE
and an array variable is specified as
.RS
\fIname\fR[\fIexpr\fR]
.RE
Unless specifically
mentioned the scale of the result is the maximum scale of the
expressions involved.
.IP "- expr"
The result is the negation of the expression.
.IP "++ var"
The variable is incremented by one and the new value is the result of
the expression.
.IP "-- var"
The variable
is decremented by one and the new value is the result of the
expression.
.IP "var ++"
The result of the expression is the value of
the variable and then the variable is incremented by one.
.IP "var --"
The result of the expression is the value of the variable and then
the variable is decremented by one.
.IP "expr + expr"
The result of the expression is the sum of the two expressions.
.IP "expr - expr"
The result of the expression is the difference of the two expressions.
.IP "expr * expr"
The result of the expression is the product of the two expressions.
.IP "expr / expr"
The result of the expression is the quotient of the two expressions.
The scale of the result is the value of the variable \fBscale\fR.
.IP "expr % expr"
The result of the expression is the "remainder" and it is computed in the
following way.  To compute a%b, first a/b is computed to \fBscale\fR
digits.  That result is used to compute a-(a/b)*b to the scale of the
maximum of \fBscale\fR+scale(b) and scale(a).  If \fBscale\fR is set
to zero and both expressions are integers this expression is the
integer remainder function.
.IP "expr ^ expr"
The result of the expression is the value of the first raised to the
second. The second expression must be an integer.  (If the second
expression is not an integer, a warning is generated and the
expression is truncated to get an integer value.)  The scale of the
result is \fBscale\fR if the exponent is negative.  If the exponent
is positive the scale of the result is the minimum of the scale of the
first expression times the value of the exponent and the maximum of
\fBscale\fR and the scale of the first expression.  (e.g. scale(a^b)
= min(scale(a)*b, max( \fBscale,\fR scale(a))).)  It should be noted
that expr^0 will always return the value of 1.
.IP "( expr )"
This alters the standard precedence to force the evaluation of the
expression.
.IP "var = expr"
The variable is assigned the value of the expression.
.IP "var &lt;op&gt;= expr"
This is equivalent to "var = var &lt;op&gt; expr" with the exception that
the "var" part is evaluated only once.  This can make a difference if
"var" is an array.
.PP
Relational expressions are a special kind of expression
that always evaluate to 0 or 1, 0 if the relation is false and 1 if
the relation is true.  These may appear in any legal expression.
(POSIX bc requires that relational expressions are used only in if,
while, and for statements and that only one relational test may be
done in them.)  The relational operators are
.IP "expr1 &lt; expr2"
The result is 1 if expr1 is strictly less than expr2.
.IP "expr1 &lt;= expr2"
The result is 1 if expr1 is less than or equal to expr2.
.IP "expr1 &gt; expr2"
The result is 1 if expr1 is strictly greater than expr2.
.IP "expr1 &gt;= expr2"
The result is 1 if expr1 is greater than or equal to expr2.
.IP "expr1 == expr2"
The result is 1 if expr1 is equal to expr2.
.IP "expr1 != expr2"
The result is 1 if expr1 is not equal to expr2.
.PP
Boolean operations are also legal.  (POSIX \fBbc\fR does NOT have
boolean operations). The result of all boolean operations are 0 and 1
(for false and true) as in relational expressions.  The boolean
operators are:
.IP "!expr"
The result is 1 if expr is 0.
.IP "expr &amp;&amp; expr"
The result is 1 if both expressions are non-zero.
.IP "expr || expr"
The result is 1 if either expression is non-zero.
.PP
The expression precedence is as follows: (lowest to highest)
.nf
.RS
|| operator, left associative
&amp;&amp; operator, left associative
! operator, nonassociative
Relational operators, left associative
Assignment operator, right associative
+ and - operators, left associative
*, / and % operators, left associative
^ operator, right associative
unary - operator, nonassociative
++ and -- operators, nonassociative
.RE
.fi
.PP
This precedence was chosen so that POSIX compliant \fBbc\fR programs
will run correctly. This will cause the use of the relational and
logical operators to have some unusual behavior when used with
assignment expressions.  Consider the expression:
.RS
a = 3 &lt; 5
.RE
.PP
Most C programmers would assume this would assign the result of "3 &lt;
5" (the value 1) to the variable "a".  What this does in \fBbc\fR is
assign the value 3 to the variable "a" and then compare 3 to 5.  It is
best to use parenthesis when using relational and logical operators
with the assignment operators.
.PP
There are a few more special expressions that are provided in \fBbc\fR.
These have to do with user defined functions and standard
functions.  They all appear as "\fIname\fB(\fIparameters\fB)\fR".
See the section on functions for user defined functions.  The standard
functions are:
.IP "length ( expression )"
The value of the length function is the number of significant digits in the
expression.
.IP "read ( )"
The read function (an extension) will read a number from the standard
input, regardless of where the function occurs.   Beware, this can
cause problems with the mixing of data and program in the standard input.
The best use for this function is in a previously written program that
needs input from the user, but never allows program code to be input
from the user.  The value of the read function is the number read from
the standard input using the current value of the variable 
\fBibase\fR for the conversion base.
.IP "scale ( expression )"
The value of the scale function is the number of digits after the decimal
point in the expression.
.IP "sqrt ( expression )"
The value of the sqrt function is the square root of the expression.  If
the expression is negative, a run time error is generated.
.SS STATEMENTS
Statements (as in most algebraic languages) provide the sequencing of
expression evaluation.  In \fBbc\fR statements are executed "as soon
as possible."  Execution happens when a newline in encountered and
there is one or more complete statements.  Due to this immediate
execution, newlines are very important in \fBbc\fR. In fact, both a
semicolon and a newline are used as statement separators.  An
improperly placed newline will cause a syntax error.  Because newlines
are statement separators, it is possible to hide a newline by using
the backslash character.  The sequence "\e&lt;nl&gt;", where &lt;nl&gt; is the
newline appears to \fBbc\fR as whitespace instead of a newline.  A
statement list is a series of statements separated by semicolons and
newlines.  The following is a list of \fBbc\fR statements and what
they do: (Things enclosed in brackets ([]) are optional parts of the
statement.)
.IP "expression"
This statement does one of two things.  If the expression starts with
"&lt;variable&gt; &lt;assignment&gt; ...", it is considered to be an assignment
statement.  If the expression is not an assignment statement, the
expression is evaluated and printed to the output.  After the number
is printed, a newline is printed.  For example, "a=1" is an assignment
statement and "(a=1)" is an expression that has an embedded
assignment.  All numbers that are printed are printed in the base
specified by the variable \fBobase\fR. The legal values for \fB
obase\fR are 2 through BC_BASE_MAX.  (See the section LIMITS.)  For
bases 2 through 16, the usual method of writing numbers is used.  For
bases greater than 16, \fBbc\fR uses a multi-character digit method
of printing the numbers where each higher base digit is printed as a
base 10 number.  The multi-character digits are separated by spaces.
Each digit contains the number of characters required to represent the
base ten value of "obase-1".  Since numbers are of arbitrary
precision, some numbers may not be printable on a single output line.
These long numbers will be split across lines using the "\e" as the
last character on a line.  The maximum number of characters printed
per line is 70.  Due to the interactive nature of \fBbc\fR, printing
a number causes the side effect of assigning the printed value to the
special variable \fBlast\fR. This allows the user to recover the
last value printed without having to retype the expression that
printed the number.  Assigning to \fBlast\fR is legal and will
overwrite the last printed value with the assigned value.  The newly
assigned value will remain until the next number is printed or another
value is assigned to \fBlast\fR.  (Some installations may allow the 
use of a single period (.) which is not part of a number as a short
hand notation for for \fBlast\fR.)
.IP "string"
The string is printed to the output.  Strings start with a double quote
character and contain all characters until the next double quote character.
All characters are take literally, including any newline.  No newline
character is printed after the string.
.IP "\fBprint\fR list"
The print statement (an extension) provides another method of output.
The "list" is a list of strings and expressions separated by commas.
Each string or expression is printed in the order of the list.  No
terminating newline is printed.  Expressions are evaluated and their
value is printed and assigned to the variable \fBlast\fR. Strings
in the print statement are printed to the output and may contain
special characters.  Special characters start with the backslash
character (\e).  The special characters recognized by \fBbc\fR are
"a" (alert or bell), "b" (backspace), "f" (form feed), "n" (newline),
"r" (carriage return), "q" (double quote), "t" (tab), and "\e" (backslash).
Any other character following the backslash will be ignored.  
.IP "{ statement_list }"
This is the compound statement.  It allows multiple statements to be
grouped together for execution.
.IP "\fBif\fR ( expression ) statement1 [\fBelse\fR statement2]"
The if statement evaluates the expression and executes statement1 or
statement2 depending on the value of the expression.  If the expression
is non-zero, statement1 is executed.  If statement2 is present and
the value of the expression is 0, then statement2 is executed.  (The
else clause is an extension.)
.IP "\fBwhile\fR ( expression ) statement"
The while statement will execute the statement while the expression
is non-zero.  It evaluates the expression before each execution of
the statement.   Termination of the loop is caused by a zero
expression value or the execution of a break statement.
.IP "\fBfor\fR ( [expression1] ; [expression2] ; [expression3] ) statement"
The for statement controls repeated execution of the statement.  
Expression1 is evaluated before the loop.  Expression2 is evaluated
before each execution of the statement.  If it is non-zero, the statement
is evaluated.  If it is zero, the loop is terminated.  After each
execution of the statement, expression3 is evaluated before the reevaluation
of expression2.  If expression1 or expression3 are missing, nothing is
evaluated at the point they would be evaluated.
If expression2 is missing, it is the same as substituting
the value 1 for expression2.  (The optional expressions are an
extension. POSIX \fBbc\fR requires all three expressions.)
The following is equivalent code for the for statement:
.nf
.RS
expression1;
while (expression2) {
statement;
expression3;
}
.RE
.fi
.IP "\fBbreak\fR"
This statement causes a forced exit of the most recent enclosing while
statement or for statement.
.IP "\fBcontinue\fR"
The continue statement (an extension)  causes the most recent enclosing
for statement to start the next iteration.
.IP "\fBhalt\fR"
The halt statement (an extension) is an executed statement that causes
the \fBbc\fR processor to quit only when it is executed.  For example,
"if (0 == 1) halt" will not cause \fBbc\fR to terminate because the halt is
not executed.
.IP "\fBreturn\fR"
Return the value 0 from a function.  (See the section on functions.)
.IP "\fBreturn\fR ( expression )"
Return the value of the expression from a function.  (See the section on 
functions.)  As an extension, the parenthesis are not required.
.SS PSEUDO STATEMENTS
These statements are not statements in the traditional sense.  They are
not executed statements.  Their function is performed at "compile" time.
.IP "\fBlimits\fR"
Print the local limits enforced by the local version of \fBbc\fR.  This
is an extension.
.IP "\fBquit\fR"
When the quit statement is read, the \fBbc\fR processor
is terminated, regardless of where the quit statement is found.  For
example, "if (0 == 1) quit" will cause \fBbc\fR to terminate.
.IP "\fBwarranty\fR"
Print a longer warranty notice.  This is an extension.
.SS FUNCTIONS
Functions provide a method of defining a computation that can be executed
later.  Functions in 
.B bc
always compute a value and return it to the caller.  Function definitions
are "dynamic" in the sense that a function is undefined until a definition
is encountered in the input.  That definition is then used until another
definition function for the same name is encountered.  The new definition
then replaces the older definition.  A function is defined as follows:
.nf
.RS
\fBdefine \fIname \fB( \fIparameters \fB) { \fInewline
\fI    auto_list   statement_list \fB}\fR
.RE
.fi
A function call is just an expression of the form
"\fIname\fB(\fIparameters\fB)\fR".
.PP
Parameters are numbers or arrays (an extension).  In the function definition,
zero or more parameters are defined by listing their names separated by
commas.  All parameters are call by value parameters.  
Arrays are specified in the parameter definition by
the notation "\fIname\fB[]\fR".   In the function call, actual parameters
are full expressions for number parameters.  The same notation is used
for passing arrays as for defining array parameters.  The named array is
passed by value to the function.  Since function definitions are dynamic,
parameter numbers and types are checked when a function is called.  Any
mismatch in number or types of parameters will cause a runtime error.
A runtime error will also occur for the call to an undefined function.
.PP
The \fIauto_list\fR is an optional list of variables that are for
"local" use.  The syntax of the auto list (if present) is "\fBauto
\fIname\fR, ... ;".  (The semicolon is optional.)  Each \fIname\fR is
the name of an auto variable.  Arrays may be specified by using the
same notation as used in parameters.  These variables have their
values pushed onto a stack at the start of the function.  The
variables are then initialized to zero and used throughout the
execution of the function.  At function exit, these variables are
popped so that the original value (at the time of the function call)
of these variables are restored.  The parameters are really auto
variables that are initialized to a value provided in the function
call.  Auto variables are different than traditional local variables
because if function A calls function B, B may access function
A's auto variables by just using the same name, unless function B has
called them auto variables.  Due to the fact that auto variables and
parameters are pushed onto a stack, \fBbc\fR supports recursive functions.
.PP
The function body is a list of \fBbc\fR statements.  Again, statements
are separated by semicolons or newlines.  Return statements cause the
termination of a function and the return of a value.  There are two
versions of the return statement.  The first form, "\fBreturn\fR", returns
the value 0 to the calling expression.  The second form, 
"\fBreturn ( \fIexpression \fB)\fR", computes the value of the expression
and returns that value to the calling expression.  There is an implied
"\fBreturn (0)\fR" at the end of every function.  This allows a function
to terminate and return 0 without an explicit return statement.
.PP
Functions also change the usage of the variable \fBibase\fR.  All
constants in the function body will be converted using the value of
\fBibase\fR at the time of the function call.  Changes of \fBibase\fR
will be ignored during the execution of the function except for the
standard function \fBread\fR, which will always use the current value
of \fBibase\fR for conversion of numbers.
.PP
Several extensions have been added to functions.  First, the format of
the definition has been slightly relaxed.  The standard requires the
opening brace be on the same line as the \fBdefine\fR keyword and all
other parts must be on following lines.  This version of \fBbc\fR will
allow any number of newlines before and after the opening brace of the
function.  For example, the following definitions are legal.
.nf
.RS
\f(CW
define d (n) { return (2*n); }
define d (n)
{ return (2*n); }
\fR
.RE
.fi
.PP
Functions may be defined as \fBvoid\fR.  A void
funtion returns no value and thus may not be used in any place that needs
a value.  A void function does not produce any output when called by itself
on an input line.  The key word \fBvoid\fR is placed between the key word
\fBdefine\fR and the function name.  For example, consider the following
session.
.nf
.RS
\f(CW
define py (y) { print "---&gt;", y, "&lt;---", "\en"; }
define void px (x) { print "---&gt;", x, "&lt;---", "\en"; }
py(1)
---&gt;1&lt;---
0
px(1)
---&gt;1&lt;---
\fR
.RE
.fi
Since \fBpy\fR is not a void function, the call of \fBpy(1)\fR prints
the desired output and then prints a second line that is the value of
the function.  Since the value of a function that is not given an
explicit return statement is zero, the zero is printed.  For \fBpx(1)\fR,
no zero is printed because the function is a void function.
.PP
Also, call by variable for arrays was added.  To declare
a call by variable array, the declaration of the array parameter in the
function definition looks like "\fI*name\fB[]\fR".  The call to the
function remains the same as call by value arrays. 
.SS MATH LIBRARY
If \fBbc\fR is invoked with the \fB-l\fR option, a math library is preloaded
and the default scale is set to 20.   The math functions will calculate their
results to the scale set at the time of their call.  
The math library defines the following functions:
.IP "s (\fIx\fR)"
The sine of x, x is in radians.
.IP "c (\fIx\fR)"
The cosine of x, x is in radians.
.IP "a (\fIx\fR)"
The arctangent of x, arctangent returns radians.
.IP "l (\fIx\fR)"
The natural logarithm of x.
.IP "e (\fIx\fR)"
The exponential function of raising e to the value x.
.IP "j (\fIn,x\fR)"
The Bessel function of integer order n of x.
.SS EXAMPLES
In /bin/sh,  the following will assign the value of "pi" to the shell
variable \fBpi\fR.
.RS
\f(CW
pi=$(echo "scale=10; 4*a(1)" | bc -l)
\fR
.RE
.PP
The following is the definition of the exponential function used in the
math library.  This function is written in POSIX \fBbc\fR.
.nf
.RS
\f(CW
scale = 20

/* Uses the fact that e^x = (e^(x/2))^2
When x is small enough, we use the series:
e^x = 1 + x + x^2/2! + x^3/3! + ...
*/

define e(x) {
auto  a, d, e, f, i, m, v, z

/* Check the sign of x. */
if (x&lt;0) {
m = 1
x = -x
} 

/* Precondition x. */
z = scale;
scale = 4 + z + .44*x;
while (x &gt; 1) {
f += 1;
x /= 2;
}

/* Initialize the variables. */
v = 1+x
a = x
d = 1

for (i=2; 1; i++) {
e = (a *= x) / (d *= i)
if (e == 0) {
if (f&gt;0) while (f--)  v = v*v;
scale = z
if (m) return (1/v);
return (v/1);
}
v += e
}
}
\fR
.RE
.fi
.PP
The following is code that uses the extended features of \fBbc\fR to
implement a simple program for calculating checkbook balances.  This
program is best kept in a file so that it can be used many times 
without having to retype it at every use.
.nf
.RS
\f(CW
scale=2
print "\enCheck book program!\en"
print "  Remember, deposits are negative transactions.\en"
print "  Exit by a 0 transaction.\en\en"

print "Initial balance? "; bal = read()
bal /= 1
print "\en"
while (1) {
"current balance = "; bal
"transaction? "; trans = read()
if (trans == 0) break;
bal -= trans
bal /= 1
}
quit
\fR
.RE
.fi
.PP
The following is the definition of the recursive factorial function.
.nf
.RS
\f(CW
define f (x) {
if (x &lt;= 1) return (1);
return (f(x-1) * x);
}
\fR
.RE
.fi
.SS READLINE AND LIBEDIT OPTIONS
GNU \fBbc\fR can be compiled (via a configure option) to use the GNU
\fBreadline\fR input editor library or the BSD \fBlibedit\fR library.
This allows the user to do editing of lines before sending them
to \fBbc\fR.  It also allows for a history of previous lines typed.
When this option is selected, \fBbc\fR has one more special variable.
This special variable, \fBhistory\fR is the number of lines of history
retained.  For \fBreadline\fR, a value of -1 means that an unlimited
number of history lines are retained.  Setting the value of
\fBhistory\fR to a positive number restricts the number of history
lines to the number given.  The value of 0 disables the history
feature.  The default value is 100. For more information, read the
user manuals for the GNU \fBreadline\fR, \fBhistory\fR and BSD \fBlibedit\fR
libraries.  One can not enable both \fBreadline\fR and \fBlibedit\fR
at the same time.
.SS DIFFERENCES
This version of 
.B bc
was implemented from the POSIX P1003.2/D11 draft and contains
several differences and extensions relative to the draft and
traditional implementations.
It is not implemented in the traditional way using
.I dc(1).
This version is a single process which parses and runs a byte code
translation of the program.  There is an "undocumented" option (-c)
that causes the program to output the byte code to
the standard output instead of running it.  It was mainly used for
debugging the parser and preparing the math library.
.PP
A major source of differences is
extensions, where a feature is extended to add more functionality and
additions, where new features are added. 
The following is the list of differences and extensions.
.IP "LANG environment"
This version does not conform to the POSIX standard in the processing
of the LANG environment variable and all environment variables starting
with LC_.
.IP "names"
Traditional and POSIX
.B bc
have single letter names for functions, variables and arrays.  They have
been extended to be multi-character names that start with a letter and
may contain letters, numbers and the underscore character.
.IP "Strings"
Strings are not allowed to contain NUL characters.  POSIX says all characters
must be included in strings.
.IP "last"
POSIX \fBbc\fR does not have a \fBlast\fR variable.  Some implementations
of \fBbc\fR use the period (.) in a similar way.  
.IP "comparisons"
POSIX \fBbc\fR allows comparisons only in the if statement, the while
statement, and the second expression of the for statement.  Also, only
one relational operation is allowed in each of those statements.
.IP "if statement, else clause"
POSIX \fBbc\fR does not have an else clause.
.IP "for statement"
POSIX \fBbc\fR requires all expressions to be present in the for statement.
.IP "&amp;&amp;, ||, !"
POSIX \fBbc\fR does not have the logical operators.
.IP "read function"
POSIX \fBbc\fR does not have a read function.
.IP "print statement"
POSIX \fBbc\fR does not have a print statement .
.IP "continue statement"
POSIX \fBbc\fR does not have a continue statement.
.IP "return statement"
POSIX \fBbc\fR requires parentheses around the return expression.
.IP "array parameters"
POSIX \fBbc\fR does not (currently) support array parameters in full.
The POSIX grammar allows for arrays in function definitions, but does
not provide a method to specify an array as an actual parameter.  (This
is most likely an oversight in the grammar.)  Traditional implementations
of \fBbc\fR have only call by value array parameters.
.IP "function format"
POSIX \fBbc\fR requires the opening brace on the same line as the 
\fBdefine\fR key word and the \fBauto\fR statement on the next line.
.IP "=+, =-, =*, =/, =%, =^"
POSIX \fBbc\fR does not require these "old style" assignment operators to
be defined.  This version may allow these "old style" assignments.  Use
the limits statement to see if the installed version supports them.  If
it does support the "old style" assignment operators, the statement
"a =- 1" will decrement \fBa\fR by 1 instead of setting \fBa\fR to the
value -1.
.IP "spaces in numbers"
Other implementations of \fBbc\fR allow spaces in numbers.  For example,
"x=1 3" would assign the value 13 to the variable x.  The same statement
would cause a syntax error in this version of \fBbc\fR.
.IP "errors and execution"
This implementation varies from other implementations in terms of what
code will be executed when syntax and other errors are found in the
program.  If a syntax error is found in a function definition, error
recovery tries to find the beginning of a statement and continue to
parse the function.  Once a syntax error is found in the function, the
function will not be callable and becomes undefined.
Syntax errors in the interactive execution code will invalidate the
current execution block.  The execution block is terminated by an
end of line that appears after a complete sequence of statements.
For example, 
.nf
.RS
a = 1
b = 2
.RE
.fi
has two execution blocks and
.nf
.RS
{ a = 1
b = 2 }
.RE
.fi
has one execution block.  Any runtime error will terminate the execution
of the current execution block.  A runtime warning will not terminate the
current execution block.
.IP "Interrupts"
During an interactive session, the SIGINT signal (usually generated by
the control-C character from the terminal) will cause execution of the
current execution block to be interrupted.  It will display a "runtime"
error indicating which function was interrupted.  After all runtime
structures have been cleaned up, a message will be printed to notify the
user that \fBbc\fR is ready for more input.  All previously defined functions
remain defined and the value of all non-auto variables are the value at
the point of interruption.  All auto variables and function parameters
are removed during the
clean up process.  During a non-interactive
session, the SIGINT signal will terminate the entire run of \fBbc\fR.
.SS LIMITS
The following are the limits currently in place for this 
.B bc
processor.  Some of them may have been changed by an installation.
Use the limits statement to see the actual values.
.IP "BC_BASE_MAX"
The maximum output base is currently set at 999.  The maximum input base
is 16.
.IP "BC_DIM_MAX"
This is currently an arbitrary limit of 65535 as distributed.  Your
installation may be different.
.IP "BC_SCALE_MAX"
The number of digits after the decimal point is limited to INT_MAX digits.
Also, the number of digits before the decimal point is limited to INT_MAX
digits.
.IP "BC_STRING_MAX"
The limit on the number of characters in a string is INT_MAX characters.
.IP "exponent"
The value of the exponent in the raise operation (^) is limited to LONG_MAX.
.IP "variable names"
The current limit on the number of unique names is 32767 for each of
simple variables, arrays and functions.
.SH ENVIRONMENT VARIABLES
The following environment variables are processed by \fBbc\fR:
.IP "POSIXLY_CORRECT"
This is the same as the \fB-s\fR option.
.IP "BC_ENV_ARGS"
This is another mechanism to get arguments to \fBbc\fR.  The
format is the same as the command line arguments.  These arguments
are processed first, so any files listed in the environment arguments
are processed before any command line argument files.  This allows
the user to set up "standard" options and files to be processed
at every invocation of \fBbc\fR.  The files in the environment
variables would typically contain function definitions for functions
the user wants defined every time \fBbc\fR is run.
.IP "BC_LINE_LENGTH"
This should be an integer specifying the number of characters in an
output line for numbers. This includes the backslash and newline characters
for long numbers.  As an extension, the value of zero disables the 
multi-line feature.  Any other value of this variable that is less than
3 sets the line length to 70.
.SH DIAGNOSTICS
If any file on the command line can not be opened, \fBbc\fR will report
that the file is unavailable and terminate.  Also, there are compile
and run time diagnostics that should be self-explanatory.
.SH BUGS
Error recovery is not very good yet.
.PP
Email bug reports to
.BR bug-bc@gnu.org .
Be sure to include the word ``bc'' somewhere in the ``Subject:'' field.
.SH AUTHOR
.nf
Philip A. Nelson
philnelson@acm.org
.fi
.SH ACKNOWLEDGEMENTS
The author would like to thank Steve Sommars (Steve.Sommars@att.com) for
his extensive help in testing the implementation.  Many great suggestions
were given.  This is a much better product due to his involvement.
'\" et
.TH BG "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
bg
\(em run jobs in the background
.SH SYNOPSIS
.LP
.nf
bg \fB[\fIjob_id\fR...\fB]\fR
.fi
.SH DESCRIPTION
If job control is enabled (see the description of
.IR set
.BR \(mim ),
the
.IR bg
utility shall resume suspended jobs from the current environment (see
.IR "Section 2.12" ", " "Shell Execution Environment")
by running them as background jobs. If the job specified by
.IR job_id
is already a running background job, the
.IR bg
utility shall have no effect and shall exit successfully.
.P
Using
.IR bg
to place a job into the background shall cause its process ID to become
``known in the current shell execution environment'', as if it had been
started as an asynchronous list; see
.IR "Section 2.9.3.1" ", " "Examples".
.SH OPTIONS
None.
.SH OPERANDS
The following operand shall be supported:
.IP "\fIjob_id\fR" 10
Specify the job to be resumed as a background job. If no
.IR job_id
operand is given, the most recently suspended job shall be used. The
format of
.IR job_id
is described in the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 3.204" ", " "Job Control Job ID".
.SH STDIN
Not used.
.SH "INPUT FILES"
None.
.SH "ENVIRONMENT VARIABLES"
The following environment variables shall affect the execution of
.IR bg :
.IP "\fILANG\fP" 10
Provide a default value for the internationalization variables that are
unset or null. (See the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 8.2" ", " "Internationalization Variables"
for the precedence of internationalization variables used to determine
the values of locale categories.)
.IP "\fILC_ALL\fP" 10
If set to a non-empty string value, override the values of all the
other internationalization variables.
.IP "\fILC_CTYPE\fP" 10
Determine the locale for the interpretation of sequences of bytes of
text data as characters (for example, single-byte as opposed to
multi-byte characters in arguments).
.IP "\fILC_MESSAGES\fP" 10
.br
Determine the locale that should be used to affect the format and
contents of diagnostic messages written to standard error.
.IP "\fINLSPATH\fP" 10
Determine the location of message catalogs for the processing of
.IR LC_MESSAGES .
.SH "ASYNCHRONOUS EVENTS"
Default.
.SH STDOUT
The output of
.IR bg
shall consist of a line in the format:
.sp
.RS 4
.nf
\fB
"[%d] %s\en", &lt;\fIjob-number\fR&gt;, &lt;\fIcommand\fR&gt;
.fi \fR
.P
.RE
.P
where the fields are as follows:
.IP "&lt;\fIjob-number\fR&gt;" 10
A number that can be used to identify the job to the
.IR wait ,
.IR fg ,
and
.IR kill
utilities. Using these utilities, the job can be identified by
prefixing the job number with
.BR '%' .
.IP "&lt;\fIcommand\fR&gt;" 10
The associated command that was given to the shell.
.SH STDERR
The standard error shall be used only for diagnostic messages.
.SH "OUTPUT FILES"
None.
.SH "EXTENDED DESCRIPTION"
None.
.SH "EXIT STATUS"
The following exit values shall be returned:
.IP "\00" 6
Successful completion.
.IP &gt;0 6
An error occurred.
.SH "CONSEQUENCES OF ERRORS"
If job control is disabled, the
.IR bg
utility shall exit with an error and no job shall be placed in the
background.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
A job is generally suspended by typing the SUSP character
(&lt;control&gt;\(hyZ on most systems); see the Base Definitions volume of POSIX.1\(hy2008,
.IR "Chapter 11" ", " "General Terminal Interface".
At that point,
.IR bg
can put the job into the background. This is most effective when the
job is expecting no terminal input and its output has been redirected
to non-terminal files. A background job can be forced to stop when it
has terminal output by issuing the command:
.sp
.RS 4
.nf
\fB
stty tostop
.fi \fR
.P
.RE
.P
A background job can be stopped with the command:
.sp
.RS 4
.nf
\fB
kill \(mis stop \fIjob ID\fR
.fi \fR
.P
.RE
.P
The
.IR bg
utility does not work as expected when it is operating in its own
utility execution environment because that environment has no suspended
jobs. In the following examples:
.sp
.RS 4
.nf
\fB
\&amp;... | xargs bg
(bg)
.fi \fR
.P
.RE
.P
each
.IR bg
operates in a different environment and does not share its parent
shell's understanding of jobs. For this reason,
.IR bg
is generally implemented as a shell regular built-in.
.SH EXAMPLES
None.
.SH RATIONALE
The extensions to the shell specified in this volume of POSIX.1\(hy2008 have mostly been based
on features provided by the KornShell. The job control features
provided by
.IR bg ,
.IR fg ,
and
.IR jobs
are also based on the KornShell. The standard developers examined the
characteristics of the C shell versions of these utilities and found
that differences exist. Despite widespread use of the C shell, the
KornShell versions were selected for this volume of POSIX.1\(hy2008 to maintain a degree of
uniformity with the rest of the KornShell features selected (such as
the very popular command line editing features).
.P
The
.IR bg
utility is expected to wrap its output if the output exceeds the number
of display columns.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "Section 2.9.3.1" ", " "Examples",
.IR "\fIfg\fR\^",
.IR "\fIkill\fR\^",
.IR "\fIjobs\fR\^",
.IR "\fIwait\fR\^"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 3.204" ", " "Job Control Job ID",
.IR "Chapter 8" ", " "Environment Variables",
.IR "Chapter 11" ", " "General Terminal Interface"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
'\" et
.TH BREAK "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
break
\(em exit from for, while, or until loop
.SH SYNOPSIS
.LP
.nf
break \fB[\fIn\fB]\fR
.fi
.SH DESCRIPTION
The
.IR break
utility shall exit from the smallest enclosing
.BR for ,
.BR while ,
or
.BR until
loop, if any; or from the
.IR n th
enclosing loop if
.IR n
is specified. The value of
.IR n
is an unsigned decimal integer greater than or equal to 1. The default
shall be equivalent to
.IR n =1.
If
.IR n
is greater than the number of enclosing loops, the outermost enclosing
loop shall be exited. Execution shall continue with the command
immediately following the loop.
.SH OPTIONS
None.
.SH OPERANDS
See the DESCRIPTION.
.SH STDIN
Not used.
.SH "INPUT FILES"
None.
.SH "ENVIRONMENT VARIABLES"
None.
.SH "ASYNCHRONOUS EVENTS"
Default.
.SH STDOUT
Not used.
.SH STDERR
The standard error shall be used only for diagnostic messages.
.SH "OUTPUT FILES"
None.
.SH "EXTENDED DESCRIPTION"
None.
.SH "EXIT STATUS"
.IP "\00" 6
Successful completion.
.IP &gt;0 6
The
.IR n
value was not an unsigned decimal integer greater than or equal to 1.
.SH "CONSEQUENCES OF ERRORS"
Default.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
None.
.SH EXAMPLES
.LP
.nf
for i in *
do
if test \(mid "$i"
then break
fi
done
.fi
.SH "RATIONALE"
In early proposals, consideration was given to expanding the syntax of
.IR break
and
.IR continue
to refer to a label associated with the appropriate loop as a
preferable alternative to the
.IR n
method. However, this volume of POSIX.1\(hy2008 does reserve the name space of command names
ending with a
&lt;colon&gt;.
It is anticipated that a future implementation could take advantage of
this and provide something like:
.sp
.RS 4
.nf
\fB
outofloop: for i in a b c d e
do
for j in 0 1 2 3 4 5 6 7 8 9
do
if test \(mir "${i}${j}"
then break outofloop
fi
done
done
.fi \fR
.P
.RE
.P
and that this might be standardized after implementation experience is
achieved.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "Section 2.14" ", " "Special Built-In Utilities"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
'\" et
.TH C99 "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
c99
\(em compile standard C programs
.SH SYNOPSIS
.LP
.nf
c99 \fB[\fIoptions\fR...\fB] \fIpathname \fB[[\fIpathname\fB] [\fR\(miI \fIdirectory\fB]
\fB[\fR\(miL \fIdirectory\fB] [\fR\(mil \fIlibrary\fB]]\fR...
.fi
.SH DESCRIPTION
The
.IR c99
utility is an interface to the standard C compilation system; it shall
accept source code conforming to the ISO\ C standard. The system conceptually
consists of a compiler and link editor. The input files referenced by
.IR pathname
operands and
.BR \(mil
option-arguments shall be compiled and linked to produce an executable
file. (It is unspecified whether the linking occurs entirely within the
operation of
.IR c99 ;
some implementations may produce objects that are not fully resolved
until the file is executed.)
.P
If the
.BR \(mic
option is specified, for all pathname operands of the form
.IR file \c
.BR .c ,
the files:
.sp
.RS 4
.nf
\fB
$(basename \fIpathname\fR .c).o
.fi \fR
.P
.RE
.P
shall be created as the result of successful compilation. If the
.BR \(mic
option is not specified, it is unspecified whether such
.BR .o
files are created or deleted for the
.IR file \c
.BR .c
operands.
.P
If there are no options that prevent link editing (such as
.BR \(mic
or
.BR \(miE ),
and all input files compile and link without error, the resulting
executable file shall be written according to the
.BR \(mio
.IR outfile
option (if present) or to the file
.BR a.out .
.P
The executable file shall be created as specified in
.IR "Section 1.1.1.4" ", " "File Read" ", " "Write" ", " "and Creation",
except that the file permission bits shall be set to:
S_IRWXO | S_IRWXG | S_IRWXU
.P
and the bits specified by the
.IR umask
of the process shall be cleared.
.SH OPTIONS
The
.IR c99
utility shall conform to the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 12.2" ", " "Utility Syntax Guidelines",
except that:
.IP " *" 4
Options can be interspersed with operands.
.IP " *" 4
The order of specifying the
.BR \(miL
and
.BR \(mil
options, and the order of specifying
.BR \(mil
options with respect to
.IR pathname
operands is significant.
.IP " *" 4
Conforming applications shall specify each option separately; that is,
grouping option letters (for example,
.BR \(micO )
need not be recognized by all implementations.
.P
The following options shall be supported:
.IP "\fB\(mic\fP" 10
Suppress the link-edit phase of the compilation, and do not remove any
object files that are produced.
.IP "\fB\(miD\ \fIname\fB[=\fIvalue\fB]\fR" 10
.br
Define
.IR name
as if by a C-language
.BR #define
directive. If no =\c
.IR value
is given, a value of 1 shall be used. The
.BR \(miD
option has lower precedence than the
.BR \(miU
option. That is, if
.IR name
is used in both a
.BR \(miU
and a
.BR \(miD
option,
.IR name
shall be undefined regardless of the order of the options. Additional
implementation-defined
.IR name s
may be provided by the compiler. Implementations shall support at least
2\|048 bytes of
.BR \(miD
definitions and 256
.IR names .
.IP "\fB\(miE\fP" 10
Copy C-language source files to standard output, expanding all
preprocessor directives; no compilation shall be performed. If any
operand is not a text file, the effects are unspecified.
.IP "\fB\(mig\fP" 10
Produce symbolic information in the object or executable files; the
nature of this information is unspecified, and may be modified by
implementation-defined interactions with other options.
.IP "\fB\(miI\ \fIdirectory\fR" 10
Change the algorithm for searching for headers whose names are not
absolute pathnames to look in the directory named by the
.IR directory
pathname before looking in the usual places. Thus, headers whose names
are enclosed in double-quotes (\c
.BR \(dq\^\(dq )
shall be searched for first in the directory of the file with the
.BR #include
line, then in directories named in
.BR \(miI
options, and last in the usual places. For headers whose names are
enclosed in angle brackets (\c
.BR \(dq&lt;\|&gt;\(dq ),
the header shall be searched for only in directories named in
.BR \(miI
options and then in the usual places. Directories named in
.BR \(miI
options shall be searched in the order specified. If the
.BR \(miI
option is used to specify a directory that is one of the usual places
searched by default, the results are unspecified. Implementations shall
support at least ten instances of this option in a single
.IR c99
command invocation.
.IP "\fB\(miL\ \fIdirectory\fR" 10
Change the algorithm of searching for the libraries named in the
.BR \(mil
objects to look in the directory named by the
.IR directory
pathname before looking in the usual places. Directories named in
.BR \(miL
options shall be searched in the order specified. If the
.BR \(miL
option is used to specify a directory that is one of the usual places
searched by default, the results are unspecified. Implementations shall
support at least ten instances of this option in a single
.IR c99
command invocation. If a directory specified by a
.BR \(miL
option contains files with names starting with any of the strings
.BR \(dqlibc.\(dq ,
.BR \(dqlibl.\(dq ,
.BR \(dqlibpthread.\(dq ,
.BR \(dqlibm.\(dq ,
.BR \(dqlibrt.\(dq ,
.BR \(dqlibtrace.\(dq ,
.BR \(dqlibxnet.\(dq ,
or
.BR \(dqliby.\(dq ,
the results are unspecified.
.IP "\fB\(mil\ \fIlibrary\fR" 10
Search the library named
.BR liblibrary.a .
A library shall be searched when its name is encountered, so the
placement of a
.BR \(mil
option is significant. Several standard libraries can be
specified in this manner, as described in the EXTENDED DESCRIPTION
section. Implementations may recognize implementation-defined
suffixes other than
.BR .a
as denoting libraries.
.IP "\fB\(miO\ \fIoptlevel\fR" 10
Specify the level of code optimization. If the
.IR optlevel
option-argument is the digit
.BR '0' ,
all special code optimizations shall be disabled. If it is the digit
.BR '1' ,
the nature of the optimization is unspecified. If the
.BR \(miO
option is omitted, the nature of the system's default optimization is
unspecified. It is unspecified whether code generated in the presence
of the
.BR \(miO
0 option is the same as that generated when
.BR \(miO
is omitted. Other
.IR optlevel
values may be supported.
.IP "\fB\(mio\ \fIoutfile\fR" 10
Use the pathname
.IR outfile ,
instead of the default
.BR a.out ,
for the executable file produced. If the
.BR \(mio
option is present with
.BR \(mic
or
.BR \(miE ,
the result is unspecified.
.IP "\fB\(mis\fP" 10
Produce object or executable files, or both, from which symbolic and
other information not required for proper execution using the
.IR exec
family defined in the System Interfaces volume of POSIX.1\(hy2008 has been removed (stripped). If both
.BR \(mig
and
.BR \(mis
options are present, the action taken is unspecified.
.IP "\fB\(miU\ \fIname\fR" 10
Remove any initial definition of
.IR name .
.P
Multiple instances of the
.BR \(miD ,
.BR \(miI ,
.BR \(miL ,
.BR \(mil ,
and
.BR \(miU
options can be specified.
.SH OPERANDS
The application shall ensure that at least one
.IR pathname
operand is specified. The following forms for
.IR pathname
operands shall be supported:
.IP "\fIfile.\fBc\fR" 10
A C-language source file to be compiled and optionally linked. The
application shall ensure that the operand is of this form if the
.BR \(mic
option is used.
.IP "\fIfile.\fBa\fR" 10
A library of object files typically produced by the
.IR ar
utility, and passed directly to the link editor. Implementations may
recognize implementation-defined suffixes other than
.BR .a
as denoting object file libraries.
.IP "\fIfile.\fBo\fR" 10
An object file produced by
.IR c99
.BR \(mic
and passed directly to the link editor. Implementations may recognize
implementation-defined suffixes other than
.BR .o
as denoting object files.
.P
The processing of other files is implementation-defined.
.SH STDIN
Not used.
.SH "INPUT FILES"
Each input file shall be one of the following: a text file containing a
C-language source program, an object file in the format produced by
.IR c99
.BR \(mic ,
or a library of object files, in the format produced by archiving zero
or more object files, using
.IR ar .
Implementations may supply additional utilities that produce files in
these formats. Additional input file formats are
implementation-defined.
.SH "ENVIRONMENT VARIABLES"
The following environment variables shall affect the execution of
.IR c99 :
.IP "\fILANG\fP" 10
Provide a default value for the internationalization variables that are
unset or null. (See the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 8.2" ", " "Internationalization Variables"
for the precedence of internationalization variables used to determine
the values of locale categories.)
.IP "\fILC_ALL\fP" 10
If set to a non-empty string value, override the values of all the
other internationalization variables.
.IP "\fILC_CTYPE\fP" 10
Determine the locale for the interpretation of sequences of bytes of
text data as characters (for example, single-byte as opposed to
multi-byte characters in arguments and input files).
.IP "\fILC_MESSAGES\fP" 10
.br
Determine the locale that should be used to affect the format and
contents of diagnostic messages written to standard error.
.IP "\fINLSPATH\fP" 10
Determine the location of message catalogs for the processing of
.IR LC_MESSAGES .
.IP "\fITMPDIR\fP" 10
Provide a pathname that should override the default directory for
temporary files, if any.
On XSI-conforming systems, provide a pathname that shall override the
default directory for temporary files, if any.
.SH "ASYNCHRONOUS EVENTS"
Default.
.SH STDOUT
If more than one
.IR pathname
operand ending in
.BR .c
(or possibly other unspecified suffixes) is given, for each such file:
.sp
.RS 4
.nf
\fB
"%s:\en", &lt;\fIpathname\fR&gt;
.fi \fR
.P
.RE
.P
may be written. These messages, if written, shall precede the
processing of each input file; they shall not be written to the
standard output if they are written to the standard error, as described
in the STDERR section.
.P
If the
.BR \(miE
option is specified, the standard output shall be a text file that
represents the results of the preprocessing stage of the language; it
may contain extra information appropriate for subsequent compilation
passes.
.SH STDERR
The standard error shall be used only for diagnostic messages.
If more than one
.IR pathname
operand ending in
.BR .c
(or possibly other unspecified suffixes) is given, for each such file:
.sp
.RS 4
.nf
\fB
"%s:\en", &lt;\fIpathname\fR&gt;
.fi \fR
.P
.RE
.P
may be written to allow identification of the diagnostic and warning
messages with the appropriate input file. These messages, if written,
shall precede the processing of each input file; they shall not be
written to the standard error if they are written to the standard
output, as described in the STDOUT section.
.P
This utility may produce warning messages about certain conditions that
do not warrant returning an error (non-zero) exit value.
.SH "OUTPUT FILES"
Object files or executable files or both are produced in unspecified
formats. If the pathname of an object file or executable file to be
created by
.IR c99
resolves to an existing directory entry for a file that is not a regular
file, it is unspecified whether
.IR c99
shall attempt to create the file or shall issue a diagnostic and exit
with a non-zero exit status.
.SH "EXTENDED DESCRIPTION"
.SS "Standard Libraries"
.P
The
.IR c99
utility shall recognize the following
.BR \(mil
options for standard libraries:
.IP "\fB\(mil\ c\fR" 10
This option shall make available all interfaces referenced in the System Interfaces volume of POSIX.1\(hy2008,
with the possible exception of those interfaces listed as residing in
.IR &lt;aio.h&gt; ,
.IR &lt;arpa/inet.h&gt; ,
.IR &lt;complex.h&gt; ,
.IR &lt;fenv.h&gt; ,
.IR &lt;math.h&gt; ,
.IR &lt;mqueue.h&gt; ,
.IR &lt;netdb.h&gt; ,
.IR &lt;net/if.h&gt; ,
.IR &lt;netinet/in.h&gt; ,
.IR &lt;pthread.h&gt; ,
.IR &lt;sched.h&gt; ,
.IR &lt;semaphore.h&gt; ,
.IR &lt;spawn.h&gt; ,
.IR &lt;sys/socket.h&gt; ,
\fIpthread_kill\fR(),
and
\fIpthread_sigmask\fR()
in
.IR &lt;signal.h&gt; ,
.IR &lt;trace.h&gt; ,
interfaces marked as optional in
.IR &lt;sys/mman.h&gt; ,
interfaces marked as ADV (Advisory Information) in
.IR &lt;fcntl.h&gt; ,
and interfaces beginning with the prefix clock_ or time_ in
.IR &lt;time.h&gt; .
This option shall not be required to be present to cause a search of
this library.
.IP "\fB\(mil\ l\fR" 10
This option shall make available all interfaces required by the
C-language output of
.IR lex
that are not made available through the
.BR "\(mil\ c"
option.
.IP "\fB\(mil\ pthread\fR" 10
This option shall make available all interfaces referenced in
.IR &lt;pthread.h&gt; 
and
\fIpthread_kill\fR()
and
\fIpthread_sigmask\fR()
referenced in
.IR &lt;signal.h&gt; .
An implementation may search this library in the absence of this
option.
.IP "\fB\(mil\ m\fR" 10
This option shall make available all interfaces referenced in
.IR &lt;math.h&gt; ,
.IR &lt;complex.h&gt; ,
and
.IR &lt;fenv.h&gt; .
An implementation may search this library in the absence of this
option.
.IP "\fB\(mil\ rt\fR" 10
This option shall make available all interfaces referenced in
.IR &lt;aio.h&gt; ,
.IR &lt;mqueue.h&gt; ,
.IR &lt;sched.h&gt; ,
.IR &lt;semaphore.h&gt; ,
and
.IR &lt;spawn.h&gt; ,
interfaces marked as optional in
.IR &lt;sys/mman.h&gt; ,
interfaces marked as ADV (Advisory Information) in
.IR &lt;fcntl.h&gt; ,
and interfaces beginning with the prefix clock_ and time_ in
.IR &lt;time.h&gt; .
An implementation may search this library in the absence of this
option.
.IP "\fB\(mil\ trace\fR" 10
This option shall make available all interfaces referenced in
.IR &lt;trace.h&gt; .
An implementation may search this library in the absence of this
option.
.IP "\fB\(mil\ xnet\fR" 10
This option shall make available all interfaces referenced in
.IR &lt;arpa/inet.h&gt; ,
.IR &lt;netdb.h&gt; ,
.IR &lt;net/if.h&gt; ,
.IR &lt;netinet/in.h&gt; ,
and
.IR &lt;sys/socket.h&gt; .
An implementation may search this library in the absence of this
option.
.IP "\fB\(mil\ y\fR" 10
This option shall make available all interfaces required by the
C-language output of
.IR yacc
that are not made available through the
.BR "\(mil\ c"
option.
.P
In the absence of options that inhibit invocation of the link editor,
such as
.BR \(mic
or
.BR \(miE ,
the
.IR c99
utility shall cause the equivalent of a
.BR "\(mil\ c"
option to be passed to the link editor after the last
.IR pathname
operand or
.BR \(mil
option, causing it to be searched after all other object files and
libraries are loaded.
.P
It is unspecified whether the libraries
.BR libc.a ,
.BR libl.a ,
.BR libm.a ,
.BR libpthread.a ,
.BR librt.a ,
.BR libtrace.a ,
.BR libxnet.a ,
or
.BR liby.a
exist as regular files. The implementation may accept as
.BR \(mil
option-arguments names of objects that do not exist as regular files.
.SS "External Symbols"
.P
The C compiler and link editor shall support the significance of
external symbols up to a length of at least 31 bytes; the action taken
upon encountering symbols exceeding the implementation-defined
maximum symbol length is unspecified.
.P
The compiler and link editor shall support a minimum of 511 external
symbols per source or object file, and a minimum of 4\|095 external
symbols in total. A diagnostic message shall be written to the standard
output if the implementation-defined limit is exceeded; other actions
are unspecified.
.SS "Header Search"
.P
If a file with the same name as one of the standard headers defined in the Base Definitions volume of POSIX.1\(hy2008,
.IR "Chapter 13" ", " "Headers",
not provided as part of the implementation, is placed in any of the
usual places that are searched by default for headers, the results are
unspecified.
.SS "Programming Environments"
.P
All implementations shall support one of the following programming
environments as a default. Implementations may support more than one
of the following programming environments. Applications can use
\fIsysconf\fR()
or
.IR getconf
to determine which programming environments are supported.
.br
.sp
.ce 1
\fBTable 4-4: Programming Environments: Type Sizes\fR
.TS
center box tab(!);
cB | cB | cB | cB | cB
cB | cB | cB | cB | cB
l | n | n | n | n.
Programming Environment!Bits in!Bits in!Bits in!Bits in
\fIgetconf\fP Name!int!long!pointer!off_t
_
_POSIX_V7_ILP32_OFF32!32!32!32!32
_POSIX_V7_ILP32_OFFBIG!32!32!32!\(&gt;=64
_POSIX_V7_LP64_OFF64!32!64!64!64
_POSIX_V7_LPBIG_OFFBIG!\(&gt;=32!\(&gt;=64!\(&gt;=64!\(&gt;=64
.TE
.P
All implementations shall support one or more environments where the
widths of the following types are no greater than the width of type
.BR long :
.TS
tab(!) center;
lB lB lB.
T{
.nf
blksize_t
cc_t
mode_t
nfds_t
pid_t
T}!T{
.nf
ptrdiff_t
size_t
speed_t
ssize_t
suseconds_t
T}!T{
.nf
tcflag_t
wchar_t
wint_t
.fi
T}
.TE
.P
The executable files created when these environments are selected shall
be in a proper format for execution by the
.IR exec
family of functions. Each environment may be one of the ones in
.IR "Table 4-4, Programming Environments: Type Sizes",
or it may be another environment. The names for the environments that
meet this requirement shall be output by a
.IR getconf
command using the POSIX_V7_WIDTH_RESTRICTED_ENVS argument, as a
&lt;newline&gt;-separated
list of names suitable for use with the
.IR getconf
.BR \(miv
option. If more than one environment meets the requirement, the names
of all such environments shall be output on separate lines. Any of
these names can then be used in a subsequent
.IR getconf
command to obtain the flags specific to that environment with the
following suffixes added as appropriate:
.IP _CFLAGS 10
To get the C compiler flags.
.IP _LDFLAGS 10
To get the linker/loader flags.
.IP _LIBS 10
To get the libraries.
.P
This requirement may be removed in a future version.
.P
When this utility processes a file containing a function called
\fImain\fR(),
it shall be defined with a return type equivalent to
.BR int .
Using return from the initial call to
\fImain\fR()
shall be equivalent (other than with respect to language scope issues)
to calling
\fIexit\fR()
with the returned value. Reaching the end of the initial call to
\fImain\fR()
shall be equivalent to calling
.IR exit (0).
The implementation shall not declare a prototype for this function.
.P
Implementations provide configuration strings for C compiler flags,
linker/loader flags, and libraries for each supported environment.
When an application needs to use a specific programming environment
rather than the implementation default programming environment while
compiling, the application shall first verify that the implementation
supports the desired environment. If the desired programming
environment is supported, the application shall then invoke
.IR c99
with the appropriate C compiler flags as the first options for the
compile, the appropriate linker/loader flags after any other options
except
.BR \(mil
but before any operands or
.BR \(mil
options, and the appropriate libraries at the end of the operands
and
.BR \(mil
options.
.P
Conforming applications shall not attempt to link together object files
compiled for different programming models. Applications shall also be
aware that binary data placed in shared memory or in files might not be
recognized by applications built for other programming models.
.br
.sp
.ce 1
\fBTable 4-5: Programming Environments: \fIc99\fP Arguments\fR
.TS
center box tab(!);
cB | cB | cB
cB | cB | cB
l | l | l.
Programming Environment!!\fIc99\fP Arguments
\fIgetconf\fP Name!Use!\fIgetconf\fP Name
_
_POSIX_V7_ILP32_OFF32!C Compiler Flags!POSIX_V7_ILP32_OFF32_CFLAGS
!Linker/Loader Flags!POSIX_V7_ILP32_OFF32_LDFLAGS
!Libraries!POSIX_V7_ILP32_OFF32_LIBS
_
_POSIX_V7_ILP32_OFFBIG!C Compiler Flags!POSIX_V7_ILP32_OFFBIG_CFLAGS
!Linker/Loader Flags!POSIX_V7_ILP32_OFFBIG_LDFLAGS
!Libraries!POSIX_V7_ILP32_OFFBIG_LIBS
_
_POSIX_V7_LP64_OFF64!C Compiler Flags!POSIX_V7_LP64_OFF64_CFLAGS
!Linker/Loader Flags!POSIX_V7_LP64_OFF64_LDFLAGS
!Libraries!POSIX_V7_LP64_OFF64_LIBS
_
_POSIX_V7_LPBIG_OFFBIG!C Compiler Flags!POSIX_V7_LPBIG_OFFBIG_CFLAGS
!Linker/Loader Flags!POSIX_V7_LPBIG_OFFBIG_LDFLAGS
!Libraries!POSIX_V7_LPBIG_OFFBIG_LIBS
.TE
.P
In addition to the type size programming environments above, all
implementations also support a multi-threaded programming environment
that is orthogonal to all of the programming environments listed above.
The
.IR getconf
utility can be used to get flags for the threaded programming environment,
as indicated in
.IR "Table 4-6, Threaded Programming Environment: \fIc99\fP Arguments".
.sp
.ce 1
\fBTable 4-6: Threaded Programming Environment: \fIc99\fP Arguments\fR
.TS
center box tab(!);
cB | cB | cB
cB | cB | cB
l | l | l.
Programming Environment!!\fIc99\fP Arguments
\fIgetconf\fP Name!Use!\fIgetconf\fP Name
_
_POSIX_THREADS!C Compiler Flags!POSIX_V7_THREADS_CFLAGS
!Linker/Loader Flags!POSIX_V7_THREADS_LDFLAGS
.TE
.P
These programming environment flags may be used in conjunction with any
of the type size programming environments supported by the implementation.
.SH "EXIT STATUS"
The following exit values shall be returned:
.IP "\00" 6
Successful compilation or link edit.
.IP &gt;0 6
An error occurred.
.SH "CONSEQUENCES OF ERRORS"
When
.IR c99
encounters a compilation error that causes an object file not to be
created, it shall write a diagnostic to standard error and continue to
compile other source code operands, but it shall not perform the link
phase and return a non-zero exit status. If the link edit is
unsuccessful, a diagnostic message shall be written to standard error
and
.IR c99
exits with a non-zero status. A conforming application shall rely on the
exit status of
.IR c99 ,
rather than on the existence or mode of the executable file.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
Since the
.IR c99
utility usually creates files in the current directory during the
compilation process, it is typically necessary to run the
.IR c99
utility in a directory in which a file can be created.
.P
On systems providing POSIX Conformance (see the Base Definitions volume of POSIX.1\(hy2008,
.IR "Chapter 2" ", " "Conformance"),
.IR c99
is required only with the C-Language Development option;
XSI-conformant systems always provide
.IR c99 .
.P
Some historical implementations have created
.BR .o
files when
.BR \(mic
is not specified and more than one source file is given. Since this
area is left unspecified, the application cannot rely on
.BR .o
files being created, but it also must be prepared for any related
.BR .o
files that already exist being deleted at the completion of the link
edit.
.P
There is the possible implication that if a user supplies versions of
the standard functions (before they would be encountered by an implicit
.BR "\(mil\ c"
or explicit
.BR "\(mil\ m" ),
that those versions would be used in place of the standard versions.
There are various reasons this might not be true (functions defined as
macros, manipulations for clean name space, and so on), so the
existence of files named in the same manner as the standard libraries
within the
.BR \(miL
directories is explicitly stated to produce unspecified behavior.
.P
All of the functions specified in the System Interfaces volume of POSIX.1\(hy2008 may be made visible by
implementations when the Standard C Library is searched. Conforming
applications must explicitly request searching the other standard
libraries when functions made visible by those libraries are used.
.P
In the ISO\ C standard the mapping from physical source characters to the C
source character set is implementation-defined. Implementations may
strip white-space characters before the terminating
&lt;newline&gt;
of a (physical) line as part of this mapping and, as a consequence
of this, one or more white-space characters (and no other characters)
between a
&lt;backslash&gt;
character and the
&lt;newline&gt;
character that terminates the line produces implementation-defined
results. Portable applications should not use such constructs.
.P
Some
.IR c99
compilers not conforming to POSIX.1\(hy2008 do not support trigraphs by default.
.SH EXAMPLES
.IP " 1." 4
The following usage example compiles
.BR foo.c
and creates the executable file
.BR foo :
.RS 4 
.sp
.RS 4
.nf
\fB
c99 \(mio foo foo.c
.fi \fR
.P
.RE
.P
The following usage example compiles
.BR foo.c
and creates the object file
.BR foo.o :
.sp
.RS 4
.nf
\fB
c99 \(mic foo.c
.fi \fR
.P
.RE
.P
The following usage example compiles
.BR foo.c
and creates the executable file
.BR a.out :
.sp
.RS 4
.nf
\fB
c99 foo.c
.fi \fR
.P
.RE
.P
The following usage example compiles
.BR foo.c ,
links it with
.BR bar.o ,
and creates the executable file
.BR a.out .
It may also create and leave
.BR foo.o :
.sp
.RS 4
.nf
\fB
c99 foo.c bar.o
.fi \fR
.P
.RE
.RE
.IP " 2." 4
The following example shows how an application using threads interfaces
can test for support of and use a programming environment supporting
32-bit
.BR int ,
.BR long ,
and
.BR pointer
types and an
.BR off_t
type using at least 64 bits:
.RS 4 
.sp
.RS 4
.nf
\fB
offbig_env=$(getconf _POSIX_V7_ILP32_OFFBIG)
if [ $offbig_env != "-1" ] &amp;&amp; [ $offbig_env != "undefined" ]
then
c99 $(getconf POSIX_V7_ILP32_OFFBIG_CFLAGS) \e
$(getconf POSIX_V7_THREADS_CFLAGS) -D_XOPEN_SOURCE=700 \e
$(getconf POSIX_V7_ILP32_OFFBIG_LDFLAGS) \e
$(getconf POSIX_V7_THREADS_LDFLAGS) foo.c -o foo \e
$(getconf POSIX_V7_ILP32_OFFBIG_LIBS) \e
-l pthread
else
echo ILP32_OFFBIG programming environment not supported
exit 1
fi
.fi \fR
.P
.RE
.RE
.IP " 3." 4
The following examples clarify the use and interactions of
.BR \(miL
and
.BR \(mil
options.
.RS 4 
.P
Consider the case in which module
.BR a.c
calls function
\fIf\fR()
in library
.BR libQ.a ,
and module
.BR b.c
calls function
\fIg\fR()
in library
.BR libp.a .
Assume that both libraries reside in
.BR /a/b/c .
The command line to compile and link in the desired way is:
.sp
.RS 4
.nf
\fB
c99 \(miL /a/b/c main.o a.c \(mil Q b.c \(mil p
.fi \fR
.P
.RE
.P
In this case the
.BR \(miL
option need only precede the first
.BR \(mil
option, since both
.BR libQ.a
and
.BR libp.a
reside in the same directory.
.P
Multiple
.BR \(miL
options can be used when library name collisions occur. Building on
the previous example, suppose that the user wants to use a new
.BR libp.a ,
in
.BR /a/a/a ,
but still wants
\fIf\fR()
from
.BR /a/b/c/libQ.a :
.sp
.RS 4
.nf
\fB
c99 \(miL /a/a/a \(miL /a/b/c main.o a.c \(mil Q b.c \(mil p
.fi \fR
.P
.RE
.P
In this example, the linker searches the
.BR \(miL
options in the order specified, and finds
.BR /a/a/a/libp.a
before
.BR /a/b/c/libp.a
when resolving references for
.BR b.c .
The order of the
.BR \(mil
options is still important, however.
.RE
.IP " 4." 4
The following example shows how an application can use a programming
environment where the widths of the following types:
.BR blksize_t ,
.BR cc_t ,
.BR mode_t ,
.BR nfds_t ,
.BR pid_t ,
.BR ptrdiff_t ,
.BR size_t ,
.BR speed_t ,
.BR ssize_t ,
.BR suseconds_t ,
.BR tcflag_t ,
.BR wchar_t ,
.BR wint_t
.RS 4 
.P
are no greater than the width of type
.BR long :
.sp
.RS 4
.nf
\fB
# First choose one of the listed environments ...
.P
# ... if there are no additional constraints, the first one will do:
CENV=$(getconf POSIX_V7_WIDTH_RESTRICTED_ENVS | head -n l)
.P
# ... or, if an environment that supports large files is preferred,
# look for names that contain "OFF64" or "OFFBIG". (This chooses
# the last one in the list if none match.)
for CENV in $(getconf POSIX_V7_WIDTH_RESTRICTED_ENVS)
do
case $CENV in
*OFF64*|*OFFBIG*) break ;;
esac
done
.P
# The chosen environment name can now be used like this:
.P
c99 $(getconf ${CENV}_CFLAGS) -D _POSIX_C_SOURCE=200809L \e
$(getconf ${CENV}_LDFLAGS) foo.c -o foo \e
$(getconf ${CENV}_LIBS)
.fi \fR
.P
.RE
.RE
.SH RATIONALE
The
.IR c99
utility is based on the
.IR c89
utility originally introduced in the ISO\ POSIX\(hy2:\|1993 standard.
.P
Some of the changes from
.IR c89
include the ability to intersperse options and operands (which many
.IR c89
implementations allowed despite it not being specified),
the description of
.BR \(mil
as an option instead of an operand, and the modification to the contents
of the Standard Libraries section to account for new headers and options;
for example,
.IR &lt;spawn.h&gt; 
added to the description of
.BR "\(mil\ rt" ,
and
.BR "\(mil\ trace"
added for the Tracing option.
.P
POSIX.1\(hy2008 specifies that the
.IR c99
utility must be able to use regular files for
.BR *.o
files and for
.BR a.out
files. Implementations are free to overwrite existing files of other
types when attempting to create object files and executable files, but
are not required to do so. If something other than a regular file is
specified and using it fails for any reason,
.IR c99
is required to issue a diagnostic message and exit with a non-zero exit
status. But for some file types, the problem may not be noticed for a
long time. For example, if a FIFO named
.BR a.out
exists in the current directory,
.IR c99
may attempt to open
.BR a.out
and will hang in the
\fIopen\fR()
call until another process opens the FIFO for reading. Then
.IR c99
may write most of the
.BR a.out
to the FIFO and fail when it tries to seek back close to the start of
the file to insert a timestamp (FIFOs are not seekable files). The
.IR c99
utility is also allowed to issue a diagnostic immediately if it
encounters an
.BR a.out
or
.BR *.o
file that is not a regular file. For portable use, applications should
ensure that any
.BR a.out ,
.BR \(mio
option-argument, or
.BR *.o
files corresponding to any
.BR *.c
files do not conflict with names already in use that are not regular
files or symbolic links that point to regular files.
.P
On many systems, multi-threaded applications run in a programming
environment that is distinct from that used by single-threaded
applications. This multi-threaded programming environment (in addition
to needing to specify
.BR "\(mil pthread"
at link time) may require additional flags to be set when headers are
processed at compile time (\c
.BR \(miD_REENTRANT
being common). This programming environment is orthogonal to the type
size programming environments discussed above and listed in
.IR "Table 4-4, Programming Environments: Type Sizes".
This version of the standard adds
.IR getconf
utility calls to provide the C compiler flags and linker/loader flags
needed to support multi-threaded applications. Note that on a system
where single-threaded applications are a special case of a multi-threaded
application, both of these
.IR getconf
calls may return NULL strings; on other implementations both of
these strings may be non-NULL strings.
.P
The C standardization committee invented trigraphs (e.g.,
.BR \(dq??!\(dq 
to represent
.BR '|' )
to address character portability problems in development environments
based on national variants of the 7-bit ISO/IEC\ 646:\|1991 standard character set. However,
these environments were already obsolete by the time the first ISO\ C standard was
published, and in practice trigraphs have not been used for their intended
purpose, and usually are intended to have their original meaning in K&amp;R C.
For example, in practice a C-language source string like
.BR \(dqWhat??!\(dq 
is usually intended to end in two
&lt;question-mark&gt;
characters and an
&lt;exclamation-mark&gt;,
not in
.BR '|' .
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "Section 1.1.1.4" ", " "File Read" ", " "Write" ", " "and Creation",
.IR "\fIar\fR\^",
.IR "\fIgetconf\fR\^",
.IR "\fImake\fR\^",
.IR "\fInm\fR\^",
.IR "\fIstrip\fR\^",
.IR "\fIumask\fR\^"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "Chapter 8" ", " "Environment Variables",
.IR "Section 12.2" ", " "Utility Syntax Guidelines",
.IR "Chapter 13" ", " "Headers"
.P
The System Interfaces volume of POSIX.1\(hy2008,
.IR "\fIexec\fR\^",
.IR "\fIsysconf\fR\^(\|)"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
.\" Copyright (c) 1989, 1990, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" Kim Letkeman.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)cal.1	8.1 (Berkeley) 6/6/93
.\"
.TH CAL 1 "June 2015" "util-linux" "User Commands"
.SH NAME
cal \- display a calendar
.SH SYNOPSIS
.B cal
[options]
.RI [[[ day ] " month" ] " year" ]
.br
.B cal
[options]
.RI &lt;timestamp|monthname&gt;
.SH DESCRIPTION
.B cal
displays a simple calendar.  If no arguments are specified, the current
month is displayed.
.sp
The \fImonth\fR may be specified as a number (1-12), as a month name or as an
abbreviated month name according to the current locales.
.SH OPTIONS
.TP
\fB\-1\fR, \fB\-\-one\fR
Display single month output.
(This is the default.)
.TP
\fB\-3\fR, \fB\-\-three\fR
Display three months spanning the date.
.TP
\fB\-n , \-\-months\fR \fInumber\fR
Display \fInumber\fR of months, starting from the month containing the date.
.TP
\fB\-S, \fB\-\-span\fR
Display months spanning the date.
.TP
\fB\-s\fR, \fB\-\-sunday\fR
Display Sunday as the first day of the week.
.TP
\fB\-m\fR, \fB\-\-monday\fR
Display Monday as the first day of the week.
.TP
\fB\-j\fR, \fB\-\-julian\fR
Display Julian dates (days one-based, numbered from January 1).
.TP
\fB\-y\fR, \fB\-\-year\fR
Display a calendar for the whole year.
.TP
\fB\-Y, \fB\-\-twelve\fR
Display a calendar for the next twelve months.
.TP
\fB\-w\fR, \fB\-\-week\fR[=\fInumber\fR]
Display week numbers in the calendar (US or ISO-8601).
.TP
\fB\-\-color\fR[=\fIwhen\fR]
Colorize the output.  The optional argument \fIwhen\fP
can be \fBauto\fR, \fBnever\fR or \fBalways\fR.  If the \fIwhen\fR argument is omitted,
it defaults to \fBauto\fR.  The colors can be disabled; for the current built-in default
see the \fB\-\-help\fR output.  See also the \fBCOLORS\fR section.
.TP
\fB\-V\fR, \fB\-\-version\fR
Display version information and exit.
.TP
\fB\-h\fR, \fB\-\-help\fR
Display help text and exit.
.SH PARAMETERS
.TP
\fBSingle digits-only parameter (e.g. 'cal 2020')\fR
Specifies the \fIyear\fR to be displayed; note the year must be fully specified:
.B "cal 89"
will not display a calendar for 1989.
.TP
\fBSingle string parameter (e.g. 'cal tomorrow' or 'cal August')\fR
Specifies \fItimestamp\fR or a \fImonth name\fR (or abbreviated name) according to the current
locales.
.sp
The special placeholders are accepted when parsing timestamp, "now" may be used
to refer to the current time, "today", "yesterday", "tomorrow" refer to of the
current day, the day before or the next day, respectively.
.sp
The relative date specifications are also accepted, in this case "+" is
evaluated to the current time plus the specified time span. Correspondingly, a
time span that is prefixed with "-" is evaluated to the current time minus the
specified time span, for example '+2days'. Instead of prefixing the time span
with "+" or "-", it may also be suffixed with a space and the word "left" or
"ago" (for example '1 week ago').
.TP
\fBTwo parameters (e.g. 'cal 11 2020')\fR
Denote the \fImonth\fR (1 - 12) and \fIyear\fR.
.TP
\fBThree parameters (e.g. 'cal 25 11 2020')\fR
Denote the \fIday\fR (1-31), \fImonth and \fIyear\fR, and the day will be
highlighted if the calendar is displayed on a terminal.  If no parameters are
specified, the current month's calendar is displayed.
.SH NOTES
A year starts on January 1.  The first day of the week is determined by the
locale.
.PP
The week numbering depends on the choice of the first day of the week.  If Sunday
(the default) is used for the first day of the week, then the customary North
American numbering will be used, i.e. the first Sunday of the year starts the
first week.  If Monday is selected, then the ISO-8601 standard week numbering
is used, where the first Thursday of the year is in week number 1.
.SH COLORS
Implicit coloring can be disabled as follows:
.RS

.br
.BI "touch /etc/terminal-colors.d/cal.disable"
.br

.RE
See
.BR terminal-colors.d (5)
for more details about colorization configuration.
.SH BUGS
.PP
The
.B cal
program uses the 3rd of September 1752 as the date of the Gregorian calendar
reformation -- that is when it happened in Great Britain and its colonies
(including what is now the USA).  Starting at that date, eleven days were eliminated
by this reformation, so the calendar for that month is rather unusual.
The actual historical dates at which the calendar reform happened in all the
different countries (locales) are ignored.
.PP
Alternative calendars, such as the Umm al-Qura, the Solar Hijri, the Ge'ez,
or the lunisolar Hindu, are not supported.
.SH HISTORY
A cal command appeared in Version 6 AT&amp;T UNIX.
.SH AVAILABILITY
The cal command is part of the util-linux package and is available from
ftp://ftp.kernel.org/pub/linux/utils/util-linux/.
.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.
.TH CAT "1" "March 2017" "GNU coreutils 8.27" "User Commands"
.SH NAME
cat \- concatenate files and print on the standard output
.SH SYNOPSIS
.B cat
[\fI\,OPTION\/\fR]... [\fI\,FILE\/\fR]...
.SH DESCRIPTION
.\" Add any additional description here
.PP
Concatenate FILE(s) to standard output.
.PP
With no FILE, or when FILE is \-, read standard input.
.TP
\fB\-A\fR, \fB\-\-show\-all\fR
equivalent to \fB\-vET\fR
.TP
\fB\-b\fR, \fB\-\-number\-nonblank\fR
number nonempty output lines, overrides \fB\-n\fR
.TP
\fB\-e\fR
equivalent to \fB\-vE\fR
.TP
\fB\-E\fR, \fB\-\-show\-ends\fR
display $ at end of each line
.TP
\fB\-n\fR, \fB\-\-number\fR
number all output lines
.TP
\fB\-s\fR, \fB\-\-squeeze\-blank\fR
suppress repeated empty output lines
.TP
\fB\-t\fR
equivalent to \fB\-vT\fR
.TP
\fB\-T\fR, \fB\-\-show\-tabs\fR
display TAB characters as ^I
.TP
\fB\-u\fR
(ignored)
.TP
\fB\-v\fR, \fB\-\-show\-nonprinting\fR
use ^ and M\- notation, except for LFD and TAB
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-\-version\fR
output version information and exit
.SH EXAMPLES
.TP
cat f \- g
Output f's contents, then standard input, then g's contents.
.TP
cat
Copy standard input to standard output.
.SH AUTHOR
Written by Torbjorn Granlund and Richard M. Stallman.
.SH "REPORTING BUGS"
GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt;
.br
Report cat translation bugs to &lt;http://translationproject.org/team/&gt;
.SH COPYRIGHT
Copyright \(co 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
\fBtac\fP(1)
.PP
.br
Full documentation at: &lt;http://www.gnu.org/software/coreutils/cat&gt;
.br
or available locally via: info \(aq(coreutils) cat invocation\(aq
'\" et
.TH CD "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
cd
\(em change the working directory
.SH SYNOPSIS
.LP
.nf
cd \fB[\fR\(miL|\(miP\fB] [\fIdirectory\fB]\fR
.P
cd \(mi
.fi
.SH DESCRIPTION
The
.IR cd
utility shall change the working directory of the current shell
execution environment (see
.IR "Section 2.12" ", " "Shell Execution Environment")
by executing the following steps in sequence. (In the following steps,
the symbol
.BR curpath
represents an intermediate value used to simplify the description of
the algorithm used by
.IR cd .
There is no requirement that
.BR curpath
be made visible to the application.)
.IP " 1." 4
If no
.IR directory
operand is given and the
.IR HOME
environment variable is empty or undefined, the default behavior is
implementation-defined and no further steps shall be taken.
.IP " 2." 4
If no
.IR directory
operand is given and the
.IR HOME
environment variable is set to a non-empty value, the
.IR cd
utility shall behave as if the directory named in the
.IR HOME
environment variable was specified as the
.IR directory
operand.
.IP " 3." 4
If the
.IR directory
operand begins with a
&lt;slash&gt;
character, set
.BR curpath
to the operand and proceed to step 7.
.IP " 4." 4
If the first component of the
.IR directory
operand is dot or dot-dot, proceed to step 6.
.IP " 5." 4
Starting with the first pathname in the
&lt;colon&gt;-separated
pathnames of
.IR CDPATH
(see the ENVIRONMENT VARIABLES section) if the pathname is non-null,
test if the concatenation of that pathname, a
&lt;slash&gt;
character if that pathname did not end with a
&lt;slash&gt;
character, and the
.IR directory
operand names a directory. If the pathname is null, test if the
concatenation of dot, a
&lt;slash&gt;
character, and the operand names a directory. In either case, if the
resulting string names an existing directory, set
.BR curpath
to that string and proceed to step 7. Otherwise, repeat this step with
the next pathname in
.IR CDPATH
until all pathnames have been tested.
.IP " 6." 4
Set
.BR curpath
to the
.IR directory
operand.
.IP " 7." 4
If the
.BR \(miP
option is in effect, proceed to step 10. If
.BR curpath
does not begin with a
&lt;slash&gt;
character, set
.BR curpath
to the string formed by the concatenation of the value of
.IR PWD ,
a
&lt;slash&gt;
character if the value of
.IR PWD
did not end with a
&lt;slash&gt;
character, and
.BR curpath .
.IP " 8." 4
The
.BR curpath
value shall then be converted to canonical form as follows, considering
each component from beginning to end, in sequence:
.RS 4 
.IP " a." 4
Dot components and any
&lt;slash&gt;
characters that separate them from the next component shall be deleted.
.IP " b." 4
For each dot-dot component, if there is a preceding component and it is
neither root nor dot-dot, then:
.RS 4 
.IP " i." 5
If the preceding component does not refer (in the context of pathname
resolution with symbolic links followed) to a directory, then the
.IR cd
utility shall display an appropriate error message and no further steps
shall be taken.
.IP ii. 5
The preceding component, all
&lt;slash&gt;
characters separating the preceding component from dot-dot, dot-dot,
and all
&lt;slash&gt;
characters separating dot-dot from the following component (if any)
shall be deleted.
.RE
.IP " c." 4
An implementation may further simplify
.BR curpath
by removing any trailing
&lt;slash&gt;
characters that are not also leading
&lt;slash&gt;
characters, replacing multiple non-leading consecutive
&lt;slash&gt;
characters with a single
&lt;slash&gt;,
and replacing three or more leading
&lt;slash&gt;
characters with a single
&lt;slash&gt;.
If, as a result of this canonicalization, the
.BR curpath
variable is null, no further steps shall be taken.
.RE
.IP " 9." 4
If
.BR curpath
is longer than
{PATH_MAX}
bytes (including the terminating null) and the
.IR directory
operand was not longer than
{PATH_MAX}
bytes (including the terminating null), then
.BR curpath
shall be converted from an absolute pathname to an equivalent relative
pathname if possible. This conversion shall always be considered
possible if the value of
.IR PWD ,
with a trailing
&lt;slash&gt;
added if it does not already have one, is an initial substring of
.BR curpath .
Whether or not it is considered possible under other circumstances is
unspecified. Implementations may also apply this conversion if
.BR curpath
is not longer than
{PATH_MAX}
bytes or the
.IR directory
operand was longer than
{PATH_MAX}
bytes.
.IP 10. 4
The
.IR cd
utility shall then perform actions equivalent to the
\fIchdir\fR()
function called with
.BR curpath
as the
.IR path
argument. If these actions fail for any reason, the
.IR cd
utility shall display an appropriate error message and the remainder of
this step shall not be executed. If the
.BR \(miP
option is not in effect, the
.IR PWD
environment variable shall be set to the value that
.BR curpath
had on entry to step 9 (i.e., before conversion to a relative
pathname). If the
.BR \(miP
option is in effect, the
.IR PWD
environment variable shall be set to the string that would be output by
.IR pwd
.BR \(miP .
If there is insufficient permission on the new directory, or on any
parent of that directory, to determine the current working directory,
the value of the
.IR PWD
environment variable is unspecified.
.P
If, during the execution of the above steps, the
.IR PWD
environment variable
is set, the
.IR OLDPWD
environment variable shall also be set to
the value of the old working directory (that is the current working
directory immediately prior to the call to
.IR cd ).
.SH OPTIONS
The
.IR cd
utility shall conform to the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 12.2" ", " "Utility Syntax Guidelines".
.P
The following options shall be supported by the implementation:
.IP "\fB\(miL\fP" 10
Handle the operand dot-dot logically; symbolic link components shall
not be resolved before dot-dot components are processed (see steps 8.
and 9. in the DESCRIPTION).
.IP "\fB\(miP\fP" 10
Handle the operand dot-dot physically; symbolic link components shall
be resolved before dot-dot components are processed (see step 7. in the
DESCRIPTION).
.P
If both
.BR \(miL
and
.BR \(miP
options are specified, the last of these options shall be used and all
others ignored. If neither
.BR \(miL
nor
.BR \(miP
is specified, the operand shall be handled dot-dot logically; see the
DESCRIPTION.
.SH OPERANDS
The following operands shall be supported:
.IP "\fIdirectory\fR" 10
An absolute or relative pathname of the directory that shall become
the new working directory. The interpretation of a relative pathname
by
.IR cd
depends on the
.BR \(miL
option and the
.IR CDPATH
and
.IR PWD
environment variables. If
.IR directory
is an empty string, the results are unspecified.
.IP "\(mi" 10
When a
&lt;hyphen&gt;
is used as the operand, this shall be equivalent to the command:
.RS 10 
.sp
.RS 4
.nf
\fB
cd "$OLDPWD" &amp;&amp; pwd
.fi \fR
.P
.RE
.P
which changes to the previous working directory and then writes its
name.
.RE
.SH STDIN
Not used.
.SH "INPUT FILES"
None.
.SH "ENVIRONMENT VARIABLES"
The following environment variables shall affect the execution of
.IR cd :
.IP "\fICDPATH\fP" 10
A
&lt;colon&gt;-separated
list of pathnames that refer to directories. The
.IR cd
utility shall use this list in its attempt to change the directory, as
described in the DESCRIPTION. An empty string in place of a directory
pathname represents the current directory. If
.IR CDPATH
is not set, it shall be treated as if it were an empty string.
.IP "\fIHOME\fP" 10
The name of the directory, used when no
.IR directory
operand is specified.
.IP "\fILANG\fP" 10
Provide a default value for the internationalization variables that are
unset or null. (See the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 8.2" ", " "Internationalization Variables"
for the precedence of internationalization variables used to determine
the values of locale categories.)
.IP "\fILC_ALL\fP" 10
If set to a non-empty string value, override the values of all the
other internationalization variables.
.IP "\fILC_CTYPE\fP" 10
Determine the locale for the interpretation of sequences of bytes of
text data as characters (for example, single-byte as opposed to
multi-byte characters in arguments).
.IP "\fILC_MESSAGES\fP" 10
.br
Determine the locale that should be used to affect the format and
contents of diagnostic messages written to standard error.
.IP "\fINLSPATH\fP" 10
Determine the location of message catalogs for the processing of
.IR LC_MESSAGES .
.IP "\fIOLDPWD\fP" 10
A pathname of the previous working directory, used by
.IR cd
.BR \(mi .
.IP "\fIPWD\fP" 10
This variable shall be set as specified in the DESCRIPTION. If an
application sets or unsets the value of
.IR PWD ,
the behavior of
.IR cd
is unspecified.
.SH "ASYNCHRONOUS EVENTS"
Default.
.SH STDOUT
If a non-empty directory name from
.IR CDPATH
is used, or if
.IR cd
.BR \(mi
is used, an absolute pathname of the new working directory shall be
written to the standard output as follows:
.sp
.RS 4
.nf
\fB
"%s\en", &lt;\fInew directory\fR&gt;
.fi \fR
.P
.RE
.P
Otherwise, there shall be no output.
.SH STDERR
The standard error shall be used only for diagnostic messages.
.SH "OUTPUT FILES"
None.
.SH "EXTENDED DESCRIPTION"
None.
.SH "EXIT STATUS"
The following exit values shall be returned:
.IP "\00" 6
The directory was successfully changed.
.IP &gt;0 6
An error occurred.
.SH "CONSEQUENCES OF ERRORS"
The working directory shall remain unchanged.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
Since
.IR cd
affects the current shell execution environment, it is always provided
as a shell regular built-in. If it is called in a subshell or separate
utility execution environment, such as one of the following:
.sp
.RS 4
.nf
\fB
(cd /tmp)
nohup cd
find . \(miexec cd {} \e;
.fi \fR
.P
.RE
.P
it does not affect the working directory of the caller's environment.
.P
The user must have execute (search) permission in
.IR directory
in order to change to it.
.SH EXAMPLES
The following template can be used to perform processing in the directory
specified by
.IR location
and end up in the current working directory in use before the first
.IR cd
command was issued:
.sp
.RS 4
.nf
\fB
cd \fIlocation\fP
if [ $? -ne 0 ]
then
print error message
exit 1
fi
\&amp;... do whatever is desired as long as the OLDPWD environment variable
is not modified
cd -
.fi \fR
.P
.RE
.SH RATIONALE
The use of the
.IR CDPATH
was introduced in the System V shell. Its use is analogous to the use
of the
.IR PATH
variable in the shell. The BSD C shell used a shell parameter
.IR cdpath
for this purpose.
.P
A common extension when
.IR HOME
is undefined is to get the login directory from the user database for
the invoking user. This does not occur on System V implementations.
.P
Some historical shells, such as the KornShell, took special actions
when the directory name contained a dot-dot component, selecting the
logical parent of the directory, rather than the actual parent
directory; that is, it moved up one level toward the
.BR '/' 
in the pathname, remembering what the user typed, rather than
performing the equivalent of:
.sp
.RS 4
.nf
\fB
chdir("..");
.fi \fR
.P
.RE
.P
In such a shell, the following commands would not necessarily produce
equivalent output for all directories:
.sp
.RS 4
.nf
\fB
cd .. &amp;&amp; ls      ls ..
.fi \fR
.P
.RE
.P
This behavior is now the default. It is not consistent with the
definition of dot-dot in most historical practice; that is, while this
behavior has been optionally available in the KornShell, other shells
have historically not supported this functionality. The logical
pathname is stored in the
.IR PWD
environment variable when the
.IR cd
utility completes and this value is used to construct the next
directory name if
.IR cd
is invoked with the
.BR \(miL
option.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "Section 2.12" ", " "Shell Execution Environment",
.IR "\fIpwd\fR\^"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "Chapter 8" ", " "Environment Variables",
.IR "Section 12.2" ", " "Utility Syntax Guidelines"
.P
The System Interfaces volume of POSIX.1\(hy2008,
.IR "\fIchdir\fR\^(\|)"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
'\" et
.TH CFLOW "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
cflow
\(em generate a C-language flowgraph (\fBDEVELOPMENT\fP)
.SH SYNOPSIS
.LP
.nf
cflow \fB[\fR\(mir\fB] [\fR\(mid \fInum\fB] [\fR\(miD \fIname\fB[\fR=\fIdef\fB]]\fR...\fB [\fR\(mii \fIincl\fB] [\fR\(miI \fIdir\fB]\fR...
\fB[\fR\(miU \fIdir\fB]\fR... \fIfile\fR...
.fi
.SH DESCRIPTION
The
.IR cflow
utility shall analyze a collection of object files or assembler,
C-language,
.IR lex ,
or
.IR yacc
source files, and attempt to build a graph, written to standard output,
charting the external references.
.SH OPTIONS
The
.IR cflow
utility shall conform to the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 12.2" ", " "Utility Syntax Guidelines",
except that the order of the
.BR \(miD ,
.BR \(miI ,
and
.BR \(miU
options (which are identical to their interpretation by
.IR c99 )
is significant.
.P
The following options shall be supported:
.IP "\fB\(mid\ \fInum\fR" 10
Indicate the depth at which the flowgraph is cut off. The application
shall ensure that the argument
.IR num
is a decimal integer. By default this is a very large number
(typically greater than 32\|000). Attempts to set the cut-off depth to
a non-positive integer shall be ignored.
.IP "\fB\(mii\ \fIincl\fR" 10
Increase the number of included symbols. The
.IR incl
option-argument is one of the following characters:
.RS 10 
.IP "\fIx\fP" 6
Include external and static data symbols. The default shall be to
include only functions in the flowgraph.
.IP "\fR_\fP" 6
(Underscore) Include names that begin with an
&lt;underscore&gt;.
The default shall be to exclude these functions (and data if
.BR "\(mii\ x"
is used).
.RE
.IP "\fB\(mir\fP" 10
Reverse the caller:callee relationship, producing an inverted listing
showing the callers of each function. The listing shall also be sorted
in lexicographical order by callee.
.SH OPERANDS
The following operand is supported:
.IP "\fIfile\fR" 10
The pathname of a file for which a graph is to be generated.
Filenames suffixed by
.BR .l
shall shall be taken to be
.IR lex
input,
.BR .y
as
.IR yacc
input,
.BR .c
as
.IR c99
input, and
.BR .i
as the output of
.IR c99
.BR \(miE .
Such files shall be processed as appropriate, determined by their
suffix.
.RS 10 
.P
Files suffixed by
.BR .s
(conventionally assembler source) may have more limited information
extracted from them.
.RE
.SH STDIN
Not used.
.SH "INPUT FILES"
The input files shall be object files or assembler, C-language,
.IR lex ,
or
.IR yacc
source files.
.SH "ENVIRONMENT VARIABLES"
The following environment variables shall affect the execution of
.IR cflow :
.IP "\fILANG\fP" 10
Provide a default value for the internationalization variables that are
unset or null. (See the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 8.2" ", " "Internationalization Variables"
for the precedence of internationalization variables used to determine
the values of locale categories.)
.IP "\fILC_ALL\fP" 10
If set to a non-empty string value, override the values of all the
other internationalization variables.
.IP "\fILC_COLLATE\fP" 10
.br
Determine the locale for the ordering of the output when the
.BR \(mir
option is used.
.IP "\fILC_CTYPE\fP" 10
Determine the locale for the interpretation of sequences of bytes of
text data as characters (for example, single-byte as opposed to
multi-byte characters in arguments and input files).
.IP "\fILC_MESSAGES\fP" 10
.br
Determine the locale that should be used to affect the format and
contents of diagnostic messages written to standard error.
.IP "\fINLSPATH\fP" 10
Determine the location of message catalogs for the processing of
.IR LC_MESSAGES .
.SH "ASYNCHRONOUS EVENTS"
Default.
.SH STDOUT
The flowgraph written to standard output shall be formatted as follows:
.sp
.RS 4
.nf
\fB
"%d %s:%s\en", &lt;\fIreference number\fR&gt;, &lt;\fIglobal\fR&gt;, &lt;\fIdefinition\fR&gt;
.fi \fR
.P
.RE
.P
Each line of output begins with a reference (that is, line) number,
followed by indentation of at least one column position per level.
This is followed by the name of the global, a
&lt;colon&gt;,
and its definition. Normally globals are only functions not defined as
an external or beginning with an
&lt;underscore&gt;;
see the OPTIONS section for the
.BR \(mii
inclusion option. For information extracted from C-language source, the
definition consists of an abstract type declaration (for example,
.BR "char *" )
and, delimited by angle brackets, the name of the source file and the
line number where the definition was found. Definitions extracted from
object files indicate the filename and location counter under which
the symbol appeared (for example,
.IR text ).
.P
Once a definition of a name has been written, subsequent references to
that name contain only the reference number of the line where the
definition can be found. For undefined references, only
.BR \(dq&lt;\|&gt;\(dq 
shall be written.
.SH STDERR
The standard error shall be used only for diagnostic messages.
.SH "OUTPUT FILES"
None.
.SH "EXTENDED DESCRIPTION"
None.
.SH "EXIT STATUS"
The following exit values shall be returned:
.IP "\00" 6
Successful completion.
.IP &gt;0 6
An error occurred.
.SH "CONSEQUENCES OF ERRORS"
Default.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
Files produced by
.IR lex
and
.IR yacc
cause the reordering of line number declarations, and this can confuse
.IR cflow .
To obtain proper results, the input of
.IR yacc
or
.IR lex
must be directed to
.IR cflow .
.SH EXAMPLES
Given the following in
.BR file.c :
.sp
.RS 4
.nf
\fB
int i;
int f();
int g();
int h();
int
main()
{
f();
g();
f();
}
int
f()
{
i = h();
}
.fi \fR
.P
.RE
.P
The command:
.sp
.RS 4
.nf
\fB
cflow \(mii x file.c
.fi \fR
.P
.RE
.P
produces the output:
.sp
.RS 4
.nf
\fB
1 main: int(), &lt;file.c 6&gt;
2    f: int(), &lt;file.c 13&gt;
3        h: &lt;&gt;
4        i: int, &lt;file.c 1&gt;
5    g: &lt;&gt;
.fi \fR
.P
.RE
.SH RATIONALE
None.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "\fIc99\fR\^",
.IR "\fIlex\fR\^",
.IR "\fIyacc\fR\^"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "Chapter 8" ", " "Environment Variables",
.IR "Section 12.2" ", " "Utility Syntax Guidelines"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.
.TH CHGRP "1" "March 2017" "GNU coreutils 8.27" "User Commands"
.SH NAME
chgrp \- change group ownership
.SH SYNOPSIS
.B chgrp
[\fI\,OPTION\/\fR]... \fI\,GROUP FILE\/\fR...
.br
.B chgrp
[\fI\,OPTION\/\fR]... \fI\,--reference=RFILE FILE\/\fR...
.SH DESCRIPTION
.\" Add any additional description here
.PP
Change the group of each FILE to GROUP.
With \fB\-\-reference\fR, change the group of each FILE to that of RFILE.
.TP
\fB\-c\fR, \fB\-\-changes\fR
like verbose but report only when a change is made
.TP
\fB\-f\fR, \fB\-\-silent\fR, \fB\-\-quiet\fR
suppress most error messages
.TP
\fB\-v\fR, \fB\-\-verbose\fR
output a diagnostic for every file processed
.TP
\fB\-\-dereference\fR
affect the referent of each symbolic link (this is
the default), rather than the symbolic link itself
.TP
\fB\-h\fR, \fB\-\-no\-dereference\fR
affect symbolic links instead of any referenced file
(useful only on systems that can change the
ownership of a symlink)
.TP
\fB\-\-no\-preserve\-root\fR
do not treat '/' specially (the default)
.TP
\fB\-\-preserve\-root\fR
fail to operate recursively on '/'
.TP
\fB\-\-reference\fR=\fI\,RFILE\/\fR
use RFILE's group rather than specifying a
GROUP value
.TP
\fB\-R\fR, \fB\-\-recursive\fR
operate on files and directories recursively
.PP
The following options modify how a hierarchy is traversed when the \fB\-R\fR
option is also specified.  If more than one is specified, only the final
one takes effect.
.TP
\fB\-H\fR
if a command line argument is a symbolic link
to a directory, traverse it
.TP
\fB\-L\fR
traverse every symbolic link to a directory
encountered
.TP
\fB\-P\fR
do not traverse any symbolic links (default)
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-\-version\fR
output version information and exit
.SH EXAMPLES
.TP
chgrp staff /u
Change the group of /u to "staff".
.TP
chgrp \-hR staff /u
Change the group of /u and subfiles to "staff".
.SH AUTHOR
Written by David MacKenzie and Jim Meyering.
.SH "REPORTING BUGS"
GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt;
.br
Report chgrp translation bugs to &lt;http://translationproject.org/team/&gt;
.SH COPYRIGHT
Copyright \(co 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
chown(1), chown(2)
.PP
.br
Full documentation at: &lt;http://www.gnu.org/software/coreutils/chgrp&gt;
.br
or available locally via: info \(aq(coreutils) chgrp invocation\(aq
.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.
.TH CHMOD "1" "March 2017" "GNU coreutils 8.27" "User Commands"
.SH NAME
chmod \- change file mode bits
.SH SYNOPSIS
.B chmod
[\fI\,OPTION\/\fR]... \fI\,MODE\/\fR[\fI\,,MODE\/\fR]... \fI\,FILE\/\fR...
.br
.B chmod
[\fI\,OPTION\/\fR]... \fI\,OCTAL-MODE FILE\/\fR...
.br
.B chmod
[\fI\,OPTION\/\fR]... \fI\,--reference=RFILE FILE\/\fR...
.SH DESCRIPTION
This manual page
documents the GNU version of
.BR chmod .
.B chmod
changes the file mode bits of each given file according to
.IR mode ,
which can be either a symbolic representation of changes to make, or
an octal number representing the bit pattern for the new mode bits.
.PP
The format of a symbolic mode is [\c
\fBugoa\fP.\|.\|.][[\fB-+=\fP][\fIperms\fP.\|.\|.].\|.\|.],
where
.I "perms"
is either zero or more letters from the set
\fBrwxXst\fP, or a single letter from the set \fBugo\fP.
Multiple symbolic
modes can be given, separated by commas.
.PP
A combination of the letters \fBugoa\fP controls which users' access
to the file will be changed: the user who owns it (\fBu\fP), other
users in the file's group (\fBg\fP), other users not in the file's
group (\fBo\fP), or all users (\fBa\fP).  If none of these are given,
the effect is as if (\fBa\fP) were
given, but bits that are set in the umask are not affected.
.PP
The operator \fB+\fP causes the selected file mode bits to be added to
the existing file mode bits of each file; \fB-\fP causes them to be
removed; and \fB=\fP causes them to be added and causes unmentioned
bits to be removed except that a directory's unmentioned set user and
group ID bits are not affected.
.PP
The letters \fBrwxXst\fP select file mode bits for the affected users:
read (\fBr\fP), write (\fBw\fP), execute (or search for directories)
(\fBx\fP), execute/search only if the file is a directory or already
has execute permission for some user (\fBX\fP), set user or group ID
on execution (\fBs\fP), restricted deletion flag or sticky bit
(\fBt\fP).  Instead of one or more of these letters, you can specify
exactly one of the letters \fBugo\fP: the permissions granted to the
user who owns the file (\fBu\fP), the permissions granted to other
users who are members of the file's group (\fBg\fP),
and the permissions granted to users that are in neither of the two preceding
categories (\fBo\fP).
.PP
A numeric mode is from one to four octal digits (0\-7), derived by
adding up the bits with values 4, 2, and 1.  Omitted digits are
assumed to be leading zeros.
The first digit selects the set user ID (4) and set group ID (2) and
restricted deletion or sticky (1) attributes.  The second digit
selects permissions for the user who owns the file: read (4), write (2),
and execute (1); the third selects permissions for other users in the
file's group, with the same values; and the fourth for other users not
in the file's group, with the same values.
.PP
.B chmod
never changes the permissions of symbolic links; the
.B chmod
system call cannot change their permissions.  This is not a problem
since the permissions of symbolic links are never used.
However, for each symbolic link listed on the command line,
.B chmod
changes the permissions of the pointed-to file.
In contrast,
.B chmod
ignores symbolic links encountered during recursive directory
traversals.
.SH "SETUID AND SETGID BITS"
.B chmod
clears the set-group-ID bit of a
regular file if the file's group ID does not match the user's
effective group ID or one of the user's supplementary group IDs,
unless the user has appropriate privileges.  Additional restrictions
may cause the set-user-ID and set-group-ID bits of
.I MODE
or
.I RFILE
to be ignored.  This behavior depends on the policy and
functionality of the underlying
.B chmod
system call.  When in
doubt, check the underlying system behavior.
.PP
.B chmod
preserves a directory's set-user-ID and set-group-ID bits unless you
explicitly specify otherwise.  You can set or clear the bits with
symbolic modes like
.B u+s
and
.BR g\-s ,
and you can set (but not clear) the bits with a numeric mode.
.SH "RESTRICTED DELETION FLAG OR STICKY BIT"
The restricted deletion flag or sticky bit is a single bit, whose
interpretation depends on the file type.  For directories, it prevents
unprivileged users from removing or renaming a file in the directory
unless they own the file or the directory; this is called the
.I "restricted deletion flag"
for the directory, and is commonly found on world-writable directories
like \fB/tmp\fP.  For regular files on some older systems, the bit
saves the program's text image on the swap device so it will load more
quickly when run; this is called the
.IR "sticky bit" .
.SH OPTIONS
.PP
Change the mode of each FILE to MODE.
With \fB\-\-reference\fR, change the mode of each FILE to that of RFILE.
.TP
\fB\-c\fR, \fB\-\-changes\fR
like verbose but report only when a change is made
.TP
\fB\-f\fR, \fB\-\-silent\fR, \fB\-\-quiet\fR
suppress most error messages
.TP
\fB\-v\fR, \fB\-\-verbose\fR
output a diagnostic for every file processed
.TP
\fB\-\-no\-preserve\-root\fR
do not treat '/' specially (the default)
.TP
\fB\-\-preserve\-root\fR
fail to operate recursively on '/'
.TP
\fB\-\-reference\fR=\fI\,RFILE\/\fR
use RFILE's mode instead of MODE values
.TP
\fB\-R\fR, \fB\-\-recursive\fR
change files and directories recursively
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-\-version\fR
output version information and exit
.PP
Each MODE is of the form '[ugoa]*([\-+=]([rwxXst]*|[ugo]))+|[\-+=][0\-7]+'.
.SH AUTHOR
Written by David MacKenzie and Jim Meyering.
.SH "REPORTING BUGS"
GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt;
.br
Report chmod translation bugs to &lt;http://translationproject.org/team/&gt;
.SH COPYRIGHT
Copyright \(co 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
chmod(2)
.PP
.br
Full documentation at: &lt;http://www.gnu.org/software/coreutils/chmod&gt;
.br
or available locally via: info \(aq(coreutils) chmod invocation\(aq
.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.
.TH CHOWN "1" "March 2017" "GNU coreutils 8.27" "User Commands"
.SH NAME
chown \- change file owner and group
.SH SYNOPSIS
.B chown
[\fI\,OPTION\/\fR]... [\fI\,OWNER\/\fR][\fI\,:\/\fR[\fI\,GROUP\/\fR]] \fI\,FILE\/\fR...
.br
.B chown
[\fI\,OPTION\/\fR]... \fI\,--reference=RFILE FILE\/\fR...
.SH DESCRIPTION
This manual page
documents the GNU version of
.BR chown .
.B chown
changes the user and/or group ownership of each given file.  If
only an owner (a user name or numeric user ID) is given, that user is made the
owner of each given file, and the files' group is not changed.  If the
owner is followed by a colon and a group name (or numeric group ID),
with no spaces between them, the group ownership of the files is
changed as well.  If a colon but no group name follows the user name,
that user is made the owner of the files and the group of the files is
changed to that user's login group.  If the colon and group are given,
but the owner is omitted, only the group of the files is changed;
in this case,
.B chown
performs the same function as
.BR chgrp .
If only a colon is given, or if the entire operand is empty, neither the
owner nor the group is changed.
.SH OPTIONS
.PP
Change the owner and/or group of each FILE to OWNER and/or GROUP.
With \fB\-\-reference\fR, change the owner and group of each FILE to those of RFILE.
.TP
\fB\-c\fR, \fB\-\-changes\fR
like verbose but report only when a change is made
.TP
\fB\-f\fR, \fB\-\-silent\fR, \fB\-\-quiet\fR
suppress most error messages
.TP
\fB\-v\fR, \fB\-\-verbose\fR
output a diagnostic for every file processed
.TP
\fB\-\-dereference\fR
affect the referent of each symbolic link (this is
the default), rather than the symbolic link itself
.TP
\fB\-h\fR, \fB\-\-no\-dereference\fR
affect symbolic links instead of any referenced file
(useful only on systems that can change the
ownership of a symlink)
.TP
\fB\-\-from\fR=\fI\,CURRENT_OWNER\/\fR:CURRENT_GROUP
change the owner and/or group of each file only if
its current owner and/or group match those specified
here.  Either may be omitted, in which case a match
is not required for the omitted attribute
.TP
\fB\-\-no\-preserve\-root\fR
do not treat '/' specially (the default)
.TP
\fB\-\-preserve\-root\fR
fail to operate recursively on '/'
.TP
\fB\-\-reference\fR=\fI\,RFILE\/\fR
use RFILE's owner and group rather than
specifying OWNER:GROUP values
.TP
\fB\-R\fR, \fB\-\-recursive\fR
operate on files and directories recursively
.PP
The following options modify how a hierarchy is traversed when the \fB\-R\fR
option is also specified.  If more than one is specified, only the final
one takes effect.
.TP
\fB\-H\fR
if a command line argument is a symbolic link
to a directory, traverse it
.TP
\fB\-L\fR
traverse every symbolic link to a directory
encountered
.TP
\fB\-P\fR
do not traverse any symbolic links (default)
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-\-version\fR
output version information and exit
.PP
Owner is unchanged if missing.  Group is unchanged if missing, but changed
to login group if implied by a ':' following a symbolic OWNER.
OWNER and GROUP may be numeric as well as symbolic.
.SH EXAMPLES
.TP
chown root /u
Change the owner of /u to "root".
.TP
chown root:staff /u
Likewise, but also change its group to "staff".
.TP
chown \-hR root /u
Change the owner of /u and subfiles to "root".
.SH AUTHOR
Written by David MacKenzie and Jim Meyering.
.SH "REPORTING BUGS"
GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt;
.br
Report chown translation bugs to &lt;http://translationproject.org/team/&gt;
.SH COPYRIGHT
Copyright \(co 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
chown(2)
.PP
.br
Full documentation at: &lt;http://www.gnu.org/software/coreutils/chown&gt;
.br
or available locally via: info \(aq(coreutils) chown invocation\(aq
.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.
.TH CKSUM "1" "March 2017" "GNU coreutils 8.27" "User Commands"
.SH NAME
cksum \- checksum and count the bytes in a file
.SH SYNOPSIS
.B cksum
[\fI\,FILE\/\fR]...
.br
.B cksum
[\fI\,OPTION\/\fR]
.SH DESCRIPTION
.\" Add any additional description here
.PP
Print CRC checksum and byte counts of each FILE.
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-\-version\fR
output version information and exit
.SH AUTHOR
Written by Q. Frank Xia.
.SH "REPORTING BUGS"
GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt;
.br
Report cksum translation bugs to &lt;http://translationproject.org/team/&gt;
.SH COPYRIGHT
Copyright \(co 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
Full documentation at: &lt;http://www.gnu.org/software/coreutils/cksum&gt;
.br
or available locally via: info \(aq(coreutils) cksum invocation\(aq
.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.40.4.
.TH CMP "1" "August 2016" "diffutils 3.5" "User Commands"
.SH NAME
cmp \- compare two files byte by byte
.SH SYNOPSIS
.B cmp
[\fIOPTION\fR]... \fIFILE1 \fR[\fIFILE2 \fR[\fISKIP1 \fR[\fISKIP2\fR]]]
.SH DESCRIPTION
Compare two files byte by byte.
.PP
The optional SKIP1 and SKIP2 specify the number of bytes to skip
at the beginning of each file (zero by default).
.PP
Mandatory arguments to long options are mandatory for short options too.
.TP
\fB\-b\fR, \fB\-\-print\-bytes\fR
print differing bytes
.TP
\fB\-i\fR, \fB\-\-ignore\-initial\fR=\fISKIP\fR
skip first SKIP bytes of both inputs
.TP
\fB\-i\fR, \fB\-\-ignore\-initial\fR=\fISKIP1\fR:SKIP2
skip first SKIP1 bytes of FILE1 and
first SKIP2 bytes of FILE2
.TP
\fB\-l\fR, \fB\-\-verbose\fR
output byte numbers and differing byte values
.TP
\fB\-n\fR, \fB\-\-bytes\fR=\fILIMIT\fR
compare at most LIMIT bytes
.TP
\fB\-s\fR, \fB\-\-quiet\fR, \fB\-\-silent\fR
suppress all normal output
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-v\fR, \fB\-\-version\fR
output version information and exit
.PP
SKIP values may be followed by the following multiplicative suffixes:
kB 1000, K 1024, MB 1,000,000, M 1,048,576,
GB 1,000,000,000, G 1,073,741,824, and so on for T, P, E, Z, Y.
.PP
If a FILE is '\-' or missing, read standard input.
Exit status is 0 if inputs are the same, 1 if different, 2 if trouble.
.SH AUTHOR
Written by Torbjorn Granlund and David MacKenzie.
.SH "REPORTING BUGS"
Report bugs to: bug\-diffutils@gnu.org
.br
GNU diffutils home page: &lt;http://www.gnu.org/software/diffutils/&gt;
.br
General help using GNU software: &lt;http://www.gnu.org/gethelp/&gt;
.SH COPYRIGHT
Copyright \(co 2016 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
diff(1), diff3(1), sdiff(1)
.PP
The full documentation for
.B cmp
is maintained as a Texinfo manual.  If the
.B info
and
.B cmp
programs are properly installed at your site, the command
.IP
.B info cmp
.PP
should give you access to the complete manual.
'\" et
.TH COLON "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
colon
\(em null utility
.SH SYNOPSIS
.LP
.nf
: \fB[\fIargument\fR...\fB]\fR
.fi
.SH DESCRIPTION
This utility shall only expand command
.IR argument s.
It is used when a command is needed, as in the
.BR then
condition of an
.BR if
command, but nothing is to be done by the command.
.SH OPTIONS
None.
.SH OPERANDS
See the DESCRIPTION.
.SH STDIN
Not used.
.SH "INPUT FILES"
None.
.SH "ENVIRONMENT VARIABLES"
None.
.SH "ASYNCHRONOUS EVENTS"
Default.
.SH STDOUT
Not used.
.SH STDERR
The standard error shall be used only for diagnostic messages.
.SH "OUTPUT FILES"
None.
.SH "EXTENDED DESCRIPTION"
None.
.SH "EXIT STATUS"
Zero.
.SH "CONSEQUENCES OF ERRORS"
Default.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
None.
.SH EXAMPLES
.LP
.nf
: ${X=abc}
if     false
then   :
else   echo $X
fi
\fBabc\fR
.fi
.P
As with any of the special built-ins, the null utility can also have
variable assignments and redirections associated with it, such as:
.sp
.RS 4
.nf
\fB
x=y : &gt; z
.fi \fR
.P
.RE
.P
which sets variable
.IR x
to the value
.IR y
(so that it persists after the null utility completes) and creates or
truncates file
.BR z .
.SH "RATIONALE"
None.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "Section 2.14" ", " "Special Built-In Utilities"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.
.TH COMM "1" "March 2017" "GNU coreutils 8.27" "User Commands"
.SH NAME
comm \- compare two sorted files line by line
.SH SYNOPSIS
.B comm
[\fI\,OPTION\/\fR]... \fI\,FILE1 FILE2\/\fR
.SH DESCRIPTION
.\" Add any additional description here
.PP
Compare sorted files FILE1 and FILE2 line by line.
.PP
When FILE1 or FILE2 (not both) is \-, read standard input.
.PP
With no options, produce three\-column output.  Column one contains
lines unique to FILE1, column two contains lines unique to FILE2,
and column three contains lines common to both files.
.TP
\fB\-1\fR
suppress column 1 (lines unique to FILE1)
.TP
\fB\-2\fR
suppress column 2 (lines unique to FILE2)
.TP
\fB\-3\fR
suppress column 3 (lines that appear in both files)
.TP
\fB\-\-check\-order\fR
check that the input is correctly sorted, even
if all input lines are pairable
.TP
\fB\-\-nocheck\-order\fR
do not check that the input is correctly sorted
.TP
\fB\-\-output\-delimiter\fR=\fI\,STR\/\fR
separate columns with STR
.TP
\fB\-\-total\fR
output a summary
.TP
\fB\-z\fR, \fB\-\-zero\-terminated\fR
line delimiter is NUL, not newline
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-\-version\fR
output version information and exit
.PP
Note, comparisons honor the rules specified by 'LC_COLLATE'.
.SH EXAMPLES
.TP
comm \-12 file1 file2
Print only lines present in both file1 and file2.
.TP
comm \-3 file1 file2
Print lines in file1 not in file2, and vice versa.
.SH AUTHOR
Written by Richard M. Stallman and David MacKenzie.
.SH "REPORTING BUGS"
GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt;
.br
Report comm translation bugs to &lt;http://translationproject.org/team/&gt;
.SH COPYRIGHT
Copyright \(co 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
join(1), uniq(1)
.PP
.br
Full documentation at: &lt;http://www.gnu.org/software/coreutils/comm&gt;
.br
or available locally via: info \(aq(coreutils) comm invocation\(aq
'\" et
.TH COMMAND "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
command
\(em execute a simple command
.SH SYNOPSIS
.LP
.nf
command \fB[\fR\(mip\fB] \fIcommand_name \fB[\fIargument\fR...\fB]\fR
.P
command \fB[\fR\(mip\fB][\fR\(miv|\(miV\fB] \fIcommand_name\fR
.fi
.SH DESCRIPTION
The
.IR command
utility shall cause the shell to treat the arguments as a simple
command, suppressing the shell function lookup that is described in
.IR "Section 2.9.1.1" ", " "Command Search and Execution",
item 1b.
.P
If the
.IR command_name
is the same as the name of one of the special built-in utilities, the
special properties in the enumerated list at the beginning of
.IR "Section 2.14" ", " "Special Built-In Utilities"
shall not occur. In every other respect, if
.IR command_name
is not the name of a function, the effect of
.IR command
(with no options) shall be the same as omitting
.IR command .
.P
When the
.BR \(miv
or
.BR \(miV
option is used, the
.IR command
utility shall provide information concerning how a command name
is interpreted by the shell.
.SH OPTIONS
The
.IR command
utility shall conform to the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 12.2" ", " "Utility Syntax Guidelines".
.P
The following options shall be supported:
.IP "\fB\(mip\fP" 10
Perform the command search using a default value for
.IR PATH
that is guaranteed to find all of the standard utilities.
.IP "\fB\(miv\fP" 10
Write a string to standard output that indicates the pathname or command
that will be used by the shell, in the current shell execution environment
(see
.IR "Section 2.12" ", " "Shell Execution Environment"),
to invoke
.IR command_name ,
but do not invoke
.IR command_name .
.RS 10 
.IP " *" 4
Utilities, regular built-in utilities,
.IR command_name s
including a
&lt;slash&gt;
character, and any implementation-defined functions that are found
using the
.IR PATH
variable (as described in
.IR "Section 2.9.1.1" ", " "Command Search and Execution"),
shall be written as absolute pathnames.
.IP " *" 4
Shell functions, special built-in utilities, regular built-in utilities
not associated with a
.IR PATH
search, and shell reserved words shall be written as just their names.
.IP " *" 4
An alias shall be written as a command line that represents its alias
definition.
.IP " *" 4
Otherwise, no output shall be written and the exit status shall reflect
that the name was not found.
.RE
.IP "\fB\(miV\fP" 10
Write a string to standard output that indicates how the name given in the
.IR command_name
operand will be interpreted by the shell, in the current shell
execution environment (see
.IR "Section 2.12" ", " "Shell Execution Environment"),
but do not invoke
.IR command_name .
Although the format of this string is unspecified, it shall indicate in
which of the following categories
.IR command_name
falls and shall include the information stated:
.RS 10 
.IP " *" 4
Utilities, regular built-in utilities, and any implementation-defined
functions that are found using the
.IR PATH
variable (as described in
.IR "Section 2.9.1.1" ", " "Command Search and Execution"),
shall be identified as such and include the absolute pathname in the
string.
.IP " *" 4
Other shell functions shall be identified as functions.
.IP " *" 4
Aliases shall be identified as aliases and their definitions
included in the string.
.IP " *" 4
Special built-in utilities shall be identified as special built-in
utilities.
.IP " *" 4
Regular built-in utilities not associated with a
.IR PATH
search shall be identified as regular built-in utilities. (The term
``regular'' need not be used.)
.IP " *" 4
Shell reserved words shall be identified as reserved words.
.RE
.SH OPERANDS
The following operands shall be supported:
.IP "\fIargument\fR" 10
One of the strings treated as an argument to
.IR command_name .
.IP "\fIcommand_name\fR" 10
.br
The name of a utility or a special built-in utility.
.SH STDIN
Not used.
.SH "INPUT FILES"
None.
.SH "ENVIRONMENT VARIABLES"
The following environment variables shall affect the execution of
.IR command :
.IP "\fILANG\fP" 10
Provide a default value for the internationalization variables that are
unset or null. (See the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 8.2" ", " "Internationalization Variables"
for the precedence of internationalization variables used to determine
the values of locale categories.)
.IP "\fILC_ALL\fP" 10
If set to a non-empty string value, override the values of all the
other internationalization variables.
.IP "\fILC_CTYPE\fP" 10
Determine the locale for the interpretation of sequences of bytes of
text data as characters (for example, single-byte as opposed to
multi-byte characters in arguments).
.IP "\fILC_MESSAGES\fP" 10
.br
Determine the locale that should be used to affect the format and
contents of diagnostic messages written to standard error and
informative messages written to standard output.
.IP "\fINLSPATH\fP" 10
Determine the location of message catalogs for the processing of
.IR LC_MESSAGES .
.IP "\fIPATH\fP" 10
Determine the search path used during the command search described in
.IR "Section 2.9.1.1" ", " "Command Search and Execution",
except as described under the
.BR \(mip
option.
.SH "ASYNCHRONOUS EVENTS"
Default.
.SH STDOUT
When the
.BR \(miv
option is specified, standard output shall be formatted as:
.sp
.RS 4
.nf
\fB
"%s\en", &lt;\fIpathname or command\fR&gt;
.fi \fR
.P
.RE
.P
When the
.BR \(miV
option is specified, standard output shall be formatted as:
.sp
.RS 4
.nf
\fB
"%s\en", &lt;\fIunspecified\fR&gt;
.fi \fR
.P
.RE
.SH STDERR
The standard error shall be used only for diagnostic messages.
.SH "OUTPUT FILES"
None.
.SH "EXTENDED DESCRIPTION"
None.
.SH "EXIT STATUS"
When the
.BR \(miv
or
.BR \(miV
options are specified, the following exit values shall be returned:
.IP "\00" 6
Successful completion.
.IP &gt;0 6
The
.IR command_name
could not be found or an error occurred.
.P
Otherwise, the following exit values shall be returned:
.IP 126 6
The utility specified by
.IR command_name
was found but could not be invoked.
.IP 127 6
An error occurred in the
.IR command
utility or the utility specified by
.IR command_name
could not be found.
.P
Otherwise, the exit status of
.IR command
shall be that of the simple command specified by the arguments to
.IR command .
.SH "CONSEQUENCES OF ERRORS"
Default.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
The order for command search allows functions to override regular
built-ins and path searches. This utility is necessary to allow
functions that have the same name as a utility to call the utility
(instead of a recursive call to the function).
.P
The system default path is available using
.IR getconf ;
however, since
.IR getconf
may need to have the
.IR PATH
set up before it can be called itself, the following can be used:
.sp
.RS 4
.nf
\fB
command \(mip getconf PATH
.fi \fR
.P
.RE
.P
There are some advantages to suppressing the special characteristics of
special built-ins on occasion. For example:
.sp
.RS 4
.nf
\fB
command exec &gt; \fIunwritable-file\fR
.fi \fR
.P
.RE
.P
does not cause a non-interactive script to abort, so that the output
status can be checked by the script.
.P
The
.IR command ,
.IR env ,
.IR nohup ,
.IR time ,
and
.IR xargs
utilities have been specified to use exit code 127 if an error occurs
so that applications can distinguish ``failure to find a utility'' from
``invoked utility exited with an error indication''. The value 127 was
chosen because it is not commonly used for other meanings; most
utilities use small values for ``normal error conditions'' and the
values above 128 can be confused with termination due to receipt of a
signal. The value 126 was chosen in a similar manner to indicate that
the utility could be found, but not invoked. Some scripts produce
meaningful error messages differentiating the 126 and 127 cases. The
distinction between exit codes 126 and 127 is based on KornShell
practice that uses 127 when all attempts to
.IR exec
the utility fail with
.BR [ENOENT] ,
and uses 126 when any attempt to
.IR exec
the utility fails for any other reason.
.P
Since the
.BR \(miv
and
.BR \(miV
options of
.IR command
produce output in relation to the current shell execution environment,
.IR command
is generally provided as a shell regular built-in. If it is called in a
subshell or separate utility execution environment, such as one of the
following:
.sp
.RS 4
.nf
\fB
(PATH=foo command \(miv)
nohup command \(miv
.fi \fR
.P
.RE
.P
it does not necessarily produce correct results. For example, when
called with
.IR nohup
or an
.IR exec
function, in a separate utility execution environment, most
implementations are not able to identify aliases, functions, or special
built-ins.
.P
Two types of regular built-ins could be encountered on a system and
these are described separately by
.IR command .
The description of command search in
.IR "Section 2.9.1.1" ", " "Command Search and Execution"
allows for a standard utility to be implemented as a regular built-in
as long as it is found in the appropriate place in a
.IR PATH
search. So, for example,
.IR command
.BR \(miv
.IR true
might yield
.BR /bin/true
or some similar pathname. Other implementation-defined utilities that
are not defined by this volume of POSIX.1\(hy2008 might exist only as built-ins and have no
pathname associated with them. These produce output identified as
(regular) built-ins. Applications encountering these are not able to
count on
.IR exec ing
them, using them with
.IR nohup ,
overriding them with a different
.IR PATH ,
and so on.
.SH EXAMPLES
.IP " 1." 4
Make a version of
.IR cd
that always prints out the new working directory exactly once:
.RS 4 
.sp
.RS 4
.nf
\fB
cd() {
command cd "$@" &gt;/dev/null
pwd
}
.fi \fR
.P
.RE
.RE
.IP " 2." 4
Start off a ``secure shell script'' in which the script avoids
being spoofed by its parent:
.RS 4 
.sp
.RS 4
.nf
\fB
IFS='
\&amp;'
#    The preceding value should be &lt;space&gt;&lt;tab&gt;&lt;newline&gt;.
#    Set IFS to its default value.
.P
\eunalias \(mia
#    Unset all possible aliases.
#    Note that unalias is escaped to prevent an alias
#    being used for unalias.
.P
unset \(mif command
#    Ensure command is not a user function.
.P
PATH="$(command \(mip getconf PATH):$PATH"
#    Put on a reliable PATH prefix.
.P
#    ...
.fi \fR
.P
.RE
.P
At this point, given correct permissions on the directories called by
.IR PATH ,
the script has the ability to ensure that any utility it calls is the
intended one. It is being very cautious because it assumes that
implementation extensions may be present that would allow user
functions to exist when it is invoked; this capability is not specified
by this volume of POSIX.1\(hy2008, but it is not prohibited as an extension. For example, the
.IR ENV
variable precedes the invocation of the script with a user start-up
script. Such a script could define functions to spoof the application.
.RE
.SH RATIONALE
Since
.IR command
is a regular built-in utility it is always found prior to the
.IR PATH
search.
.P
There is nothing in the description of
.IR command
that implies the command line is parsed any differently from that of
any other simple command. For example:
.sp
.RS 4
.nf
\fB
command a | b ; c
.fi \fR
.P
.RE
.P
is not parsed in any special way that causes
.BR '|' 
or
.BR ';' 
to be treated other than a pipe operator or
&lt;semicolon&gt;
or that prevents function lookup on
.BR b
or
.BR c .
.P
The
.IR command
utility is somewhat similar to the Eighth Edition shell
.IR builtin
command, but since
.IR command
also goes to the file system to search for utilities, the name
.IR builtin
would not be intuitive.
.P
The
.IR command
utility is most likely to be provided as a regular built-in. It is not
listed as a special built-in
for the following reasons:
.IP " *" 4
The removal of exportable functions made the special precedence of a
special built-in unnecessary.
.IP " *" 4
A special built-in has special properties (see
.IR "Section 2.14" ", " "Special Built-In Utilities")
that were inappropriate for invoking other utilities. For example, two
commands such as:
.RS 4 
.sp
.RS 4
.nf
\fB
date &gt; \fIunwritable-file\fR
.P
command date &gt; \fIunwritable-file\fR
.fi \fR
.P
.RE
.P
would have entirely different results; in a non-interactive script, the
former would continue to execute the next command, the latter would
abort. Introducing this semantic difference along with suppressing
functions was seen to be non-intuitive.
.RE
.P
The
.BR \(mip
option is present because it is useful to be able to ensure a safe path
search that finds all the standard utilities. This search might not be
identical to the one that occurs through one of the
.IR exec
functions (as defined in the System Interfaces volume of POSIX.1\(hy2008) when
.IR PATH
is unset. At the very least, this feature is required to allow the
script to access the correct version of
.IR getconf
so that the value of the default path can be accurately retrieved.
.P
The
.IR command
.BR \(miv
and
.BR \(miV
options were added to satisfy requirements from users that are
currently accomplished by three different historical utilities:
.IR type
in the System V shell,
.IR whence
in the KornShell, and
.IR which
in the C shell. Since there is no historical agreement on how and what
to accomplish here, the POSIX
.IR command
utility was enhanced and the historical utilities were left unmodified.
The C shell
.IR which
merely conducts a path search. The KornShell
.IR whence
is more elaborate\(emin addition to the categories required by POSIX,
it also reports on tracked aliases, exported aliases, and undefined
functions.
.P
The output format of
.BR \(miV
was left mostly unspecified because human users are its only audience.
Applications should not be written to care about this information; they
can use the output of
.BR \(miv
to differentiate between various types of commands, but the additional
information that may be emitted by the more verbose
.BR \(miV
is not needed and should not be arbitrarily constrained in its
verbosity or localization for application parsing reasons.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "Section 2.9.1.1" ", " "Command Search and Execution",
.IR "Section 2.12" ", " "Shell Execution Environment",
.IR "Section 2.14" ", " "Special Built-In Utilities",
.IR "\fIsh\fR\^",
.IR "\fItype\fR\^"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "Chapter 8" ", " "Environment Variables",
.IR "Section 12.2" ", " "Utility Syntax Guidelines"
.P
The System Interfaces volume of POSIX.1\(hy2008,
.IR "\fIexec\fR\^"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
'\" et
.TH COMPRESS "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
compress
\(em compress data
.SH SYNOPSIS
.LP
.nf
compress \fB[\fR\(mifv\fB] [\fR\(mib \fIbits\fB] [\fIfile\fR...\fB]\fR
.P
compress \fB[\fR\(micfv\fB] [\fR\(mib \fIbits\fB] [\fIfile\fB]\fR
.fi
.SH DESCRIPTION
The
.IR compress
utility shall attempt to reduce the size of the named files by using
adaptive Lempel-Ziv coding algorithm.
.TP 10
.BR Note:
Lempel-Ziv is US Patent 4464650, issued to William Eastman, Abraham
Lempel, Jacob Ziv, Martin Cohn on August 7th, 1984, and assigned to
Sperry Corporation.
.RS 10 
.P
Lempel-Ziv-Welch compression is covered by US Patent 4558302, issued to
Terry A. Welch on December 10th, 1985, and assigned to Sperry
Corporation.
.RE
.P
On systems not supporting adaptive Lempel-Ziv coding algorithm, the
input files shall not be changed and an error value greater than two
shall be returned. Except when the output is to the standard output,
each file shall be replaced by one with the extension
.BR .Z .
If the invoking process has appropriate privileges, the ownership,
modes, access time, and modification time of the original file are
preserved. If appending the
.BR .Z
to the filename would make the name exceed
{NAME_MAX}
bytes, the command shall fail. If no files are specified, the standard
input shall be compressed to the standard output.
.SH OPTIONS
The
.IR compress
utility shall conform to the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 12.2" ", " "Utility Syntax Guidelines".
.P
The following options shall be supported:
.IP "\fB\(mib\ \fIbits\fR" 10
Specify the maximum number of bits to use in a code. For a conforming
application, the
.IR bits
argument shall be:
.RS 10 
.sp
.RS 4
.nf
\fB
9 &lt;= \fIbits\fP &lt;= 14
.fi \fR
.P
.RE
.P
The implementation may allow
.IR bits
values of greater than 14. The default is 14, 15, or 16.
.RE
.IP "\fB\(mic\fP" 10
Cause
.IR compress
to write to the standard output; the input file is not changed, and no
.BR .Z
files are created.
.IP "\fB\(mif\fP" 10
Force compression of
.IR file ,
even if it does not actually reduce the size of the file, or if the
corresponding
.IR file \c
.BR .Z
file already exists. If the
.BR \(mif
option is not given, and the process is not running in the background,
the user is prompted as to whether an existing
.IR file \c
.BR .Z
file should be overwritten. If the response is affirmative, the existing
file will be overwritten.
.IP "\fB\(miv\fP" 10
Write the percentage reduction of each file to standard error.
.SH OPERANDS
The following operand shall be supported:
.IP "\fIfile\fR" 10
A pathname of a file to be compressed.
.SH STDIN
The standard input shall be used only if no
.IR file
operands are specified, or if a
.IR file
operand is
.BR '\(mi' .
.SH "INPUT FILES"
If
.IR file
operands are specified, the input files contain the data to be
compressed.
.SH "ENVIRONMENT VARIABLES"
The following environment variables shall affect the execution of
.IR compress :
.IP "\fILANG\fP" 10
Provide a default value for the internationalization variables that are
unset or null. (See the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 8.2" ", " "Internationalization Variables"
for the precedence of internationalization variables used to determine
the values of locale categories.)
.IP "\fILC_ALL\fP" 10
If set to a non-empty string value, override the values of all the
other internationalization variables.
.IP "\fILC_COLLATE\fP" 10
.br
Determine the locale for the behavior of ranges, equivalence classes,
and multi-character collating elements used in the extended regular
expression defined for the
.BR yesexpr
locale keyword in the
.IR LC_MESSAGES
category.
.IP "\fILC_CTYPE\fP" 10
Determine the locale for the interpretation of sequences of bytes of text
data as characters (for example, single-byte as opposed to multi-byte
characters in arguments), the behavior of character classes used in the
extended regular expression defined for the
.BR yesexpr
locale keyword in the
.IR LC_MESSAGES
category.
.IP "\fILC_MESSAGES\fP" 10
.br
Determine the locale used to process affirmative responses, and the
locale used to affect the format and contents of diagnostic messages,
prompts, and the output from the
.BR \(miv
option written to standard error.
.IP "\fINLSPATH\fP" 10
Determine the location of message catalogs for the processing of
.IR LC_MESSAGES .
.SH "ASYNCHRONOUS EVENTS"
Default.
.SH STDOUT
If no
.IR file
operands are specified, or if a
.IR file
operand is
.BR '\(mi' ,
or if the
.BR \(mic
option is specified, the standard output contains the compressed
output.
.SH STDERR
The standard error shall be used only for diagnostic and prompt
messages and the output from
.BR \(miv .
.SH "OUTPUT FILES"
The output files shall contain the compressed output. The format of
compressed files is unspecified and interchange of such files between
implementations (including access via unspecified file sharing
mechanisms) is not required by POSIX.1\(hy2008.
.SH "EXTENDED DESCRIPTION"
None.
.SH "EXIT STATUS"
The following exit values shall be returned:
.IP "\00" 6
Successful completion.
.IP "\01" 6
An error occurred.
.IP "\02" 6
One or more files were not compressed because they would have increased
in size (and the
.BR \(mif
option was not specified).
.IP &gt;2 6
An error occurred.
.SH "CONSEQUENCES OF ERRORS"
The input file shall remain unmodified.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
The amount of compression obtained depends on the size of the input,
the number of
.IR bits
per code, and the distribution of common substrings. Typically, text
such as source code or English is reduced by 50\(hy60%. Compression is
generally much better than that achieved by Huffman coding
or adaptive Huffman coding (\c
.IR compact ),
and takes less time to compute.
.P
Although
.IR compress
strictly follows the default actions upon receipt of a signal or when
an error occurs, some unexpected results may occur. In some
implementations it is likely that a partially compressed file is left
in place, alongside its uncompressed input file. Since the general
operation of
.IR compress
is to delete the uncompressed file only after the
.BR .Z
file has been successfully filled, an application should always
carefully check the exit status of
.IR compress
before arbitrarily deleting files that have like-named neighbors with
.BR .Z
suffixes.
.P
The limit of 14 on the
.IR bits
option-argument is to achieve portability to all systems (within the
restrictions imposed by the lack of an explicit published file
format). Some implementations based on 16-bit architectures cannot
support 15 or 16-bit uncompression.
.SH EXAMPLES
None.
.SH RATIONALE
None.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "\fIuncompress\fR\^",
.IR "\fIzcat\fR\^"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "Chapter 8" ", " "Environment Variables",
.IR "Section 12.2" ", " "Utility Syntax Guidelines"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
'\" et
.TH CONTINUE "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
continue
\(em continue for, while, or until loop
.SH SYNOPSIS
.LP
.nf
continue \fB[\fIn\fB]\fR
.fi
.SH DESCRIPTION
The
.IR continue
utility shall return to the top of the smallest enclosing
.BR for ,
.BR while ,
or
.BR until
loop, or to the top of the
.IR n th
enclosing loop, if
.IR n
is specified. This involves repeating the condition list of a
.BR while
or
.BR until
loop or performing the next assignment of a
.BR for
loop, and re-executing the loop if appropriate.
.P
The value of
.IR n
is a decimal integer greater than or equal to 1. The default shall be
equivalent to
.IR n =1.
If
.IR n
is greater than the number of enclosing loops, the outermost enclosing
loop shall be used.
.SH OPTIONS
None.
.SH OPERANDS
See the DESCRIPTION.
.SH STDIN
Not used.
.SH "INPUT FILES"
None.
.SH "ENVIRONMENT VARIABLES"
None.
.SH "ASYNCHRONOUS EVENTS"
Default.
.SH STDOUT
Not used.
.SH STDERR
The standard error shall be used only for diagnostic messages.
.SH "OUTPUT FILES"
None.
.SH "EXTENDED DESCRIPTION"
None.
.SH "EXIT STATUS"
.IP "\00" 6
Successful completion.
.IP &gt;0 6
The
.IR n
value was not an unsigned decimal integer greater than or equal to 1.
.SH "CONSEQUENCES OF ERRORS"
Default.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
None.
.SH EXAMPLES
.LP
.nf
for i in *
do
if test \(mid "$i"
then continue
fi
printf '"%s" is not a directory.\en' "$i"
done
.fi
.SH "RATIONALE"
None.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "Section 2.14" ", " "Special Built-In Utilities"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.
.TH CP "1" "March 2017" "GNU coreutils 8.27" "User Commands"
.SH NAME
cp \- copy files and directories
.SH SYNOPSIS
.B cp
[\fI\,OPTION\/\fR]... [\fI\,-T\/\fR] \fI\,SOURCE DEST\/\fR
.br
.B cp
[\fI\,OPTION\/\fR]... \fI\,SOURCE\/\fR... \fI\,DIRECTORY\/\fR
.br
.B cp
[\fI\,OPTION\/\fR]... \fI\,-t DIRECTORY SOURCE\/\fR...
.SH DESCRIPTION
.\" Add any additional description here
.PP
Copy SOURCE to DEST, or multiple SOURCE(s) to DIRECTORY.
.PP
Mandatory arguments to long options are mandatory for short options too.
.TP
\fB\-a\fR, \fB\-\-archive\fR
same as \fB\-dR\fR \fB\-\-preserve\fR=\fI\,all\/\fR
.TP
\fB\-\-attributes\-only\fR
don't copy the file data, just the attributes
.TP
\fB\-\-backup\fR[=\fI\,CONTROL\/\fR]
make a backup of each existing destination file
.TP
\fB\-b\fR
like \fB\-\-backup\fR but does not accept an argument
.TP
\fB\-\-copy\-contents\fR
copy contents of special files when recursive
.TP
\fB\-d\fR
same as \fB\-\-no\-dereference\fR \fB\-\-preserve\fR=\fI\,links\/\fR
.TP
\fB\-f\fR, \fB\-\-force\fR
if an existing destination file cannot be
opened, remove it and try again (this option
is ignored when the \fB\-n\fR option is also used)
.TP
\fB\-i\fR, \fB\-\-interactive\fR
prompt before overwrite (overrides a previous \fB\-n\fR
option)
.TP
\fB\-H\fR
follow command\-line symbolic links in SOURCE
.TP
\fB\-l\fR, \fB\-\-link\fR
hard link files instead of copying
.TP
\fB\-L\fR, \fB\-\-dereference\fR
always follow symbolic links in SOURCE
.TP
\fB\-n\fR, \fB\-\-no\-clobber\fR
do not overwrite an existing file (overrides
a previous \fB\-i\fR option)
.TP
\fB\-P\fR, \fB\-\-no\-dereference\fR
never follow symbolic links in SOURCE
.TP
\fB\-p\fR
same as \fB\-\-preserve\fR=\fI\,mode\/\fR,ownership,timestamps
.TP
\fB\-\-preserve\fR[=\fI\,ATTR_LIST\/\fR]
preserve the specified attributes (default:
mode,ownership,timestamps), if possible
additional attributes: context, links, xattr,
all
.TP
\fB\-\-no\-preserve\fR=\fI\,ATTR_LIST\/\fR
don't preserve the specified attributes
.TP
\fB\-\-parents\fR
use full source file name under DIRECTORY
.TP
\fB\-R\fR, \fB\-r\fR, \fB\-\-recursive\fR
copy directories recursively
.TP
\fB\-\-reflink\fR[=\fI\,WHEN\/\fR]
control clone/CoW copies. See below
.TP
\fB\-\-remove\-destination\fR
remove each existing destination file before
attempting to open it (contrast with \fB\-\-force\fR)
.TP
\fB\-\-sparse\fR=\fI\,WHEN\/\fR
control creation of sparse files. See below
.TP
\fB\-\-strip\-trailing\-slashes\fR
remove any trailing slashes from each SOURCE
argument
.TP
\fB\-s\fR, \fB\-\-symbolic\-link\fR
make symbolic links instead of copying
.TP
\fB\-S\fR, \fB\-\-suffix\fR=\fI\,SUFFIX\/\fR
override the usual backup suffix
.TP
\fB\-t\fR, \fB\-\-target\-directory\fR=\fI\,DIRECTORY\/\fR
copy all SOURCE arguments into DIRECTORY
.TP
\fB\-T\fR, \fB\-\-no\-target\-directory\fR
treat DEST as a normal file
.TP
\fB\-u\fR, \fB\-\-update\fR
copy only when the SOURCE file is newer
than the destination file or when the
destination file is missing
.TP
\fB\-v\fR, \fB\-\-verbose\fR
explain what is being done
.TP
\fB\-x\fR, \fB\-\-one\-file\-system\fR
stay on this file system
.TP
\fB\-Z\fR
set SELinux security context of destination
file to default type
.TP
\fB\-\-context\fR[=\fI\,CTX\/\fR]
like \fB\-Z\fR, or if CTX is specified then set the
SELinux or SMACK security context to CTX
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-\-version\fR
output version information and exit
.PP
By default, sparse SOURCE files are detected by a crude heuristic and the
corresponding DEST file is made sparse as well.  That is the behavior
selected by \fB\-\-sparse\fR=\fI\,auto\/\fR.  Specify \fB\-\-sparse\fR=\fI\,always\/\fR to create a sparse DEST
file whenever the SOURCE file contains a long enough sequence of zero bytes.
Use \fB\-\-sparse\fR=\fI\,never\/\fR to inhibit creation of sparse files.
.PP
When \fB\-\-reflink\fR[=\fI\,always\/\fR] is specified, perform a lightweight copy, where the
data blocks are copied only when modified.  If this is not possible the copy
fails, or if \fB\-\-reflink\fR=\fI\,auto\/\fR is specified, fall back to a standard copy.
.PP
The backup suffix is '~', unless set with \fB\-\-suffix\fR or SIMPLE_BACKUP_SUFFIX.
The version control method may be selected via the \fB\-\-backup\fR option or through
the VERSION_CONTROL environment variable.  Here are the values:
.TP
none, off
never make backups (even if \fB\-\-backup\fR is given)
.TP
numbered, t
make numbered backups
.TP
existing, nil
numbered if numbered backups exist, simple otherwise
.TP
simple, never
always make simple backups
.PP
As a special case, cp makes a backup of SOURCE when the force and backup
options are given and SOURCE and DEST are the same name for an existing,
regular file.
.SH AUTHOR
Written by Torbjorn Granlund, David MacKenzie, and Jim Meyering.
.SH "REPORTING BUGS"
GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt;
.br
Report cp translation bugs to &lt;http://translationproject.org/team/&gt;
.SH COPYRIGHT
Copyright \(co 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
Full documentation at: &lt;http://www.gnu.org/software/coreutils/cp&gt;
.br
or available locally via: info \(aq(coreutils) cp invocation\(aq
'\" et
.TH CRONTAB "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
crontab
\(em schedule periodic background work
.SH SYNOPSIS
.LP
.nf
crontab \fB[\fIfile\fB]\fR
.P
crontab \fB[\fR\(mie\||\(mil|\(mir\fB]\fR
.fi
.SH DESCRIPTION
The
.IR crontab
utility shall create, replace,
or edit a user's crontab entry;
a crontab entry is a list of commands and the times at which they
shall be executed. The new crontab entry can be input by specifying
.IR file
or input from standard input if no
.IR file
operand is specified,
or by using an editor, if
.BR \(mie
is specified.
.P
Upon execution of a command from a crontab entry, the implementation
shall supply a default environment, defining at least the following
environment variables:
.IP "\fIHOME\fP" 10
A pathname of the user's home directory.
.IP "\fILOGNAME\fP" 10
The user's login name.
.IP "\fIPATH\fP" 10
A string representing a search path guaranteed to find all of the
standard utilities.
.IP "\fISHELL\fP" 10
A pathname of the command interpreter. When
.IR crontab
is invoked as specified by this volume of POSIX.1\(hy2008, the value shall be a pathname for
.IR sh .
.P
The values of these variables when
.IR crontab
is invoked as specified by this volume of POSIX.1\(hy2008 shall not affect the default
values provided when the scheduled command is run.
.P
If standard output and standard error are not redirected by commands
executed from the crontab entry, any generated output or errors shall
be mailed, via an implementation-defined method, to the user.
.P
Users shall be permitted to use
.IR crontab
if their names appear in the file
.BR cron.allow
which is located in an implementation-defined directory.
If that file does not exist, the file
.BR cron.deny ,
which is located in an implementation-defined directory,
shall be checked to determine whether the user shall be denied access to
.IR crontab .
If neither file exists, only a process with appropriate privileges shall be
allowed to submit a job. If only
.BR cron.deny
exists and is empty, global usage shall be permitted. The
.BR cron.allow
and
.BR cron.deny
files shall consist of one user name per line.
.SH OPTIONS
The
.IR crontab
utility shall conform to the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 12.2" ", " "Utility Syntax Guidelines".
.P
The following options shall be supported:
.IP "\fB\(mie\fP" 10
Edit a copy of the invoking user's crontab entry, or create an empty
entry to edit if the crontab entry does not exist. When editing is
complete, the entry shall be installed as the user's crontab entry.
.IP "\fB\(mil\fP" 10
(The letter ell.) List the invoking user's crontab entry.
.IP "\fB\(mir\fP" 10
Remove the invoking user's crontab entry.
.SH OPERANDS
The following operand shall be supported:
.IP "\fIfile\fR" 10
The pathname of a file that contains specifications, in the format
defined in the INPUT FILES section, for crontab entries.
.SH STDIN
See the INPUT FILES section.
.SH "INPUT FILES"
In the POSIX locale, the user or application shall ensure that a
crontab entry is a text file consisting of lines of six fields each.
The fields shall be separated by
&lt;blank&gt;
characters. The first five fields shall be integer patterns that specify
the following:
.IP " 1." 4
Minute [0,59]
.IP " 2." 4
Hour [0,23]
.IP " 3." 4
Day of the month [1,31]
.IP " 4." 4
Month of the year [1,12]
.IP " 5." 4
Day of the week ([0,6] with 0=Sunday)
.P
Each of these patterns can be either an
&lt;asterisk&gt;
(meaning all valid values), an element, or a list of elements separated by
&lt;comma&gt;
characters. An element shall be either a number or two numbers separated
by a
&lt;hyphen&gt;
(meaning an inclusive range). The specification of days can be made by
two fields (day of the month and day of the week). If month, day of
month, and day of week are all
&lt;asterisk&gt;
characters, every day shall be matched. If either the month or day of
month is specified as an element or list, but the day of week is an
&lt;asterisk&gt;,
the month and day of month fields shall specify the days that match. If
both month and day of month are specified as an
&lt;asterisk&gt;,
but day of week is an element or list, then only the specified days of the
week match. Finally, if either the month or day of month is specified as
an element or list, and the day of week is also specified as an element
or list, then any day matching either the month and day of month, or
the day of week, shall be matched.
.P
The sixth field of a line in a crontab entry is a string that shall be
executed by
.IR sh
at the specified times. A
&lt;percent-sign&gt;
character in this field shall be translated to a
&lt;newline&gt;.
Any character preceded by a
&lt;backslash&gt;
(including the
.BR '%' )
shall cause that character to be treated literally. Only the first line
(up to a
.BR '%' 
or end-of-line) of the command field shall be executed by the command
interpreter. The other lines shall be made available to the command as
standard input.
.P
Blank lines and those whose first non-\c
&lt;blank&gt;
is
.BR '#' 
shall be ignored.
.P
The text files
.BR cron.allow
and
.BR cron.deny ,
which are located in an implementation-defined directory,
shall contain zero or more user names, one per line, of users who are,
respectively, authorized or denied access to the service underlying the
.IR crontab
utility.
.SH "ENVIRONMENT VARIABLES"
The following environment variables shall affect the execution of
.IR crontab :
.IP "\fIEDITOR\fP" 10
Determine the editor to be invoked when the
.BR \(mie
option is specified. The default editor shall be
.IR vi .
.IP "\fILANG\fP" 10
Provide a default value for the internationalization variables that are
unset or null. (See the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 8.2" ", " "Internationalization Variables"
for the precedence of internationalization variables used to determine
the values of locale categories.)
.IP "\fILC_ALL\fP" 10
If set to a non-empty string value, override the values of all the
other internationalization variables.
.IP "\fILC_CTYPE\fP" 10
Determine the locale for the interpretation of sequences of bytes of
text data as characters (for example, single-byte as opposed to
multi-byte characters in arguments and input files).
.IP "\fILC_MESSAGES\fP" 10
.br
Determine the locale that should be used to affect the format and
contents of diagnostic messages written to standard error.
.IP "\fINLSPATH\fP" 10
Determine the location of message catalogs for the processing of
.IR LC_MESSAGES .
.SH "ASYNCHRONOUS EVENTS"
Default.
.SH STDOUT
If the
.BR \(mil
option is specified, the crontab entry shall be written to the standard
output.
.SH STDERR
The standard error shall be used only for diagnostic messages.
.SH "OUTPUT FILES"
None.
.SH "EXTENDED DESCRIPTION"
None.
.SH "EXIT STATUS"
The following exit values shall be returned:
.IP "\00" 6
Successful completion.
.IP &gt;0 6
An error occurred.
.SH "CONSEQUENCES OF ERRORS"
The user's crontab entry is not submitted, removed,
edited,
or listed.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
The format of the crontab entry shown here is guaranteed only for the
POSIX locale. Other cultures may be supported with substantially
different interfaces, although implementations are encouraged to
provide comparable levels of functionality.
.P
The default settings of the
.IR HOME ,
.IR LOGNAME ,
.IR PATH ,
and
.IR SHELL
variables that are given to the scheduled job are not affected by the
settings of those variables when
.IR crontab
is run; as stated, they are defaults. The text about ``invoked as
specified by this volume of POSIX.1\(hy2008'' means that the implementation may provide
extensions that allow these variables to be affected at runtime, but
that the user has to take explicit action in order to access the
extension, such as give a new option flag or modify the format of the
crontab entry.
.P
A typical user error is to type only
.IR crontab ;
this causes the system to wait for the new crontab entry on standard
input. If end-of-file is typed (generally &lt;control&gt;\(hyD), the crontab
entry is replaced by an empty file. In this case, the user should type
the interrupt character, which prevents the crontab entry from being
replaced.
.SH EXAMPLES
.IP " 1." 4
Clean up
.BR core
files every weekday morning at 3:15 am:
.RS 4 
.sp
.RS 4
.nf
\fB
15 3 * * 1-5 find "$HOME" \(miname core \(miexec rm \(mif {} + 2&gt;/dev/null
.fi \fR
.P
.RE
.RE
.IP " 2." 4
Mail a birthday greeting:
.RS 4 
.sp
.RS 4
.nf
\fB
0 12 14 2 * mailx john%Happy Birthday!%Time for lunch.
.fi \fR
.P
.RE
.RE
.IP " 3." 4
As an example of specifying the two types of days:
.RS 4 
.sp
.RS 4
.nf
\fB
0 0 1,15 * 1
.fi \fR
.P
.RE
.P
would run a command on the first and fifteenth of each month, as well
as on every Monday. To specify days by only one field, the other field
should be set to
.BR '*' ;
for example:
.sp
.RS 4
.nf
\fB
0 0 * * 1
.fi \fR
.P
.RE
.P
would run a command only on Mondays.
.RE
.SH RATIONALE
All references to a
.IR cron
daemon and to
.IR cron
.IR files
have been omitted. Although historical implementations have used this
arrangement, there is no reason to limit future implementations.
.P
This description of
.IR crontab
is designed to support only users with normal privileges. The format of
the input is based on the System V
.IR crontab ;
however, there is no requirement here that the actual system database
used by the
.IR cron
daemon (or a similar mechanism) use this format internally. For
example, systems derived from BSD are likely to have an additional
field appended that indicates the user identity to be used when the job
is submitted.
.P
The
.BR \(mie
option was adopted from the SVID as a user convenience, although it
does not exist in all historical implementations.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "\fIat\fR\^"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "Chapter 8" ", " "Environment Variables",
.IR "Section 12.2" ", " "Utility Syntax Guidelines"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.
.TH CSPLIT "1" "March 2017" "GNU coreutils 8.27" "User Commands"
.SH NAME
csplit \- split a file into sections determined by context lines
.SH SYNOPSIS
.B csplit
[\fI\,OPTION\/\fR]... \fI\,FILE PATTERN\/\fR...
.SH DESCRIPTION
.\" Add any additional description here
.PP
Output pieces of FILE separated by PATTERN(s) to files 'xx00', 'xx01', ...,
and output byte counts of each piece to standard output.
.PP
Read standard input if FILE is \-
.PP
Mandatory arguments to long options are mandatory for short options too.
.TP
\fB\-b\fR, \fB\-\-suffix\-format\fR=\fI\,FORMAT\/\fR
use sprintf FORMAT instead of %02d
.TP
\fB\-f\fR, \fB\-\-prefix\fR=\fI\,PREFIX\/\fR
use PREFIX instead of 'xx'
.TP
\fB\-k\fR, \fB\-\-keep\-files\fR
do not remove output files on errors
.TP
\fB\-\-suppress\-matched\fR
suppress the lines matching PATTERN
.TP
\fB\-n\fR, \fB\-\-digits\fR=\fI\,DIGITS\/\fR
use specified number of digits instead of 2
.TP
\fB\-s\fR, \fB\-\-quiet\fR, \fB\-\-silent\fR
do not print counts of output file sizes
.TP
\fB\-z\fR, \fB\-\-elide\-empty\-files\fR
remove empty output files
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-\-version\fR
output version information and exit
.SS "Each PATTERN may be:"
.TP
INTEGER
copy up to but not including specified line number
.TP
/REGEXP/[OFFSET]
copy up to but not including a matching line
.TP
%REGEXP%[OFFSET]
skip to, but not including a matching line
.TP
{INTEGER}
repeat the previous pattern specified number of times
.TP
{*}
repeat the previous pattern as many times as possible
.PP
A line OFFSET is a required '+' or '\-' followed by a positive integer.
.SH AUTHOR
Written by Stuart Kemp and David MacKenzie.
.SH "REPORTING BUGS"
GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt;
.br
Report csplit translation bugs to &lt;http://translationproject.org/team/&gt;
.SH COPYRIGHT
Copyright \(co 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
Full documentation at: &lt;http://www.gnu.org/software/coreutils/csplit&gt;
.br
or available locally via: info \(aq(coreutils) csplit invocation\(aq
'\" et
.TH CTAGS "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
ctags
\(em create a tags file (\fBDEVELOPMENT\fR, \fBFORTRAN\fR)
.SH SYNOPSIS
.LP
.nf
ctags \fB[\fR\(mia\fB] [\fR\(mif \fItagsfile\fB] \fIpathname\fR...
.P
ctags \(mix \fIpathname\fR...
.fi
.SH DESCRIPTION
The
.IR ctags
utility shall be provided on systems that support the the Software
Development Utilities option, and either or both of the C-Language
Development Utilities option and FORTRAN Development Utilities option. On
other systems, it is optional.
.P
The
.IR ctags
utility shall write a
.IR tagsfile
or an index of objects from C-language or FORTRAN source files
specified by the
.IR pathname
operands. The
.IR tagsfile
shall list the locators of language-specific objects within the source
files. A locator consists of a name, pathname, and either a search
pattern
or a line number that can be used in searching for the object
definition. The objects that shall be recognized are specified in the
EXTENDED DESCRIPTION section.
.SH OPTIONS
The
.IR ctags
utility shall conform to the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 12.2" ", " "Utility Syntax Guidelines".
.P
The following options shall be supported:
.IP "\fB\(mia\fP" 10
Append to
.IR tagsfile .
.IP "\fB\(mif\ \fItagsfile\fR" 10
Write the object locator lists into
.IR tagsfile
instead of the default file named
.BR tags
in the current directory.
.IP "\fB\(mix\fP" 10
Produce a list of object names, the line number, and filename in which
each is defined, as well as the text of that line, and write this to
the standard output. A
.IR tagsfile
shall not be created when
.BR \(mix
is specified.
.SH OPERANDS
The following
.IR pathname
operands are supported:
.IP "\fIfile\fB.c\fR" 10
Files with basenames ending with the
.BR .c
suffix shall be treated as C-language source code. Such files that are
not valid input to
.IR c99
produce unspecified results.
.IP "\fIfile\fB.h\fR" 10
Files with basenames ending with the
.BR .h
suffix shall be treated as C-language source code. Such files that are
not valid input to
.IR c99
produce unspecified results.
.IP "\fIfile\fB.f\fR" 10
Files with basenames ending with the
.BR .f
suffix shall be treated as FORTRAN-language source code. Such files
that are not valid input to
.IR fort77
produce unspecified results.
.P
The handling of other files is implementation-defined.
.SH STDIN
See the INPUT FILES section.
.SH "INPUT FILES"
The input files shall be text files containing source code in the
language indicated by the operand filename suffixes.
.br
.SH "ENVIRONMENT VARIABLES"
The following environment variables shall affect the execution of
.IR ctags :
.IP "\fILANG\fP" 10
Provide a default value for the internationalization variables that are
unset or null. (See the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 8.2" ", " "Internationalization Variables"
for the precedence of internationalization variables used to determine
the values of locale categories.)
.IP "\fILC_ALL\fP" 10
If set to a non-empty string value, override the values of all the
other internationalization variables.
.IP "\fILC_COLLATE\fP" 10
.br
Determine the order in which output is sorted for the
.BR \(mix
option. The POSIX locale determines the order in which the
.IR tagsfile
is written.
.IP "\fILC_CTYPE\fP" 10
Determine the locale for the interpretation of sequences of bytes of
text data as characters (for example, single-byte as opposed to
multi-byte characters in arguments and input files). When processing
C-language source code, if the locale is not compatible with the C
locale described by the ISO\ C standard, the results are unspecified.
.IP "\fILC_MESSAGES\fP" 10
.br
Determine the locale that should be used to affect the format and
contents of diagnostic messages written to standard error.
.IP "\fINLSPATH\fP" 10
Determine the location of message catalogs for the processing of
.IR LC_MESSAGES .
.SH "ASYNCHRONOUS EVENTS"
Default.
.SH STDOUT
The list of object name information produced by the
.BR \(mix
option shall be written to standard output in the following format:
.sp
.RS 4
.nf
\fB
"%s %d %s %s", &lt;\fIobject-name\fR&gt;, &lt;\fIline-number\fR&gt;, &lt;\fIfilename\fR&gt;, &lt;\fItext\fR&gt;
.fi \fR
.P
.RE
.P
where &lt;\fItext\fP&gt; is the text of line &lt;\fIline-number\fP&gt; of file
&lt;\fIfilename\fP&gt;.
.SH STDERR
The standard error shall be used only for diagnostic messages.
.SH "OUTPUT FILES"
When the
.BR \(mix
option is not specified, the format of the output file shall be:
.sp
.RS 4
.nf
\fB
"%s\et%s\et/%s/\en", &lt;\fIidentifier\fR&gt;, &lt;\fIfilename\fR&gt;, &lt;\fIpattern\fR&gt;
.fi \fR
.P
.RE
.P
where &lt;\fIpattern\fP&gt; is a search pattern that could be used by an
editor to find the defining instance of &lt;\fIidentifier\fP&gt; in
&lt;\fIfilename\fP&gt; (where
.IR "defining instance"
is indicated by the declarations listed in the EXTENDED DESCRIPTION).
.P
An optional
&lt;circumflex&gt;
(\c
.BR '^' )
can be added as a prefix to &lt;\fIpattern\fP&gt;, and an optional
&lt;dollar-sign&gt;
can be appended to &lt;\fIpattern\fP&gt; to indicate that the pattern is
anchored to the beginning (end) of a line of text. Any
&lt;slash&gt;
or
&lt;backslash&gt;
characters in &lt;\fIpattern\fP&gt; shall be preceded by a
&lt;backslash&gt;
character. The anchoring
&lt;circumflex&gt;,
&lt;dollar-sign&gt;,
and escaping
&lt;backslash&gt;
characters shall not be considered part of the search pattern. All other
characters in the search pattern shall be considered literal characters.
.br
.P
An alternative format is:
.sp
.RS 4
.nf
\fB
"%s\et%s\et?%s?\en", &lt;\fIidentifier\fR&gt;, &lt;\fIfilename\fR&gt;, &lt;\fIpattern\fR&gt;
.fi \fR
.P
.RE
.P
which is identical to the first format except that
&lt;slash&gt;
characters in &lt;\fIpattern\fP&gt; shall not be preceded by escaping
&lt;backslash&gt;
characters, and
&lt;question-mark&gt;
characters in &lt;\fIpattern\fP&gt; shall be preceded by
&lt;backslash&gt;
characters.
.P
A second alternative format is:
.sp
.RS 4
.nf
\fB
"%s\et%s\et%d\en", &lt;\fIidentifier\fR&gt;, &lt;\fIfilename\fR&gt;, &lt;\fIlineno\fR&gt;
.fi \fR
.P
.RE
.P
where &lt;\fIlineno\fP&gt; is a decimal line number that could be used by an
editor to find &lt;\fIidentifier\fP&gt; in &lt;\fIfilename\fP&gt;.
.P
Neither alternative format shall be produced by
.IR ctags
when it is used as described by POSIX.1\(hy2008, but the standard utilities that
process tags files shall be able to process those formats as well as
the first format.
.P
In any of these formats, the file shall be sorted by identifier, based
on the collation sequence in the POSIX locale.
.SH "EXTENDED DESCRIPTION"
If the operand identifies C-language source, the
.IR ctags
utility shall attempt to produce an output line for each of the
following objects:
.IP " *" 4
Function definitions
.IP " *" 4
Type definitions
.IP " *" 4
Macros with arguments
.P
It may also produce output for any of the following objects:
.IP " *" 4
Function prototypes
.IP " *" 4
Structures
.IP " *" 4
Unions
.IP " *" 4
Global variable definitions
.IP " *" 4
Enumeration types
.IP " *" 4
Macros without arguments
.IP " *" 4
.BR #define
statements
.IP " *" 4
.BR #line
statements
.P
Any
.BR #if
and
.BR #ifdef
statements shall produce no output. The tag
.BR main
is treated specially in C programs. The tag formed shall be created by
prefixing
.BR M
to the name of the file, with the trailing
.BR .c ,
and leading pathname components (if any) removed.
.P
On systems that do not support the C-Language Development Utilities
option,
.IR ctags
produces unspecified results for C-language source code files. It should
write to standard error a message identifying this condition and cause
a non-zero exit status to be produced.
.P
If the operand identifies FORTRAN source, the
.IR ctags
utility shall produce an output line for each function definition. It
may also produce output for any of the following objects:
.IP " *" 4
Subroutine definitions
.IP " *" 4
COMMON statements
.IP " *" 4
PARAMETER statements
.IP " *" 4
DATA and BLOCK DATA statements
.IP " *" 4
Statement numbers
.P
On systems that do not support the FORTRAN Development Utilities
option,
.IR ctags
produces unspecified results for FORTRAN source code files. It should
write to standard error a message identifying this condition and cause
a non-zero exit status to be produced.
.P
It is implementation-defined what other objects (including duplicate
identifiers) produce output.
.SH "EXIT STATUS"
The following exit values shall be returned:
.IP "\00" 6
Successful completion.
.IP &gt;0 6
An error occurred.
.SH "CONSEQUENCES OF ERRORS"
Default.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
The output with
.BR \(mix
is meant to be a simple index that can be written out as an off-line
readable function index. If the input files to
.IR ctags
(such as
.BR .c
files) were not created using the same locale as that in effect when
.IR ctags
.BR \(mix
is run, results might not be as expected.
.P
The description of C-language processing says ``attempts to'' because
the C language can be greatly confused, especially through the use of
.BR #define s,
and this utility would be of no use if the real C preprocessor were run
to identify them. The output from
.IR ctags
may be fooled and incorrect for various constructs.
.SH EXAMPLES
None.
.SH RATIONALE
The option list was significantly reduced from that provided by
historical implementations. The
.BR \(miF
option was omitted as redundant, since it is the default. The
.BR \(miB
option was omitted as being of very limited usefulness. The
.BR \(mit
option was omitted since the recognition of
.BR typedef s
is now required for C source files. The
.BR \(miu
option was omitted because the update function was judged to be not
only inefficient, but also rarely needed.
.P
An early proposal included a
.BR \(miw
option to suppress warning diagnostics. Since the types of such
diagnostics could not be described, the option was omitted as being not
useful.
.P
The text for
.IR LC_CTYPE
about compatibility with the C locale acknowledges that the ISO\ C standard
imposes requirements on the locale used to process C source. This could
easily be a superset of that known as ``the C locale'' by way of
implementation extensions, or one of a few alternative locales for
systems supporting different codesets. No statement is made for FORTRAN
because the ANSI\ X3.9\(hy1978 standard (FORTRAN 77) does not (yet) define a similar locale
concept. However, a general rule in this volume of POSIX.1\(hy2008 is that any time that locales
do not match (preparing a file for one locale and processing it in
another), the results are suspect.
.P
The collation sequence of the tags file is not affected by
.IR LC_COLLATE
because it is typically not used by human readers, but only by programs
such as
.IR vi
to locate the tag within the source files. Using the POSIX locale
eliminates some of the problems of coordinating locales between the
.IR ctags
file creator and the
.IR vi
file reader.
.P
Historically, the tags file has been used only by
.IR ex
and
.IR vi .
However, the format of the tags file has been published to encourage
other programs to use the tags in new ways. The format allows either
patterns or line numbers to find the identifiers because the historical
.IR vi
recognizes either. The
.IR ctags
utility does not produce the format using line numbers because it is
not useful following any source file changes that add or delete lines.
The documented search patterns match historical practice. It should be
noted that literal leading
&lt;circumflex&gt;
or trailing
&lt;dollar-sign&gt;
characters in the search pattern will only behave correctly if anchored
to the beginning of the line or end of the line by an additional
&lt;circumflex&gt;
or
&lt;dollar-sign&gt;
character.
.P
Historical implementations also understand the objects used by the
languages Pascal and sometimes LISP, and they understand the C source
output by
.IR lex
and
.IR yacc .
The
.IR ctags
utility is not required to accommodate these languages, although
implementors are encouraged to do so.
.P
The following historical option was not specified, as
.IR vgrind
is not included in this volume of POSIX.1\(hy2008:
.IP "\fB\(miv\fP" 10
If the
.BR \(miv
flag is given, an index of the form expected by
.IR vgrind
is produced on the standard output. This listing contains the function
name, filename, and page number (assuming 64-line pages). Since the
output is sorted into lexicographic order, it may be desired to run the
output through
.IR sort
.BR \(mif .
Sample use:
.RS 10 
.sp
.RS 4
.nf
\fB
ctags \(miv files | sort \(mif &gt; index vgrind \(mix index
.fi \fR
.P
.RE
.RE
.P
The special treatment of the tag
.BR main
makes the use of
.IR ctags
practical in directories with more than one program.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "\fIc99\fR\^",
.IR "\fIfort77\fR\^",
.IR "\fIvi\fR\^"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "Chapter 8" ", " "Environment Variables",
.IR "Section 12.2" ", " "Utility Syntax Guidelines"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.
.TH CUT "1" "March 2017" "GNU coreutils 8.27" "User Commands"
.SH NAME
cut \- remove sections from each line of files
.SH SYNOPSIS
.B cut
\fI\,OPTION\/\fR... [\fI\,FILE\/\fR]...
.SH DESCRIPTION
.\" Add any additional description here
.PP
Print selected parts of lines from each FILE to standard output.
.PP
With no FILE, or when FILE is \-, read standard input.
.PP
Mandatory arguments to long options are mandatory for short options too.
.TP
\fB\-b\fR, \fB\-\-bytes\fR=\fI\,LIST\/\fR
select only these bytes
.TP
\fB\-c\fR, \fB\-\-characters\fR=\fI\,LIST\/\fR
select only these characters
.TP
\fB\-d\fR, \fB\-\-delimiter\fR=\fI\,DELIM\/\fR
use DELIM instead of TAB for field delimiter
.TP
\fB\-f\fR, \fB\-\-fields\fR=\fI\,LIST\/\fR
select only these fields;  also print any line
that contains no delimiter character, unless
the \fB\-s\fR option is specified
.TP
\fB\-n\fR
(ignored)
.TP
\fB\-\-complement\fR
complement the set of selected bytes, characters
or fields
.TP
\fB\-s\fR, \fB\-\-only\-delimited\fR
do not print lines not containing delimiters
.TP
\fB\-\-output\-delimiter\fR=\fI\,STRING\/\fR
use STRING as the output delimiter
the default is to use the input delimiter
.TP
\fB\-z\fR, \fB\-\-zero\-terminated\fR
line delimiter is NUL, not newline
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-\-version\fR
output version information and exit
.PP
Use one, and only one of \fB\-b\fR, \fB\-c\fR or \fB\-f\fR.  Each LIST is made up of one
range, or many ranges separated by commas.  Selected input is written
in the same order that it is read, and is written exactly once.
Each range is one of:
.TP
N
N'th byte, character or field, counted from 1
.TP
N\-
from N'th byte, character or field, to end of line
.TP
N\-M
from N'th to M'th (included) byte, character or field
.TP
\fB\-M\fR
from first to M'th (included) byte, character or field
.SH AUTHOR
Written by David M. Ihnat, David MacKenzie, and Jim Meyering.
.SH "REPORTING BUGS"
GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt;
.br
Report cut translation bugs to &lt;http://translationproject.org/team/&gt;
.SH COPYRIGHT
Copyright \(co 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
Full documentation at: &lt;http://www.gnu.org/software/coreutils/cut&gt;
.br
or available locally via: info \(aq(coreutils) cut invocation\(aq
'\" et
.TH CXREF "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
cxref
\(em generate a C-language program cross-reference table
(\fBDEVELOPMENT\fP)
.SH SYNOPSIS
.LP
.nf
cxref \fB[\fR\(mics\fB] [\fR\(mio \fIfile\fB] [\fR\(miw \fInum\fB] [\fR\(miD \fIname\fB[\fR=\fIdef\fB]]\fR...\fB [\fR\(miI \fIdir\fB]\fR...
\fB[\fR\(miU \fIname\fB]\fR... \fIfile\fR...
.fi
.SH DESCRIPTION
The
.IR cxref
utility shall analyze a collection of C-language
.IR file s
and attempt to build a cross-reference table. Information from
.BR #define
lines shall be included in the symbol table. A sorted listing shall be
written to standard output of all symbols (auto, static, and global) in
each
.IR file
separately, or with the
.BR \(mic
option, in combination. Each symbol shall contain an
&lt;asterisk&gt;
before the declaring reference.
.SH OPTIONS
The
.IR cxref
utility shall conform to the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 12.2" ", " "Utility Syntax Guidelines",
except that the order of the
.BR \(miD ,
.BR \(miI ,
and
.BR \(miU
options (which are identical to their interpretation by
.IR c99 )
is significant. The following options shall be supported:
.IP "\fB\(mic\fP" 10
Write a combined cross-reference of all input files.
.IP "\fB\(mis\fP" 10
Operate silently; do not print input filenames.
.IP "\fB\(mio\ \fIfile\fR" 10
Direct output to named
.IR file .
.IP "\fB\(miw\ \fInum\fR" 10
Format output no wider than
.IR num
(decimal) columns. This option defaults to 80 if
.IR num
is not specified or is less than 51.
.IP "\fB\(miD\fP" 10
Equivalent to
.IR c99 .
.IP "\fB\(miI\fP" 10
Equivalent to
.IR c99 .
.IP "\fB\(miU\fP" 10
Equivalent to
.IR c99 .
.SH OPERANDS
The following operand shall be supported:
.IP "\fIfile\fR" 10
A pathname of a C-language source file.
.SH STDIN
Not used.
.SH "INPUT FILES"
The input files are C-language source files.
.SH "ENVIRONMENT VARIABLES"
The following environment variables shall affect the execution of
.IR cxref :
.IP "\fILANG\fP" 10
Provide a default value for the internationalization variables that are
unset or null. (See the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 8.2" ", " "Internationalization Variables"
for the precedence of internationalization variables used to determine
the values of locale categories.)
.IP "\fILC_ALL\fP" 10
If set to a non-empty string value, override the values of all the
other internationalization variables.
.IP "\fILC_COLLATE\fP" 10
.br
Determine the locale for the ordering of the output.
.IP "\fILC_CTYPE\fP" 10
Determine the locale for the interpretation of sequences of bytes of
text data as characters (for example, single-byte as opposed to
multi-byte characters in arguments and input files).
.IP "\fILC_MESSAGES\fP" 10
.br
Determine the locale that should be used to affect the format and
contents of diagnostic messages written to standard error.
.IP "\fINLSPATH\fP" 10
Determine the location of message catalogs for the processing of
.IR LC_MESSAGES .
.SH "ASYNCHRONOUS EVENTS"
Default.
.SH STDOUT
The standard output shall be used for the cross-reference listing,
unless the
.BR \(mio
option is used to select a different output file.
.P
The format of standard output is unspecified, except that the following
information shall be included:
.IP " *" 4
If the
.BR \(mic
option is not specified, each portion of the listing shall start
with the name of the input file on a separate line.
.IP " *" 4
The name line shall be followed by a sorted list of symbols, each with
its associated location pathname, the name of the function in which it
appears (if it is not a function name itself), and line number
references.
.IP " *" 4
Each line number may be preceded by an
&lt;asterisk&gt;
(\c
.BR '*' )
flag, meaning that this is the declaring reference. Other
single-character flags, with implementation-defined meanings, may be
included.
.SH STDERR
The standard error shall be used only for diagnostic messages.
.SH "OUTPUT FILES"
The output file named by the
.BR \(mio
option shall be used instead of standard output.
.SH "EXTENDED DESCRIPTION"
None.
.SH "EXIT STATUS"
The following exit values shall be returned:
.IP "\00" 6
Successful completion.
.IP &gt;0 6
An error occurred.
.SH "CONSEQUENCES OF ERRORS"
Default.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
None.
.SH EXAMPLES
None.
.SH RATIONALE
None.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "\fIc99\fR\^"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "Chapter 8" ", " "Environment Variables",
.IR "Section 12.2" ", " "Utility Syntax Guidelines"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.
.TH DATE "1" "March 2017" "GNU coreutils 8.27" "User Commands"
.SH NAME
date \- print or set the system date and time
.SH SYNOPSIS
.B date
[\fI\,OPTION\/\fR]... [\fI\,+FORMAT\/\fR]
.br
.B date
[\fI\,-u|--utc|--universal\/\fR] [\fI\,MMDDhhmm\/\fR[[\fI\,CC\/\fR]\fI\,YY\/\fR][\fI\,.ss\/\fR]]
.SH DESCRIPTION
.\" Add any additional description here
.PP
Display the current time in the given FORMAT, or set the system date.
.PP
Mandatory arguments to long options are mandatory for short options too.
.TP
\fB\-d\fR, \fB\-\-date\fR=\fI\,STRING\/\fR
display time described by STRING, not 'now'
.TP
\fB\-\-debug\fR
annotate the parsed date,
and warn about questionable usage to stderr
.TP
\fB\-f\fR, \fB\-\-file\fR=\fI\,DATEFILE\/\fR
like \fB\-\-date\fR; once for each line of DATEFILE
.TP
\fB\-I[FMT]\fR, \fB\-\-iso\-8601\fR[=\fI\,FMT\/\fR]
output date/time in ISO 8601 format.
FMT='date' for date only (the default),
\&amp;'hours', 'minutes', 'seconds', or 'ns'
for date and time to the indicated precision.
Example: 2006\-08\-14T02:34:56\-06:00
.TP
\fB\-R\fR, \fB\-\-rfc\-email\fR
output date and time in RFC 5322 format.
Example: Mon, 14 Aug 2006 02:34:56 \fB\-0600\fR
.TP
\fB\-\-rfc\-3339\fR=\fI\,FMT\/\fR
output date/time in RFC 3339 format.
FMT='date', 'seconds', or 'ns'
for date and time to the indicated precision.
Example: 2006\-08\-14 02:34:56\-06:00
.TP
\fB\-r\fR, \fB\-\-reference\fR=\fI\,FILE\/\fR
display the last modification time of FILE
.TP
\fB\-s\fR, \fB\-\-set\fR=\fI\,STRING\/\fR
set time described by STRING
.TP
\fB\-u\fR, \fB\-\-utc\fR, \fB\-\-universal\fR
print or set Coordinated Universal Time (UTC)
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-\-version\fR
output version information and exit
.PP
FORMAT controls the output.  Interpreted sequences are:
.TP
%%
a literal %
.TP
%a
locale's abbreviated weekday name (e.g., Sun)
.TP
%A
locale's full weekday name (e.g., Sunday)
.TP
%b
locale's abbreviated month name (e.g., Jan)
.TP
%B
locale's full month name (e.g., January)
.TP
%c
locale's date and time (e.g., Thu Mar  3 23:05:25 2005)
.TP
%C
century; like %Y, except omit last two digits (e.g., 20)
.TP
%d
day of month (e.g., 01)
.TP
%D
date; same as %m/%d/%y
.TP
%e
day of month, space padded; same as %_d
.TP
%F
full date; same as %Y\-%m\-%d
.TP
%g
last two digits of year of ISO week number (see %G)
.TP
%G
year of ISO week number (see %V); normally useful only with %V
.TP
%h
same as %b
.TP
%H
hour (00..23)
.TP
%I
hour (01..12)
.TP
%j
day of year (001..366)
.TP
%k
hour, space padded ( 0..23); same as %_H
.TP
%l
hour, space padded ( 1..12); same as %_I
.TP
%m
month (01..12)
.TP
%M
minute (00..59)
.TP
%n
a newline
.TP
%N
nanoseconds (000000000..999999999)
.TP
%p
locale's equivalent of either AM or PM; blank if not known
.TP
%P
like %p, but lower case
.TP
%q
quarter of year (1..4)
.TP
%r
locale's 12\-hour clock time (e.g., 11:11:04 PM)
.TP
%R
24\-hour hour and minute; same as %H:%M
.TP
%s
seconds since 1970\-01\-01 00:00:00 UTC
.TP
%S
second (00..60)
.TP
%t
a tab
.TP
%T
time; same as %H:%M:%S
.TP
%u
day of week (1..7); 1 is Monday
.TP
%U
week number of year, with Sunday as first day of week (00..53)
.TP
%V
ISO week number, with Monday as first day of week (01..53)
.TP
%w
day of week (0..6); 0 is Sunday
.TP
%W
week number of year, with Monday as first day of week (00..53)
.TP
%x
locale's date representation (e.g., 12/31/99)
.TP
%X
locale's time representation (e.g., 23:13:48)
.TP
%y
last two digits of year (00..99)
.TP
%Y
year
.TP
%z
+hhmm numeric time zone (e.g., \fB\-0400\fR)
.TP
%:z
+hh:mm numeric time zone (e.g., \fB\-04\fR:00)
.TP
%::z
+hh:mm:ss numeric time zone (e.g., \fB\-04\fR:00:00)
.TP
%:::z
numeric time zone with : to necessary precision (e.g., \fB\-04\fR, +05:30)
.TP
%Z
alphabetic time zone abbreviation (e.g., EDT)
.PP
By default, date pads numeric fields with zeroes.
The following optional flags may follow '%':
.TP
\-
(hyphen) do not pad the field
.TP
_
(underscore) pad with spaces
.TP
0
(zero) pad with zeros
.TP
^
use upper case if possible
.TP
#
use opposite case if possible
.PP
After any flags comes an optional field width, as a decimal number;
then an optional modifier, which is either
E to use the locale's alternate representations if available, or
O to use the locale's alternate numeric symbols if available.
.SH EXAMPLES
Convert seconds since the epoch (1970\-01\-01 UTC) to a date
.IP
\f(CW$ date --date='@2147483647'\fR
.PP
Show the time on the west coast of the US (use tzselect(1) to find TZ)
.IP
\f(CW$ TZ='America/Los_Angeles' date\fR
.PP
Show the local time for 9AM next Friday on the west coast of the US
.IP
\f(CW$ date --date='TZ="America/Los_Angeles" 09:00 next Fri'\fR
.SH "DATE STRING"
.\" NOTE: keep this paragraph in sync with the one in touch.x
The --date=STRING is a mostly free format human readable date string
such as "Sun, 29 Feb 2004 16:21:42 -0800" or "2004-02-29 16:21:42" or
even "next Thursday".  A date string may contain items indicating
calendar date, time of day, time zone, day of week, relative time,
relative date, and numbers.  An empty string indicates the beginning
of the day.  The date string format is more complex than is easily
documented here but is fully described in the info documentation.
.SH AUTHOR
Written by David MacKenzie.
.SH "REPORTING BUGS"
GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt;
.br
Report date translation bugs to &lt;http://translationproject.org/team/&gt;
.SH COPYRIGHT
Copyright \(co 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
Full documentation at: &lt;http://www.gnu.org/software/coreutils/date&gt;
.br
or available locally via: info \(aq(coreutils) date invocation\(aq
.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.
.TH DD "1" "March 2017" "GNU coreutils 8.27" "User Commands"
.SH NAME
dd \- convert and copy a file
.SH SYNOPSIS
.B dd
[\fI\,OPERAND\/\fR]...
.br
.B dd
\fI\,OPTION\/\fR
.SH DESCRIPTION
.\" Add any additional description here
.PP
Copy a file, converting and formatting according to the operands.
.TP
bs=BYTES
read and write up to BYTES bytes at a time
.TP
cbs=BYTES
convert BYTES bytes at a time
.TP
conv=CONVS
convert the file as per the comma separated symbol list
.TP
count=N
copy only N input blocks
.TP
ibs=BYTES
read up to BYTES bytes at a time (default: 512)
.TP
if=FILE
read from FILE instead of stdin
.TP
iflag=FLAGS
read as per the comma separated symbol list
.TP
obs=BYTES
write BYTES bytes at a time (default: 512)
.TP
of=FILE
write to FILE instead of stdout
.TP
oflag=FLAGS
write as per the comma separated symbol list
.TP
seek=N
skip N obs\-sized blocks at start of output
.TP
skip=N
skip N ibs\-sized blocks at start of input
.TP
status=LEVEL
The LEVEL of information to print to stderr;
\&amp;'none' suppresses everything but error messages,
\&amp;'noxfer' suppresses the final transfer statistics,
\&amp;'progress' shows periodic transfer statistics
.PP
N and BYTES may be followed by the following multiplicative suffixes:
c =1, w =2, b =512, kB =1000, K =1024, MB =1000*1000, M =1024*1024, xM =M,
GB =1000*1000*1000, G =1024*1024*1024, and so on for T, P, E, Z, Y.
.PP
Each CONV symbol may be:
.TP
ascii
from EBCDIC to ASCII
.TP
ebcdic
from ASCII to EBCDIC
.TP
ibm
from ASCII to alternate EBCDIC
.TP
block
pad newline\-terminated records with spaces to cbs\-size
.TP
unblock
replace trailing spaces in cbs\-size records with newline
.TP
lcase
change upper case to lower case
.TP
ucase
change lower case to upper case
.TP
sparse
try to seek rather than write the output for NUL input blocks
.TP
swab
swap every pair of input bytes
.TP
sync
pad every input block with NULs to ibs\-size; when used
with block or unblock, pad with spaces rather than NULs
.TP
excl
fail if the output file already exists
.TP
nocreat
do not create the output file
.TP
notrunc
do not truncate the output file
.TP
noerror
continue after read errors
.TP
fdatasync
physically write output file data before finishing
.TP
fsync
likewise, but also write metadata
.PP
Each FLAG symbol may be:
.TP
append
append mode (makes sense only for output; conv=notrunc suggested)
.TP
direct
use direct I/O for data
.TP
directory
fail unless a directory
.TP
dsync
use synchronized I/O for data
.TP
sync
likewise, but also for metadata
.TP
fullblock
accumulate full blocks of input (iflag only)
.TP
nonblock
use non\-blocking I/O
.TP
noatime
do not update access time
.TP
nocache
Request to drop cache.  See also oflag=sync
.TP
noctty
do not assign controlling terminal from file
.TP
nofollow
do not follow symlinks
.TP
count_bytes
treat 'count=N' as a byte count (iflag only)
.TP
skip_bytes
treat 'skip=N' as a byte count (iflag only)
.TP
seek_bytes
treat 'seek=N' as a byte count (oflag only)
.PP
Sending a USR1 signal to a running 'dd' process makes it
print I/O statistics to standard error and then resume copying.
.PP
Options are:
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-\-version\fR
output version information and exit
.SH AUTHOR
Written by Paul Rubin, David MacKenzie, and Stuart Kemp.
.SH "REPORTING BUGS"
GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt;
.br
Report dd translation bugs to &lt;http://translationproject.org/team/&gt;
.SH COPYRIGHT
Copyright \(co 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
Full documentation at: &lt;http://www.gnu.org/software/coreutils/dd&gt;
.br
or available locally via: info \(aq(coreutils) dd invocation\(aq
'\" et
.TH DELTA "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
delta
\(em make a delta (change) to an SCCS file (\fBDEVELOPMENT\fP)
.SH SYNOPSIS
.LP
.nf
delta \fB[\fR\(minps\fB] [\fR\(mig \fIlist\fB] [\fR\(mim \fImrlist\fB] [\fR\(mir \fISID\fB] [\fR\(miy\fB[\fIcomment\fB]] \fIfile\fR...
.fi
.SH DESCRIPTION
The
.IR delta
utility shall be used to permanently introduce into the named SCCS
files changes that were made to the files retrieved by
.IR get
(called the
.IR g-files ,
or generated files).
.SH OPTIONS
The
.IR delta
utility shall conform to the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 12.2" ", " "Utility Syntax Guidelines",
except that the
.BR \(miy
option has an optional option-argument. This optional option-argument
shall not be presented as a separate argument.
.P
The following options shall be supported:
.IP "\fB\(mir\ \fISID\fR" 10
Uniquely identify which delta is to be made to the SCCS file. The use
of this option shall be necessary only if two or more outstanding
.IR get
commands for editing (\c
.IR get
.BR \(mie )
on the same SCCS file were done by the same person (login name). The
SID value specified with the
.BR \(mir
option can be either the SID specified on the
.IR get
command line or the SID to be made as reported by the
.IR get
utility; see
.IR "\fIget\fR\^".
.IP "\fB\(mis\fP" 10
Suppress the report to standard output of the activity associated with
each
.IR file .
See the STDOUT section.
.IP "\fB\(min\fP" 10
Specify retention of the edited
.IR g-file
(normally removed at completion of delta processing).
.IP "\fB\(mig\ \fIlist\fR" 10
Specify a
.IR list
(see
.IR "\fIget\fR\^"
for the definition of
.IR list )
of deltas that shall be ignored when the file is accessed at the
change level (SID) created by this delta.
.IP "\fB\(mim\ \fImrlist\fR" 10
Specify a modification request (MR) number that the application shall
supply as the reason for creating the new delta. This shall be used if
the SCCS file has the
.BR v
flag set; see
.IR "\fIadmin\fR\^".
.RS 10 
.P
If
.BR \(mim
is not used and
.BR '\(mi' 
is not specified as a file argument, and the standard input is a
terminal, the prompt described in the STDOUT section shall be written
to standard output before the standard input is read; if the standard
input is not a terminal, no prompt shall be issued.
.P
MRs in a list shall be separated by
&lt;blank&gt;
characters or escaped
&lt;newline&gt;
characters. An unescaped
&lt;newline&gt;
shall terminate the MR list. The escape character is
&lt;backslash&gt;.
.P
If the
.BR v
flag has a value, it shall be taken to be the name of a program which
validates the correctness of the MR numbers. If a non-zero exit status
is returned from the MR number validation program, the
.IR delta
utility shall terminate. (It is assumed that the MR numbers were not
all valid.)
.RE
.IP "\fB\(miy\fB[\fIcomment\fB]\fR" 10
Describe the reason for making the delta. The
.IR comment
shall be an arbitrary group of lines that would meet the definition of
a text file. Implementations shall support
.IR comment s
from zero to 512 bytes and may support longer values. A null string
(specified as either
.BR \(miy ,
.BR \(miy \c
.BR \(dq\^\(dq ,
or in response to a prompt for a comment) shall be considered a valid
.IR comment .
.RS 10 
.P
If
.BR \(miy
is not specified and
.BR '\(mi' 
is not specified as a file argument, and the standard input is a
terminal, the prompt described in the STDOUT section shall be written
to standard output before the standard input is read; if the standard
input is not a terminal, no prompt shall be issued. An unescaped
&lt;newline&gt;
shall terminate the comment text. The escape character is
&lt;backslash&gt;.
.P
The
.BR \(miy
option shall be required if the
.IR file
operand is specified as
.BR '\(mi' .
.RE
.IP "\fB\(mip\fP" 10
Write (to standard output) the SCCS file differences before and after
the delta is applied in
.IR diff
format; see
.IR "\fIdiff\fR\^".
.SH OPERANDS
The following operand shall be supported:
.IP "\fIfile\fR" 10
A pathname of an existing SCCS file or a directory. If
.IR file
is a directory, the
.IR delta
utility shall behave as though each file in the directory were
specified as a named file, except that non-SCCS files (last component
of the pathname does not begin with
.BR s. )
and unreadable files shall be silently ignored.
.RS 10 
.P
If exactly one
.IR file
operand appears, and it is
.BR '\(mi' ,
the standard input shall be read; each line of the standard input shall
be taken to be the name of an SCCS file to be processed. Non-SCCS files
and unreadable files shall be silently ignored.
.RE
.SH STDIN
The standard input shall be a text file used only in the following
cases:
.IP " *" 4
To read an
.IR mrlist
or a
.IR comment
(see the
.BR \(mim
and
.BR \(miy
options).
.IP " *" 4
A
.IR file
operand shall be specified as
.BR '\(mi' .
In this case, the
.BR \(miy
option must be used to specify the comment, and if the SCCS file has
the
.BR v
flag set, the
.BR \(mim
option must also be used to specify the MR list.
.SH "INPUT FILES"
Input files shall be text files whose data is to be included in the
SCCS files. If the first character of any line of an input file is
&lt;SOH&gt;
in the POSIX locale, the results are unspecified. If this file contains
more than 99\|999 lines, the number of lines recorded in the header for
this file shall be 99\|999 for this delta.
.SH "ENVIRONMENT VARIABLES"
The following environment variables shall affect the execution of
.IR delta :
.IP "\fILANG\fP" 10
Provide a default value for the internationalization variables that are
unset or null. (See the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 8.2" ", " "Internationalization Variables"
for the precedence of internationalization variables used to determine
the values of locale categories.)
.IP "\fILC_ALL\fP" 10
If set to a non-empty string value, override the values of all the
other internationalization variables.
.IP "\fILC_CTYPE\fP" 10
Determine the locale for the interpretation of sequences of bytes of
text data as characters (for example, single-byte as opposed to
multi-byte characters in arguments and input files).
.IP "\fILC_MESSAGES\fP" 10
.br
Determine the locale that should be used to affect the format and
contents of diagnostic messages written to standard error, and
informative messages written to standard output.
.IP "\fINLSPATH\fP" 10
Determine the location of message catalogs for the processing of
.IR LC_MESSAGES .
.IP "\fITZ\fP" 10
Determine the timezone in which the time and date are written in the
SCCS file. If the
.IR TZ
variable is unset or NULL, an unspecified system default timezone is
used.
.SH "ASYNCHRONOUS EVENTS"
If SIGINT is caught, temporary files shall be cleaned up and
.IR delta
shall exit with a non-zero exit code. The standard action shall
be taken for all other signals; see
.IR "Section 1.4" ", " "Utility Description Defaults".
.SH STDOUT
The standard output shall be used only for the following messages in
the POSIX locale:
.IP " *" 4
Prompts (see the
.BR \(mim
and
.BR \(miy
options) in the following formats:
.RS 4 
.sp
.RS 4
.nf
\fB
"MRs? "
.P
"comments? "
.fi \fR
.P
.RE
.P
The MR prompt, if written, shall always precede the comments prompt.
.RE
.IP " *" 4
A report of each file's activities (unless the
.BR \(mis
option is specified) in the following format:
.RS 4 
.sp
.RS 4
.nf
\fB
"%s\en%d inserted\en%d deleted\en%d unchanged\en", &lt;\fINew SID\fR&gt;,
&lt;\fInumber of lines inserted\fR&gt;, &lt;\fInumber of lines deleted\fR&gt;,
&lt;\fInumber of lines unchanged\fR&gt;
.fi \fR
.P
.RE
.RE
.SH STDERR
The standard error shall be used only for diagnostic messages.
.SH "OUTPUT FILES"
Any SCCS files updated shall be files of an unspecified format.
.SH "EXTENDED DESCRIPTION"
.SS "System Date and Time"
.P
When a delta is added to an SCCS file, the system date and time shall
be recorded for the new delta. If a
.IR get
is performed using an SCCS file with a date recorded apparently in the
future, the behavior is unspecified.
.SH "EXIT STATUS"
The following exit values shall be returned:
.IP "\00" 6
Successful completion.
.IP &gt;0 6
An error occurred.
.SH "CONSEQUENCES OF ERRORS"
Default.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
Problems can arise if the system date and time have been modified (for
example, put forward and then back again, or unsynchronized clocks
across a network) and can also arise when different values of the
.IR TZ
environment variable are used.
.P
Problems of a similar nature can also arise for the operation of the
.IR get
utility, which records the date and time in the file body.
.SH EXAMPLES
None.
.SH RATIONALE
None.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "Section 1.4" ", " "Utility Description Defaults",
.IR "\fIadmin\fR\^",
.IR "\fIdiff\fR\^",
.IR "\fIget\fR\^",
.IR "\fIprs\fR\^",
.IR "\fIrmdel\fR\^"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "Chapter 8" ", " "Environment Variables",
.IR "Section 12.2" ", " "Utility Syntax Guidelines"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.
.TH DF "1" "March 2017" "GNU coreutils 8.27" "User Commands"
.SH NAME
df \- report file system disk space usage
.SH SYNOPSIS
.B df
[\fI\,OPTION\/\fR]... [\fI\,FILE\/\fR]...
.SH DESCRIPTION
This manual page
documents the GNU version of
.BR df .
.B df
displays the amount of disk space available on the file system
containing each file name argument.  If no file name is given, the
space available on all currently mounted file systems is shown.  Disk
space is shown in 1K blocks by default, unless the environment
variable POSIXLY_CORRECT is set, in which case 512-byte blocks are
used.
.PP
If an argument is the absolute file name of a disk device node containing a
mounted file system,
.B df
shows the space available on that file system rather than on the
file system containing the device node.  This version of
.B df
cannot show the space available on unmounted file systems, because on
most kinds of systems doing so requires very nonportable intimate
knowledge of file system structures.
.SH OPTIONS
.PP
Show information about the file system on which each FILE resides,
or all file systems by default.
.PP
Mandatory arguments to long options are mandatory for short options too.
.TP
\fB\-a\fR, \fB\-\-all\fR
include pseudo, duplicate, inaccessible file systems
.TP
\fB\-B\fR, \fB\-\-block\-size\fR=\fI\,SIZE\/\fR
scale sizes by SIZE before printing them; e.g.,
\&amp;'\-BM' prints sizes in units of 1,048,576 bytes;
see SIZE format below
.TP
\fB\-h\fR, \fB\-\-human\-readable\fR
print sizes in powers of 1024 (e.g., 1023M)
.TP
\fB\-H\fR, \fB\-\-si\fR
print sizes in powers of 1000 (e.g., 1.1G)
.TP
\fB\-i\fR, \fB\-\-inodes\fR
list inode information instead of block usage
.TP
\fB\-k\fR
like \fB\-\-block\-size\fR=\fI\,1K\/\fR
.TP
\fB\-l\fR, \fB\-\-local\fR
limit listing to local file systems
.TP
\fB\-\-no\-sync\fR
do not invoke sync before getting usage info (default)
.TP
\fB\-\-output\fR[=\fI\,FIELD_LIST\/\fR]
use the output format defined by FIELD_LIST,
or print all fields if FIELD_LIST is omitted.
.TP
\fB\-P\fR, \fB\-\-portability\fR
use the POSIX output format
.TP
\fB\-\-sync\fR
invoke sync before getting usage info
.TP
\fB\-\-total\fR
elide all entries insignificant to available space,
and produce a grand total
.TP
\fB\-t\fR, \fB\-\-type\fR=\fI\,TYPE\/\fR
limit listing to file systems of type TYPE
.TP
\fB\-T\fR, \fB\-\-print\-type\fR
print file system type
.TP
\fB\-x\fR, \fB\-\-exclude\-type\fR=\fI\,TYPE\/\fR
limit listing to file systems not of type TYPE
.TP
\fB\-v\fR
(ignored)
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-\-version\fR
output version information and exit
.PP
Display values are in units of the first available SIZE from \fB\-\-block\-size\fR,
and the DF_BLOCK_SIZE, BLOCK_SIZE and BLOCKSIZE environment variables.
Otherwise, units default to 1024 bytes (or 512 if POSIXLY_CORRECT is set).
.PP
The SIZE argument is an integer and optional unit (example: 10K is 10*1024).
Units are K,M,G,T,P,E,Z,Y (powers of 1024) or KB,MB,... (powers of 1000).
.PP
FIELD_LIST is a comma\-separated list of columns to be included.  Valid
field names are: 'source', 'fstype', 'itotal', 'iused', 'iavail', 'ipcent',
\&amp;'size', 'used', 'avail', 'pcent', 'file' and 'target' (see info page).
.SH AUTHOR
Written by Torbjorn Granlund, David MacKenzie, and Paul Eggert.
.SH "REPORTING BUGS"
GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt;
.br
Report df translation bugs to &lt;http://translationproject.org/team/&gt;
.SH COPYRIGHT
Copyright \(co 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
Full documentation at: &lt;http://www.gnu.org/software/coreutils/df&gt;
.br
or available locally via: info \(aq(coreutils) df invocation\(aq
.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.40.4.
.TH DIFF "1" "August 2016" "diffutils 3.5" "User Commands"
.SH NAME
diff \- compare files line by line
.SH SYNOPSIS
.B diff
[\fIOPTION\fR]... \fIFILES\fR
.SH DESCRIPTION
Compare FILES line by line.
.PP
Mandatory arguments to long options are mandatory for short options too.
.TP
\fB\-\-normal\fR
output a normal diff (the default)
.TP
\fB\-q\fR, \fB\-\-brief\fR
report only when files differ
.TP
\fB\-s\fR, \fB\-\-report\-identical\-files\fR
report when two files are the same
.TP
\fB\-c\fR, \fB\-C\fR NUM, \fB\-\-context\fR[=\fINUM\fR]
output NUM (default 3) lines of copied context
.TP
\fB\-u\fR, \fB\-U\fR NUM, \fB\-\-unified\fR[=\fINUM\fR]
output NUM (default 3) lines of unified context
.TP
\fB\-e\fR, \fB\-\-ed\fR
output an ed script
.TP
\fB\-n\fR, \fB\-\-rcs\fR
output an RCS format diff
.TP
\fB\-y\fR, \fB\-\-side\-by\-side\fR
output in two columns
.TP
\fB\-W\fR, \fB\-\-width\fR=\fINUM\fR
output at most NUM (default 130) print columns
.TP
\fB\-\-left\-column\fR
output only the left column of common lines
.TP
\fB\-\-suppress\-common\-lines\fR
do not output common lines
.TP
\fB\-p\fR, \fB\-\-show\-c\-function\fR
show which C function each change is in
.TP
\fB\-F\fR, \fB\-\-show\-function\-line\fR=\fIRE\fR
show the most recent line matching RE
.TP
\fB\-\-label\fR LABEL
use LABEL instead of file name and timestamp
(can be repeated)
.TP
\fB\-t\fR, \fB\-\-expand\-tabs\fR
expand tabs to spaces in output
.TP
\fB\-T\fR, \fB\-\-initial\-tab\fR
make tabs line up by prepending a tab
.TP
\fB\-\-tabsize\fR=\fINUM\fR
tab stops every NUM (default 8) print columns
.TP
\fB\-\-suppress\-blank\-empty\fR
suppress space or tab before empty output lines
.TP
\fB\-l\fR, \fB\-\-paginate\fR
pass output through 'pr' to paginate it
.TP
\fB\-r\fR, \fB\-\-recursive\fR
recursively compare any subdirectories found
.TP
\fB\-\-no\-dereference\fR
don't follow symbolic links
.TP
\fB\-N\fR, \fB\-\-new\-file\fR
treat absent files as empty
.TP
\fB\-\-unidirectional\-new\-file\fR
treat absent first files as empty
.TP
\fB\-\-ignore\-file\-name\-case\fR
ignore case when comparing file names
.TP
\fB\-\-no\-ignore\-file\-name\-case\fR
consider case when comparing file names
.TP
\fB\-x\fR, \fB\-\-exclude\fR=\fIPAT\fR
exclude files that match PAT
.TP
\fB\-X\fR, \fB\-\-exclude\-from\fR=\fIFILE\fR
exclude files that match any pattern in FILE
.TP
\fB\-S\fR, \fB\-\-starting\-file\fR=\fIFILE\fR
start with FILE when comparing directories
.TP
\fB\-\-from\-file\fR=\fIFILE1\fR
compare FILE1 to all operands;
FILE1 can be a directory
.TP
\fB\-\-to\-file\fR=\fIFILE2\fR
compare all operands to FILE2;
FILE2 can be a directory
.TP
\fB\-i\fR, \fB\-\-ignore\-case\fR
ignore case differences in file contents
.TP
\fB\-E\fR, \fB\-\-ignore\-tab\-expansion\fR
ignore changes due to tab expansion
.TP
\fB\-Z\fR, \fB\-\-ignore\-trailing\-space\fR
ignore white space at line end
.TP
\fB\-b\fR, \fB\-\-ignore\-space\-change\fR
ignore changes in the amount of white space
.TP
\fB\-w\fR, \fB\-\-ignore\-all\-space\fR
ignore all white space
.TP
\fB\-B\fR, \fB\-\-ignore\-blank\-lines\fR
ignore changes where lines are all blank
.TP
\fB\-I\fR, \fB\-\-ignore\-matching\-lines\fR=\fIRE\fR
ignore changes where all lines match RE
.TP
\fB\-a\fR, \fB\-\-text\fR
treat all files as text
.TP
\fB\-\-strip\-trailing\-cr\fR
strip trailing carriage return on input
.TP
\fB\-D\fR, \fB\-\-ifdef\fR=\fINAME\fR
output merged file with '#ifdef NAME' diffs
.TP
\fB\-\-GTYPE\-group\-format\fR=\fIGFMT\fR
format GTYPE input groups with GFMT
.TP
\fB\-\-line\-format\fR=\fILFMT\fR
format all input lines with LFMT
.TP
\fB\-\-LTYPE\-line\-format\fR=\fILFMT\fR
format LTYPE input lines with LFMT
.IP
These format options provide fine\-grained control over the output
.IP
of diff, generalizing \fB\-D\fR/\-\-ifdef.
.TP
LTYPE is 'old', 'new', or 'unchanged'.
GTYPE is LTYPE or 'changed'.
.IP
GFMT (only) may contain:
.TP
%&lt;
lines from FILE1
.TP
%&gt;
lines from FILE2
.TP
%=
lines common to FILE1 and FILE2
.TP
%[\-][WIDTH][.[PREC]]{doxX}LETTER
printf\-style spec for LETTER
.IP
LETTERs are as follows for new group, lower case for old group:
.TP
F
first line number
.TP
L
last line number
.TP
N
number of lines = L\-F+1
.TP
E
F\-1
.TP
M
L+1
.TP
%(A=B?T:E)
if A equals B then T else E
.IP
LFMT (only) may contain:
.TP
%L
contents of line
.TP
%l
contents of line, excluding any trailing newline
.TP
%[\-][WIDTH][.[PREC]]{doxX}n
printf\-style spec for input line number
.IP
Both GFMT and LFMT may contain:
.TP
%%
%
.TP
%c'C'
the single character C
.TP
%c'\eOOO'
the character with octal code OOO
.TP
C
the character C (other characters represent themselves)
.TP
\fB\-d\fR, \fB\-\-minimal\fR
try hard to find a smaller set of changes
.TP
\fB\-\-horizon\-lines\fR=\fINUM\fR
keep NUM lines of the common prefix and suffix
.TP
\fB\-\-speed\-large\-files\fR
assume large files and many scattered small changes
.TP
\fB\-\-color\fR[=\fIWHEN\fR]
colorize the output; WHEN can be 'never', 'always',
or 'auto' (the default)
.TP
\fB\-\-palette\fR=\fIPALETTE\fR
specify the colors to use when \fB\-\-color\fR is active
PALETTE is a colon\-separated list terminfo capabilities
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-v\fR, \fB\-\-version\fR
output version information and exit
.PP
FILES are 'FILE1 FILE2' or 'DIR1 DIR2' or 'DIR FILE' or 'FILE DIR'.
If \fB\-\-from\-file\fR or \fB\-\-to\-file\fR is given, there are no restrictions on FILE(s).
If a FILE is '\-', read standard input.
Exit status is 0 if inputs are the same, 1 if different, 2 if trouble.
.SH AUTHOR
Written by Paul Eggert, Mike Haertel, David Hayes,
Richard Stallman, and Len Tower.
.SH "REPORTING BUGS"
Report bugs to: bug\-diffutils@gnu.org
.br
GNU diffutils home page: &lt;http://www.gnu.org/software/diffutils/&gt;
.br
General help using GNU software: &lt;http://www.gnu.org/gethelp/&gt;
.SH COPYRIGHT
Copyright \(co 2016 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
wdiff(1), cmp(1), diff3(1), sdiff(1), patch(1)
.PP
The full documentation for
.B diff
is maintained as a Texinfo manual.  If the
.B info
and
.B diff
programs are properly installed at your site, the command
.IP
.B info diff
.PP
should give you access to the complete manual.
.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.
.TH DIRNAME "1" "March 2017" "GNU coreutils 8.27" "User Commands"
.SH NAME
dirname \- strip last component from file name
.SH SYNOPSIS
.B dirname
[\fI\,OPTION\/\fR] \fI\,NAME\/\fR...
.SH DESCRIPTION
.\" Add any additional description here
.PP
Output each NAME with its last non\-slash component and trailing slashes
removed; if NAME contains no /'s, output '.' (meaning the current directory).
.TP
\fB\-z\fR, \fB\-\-zero\fR
end each output line with NUL, not newline
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-\-version\fR
output version information and exit
.SH EXAMPLES
.TP
dirname /usr/bin/
\-&gt; "/usr"
.TP
dirname dir1/str dir2/str
\-&gt; "dir1" followed by "dir2"
.TP
dirname stdio.h
\-&gt; "."
.SH AUTHOR
Written by David MacKenzie and Jim Meyering.
.SH "REPORTING BUGS"
GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt;
.br
Report dirname translation bugs to &lt;http://translationproject.org/team/&gt;
.SH COPYRIGHT
Copyright \(co 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
basename(1), readlink(1)
.PP
.br
Full documentation at: &lt;http://www.gnu.org/software/coreutils/dirname&gt;
.br
or available locally via: info \(aq(coreutils) dirname invocation\(aq
'\" et
.TH DOT "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
dot
\(em execute commands in the current environment
.SH SYNOPSIS
.LP
.nf
\&amp;. \fIfile\fR
.fi
.SH DESCRIPTION
The shell shall execute commands from the
.IR file
in the current environment.
.P
If
.IR file
does not contain a
&lt;slash&gt;,
the shell shall use the search path specified by
.IR PATH
to find the directory containing
.IR file .
Unlike normal command search, however, the file searched for by the
.IR dot
utility need not be executable. If no readable file is found, a
non-interactive shell shall abort; an interactive shell shall write a
diagnostic message to standard error, but this condition shall not be
considered a syntax error.
.SH OPTIONS
None.
.SH OPERANDS
See the DESCRIPTION.
.SH STDIN
Not used.
.SH "INPUT FILES"
See the DESCRIPTION.
.SH "ENVIRONMENT VARIABLES"
See the DESCRIPTION.
.SH "ASYNCHRONOUS EVENTS"
Default.
.SH STDOUT
Not used.
.SH STDERR
The standard error shall be used only for diagnostic messages.
.SH "OUTPUT FILES"
None.
.SH "EXTENDED DESCRIPTION"
None.
.SH "EXIT STATUS"
If no readable file was found or if the commands in the file could not
be parsed, and the shell is interactive (and therefore does not abort; see
.IR "Section 2.8.1" ", " "Consequences of Shell Errors"),
the exit status shall be non-zero. Otherwise, return the value of the
last command executed, or a zero exit status if no command is executed.
.SH "CONSEQUENCES OF ERRORS"
Default.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
None.
.SH EXAMPLES
.LP
.nf
cat foobar
\fBfoo=hello bar=world\fR
\&amp;. ./foobar
echo $foo $bar
\fBhello world\fR
.fi
.SH "RATIONALE"
Some older implementations searched the current directory for the
.IR file ,
even if the value of
.IR PATH
disallowed it. This behavior was omitted from this volume of POSIX.1\(hy2008 due to concerns
about introducing the susceptibility to trojan horses that the user
might be trying to avoid by leaving
.BR dot
out of
.IR PATH .
.P
The KornShell version of
.IR dot
takes optional arguments that are set to the positional parameters.
This is a valid extension that allows a
.IR dot
script to behave identically to a function.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "Section 2.14" ", " "Special Built-In Utilities",
.IR "\fIreturn\fR\^"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.
.TH DU "1" "March 2017" "GNU coreutils 8.27" "User Commands"
.SH NAME
du \- estimate file space usage
.SH SYNOPSIS
.B du
[\fI\,OPTION\/\fR]... [\fI\,FILE\/\fR]...
.br
.B du
[\fI\,OPTION\/\fR]... \fI\,--files0-from=F\/\fR
.SH DESCRIPTION
.\" Add any additional description here
.PP
Summarize disk usage of the set of FILEs, recursively for directories.
.PP
Mandatory arguments to long options are mandatory for short options too.
.TP
\fB\-0\fR, \fB\-\-null\fR
end each output line with NUL, not newline
.TP
\fB\-a\fR, \fB\-\-all\fR
write counts for all files, not just directories
.TP
\fB\-\-apparent\-size\fR
print apparent sizes, rather than disk usage; although
the apparent size is usually smaller, it may be
larger due to holes in ('sparse') files, internal
fragmentation, indirect blocks, and the like
.TP
\fB\-B\fR, \fB\-\-block\-size\fR=\fI\,SIZE\/\fR
scale sizes by SIZE before printing them; e.g.,
\&amp;'\-BM' prints sizes in units of 1,048,576 bytes;
see SIZE format below
.TP
\fB\-b\fR, \fB\-\-bytes\fR
equivalent to '\-\-apparent\-size \fB\-\-block\-size\fR=\fI\,1\/\fR'
.TP
\fB\-c\fR, \fB\-\-total\fR
produce a grand total
.TP
\fB\-D\fR, \fB\-\-dereference\-args\fR
dereference only symlinks that are listed on the
command line
.TP
\fB\-d\fR, \fB\-\-max\-depth\fR=\fI\,N\/\fR
print the total for a directory (or file, with \fB\-\-all\fR)
only if it is N or fewer levels below the command
line argument;  \fB\-\-max\-depth\fR=\fI\,0\/\fR is the same as
\fB\-\-summarize\fR
.TP
\fB\-\-files0\-from\fR=\fI\,F\/\fR
summarize disk usage of the
NUL\-terminated file names specified in file F;
if F is \-, then read names from standard input
.TP
\fB\-H\fR
equivalent to \fB\-\-dereference\-args\fR (\fB\-D\fR)
.TP
\fB\-h\fR, \fB\-\-human\-readable\fR
print sizes in human readable format (e.g., 1K 234M 2G)
.TP
\fB\-\-inodes\fR
list inode usage information instead of block usage
.TP
\fB\-k\fR
like \fB\-\-block\-size\fR=\fI\,1K\/\fR
.TP
\fB\-L\fR, \fB\-\-dereference\fR
dereference all symbolic links
.TP
\fB\-l\fR, \fB\-\-count\-links\fR
count sizes many times if hard linked
.TP
\fB\-m\fR
like \fB\-\-block\-size\fR=\fI\,1M\/\fR
.TP
\fB\-P\fR, \fB\-\-no\-dereference\fR
don't follow any symbolic links (this is the default)
.TP
\fB\-S\fR, \fB\-\-separate\-dirs\fR
for directories do not include size of subdirectories
.TP
\fB\-\-si\fR
like \fB\-h\fR, but use powers of 1000 not 1024
.TP
\fB\-s\fR, \fB\-\-summarize\fR
display only a total for each argument
.TP
\fB\-t\fR, \fB\-\-threshold\fR=\fI\,SIZE\/\fR
exclude entries smaller than SIZE if positive,
or entries greater than SIZE if negative
.TP
\fB\-\-time\fR
show time of the last modification of any file in the
directory, or any of its subdirectories
.TP
\fB\-\-time\fR=\fI\,WORD\/\fR
show time as WORD instead of modification time:
atime, access, use, ctime or status
.TP
\fB\-\-time\-style\fR=\fI\,STYLE\/\fR
show times using STYLE, which can be:
full\-iso, long\-iso, iso, or +FORMAT;
FORMAT is interpreted like in 'date'
.TP
\fB\-X\fR, \fB\-\-exclude\-from\fR=\fI\,FILE\/\fR
exclude files that match any pattern in FILE
.TP
\fB\-\-exclude\fR=\fI\,PATTERN\/\fR
exclude files that match PATTERN
.TP
\fB\-x\fR, \fB\-\-one\-file\-system\fR
skip directories on different file systems
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-\-version\fR
output version information and exit
.PP
Display values are in units of the first available SIZE from \fB\-\-block\-size\fR,
and the DU_BLOCK_SIZE, BLOCK_SIZE and BLOCKSIZE environment variables.
Otherwise, units default to 1024 bytes (or 512 if POSIXLY_CORRECT is set).
.PP
The SIZE argument is an integer and optional unit (example: 10K is 10*1024).
Units are K,M,G,T,P,E,Z,Y (powers of 1024) or KB,MB,... (powers of 1000).
.SH PATTERNS
PATTERN is a shell pattern (not a regular expression).  The pattern
.BR ?
matches any one character, whereas
.BR *
matches any string (composed of zero, one or multiple characters).  For
example,
.BR *.o
will match any files whose names end in
.BR .o .
Therefore, the command
.IP
.B du --exclude=\(aq*.o\(aq
.PP
will skip all files and subdirectories ending in
.BR .o
(including the file
.BR .o
itself).
.SH AUTHOR
Written by Torbjorn Granlund, David MacKenzie, Paul Eggert,
and Jim Meyering.
.SH "REPORTING BUGS"
GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt;
.br
Report du translation bugs to &lt;http://translationproject.org/team/&gt;
.SH COPYRIGHT
Copyright \(co 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
Full documentation at: &lt;http://www.gnu.org/software/coreutils/du&gt;
.br
or available locally via: info \(aq(coreutils) du invocation\(aq
.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.
.TH ECHO "1" "March 2017" "GNU coreutils 8.27" "User Commands"
.SH NAME
echo \- display a line of text
.SH SYNOPSIS
.B echo
[\fI\,SHORT-OPTION\/\fR]... [\fI\,STRING\/\fR]...
.br
.B echo
\fI\,LONG-OPTION\/\fR
.SH DESCRIPTION
.\" Add any additional description here
.PP
Echo the STRING(s) to standard output.
.TP
\fB\-n\fR
do not output the trailing newline
.TP
\fB\-e\fR
enable interpretation of backslash escapes
.TP
\fB\-E\fR
disable interpretation of backslash escapes (default)
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-\-version\fR
output version information and exit
.PP
If \fB\-e\fR is in effect, the following sequences are recognized:
.TP
\e\e
backslash
.TP
\ea
alert (BEL)
.TP
\eb
backspace
.TP
\ec
produce no further output
.TP
\ee
escape
.TP
\ef
form feed
.TP
\en
new line
.TP
\er
carriage return
.TP
\et
horizontal tab
.TP
\ev
vertical tab
.TP
\e0NNN
byte with octal value NNN (1 to 3 digits)
.TP
\exHH
byte with hexadecimal value HH (1 to 2 digits)
.PP
NOTE: your shell may have its own version of echo, which usually supersedes
the version described here.  Please refer to your shell's documentation
for details about the options it supports.
.SH AUTHOR
Written by Brian Fox and Chet Ramey.
.SH "REPORTING BUGS"
GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt;
.br
Report echo translation bugs to &lt;http://translationproject.org/team/&gt;
.SH COPYRIGHT
Copyright \(co 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
Full documentation at: &lt;http://www.gnu.org/software/coreutils/echo&gt;
.br
or available locally via: info \(aq(coreutils) echo invocation\(aq
'\" et
.TH ED "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
ed
\(em edit text
.SH SYNOPSIS
.LP
.nf
ed \fB[\fR\(mip \fIstring\fB] [\fR\(mis\fB] [\fIfile\fB]\fR
.fi
.SH DESCRIPTION
The
.IR ed
utility is a line-oriented text editor that uses two modes:
.IR "command mode"
and
.IR "input mode" .
In command mode the input characters shall be interpreted as commands,
and in input mode they shall be interpreted as text. See the EXTENDED
DESCRIPTION section.
.P
If an operand is
.BR '\(mi' ,
the results are unspecified.
.SH OPTIONS
The
.IR ed
utility shall conform to the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 12.2" ", " "Utility Syntax Guidelines",
except for the unspecified usage of
.BR '\(mi' .
.P
The following options shall be supported:
.IP "\fB\(mip\ \fIstring\fR" 10
Use
.IR string
as the prompt string when in command mode. By default, there shall be
no prompt string.
.IP "\fB\(mis\fP" 10
Suppress the writing of byte counts by
.BR e ,
.BR E ,
.BR r ,
and
.BR w
commands and of the
.BR '!' 
prompt after a !\fIcommand\fR.
.SH OPERANDS
The following operand shall be supported:
.IP "\fIfile\fR" 10
If the
.IR file
argument is given,
.IR ed
shall simulate an
.BR e
command on the file named by the pathname,
.IR file ,
before accepting commands from the standard input.
.SH STDIN
The standard input shall be a text file consisting of commands, as
described in the EXTENDED DESCRIPTION section.
.SH "INPUT FILES"
The input files shall be text files.
.SH "ENVIRONMENT VARIABLES"
The following environment variables shall affect the execution of
.IR ed :
.IP "\fIHOME\fP" 10
Determine the pathname of the user's home directory.
.IP "\fILANG\fP" 10
Provide a default value for the internationalization variables that are
unset or null. (See the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 8.2" ", " "Internationalization Variables"
for the precedence of internationalization variables used to determine
the values of locale categories.)
.IP "\fILC_ALL\fP" 10
If set to a non-empty string value, override the values of all the
other internationalization variables.
.IP "\fILC_COLLATE\fP" 10
.br
Determine the locale for the behavior of ranges, equivalence classes,
and multi-character collating elements within regular expressions.
.IP "\fILC_CTYPE\fP" 10
Determine the locale for the interpretation of sequences of bytes of
text data as characters (for example, single-byte as opposed to
multi-byte characters in arguments and input files) and the behavior of
character classes within regular expressions.
.IP "\fILC_MESSAGES\fP" 10
.br
Determine the locale that should be used to affect the format and
contents of diagnostic messages written to standard error and
informative messages written to standard output.
.IP "\fINLSPATH\fP" 10
Determine the location of message catalogs for the processing of
.IR LC_MESSAGES .
.SH "ASYNCHRONOUS EVENTS"
The
.IR ed
utility shall take the standard action for all signals (see the
ASYNCHRONOUS EVENTS section in
.IR "Section 1.4" ", " "Utility Description Defaults")
with the following exceptions:
.IP SIGINT 10
The
.IR ed
utility shall interrupt its current activity, write the string
.BR \(dq?\en\(dq 
to standard output, and return to command mode (see the EXTENDED
DESCRIPTION section).
.IP SIGHUP 10
If the buffer is not empty and has changed since the last write, the
.IR ed
utility shall attempt to write a copy of the buffer in a file. First,
the file named
.BR ed.hup
in the current directory shall be used; if that fails, the file named
.BR ed.hup
in the directory named by the
.IR HOME
environment variable shall be used. In any case, the
.IR ed
utility shall exit without writing the file to the currently
remembered pathname and without returning to command mode.
.IP SIGQUIT 10
The
.IR ed
utility shall ignore this event.
.SH STDOUT
Various editing commands and the prompting feature (see
.BR \(mip )
write to standard output, as described in the EXTENDED DESCRIPTION
section.
.SH STDERR
The standard error shall be used only for diagnostic messages.
.SH "OUTPUT FILES"
The output files shall be text files whose formats are dependent on the
editing commands given.
.SH "EXTENDED DESCRIPTION"
The
.IR ed
utility shall operate on a copy of the file it is editing; changes made
to the copy shall have no effect on the file until a
.BR w
(write) command is given. The copy of the text is called the
.IR buffer .
.P
Commands to
.IR ed
have a simple and regular structure: zero, one, or two
.IR addresses
followed by a single-character
.IR command ,
possibly followed by parameters to that command. These addresses
specify one or more lines in the buffer. Every command that requires
addresses has default addresses, so that the addresses very often can
be omitted. If the
.BR \(mip
option is specified, the prompt string shall be written to standard
output before each command is read.
.P
In general, only one command can appear on a line. Certain commands
allow text to be input. This text is placed in the appropriate place in
the buffer. While
.IR ed
is accepting text, it is said to be in \fIinput mode\fR. In this mode,
no commands shall be recognized; all input is merely collected. Input
mode is terminated by entering a line consisting of two characters: a
&lt;period&gt;
(\c
.BR '.' )
followed by a
&lt;newline&gt;.
This line is not considered part of the input text.
.SS "Regular Expressions in ed"
.P
The
.IR ed
utility shall support basic regular expressions, as described in the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 9.3" ", " "Basic Regular Expressions".
Since regular expressions in
.IR ed
are always matched against single lines (excluding the terminating
&lt;newline&gt;
characters), never against any larger section of text, there is no way
for a regular expression to match a
&lt;newline&gt;.
.P
A null RE shall be equivalent to the last RE encountered.
.P
Regular expressions are used in addresses to specify lines, and in some
commands (for example, the
.BR s
substitute command) to specify portions of a line to be substituted.
.SS "Addresses in ed"
.P
Addressing in
.IR ed
relates to the current line. Generally, the current line is the last
line affected by a command. The current line number is the address of
the current line. If the edit buffer is not empty, the initial value
for the current line shall be the last line in the edit buffer;
otherwise, zero.
.P
Addresses shall be constructed as follows:
.IP " 1." 4
The
&lt;period&gt;
character (\c
.BR '.' )
shall address the current line.
.IP " 2." 4
The
&lt;dollar-sign&gt;
character (\c
.BR '$' )
shall address the last line of the edit buffer.
.IP " 3." 4
The positive decimal number
.IR n
shall address the
.IR n th
line of the edit buffer.
.IP " 4." 4
The
&lt;apostrophe&gt;-x
character pair (\c
.BR \(dq'x\(dq )
shall address the line marked with the mark name character
.IR x ,
which shall be a lowercase letter from the portable character set. It
shall be an error if the character has not been set to mark a line or
if the line that was marked is not currently present in the edit
buffer.
.IP " 5." 4
A BRE enclosed by
&lt;slash&gt;
characters (\c
.BR '/' )
shall address the first line found by searching forwards from the line
following the current line toward the end of the edit buffer and
stopping at the first line for which the line excluding the
terminating
&lt;newline&gt;
matches the BRE. The BRE consisting of a null BRE delimited by a pair of
&lt;slash&gt;
characters shall address the next line for which the line excluding
the terminating
&lt;newline&gt;
matches the last BRE encountered. In addition, the second
&lt;slash&gt;
can be omitted at the end of a command line. Within the BRE, a
&lt;backslash&gt;-\c
&lt;slash&gt;
pair (\c
.BR \(dq\e/\(dq )
shall represent a literal
&lt;slash&gt;
instead of the BRE delimiter. If necessary, the search shall wrap around
to the beginning of the buffer and continue up to and including the
current line, so that the entire buffer is searched.
.IP " 6." 4
A BRE enclosed by
&lt;question-mark&gt;
characters (\c
.BR '?' )
shall address the first line found by searching backwards from the line
preceding the current line toward the beginning of the edit buffer and
stopping at the first line for which the line excluding the terminating
&lt;newline&gt;
matches the BRE. The BRE consisting of a null BRE delimited by a pair
of
&lt;question-mark&gt;
characters (\c
.BR \(dq??\(dq )
shall address the previous line for which the line excluding the
terminating
&lt;newline&gt;
matches the last BRE encountered. In addition, the second
&lt;question-mark&gt;
can be omitted at the end of a command line. Within the
BRE, a
&lt;backslash&gt;-\c
&lt;question-mark&gt;
pair (\c
.BR \(dq\e?\(dq )
shall represent a literal
&lt;question-mark&gt;
instead of the BRE delimiter. If necessary, the search shall wrap around
to the end of the buffer and continue up to and including the current
line, so that the entire buffer is searched.
.IP " 7." 4
A
&lt;plus-sign&gt;
(\c
.BR '\(pl' )
or
&lt;hyphen&gt;
character (\c
.BR '\(mi' )
followed by a decimal number shall address the current line plus or
minus the number. A
&lt;plus-sign&gt;
or
&lt;hyphen&gt;
character not followed by a decimal number shall address the current
line plus or minus 1.
.P
Addresses can be followed by zero or more address offsets, optionally
&lt;blank&gt;-separated.
Address offsets are constructed as follows:
.IP " *" 4
A
&lt;plus-sign&gt;
or
&lt;hyphen&gt;
character followed by a decimal number shall add or subtract,
respectively, the indicated number of lines to or from the address. A
&lt;plus-sign&gt;
or
&lt;hyphen&gt;
character not followed by a decimal number shall add or subtract 1 to
or from the address.
.IP " *" 4
A decimal number shall add the indicated number of lines to the
address.
.P
It shall not be an error for an intermediate address value to be less
than zero or greater than the last line in the edit buffer. It shall be
an error for the final address value to be less than zero or greater
than the last line in the edit buffer. It shall be an error if a search
for a BRE fails to find a matching line.
.P
Commands accept zero, one, or two addresses. If more than the required
number of addresses are provided to a command that requires zero
addresses, it shall be an error. Otherwise, if more than the required
number of addresses are provided to a command, the addresses specified
first shall be evaluated and then discarded until the maximum number of
valid addresses remain, for the specified command.
.P
Addresses shall be separated from each other by a
&lt;comma&gt;
(\c
.BR ',' )
or
&lt;semicolon&gt;
character (\c
.BR ';' ).
In the case of a
&lt;semicolon&gt;
separator, the current line (\c
.BR '.' )
shall be set to the first address, and only then will the second
address be calculated. This feature can be used to determine the
starting line for forwards and backwards searches; see rules 5. and
6.
.P
Addresses can be omitted on either side of the
&lt;comma&gt;
or
&lt;semicolon&gt;
separator, in which case the resulting address pairs shall be as
follows:
.TS
center box tab(!);
cB | cB
lf5 | lf5.
Specified!Resulting
_
\&amp;,!1 , $
\&amp;, addr!1 , addr
addr ,!addr , addr
;!. ; $
; addr!. ; addr
addr ;!addr ; addr
.TE
.P
Any
&lt;blank&gt;
characters included between addresses, address separators, or address
offsets shall be ignored.
.SS "Commands in ed"
.P
In the following list of
.IR ed
commands, the default addresses are shown in parentheses. The number of
addresses shown in the default shall be the number expected by the
command. The parentheses are not part of the address; they show that
the given addresses are the default.
.P
It is generally invalid for more than one command to appear on a line.
However, any command (except
.BR e ,
.BR E ,
.BR f ,
.BR q ,
.BR Q ,
.BR r ,
.BR w ,
and
.BR ! )
can be suffixed by the letter
.BR l ,
.BR n ,
or
.BR p ;
in which case, except for the
.BR l ,
.BR n ,
and
.BR p
commands, the command shall be executed and then the new current line
shall be written as described below under the
.BR l ,
.BR n ,
and
.BR p
commands. When an
.BR l ,
.BR n ,
or
.BR p
suffix is used with an
.BR l ,
.BR n ,
or
.BR p
command, the command shall write to standard output as described below,
but it is unspecified whether the suffix writes the current line again
in the requested format or whether the suffix has no effect. For
example, the
.BR pl
command (base
.BR p
command with an
.BR l
suffix) shall either write just the current line or write it
twice\(emonce as specified for
.BR p
and once as specified for
.BR l .
Also, the
.BR g ,
.BR G ,
.BR v ,
and
.BR V
commands shall take a command as a parameter.
.P
Each address component can be preceded by zero or more
&lt;blank&gt;
characters. The command letter can be preceded by zero or more
&lt;blank&gt;
characters. If a suffix letter (\c
.BR l ,
.BR n ,
or
.BR p )
is given, the application shall ensure that it immediately follows the
command.
.P
The
.BR e ,
.BR E ,
.BR f ,
.BR r ,
and
.BR w
commands shall take an optional
.IR file
parameter, separated from the command letter by one or more
&lt;blank&gt;
characters.
.P
If changes have been made in the buffer since the last
.BR w
command that wrote the entire buffer,
.IR ed
shall warn the user if an attempt is made to destroy the editor buffer
via the
.BR e
or
.BR q
commands. The
.IR ed
utility shall write the string:
.sp
.RS 4
.nf
\fB
"?\en"
.fi \fR
.P
.RE
.P
(followed by an explanatory message if
.IR "help mode"
has been enabled via the
.BR H
command) to standard output and shall continue in command mode with the
current line number unchanged. If the
.BR e
or
.BR q
command is repeated with no intervening command, it shall take effect.
.P
If a terminal disconnect (see the Base Definitions volume of POSIX.1\(hy2008,
.IR "Chapter 11" ", " "General Terminal Interface",
Modem Disconnect and Closing a Device Terminal), is detected:
.IP " *" 4
If accompanied by a SIGHUP signal, the
.IR ed
utility shall operate as described in the ASYNCHRONOUS EVENTS section
for a SIGHUP signal.
.IP " *" 4
If not accompanied by a SIGHUP signal, the
.IR ed
utility shall act as if an end-of-file had been detected on standard
input.
.P
If an end-of-file is detected on standard input:
.IP " *" 4
If the
.IR ed
utility is in input mode,
.IR ed
shall terminate input mode and return to command mode. It is
unspecified if any partially entered lines (that is, input text without
a terminating
&lt;newline&gt;)
are discarded from the input text.
.IP " *" 4
If the
.IR ed
utility is in command mode, it shall act as if a
.BR q
command had been entered.
.P
If the closing delimiter of an RE or of a replacement string (for
example,
.BR '/' )
in a
.BR g ,
.BR G ,
.BR s ,
.BR v ,
or
.BR V
command would be the last character before a
&lt;newline&gt;,
that delimiter can be omitted, in which case the addressed line shall
be written. For example, the following pairs of commands are
equivalent:
.sp
.RS 4
.nf
\fB
s/s1/s2   s/s1/s2/p
g/s1      g/s1/p
?s1       ?s1?
.fi \fR
.P
.RE
.P
If an invalid command is entered,
.IR ed
shall write the string:
.sp
.RS 4
.nf
\fB
"?\en"
.fi \fR
.P
.RE
.P
(followed by an explanatory message if
.IR "help mode"
has been enabled via the
.BR H
command) to standard output and shall continue in command mode with the
current line number unchanged.
.SS "Append Command"
.IP "\fISynopsis\fR:" 10
.sp -1v
.RS 10 
.sp
.RS 4
.nf
\fB
(.)a
&lt;\fItext\fR&gt;
\&amp;.
.fi \fR
.P
.RE
.RE
.P
The
.BR a
command shall read the given text and append it after the addressed
line; the current line number shall become the address of the last
inserted line or, if there were none, the addressed line. Address 0
shall be valid for this command; it shall cause the appended text to be
placed at the beginning of the buffer.
.SS "Change Command"
.IP "\fISynopsis\fR:" 10
.sp -1v
.RS 10 
.sp
.RS 4
.nf
\fB
(.,.)c
&lt;\fItext\fR&gt;
\&amp;.
.fi \fR
.P
.RE
.RE
.P
The
.BR c
command shall delete the addressed lines, then accept input text that
replaces these lines; the current line shall be set to the address of
the last line input; or, if there were none, at the line after the last
line deleted; if the lines deleted were originally at the end of the
buffer, the current line number shall be set to the address of the new
last line; if no lines remain in the buffer, the current line number
shall be set to zero. Address 0 shall be valid for this command; it
shall be interpreted as if address 1 were specified.
.SS "Delete Command"
.IP "\fISynopsis\fR:" 10
.sp -1v
.RS 10 
.sp
.RS 4
.nf
\fB
(.,.)d
.fi \fR
.P
.RE
.RE
.P
The
.BR d
command shall delete the addressed lines from the buffer. The address
of the line after the last line deleted shall become the current line
number; if the lines deleted were originally at the end of the buffer,
the current line number shall be set to the address of the new last
line; if no lines remain in the buffer, the current line number shall
be set to zero.
.SS "Edit Command"
.IP "\fISynopsis\fR:" 10
.sp -1v
.RS 10 
.sp
.RS 4
.nf
\fB
e \fB[\fIfile\fB]\fR
.fi \fR
.P
.RE
.RE
.P
The
.BR e
command shall delete the entire contents of the buffer and then read in
the file named by the pathname
.IR file .
The current line number shall be set to the address of the last line of
the buffer. If no pathname is given, the currently remembered pathname,
if any, shall be used (see the
.BR f
command). The number of bytes read shall be written to standard output,
unless the
.BR \(mis
option was specified, in the following format:
.sp
.RS 4
.nf
\fB
"%d\en", &lt;\fInumber of bytes read\fR&gt;
.fi \fR
.P
.RE
.P
The name \fIfile\fR shall be remembered for possible use as a default
pathname in subsequent
.BR e ,
.BR E ,
.BR r ,
and
.BR w
commands. If
.IR file
is replaced by
.BR '!' ,
the rest of the line shall be taken to be a shell command line whose
output is to be read. Such a shell command line shall not be remembered
as the current
.IR file .
All marks shall be discarded upon the completion of a successful
.BR e
command. If the buffer has changed since the last time the entire
buffer was written, the user shall be warned, as described previously.
.SS "Edit Without Checking Command"
.IP "\fISynopsis\fR:" 10
.sp -1v
.RS 10 
.sp
.RS 4
.nf
\fB
E \fB[\fIfile\fB]\fR
.fi \fR
.P
.RE
.RE
.P
The
.BR E
command shall possess all properties and restrictions of the
.BR e
command except that the editor shall not check to see whether any
changes have been made to the buffer since the last
.BR w
command.
.SS "Filename Command"
.IP "\fISynopsis\fR:" 10
.sp -1v
.RS 10 
.sp
.RS 4
.nf
\fB
f \fB[\fIfile\fB]\fR
.fi \fR
.P
.RE
.RE
.P
If
.IR file
is given, the
.BR f
command shall change the currently remembered pathname to
.IR file ;
whether the name is changed or not, it shall then write the (possibly
new) currently remembered pathname to the standard output in the
following format:
.sp
.RS 4
.nf
\fB
"%s\en", &lt;\fIpathname\fR&gt;
.fi \fR
.P
.RE
.P
The current line number shall be unchanged.
.SS "Global Command"
.IP "\fISynopsis\fR:" 10
.sp -1v
.RS 10 
.sp
.RS 4
.nf
\fB
(1,$)g/\fIRE\fR/\fIcommand list\fR
.fi \fR
.P
.RE
.RE
.P
In the
.BR g
command, the first step shall be to mark every line for which the
line excluding the terminating
&lt;newline&gt;
matches the given RE. Then, going sequentially from the beginning of
the file to the end of the file, the given
.IR "command list"
shall be executed for each marked line, with the current line number
set to the address of that line. Any line modified by the
.IR "command list"
shall be unmarked. When the
.BR g
command completes, the current line number shall have the value
assigned by the last command in the
.IR "command list" .
If there were no matching lines, the current line number shall not be
changed. A single command or the first of a list of commands shall
appear on the same line as the global command. All lines of a
multi-line list except the last line shall be ended with a
&lt;backslash&gt;
preceding the terminating
&lt;newline&gt;;
the
.BR a ,
.BR i ,
and
.BR c
commands and associated input are permitted. The
.BR '.' 
terminating input mode can be omitted if it would be the last line of
the \fIcommand list\fR. An empty \fIcommand list\fR shall be equivalent
to the
.BR p
command. The use of the
.BR g ,
.BR G ,
.BR v ,
.BR V ,
and
.BR !
commands in the
.IR "command list"
produces undefined results. Any character other than
&lt;space&gt;
or
&lt;newline&gt;
can be used instead of a
&lt;slash&gt;
to delimit the RE. Within the RE, the RE delimiter itself can be used
as a literal character if it is preceded by a
&lt;backslash&gt;.
.SS "Interactive Global Command"
.IP "\fISynopsis\fR:" 10
.sp -1v
.RS 10 
.sp
.RS 4
.nf
\fB
(1,$)G/\fIRE\fR/
.fi \fR
.P
.RE
.RE
.P
In the
.BR G
command, the first step shall be to mark every line for which the line
excluding the terminating
&lt;newline&gt;
matches the given RE. Then, for every such line, that line shall be
written, the current line number shall be set to the address of that
line, and any one command (other than one of the
.BR a ,
.BR c ,
.BR i ,
.BR g ,
.BR G ,
.BR v ,
and
.BR V
commands) shall be read and executed. A
&lt;newline&gt;
shall act as a null command (causing no action to be taken on
the current line); an
.BR '&amp;' 
shall cause the re-execution of the most recent non-null command
executed within the current invocation of
.BR G .
Note that the commands input as part of the execution of the
.BR G
command can address and affect any lines in the buffer. Any line
modified by the command shall be unmarked. The final value
of the current line number shall be the value set by the last command
successfully executed. (Note that the last command successfully
executed shall be the
.BR G
command itself if a command fails or the null command is specified.) If
there were no matching lines, the current line number shall not be
changed. The
.BR G
command can be terminated by a SIGINT signal. Any character other than
&lt;space&gt;
or
&lt;newline&gt;
can be used instead of a
&lt;slash&gt;
to delimit the RE and the replacement. Within the RE, the RE delimiter
itself can be used as a literal character if it is preceded by a
&lt;backslash&gt;.
.SS "Help Command"
.IP "\fISynopsis\fR:" 10
.sp -1v
.RS 10 
.sp
.RS 4
.nf
\fB
h
.fi \fR
.P
.RE
.RE
.P
The
.BR h
command shall write a short message to standard output that explains
the reason for the most recent
.BR '?' 
notification. The current line number shall be unchanged.
.SS "Help-Mode Command"
.IP "\fISynopsis\fR:" 10
.sp -1v
.RS 10 
.sp
.RS 4
.nf
\fB
H
.fi \fR
.P
.RE
.RE
.P
The
.BR H
command shall cause
.IR ed
to enter a mode in which help messages (see the
.BR h
command) shall be written to standard output for all subsequent
.BR '?' 
notifications. The
.BR H
command alternately shall turn this mode on and off; it is initially
off. If the help-mode is being turned on, the
.BR H
command also explains the previous
.BR '?' 
notification, if there was one. The current line number shall be
unchanged.
.SS "Insert Command"
.IP "\fISynopsis\fR:" 10
.sp -1v
.RS 10 
.sp
.RS 4
.nf
\fB
(.)i
&lt;\fItext\fR&gt;
\&amp;.
.fi \fR
.P
.RE
.RE
.P
The
.BR i
command shall insert the given text before the addressed line; the
current line is set to the last inserted line or, if there was none, to
the addressed line. This command differs from the
.BR a
command only in the placement of the input text. Address 0 shall be
valid for this command; it shall be interpreted as if address 1 were
specified.
.SS "Join Command"
.IP "\fISynopsis\fR:" 10
.sp -1v
.RS 10 
.sp
.RS 4
.nf
\fB
(.,.+1)j
.fi \fR
.P
.RE
.RE
.P
The
.BR j
command shall join contiguous lines by removing the appropriate
&lt;newline&gt;
characters. If exactly one address is given, this command shall do
nothing. If lines are joined, the current line number shall be set to
the address of the joined line; otherwise, the current line number shall
be unchanged.
.SS "Mark Command"
.IP "\fISynopsis\fR:" 10
.sp -1v
.RS 10 
.sp
.RS 4
.nf
\fB
(.)k\fIx\fR
.fi \fR
.P
.RE
.RE
.P
The
.BR k
command shall mark the addressed line with name
.IR x ,
which the application shall ensure is a lowercase letter from the
portable character set. The address
.BR \(dq'x\(dq 
shall then refer to this line; the current line number shall be
unchanged.
.SS "List Command"
.IP "\fISynopsis\fR:" 10
.sp -1v
.RS 10 
.sp
.RS 4
.nf
\fB
(.,.)l
.fi \fR
.P
.RE
.RE
.P
The
.BR l
command shall write to standard output the addressed lines in a
visually unambiguous form. The characters listed in the Base Definitions volume of POSIX.1\(hy2008,
.IR "Table 5-1" ", " "Escape Sequences and Associated Actions"
(\c
.BR '\e\e' ,
.BR '\ea' ,
.BR '\eb' ,
.BR '\ef' ,
.BR '\er' ,
.BR '\et' ,
.BR '\ev' )
shall be written as the corresponding escape sequence; the
.BR '\en' 
in that table is not applicable. Non-printable characters not in the
table shall be written as one three-digit octal number (with a
preceding
&lt;backslash&gt;
character) for each byte in the character (most significant byte first).
.P
Long lines shall be folded, with the point of folding indicated by
&lt;newline&gt;
preceded by a
&lt;backslash&gt;;
the length at which folding occurs is unspecified, but should be
appropriate for the output device. The end of each line shall be marked
with a
.BR '$' ,
and
.BR '$' 
characters within the text shall be written with a preceding
&lt;backslash&gt;.
An
.BR l
command can be appended to any other command other than
.BR e ,
.BR E ,
.BR f ,
.BR q ,
.BR Q ,
.BR r ,
.BR w ,
or
.BR ! .
The current line number shall be set to the address of the last line
written.
.SS "Move Command"
.IP "\fISynopsis\fR:" 10
.sp -1v
.RS 10 
.sp
.RS 4
.nf
\fB
(.,.)m\fIaddress\fR
.fi \fR
.P
.RE
.RE
.P
The
.BR m
command shall reposition the addressed lines after the line addressed
by
.IR address .
Address 0 shall be valid for
.IR address
and cause the addressed lines to be moved to the beginning of the
buffer. It shall be an error if address
.IR address
falls within the range of moved lines. The current line number shall be
set to the address of the last line moved.
.SS "Number Command"
.IP "\fISynopsis\fR:" 10
.sp -1v
.RS 10 
.sp
.RS 4
.nf
\fB
(.,.)n
.fi \fR
.P
.RE
.RE
.P
The
.BR n
command shall write to standard output the addressed lines, preceding
each line by its line number and a
&lt;tab&gt;;
the current line number shall be set to the address of the last line
written. The
.BR n
command can be appended to any command other than
.BR e ,
.BR E ,
.BR f ,
.BR q ,
.BR Q ,
.BR r ,
.BR w ,
or
.BR ! .
.SS "Print Command"
.IP "\fISynopsis\fR:" 10
.sp -1v
.RS 10 
.sp
.RS 4
.nf
\fB
(.,.)p
.fi \fR
.P
.RE
.RE
.P
The
.BR p
command shall write to standard output the addressed lines; the current
line number shall be set to the address of the last line written. The
.BR p
command can be appended to any command other than
.BR e ,
.BR E ,
.BR f ,
.BR q ,
.BR Q ,
.BR r ,
.BR w ,
or
.BR ! .
.SS "Prompt Command"
.IP "\fISynopsis\fR:" 10
.sp -1v
.RS 10 
.sp
.RS 4
.nf
\fB
P
.fi \fR
.P
.RE
.RE
.P
The
.BR P
command shall cause
.IR ed
to prompt with an
&lt;asterisk&gt;
(\c
.BR '*' )
(or
.IR string ,
if
.BR \(mip
is specified) for all subsequent commands. The
.BR P
command alternatively shall turn this mode on and off; it shall be
initially on if the
.BR \(mip
option is specified; otherwise, off. The current line number shall be
unchanged.
.SS "Quit Command"
.IP "\fISynopsis\fR:" 10
.sp -1v
.RS 10 
.sp
.RS 4
.nf
\fB
q
.fi \fR
.P
.RE
.RE
.P
The
.BR q
command shall cause
.IR ed
to exit. If the buffer has changed since the last time the entire
buffer was written, the user shall be warned, as described previously.
.SS "Quit Without Checking Command"
.IP "\fISynopsis\fR:" 10
.sp -1v
.RS 10 
.sp
.RS 4
.nf
\fB
Q
.fi \fR
.P
.RE
.RE
.P
The
.BR Q
command shall cause
.IR ed
to exit without checking whether changes have been made in the buffer
since the last
.BR w
command.
.SS "Read Command"
.IP "\fISynopsis\fR:" 10
.sp -1v
.RS 10 
.sp
.RS 4
.nf
\fB
($)r\fB [\fIfile\fB]\fR
.fi \fR
.P
.RE
.RE
.P
The
.BR r
command shall read in the file named by the pathname
.IR file
and append it after the addressed line. If no
.IR file
argument is given, the currently remembered pathname, if any, shall be
used (see the
.BR e
and
.BR f
commands). The currently remembered pathname shall not be changed
unless there is no remembered pathname. Address 0 shall be valid for
.BR r
and shall cause the file to be read at the beginning of the buffer. If
the read is successful, and
.BR \(mis
was not specified, the number of bytes read shall be written to
standard output in the following format:
.sp
.RS 4
.nf
\fB
"%d\en", &lt;\fInumber of bytes read\fR&gt;
.fi \fR
.P
.RE
.P
The current line number shall be set to the address of the last line
read in. If
.IR file
is replaced by
.BR '!' ,
the rest of the line shall be taken to be a shell command line whose
output is to be read. Such a shell command line shall not be remembered
as the current pathname.
.SS "Substitute Command"
.IP "\fISynopsis\fR:" 10
.sp -1v
.RS 10 
.sp
.RS 4
.nf
\fB
(.,.)s/\fIRE\fR/\fIreplacement\fR/\fIflags\fR
.fi \fR
.P
.RE
.RE
.P
The
.BR s
command shall search each addressed line for an occurrence of the
specified RE and replace either the first or all (non-overlapped)
matched strings with the
.IR replacement ;
see the following description of the
.BR g
suffix. It is an error if the substitution fails on every addressed
line. Any character other than
&lt;space&gt;
or
&lt;newline&gt;
can be used instead of a
&lt;slash&gt;
to delimit the RE and the replacement. Within the RE, the RE delimiter
itself can be used as a literal character if it is preceded by a
&lt;backslash&gt;.
The current line shall be set to the address of the last line on which
a substitution occurred.
.P
An
&lt;ampersand&gt;
(\c
.BR '&amp;' )
appearing in the
.IR replacement
shall be replaced by the string matching the RE on the current line.
The special meaning of
.BR '&amp;' 
in this context can be suppressed by preceding it by
&lt;backslash&gt;.
As a more general feature, the characters
.BR '\en' ,
where
.IR n
is a digit, shall be replaced by the text matched by the corresponding
back-reference expression. If the corresponding back-reference
expression does not match, then the characters
.BR '\en' 
shall be replaced by the empty string. When the character
.BR '%' 
is the only character in the
.IR replacement ,
the
.IR replacement
used in the most recent substitute command shall be used as the
.IR replacement
in the current substitute command; if there was no previous substitute
command, the use of
.BR '%' 
in this manner shall be an error. The
.BR '%' 
shall lose its special meaning when it is in a replacement string of
more than one character or is preceded by a
&lt;backslash&gt;.
For each
&lt;backslash&gt;
encountered in scanning
.IR replacement
from beginning to end, the following character shall lose its special
meaning (if any). It is unspecified what special meaning is given to
any character other than
&lt;backslash&gt;,
.BR '&amp;' ,
.BR '%' ,
or digits.
.P
A line can be split by substituting a
&lt;newline&gt;
into it. The application shall ensure it escapes the
&lt;newline&gt;
in the
.IR replacement
by preceding it by
&lt;backslash&gt;.
Such substitution cannot be done as part of a
.BR g
or
.BR v
.IR "command list" .
The current line number shall be set to the address of the last line on
which a substitution is performed. If no substitution is performed, the
current line number shall be unchanged. If a line is split, a
substitution shall be considered to have been performed on each of the
new lines for the purpose of determining the new current line number. A
substitution shall be considered to have been performed even if the
replacement string is identical to the string that it replaces.
.P
The application shall ensure that the value of
.IR flags
is zero or more of:
.IP "\fIcount\fR" 8
Substitute for the
.IR count th
occurrence only of the RE found on each addressed line.
.IP "\fBg\fR" 8
Globally substitute for all non-overlapping instances of the RE rather
than just the first one. If both
.BR g
and
.IR count
are specified, the results are unspecified.
.IP "\fBl\fR" 8
Write to standard output the final line in which a substitution was
made. The line shall be written in the format specified for the
.BR l
command.
.IP "\fBn\fR" 8
Write to standard output the final line in which a substitution was
made. The line shall be written in the format specified for the
.BR n
command.
.IP "\fBp\fR" 8
Write to standard output the final line in which a substitution was
made. The line shall be written in the format specified for the
.BR p
command.
.SS "Copy Command"
.IP "\fISynopsis\fR:" 10
.sp -1v
.RS 10 
.sp
.RS 4
.nf
\fB
(.,.)t\fIaddress\fR
.fi \fR
.P
.RE
.RE
.P
The
.BR t
command shall be equivalent to the
.BR m
command, except that a copy of the addressed lines shall be placed
after address
.IR address
(which can be 0); the current line number shall be set to the address
of the last line added.
.SS "Undo Command"
.IP "\fISynopsis\fR:" 10
.sp -1v
.RS 10 
.sp
.RS 4
.nf
\fB
u
.fi \fR
.P
.RE
.RE
.P
The
.BR u
command shall nullify the effect of the most recent command that
modified anything in the buffer, namely the most recent
.BR a ,
.BR c ,
.BR d ,
.BR g ,
.BR i ,
.BR j ,
.BR m ,
.BR r ,
.BR s ,
.BR t ,
.BR u ,
.BR v ,
.BR G ,
or
.BR V
command. All changes made to the buffer by a
.BR g ,
.BR G ,
.BR v ,
or
.BR V
global command shall be undone as a single change; if no changes were
made by the global command (such as with
.BR g /RE/\c
.BR p ),
the
.BR u
command shall have no effect. The current line number shall be set to
the value it had immediately before the command being undone started.
.SS "Global Non-Matched Command"
.IP "\fISynopsis\fR:" 10
.sp -1v
.RS 10 
.sp
.RS 4
.nf
\fB
(1,$)v\fR/\fIRE\fR/\fIcommand list\fR
.fi \fR
.P
.RE
.RE
.P
This command shall be equivalent to the global command
.BR g
except that the lines that are marked during the first step shall be
those for which the line excluding the terminating
&lt;newline&gt;
does not match the RE.
.SS "Interactive Global Not-Matched Command"
.IP "\fISynopsis\fR:" 10
.sp -1v
.RS 10 
.sp
.RS 4
.nf
\fB
(1,$)V\fR/\fIRE\fR/
.fi \fR
.P
.RE
.RE
.P
This command shall be equivalent to the interactive global command
.BR G
except that the lines that are marked during the first step shall be
those for which the line excluding the terminating
&lt;newline&gt;
does not match the RE.
.SS "Write Command"
.IP "\fISynopsis\fR:" 10
.sp -1v
.RS 10 
.sp
.RS 4
.nf
\fB
(1,$)w\fB [\fIfile\fB]
.fi \fR
.P
.RE
.RE
.P
The
.BR w
command shall write the addressed lines into the file named by the
pathname
.IR file .
The command shall create the file, if it does not exist, or shall
replace the contents of the existing file. The currently remembered
pathname shall not be changed unless there is no remembered pathname.
If no pathname is given, the currently remembered pathname, if any,
shall be used (see the
.BR e
and
.BR f
commands); the current line number shall be unchanged. If the command
is successful, the number of bytes written shall be written to standard
output, unless the
.BR \(mis
option was specified, in the following format:
.sp
.RS 4
.nf
\fB
"%d\en", &lt;\fInumber of bytes written\fR&gt;
.fi \fR
.P
.RE
.P
If
.IR file
begins with
.BR '!' ,
the rest of the line shall be taken to be a shell command line whose
standard input shall be the addressed lines. Such a shell command line
shall not be remembered as the current pathname. This usage of the
write command with
.BR '!' 
shall not be considered as a ``last
.BR w
command that wrote the entire buffer'', as described previously; thus,
this alone shall not prevent the warning to the user if an attempt is
made to destroy the editor buffer via the
.BR e
or
.BR q
commands.
.SS "Line Number Command"
.IP "\fISynopsis\fR:" 10
.sp -1v
.RS 10 
.sp
.RS 4
.nf
\fB
($)=
.fi \fR
.P
.RE
.RE
.P
The line number of the addressed line shall be written to standard
output in the following format:
.sp
.RS 4
.nf
\fB
"%d\en", &lt;\fIline number\fR&gt;
.fi \fR
.P
.RE
.P
The current line number shall be unchanged by this command.
.SS "Shell Escape Command"
.IP "\fISynopsis\fR:" 10
.sp -1v
.RS 10 
.sp
.RS 4
.nf
\fB
!\fIcommand\fR
.fi \fR
.P
.RE
.RE
.P
The remainder of the line after the
.BR '!' 
shall be sent to the command interpreter to be interpreted as a shell
command line. Within the text of that shell command line, the unescaped
character
.BR '%' 
shall be replaced with the remembered pathname; if a
.BR '!' 
appears as the first character of the command, it shall be replaced
with the text of the previous shell command executed via
.BR '!' .
Thus,
.BR \(dq!!\(dq 
shall repeat the previous !\fIcommand\fP. If any replacements of
.BR '%' 
or
.BR '!' 
are performed, the modified line shall be written to the standard
output before
.IR command
is executed. The
.BR !
command shall write:
.sp
.RS 4
.nf
\fB
"!\en"
.fi \fR
.P
.RE
.P
to standard output upon completion, unless the
.BR \(mis
option is specified. The current line number shall be unchanged.
.SS "Null Command"
.IP "\fISynopsis\fR:" 10
.sp -1v
.RS 10 
.sp
.RS 4
.nf
\fB
(.+1)
.fi \fR
.P
.RE
.RE
.P
An address alone on a line shall cause the addressed line to be
written. A
&lt;newline&gt;
alone shall be equivalent to
.BR \(dq+1p\(dq .
The current line number shall be set to the address of the written
line.
.SH "EXIT STATUS"
The following exit values shall be returned:
.IP "\00" 6
Successful completion without any file or command errors.
.IP &gt;0 6
An error occurred.
.SH "CONSEQUENCES OF ERRORS"
When an error in the input script is encountered, or when an error is
detected that is a consequence of the data (not) present in the file or
due to an external condition such as a read or write error:
.IP " *" 4
If the standard input is a terminal device file, all input shall be
flushed, and a new command read.
.IP " *" 4
If the standard input is a regular file,
.IR ed
shall terminate with a non-zero exit status.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
Because of the extremely terse nature of the default error messages,
the prudent script writer begins the
.IR ed
input commands with an
.BR H
command, so that if any errors do occur at least some clue as to the
cause is made available.
.P
In earlier versions of this standard, an obsolescent
.BR \(mi
option was described. This is no longer specified. Applications should
use the
.BR \(mis
option. Using
.BR \(mi
as a
.IR file
operand now produces unspecified results. This allows implementations
to continue to support the former required behavior.
.SH EXAMPLES
None.
.SH RATIONALE
The initial description of this utility was adapted from the SVID. It
contains some features not found in Version 7 or BSD-derived systems.
Some of the differences between the POSIX and BSD
.IR ed
utilities include, but need not be limited to:
.IP " *" 4
The BSD
.BR \(mi
option does not suppress the
.BR '!' 
prompt after a
.BR !
command.
.IP " *" 4
BSD does not support the special meanings of the
.BR '%' 
and
.BR '!' 
characters within a
.BR !
command.
.IP " *" 4
BSD does not support the
.IR addresses
.BR ';' 
and
.BR ',' .
.IP " *" 4
BSD allows the command/suffix pairs
.BR pp ,
.BR ll ,
and so on, which are unspecified in this volume of POSIX.1\(hy2008.
.IP " *" 4
BSD does not support the
.BR '!' 
character part of the
.BR e ,
.BR r ,
or
.BR w
commands.
.IP " *" 4
A failed
.BR g
command in BSD sets the line number to the last line searched if there
are no matches.
.IP " *" 4
BSD does not default the
.IR "command list"
to the
.BR p
command.
.IP " *" 4
BSD does not support the
.BR G ,
.BR h ,
.BR H ,
.BR n ,
or
.BR V
commands.
.IP " *" 4
On BSD, if there is no inserted text, the insert command changes the
current line to the referenced line \(mi1; that is, the line before the
specified line.
.IP " *" 4
On BSD, the
.IR join
command with only a single address changes the current line to that
address.
.IP " *" 4
BSD does not support the
.BR P
command; moreover, in BSD it is synonymous with the
.BR p
command.
.IP " *" 4
BSD does not support the
.IR undo
of the commands
.BR j ,
.BR m ,
.BR r ,
.BR s ,
or
.BR t .
.IP " *" 4
The Version 7
.IR ed
command
.BR W ,
and the BSD
.IR ed
commands
.BR W ,
.BR wq ,
and
.BR z
are not present in this volume of POSIX.1\(hy2008.
.P
The
.BR \(mis
option was added to allow the functionality of the removed
.BR \(mi
option in a manner compatible with the Utility Syntax Guidelines.
.P
In early proposals there was a limit,
{ED_FILE_MAX},
that described the historical limitations of some
.IR ed
utilities in their handling of large files; some of these have had
problems with files larger than 100\|000 bytes. It was this limitation
that prompted much of the desire to include a
.IR split
command in this volume of POSIX.1\(hy2008. Since this limit was removed, this volume of POSIX.1\(hy2008 requires that
implementations document the file size limits imposed by
.IR ed
in the conformance document. The limit
{ED_LINE_MAX}
was also removed; therefore, the global limit
{LINE_MAX}
is used for input and output lines.
.P
The manner in which the
.BR l
command writes non-printable characters was changed to avoid
the historical backspace-overstrike method. On video display terminals,
the overstrike is ambiguous because most terminals simply replace
overstruck characters, making the
.BR l
format not useful for its intended purpose of unambiguously
understanding the content of the line. The historical
&lt;backslash&gt;-escapes
were also ambiguous. (The string
.BR \(dqa\e0011\(dq 
could represent a line containing those six characters or a line
containing the three characters
.BR 'a' ,
a byte with a binary value of 1, and a 1.) In the format required here,
a
&lt;backslash&gt;
appearing in the line is written as
.BR \(dq\e\e\(dq 
so that the output is truly unambiguous. The method of marking the ends
of lines was adopted from the
.IR ex
editor and is required for any line ending in
&lt;space&gt;
characters; the
.BR '$' 
is placed on all lines so that a real
.BR '$' 
at the end of a line cannot be misinterpreted.
.P
Earlier versions of this standard allowed for implementations
with bytes other than eight bits, but this has been modified in this
version.
.P
The description of how a NUL is written was removed. The NUL character
cannot be in text files, and this volume of POSIX.1\(hy2008 should not dictate behavior in the
case of undefined, erroneous input.
.P
Unlike some of the other editing utilities, the filenames accepted by
the
.BR E ,
.BR e ,
.BR R ,
and
.BR r
commands are not patterns.
.P
Early proposals stated that the
.BR \(mip
option worked only when standard input was associated with a terminal
device. This has been changed to conform to historical implementations,
thereby allowing applications to interpose themselves between a user
and the
.IR ed
utility.
.P
The form of the substitute command that uses the
.BR n
suffix was limited in some historical documentation (where this was
described incorrectly as ``backreferencing''). This limit has been
omitted because there is no reason why an editor processing lines of
{LINE_MAX}
length should have this restriction. The command
.BR "s/x/X/2047"
should be able to substitute the 2\|047th occurrence of
.BR 'x' 
on a line.
.P
The use of printing commands with printing suffixes (such as
.BR pn ,
.BR lp ,
and so on) was made unspecified because BSD-based systems allow this,
whereas System V does not.
.P
Some BSD-based systems exit immediately upon receipt of end-of-file if
all of the lines in the file have been deleted. Since this volume of POSIX.1\(hy2008 refers
to the
.BR q
command in this instance, such behavior is not allowed.
.P
Some historical implementations returned exit status zero even if
command errors had occurred; this is not allowed by this volume of POSIX.1\(hy2008.
.P
Some historical implementations contained a bug that allowed a single
&lt;period&gt;
to be entered in input mode as
&lt;backslash&gt;
&lt;period&gt;
&lt;newline&gt;.
This is not allowed by
.IR ed
because there is no description of escaping any of the characters in
input mode;
&lt;backslash&gt;
characters are entered into the buffer exactly as typed. The typical
method of entering a single
&lt;period&gt;
has been to precede it with another character and then use the substitute
command to delete that character.
.P
It is difficult under some modes of some versions of historical
operating system terminal drivers to distinguish between an end-of-file
condition and terminal disconnect. POSIX.1\(hy2008 does not require
implementations to distinguish between the two situations, which
permits historical implementations of the
.IR ed
utility on historical platforms to conform. Implementations are
encouraged to distinguish between the two, if possible, and take
appropriate action on terminal disconnect.
.P
Historically,
.IR ed
accepted a zero address for the
.BR a
and
.BR r
commands in order to insert text at the start of the edit buffer. When
the buffer was empty the command
.BR .=
returned zero. POSIX.1\(hy2008 requires conformance to historical practice.
.P
For consistency with the
.BR a
and
.BR r
commands and better user functionality, the
.BR i
and
.BR c
commands must also accept an address of 0, in which case 0\fIi\fP is
treated as 1\fIi\fP and likewise for the
.BR c
command.
.P
All of the following are valid addresses:
.IP "\fR+++\fP" 12
Three lines after the current line.
.IP "\fR/\fIpattern\fR/\(mi\fR" 12
One line before the next occurrence of pattern.
.IP "\fR\(mi2\fR" 12
Two lines before the current line.
.IP "\fR3\ \(mi\|\(mi\|\(mi\|\(mi\ 2\fR" 12
Line one (note the intermediate negative address).
.IP "\fR1\ 2\ 3\fR" 12
Line six.
.P
Any number of addresses can be provided to commands taking addresses;
for example,
.BR \(dq1,2,3,4,5p\(dq 
prints lines 4 and 5, because two is the greatest valid number of
addresses accepted by the
.BR print
command. This, in combination with the
&lt;semicolon&gt;
delimiter, permits users to create commands based on ordered patterns
in the file. For example, the command
.BR \(dq3;/foo/;+2p\(dq 
will display the first line after line 3 that contains the pattern
.IR foo ,
plus the next two lines. Note that the address
.BR \(dq3;\(dq 
must still be evaluated before being discarded, because the search
origin for the
.BR \(dq/foo/\(dq 
command depends on this.
.P
Historically,
.IR ed
disallowed address chains, as discussed above, consisting solely of
&lt;comma&gt;
or
&lt;semicolon&gt;
separators; for example,
.BR \(dq,,,\(dq 
or
.BR \(dq;;;\(dq 
were considered an error. For consistency of address specification,
this restriction is removed. The following table lists some of the
address forms now possible:
.TS
center box tab(!);
cB | cB | cB | cB | cB
lf5 | nf5 | nf5 | l | l.
Address!Addr1!Addr2!Status!Comment
_
7,!7!7!Historical
7,5,!5!5!Historical
7,5,9!5!9!Historical
7,9!7!9!Historical
7,+!7!8!Historical
\&amp;,!1!$!Historical
\&amp;,7!1!7!Extension
\&amp;,,!$!$!Extension
\&amp;,;!$!$!Extension
7;!7!7!Historical
7;5;!5!5!Historical
7;5;9!5!9!Historical
7;5,9!5!9!Historical
7;$;4!$!4!Historical!Valid, but erroneous.
7;9!7!9!Historical
7;+!7!8!Historical
;!.!$!Historical
;7!.!7!Extension
;;!$!$!Extension
;,!$!$!Extension
.TE
.P
Historically,
.IR ed
accepted the
.BR '^' 
character as an address, in which case it was identical to the
&lt;hyphen&gt;
character. POSIX.1\(hy2008 does not require or prohibit this behavior.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "Section 1.4" ", " "Utility Description Defaults",
.IR "\fIex\fR\^",
.IR "\fIsed\fR\^",
.IR "\fIsh\fR\^",
.IR "\fIvi\fR\^"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "Table 5-1" ", " "Escape Sequences and Associated Actions",
.IR "Chapter 8" ", " "Environment Variables",
.IR "Section 9.3" ", " "Basic Regular Expressions",
.IR "Chapter 11" ", " "General Terminal Interface",
.IR "Section 12.2" ", " "Utility Syntax Guidelines"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.
.TH ENV "1" "March 2017" "GNU coreutils 8.27" "User Commands"
.SH NAME
env \- run a program in a modified environment
.SH SYNOPSIS
.B env
[\fI\,OPTION\/\fR]... [\fI\,-\/\fR] [\fI\,NAME=VALUE\/\fR]... [\fI\,COMMAND \/\fR[\fI\,ARG\/\fR]...]
.SH DESCRIPTION
.\" Add any additional description here
.PP
Set each NAME to VALUE in the environment and run COMMAND.
.PP
Mandatory arguments to long options are mandatory for short options too.
.TP
\fB\-i\fR, \fB\-\-ignore\-environment\fR
start with an empty environment
.TP
\fB\-0\fR, \fB\-\-null\fR
end each output line with NUL, not newline
.TP
\fB\-u\fR, \fB\-\-unset\fR=\fI\,NAME\/\fR
remove variable from the environment
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-\-version\fR
output version information and exit
.PP
A mere \- implies \fB\-i\fR.  If no COMMAND, print the resulting environment.
.SH AUTHOR
Written by Richard Mlynarik and David MacKenzie.
.SH "REPORTING BUGS"
GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt;
.br
Report env translation bugs to &lt;http://translationproject.org/team/&gt;
.SH COPYRIGHT
Copyright \(co 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
Full documentation at: &lt;http://www.gnu.org/software/coreutils/env&gt;
.br
or available locally via: info \(aq(coreutils) env invocation\(aq
'\" et
.TH EVAL "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
eval
\(em construct command by concatenating arguments
.SH SYNOPSIS
.LP
.nf
eval \fB[\fIargument\fR...\fB]\fR
.fi
.SH DESCRIPTION
The
.IR eval
utility shall construct a command by concatenating
.IR argument s
together, separating each with a
&lt;space&gt;
character.
The constructed command shall be read and executed by the shell.
.SH OPTIONS
None.
.SH OPERANDS
See the DESCRIPTION.
.SH STDIN
Not used.
.SH "INPUT FILES"
None.
.SH "ENVIRONMENT VARIABLES"
None.
.SH "ASYNCHRONOUS EVENTS"
Default.
.SH STDOUT
Not used.
.SH STDERR
The standard error shall be used only for diagnostic messages.
.SH "OUTPUT FILES"
None.
.SH "EXTENDED DESCRIPTION"
None.
.SH "EXIT STATUS"
If there are no
.IR argument s,
or only null
.IR argument s,
.IR eval
shall return a zero exit status; otherwise, it shall return the exit
status of the command defined by the string of concatenated
.IR argument s
separated by
&lt;space&gt;
characters, or a non-zero exit status if the concatenation could not
be parsed as a command and the shell is interactive (and therefore did
not abort).
.SH "CONSEQUENCES OF ERRORS"
Default.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
Since
.IR eval
is not required to recognize the
.BR \(dq--\(dq 
end of options delimiter, in cases where the argument(s) to
.IR eval
might begin with
.BR '-' 
it is recommended that the first argument is prefixed by a string that
will not alter the commands to be executed, such as a
&lt;space&gt;
character:
.sp
.RS 4
.nf
\fB
eval " $commands"
.fi \fR
.P
.RE
.P
or:
.sp
.RS 4
.nf
\fB
eval " $(some_command)"
.fi \fR
.P
.RE
.SH EXAMPLES
.LP
.nf
foo=10 x=foo
y='$'$x
echo $y
\fB$foo\fR
eval y='$'$x
echo $y
\fB10\fR
.fi
.SH "RATIONALE"
This standard allows, but does not require,
.IR eval
to recognize
.BR \(dq--\(dq .
Although this means applications cannot use
.BR \(dq--\(dq 
to protect against options supported as an extension (or errors reported
for unsupported options), the nature of the
.IR eval
utility is such that other means can be used to provide this protection
(see APPLICATION USAGE above).
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "Section 2.14" ", " "Special Built-In Utilities"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
.\"
.\" This code contains changes by
.\"      Gunnar Ritter, Freiburg i. Br., Germany, 2002. All rights reserved.
.\"
.\" Conditions 1, 2, and 4 and the no-warranty notice below apply
.\" to these changes.
.\"
.\"
.\" Copyright (c) 1980, 1993
.\" 	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\" 	This product includes software developed by the University of
.\" 	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"
.\" Copyright(C) Caldera International Inc. 2001-2002. All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"   Redistributions of source code and documentation must retain the
.\"    above copyright notice, this list of conditions and the following
.\"    disclaimer.
.\"   Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"   All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"      This product includes software developed or owned by Caldera
.\"      International, Inc.
.\"   Neither the name of Caldera International, Inc. nor the names of
.\"    other contributors may be used to endorse or promote products
.\"    derived from this software without specific prior written permission.
.\"
.\" USE OF THE SOFTWARE PROVIDED FOR UNDER THIS LICENSE BY CALDERA
.\" INTERNATIONAL, INC. AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED. IN NO EVENT SHALL CALDERA INTERNATIONAL, INC. BE
.\" LIABLE FOR ANY DIRECT, INDIRECT INCIDENTAL, SPECIAL, EXEMPLARY, OR
.\" CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
.\" SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
.\" BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
.\" WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
.\" OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
.\" EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.\"	from ex.1	6.4.1 (2.11BSD) 1996/10/21
.\"
.\"	Sccsid @(#)ex.1	1.44 (gritter) 12/1/04
.\"
.ie \n(.g==1 \{\
.ds lq \(lq
.ds rq \(rq
.\}
.el \{\
.ds lq ``
.ds rq ''
.\}
.TH EX 1 "12/1/04" "Ancient Unix Ports" "User Commands"
.SH NAME
ex, edit \- text editor
.SH SYNOPSIS
.HP
.ad l
\fBex\fR [\fB\-c\fI\ command\fR|\fB+\fIcommand\fR]
[\fB\-r\fR\ [\fIfilename\fR]] [\fB\-s\fR|\fB\-\fR]
[\fB\-t\fI\ tagstring\fR] [\fB\-w\fI\ size\fR]
[\fB\-lLRvV\fR] [\fIfile\fR ...]
.HP
.ad l
\fBedit\fR [\fB\-c\fI\ command\fR|\fB+\fIcommand\fR]
[\fB\-r\fR\ [\fIfilename\fR]] [\fB\-s\fR|\fB\-\fR]
[\fB\-t\fI\ tagstring\fR] [\fB\-w\fI\ size\fR]
[\fB\-lLRvV\fR] [\fIfile\fR ...]
.br
.ad b
.SH DESCRIPTION
.I Ex
is the root of a family of editors:
.I edit,
.I ex
and
.I vi.
.I Ex
is a superset of
.I ed,
with the most notable extension being a display editing facility.
Display based editing on
.SM CRT
terminals is the focus of
.IR vi .
.PP
For those who have not used
.I ed,
or for casual users, the editor
.I edit
may be convenient.
It avoids some of the complexities of
.I ex
used mostly by systems programmers and persons very familiar with
.I ed.
.PP
The following options are accepted:
.TP
\fB\-c\fP\fI\ command\fP or \fB+\fP\fIcommand\fP
Execute
.I command
when editing begins.
.TP
.B \-l
Start in a special mode useful for the
.I Lisp
programming language.
.TP
\fB\-r\fI\ [filename]\fR or \fB\-L\fR
When no argument is supplied with this option,
all files to be recovered are listed
and the editor exits immediately.
If a
.I filename
is specified,
the corresponding temporary file is opened in recovery mode.
.TP
.B \-R
Files are opened read-only when this option is given.
.TP
.BR \-s \ or\  \-
Script mode;
all feedback for interactive editing is disabled.
.SM EXINIT
and
.I .exrc
files are not processed.
.TP
.BI \-t \ tagstring
Read the
.I tags
file,
then choose the file and position specified by
.I tagstring
for editing.
.TP
.B \-v
Start in visual mode even if called as
.IR ex .
.TP
.B \-V
Echo command input to standard error,
unless it originates from a terminal.
.TP
.BI \-w \ size
Specify the size of the editing window for visual mode.
.\"	from ex.rm       8.1 (Berkeley) 6/8/93
.SS "File manipulation"
.I Ex
is normally editing the contents of a single file,
whose name is recorded in the
.I current
file name.
.I Ex
performs all editing actions in a buffer
(actually a temporary file)
into which the text of the file is initially read.
Changes made to the buffer have no effect on the file being
edited unless and until the buffer contents are written out to the
file with a
.I write
command.
After the buffer contents are written,
the previous contents of the written file are no longer accessible.
When a file is edited,
its name becomes the current file name,
and its contents are read into the buffer.
.PP
The current file is almost always considered to be
.I edited.
This means that the contents of the buffer are logically
connected with the current file name,
so that writing the current buffer contents onto that file,
even if it exists,
is a reasonable action.
If the current file is not 
.I edited
then
.I ex
will not normally write on it if it already exists.
.PP
For saving blocks of text while editing, and especially when editing
more than one file,
.I ex
has a group of named buffers.
These are similar to the normal buffer, except that only a limited number
of operations are available on them.
The buffers have names
.I a
through
.I z.
.SS "Exceptional Conditions"
.PP
When errors occur
.I ex
(optionally) rings the terminal bell and, in any case, prints an error
diagnostic.  If the primary input is from a file, editor processing
will terminate.  If an interrupt signal is received,
.I ex
prints \*(lqInterrupt\*(rq and returns to its command level.  If the primary
input is a file, then
.I ex
will exit when this occurs.
.PP
If a hangup signal is received and the buffer has been modified since
it was last written out, or if the system crashes, either the editor
(in the first case) or the system (after it reboots in the second) will
attempt to preserve the buffer.  The next time the user logs in he should be
able to recover the work he was doing, losing at most a few lines of
changes from the last point before the hangup or editor crash.  To
recover a file one can use the
.B \-r
option.  If one was editing the file
.I resume,
then he should change
to the directory where he were when the crash occurred, giving the command
.RS
.sp
\fBex \-r\fP\fI resume\fP
.sp
.RE
After checking that the retrieved file is indeed ok, he can
.I write
it over the previous contents of that file.
.PP
The user will normally get mail from the system telling him when a file has
been saved after a crash.  The command
.RS
.sp
\fBex\fP \-\fBr\fP
.sp
.RE 
will print a list of the files which have been saved for the user. 
.\"(In the case of a hangup,
.\"the file will not appear in the list,
.\"although it can be recovered.)
.SS "Editing modes"
.PP
.I Ex
has five distinct modes.  The primary mode is
.I command
mode.  Commands are entered in command mode when a `:' prompt is
present, and are executed each time a complete line is sent.  In
.I "text input"
mode
.I ex
gathers input lines and places them in the file.  The
.I append,
.I insert,
and
.I change
commands use text input mode.
No prompt is printed when in text input mode.
This mode is left by typing a `.' alone at the beginning of a line, and
.I command
mode resumes.
.PP
The last three modes are
.I open
and
.I visual
modes, entered by the commands of the same name, and, within open and
visual modes
.I "text insertion"
mode.
.I Open
and
.I visual
modes allow local editing operations to be performed on the text in the
file.  The
.I open
command displays one line at a time on any terminal while
.I visual
works on 
.SM CRT
terminals with random positioning cursors, using the
screen as a (single) window for file editing changes.
These modes are described (only) in
.I "An Introduction to Display Editing with Vi."
.SS "Command structure"
.PP
Most command names are English words,
and initial prefixes of the words are acceptable abbreviations.
The ambiguity of abbreviations is resolved in favor of the more commonly
used commands.
.PP
Most commands accept prefix addresses specifying the lines in the file
upon which they are to have effect.
The forms of these addresses will be discussed below.
A number of commands also may take a trailing
.I count
specifying the number of lines to be involved in the command.
Thus the command \*(lq10p\*(rq will print the tenth line in the buffer while
\*(lqdelete 5\*(rq will delete five lines from the buffer,
starting with the current line.
.PP
Some commands take other information or parameters,
this information always being given after the command name.
.PP
A number of commands have two distinct variants.
The variant form of the command is invoked by placing an
`!' immediately after the command name. 
Some of the default variants may be controlled by options;
in this case, the `!' serves to toggle the default.
.PP
The characters `#', `p' and `l' may be placed after many commands
(A `p' or `l' must be preceded by a blank or tab
except in the single special case `dp').
In this case, the command abbreviated by these characters
is executed after the command completes.
Since
.I ex
normally prints the new current line after each change, `p' is rarely necessary.
Any number of `+' or `\-' characters may also be given with these flags.
If they appear, the specified offset is applied to the current line
value before the printing command is executed.
.PP
It is possible to give editor commands which are ignored.
This is useful when making complex editor scripts
for which comments are desired.
The comment character is the double quote: ".
Any command line beginning with " is ignored.
Comments beginning with " may also be placed at the ends
of commands, except in cases where they could be confused as part
of text (shell escapes and the substitute and map commands).
.PP
More than one command may be placed on a line by separating each pair
of commands by a `|' character.
However the
.I global
commands,
comments,
and the shell escape `!'
must be the last command on a line, as they are not terminated by a `|'.
.SS "Command addressing"
.IP \fB.\fR 20
The current line.
Most commands leave the current line as the last line which they affect.
The default address for most commands is the current line,
thus `\fB.\fR' is rarely used alone as an address.
.IP \fIn\fR 20
The \fIn\fRth line in the editor's buffer, lines being numbered
sequentially from 1.
.IP \fB$\fR 20
The last line in the buffer.
.IP \fB%\fR 20
An abbreviation for \*(lq1,$\*(rq, the entire buffer.
.IP \fI+n\fR\ \fI\-n\fR 20
An offset relative to the current buffer line.
The forms `.+3' `+3' and `+++' are all equivalent;
if the current line is line 100 they all address line 103.
.IP \fB/\fIpat\fR\fB/\fR\ \fB?\fIpat\fR\fB?\fR 20
Scan forward and backward respectively for a line containing \fIpat\fR, a
regular expression (as defined below).  The scans normally wrap around the end
of the buffer.
If all that is desired is to print the next line containing \fIpat\fR, then
the trailing \fB/\fR or \fB?\fR may be omitted.
If \fIpat\fP is omitted or explicitly empty, then the last
regular expression specified is located.
The forms \fB\e/\fP and \fB\e?\fP scan
using the last regular expression used in a scan; after a substitute
\fB//\fP and \fB??\fP would scan using the substitute's regular expression.
.IP \fB\(aa\(aa\fP\ \fB\(aa\fP\fIx\fP 20
Before each non-relative motion of the current line `\fB.\fP',
the previous current line is marked with a tag, subsequently referred to as
`\(aa\(aa'.
This makes it easy to refer or return to this previous context.
Marks may also be established by the
.I mark
command, using single lower case letters
.I x
and the marked lines referred to as
`\(aa\fIx\fR'.
.PP
Addresses to commands consist of a series of addressing primitives,
separated by `,' or `;'.
Such address lists are evaluated left-to-right.
When addresses are separated by `;' the current line `\fB.\fR'
is set to the value of the previous addressing expression
before the next address is interpreted.
If more addresses are given than the command requires,
then all but the last one or two are ignored.
If the command takes two addresses, the first addressed line must
precede the second in the buffer.
.PP
Null address specifications are permitted in a list of addresses,
the default in this case is the current line `.';
thus `,100' is equivalent to `\fB.\fR,100'.
It is an error to give a prefix address to a command which expects none.
.SS "Command descriptions"
.PP
The following form is a prototype for all
.I ex
commands:
.RS
.sp
\fIaddress\fR \fBcommand\fR \fI! parameters count flags\fR
.sp
.RE
All parts are optional; the degenerate case is the empty command which prints
the next line in the file.  For sanity with use from within
.I visual
mode,
.I ex
ignores a \*(lq:\*(rq preceding any command.
.PP
In the following command descriptions, the
default addresses are shown in parentheses,
which are
.I not,
however,
part of the command.
.TP
\fBabbreviate\fR \fIword rhs\fP	abbr: \fBab\fP
Add the named abbreviation to the current list.
When in input mode in visual, if
.I word
is typed as a complete word, it will be changed to
.I rhs .
.LP
( \fB.\fR ) \fBappend\fR	abbr: \fBa\fR
.br
\fItext\fR
.br
\&amp;\fB.\fR
.RS
Reads the input text and places it after the specified line.
After the command, `\fB.\fR'
addresses the last line input or the
specified line if no lines were input.
If address `0' is given,
text is placed at the beginning of the buffer.
.RE
.LP
\fBa!\fR
.br
\fItext\fR
.br
\&amp;\fB.\fR
.RS
The variant flag to
.I append
toggles the setting for the
.I autoindent
option during the input of
.I text.
.RE
.TP
\fBargs\fR
The members of the argument list are printed, with the current argument
delimited by `[' and `]'.
.TP
\fBcd\fR \fIdirectory\fR
The
.I cd
command is a synonym for
.I chdir.
.LP
( \fB.\fP , \fB.\fP ) \fBchange\fP \fIcount\fP	abbr: \fBc\fP
.br
\fItext\fP
.br
\&amp;\fB.\fP
.RS
Replaces the specified lines with the input \fItext\fP.
The current line becomes the last line input;
if no lines were input it is left as for a
\fIdelete\fP.
.RE
.LP
\fBc!\fP
.br
\fItext\fP
.br
\&amp;\fB.\fP
.RS
The variant toggles
.I autoindent
during the
.I change.
.RE
.TP
\fBchdir\fR \fIdirectory\fR
The specified \fIdirectory\fR becomes the current directory.
If no directory is specified, the current value of the
.I home
option is used as the target directory.
After a
.I chdir
the current file is not considered to have been
edited so that write restrictions on pre-existing files apply.
.TP
( \fB.\fP , \fB.\fP )\|\fBcopy\fP \fIaddr\fP \fIflags\fP	abbr: \fBco\fP
A \fIcopy\fP
of the specified lines is placed after
.I addr,
which may be `0'.
The current line
`\fB.\fR'
addresses the last line of the copy.
The command
.I t
is a synonym for
.I copy.
.TP
( \fB.\fR , \fB.\fR )\|\fBdelete\fR \fIbuffer\fR \fIcount\fR \fIflags\fR	abbr: \fBd\fR
Removes the specified lines from the buffer.
The line after the last line deleted becomes the current line;
if the lines deleted were originally at the end,
the new last line becomes the current line.
If a named
.I buffer
is specified by giving a letter,
then the specified lines are saved in that buffer,
or appended to it if an upper case letter is used.
.LP
\fBedit\fR \fIfile\fR	abbr: \fBe\fR
.br
\fBex\fR \fIfile\fR
.RS
Used to begin an editing session on a new file.
The editor
first checks to see if the buffer has been modified since the last
.I write
command was issued.
If it has been,
a warning is issued and the
command is aborted.
The
command otherwise deletes the entire contents of the editor buffer,
makes the named file the current file and prints the new filename.
After insuring that this file is sensible
(i.e., that it is not a binary file such as a directory,
a block or character special file other than
.I /dev/tty,
a terminal,
or a binary or executable file),
the editor reads the file into its buffer.
.PP
If the read of the file completes without error,
the number of lines and characters read is typed.
Any null characters in the file are discarded.
If none of these errors occurred, the file is considered
.I edited.
If the last line of the input file is missing the trailing
newline character, it will be supplied and a complaint will be issued.
This command leaves the current line `\fB.\fR' at the last line read.
If executed from within
.I open
or
.I visual,
the current line is initially the first line of the file.
.RE
.TP
\fBe!\fR \fIfile\fR
The variant form suppresses the complaint about modifications having
been made and not written from the editor buffer, thus
discarding all changes which have been made before editing the new file.
.TP
\fBe\fR \fB+\fIn\fR \fIfile\fR
Causes the editor to begin at line
.I n
rather than at the last line;
\fIn\fR may also be an editor command containing no spaces,
e.g.: \*(lq+/pat\*(rq.
.TP
\fBfile\fR	abbr: \fBf\fR
Prints the current file name,
whether it has been `[Modified]' since the last
.I write 
command,
whether it is
.I "read only" ,
the current line,
the number of lines in the buffer,
and the percentage of the way through the buffer of the current line.
In the rare case that the current file is `[Not edited]' this is
noted also; in this case one has to use the form \fBw!\fR to write to
the file, since the editor is not sure that a \fBwrite\fR will not
destroy a file unrelated to the current contents of the buffer.
.TP
\fBfile\fR \fIfile\fR
The current file name is changed to
.I file
which is considered 
`[Not edited]'.
.TP
( 1 , $ ) \fBglobal\fR /\fIpat\|\fR/ \fIcmds\fR	abbr: \fBg\fR
First marks each line among those specified which matches
the given regular expression.
Then the given command list is executed with `\fB.\fR' initially
set to each marked line.
.IP
The command list consists of the remaining commands on the current
input line and may continue to multiple lines by ending all but the
last such line with a `\e'.
If
.I cmds
(and possibly the trailing \fB/\fR delimiter) is omitted, each line matching
.I pat
is printed.
.I Append,
.I insert,
and
.I change
commands and associated input are permitted;
the `\fB.\fR' terminating input may be omitted if it would be on the
last line of the command list.
.I Open
and
.I visual
commands are permitted in the command list and take input from the terminal.
.IP
The
.I global
command itself may not appear in
.I cmds.
The
.I undo
command is also not permitted there,
as
.I undo
instead can be used to reverse the entire
.I global
command.
The options
.I autoprint
and
.I autoindent
are inhibited during a
.I global,
(and possibly the trailing \fB/\fR delimiter) and the value of the
.I report
option is temporarily infinite,
in deference to a \fIreport\fR for the entire global.
Finally, the context mark `\'\'' is set to the value of
`.' before the global command begins and is not changed during a global
command,
except perhaps by an
.I open
or
.I visual
within the
.I global.
.TP
\fBg!\fR \fB/\fIpat\fB/\fR \fIcmds\fR	abbr: \fBv\fR
The variant form of \fIglobal\fR runs \fIcmds\fR at each line not matching
\fIpat\fR.
.LP
( \fB.\fR )\|\fBinsert\fR	abbr: \fBi\fR
.br
\fItext\fR
.br
\&amp;\fB.\fR
.RS
Places the given text before the specified line.
The current line is left at the last line input;
if there were none input it is left at the line before the addressed line.
This command differs from
.I append
only in the placement of text.
.RE
.LP
\fBi!\fR
.br
\fItext\fR
.br
\&amp;\fB.\fR
.RS
The variant toggles
.I autoindent
during the
.I insert.
.RE
.TP
( \fB.\fR , \fB.\fR+1 ) \fBjoin\fR \fIcount\fR \fIflags\fR	abbr: \fBj\fR
Places the text from a specified range of lines
together on one line.
White space is adjusted at each junction to provide at least
one blank character, two if there was a `\fB.\fR' at the end of the line,
or none if the first following character is a `)'.
If there is already white space at the end of the line,
then the white space at the start of the next line will be discarded.
.TP
\fBj!\fR
The variant causes a simpler
.I join
with no white space processing; the characters in the lines are simply
concatenated.
.TP
( \fB.\fR ) \fBk\fR \fIx\fR
The
.I k
command is a synonym for
.I mark.
It does not require a blank or tab before the following letter.
.TP
( \fB.\fR , \fB.\fR ) \fBlist\fR \fIcount\fR \fIflags\fR
Prints the specified lines in a more unambiguous way:
tabs are printed as `^I'
and the end of each line is marked with a trailing `$'.
The current line is left at the last line printed.
.TP
\fBmap\fR[\fB!\fR] \fIlhs\fR \fIrhs\fR
The
.I map
command is used to define macros for use in
.I visual
command mode.
.I Lhs
should be a single character, or the sequence \*(lq#n\*(rq, for n a digit,
referring to function key \fIn\fR.  When this character or function key
is typed in
.I visual
mode, it will be as though the corresponding \fIrhs\fR had been typed.
On terminals without function keys, the user can type \*(lq#n\*(rq.
If the `\fB!\fP' character follows the command name,
the mapping is interpreted in input mode.
See section 6.9 of the \*(lqIntroduction to Display Editing with Vi\*(rq
for more details.
.TP
( \fB.\fR ) \fBmark\fR \fIx\fR
Gives the specified line mark
.I x,
a single lower case letter.
The
.I x
must be preceded by a blank or a tab.
The addressing form `\'x' then addresses this line.
The current line is not affected by this command.
.TP
( \fB.\fR , \fB.\fR ) \fBmove\fR \fIaddr\fR	abbr: \fBm\fR
The
.I move
command repositions the specified lines to be after
.I addr .
The first of the moved lines becomes the current line.
.TP
\fBnext\fR	abbr: \fBn\fR
The next file from the command line argument list is edited.
.TP
\fBn!\fR
The variant suppresses warnings about the modifications to the buffer not
having been written out, discarding (irretrievably) any changes which may
have been made.
.LP
\fBn\fR \fIfilelist\fR
.br
\fBn\fR \fB+\fIcommand\fR \fIfilelist\fR
.RS
The specified
.I filelist
is expanded and the resulting list replaces the
current argument list;
the first file in the new list is then edited.
If
.I command
is given (it must contain no spaces), then it is executed after editing the first such file.
.RE
.TP
( \fB.\fR , \fB.\fR ) \fBnumber\fR \fIcount\fR \fIflags\fR	abbr: \fB#\fR or \fBnu\fR
Prints each specified line preceded by its buffer line
number.
The current line is left at the last line printed.
.LP
( \fB.\fR ) \fBopen\fR \fIflags\fR	abbr: \fBo\fR
.br
( \fB.\fR ) \fBopen\fR /\fIpat\|\fR/ \fIflags\fR
.RS
Enters intraline editing \fIopen\fR mode at each addressed line.
If
.I pat
is given,
then the cursor will be placed initially at the beginning of the
string matched by the pattern.
To exit this mode use Q.
See
.I "An Introduction to Display Editing with Vi"
for more details.
.RE
.TP
\fBpreserve\fR
The current editor buffer is saved as though the system had just crashed.
This command is for use only in emergencies when a
.I write
command has resulted in an error.
.TP
( \fB.\fR , \fB.\fR )\|\fBprint\fR \fIcount\fR	abbr: \fBp\fR or \fBP\fR
Prints the specified lines
with non-printing characters printed as control characters `^\fIx\fR\|';
delete (octal 177) is represented as `^?'.
The current line is left at the last line printed.
.TP
( \fB.\fR )\|\fBput\fR \fIbuffer\fR	abbr: \fBpu\fR
Puts back
previously
.I deleted
or
.I yanked
lines.
Normally used with
.I delete
to effect movement of lines,
or with
.I yank
to effect duplication of lines.
If no
.I buffer
is specified, then the last
.I deleted
or
.I yanked
text is restored.
But no modifying commands may intervene between the
.I delete
or
.I yank
and the
.I put,
nor may lines be moved between files without using a named buffer.
By using a named buffer, text may be restored that was saved there at any
previous time.
.TP
\fBquit\fR	abbr: \fBq\fR
Causes 
.I ex
to terminate.
No automatic write of the editor buffer to a file is performed.
However,
.I ex
issues a warning message if the file has changed
since the last
.I write
command was issued, and does not
.I quit.
\fIEx\fR
will also issue a diagnostic if there are more files in the argument
list.
.FE
Normally, the user will wish to save his changes, and he
should give a \fIwrite\fR command;
if he wishes to discard them, he should the \fBq!\fR command variant.
.TP
\fBq!\fR
Quits from the editor, discarding changes to the buffer without complaint.
.TP
( \fB.\fR ) \fBread\fR \fIfile\fR	abbr: \fBr\fR
Places a copy of the text of the given file in the
editing buffer after the specified line.
If no 
.I file
is given the current file name is used.
The current file name is not changed unless there is none in which
case
.I file
becomes the current name.
The sensibility restrictions for the 
.I edit
command apply here also.
If the file buffer is empty and there is no current name then
.I ex
treats this as an
.I edit
command.
.IP
Address `0' is legal for this command and causes the file to be read at
the beginning of the buffer.
Statistics are given as for the 
.I edit
command when the 
.I read
successfully terminates.
After a
.I read
the current line is the last line read.
Within
.I open
and
.I visual
the current line is set to the first line read rather than the last.
.TP
( \fB.\fR ) \fBread\fR  \fB!\fR\fIcommand\fR
Reads the output of the command
.I command
into the buffer after the specified line.
This is not a variant form of the command, rather a read
specifying a
.I command
rather than a 
.I filename;
a blank or tab before the \fB!\fR is mandatory.
.TP
\fBrecover \fIfile\fR
Recovers
.I file
from the system save area.
Used after a accidental hangup of the phone
or a system crash or
.I preserve
command.
Except when
.I preserve
is used, the user will be notified by mail when a file is saved.
.TP
\fBrewind\fR	abbr: \fBrew\fR
The argument list is rewound, and the first file in the list is edited.
.TP
\fBrew!\fR
Rewinds the argument list discarding any changes made to the current buffer.
.TP
\fBset\fR \fIparameter\fR
With no arguments, prints those options whose values have been
changed from their defaults;
with parameter
.I all
it prints all of the option values.
.IP
Giving an option name followed by a `?'
causes the current value of that option to be printed.
The `?' is unnecessary unless the option is Boolean valued.
Boolean options are given values either by the form
`set \fIoption\fR' to turn them on or
`set no\fIoption\fR' to turn them off;
string and numeric options are assigned via the form
`set \fIoption\fR=value'.
.IP
More than one parameter may be given to 
.I set \|;
they are interpreted left-to-right.
.IP
A list of options can be found below.
.TP
\fBshell\fR	abbr: \fBsh\fR
A new shell is created.
When it terminates, editing resumes.
.TP
\fBsource\fR \fIfile\fR	abbr: \fBso\fR
Reads and executes commands from the specified file.
.I Source
commands may be nested.
.LP
.ad l
(\ \fB.\fR\ ,\ \fB.\fR\ )\ \fBsubstitute\fR\ /\fIpat\fR\|/\fIrepl\fR\|/\ \fIoptions\fR\ \fIcount\fR\ \fIflags\fR
.RS
abbr: \fBs\fR
.br
.ad b
On each specified line, the first instance of pattern
.I pat
is replaced by replacement pattern
.I repl.
If the
.I global
indicator option character `g'
appears, then all instances are substituted;
if the
.I confirm
indication character `c' appears,
then before each substitution the line to be substituted
is typed with the string to be substituted marked
with `^' characters.
By typing an `y' one can cause the substitution to be performed,
any other input causes no change to take place.
After a
.I substitute
the current line is the last line substituted.
.PP
Lines may be split by substituting
new-line characters into them.
The newline in
.I repl
must be escaped by preceding it with a `\e'.
Other metacharacters available in
.I pat
and
.I repl
are described below.
.RE
.TP
.B stop
Suspends the editor, returning control to the top level shell.
If
.I autowrite
is set and there are unsaved changes,
a write is done first unless the form
.B stop !
is used.
This commands is only available where supported by the teletype driver,
shell and operating system.
.TP
( \fB.\fR , \fB.\fR ) \fBsubstitute\fR \fIoptions\fR \fIcount\fR \fIflags\fR	abbr: \fBs\fR
If
.I pat
and
.I repl
are omitted, then the last substitution is repeated.
This is a synonym for the
.B &amp;
command.
.TP
( \fB.\fR , \fB.\fR ) \fBt\fR \fIaddr\fR \fIflags\fR
The
.I t
command is a synonym for 
.I copy .
.TP
\fBta\fR \fItag\fR
The focus of editing switches to the location of
.I tag,
switching to a different line in the current file where it is defined,
or if necessary to another file.
.IP
The tags file is normally created by a program such as
.I ctags,
and consists of a number of lines with three fields separated by blanks
or tabs.  The first field gives the name of the tag,
the second the name of the file where the tag resides, and the third
gives an addressing form which can be used by the editor to find the tag;
this field is usually a contextual scan using `/\fIpat\fR/' to be immune
to minor changes in the file.  Such scans are always performed as if
.I nomagic
was set.
.IP
The tag names in the tags file must be sorted alphabetically.
.TP
\fBunabbreviate\fR \fIword\fP	abbr: \fBuna\fP
Delete
.I word
from the list of abbreviations.
.TP
\fBundo\fR	abbr: \fBu\fR
Reverses the changes made in the buffer by the last
buffer editing command.
Note that
.I global
commands are considered a single command for the purpose of 
.I undo
(as are
.I open
and
.I visual.)
Also, the commands
.I write
and
.I edit
which interact with the
file system cannot be undone.
.I Undo
is its own inverse.
.IP
.I Undo
always marks the previous value of the current line `\fB.\fR'
as `\'\''.
After an
.I undo
the current line is the first line restored
or the line before the first line deleted if no lines were restored.
For commands with more global effect
such as
.I global
and
.I visual
the current line regains it's pre-command value after an
.I undo.
.TP
\fBunmap\fR[\fB!\fR] \fIlhs\fR
The macro expansion associated by
.I map
for
.I lhs
is removed.
.TP
( 1 , $ ) \fBv\fR /\fIpat\fR\|/ \fIcmds\fR
A synonym for the
.I global
command variant \fBg!\fR, running the specified \fIcmds\fR on each
line which does not match \fIpat\fR.
.TP
\fBversion\fR	abbr: \fBve\fR
Prints the current version number of the editor
as well as the date the editor was last changed.
.TP
( \fB.\fR ) \fBvisual\fR \fItype\fR \fIcount\fR \fIflags\fR	abbr: \fBvi\fR
Enters visual mode at the specified line.
.I Type
is optional and may be `\-' , `^' or `\fB.\fR'
as in the
.I z
command to specify the placement of the specified line on the screen.
By default, if
.I type
is omitted, the specified line is placed as the first on the screen.
A
.I count
specifies an initial window size; the default is the value of the option
.I window.
See the document
.I "An Introduction to Display Editing with Vi"
for more details.
To exit this mode, type Q.
.LP
\fBvisual\fP file
.br
\fBvisual\fP +\fIn\fP file
.RS
From visual mode,
this command is the same as edit.
.RE
.TP
( 1 , $ ) \fBwrite\fR \fIfile\fR	abbr: \fBw\fR
Writes changes made back to \fIfile\fR, printing the number of lines and
characters written.
Normally \fIfile\fR is omitted and the text goes back where it came from.
If a \fIfile\fR is specified, then text will be written to that file.
If the file does not exist it is created.
The current file name is changed only if there is no current file
name; the current line is never changed.
.IP
If an error occurs while writing the current and
.I edited
file, the editor
considers that there has been \*(lqNo write since last change\*(rq
even if the buffer had not previously been modified.
.TP
( 1 , $ ) \fBwrite&gt;&gt;\fR \fIfile\fR	abbr: \fBw&gt;&gt;\fR
Writes the buffer contents at the end of
an existing file.
.IP
.TP
\fBw!\fR \fIname\fR
Overrides the checking of the normal \fIwrite\fR command,
and will write to any file which the system permits.
.TP
( 1 , $ ) \fBw\fR  \fB!\fR\fIcommand\fR
Writes the specified lines into 
.I command.
Note the difference between \fBw!\fR which overrides checks and
\fBw\ \ !\fR which writes to a command.
.TP
\fBwq\fR \fIname\fR
Like a \fIwrite\fR and then a \fIquit\fR command.
.TP
\fBwq!\fR \fIname\fR
The variant overrides checking on the sensibility of the
.I write
command, as \fBw!\fR does.
.TP
\fBxit\fP \fIname\fR
If any changes have been made
and not written to any file,
writes the buffer out.
Then, in any case, quits.
.TP
( \fB.\fR , \fB.\fR )\|\fByank\fR \fIbuffer\fR \fIcount\fR	abbr: \fBya\fR
Places the specified lines in the named
.I buffer,
for later retrieval via
.I put.
If no buffer name is specified, the lines go to a more volatile place;
see the \fIput\fR command description.
.TP
( \fB.+1\fR ) \fBz\fR \fIcount\fR
Print the next \fIcount\fR lines, default \fIwindow\fR.
.TP
( \fB.\fR ) \fBz\fR \fItype\fR \fIcount\fR
Prints a window of text with the specified line at the top.
If \fItype\fR is `\-' the line is placed at the bottom; a `\fB.\fR' causes
the line to be placed in the center.
A count gives the number of lines to be displayed rather than
double the number specified by the \fIscroll\fR option.
On a \s-1CRT\s0 the screen is cleared before display begins unless a
count which is less than the screen size is given.
The current line is left at the last line printed.
Forms `z=' and `z^' also exist; `z=' places the current line in the
center, surrounds it with lines of `\-' characters and leaves the current
line at this line.  The form `z^' prints the window before `z\-'
would.  The characters `+', `^' and `\-' may be repeated for cumulative
effect.
.TP
\fB!\fR \fIcommand\fR\fR
The remainder of the line after the `!' character is sent to a shell
to be executed.
Within the text of
.I command
the characters 
`%' and `#' are expanded as in filenames and the character
`!' is replaced with the text of the previous command.
Thus, in particular,
`!!' repeats the last such shell escape.
If any such expansion is performed, the expanded line will be echoed.
The current line is unchanged by this command.
.IP
If there has been \*(lq[No\ write]\*(rq of the buffer contents since the last
change to the editing buffer, then a diagnostic will be printed
before the command is executed as a warning.
A single `!' is printed when the command completes.
.TP
( \fIaddr\fR , \fIaddr\fR ) \fB!\fR \fIcommand\fR\fR
Takes the specified address range and supplies it as
standard input to
.I command;
the resulting output then replaces the input lines.
.TP
( $ ) \fB=\fR
Prints the line number of the
addressed line.
The current line is unchanged.
.LP
( \fB.\fR , \fB.\fR ) \fB&gt;\fR \fIcount\fR \fIflags\fR
.br
( \fB.\fR , \fB.\fR ) \fB&lt;\fR \fIcount\fR \fIflags\fR
.RS
Perform intelligent shifting on the specified lines;
\fB&lt;\fR shifts left and \fB&gt;\fR shift right.
The quantity of shift is determined by the
.I shiftwidth
option and the repetition of the specification character.
Only white space (blanks and tabs) is shifted;
no non-white characters are discarded in a left-shift.
The current line becomes the last line which changed due to the
shifting.
.RE
.TP
\fB^D\fR
An end-of-file from a terminal input scrolls through the file.
The
.I scroll
option specifies the size of the scroll, normally a half screen of text.
.LP
( \fB.\fR+1 , \fB.\fR+1 )
.br
( \fB.\fR+1 , \fB.\fR+1 ) |
.RS
An address alone causes the addressed lines to be printed.
A blank line prints the next line in the file.
.RE
.TP
( \fB.\fR , \fB.\fR ) \fB&amp;\fR \fIoptions\fR \fIcount\fR \fIflags\fR
Repeats the previous
.I substitute
command.
.TP
( \fB.\fR , \fB.\fR ) \fB\s+2~\s0\fR \fIoptions\fR \fIcount\fR \fIflags\fR
Replaces the previous regular expression with the previous
replacement pattern from a substitution.
.SS "Regular expressions"
.PP
A regular expression specifies a set of strings of characters.
A member of this set of strings is said to be
.I matched
by the regular expression.
.I Ex
remembers two previous regular expressions:
the previous regular expression used in a
.I substitute
command
and the previous regular expression used elsewhere
(referred to as the previous \fIscanning\fR regular expression.)
The previous regular expression
can always be referred to by a null \fIre\fR, e.g. `//' or `??'.
.PP
The following basic constructs are used to construct
.I magic
mode regular expressions.
.IP \fIchar\fR 15
An ordinary character matches itself.
The characters `\fB^\fR' at the beginning of a line,
`\fB$\fR' at the end of line, 
`\fB*\fR' as any character other than the first,
`\fB.\fR', `\fB\e\fR', `\fB[\fR',
and `\s+2\fB~\fR\s0' are not ordinary characters and
must be escaped (preceded) by `\fB\e\fR' to be treated as such.
.IP \fB^\fR
At the beginning of a pattern
forces the match to succeed only at the beginning of a line.
.IP \fB$\fR
At the end of a regular expression forces the match to
succeed only at the end of the line.
.IP \&amp;\fB.\fR
Matches any single character except
the new-line character.
.IP \fB\e&lt;\fR 
Forces the match
to occur only at the beginning of a \*(lqvariable\*(rq or \*(lqword\*(rq;
that is, either at the beginning of a line, or just before
a letter, digit, or underline and after a character not one of
these.
.IP \fB\e&gt;\fR
Similar to `\e&lt;', but matching the end of a \*(lqvariable\*(rq
or \*(lqword\*(rq, i.e. either the end of the line or before character
which is neither a letter, nor a digit, nor the underline character.
.IP \fB[\fIstring\fR\fB]\fR
Matches any (single) character in the class defined by
.I string.
Most characters in
.I string
define themselves.
.br
\ \ A pair of characters separated by `\fB\-\fR' in
.I string
defines the set of characters collating between the specified lower and upper
bounds, thus `[a\-z]' as a regular expression matches
any (single)
.SM ASCII
lower-case letter.
.br
\ \ If the sequence `\fB[:\fIclass\fB:]\fR' appears in
.IR string ,
where class is one of
.RB ` alnum ',
.RB ` alpha ',
.RB ` blank ',
.RB ` cntrl ',
.RB ` digit ',
.RB ` graph ',
.RB ` lower ',
.RB ` print ',
.RB ` punct ',
.RB ` space ',
.RB ` upper ',
.RB ` xdigit ',
or a locale-specific character class,
all characters that belong to the given class are matched.
Thus `[[:lower:]]' matches any lower-case letter,
possibly including characters beyond the scope of
.SM ASCII.
.br
\ \ If the first character of
.I string
is an `\fB^\fR' then the construct
matches those characters which it otherwise would not;
thus `[^a\-z]' matches anything but an
.SM ASCII
lower-case letter
(and of course a newline).
.br
\ \ Backslash `\e' is interpreted as an escape character.
To place a `\e' character in
.IR string ,
write it twice: `\e\e';
to place any of the characters
`^', `[', or `\-' in
.IR string ,
you escape them with a preceding `\e'.
.br
\ \ Characters also lose their special meaning by position:
`^' is an ordinary character unless immediately
following the initial `[',
`]' is an ordinary character if immediately
following the initial `[' (or `^', if present),
and `\-' is an ordinary character if placed immediately
behind `[' or `^', or before ']'.
.PP
The concatenation of two regular expressions matches the leftmost and
then longest string
which can be divided with the first piece matching the first regular
expression and the second piece matching the second.
.PP
A regular expression may be enclosed between the sequences
`\fB\e(\fR' and `\fB\e)\fR',
which matches whatever the enclosed expression matches.
.PP
Any of the (single character matching) regular expressions mentioned above
or a regular expression surrounded by `\e(' and '\e)'
may be followed by the character `\fB*\fR' to form a regular expression 
which matches any number of adjacent occurrences (including 0) of characters
matched by the regular expression it follows.
.PP
A single character regular expression
or a regular expression surrounded by `\e(' and '\e)'
followed by `\fB\e{\fIm\fB,\fIn\fB\e}\fR'
matches a sequence of \fIm\fP through \fIn\fP occurences, inclusive,
of the single character expression.
The values of \fIm\fP and \fIn\fP
must be non-negative and smaller than 255.
The form `\fB\e{\fIm\fB\e}\fR' matches exactly \fIm\fP occurences,
`\fB\e{\fIm\fB,\e}\fR' matches at least \fIm\fP occurences.
.PP
The character `\s+2\fB~\fR\s0' may be used in a regular expression,
and matches the text which defined the replacement part
of the last
.I substitute
command.
.PP
The sequence `\fB\e\fIn\fR' matches the text that was matched by the
\fIn\fR-th regular subexpression enclosed between `\e(' and `\e)'
earlier in the expression.
.SS "Substitute replacement patterns"
.PP
The basic metacharacters for the replacement pattern are
`\fB&amp;\fR', `\fB~\fR', and `\fB#\fR'; the first two of them are
given as `\fB\e&amp;\fR' and `\fB\e~\fR' when
.I nomagic
is set.
Each instance of `\fB&amp;\fR' is replaced by the characters
which the regular expression matched.
The metacharacter `\fB~\fR' stands, in the replacement pattern,
for the defining text of the previous replacement pattern.
If the entire replacement pattern is `\fB#\fR',
the defining text of the previous replacement pattern is used.
.PP
Other metasequences possible in the replacement pattern
are always introduced by the escaping character `\fB\e\fR'.
The sequence `\fB\e\fIn\fR' is replaced by the text matched
by the \fIn\fR-th regular subexpression enclosed between
`\e(' and `\e)'.
When nested, parenthesized subexpressions are present,
\fIn\fR is determined by counting occurrences of `\e(' starting from the left.
The sequences `\fB\eu\fR' and `\fB\el\fR'
cause the immediately following character in
the replacement to be converted to upper- or lower-case respectively
if this character is a letter.
The sequences `\fB\eU\fR' and `\fB\eL\fR'
turn such conversion on,
either until `\fB\eE\fR' or `\fB\ee\fR' is encountered,
or until the end of the replacement pattern.
.SS "Option descriptions"
.PP
.TP
\fBautoindent\fR, \fBai\fR	default: noai
Can be used to ease the preparation of structured program text.
At the beginning of each
.I append ,
.I change
or
.I insert
command
or when a new line is
.I opened
or created by an
.I append ,
.I change ,
.I insert ,
or
.I substitute
operation within
.I open
or
.I visual
mode,
.I ex
looks at the line being appended after,
the first line changed
or the line inserted before and calculates the amount of white space
at the start of the line.
It then aligns the cursor at the level of indentation so determined.
.IP
If the user then types lines of text in,
they will continue to be justified at the displayed indenting level.
If more white space is typed at the beginning of a line,
the following line will start aligned with the first non-white character
of the previous line.
To back the cursor up to the preceding tab stop one can hit
\fB^D\fR.
The tab stops going backwards are defined at multiples of the
.I shiftwidth
option.
The user
.I cannot
backspace over the indent,
except by sending an end-of-file with a \fB^D\fR.
.IP
Specially processed in this mode is a line with no characters added
to it, which turns into a completely blank line (the white
space provided for the
.I autoindent
is discarded.)
Also specially processed in this mode are lines beginning with
an `^' and immediately followed by a \fB^D\fR.
This causes the input to be repositioned at the beginning of the line,
but retaining the previous indent for the next line.
Similarly, a `0' followed by a \fB^D\fR
repositions at the beginning but without
retaining the previous indent.
.IP
.I Autoindent
doesn't happen in
.I global
commands or when the input is not a terminal.
.TP
\fBautoprint\fR, \fBap\fR	default: ap
Causes the current line to be printed after each
.I delete ,
.I copy ,
.I join ,
.I move ,
.I substitute ,
.I t ,
.I undo
or
shift command.
This has the same effect as supplying a trailing `p'
to each such command.
.I Autoprint
is suppressed in globals,
and only applies to the last of many commands on a line.
.TP
\fBautowrite\fR, \fBaw\fR	default: noaw
Causes the contents of the buffer to be written to the current file
if the user has modified it and gives a
.I next,
.I rewind,
.I stop,
.I tag,
or
.I !
command, or a \fB^^\fR (switch files) or \fB^]\fR (tag goto) command
in
.I visual.
Note, that the
.I edit
and
.I ex
commands do
.B not
autowrite.
In each case, there is an equivalent way of switching when autowrite
is set to avoid the
.I autowrite
(\fIedit\fR
for
.I next ,
.I rewind!
for .I rewind ,
.I stop!
for
.I stop ,
.I tag!
for
.I tag ,
.I shell
for
.I ! ,
and
\fB:e\ #\fR and a \fB:ta!\fR command from within
.I visual).
.TP
\fBbeautify\fR, \fBbf\fR	default: nobeautify
Causes all control characters except tab, newline and form-feed
to be discarded from the input.
A complaint is registered the first time a
backspace character is discarded.
.I Beautify
does not apply to command input.
.TP
\fBdirectory\fR, \fBdir\fR	default: dir=/tmp
Specifies the directory in which
.I ex
places its buffer file.
If this directory in not
writable, then the editor will exit abruptly when it fails to be
able to create its buffer there.
.TP
\fBedcompatible\fR	default: noedcompatible
Causes the presence of absence of
.B g
and
.B c
suffixes on substitute commands to be remembered, and to be toggled
by repeating the suffices.  The suffix
.B r
makes the substitution be as in the
.I ~
command, instead of like
.I &amp;.
.TP
\fBerrorbells\fR, \fBeb\fR	default: noeb
Error messages are preceded by a bell.
Bell ringing in
.I open
and
.I visual
on errors is not suppressed by setting
.I noeb.
If possible the editor always places the error message in a standout mode of the
terminal (such as inverse video) instead of ringing the bell.
.TP
\fBexrc\fR			default: noexrc
If set, the current directory is searched for a
.I .exrc
file on startup.
If this file is found,
its content is treated as
.I ex
commands and executed immediately after the contents of
.I $HOME/.exrc
on startup.
.TP
\fBflash\fR, \fBfl\fR	default: flash
If the terminal provides the \*(lqvisual bell\*(rq capability,
ex will use it instead of the audible bell if
.I flash
is set.
.TP
\fBhardtabs\fR, \fBht\fR	default: ht=8
Gives the boundaries on which terminal hardware tabs are set (or
on which the system expands tabs).
.TP
\fBignorecase\fR, \fBic\fR	default: noic
All upper case characters in the text are mapped to lower case in regular
expression matching.
In addition, all upper case characters in regular expressions are mapped
to lower case except in character class specifications.
.TP
\fBlisp\fR	default: nolisp
\fIAutoindent\fR indents appropriately for
.I lisp
code, and the \fB( ) { } [[\fR and \fB]]\fR commands in
.I open
and
.I visual
are modified to have meaning for \fIlisp\fR.
.TP
\fBlist\fR	default: nolist
All printed lines will be displayed (more) unambiguously,
showing tabs and end-of-lines as in the
.I list
command.
.TP
\fBmagic\fR	default: magic for \fIex\fR and \fIvi\fR, \fINomagic\fR for \fIedit\fR.
If
.I nomagic
is set, the number of regular expression metacharacters is greatly reduced,
with only `^' and `$' having special effects.
In addition the metacharacters
`~'
and
`&amp;'
of the replacement pattern are treated as normal characters.
All the normal metacharacters may be made
.I magic
when
.I nomagic
is set by preceding them with a `\e'.
.TP
\fBmesg\fR	default: mesg
Causes write permission to be turned off to the terminal
while the user is in visual mode, if
.I nomesg
is set.
.TP
\fBmodelines, ml\fR	default: nomodelines
If
.I modelines
is set, then the first 5 lines and the last five lines of the file
will be checked for ex command lines and the comands issued.
To be recognized as a command line, the line must have the string
.B ex:
or
.B vi:
in it.
.\" preceeded by a tab or a space.
This string may be anywhere in the line and anything after the 
.I :
is interpeted as editor commands.  This option defaults to off because
of unexpected behavior when editting files such as
.I /etc/passwd.
.TP
\fBnumber, nu\fR	default: nonumber
Causes all output lines to be printed with their
line numbers.
In addition each input line will be prompted for by supplying the line number
it will have.
.TP
\fBopen\fR	default: open
If \fInoopen\fR, the commands
.I open
and
.I visual
are not permitted.
.\"This is set for
.\".I edit
.\"to prevent confusion resulting from accidental entry to 
.\"open or visual mode.
.TP
\fBoptimize, opt\fR	default: optimize
Throughput of text is expedited by setting the terminal
to not do automatic carriage returns
when printing more than one (logical) line of output,
greatly speeding output on terminals without addressable
cursors when text with leading white space is printed.
.TP
\fBparagraphs,\ para\fR	default: para=IPLPPPQPP\0LIbp
Specifies the paragraphs for the \fB{\fR and \fB}\fR operations in
.I open
and 
.I visual.
The pairs of characters in the option's value are the names
of the macros which start paragraphs.
.TP
\fBprompt\fR	default: prompt
Command mode input is prompted for with a `:'.
.TP
\fBredraw\fR	default: noredraw
The editor simulates (using great amounts of output), an intelligent
terminal on a dumb terminal (e.g. during insertions in
.I visual
the characters to the right of the cursor position are refreshed
as each input character is typed.)
Useful only at very high speed.
.TP
\fBremap\fP	default: remap
If on, macros are repeatedly tried until they are unchanged.
For example, if
.B o
is mapped to
.B O ,
and
.B O
is mapped to
.B I ,
then if
.I remap
is set,
.B o
will map to
.B I ,
but if
.I noremap
is set, it will map to
.B O .
.TP
\fBreport\fR	default: report=5, 2 for \fIedit\fR.
Specifies a threshold for feedback from commands.
Any command which modifies more than the specified number of lines
will provide feedback as to the scope of its changes.
For commands such as
.I global ,
.I open ,
.I undo ,
and
.I visual
which have potentially more far reaching scope,
the net change in the number of lines in the buffer is
presented at the end of the command, subject to this same threshold.
Thus notification is suppressed during a
.I global
command on the individual commands performed.
.TP
\fBscroll\fR	default: scroll=\(12 window
Determines the number of logical lines scrolled when an end-of-file
is received from a terminal input in command mode,
and the number of lines printed by a command mode
.I z
command (double the value of
.I scroll ).
.TP
\fBsections\fR	default: sections=SHNHH\0HU
Specifies the section macros for the \fB[[\fR and \fB]]\fR operations
in
.I open
and
.I visual.
The pairs of characters in the options's value are the names
of the macros which start paragraphs.
.TP
\fBshell\fR, \fBsh\fR	default: sh=/bin/sh
Gives the path name of the shell forked for 
the shell escape command `!', and by the
.I shell
command.
The default is taken from SHELL in the environment, if present.
.TP
\fBshiftwidth\fR, \fBsw\fR	default: sw=8
Gives the width a software tab stop,
used in reverse tabbing with \fB^D\fR when using
.I autoindent
to append text,
and by the shift commands.
.TP
\fBshowmatch, sm\fR	default: nosm
In
.I open
and
.I visual
mode, when a \fB)\fR or \fB}\fR is typed, move the cursor to the matching
\fB(\fR or \fB{\fR for one second if this matching character is on the
screen.  Extremely useful with
.I lisp.
.TP
\fBshowmode, smd\fR	default: nosmd
In
.I visual
mode, show a description of the current editing mode
in the window's lower right corner.
.TP
\fBslowopen, slow\fR	terminal dependent
Affects the display algorithm used in
.I visual
mode, holding off display updating during input of new text to improve
throughput when the terminal in use is both slow and unintelligent.
See
.I "An Introduction to Display Editing with Vi"
for more details.
.TP
\fBtabstop,\ ts\fR	default: ts=8
The editor expands tabs in the input file to be on
.I tabstop
boundaries for the purposes of display.
.TP
\fBtaglength,\ tl\fR	default: tl=0
Tags are not significant beyond this many characters.
A value of zero (the default) means that all characters are significant.
.TP
\fBtags\fR	default: tags=tags /usr/lib/tags
A path of files to be used as tag files for the
.I tag
command.
A requested tag is searched for in the specified files, sequentially.
By default, files called
.B tags
are searched for in the current directory and in /usr/lib
(a master file for the entire system).
.TP
\fBterm\fR	from environment TERM
The terminal type of the output device.
.TP
\fBterse\fR	default: noterse
Shorter error diagnostics are produced for the experienced user.
.TP
\fBwarn\fR	default: warn
Warn if there has been `[No write since last change]' before a `!'
command escape.
.TP
\fBwindow\fR	default: window=speed dependent
The number of lines in a text window in the
.I visual
command.
The default is 8 at slow speeds (600 baud or less),
16 at medium speed (1200 baud),
and the full screen (minus one line) at higher speeds.
.TP
\fBw300,\ w1200,\ w9600\fR
These are not true options but set
.B window
only if the speed is slow (300), medium (1200), or high (9600),
respectively.
They are suitable for an EXINIT
and make it easy to change the 8/16/full screen rule.
.TP
\fBwrapscan\fR, \fBws\fR	default: ws
Searches using the regular expressions in addressing
will wrap around past the end of the file.
.TP
\fBwrapmargin\fR, \fBwm\fR	default: wm=0
Defines a margin for automatic wrapover of text during input in
.I open
and
.I visual
modes.  See
.I "An Introduction to Text Editing with Vi"
for details.
.TP
\fBwriteany\fR, \fBwa\fR	default: nowa
.IP
Inhibit the checks normally made before
.I write
commands, allowing a write to any file which the system protection
mechanism will allow.
.SH "ENVIRONMENT VARIABLES"
.PP
The following environment variables affect the behaviour of ex:
.TP
.B COLUMNS
Overrides the system-supplied number of terminal columns.
.TP
.B EXINIT
Contains commands to execute at editor startup.
If this variable is present, the
.I .exrc
file in the user's home directory is ignored.
.TP
.B HOME
Used to locate the editor startup file.
.TP
.BR LANG ", " LC_ALL
See
.IR locale (7).
.TP
.B LC_CTYPE
Determines the mapping of bytes to characters,
types of characters,
case conversion
and composition of character classes in regular expressions.
.TP
.B LC_MESSAGES
Sets the language used for diagnostic and informal messages.
.TP
.B LINES
Overrides the system-supplied number of terminal lines.
.TP
.B NLSPATH
See
.IR catopen (3).
.TP
.B SHELL
The program file used to execute external commands.
.TP
.B TERM
Determines the terminal type.
.SH FILES
.TP
.B /usr/lib/ex/expreserve
preserve command
.TP
.B /usr/lib/ex/exrecover
recover command
.TP
.B /etc/termcap
describes capabilities of terminals
.TP
.B $HOME/.exrc
editor startup file
.TP
.B /var/tmp/Ex\fInnnnnnnnnn\fP
editor temporary
.TP
.B /var/tmp/Rx\fInnnnnnnnnn\fP
named buffer temporary
.TP
.B /var/lib/ex
preservation directory
.SH DOCUMENTATION
The document
.I "Edit: A tutorial"
(USD:14) provides a comprehensive introduction to
.I edit
assuming no previous knowledge of computers or the 
.SM UNIX
system.
.PP
The
.I "Ex Reference Manual \(en Version 3.7"
(USD:16)
is a comprehensive and complete manual for the command mode features
of
.I ex.
.\"but one cannot learn to use the editor by reading it.
The
.SM \fIUSAGE\fP
section of this page is taken from the manual.
For an introduction to
more advanced forms of editing using the command mode of
.I ex
see the editing documents written by Brian Kernighan for the editor
.I ed;
the material in the introductory and advanced documents works also with
.I ex.
.PP
.I "An Introduction to Display Editing with Vi"
(USD:15)
introduces the display editor
.I vi
and provides reference material on
.I vi.
(This reference now forms the
.IR vi (1)
manual page).
In addition, the
.I "Vi Quick Reference"
card summarizes the commands
of
.I vi
in a useful, functional way, and is useful with the
.I Introduction.
.SH SEE ALSO
awk(1),
ed(1),
grep(1),
sed(1),
grep(1),
vi(1),
catopen(3),
termcap(5),
environ(7),
locale(7),
regex(7)
.SH AUTHOR
Originally written by William Joy.
.PP
Mark Horton has maintained the editor since version 2.7, adding macros,
support for many unusual terminals,
and other features such as word abbreviation mode.
.PP
This version incorporates changes by Gunnar Ritter.
.SH NOTES
.I Undo
never clears the buffer modified condition.
.PP
The
.I z
command prints a number of logical rather than physical lines.
More than a screen full of output may result if long lines are present.
.PP
File input/output errors don't print a name if the command line \fB`\-'\fR
option is used.
.\".PP
.\"There is no easy way to do a single scan ignoring case.
.PP
The editor does not warn if text is placed in named buffers and not used
before exiting the editor.
.PP
Null (00) characters are converted to 0200 characters
when reading input files,
and cannot appear in resultant files.
.PP
LC_COLLATE locales are ignored;
collating symbols `[.c.]'
and equivalence classes `[=c=]'
in bracket expressions are recognized but useless
since `c' is restricted to a single character
and is the only character matched;
range expressions `[a\-m]' are always evaluated in byte order.
'\" et
.TH EXEC "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
exec
\(em execute commands and open, close, or copy file descriptors
.SH SYNOPSIS
.LP
.nf
exec \fB[\fIcommand \fB[\fIargument\fR...\fB]]\fR
.fi
.SH DESCRIPTION
The
.IR exec
utility shall open, close, and/or copy file descriptors as specified by
any redirections as part of the command.
.P
If
.IR exec
is specified without
.IR command
or
.IR argument s,
and any file descriptors with numbers greater than 2 are opened with
associated redirection statements, it is unspecified whether those file
descriptors remain open when the shell invokes another utility.
Scripts concerned that child shells could misuse open file descriptors
can always close them explicitly, as shown in one of the following
examples.
.P
If
.IR exec
is specified with
.IR command ,
it shall replace the shell with
.IR command
without creating a new process. If
.IR argument s
are specified, they shall be arguments to
.IR command .
Redirection affects the current shell execution environment.
.SH OPTIONS
None.
.SH OPERANDS
See the DESCRIPTION.
.SH STDIN
Not used.
.SH "INPUT FILES"
None.
.SH "ENVIRONMENT VARIABLES"
None.
.SH "ASYNCHRONOUS EVENTS"
Default.
.SH STDOUT
Not used.
.SH STDERR
The standard error shall be used only for diagnostic messages.
.SH "OUTPUT FILES"
None.
.SH "EXTENDED DESCRIPTION"
None.
.SH "EXIT STATUS"
If
.IR command
is specified,
.IR exec
shall not return to the shell; rather, the exit status of the process
shall be the exit status of the program implementing
.IR command ,
which overlaid the shell. If
.IR command
is not found, the exit status shall be 127. If
.IR command
is found, but it is not an executable utility, the exit status shall be
126. If a redirection error occurs (see
.IR "Section 2.8.1" ", " "Consequences of Shell Errors"),
the shell shall exit with a value in the range 1\(mi125. Otherwise,
.IR exec
shall return a zero exit status.
.SH "CONSEQUENCES OF ERRORS"
Default.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
None.
.SH EXAMPLES
Open
.IR readfile
as file descriptor 3 for reading:
.sp
.RS 4
.nf
\fB
exec 3&lt; readfile
.fi \fR
.P
.RE
.P
Open
.IR writefile
as file descriptor 4 for writing:
.sp
.RS 4
.nf
\fB
exec 4&gt; writefile
.fi \fR
.P
.RE
.P
Make file descriptor 5 a copy of file descriptor 0:
.sp
.RS 4
.nf
\fB
exec 5&lt;&amp;0
.fi \fR
.P
.RE
.P
Close file descriptor 3:
.sp
.RS 4
.nf
\fB
exec 3&lt;&amp;\(mi
.fi \fR
.P
.RE
.P
Cat the file
.BR maggie
by replacing the current shell with the
.IR cat
utility:
.sp
.RS 4
.nf
\fB
exec cat maggie
.fi \fR
.P
.RE
.SH "RATIONALE"
Most historical implementations were not conformant in that:
.sp
.RS 4
.nf
\fB
foo=bar exec cmd
.fi \fR
.P
.RE
.P
did not pass
.BR foo
to
.BR cmd .
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "Section 2.14" ", " "Special Built-In Utilities"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
'\" et
.TH EXIT "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
exit
\(em cause the shell to exit
.SH SYNOPSIS
.LP
.nf
exit \fB[\fIn\fB]\fR
.fi
.SH DESCRIPTION
The
.IR exit
utility shall cause the shell to exit with the exit status specified
by the unsigned decimal integer
.IR n .
If
.IR n
is specified, but its value is not between 0 and 255 inclusively, the
exit status is undefined.
.P
A
.IR trap
on
.BR EXIT
shall be executed before the shell terminates, except when the
.IR exit
utility is invoked in that
.IR trap
itself, in which case the shell shall exit immediately.
.SH OPTIONS
None.
.SH OPERANDS
See the DESCRIPTION.
.SH STDIN
Not used.
.SH "INPUT FILES"
None.
.SH "ENVIRONMENT VARIABLES"
None.
.SH "ASYNCHRONOUS EVENTS"
Default.
.SH STDOUT
Not used.
.SH STDERR
The standard error shall be used only for diagnostic messages.
.SH "OUTPUT FILES"
None.
.SH "EXTENDED DESCRIPTION"
None.
.SH "EXIT STATUS"
The exit status shall be
.IR n ,
if specified. Otherwise, the value shall be the exit value of the last
command executed, or zero if no command was executed. When
.IR exit
is executed in a
.IR trap
action, the last command is considered to be the command that executed
immediately preceding the
.IR trap
action.
.SH "CONSEQUENCES OF ERRORS"
Default.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
None.
.SH EXAMPLES
Exit with a
.IR true
value:
.sp
.RS 4
.nf
\fB
exit 0
.fi \fR
.P
.RE
.P
Exit with a
.IR false
value:
.sp
.RS 4
.nf
\fB
exit 1
.fi \fR
.P
.RE
.SH "RATIONALE"
As explained in other sections, certain exit status values have been
reserved for special uses and should be used by applications only for
those purposes:
.IP "\0126" 8
A file to be executed was found, but it was not an executable utility.
.IP "\0127" 8
A utility to be executed was not found.
.IP &gt;128 8
A command was interrupted by a signal.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "Section 2.14" ", " "Special Built-In Utilities"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.
.TH EXPAND "1" "March 2017" "GNU coreutils 8.27" "User Commands"
.SH NAME
expand \- convert tabs to spaces
.SH SYNOPSIS
.B expand
[\fI\,OPTION\/\fR]... [\fI\,FILE\/\fR]...
.SH DESCRIPTION
.\" Add any additional description here
.PP
Convert tabs in each FILE to spaces, writing to standard output.
.PP
With no FILE, or when FILE is \-, read standard input.
.PP
Mandatory arguments to long options are mandatory for short options too.
.TP
\fB\-i\fR, \fB\-\-initial\fR
do not convert tabs after non blanks
.TP
\fB\-t\fR, \fB\-\-tabs\fR=\fI\,NUMBER\/\fR
have tabs NUMBER characters apart, not 8
.TP
\fB\-t\fR, \fB\-\-tabs\fR=\fI\,LIST\/\fR
use comma separated list of explicit tab positions
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-\-version\fR
output version information and exit
.SH AUTHOR
Written by David MacKenzie.
.SH "REPORTING BUGS"
GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt;
.br
Report expand translation bugs to &lt;http://translationproject.org/team/&gt;
.SH COPYRIGHT
Copyright \(co 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
unexpand(1)
.PP
.br
Full documentation at: &lt;http://www.gnu.org/software/coreutils/expand&gt;
.br
or available locally via: info \(aq(coreutils) expand invocation\(aq
'\" et
.TH EXPORT "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
export
\(em set the export attribute for variables
.SH SYNOPSIS
.LP
.nf
export name\fB[\fR=\fIword\fB]\fR...
.P
export\fR \(mip
.fi
.SH DESCRIPTION
The shell shall give the
.IR export
attribute to the variables corresponding to the specified
.IR name s,
which shall cause them to be in the environment of subsequently
executed commands. If the name of a variable is followed by =\c
.IR word ,
then the value of that variable shall be set to
.IR word .
.P
The
.IR export
special built-in shall support the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 12.2" ", " "Utility Syntax Guidelines".
.P
When
.BR \(mip
is specified,
.IR export
shall write to the standard output the names and values of all exported
variables, in the following format:
.sp
.RS 4
.nf
\fB
"export %s=%s\en", &lt;\fIname\fR&gt;, &lt;\fIvalue\fR&gt;
.fi \fR
.P
.RE
.P
if
.IR name
is set, and:
.sp
.RS 4
.nf
\fB
"export %s\en", &lt;\fIname\fR&gt;
.fi \fR
.P
.RE
.P
if
.IR name
is unset.
.P
The shell shall format the output, including the proper use of quoting,
so that it is suitable for reinput to the shell as commands that
achieve the same exporting results, except:
.IP " 1." 4
Read-only variables with values cannot be reset.
.IP " 2." 4
Variables that were unset at the time they were output need not be
reset to the unset state if a value is assigned to the variable between
the time the state was saved and the time at which the saved output is
reinput to the shell.
.P
When no arguments are given, the results are unspecified. If a variable
assignment precedes the command name of
.IR export
but that variable is not also listed as an operand of
.IR export ,
then that variable shall be set in the current shell execution environment
after the completion of the
.IR export
command, but it is unspecified whether that variable is marked for export.
.SH OPTIONS
See the DESCRIPTION.
.SH OPERANDS
See the DESCRIPTION.
.SH STDIN
Not used.
.SH "INPUT FILES"
None.
.SH "ENVIRONMENT VARIABLES"
None.
.SH "ASYNCHRONOUS EVENTS"
Default.
.SH STDOUT
See the DESCRIPTION.
.SH STDERR S
The standard error shall be used only for diagnostic messages.
.SH "OUTPUT FILES"
None.
.SH "EXTENDED DESCRIPTION"
None.
.SH "EXIT STATUS"
Zero.
.SH "CONSEQUENCES OF ERRORS"
Default.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
None.
.SH EXAMPLES
Export
.IR PWD
and
.IR HOME
variables:
.sp
.RS 4
.nf
\fB
export PWD HOME
.fi \fR
.P
.RE
.P
Set and export the
.IR PATH
variable:
.sp
.RS 4
.nf
\fB
export PATH=/local/bin:$PATH
.fi \fR
.P
.RE
.P
Save and restore all exported variables:
.sp
.RS 4
.nf
\fB
export \(mip &gt; \fItemp-file\fR
unset \fIa lot of variables\fR
\&amp;... \fIprocessing\fR
\&amp;. \fItemp-file\fR
.fi \fR
.P
.RE
.SH "RATIONALE"
Some historical shells use the no-argument case as the functional
equivalent of what is required here with
.BR \(mip .
This feature was left unspecified because it is not historical practice
in all shells, and some scripts may rely on the now-unspecified results
on their implementations. Attempts to specify the
.BR \(mip
output as the default case were unsuccessful in achieving consensus.
The
.BR \(mip
option was added to allow portable access to the values that can be
saved and then later restored using; for example, a
.IR dot
script.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "Section 2.14" ", " "Special Built-In Utilities"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 12.2" ", " "Utility Syntax Guidelines"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.
.TH EXPR "1" "March 2017" "GNU coreutils 8.27" "User Commands"
.SH NAME
expr \- evaluate expressions
.SH SYNOPSIS
.B expr
\fI\,EXPRESSION\/\fR
.br
.B expr
\fI\,OPTION\/\fR
.SH DESCRIPTION
.\" Add any additional description here
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-\-version\fR
output version information and exit
.PP
Print the value of EXPRESSION to standard output.  A blank line below
separates increasing precedence groups.  EXPRESSION may be:
.TP
ARG1 | ARG2
ARG1 if it is neither null nor 0, otherwise ARG2
.TP
ARG1 &amp; ARG2
ARG1 if neither argument is null or 0, otherwise 0
.TP
ARG1 &lt; ARG2
ARG1 is less than ARG2
.TP
ARG1 &lt;= ARG2
ARG1 is less than or equal to ARG2
.TP
ARG1 = ARG2
ARG1 is equal to ARG2
.TP
ARG1 != ARG2
ARG1 is unequal to ARG2
.TP
ARG1 &gt;= ARG2
ARG1 is greater than or equal to ARG2
.TP
ARG1 &gt; ARG2
ARG1 is greater than ARG2
.TP
ARG1 + ARG2
arithmetic sum of ARG1 and ARG2
.TP
ARG1 \- ARG2
arithmetic difference of ARG1 and ARG2
.TP
ARG1 * ARG2
arithmetic product of ARG1 and ARG2
.TP
ARG1 / ARG2
arithmetic quotient of ARG1 divided by ARG2
.TP
ARG1 % ARG2
arithmetic remainder of ARG1 divided by ARG2
.TP
STRING : REGEXP
anchored pattern match of REGEXP in STRING
.TP
match STRING REGEXP
same as STRING : REGEXP
.TP
substr STRING POS LENGTH
substring of STRING, POS counted from 1
.TP
index STRING CHARS
index in STRING where any CHARS is found, or 0
.TP
length STRING
length of STRING
.TP
+ TOKEN
interpret TOKEN as a string, even if it is a
.IP
keyword like 'match' or an operator like '/'
.TP
( EXPRESSION )
value of EXPRESSION
.PP
Beware that many operators need to be escaped or quoted for shells.
Comparisons are arithmetic if both ARGs are numbers, else lexicographical.
Pattern matches return the string matched between \e( and \e) or null; if
\e( and \e) are not used, they return the number of characters matched or 0.
.PP
Exit status is 0 if EXPRESSION is neither null nor 0, 1 if EXPRESSION is null
or 0, 2 if EXPRESSION is syntactically invalid, and 3 if an error occurred.
.SH AUTHOR
Written by Mike Parker, James Youngman, and Paul Eggert.
.SH "REPORTING BUGS"
GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt;
.br
Report expr translation bugs to &lt;http://translationproject.org/team/&gt;
.SH COPYRIGHT
Copyright \(co 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
Full documentation at: &lt;http://www.gnu.org/software/coreutils/expr&gt;
.br
or available locally via: info \(aq(coreutils) expr invocation\(aq
.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.
.TH FALSE "1" "March 2017" "GNU coreutils 8.27" "User Commands"
.SH NAME
false \- do nothing, unsuccessfully
.SH SYNOPSIS
.B false
[\fI\,ignored command line arguments\/\fR]
.br
.B false
\fI\,OPTION\/\fR
.SH DESCRIPTION
.\" Add any additional description here
.PP
Exit with a status code indicating failure.
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-\-version\fR
output version information and exit
.PP
NOTE: your shell may have its own version of false, which usually supersedes
the version described here.  Please refer to your shell's documentation
for details about the options it supports.
.SH AUTHOR
Written by Jim Meyering.
.SH "REPORTING BUGS"
GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt;
.br
Report false translation bugs to &lt;http://translationproject.org/team/&gt;
.SH COPYRIGHT
Copyright \(co 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
Full documentation at: &lt;http://www.gnu.org/software/coreutils/false&gt;
.br
or available locally via: info \(aq(coreutils) false invocation\(aq
'\" et
.TH FC "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
fc
\(em process the command history list
.SH SYNOPSIS
.LP
.nf
fc \fB[\fR\(mir\fB] [\fR\(mie \fIeditor\fB] [\fIfirst \fB[\fIlast\fB]]\fR
.P
fc \(mil\fB [\fR\(minr\fB] [\fIfirst \fB[\fIlast\fB]]\fR
.P
fc \(mis\fB [\fIold\fR=\fInew\fB] [\fIfirst\fB]\fR
.fi
.SH DESCRIPTION
The
.IR fc
utility shall list, or shall edit and re-execute, commands previously
entered to an interactive
.IR sh .
.P
The command history list shall reference commands by number. The first
number in the list is selected arbitrarily. The relationship of a
number to its command shall not change except when the user logs in and
no other process is accessing the list, at which time the system may
reset the numbering to start the oldest retained command at another
number (usually 1). When the number reaches an
implementation-defined upper limit, which shall be no smaller than
the value in
.IR HISTSIZE
or 32\|767 (whichever is greater), the shell may wrap the numbers,
starting the next command with a lower number (usually 1). However,
despite this optional wrapping of numbers,
.IR fc
shall maintain the time-ordering sequence of the commands. For
example, if four commands in sequence are given the numbers 32\|766,
32\|767, 1 (wrapped), and 2 as they are executed, command 32\|767 is
considered the command previous to 1, even though its number is
higher.
.P
When commands are edited (when the
.BR \(mil
option is not specified), the resulting lines shall be entered at the
end of the history list and then re-executed by
.IR sh .
The
.IR fc
command that caused the editing shall not be entered into the history
list. If the editor returns a non-zero exit status, this shall
suppress the entry into the history list and the command re-execution.
Any command line variable assignments or redirection operators used
with
.IR fc
shall affect both the
.IR fc
command itself as well as the command that results; for example:
.sp
.RS 4
.nf
\fB
fc \(mis \(mi\|\(mi \(mi1 2&gt;/dev/null
.fi \fR
.P
.RE
.P
reinvokes the previous command, suppressing standard error for both
.IR fc
and the previous command.
.SH OPTIONS
The
.IR fc
utility shall conform to the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 12.2" ", " "Utility Syntax Guidelines".
.P
The following options shall be supported:
.IP "\fB\(mie\ \fIeditor\fR" 10
Use the editor named by
.IR editor
to edit the commands. The
.IR editor
string is a utility name, subject to search via the
.IR PATH
variable (see the Base Definitions volume of POSIX.1\(hy2008,
.IR "Chapter 8" ", " "Environment Variables").
The value in the
.IR FCEDIT
variable shall be used as a default when
.BR \(mie
is not specified. If
.IR FCEDIT
is null or unset,
.IR ed
shall be used as the editor.
.IP "\fB\(mil\fP" 10
(The letter ell.) List the commands rather than invoking an editor on
them. The commands shall be written in the sequence indicated by the
.IR first
and
.IR last
operands, as affected by
.BR \(mir ,
with each command preceded by the command number.
.IP "\fB\(min\fP" 10
Suppress command numbers when listing with
.BR \(mil .
.IP "\fB\(mir\fP" 10
Reverse the order of the commands listed (with
.BR \(mil )
or edited (with neither
.BR \(mil
nor
.BR \(mis ).
.IP "\fB\(mis\fP" 10
Re-execute the command without invoking an editor.
.SH OPERANDS
The following operands shall be supported:
.IP "\fIfirst\fR,\ \fIlast\fR" 10
Select the commands to list or edit. The number of previous commands
that can be accessed shall be determined by the value of the
.IR HISTSIZE
variable. The value of
.IR first
or
.IR last
or both shall be one of the following:
.RS 10 
.IP "\fB[+]\fInumber\fR" 10
A positive number representing a command number; command numbers can be
displayed with the
.BR \(mil
option.
.IP "\fB\(mi\fInumber\fR" 10
A negative decimal number representing the command that was executed
.IR number
of commands previously. For example, \(mi1 is the immediately previous
command.
.IP "\fIstring\fR" 10
A string indicating the most recently entered command that begins with
that string. If the
.IR old =\c
.IR new
operand is not also specified with
.BR \(mis ,
the string form of the
.IR first
operand cannot contain an embedded
&lt;equals-sign&gt;.
.P
When the synopsis form with
.BR \(mis
is used:
.IP " *" 4
If
.IR first
is omitted, the previous command shall be used.
.P
For the synopsis forms without
.BR \(mis :
.IP " *" 4
If
.IR last
is omitted,
.IR last
shall default to the previous command when
.BR \(mil
is specified; otherwise, it shall default to
.IR first .
.IP " *" 4
If
.IR first
and
.IR last
are both omitted, the previous 16 commands shall be listed or the
previous single command shall be edited (based on the
.BR \(mil
option).
.IP " *" 4
If
.IR first
and
.IR last
are both present, all of the commands from
.IR first
to
.IR last
shall be edited (without
.BR \(mil )
or listed (with
.BR \(mil ).
Editing multiple commands shall be accomplished by presenting to the
editor all of the commands at one time, each command starting on a new
line. If
.IR first
represents a newer command than
.IR last ,
the commands shall be listed or edited in reverse sequence, equivalent
to using
.BR \(mir .
For example, the following commands on the first line are equivalent to
the corresponding commands on the second:
.RS 4 
.sp
.RS 4
.nf
\fB
fc \(mir 10 20    fc    30 40
fc    20 10    fc \(mir 40 30
.fi \fR
.P
.RE
.RE
.IP " *" 4
When a range of commands is used, it shall not be an error to specify
.IR first
or
.IR last
values that are not in the history list;
.IR fc
shall substitute the value representing the oldest or newest command in
the list, as appropriate. For example, if there are only ten commands
in the history list, numbered 1 to 10:
.RS 4 
.sp
.RS 4
.nf
\fB
fc \(mil
fc 1 99
.fi \fR
.P
.RE
.P
shall list and edit, respectively, all ten commands.
.RE
.RE
.IP "\fIold\fP=\fInew\fR" 10
Replace the first occurrence of string
.IR old
in the commands to be re-executed by the string
.IR new .
.SH STDIN
Not used.
.SH "INPUT FILES"
None.
.SH "ENVIRONMENT VARIABLES"
The following environment variables shall affect the execution of
.IR fc :
.IP "\fIFCEDIT\fP" 10
This variable, when expanded by the shell, shall determine the default
value for the
.BR \(mie
.IR editor
option's
.IR editor
option-argument. If
.IR FCEDIT
is null or unset,
.IR ed
shall be used as the editor.
.IP "\fIHISTFILE\fP" 10
Determine a pathname naming a command history file. If the
.IR HISTFILE
variable is not set, the shell may attempt to access or create a file
.BR .sh_history
in the directory referred to by the
.IR HOME
environment variable. If the shell cannot obtain both read and write
access to, or create, the history file, it shall use an unspecified
mechanism that allows the history to operate properly. (References to
history ``file'' in this section shall be understood to mean this
unspecified mechanism in such cases.) An implementation may choose to
access this variable only when initializing the history file; this
initialization shall occur when
.IR fc
or
.IR sh
first attempt to retrieve entries from, or add entries to, the file, as
the result of commands issued by the user, the file named by the
.IR ENV
variable, or implementation-defined system start-up files. In some
historical shells, the history file is initialized just after the
.IR ENV
file has been processed. Therefore, it is implementation-defined
whether changes made to
.IR HISTFILE
after the history file has been initialized are effective.
Implementations may choose to disable the history list mechanism for
users with appropriate privileges who do not set
.IR HISTFILE ;
the specific circumstances under which this occurs are
implementation-defined. If more than one instance of the shell is
using the same history file, it is unspecified how updates to the
history file from those shells interact. As entries are deleted from
the history file, they shall be deleted oldest first. It is
unspecified when history file entries are physically removed from the
history file.
.IP "\fIHISTSIZE\fP" 10
Determine a decimal number representing the limit to the number of
previous commands that are accessible. If this variable is unset, an
unspecified default greater than or equal to 128 shall be used. The
maximum number of commands in the history list is unspecified, but
shall be at least 128. An implementation may choose to access this
variable only when initializing the history file, as described under
.IR HISTFILE .
Therefore, it is unspecified whether changes made to
.IR HISTSIZE
after the history file has been initialized are effective.
.IP "\fILANG\fP" 10
Provide a default value for the internationalization variables that are
unset or null. (See the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 8.2" ", " "Internationalization Variables"
for the precedence of internationalization variables used to determine
the values of locale categories.)
.IP "\fILC_ALL\fP" 10
If set to a non-empty string value, override the values of all the
other internationalization variables.
.IP "\fILC_CTYPE\fP" 10
Determine the locale for the interpretation of sequences of bytes of
text data as characters (for example, single-byte as opposed to
multi-byte characters in arguments and input files).
.IP "\fILC_MESSAGES\fP" 10
.br
Determine the locale that should be used to affect the format and
contents of diagnostic messages written to standard error.
.IP "\fINLSPATH\fP" 10
Determine the location of message catalogs for the processing of
.IR LC_MESSAGES .
.SH "ASYNCHRONOUS EVENTS"
Default.
.SH STDOUT
When the
.BR \(mil
option is used to list commands, the format of each command in the list
shall be as follows:
.sp
.RS 4
.nf
\fB
"%d\et%s\en", &lt;\fIline number\fR&gt;, &lt;\fIcommand\fR&gt;
.fi \fR
.P
.RE
.P
If both the
.BR \(mil
and
.BR \(min
options are specified, the format of each command shall be:
.sp
.RS 4
.nf
\fB
"\et%s\en", &lt;\fIcommand\fR&gt;
.fi \fR
.P
.RE
.P
If the &lt;\fIcommand\fP&gt; consists of more than one line, the lines after
the first shall be displayed as:
.sp
.RS 4
.nf
\fB
"\et%s\en", &lt;\fIcontinued-command\fR&gt;
.fi \fR
.P
.RE
.SH STDERR
The standard error shall be used only for diagnostic messages.
.SH "OUTPUT FILES"
None.
.SH "EXTENDED DESCRIPTION"
None.
.SH "EXIT STATUS"
The following exit values shall be returned:
.IP "\00" 6
Successful completion of the listing.
.IP &gt;0 6
An error occurred.
.P
Otherwise, the exit status shall be that of the commands executed by
.IR fc .
.SH "CONSEQUENCES OF ERRORS"
Default.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
Since editors sometimes use file descriptors as integral parts of their
editing, redirecting their file descriptors as part of the
.IR fc
command can produce unexpected results. For example, if
.IR vi
is the
.IR FCEDIT
editor, the command:
.sp
.RS 4
.nf
\fB
fc \(mis | more
.fi \fR
.P
.RE
.P
does not work correctly on many systems.
.P
Users on windowing systems may want to have separate history files for
each window by setting
.IR HISTFILE
as follows:
.sp
.RS 4
.nf
\fB
HISTFILE=$HOME/.sh_hist$$
.fi \fR
.P
.RE
.SH "EXAMPLES"
None.
.SH RATIONALE
This utility is based on the
.IR fc
built-in of the KornShell.
.P
An early proposal specified the
.BR \(mie
option as
.BR [\(mie
.IR editor
.BR [ \c
.IR old \c
=
.IR new
.BR ]\|] ,
which is not historical practice. Historical practice in
.IR fc
of either
.BR [\(mie
.IR editor \c
.BR ]
or
.BR "[\(mie \(mi ["
.IR old \c
=
.IR new
.BR ]\|]
is acceptable, but not both together. To clarify this, a new option
.BR \(mis
was introduced replacing the
.BR "[\(mie \(mi]" .
This resolves the conflict and makes
.IR fc
conform to the Utility Syntax Guidelines.
.IP "\fIHISTFILE\fP" 10
Some implementations of the KornShell check for the superuser
and do not create a history file unless
.IR HISTFILE
is set. This is done primarily to avoid creating unlinked files in the
root file system when logging in during single-user mode.
.IR HISTFILE
must be set for the superuser to have history.
.IP "\fIHISTSIZE\fP" 10
Needed to limit the size of history files. It is the intent of the
standard developers that when two shells share the same history file,
commands that are entered in one shell shall be accessible by the other
shell. Because of the difficulties of synchronization over a network,
the exact nature of the interaction is unspecified.
.P
The initialization process for the history file can be dependent on the
system start-up files, in that they may contain commands that
effectively preempt the settings the user has for
.IR HISTFILE
and
.IR HISTSIZE .
For example, function definition commands are recorded in the history
file. If the system administrator includes function definitions in some
system start-up file called before the
.IR ENV
file, the history file is initialized before the user can influence its
characteristics. In some historical shells, the history file is
initialized just after the
.IR ENV
file has been processed. Because of these situations, the text requires
the initialization process to be implementation-defined.
.P
Consideration was given to omitting the
.IR fc
utility in favor of the command line editing feature in
.IR sh .
For example, in
.IR vi
editing mode, typing
.BR \(dq&lt;ESC&gt; v\(dq 
is equivalent to:
.sp
.RS 4
.nf
\fB
EDITOR=vi fc
.fi \fR
.P
.RE
.P
However, the
.IR fc
utility allows the user the flexibility to edit multiple commands
simultaneously (such as
.IR fc
10 20) and to use editors other than those supported by
.IR sh
for command line editing.
.P
In the KornShell, the alias
.BR r
(``re-do'') is preset to
.IR fc
.BR "\(mie \(mi"
(equivalent to the POSIX
.IR fc
.BR \(mis ).
This is probably an easier command name to remember than
.IR fc
(``fix command''), but it does not meet the Utility Syntax Guidelines.
Renaming
.IR fc
to
.IR hist
or
.IR redo
was considered, but since this description closely matches historical
KornShell practice already, such a renaming was seen as gratuitous.
Users are free to create aliases whenever odd historical names such as
.IR fc ,
.IR awk ,
.IR cat ,
.IR grep ,
or
.IR yacc
are standardized by POSIX.
.P
Command numbers have no ordering effects; they are like serial numbers.
The
.BR \(mir
option and \(mi\fInumber\fP operand address the sequence of command
execution, regardless of serial numbers. So, for example, if the
command number wrapped back to 1 at some arbitrary point, there would
be no ambiguity associated with traversing the wrap point. For example,
if the command history were:
.sp
.RS 4
.nf
\fB
32766: echo 1
32767: echo 2
1: echo 3
.fi \fR
.P
.RE
.P
the number \(mi2 refers to command 32\|767 because it is the second
previous command, regardless of serial number.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "\fIsh\fR\^"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "Chapter 8" ", " "Environment Variables",
.IR "Section 12.2" ", " "Utility Syntax Guidelines"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
'\" et
.TH FG "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
fg
\(em run jobs in the foreground
.SH SYNOPSIS
.LP
.nf
fg \fB[\fIjob_id\fB]\fR
.fi
.SH DESCRIPTION
If job control is enabled (see the description of
.IR set
.BR \(mim ),
the
.IR fg
utility shall move a background job from the current environment (see
.IR "Section 2.12" ", " "Shell Execution Environment")
into the foreground.
.P
Using
.IR fg
to place a job into the foreground shall remove its process ID from the
list of those ``known in the current shell execution environment''; see
.IR "Section 2.9.3.1" ", " "Examples".
.SH OPTIONS
None.
.SH OPERANDS
The following operand shall be supported:
.IP "\fIjob_id\fR" 10
Specify the job to be run as a foreground job. If no
.IR job_id
operand is given, the
.IR job_id
for the job that was most recently suspended, placed in the background,
or run as a background job shall be used. The format of
.IR job_id
is described in the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 3.204" ", " "Job Control Job ID".
.SH STDIN
Not used.
.SH "INPUT FILES"
None.
.SH "ENVIRONMENT VARIABLES"
The following environment variables shall affect the execution of
.IR fg :
.IP "\fILANG\fP" 10
Provide a default value for the internationalization variables that are
unset or null. (See the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 8.2" ", " "Internationalization Variables"
for the precedence of internationalization variables used to determine
the values of locale categories.)
.IP "\fILC_ALL\fP" 10
If set to a non-empty string value, override the values of all the
other internationalization variables.
.IP "\fILC_CTYPE\fP" 10
Determine the locale for the interpretation of sequences of bytes of
text data as characters (for example, single-byte as opposed to
multi-byte characters in arguments).
.IP "\fILC_MESSAGES\fP" 10
.br
Determine the locale that should be used to affect the format and
contents of diagnostic messages written to standard error.
.IP "\fINLSPATH\fP" 10
Determine the location of message catalogs for the processing of
.IR LC_MESSAGES .
.SH "ASYNCHRONOUS EVENTS"
Default.
.SH STDOUT
The
.IR fg
utility shall write the command line of the job to standard output
in the following format:
.sp
.RS 4
.nf
\fB
"%s\en", &lt;\fIcommand\fR&gt;
.fi \fR
.P
.RE
.SH STDERR
The standard error shall be used only for diagnostic messages.
.SH "OUTPUT FILES"
None.
.SH "EXTENDED DESCRIPTION"
None.
.SH "EXIT STATUS"
The following exit values shall be returned:
.IP "\00" 6
Successful completion.
.IP &gt;0 6
An error occurred.
.SH "CONSEQUENCES OF ERRORS"
If job control is disabled, the
.IR fg
utility shall exit with an error and no job shall be placed in the
foreground.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
The
.IR fg
utility does not work as expected when it is operating in its own
utility execution environment because that environment has no
applicable jobs to manipulate. See the APPLICATION USAGE section for
.IR "\fIbg\fR\^".
For this reason,
.IR fg
is generally implemented as a shell regular built-in.
.SH EXAMPLES
None.
.SH RATIONALE
The extensions to the shell specified in this volume of POSIX.1\(hy2008 have mostly been based
on features provided by the KornShell. The job control features
provided by
.IR bg ,
.IR fg ,
and
.IR jobs
are also based on the KornShell. The standard developers examined the
characteristics of the C shell versions of these utilities and found
that differences exist. Despite widespread use of the C shell, the
KornShell versions were selected for this volume of POSIX.1\(hy2008 to maintain a degree of
uniformity with the rest of the KornShell features selected (such as
the very popular command line editing features).
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "Section 2.9.3.1" ", " "Examples",
.IR "Section 2.12" ", " "Shell Execution Environment",
.IR "\fIbg\fR\^",
.IR "\fIkill\fR\^",
.IR "\fIjobs\fR\^",
.IR "\fIwait\fR\^"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 3.204" ", " "Job Control Job ID",
.IR "Chapter 8" ", " "Environment Variables"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
.\" $File: file.man,v 1.125 2017/01/03 11:24:46 christos Exp $
.Dd October 19, 2016
.Dt FILE 1
.Os
.Sh NAME
.Nm file
.Nd determine file type
.Sh SYNOPSIS
.Nm
.Bk -words
.Op Fl bcdEhiklLNnprsvzZ0
.Op Fl Fl apple
.Op Fl Fl extension
.Op Fl Fl mime-encoding
.Op Fl Fl mime-type
.Op Fl e Ar testname
.Op Fl F Ar separator
.Op Fl f Ar namefile
.Op Fl m Ar magicfiles
.Op Fl P Ar name=value
.Ar
.Ek
.Nm
.Fl C
.Op Fl m Ar magicfiles
.Nm
.Op Fl Fl help
.Sh DESCRIPTION
This manual page documents version 5.30 of the
.Nm
command.
.Pp
.Nm
tests each argument in an attempt to classify it.
There are three sets of tests, performed in this order:
filesystem tests, magic tests, and language tests.
The
.Em first
test that succeeds causes the file type to be printed.
.Pp
The type printed will usually contain one of the words
.Em text
(the file contains only
printing characters and a few common control
characters and is probably safe to read on an
.Dv ASCII
terminal),
.Em executable
(the file contains the result of compiling a program
in a form understandable to some
.Tn UNIX
kernel or another),
or
.Em data
meaning anything else (data is usually
.Dq binary
or non-printable).
Exceptions are well-known file formats (core files, tar archives)
that are known to contain binary data.
When modifying magic files or the program itself, make sure to
.Em "preserve these keywords" .
Users depend on knowing that all the readable files in a directory
have the word
.Dq text
printed.
Don't do as Berkeley did and change
.Dq shell commands text
to
.Dq shell script .
.Pp
The filesystem tests are based on examining the return from a
.Xr stat 2
system call.
The program checks to see if the file is empty,
or if it's some sort of special file.
Any known file types appropriate to the system you are running on
(sockets, symbolic links, or named pipes (FIFOs) on those systems that
implement them)
are intuited if they are defined in the system header file
.In sys/stat.h .
.Pp
The magic tests are used to check for files with data in
particular fixed formats.
The canonical example of this is a binary executable (compiled program)
.Dv a.out
file, whose format is defined in
.In elf.h ,
.In a.out.h
and possibly
.In exec.h
in the standard include directory.
These files have a
.Dq "magic number"
stored in a particular place
near the beginning of the file that tells the
.Tn UNIX
operating system
that the file is a binary executable, and which of several types thereof.
The concept of a
.Dq "magic"
has been applied by extension to data files.
Any file with some invariant identifier at a small fixed
offset into the file can usually be described in this way.
The information identifying these files is read from the compiled
magic file
.Pa /usr/share/file/misc/magic.mgc ,
or the files in the directory
.Pa /usr/share/file/misc/magic
if the compiled file does not exist.
In addition, if
.Pa $HOME/.magic.mgc
or
.Pa $HOME/.magic
exists, it will be used in preference to the system magic files.
.Pp
If a file does not match any of the entries in the magic file,
it is examined to see if it seems to be a text file.
ASCII, ISO-8859-x, non-ISO 8-bit extended-ASCII character sets
(such as those used on Macintosh and IBM PC systems),
UTF-8-encoded Unicode, UTF-16-encoded Unicode, and EBCDIC
character sets can be distinguished by the different
ranges and sequences of bytes that constitute printable text
in each set.
If a file passes any of these tests, its character set is reported.
ASCII, ISO-8859-x, UTF-8, and extended-ASCII files are identified
as
.Dq text
because they will be mostly readable on nearly any terminal;
UTF-16 and EBCDIC are only
.Dq character data
because, while
they contain text, it is text that will require translation
before it can be read.
In addition,
.Nm
will attempt to determine other characteristics of text-type files.
If the lines of a file are terminated by CR, CRLF, or NEL, instead
of the Unix-standard LF, this will be reported.
Files that contain embedded escape sequences or overstriking
will also be identified.
.Pp
Once
.Nm
has determined the character set used in a text-type file,
it will
attempt to determine in what language the file is written.
The language tests look for particular strings (cf.
.In names.h )
that can appear anywhere in the first few blocks of a file.
For example, the keyword
.Em .br
indicates that the file is most likely a
.Xr troff 1
input file, just as the keyword
.Em struct
indicates a C program.
These tests are less reliable than the previous
two groups, so they are performed last.
The language test routines also test for some miscellany
(such as
.Xr tar 1
archives).
.Pp
Any file that cannot be identified as having been written
in any of the character sets listed above is simply said to be
.Dq data .
.Sh OPTIONS
.Bl -tag -width indent
.It Fl Fl apple
Causes the file command to output the file type and creator code as
used by older MacOS versions. The code consists of eight letters,
the first describing the file type, the latter the creator.
.It Fl b , Fl Fl brief
Do not prepend filenames to output lines (brief mode).
.It Fl C , Fl Fl compile
Write a
.Pa magic.mgc
output file that contains a pre-parsed version of the magic file or directory.
.It Fl c , Fl Fl checking-printout
Cause a checking printout of the parsed form of the magic file.
This is usually used in conjunction with the
.Fl m
flag to debug a new magic file before installing it.
.It Fl d
Prints internal debugging information to stderr.
.It Fl E
On filesystem errors (file not found etc), instead of handling the error
as regular output as POSIX mandates and keep going, issue an error message
and exit.
.It Fl e , Fl Fl exclude Ar testname
Exclude the test named in
.Ar testname
from the list of tests made to determine the file type.
Valid test names are:
.Bl -tag -width compress
.It apptype
.Dv EMX
application type (only on EMX).
.It ascii
Various types of text files (this test will try to guess the text
encoding, irrespective of the setting of the
.Sq encoding
option).
.It encoding
Different text encodings for soft magic tests.
.It tokens
Ignored for backwards compatibility.
.It cdf
Prints details of Compound Document Files.
.It compress
Checks for, and looks inside, compressed files.
.It elf
Prints ELF file details, provided soft magic tests are enabled and the
elf magic is found.
.It soft
Consults magic files.
.It tar
Examines tar files.
.It text
A synonym for
.Sq ascii .
.El
.It Fl Fl extension 
Print a slash-separated list of valid extensions for the file type found.
.It Fl F , Fl Fl separator Ar separator
Use the specified string as the separator between the filename and the
file result returned.
Defaults to
.Sq \&amp;: .
.It Fl f , Fl Fl files-from Ar namefile
Read the names of the files to be examined from
.Ar namefile
(one per line)
before the argument list.
Either
.Ar namefile
or at least one filename argument must be present;
to test the standard input, use
.Sq -
as a filename argument.
Please note that
.Ar namefile
is unwrapped and the enclosed filenames are processed when this option is
encountered and before any further options processing is done.
This allows one to process multiple lists of files with different command line
arguments on the same
.Nm
invocation.
Thus if you want to set the delimiter, you need to do it before you specify
the list of files, like:
.Dq Fl F Ar @ Fl f Ar namefile ,
instead of:
.Dq Fl f Ar namefile Fl F Ar @ .
.It Fl h , Fl Fl no-dereference
option causes symlinks not to be followed
(on systems that support symbolic links).
This is the default if the environment variable
.Dv POSIXLY_CORRECT
is not defined.
.It Fl i , Fl Fl mime
Causes the file command to output mime type strings rather than the more
traditional human readable ones.
Thus it may say
.Sq text/plain; charset=us-ascii
rather than
.Dq ASCII text .
.It Fl Fl mime-type , Fl Fl mime-encoding
Like
.Fl i ,
but print only the specified element(s).
.It Fl k , Fl Fl keep-going
Don't stop at the first match, keep going.
Subsequent matches will be
have the string
.Sq "\[rs]012\- "
prepended.
(If you want a newline, see the
.Fl r
option.)
The magic pattern with the highest strength (see the
.Fl l
option) comes first.
.It Fl l , Fl Fl list
Shows a list of patterns and their strength sorted descending by
.Xr magic 4
strength
which is used for the matching (see also the
.Fl k
option).
.It Fl L , Fl Fl dereference
option causes symlinks to be followed, as the like-named option in
.Xr ls 1
(on systems that support symbolic links).
This is the default if the environment variable
.Ev POSIXLY_CORRECT
is defined.
.It Fl m , Fl Fl magic-file Ar magicfiles
Specify an alternate list of files and directories containing magic.
This can be a single item, or a colon-separated list.
If a compiled magic file is found alongside a file or directory,
it will be used instead.
.It Fl N , Fl Fl no-pad
Don't pad filenames so that they align in the output.
.It Fl n , Fl Fl no-buffer
Force stdout to be flushed after checking each file.
This is only useful if checking a list of files.
It is intended to be used by programs that want filetype output from a pipe.
.It Fl p , Fl Fl preserve-date
On systems that support
.Xr utime 3
or
.Xr utimes 2 ,
attempt to preserve the access time of files analyzed, to pretend that
.Nm
never read them.
.It Fl P , Fl Fl parameter Ar name=value
Set various parameter limits.
.Bl -column "elf_phnum" "Default" "XXXXXXXXXXXXXXXXXXXXXXXXXXX" -offset indent
.It Sy "Name" Ta Sy "Default" Ta Sy "Explanation"
.It Li indir Ta 15 Ta recursion limit for indirect magic
.It Li name Ta 30 Ta use count limit for name/use magic
.It Li elf_notes Ta 256 Ta max ELF notes processed
.It Li elf_phnum Ta 128 Ta max ELF program sections processed
.It Li elf_shnum Ta 32768 Ta max ELF sections processed
.It Li regex Ta 8192 Ta length limit for regex searches
.It Li bytes Ta 1048576 Ta max number of bytes to read from file
.El
.It Fl r , Fl Fl raw
Don't translate unprintable characters to \eooo.
Normally
.Nm
translates unprintable characters to their octal representation.
.It Fl s , Fl Fl special-files
Normally,
.Nm
only attempts to read and determine the type of argument files which
.Xr stat 2
reports are ordinary files.
This prevents problems, because reading special files may have peculiar
consequences.
Specifying the
.Fl s
option causes
.Nm
to also read argument files which are block or character special files.
This is useful for determining the filesystem types of the data in raw
disk partitions, which are block special files.
This option also causes
.Nm
to disregard the file size as reported by
.Xr stat 2
since on some systems it reports a zero size for raw disk partitions.
.It Fl v , Fl Fl version
Print the version of the program and exit.
.It Fl z , Fl Fl uncompress
Try to look inside compressed files.
.It Fl Z , Fl Fl uncompress-noreport
Try to look inside compressed files, but report information about the contents
only not the compression.
.It Fl 0 , Fl Fl print0
Output a null character
.Sq \e0
after the end of the filename.
Nice to
.Xr cut 1
the output.
This does not affect the separator, which is still printed.
.Pp
If this option is repeated more than once, then 
.Nm
prints just the filename followed by a NUL followed by the description
(or ERROR: text) followed by a second NUL for each entry.
.It Fl -help
Print a help message and exit.
.El
.Sh FILES
.Bl -tag -width /usr/share/file/misc/magic.mgc -compact
.It Pa /usr/share/file/misc/magic.mgc
Default compiled list of magic.
.It Pa /usr/share/file/misc/magic
Directory containing default magic files.
.El
.Sh ENVIRONMENT
The environment variable
.Ev MAGIC
can be used to set the default magic file name.
If that variable is set, then
.Nm
will not attempt to open
.Pa $HOME/.magic .
.Nm
adds
.Dq Pa .mgc
to the value of this variable as appropriate.
However,
.Pa file
has to exist in order for
.Pa file.mime
to be considered.
The environment variable
.Ev POSIXLY_CORRECT
controls (on systems that support symbolic links), whether
.Nm
will attempt to follow symlinks or not.
If set, then
.Nm
follows symlink, otherwise it does not.
This is also controlled by the
.Fl L
and
.Fl h
options.
.Sh SEE ALSO
.Xr hexdump 1 ,
.Xr od 1 ,
.Xr strings 1 ,
.Xr magic 5
.Sh STANDARDS CONFORMANCE
This program is believed to exceed the System V Interface Definition
of FILE(CMD), as near as one can determine from the vague language
contained therein.
Its behavior is mostly compatible with the System V program of the same name.
This version knows more magic, however, so it will produce
different (albeit more accurate) output in many cases.
.\" URL: http://www.opengroup.org/onlinepubs/009695399/utilities/file.html
.Pp
The one significant difference
between this version and System V
is that this version treats any white space
as a delimiter, so that spaces in pattern strings must be escaped.
For example,
.Bd -literal -offset indent
\*[Gt]10	string	language impress\ 	(imPRESS data)
.Ed
.Pp
in an existing magic file would have to be changed to
.Bd -literal -offset indent
\*[Gt]10	string	language\e impress	(imPRESS data)
.Ed
.Pp
In addition, in this version, if a pattern string contains a backslash,
it must be escaped.
For example
.Bd -literal -offset indent
0	string		\ebegindata	Andrew Toolkit document
.Ed
.Pp
in an existing magic file would have to be changed to
.Bd -literal -offset indent
0	string		\e\ebegindata	Andrew Toolkit document
.Ed
.Pp
SunOS releases 3.2 and later from Sun Microsystems include a
.Nm
command derived from the System V one, but with some extensions.
This version differs from Sun's only in minor ways.
It includes the extension of the
.Sq \*[Am]
operator, used as,
for example,
.Bd -literal -offset indent
\*[Gt]16	long\*[Am]0x7fffffff	\*[Gt]0		not stripped
.Ed
.Sh MAGIC DIRECTORY
The magic file entries have been collected from various sources,
mainly USENET, and contributed by various authors.
Christos Zoulas (address below) will collect additional
or corrected magic file entries.
A consolidation of magic file entries
will be distributed periodically.
.Pp
The order of entries in the magic file is significant.
Depending on what system you are using, the order that
they are put together may be incorrect.
If your old
.Nm
command uses a magic file,
keep the old magic file around for comparison purposes
(rename it to
.Pa /usr/share/file/misc/magic.orig ) .
.Sh EXAMPLES
.Bd -literal -offset indent
$ file file.c file /dev/{wd0a,hda}
file.c:   C program text
file:     ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV),
dynamically linked (uses shared libs), stripped
/dev/wd0a: block special (0/0)
/dev/hda: block special (3/0)

$ file -s /dev/wd0{b,d}
/dev/wd0b: data
/dev/wd0d: x86 boot sector

$ file -s /dev/hda{,1,2,3,4,5,6,7,8,9,10}
/dev/hda:   x86 boot sector
/dev/hda1:  Linux/i386 ext2 filesystem
/dev/hda2:  x86 boot sector
/dev/hda3:  x86 boot sector, extended partition table
/dev/hda4:  Linux/i386 ext2 filesystem
/dev/hda5:  Linux/i386 swap file
/dev/hda6:  Linux/i386 swap file
/dev/hda7:  Linux/i386 swap file
/dev/hda8:  Linux/i386 swap file
/dev/hda9:  empty
/dev/hda10: empty

$ file -i file.c file /dev/{wd0a,hda}
file.c:      text/x-c
file:        application/x-executable
/dev/hda:    application/x-not-regular-file
/dev/wd0a:   application/x-not-regular-file

.Ed
.Sh HISTORY
There has been a
.Nm
command in every
.Dv UNIX since at least Research Version 4
(man page dated November, 1973).
The System V version introduced one significant major change:
the external list of magic types.
This slowed the program down slightly but made it a lot more flexible.
.Pp
This program, based on the System V version,
was written by Ian Darwin
.Aq ian@darwinsys.com
without looking at anybody else's source code.
.Pp
John Gilmore revised the code extensively, making it better than
the first version.
Geoff Collyer found several inadequacies
and provided some magic file entries.
Contributions of the
.Sq \*[Am]
operator by Rob McMahon, 
.Aq cudcv@warwick.ac.uk ,
1989.
.Pp
Guy Harris,
.Aq guy@netapp.com ,
made many changes from 1993 to the present.
.Pp
Primary development and maintenance from 1990 to the present by
Christos Zoulas
.Aq christos@astron.com .
.Pp
Altered by Chris Lowth
.Aq chris@lowth.com ,
2000: handle the
.Fl i
option to output mime type strings, using an alternative
magic file and internal logic.
.Pp
Altered by Eric Fischer
.Aq enf@pobox.com ,
July, 2000,
to identify character codes and attempt to identify the languages
of non-ASCII files.
.Pp
Altered by Reuben Thomas
.Aq rrt@sc3d.org ,
2007-2011, to improve MIME support, merge MIME and non-MIME magic,
support directories as well as files of magic, apply many bug fixes,
update and fix a lot of magic, improve the build system, improve the
documentation, and rewrite the Python bindings in pure Python.
.Pp
The list of contributors to the
.Sq magic
directory (magic files)
is too long to include here.
You know who you are; thank you.
Many contributors are listed in the source files.
.Sh LEGAL NOTICE
Copyright (c) Ian F. Darwin, Toronto, Canada, 1986-1999.
Covered by the standard Berkeley Software Distribution copyright; see the file
COPYING in the source distribution.
.Pp
The files
.Pa tar.h
and
.Pa is_tar.c
were written by John Gilmore from his public-domain
.Xr tar 1
program, and are not covered by the above license.
.Sh RETURN CODE
.Nm
returns 0 on success, and non-zero on error.
.Sh BUGS
Please report bugs and send patches to the bug tracker at
.Pa http://bugs.gw.com/
or the mailing list at
.Aq file@mx.gw.com
(visit
.Pa http://mx.gw.com/mailman/listinfo/file
first to subscribe).
.Sh TODO
Fix output so that tests for MIME and APPLE flags are not needed all
over the place, and actual output is only done in one place.
This needs a design.
Suggestion: push possible outputs on to a list, then pick the
last-pushed (most specific, one hopes) value at the end, or
use a default if the list is empty.
This should not slow down evaluation.
.Pp
The handling of
.Dv MAGIC_CONTINUE
and printing \e012- between entries is clumsy and complicated; refactor
and centralize.
.Pp
Some of the encoding logic is hard-coded in encoding.c and can be moved
to the magic files if we had a !:charset annotation
.Pp
Continue to squash all magic bugs.
See Debian BTS for a good source.
.Pp
Store arbitrarily long strings, for example for %s patterns, so that
they can be printed out.
Fixes Debian bug #271672.
This can be done by allocating strings in a string pool, storing the
string pool at the end of the magic file and converting all the string
pointers to relative offsets from the string pool.
.Pp
Add syntax for relative offsets after current level (Debian bug #466037).
.Pp
Make file -ki work, i.e. give multiple MIME types.
.Pp
Add a zip library so we can peek inside Office2007 documents to
print more details about their contents.
.Pp
Add an option to print URLs for the sources of the file descriptions.
.Pp
Combine script searches and add a way to map executable names to MIME
types (e.g. have a magic value for !:mime which causes the resulting
string to be looked up in a table).
This would avoid adding the same magic repeatedly for each new
hash-bang interpreter.
.Pp
When a file descriptor is available, we can skip and adjust the buffer
instead of the hacky buffer management we do now.
.Pp
Fix
.Dq name
and
.Dq use
to check for consistency at compile time (duplicate
.Dq name ,
.Dq use
pointing to undefined
.Dq name
).
Make
.Dq name
/
.Dq use
more efficient by keeping a sorted list of names.
Special-case ^ to flip endianness in the parser so that it does not
have to be escaped, and document it.
.Pp
If the offsets specified internally in the file exceed the buffer size
(
.Dv HOWMANY
variable in file.h), then we don't seek to that offset, but we give up.
It would be better if buffer managements was done when the file descriptor
is available so move around the file.
One must be careful though because this has performance (and thus security
considerations).
.Sh AVAILABILITY
You can obtain the original author's latest version by anonymous FTP
on
.Pa ftp.astron.com
in the directory
.Pa /pub/file/file-X.YZ.tar.gz .
.TH FIND 1 \" -*- nroff -*-
.SH NAME
find \- search for files in a directory hierarchy
.SH SYNOPSIS
.B find
[\-H] [\-L] [\-P] [\-D debugopts] [\-Olevel] [starting-point...] [expression]
.SH DESCRIPTION
This manual page
documents the GNU version of
.BR find .
GNU
.B find
searches the directory tree rooted at each given starting-point by
evaluating the given expression from left to right, according to the
rules of precedence (see section OPERATORS), until the outcome is
known (the left hand side is false for \fIand\fR operations, true for
\fIor\fR), at which point
.B find
moves on to the next file name.  If no starting-point is specified,
`.' is assumed.
.PP
If you are using
.B find
in an environment where security is important (for example if you are
using it to search directories that are writable by other users), you
should read the "Security Considerations" chapter of the findutils
documentation, which is called \fBFinding Files\fP and comes with
findutils.   That document also includes a lot more detail
and discussion than this manual page, so you may find it a more useful
source of information.
.SH OPTIONS
The
.BR \-H ,
.B \-L
and
.B \-P
options control the treatment of symbolic
links.  Command-line arguments following these are taken to be names
of files or directories to be examined, up to the first argument that
begins with `\-', or the argument `(' or `!'.  That argument and any
following arguments are taken to be the expression describing what is
to be searched for.  If no paths are given, the current directory is
used.  If no expression is given, the expression
.B \-print
is used
(but you should probably consider using
.B \-print0
instead, anyway).
.PP
This manual page talks about `options' within the expression list.
These options control the behaviour of
.B find
but are specified immediately after the last path name.  The five
`real' options
.BR \-H ,
.BR \-L ,
.BR \-P ,
.B  \-D
and
.B  \-O
must appear before
the first path name, if at all.  A double dash
.B \-\-
can also be used
to signal that any remaining arguments are not options (though
ensuring that all start points begin with either `./' or `/' is
generally safer if you use wildcards in the list of start points).
.IP \-P
Never follow symbolic links.  This is the default behaviour.  When
.B find
examines or prints information a file, and the file is a symbolic
link, the information used shall be taken from the properties of the
symbolic link itself.

.IP \-L
Follow symbolic links.  When
.B find
examines or prints information about files, the information used shall
be taken from the properties of the file to which the link points, not
from the link itself (unless it is a broken symbolic link or
.B find
is unable to examine the file to which the link points).  Use of this
option implies
.BR \-noleaf .
If you later use the
.B \-P
option,
.B \-noleaf
will still be in effect.  If
.B \-L
is in effect and
.B find
discovers a symbolic link to a subdirectory during its search,
the subdirectory pointed to by the symbolic link will be searched.
.IP
When the
.B \-L
option is in effect, the
.B \-type
predicate will always
match against the type of the file that a symbolic link points to
rather than the link itself (unless the symbolic link is broken).
Actions that can cause symbolic links to become broken while
.B find
is executing (for example
.BR \-delete )
can give rise to confusing behaviour.
Using
.B \-L
causes the
.B \-lname
and
.B \-ilname
predicates always to return
false.

.IP \-H
Do not follow symbolic links, except while processing the command
line arguments.  When
.B find
examines or prints information about files, the information used
shall be taken from the properties of the symbolic link itself.   The
only exception to this behaviour is when a file specified on the
command line is a symbolic link, and the link can be resolved.  For
that situation, the information used is taken from whatever the link
points to (that is, the link is followed).  The information about the
link itself is used as a fallback if the file pointed to by the
symbolic link cannot be examined.  If
.B \-H
is in effect and one of the
paths specified on the command line is a symbolic link to a directory,
the contents of that directory will be examined (though of course
\-maxdepth 0 would prevent this).
.P
If more than one of
.BR \-H ,
.B \-L
and
.B \-P
is specified, each overrides the
others; the last one appearing on the command line takes effect.
Since it is the default, the
.B \-P
option should be considered to be in
effect unless either
.B \-H
or
.B \-L
is specified.

GNU
.B find
frequently stats files during the processing of the command line
itself, before any searching has begun.  These options also affect how
those arguments are processed.  Specifically, there are a number of
tests that compare files listed on the command line against a file we
are currently considering.  In each case, the file specified on the
command line will have been examined and some of its properties will
have been saved.  If the named file is in fact a symbolic link, and
the
.B \-P
option is in effect (or if neither
.B \-H
nor
.B \-L
were specified), the information used for the comparison will be taken from
the properties of the symbolic link.  Otherwise, it will be taken from
the properties of the file the link points to.  If
.B find
cannot follow the link (for example because it has insufficient
privileges or the link points to a nonexistent file) the properties of
the link itself will be used.
.P
When the
.B \-H
or
.B \-L options are in effect, any symbolic links listed
as the argument of
.B \-newer
will be dereferenced, and the timestamp
will be taken from the file to which the symbolic link points.  The
same consideration applies to
.BR \-newerXY ,
.B \-anewer
and
.BR \-cnewer .

The
.B \-follow
option has a similar effect to
.BR \-L ,
though it takes
effect at the point where it appears (that is, if
.B \-L
is not used but
.B \-follow
is, any symbolic links appearing after
.B \-follow
on the
command line will be dereferenced, and those before it will not).

.IP "\-D debugoptions"
Print diagnostic information; this can be helpful to diagnose problems
with why
.B find
is not doing what you want.  The list of debug options should be comma
separated.  Compatibility of the debug options is not guaranteed
between releases of findutils.  For a complete list of valid debug
options, see the output of
.B find \-D
.BR help .
Valid debug options include
.RS
.IP help
Explain the debugging options
.IP tree
Show the expression tree in its original and optimised form.
.IP stat
Print messages as files are examined with the
.B stat
and
.B lstat
system calls.  The
.B find
program tries to minimise such calls.
.IP opt
Prints diagnostic information relating to the optimisation of the
expression tree; see the \-O option.
.IP rates
Prints a summary indicating how often each predicate succeeded or
failed.
.RE
.IP \-Olevel
Enables query optimisation.   The
.B find
program reorders tests to speed up execution while preserving the
overall effect; that is, predicates with side effects are not
reordered relative to each other.  The optimisations performed at each
optimisation level are as follows.
.RS
.IP 0
Equivalent to optimisation level 1.
.IP 1
This is the default optimisation level and corresponds to the
traditional behaviour.  Expressions are reordered so that tests based
only on the names of files (for example
.B \-name
and
.BR \-regex )
are performed first.
.IP 2
Any
.B \-type
or
.B \-xtype
tests are performed after any tests based only on the names of files,
but before any tests that require information from the inode.  On many
modern versions of Unix, file types are returned by
.B readdir()
and so these predicates are faster to evaluate than predicates which
need to stat the file first.
If you use the
.B \-fstype
.I FOO
predicate and specify a filesystem type
.I FOO
which is not known (that is, present in `/etc/mtab') at the time
.B find
starts, that predicate is equivalent to
.BR \-false .
.IP 3
At this optimisation level, the full cost-based query optimiser is
enabled.  The order of tests is modified so that cheap (i.e.\&amp; fast)
tests are performed first and more expensive ones are performed later,
if necessary.  Within each cost band, predicates are evaluated earlier
or later according to whether they are likely to succeed or not.  For
.BR \-o ,
predicates which are likely to succeed are evaluated earlier, and for
.BR \-a ,
predicates which are likely to fail are evaluated earlier.
.RE
.IP
The cost-based optimiser has a fixed idea of how likely any given test
is to succeed.  In some cases the probability takes account of the
specific nature of the test (for example,
.B \-type f
is assumed to be more likely to succeed than
.BR "\-type c" ).
The cost-based optimiser is currently being evaluated.   If it does
not actually improve the performance of
.BR find ,
it will be removed again.  Conversely, optimisations that prove to be
reliable, robust and effective may be enabled at lower optimisation
levels over time.  However, the default behaviour (i.e.\&amp; optimisation
level 1) will not be changed in the 4.3.x release series.  The
findutils test suite runs all the tests on
.B find
at each optimisation level and ensures that the result is the same.
.P
.SH EXPRESSION
The part of the command line after the list of starting points is the
.IR expression .
This is a kind of query specification describing how we match files
and what we do with the files that were matched.
An expression is composed of a sequence of things:

.IP Tests
Tests return a true or false value, usually on the basis of some
property of a file we are considering.  The
.B \-empty
test for example is true only when the current file is empty.

.IP Actions
Actions have side effects (such as printing something on the standard
output) and return either true or false, usually based on whether or
not they are successful.  The
.B \-print
action for example prints the name of the current file on the standard
output.

.IP "Global options"
Global options affect the operation of tests and actions specified on
any part of the command line.  Global options always return true.  The
.B \-depth
option for example makes
.B find
traverse the file system in a depth-first order.

.IP "Positional options"
Positional optiona affect only tests or actions which follow them.
Positional options always return true.  The
.B \-regextype
option for example is positional, specifying the regular expression
dialect for regulat expressions occurring later on the command line.

.IP Operators
Operators join together the other items within the expression.  They
include for example
.B \-o
(meaning logical OR) and
.B \-a
(meaning logical AND).  Where an operator is missing,
.B \-a
is assumed.

.P
If the whole expression contains no actions other than
.B \-prune
or
.BR \-print ,
.B \-print
is performed on all files for which the whole expression is true.

The
.B \-delete
action also acts like an option (since it implies
.BR \-depth ).

.SS POSITIONAL OPTIONS
Positional options always return true.  They affect only tests occurring
later on the command line.

.IP \-daystart
Measure times (for
.BR \-amin ,
.BR \-atime ,
.BR \-cmin ,
.BR \-ctime ,
.BR \-mmin ,
and
.BR \-mtime )
from the beginning of today rather than from 24 hours ago.  This
option only affects tests which appear later on the command line.

.IP \-follow
Deprecated; use the
.B \-L
option instead.  Dereference symbolic links.
Implies
.BR \-noleaf .
The
.B \-follow
option affects only those tests which
appear after it on the command line.  Unless the
.B \-H
or
.B \-L
option has
been specified, the position of the
.B \-follow
option changes the behaviour of the
.B \-newer
predicate; any files listed as the argument
of
.B \-newer
will be dereferenced if they are symbolic links.  The same
consideration applies to
.BR \-newerXY ,
.B \-anewer
and
.BR \-cnewer .
Similarly, the
.B \-type
predicate will always match against the type of the file
that a symbolic link points to rather than the link itself.  Using
.B \-follow
causes the
.B \-lname and
.B \-ilname
predicates always to return false.

.IP "\-regextype \fItype\fR"
Changes the regular expression syntax understood by
.B \-regex
and
.B \-iregex
tests which occur later on the command line.  To see which regular
expression types are known, use
.B -regextype
.BR help .
The Texinfo documentation (see
.B SEE
.BR ALSO )
explains the meaning of and
differences between the various types of regular expression.

.IP "\-warn, \-nowarn"
Turn warning messages on or off.  These warnings apply only to the
command line usage, not to any conditions that
.B find
might encounter when it searches directories.  The default behaviour
corresponds to
.B \-warn
if standard input is a tty, and to
.B \-nowarn
otherwise.  If a warning message relating to command-line usage is
produced, the exit status of
.B find
is not affected.  If the POSIXLY_CORRECT environment variable is set,
and
.B \-warn is also used, it is not specified which, if any, warnings will be active.

.SS GLOBAL OPTIONS
Global options always return true.
Global options take effect even for tests which occurr earlier on the
command line.  To prevent confusion, global options should specified
on the command-line after the list of start points, just before the
first test, positional option or action. If you specify a global
option in some other place,
.B find
will issue a warning message explaining that this can be confusing.

The global options occur after the list of start points, and so are
not the same kind of option as
.BR \-L ,
for example.

.IP \-d
A synonym for \-depth, for compatibility with FreeBSD, NetBSD, MacOS X and OpenBSD.

.IP \-depth
Process each directory's contents before the directory itself.  The
\-delete action also implies
.BR \-depth .

.IP "\-help, \-\-help"
Print a summary of the command-line usage of
.B find
and exit.

.IP \-ignore_readdir_race
Normally, \fBfind\fR will emit an error message when it fails to stat a file.
If you give this option and a file is deleted between the time \fBfind\fR
reads the name of the file from the directory and the time it tries to stat
the file, no error message will be issued.    This also applies to files
or directories whose names are given on the command line.  This option takes
effect at the time the command line is read, which means that you cannot search
one part of the filesystem with this option on and part of it with this option
off (if you need to do that, you will need to issue two \fBfind\fR commands
instead, one with the option and one without it).

.IP "\-maxdepth \fIlevels\fR"
Descend at most \fIlevels\fR (a non-negative integer) levels of
directories below the starting-points.
.B \-maxdepth 0
means only apply the tests and actions to the starting-points themselves.

.IP "\-mindepth \fIlevels\fR"
Do not apply any tests or actions at levels less than \fIlevels\fR (a
non-negative integer).
.B \-mindepth 1
means process all files except the starting-points.

.IP \-mount
Don't descend directories on other filesystems.  An alternate name for
.BR \-xdev ,
for compatibility with some other versions of
.BR find .

.IP \-noignore_readdir_race
Turns off the effect of
.BR \-ignore_readdir_race .

.IP "\-noleaf"
Do not optimize by assuming that directories contain 2 fewer
subdirectories than their hard link count.  This option is needed when
searching filesystems that do not follow the Unix directory-link
convention, such as CD-ROM or MS-DOS filesystems or AFS volume mount
points.  Each directory on a normal Unix filesystem has at least 2
hard links: its name and its `.'  entry.  Additionally, its
subdirectories (if any) each have a `..\&amp;' entry linked to that
directory.  When
.B find
is examining a directory, after it has statted 2 fewer subdirectories
than the directory's link count, it knows that the rest of the entries
in the directory are non-directories (`leaf' files in the directory
tree).  If only the files' names need to be examined, there is no need
to stat them; this gives a significant increase in search speed.

.IP "\-version, \-\-version"
Print the \fBfind\fR version number and exit.

.IP \-xdev
Don't descend directories on other filesystems.

.SS TESTS
Some tests, for example
.B \-newerXY
and
.BR -samefile ,
allow comparison between the file currently being examined and some
reference file specified on the command line.  When these tests are
used, the interpretation of the reference file is determined by the
options
.BR \-H ,
.B \-L
and
.B \-P
and any previous
.BR \-follow ,
but the reference file is only examined once, at the time the command
line is parsed.  If the reference file cannot be examined (for
example, the
.BR stat (2)
system call fails for it), an error message is issued, and
.B find
exits with a nonzero status.
.P
Numeric arguments can be specified as
.IP \fI+n\fP
for greater than
.IR n ,
.IP \fI\-n\fP
for less than
.IR n ,
.IP \fIn\fP
for exactly
.IR n .
.P

.IP "\-amin \fIn\fR"
File was last accessed \fIn\fR minutes ago.

.IP "\-anewer \fIfile\fR"
File was last accessed more recently than \fIfile\fR was modified.  If
\fIfile\fR is a symbolic link and the
.B \-H
option or the
.B \-L
option is in effect, the access time of the file it points to is
always used.

.IP "\-atime \fIn\fR"
File was last accessed \fIn\fR*24 hours ago.
When find figures out how many 24-hour periods ago the file
was last accessed, any fractional part is ignored, so to match
.B \-atime
.BR +1 ,
a file has to have been accessed at least
.I two
days ago.

.IP "\-cmin \fIn\fR"
File's status was last changed \fIn\fR minutes ago.

.IP "\-cnewer \fIfile\fR"
File's status was last changed more recently than \fIfile\fR was
modified.  If \fIfile\fR is a symbolic link and the
.B \-H
option or the
.B \-L
option is in effect, the status-change time of the file it points
to is always used.

.IP "\-ctime \fIn\fR"
File's status was last changed \fIn\fR*24 hours ago.
See the comments for
.B \-atime
to understand how rounding affects the interpretation of file status
change times.

.IP \-empty
File is empty and is either a regular file or a directory.

.IP \-executable
Matches files which are executable and directories which are
searchable (in a file name resolution sense).  This takes into account
access control lists and other permissions artefacts which the
.B \-perm
test ignores.  This test makes use of the
.BR access (2)
system call, and so can be fooled by NFS servers which do UID
mapping (or root-squashing), since many systems implement
.BR access (2)
in the client's kernel and so cannot make use of the UID mapping
information held on the server.  Because this test is based only on
the result of the
.BR access (2)
system call, there is no guarantee that a file for which this test
succeeds can actually be executed.

.IP \-false
Always false.

.IP "\-fstype \fItype\fR"
File is on a filesystem of type \fItype\fR.  The valid filesystem
types vary among different versions of Unix; an incomplete list of
filesystem types that are accepted on some version of Unix or another
is: ufs, 4.2, 4.3, nfs, tmp, mfs, S51K, S52K.  You can use
.B \-printf
with the %F directive to see the types of your filesystems.

.IP "\-gid \fIn\fR"
File's numeric group ID is \fIn\fR.

.IP "\-group \fIgname\fR"
File belongs to group \fIgname\fR (numeric group ID allowed).

.IP "\-ilname \fIpattern\fR"
Like
.BR \-lname ,
but the match is case insensitive.
If the
.B \-L
option or the
.B \-follow
option is in effect, this test returns false unless the symbolic link
is broken.

.IP "\-iname \fIpattern\fR"
Like
.BR \-name ,
but the match is case insensitive.  For example, the
patterns `fo*' and `F??' match the file names `Foo', `FOO', `foo',
`fOo', etc.   The pattern `*foo*` will also match a file
called '.foobar'.

.IP "\-inum \fIn\fR"
File has inode number \fIn\fR.  It is normally easier to use the
.B \-samefile
test instead.

.IP "\-ipath \fIpattern\fR"
Like
.BR \-path .
but the match is case insensitive.

.IP "\-iregex \fIpattern\fR"
Like
.BR \-regex ,
but the match is case insensitive.

.IP "\-iwholename \fIpattern\fR"
See \-ipath.  This alternative is less portable than
.BR \-ipath .

.IP "\-links \fIn\fR"
File has \fIn\fR links.

.IP "\-lname \fIpattern\fR"
File is a symbolic link whose contents match shell pattern
\fIpattern\fR.  The metacharacters do not treat `/' or `.' specially.
If the
.B \-L
option or the
.B \-follow
option is in effect, this test returns false unless the symbolic link
is broken.

.IP "\-mmin \fIn\fR"
File's data was last modified \fIn\fR minutes ago.

.IP "\-mtime \fIn\fR"
File's data was last modified \fIn\fR*24 hours ago.
See the comments for
.B \-atime
to understand how rounding affects the interpretation of file
modification times.

.IP "\-name \fIpattern\fR"
Base of file name (the path with the leading directories removed)
matches shell pattern \fIpattern\fR.  Because the leading directories
are removed, the file names considered for a match with
.B \-name
will never include a slash, so `\-name a/b' will never match anything
(you probably need to use
.B \-path
instead).  A warning is issued if you try to do this, unless the environment variable
POSIXLY_CORRECT is set.
The metacharacters (`*', `?',
and `[]') match a `.' at the start of the base name (this is a change
in findutils-4.2.2; see section STANDARDS CONFORMANCE below).  To ignore a
directory and the files under it, use
.BR \-prune ;
see an example in the
description of
.BR \-path .
Braces are not recognised as being
special, despite the fact that some shells including Bash imbue braces
with a special meaning in shell patterns.  The filename matching is
performed with the use of the
.BR fnmatch (3)
library function.   Don't forget to enclose the pattern in quotes
in order to protect it from expansion by the shell.

.IP "\-newer \fIfile\fR"
File was modified more recently than \fIfile\fR.  If \fIfile\fR is a
symbolic link and the
.B \-H
option or the
.B \-L
option is in effect, the
modification time of the file it points to is always used.

.IP "\-newerXY \fIreference\fR"
Succeeds if timestamp \fIX\fR of the file being considered is newer
than timestamp \fIY\fR of the file \fIreference\fR.   The letters
\fIX\fR and \fIY\fR can be any of the following letters:

.TS
ll
ll
ll
ll
llw(2i).
a	The access time of the file \fIreference\fR
B	The birth time of the file \fIreference\fR
c	The inode status change time of \fIreference\fR
m	The modification time of the file \fIreference\fR
t	\fIreference\fR is interpreted directly as a time
.TE

Some combinations are invalid; for example, it is invalid for
.I X
to be
.IR t .
Some combinations are not implemented on all systems; for example
.I B
is not supported on all systems.  If an invalid or unsupported
combination of
.I XY
is specified, a fatal error results.  Time specifications are
interpreted as for the argument to the
.B \-d
option of GNU
.BR date .
If you try to use the birth time of a reference file, and the birth
time cannot be determined, a fatal error message results.  If you
specify a test which refers to the birth time of files being examined,
this test will fail for any files where the birth time is unknown.

.IP \-nogroup
No group corresponds to file's numeric group ID.

.IP \-nouser
No user corresponds to file's numeric user ID.

.IP "\-path \fIpattern\fR"
File name matches shell pattern \fIpattern\fR.  The metacharacters do
not treat `/' or `.' specially; so, for example,
.br
.in +1i
find . \-path "./sr*sc"
.br
.in -1i
will print an entry for a directory called `./src/misc' (if one
exists).  To ignore a whole directory tree, use
.B \-prune
rather than
checking every file in the tree.  For example, to skip the
directory `src/emacs' and all files and directories under it, and
print the names of the other files found, do something like this:
.br
.in +1i
find . \-path ./src/emacs \-prune \-o \-print
.br
.in -1i
Note that the pattern match test applies to the whole file name,
starting from one of the start points named on the command line.  It
would only make sense to use an absolute path name here if the
relevant start point is also an absolute path.  This means that this
command will never match anything:
.br
.in +1i
find bar \-path /foo/bar/myfile \-print
.br
.in -1i
Find compares the
.B \-path
argument with the concatenation of a directory name and the base name
of the file it's examining.  Since the concatenation will never end
with a slash,
.B \-path
arguments ending in a slash will match nothing (except perhaps a start
point specified on the command line).
The predicate
.B \-path
is also supported by HP-UX
.B find
and will be in a forthcoming version of the POSIX standard.

.IP "\-perm \fImode\fR"
File's permission bits are exactly \fImode\fR (octal or symbolic).
Since an exact match is required, if you want to use this form for
symbolic modes, you may have to specify a rather complex mode string.
For example `\-perm g=w' will only match files which have mode 0020
(that is, ones for which group write permission is the only permission
set).  It is more likely that you will want to use the `/' or `-'
forms, for example `\-perm \-g=w', which matches any file with group
write permission.  See the
.B EXAMPLES
section for some illustrative examples.

.IP "\-perm \-\fImode\fR"
All of the permission bits \fImode\fR are set for the file.
Symbolic modes are accepted in this form, and this is usually the way
in which you would want to use them.  You must specify `u', `g' or `o' if
you use a symbolic mode.   See the
.B EXAMPLES
section for some illustrative examples.

.IP "\-perm /\fImode\fR"
Any of the permission bits \fImode\fR are set for the file.  Symbolic
modes are accepted in this form.  You must specify `u', `g' or `o' if
you use a symbolic mode.  See the
.B EXAMPLES
section for some illustrative examples.  If no permission bits in
.I mode
are set, this test matches any file (the idea here is to be consistent
with the behaviour of
.B \-perm
.BR \-000 ).

.IP "\-perm +\fImode\fR"
This is no longer supported (and has been deprecated since 2005).  Use
.B "\-perm /\fImode\fR"
instead.

.IP \-readable
Matches files which are readable.  This takes into account access
control lists and other permissions artefacts which the
.B \-perm
test ignores.  This test makes use of the
.BR access (2)
system call, and so can be fooled by NFS servers which do UID
mapping (or root-squashing), since many systems implement
.BR access (2)
in the client's kernel and so cannot make use of the UID mapping
information held on the server.

.IP "\-regex \fIpattern\fR"
File name matches regular expression \fIpattern\fR.  This is a match
on the whole path, not a search.  For example, to match a file named
`./fubar3', you can use the regular expression `.*bar.' or `.*b.*3',
but not `f.*r3'.  The regular expressions understood by
.B find
are by default Emacs Regular Expressions, but this can be
changed with the
.B \-regextype
option.

.IP "\-samefile \fIname\fR"
File refers to the same inode as \fIname\fR.   When
.B \-L
is in effect, this can include symbolic links.

.IP "\-size \fIn\fR[cwbkMG]"
File uses \fIn\fP units of space, rounding up.  The following suffixes
can be used:
.RS
.IP `b'
for 512-byte blocks (this is the default if no suffix is used)
.IP `c'
for bytes
.IP `w'
for two-byte words
.IP `k'
for Kilobytes (units of 1024 bytes)
.IP `M'
for Megabytes (units of 1048576 bytes)
.IP `G'
for Gigabytes (units of 1073741824 bytes)
.RE
.IP
The size does not count indirect blocks, but it does count blocks in
sparse files that are not actually allocated.  Bear in mind that the
`%k' and `%b' format specifiers of
.B \-printf
handle sparse files
differently.  The `b' suffix always denotes 512-byte blocks and never
1 Kilobyte blocks, which is different to the behaviour of
.BR \-ls .
The + and - prefixes signify greater than and less than, as usual,
but bear in mind that the size is rounded up to the next unit (so a
1-byte file is not matched by
.BR "-size -1M" ).
.IP \-true
Always true.

.IP "\-type \fIc\fR"
File is of type \fIc\fR:
.RS
.IP b
block (buffered) special
.IP c
character (unbuffered) special
.IP d
directory
.IP p
named pipe (FIFO)
.IP f
regular file
.IP l
symbolic link; this is never true if the
.B \-L
option or the
.B \-follow
option is in effect, unless the symbolic link is broken.  If you want
to search for symbolic links when
.B \-L
is in effect, use
.BR \-xtype .
.IP s
socket
.IP D
door (Solaris)
.RE
.IP "\-uid \fIn\fR"
File's numeric user ID is \fIn\fR.

.IP "\-used \fIn\fR"
File was last accessed \fIn\fR days after its status was last changed.

.IP "\-user \fIuname\fR"
File is owned by user \fIuname\fR (numeric user ID allowed).

.IP "\-wholename \fIpattern\fR"
See \-path.  This alternative is less portable than
.BR \-path .

.IP "\-writable"
Matches files which are writable.  This takes into account access
control lists and other permissions artefacts which the
.B \-perm
test ignores.  This test makes use of the
.BR access (2)
system call, and so can be fooled by NFS servers which do UID
mapping (or root-squashing), since many systems implement
.BR access (2)
in the client's kernel and so cannot make use of the UID mapping
information held on the server.

.IP "\-xtype \fIc\fR"
The same as
.B \-type
unless the file is a symbolic link.  For symbolic
links: if the
.B \-H
or
.B \-P
option was specified, true if the file is a
link to a file of type \fIc\fR; if the
.B \-L
option has been given, true
if \fIc\fR is `l'.  In other words, for symbolic links,
.B \-xtype
checks the type of the file that
.B \-type
does not check.
.IP "\-context \fIpattern\fR"
(SELinux only) Security context of the file matches glob \fIpattern\fR.

.SS ACTIONS
.IP "\-delete\fR"
Delete files; true if removal succeeded.  If the removal failed, an
error message is issued.
If
.B \-delete
fails,
.BR find 's
exit status will be nonzero
(when it eventually exits).
Use of
.B \-delete
automatically turns on the
.RB ` \-depth '
option.

.BR Warnings :
Don't forget that the find command line is
evaluated as an expression, so putting
.B \-delete
first will make
.B find
try to delete everything below the starting points you specified.
When testing a
.B find
command line that you later intend to use with
.BR \-delete ,
you should explicitly specify
.B \-depth
in order to avoid later surprises.  Because
.B \-delete
implies
.BR \-depth ,
you cannot usefully use
.B \-prune
and
.B \-delete
together.

.IP "\-exec \fIcommand\fR ;"
Execute \fIcommand\fR; true if 0 status is returned.  All following
arguments to
.B find
are taken to be arguments to the command until an argument consisting
of `;' is encountered.  The string `{}' is replaced by the current
file name being processed everywhere it occurs in the arguments to the
command, not just in arguments where it is alone, as in some versions
of
.BR find .
Both of these constructions might need to be escaped (with a `\e') or
quoted to protect them from expansion by the shell.  See the
.B EXAMPLES
section for examples of the use of the
.B \-exec
option.  The specified
command is run once for each matched file.
The command is executed in the starting directory.   There are
unavoidable security problems surrounding use of the
.B \-exec
action;
you should use the
.B \-execdir
option instead.

.IP "\-exec \fIcommand\fR {} +"
This variant of the
.B \-exec
action runs the specified command on the
selected files, but the command line is built by appending each
selected file name at the end; the total number of invocations of the
command will be much less than the number of matched files.  The
command line is built in much the same way that
.B xargs
builds its command lines.  Only one instance of `{}' is allowed within
the command.  The command is executed in the starting directory.  If
.B find
encounters an error, this can sometimes cause an
immediate exit, so some pending commands may not be run
at all.  This variant of
.B \-exec
always returns true.

.IP "\-execdir \fIcommand\fR ;"
.IP "\-execdir \fIcommand\fR {} +"
Like
.BR \-exec ,
but the specified command is run from the subdirectory
containing the matched file, which is not normally the directory in
which you started
.BR find .
This a much more secure method for invoking commands, as it avoids
race conditions during resolution of the paths to the matched files.
As with the
.B \-exec
action, the `+' form of
.B \-execdir
will build a
command line to process more than one matched file, but any given
invocation of
.I command
will only list files that exist in the same subdirectory.  If you use
this option, you must ensure that your
.B $PATH
environment variable does not reference `.';
otherwise, an attacker can run any commands they like by leaving an
appropriately-named file in a directory in which you will run
.BR \-execdir .
The same applies to having entries in
.B $PATH
which are empty or which are not absolute directory names.  If
.B find
encounters an error, this can sometimes cause an
immediate exit, so some pending commands may not be run
at all. The result of the action depends on whether the
.B +
or the
.B ;
variant is being used;
.B \-execdir
.I command
.B {} +
always returns true, while
.B \-execdir
.I command
.B {} ;
returns true only if
.I command
returns 0.

.IP "\-fls \fIfile\fR"
True; like
.B \-ls
but write to \fIfile\fR like
.BR \-fprint .
The output file is always created, even if the predicate is never
matched.
See the
.B UNUSUAL FILENAMES
section for information about how unusual characters in filenames are handled.

.IP "\-fprint \fIfile\fR"
True; print the full file name into file \fIfile\fR.  If \fIfile\fR
does not exist when \fBfind\fR is run, it is created; if it does
exist, it is truncated.  The file names `/dev/stdout' and
`/dev/stderr' are handled specially; they refer to the standard
output and standard error output, respectively.
The output file is always created, even if the predicate is never matched.
See the
.B UNUSUAL FILENAMES
section for information about how unusual characters in filenames are handled.

.IP "\-fprint0 \fIfile\fR"
True; like
.B \-print0
but write to \fIfile\fR like
.BR \-fprint .
The output file is always created, even if the predicate is never matched.
See the
.B UNUSUAL FILENAMES
section for information about how unusual characters in filenames are handled.

.IP "\-fprintf \fIfile\fR \fIformat\fR"
True; like
.B \-printf
but write to \fIfile\fR like
.BR \-fprint .
The output file is always created, even if the predicate is never matched.
See the
.B UNUSUAL FILENAMES
section for information about how unusual characters in filenames are handled.

.IP \-ls
True; list current file in
.B ls \-dils
format on standard output.
The block counts are of 1K blocks, unless the environment variable
POSIXLY_CORRECT is set, in which case 512-byte blocks are used.
See the
.B UNUSUAL FILENAMES
section for information about how unusual characters in filenames are handled.

.IP "\-ok \fIcommand\fR ;"
Like
.B \-exec
but ask the user first.  If the user agrees, run the command.  Otherwise
just return false.  If the command is run, its standard input is redirected
from
.BR /dev/null .

.IP
The response to the prompt is matched against a pair of regular
expressions to determine if it is an affirmative or negative
response.  This regular expression is obtained from the system if the
`POSIXLY_CORRECT' environment variable is set, or otherwise from
.BR find 's
message translations.  If the system has no suitable
definition,
.BR find 's
own definition will be used.   In either case, the interpretation of
the regular expression itself will be affected by the environment
variables 'LC_CTYPE' (character classes) and 'LC_COLLATE' (character
ranges and equivalence classes).

.IP "\-okdir \fIcommand\fR ;"
Like
.B \-execdir
but ask the user first in the same way as for
.BR \-ok .
If the user does not agree, just return false.
If the command is run, its standard input is redirected from
.BR /dev/null .

.IP \-print
True; print the full file name on the standard output, followed by a
newline.   If you are piping the output of
.B find
into another program and there is the faintest possibility that the files
which you are searching for might contain a newline, then you should
seriously consider using the
.B \-print0
option instead of
.BR \-print .
See the
.B UNUSUAL FILENAMES
section for information about how unusual characters in filenames are handled.

.IP \-print0
True; print the full file name on the standard output, followed by a
null character (instead of the newline character that
.B \-print
uses).
This allows file names that contain newlines or other types of white
space to be correctly interpreted by programs that process the
\fBfind\fR output.  This option corresponds to the
.B \-0
option of
.BR xargs .

.IP "\-printf \fIformat\fR"
True; print \fIformat\fR on the standard output, interpreting `\e'
escapes and `%' directives.  Field widths and precisions can be
specified as with the `printf' C function.  Please note that many of
the fields are printed as %s rather than %d, and this may mean that
flags don't work as you might expect.  This also means that the `\-'
flag does work (it forces fields to be left-aligned).  Unlike
.BR \-print ,
.B \-printf
does not add a newline at the end of the string.  The escapes
and directives are:
.RS
.IP \ea
Alarm bell.
.IP \eb
Backspace.
.IP \ec
Stop printing from this format immediately and flush the output.
.IP \ef
Form feed.
.IP \en
Newline.
.IP \er
Carriage return.
.IP \et
Horizontal tab.
.IP \ev
Vertical tab.
.IP \e0
ASCII NUL.
.IP \e\e
A literal backslash (`\e').
.IP \eNNN
The character whose ASCII code is NNN (octal).
.PP
A `\e' character followed by any other character is treated as an
ordinary character, so they both are printed.
.IP %%
A literal percent sign.
.IP %a
File's last access time in the format returned by the C `ctime' function.
.IP %A\fIk\fP
File's last access time in the format specified by \fIk\fR, which is
either `@' or a directive for the C `strftime' function.  The possible
values for \fIk\fR are listed below; some of them might not be
available on all systems, due to differences in `strftime' between
systems.
.RS
.IP @
seconds since Jan.\&amp; 1, 1970, 00:00 GMT, with fractional part.
.PP
Time fields:
.IP H
hour (00..23)
.IP I
hour (01..12)
.IP k
hour ( 0..23)
.IP l
hour ( 1..12)
.IP M
minute (00..59)
.IP p
locale's AM or PM
.IP r
time, 12-hour (hh:mm:ss [AP]M)
.IP S
Second (00.00 .. 61.00).  There is a fractional part.
.IP T
time, 24-hour (hh:mm:ss)
.IP +
Date and time, separated by `+', for example
`2004\-04\-28+22:22:05.0'.  This is a GNU extension.  The time is
given in the current timezone (which may be affected by setting the TZ
environment variable).  The seconds field includes a fractional part.
.IP X
locale's time representation (H:M:S)
.IP Z
time zone (e.g., EDT), or nothing if no time zone is determinable
.PP
Date fields:
.IP a
locale's abbreviated weekday name (Sun..Sat)
.IP A
locale's full weekday name, variable length (Sunday..Saturday)
.IP b
locale's abbreviated month name (Jan..Dec)
.IP B
locale's full month name, variable length (January..December)
.IP c
locale's date and time (Sat Nov 04 12:02:33 EST 1989).  The format is
the same as for
.BR ctime (3)
and so to preserve compatibility with that format, there is no fractional part
in the seconds field.
.IP d
day of month (01..31)
.IP D
date (mm/dd/yy)
.IP h
same as b
.IP j
day of year (001..366)
.IP m
month (01..12)
.IP U
week number of year with Sunday as first day of week (00..53)
.IP w
day of week (0..6)
.IP W
week number of year with Monday as first day of week (00..53)
.IP x
locale's date representation (mm/dd/yy)
.IP y
last two digits of year (00..99)
.IP Y
year (1970...)
.RE
.IP %b
The amount of disk space used for this file in 512-byte blocks.  Since disk
space is allocated in multiples of the filesystem block size this is usually
greater than %s/512, but it can also be smaller if the file is a sparse file.
.IP %c
File's last status change time in the format returned by the C `ctime'
function.
.IP %C\fIk\fP
File's last status change time in the format specified by \fIk\fR,
which is the same as for %A.
.IP %d
File's depth in the directory tree; 0 means the file is a starting-point.
.IP %D
The device number on which the file exists (the st_dev field of struct
stat), in decimal.
.IP %f
File's name with any leading directories removed (only the last element).
.IP %F
Type of the filesystem the file is on; this value can be used for
\-fstype.
.IP %g
File's group name, or numeric group ID if the group has no name.
.IP %G
File's numeric group ID.
.IP %h
Leading directories of file's name (all but the last element).
If the file name contains no slashes (since it is in the current
directory) the %h specifier expands to ".".
.IP %H
Starting-point under which file was found.
.IP %i
File's inode number (in decimal).
.IP %k
The amount of disk space used for this file in 1K blocks.  Since disk space is
allocated in multiples of the filesystem block size this is usually greater
than %s/1024, but it can also be smaller if the file is a sparse file.
.IP %l
Object of symbolic link (empty string if file is not a symbolic link).
.IP %m
File's permission bits (in octal).  This option uses the `traditional'
numbers which most Unix implementations use, but if your particular
implementation uses an unusual ordering of octal permissions bits, you
will see a difference between the actual value of the file's mode and
the output of %m.   Normally you will want to have a leading
zero on this number, and to do this, you should use the
.B #
flag (as in, for example, `%#m').
.IP %M
File's permissions (in symbolic form, as for
.BR ls ).
This directive is supported in findutils 4.2.5 and later.
.IP %n
Number of hard links to file.
.IP %p
File's name.
.IP %P
File's name with the name of the starting-point under which
it was found removed.
.IP %s
File's size in bytes.
.IP %S
File's sparseness.  This is calculated as (BLOCKSIZE*st_blocks /
st_size).  The exact value you will get for an ordinary file of a
certain length is system-dependent.  However, normally sparse files
will have values less than 1.0, and files which use indirect blocks
may have a value which is greater than 1.0.   The value used for
BLOCKSIZE is system-dependent, but is usually 512 bytes.   If the file
size is zero, the value printed is undefined.  On systems which lack
support for st_blocks, a file's sparseness is assumed to be 1.0.
.IP %t
File's last modification time in the format returned by the C `ctime'
function.
.IP %T\fIk\fP
File's last modification time in the format specified by \fIk\fR,
which is the same as for %A.
.IP %u
File's user name, or numeric user ID if the user has no name.
.IP %U
File's numeric user ID.
.IP %y
File's type (like in
.BR "ls \-l" ),
U=unknown type (shouldn't happen)
.IP %Y
File's type (like %y), plus follow symlinks: L=loop, N=nonexistent
.IP %Z
(SELinux only) file's security context.
.IP "%{ %[ %("
Reserved for future use.
.PP
A `%' character followed by any other character is discarded, but the
other character is printed (don't rely on this, as further format
characters may be introduced).  A `%' at the end of the format
argument causes undefined behaviour since there is no following
character.  In some locales, it may hide your door keys, while in
others it may remove the final page from the novel you are reading.

The %m and %d directives support the
.B #
,
.B 0
and
.B +
flags, but the other directives do not, even if they
print numbers.  Numeric directives that do not support these flags
include
.BR G ,
.BR U ,
.BR b ,
.BR D ,
.B  k
and
.BR n .
The `\-' format flag is supported and changes the alignment of a field
from right-justified (which is the default) to left-justified.
.PP
See the
.B UNUSUAL FILENAMES
section for information about how unusual characters in filenames are handled.

.RE
.IP \-prune
True; if the file is a directory, do not descend into it.  If
.B \-depth
is given, false; no effect.  Because
.B \-delete
implies
.BR \-depth ,
you cannot usefully use
.B \-prune
and
.B \-delete
together.

.IP "\-quit"
Exit immediately.  No child processes will be left running, but no more
paths specified on the command line will be processed.  For example,
.B find /tmp/foo /tmp/bar \-print \-quit
will print only
.BR /tmp/foo .
Any command lines which have been built up with
.B \-execdir \&amp;...\&amp; {} +
will be invoked before
.B find
exits.   The exit status may or may not be zero, depending on whether
an error has already occurred.

.SS OPERATORS
.P
Listed in order of decreasing precedence:

.IP "( \fIexpr\fR )"
Force precedence.  Since parentheses are special to the shell, you
will normally need to quote them.  Many of the examples in this manual
page use backslashes for this purpose: `\e(...\e)' instead of `(...)'.

.IP "! \fIexpr\fR"
True if \fIexpr\fR is false.  This character will also usually need
protection from interpretation by the shell.

.IP "\-not \fIexpr\fR"
Same as ! \fIexpr\fR, but not POSIX compliant.

.IP "\fIexpr1 expr2\fR"
Two expressions in a row are taken to be joined with an
implied "and"; \fIexpr2\fR is not evaluated if \fIexpr1\fR is false.

.IP "\fIexpr1\fR \-a \fIexpr2\fR"
Same as \fIexpr1 expr2\fR.

.IP "\fIexpr1\fR \-and \fIexpr2\fR"
Same as \fIexpr1 expr2\fR, but not POSIX compliant.

.IP "\fIexpr1\fR \-o \fIexpr2\fR"
Or; \fIexpr2\fR is not evaluated if \fIexpr1\fR is true.

.IP "\fIexpr1\fR \-or \fIexpr2\fR"
Same as \fIexpr1\fR
.B \-o
\fIexpr2\fR, but not POSIX compliant.

.IP "\fIexpr1\fR , \fIexpr2\fR"
List; both \fIexpr1\fR and \fIexpr2\fR are always evaluated.  The
value of \fIexpr1\fR is discarded; the value of the list is the value
of \fIexpr2\fR.  The comma operator can be useful for searching for
several different types of thing, but traversing the filesystem
hierarchy only once.  The
.B \-fprintf
action can be used to list the various matched items into several
different output files.

.SH UNUSUAL FILENAMES
Many of the actions of
.B find
result in the printing of data which is under the control of other
users.  This includes file names, sizes, modification times and so
forth.  File names are a potential problem since they can contain any
character except `\e0' and `/'.  Unusual characters in file names can
do unexpected and often undesirable things to your terminal (for
example, changing the settings of your function keys on some
terminals).  Unusual characters are handled differently by various
actions, as described below.

.IP "\-print0, \-fprint0"
Always print the exact filename, unchanged, even if the output is
going to a terminal.

.IP "\-ls, \-fls"
Unusual characters are always escaped.  White space, backslash, and
double quote characters are printed using C-style escaping (for
example `\ef', `\e"').  Other unusual characters are printed using an
octal escape.  Other printable characters (for
.B \-ls
and
.B \-fls
these are the characters between octal 041 and 0176) are printed as-is.

.IP "\-printf, \-fprintf"
If the output is not going to a terminal, it is printed as-is.
Otherwise, the result depends on which directive is in use.  The
directives %D, %F, %g, %G, %H, %Y, and %y expand to values which are
not under control of files' owners, and so are printed as-is.  The
directives %a, %b, %c, %d, %i, %k, %m, %M, %n, %s, %t, %u and %U have
values which are under the control of files' owners but which cannot
be used to send arbitrary data to the terminal, and so these are
printed as-is.  The directives %f, %h, %l, %p and %P are quoted.  This
quoting is performed in the same way as for GNU
.BR ls .
This is not the same quoting mechanism as the one used for
.B \-ls
and
.BR \-fls .
If you are able to decide what format to use for the output of
.B find
then it is normally better to use `\e0' as a terminator
than to use newline, as file names can contain white space and newline
characters.  The setting of the `LC_CTYPE' environment
variable is used to determine which characters need to be quoted.

.IP "\-print, \-fprint"
Quoting is handled in the same way as for
.B \-printf
and
.BR \-fprintf .
If you are using
.B find
in a script or in a situation where the matched files might have
arbitrary names, you should consider using
.B \-print0
instead of
.BR \-print .
.P
The
.B \-ok
and
.B \-okdir
actions print the current filename as-is.  This may change in a future release.

.SH "STANDARDS CONFORMANCE"
For closest compliance to the POSIX standard, you should set the
POSIXLY_CORRECT environment variable.  The following options are
specified in the POSIX standard (IEEE Std 1003.1, 2003 Edition):

.IP \fB\-H\fR
This option is supported.

.IP \fB\-L\fR
This option is supported.

.IP \fB\-name\fR
This option is supported, but POSIX conformance depends on the
POSIX conformance of the system's
.BR fnmatch (3)
library function.  As of findutils-4.2.2, shell metacharacters
(`*', `?' or `[]' for example) will match a leading `.', because
IEEE PASC interpretation 126 requires this.   This is a change from
previous versions of findutils.

.IP \fB\-type\fR
Supported.   POSIX specifies `b', `c', `d', `l', `p', `f' and `s'.
GNU find also supports `D', representing a Door, where the OS provides these.

.IP \fB\-ok\fR
Supported.
Interpretation of the response is according to the "yes" and "no"
patterns selected by setting the `LC_MESSAGES' environment variable.
When the `POSIXLY_CORRECT' environment variable is set, these patterns
are taken system's definition of a positive (yes) or negative (no)
response.  See the system's
documentation for \fBnl_langinfo\fP(3), in particular YESEXPR and
NOEXPR.    When `POSIXLY_CORRECT' is not set, the patterns are instead
taken from
.BR find 's
own message catalogue.

.IP \fB\-newer\fR
Supported.  If the file specified is a symbolic link, it is always
dereferenced.  This is a change from previous behaviour, which used to
take the relevant time from the symbolic link; see the HISTORY section
below.

.IP \fB\-perm\fR
Supported.  If the POSIXLY_CORRECT environment variable is not set,
some mode arguments (for example +a+x) which are not valid in POSIX
are supported for backward-compatibility.

.IP "Other predicates"
The predicates
.BR \-atime ,
.BR \-ctime ,
.BR \-depth ,
.BR \-group ,
.BR \-links ,
.BR \-mtime ,
.BR \-nogroup ,
.BR \-nouser ,
.BR \-print ,
.BR \-prune ,
.BR \-size ,
.BR \-user
and
.B \-xdev
`\-atime',
`\-ctime',
`\-depth',
`\-group',
`\-links',
`\-mtime',
`\-nogroup',
`\-nouser',
`\-perm',
`\-print',
`\-prune',
`\-size',
`\-user' and
`\-xdev',
are all supported.

.P
The POSIX standard specifies parentheses `(', `)', negation `!' and the
`and' and `or' operators (
.BR \-a ,
.BR \-o ).
.P
All other options, predicates, expressions and so forth are extensions
beyond the POSIX standard.  Many of these extensions are not unique to
GNU find, however.
.P
The POSIX standard requires that
.B find
detects loops:
.IP
The
.B find
utility shall detect infinite loops; that is, entering a
previously visited directory that is an ancestor of the last file
encountered.  When it detects an infinite loop, find shall write a
diagnostic message to standard error and shall either recover its
position in the hierarchy or terminate.
.P
GNU
.B find
complies with these requirements.  The link count of
directories which contain entries which are hard links to an ancestor
will often be lower than they otherwise should be.  This can mean that
GNU find will sometimes optimise away the visiting of a subdirectory
which is actually a link to an ancestor.  Since
.B find
does not actually enter such a subdirectory, it is allowed to avoid
emitting a diagnostic message.  Although this behaviour may be
somewhat confusing, it is unlikely that anybody actually depends on
this behaviour.  If the leaf optimisation has been turned off with
.BR \-noleaf ,
the directory entry will always be examined and the diagnostic message
will be issued where it is appropriate.  Symbolic links cannot be used
to create filesystem cycles as such, but if the
.B \-L
option or the
.B \-follow
option is in use, a diagnostic message is issued when
.B find
encounters a loop of symbolic links.  As with loops containing hard
links, the leaf optimisation will often mean that
.B find
knows that it doesn't need to call
.I stat()
or
.I chdir()
on the symbolic link, so this diagnostic is frequently not necessary.
.P
The
.B \-d
option is supported for compatibility with various BSD systems,
but you should use the POSIX-compliant option
.B \-depth
instead.
.P
The POSIXLY_CORRECT environment variable does not affect the behaviour
of the
.B \-regex
or
.B \-iregex
tests because those tests aren't specified in the POSIX standard.
.SH "ENVIRONMENT VARIABLES"

.IP LANG
Provides a default value for the internationalization variables that
are unset or null.

.IP LC_ALL
If set to a non-empty string value, override the values of all the
other internationalization variables.

.IP LC_COLLATE
The POSIX standard specifies that this variable affects the pattern
matching to be used for the
.B \-name
option.   GNU find uses the
.BR fnmatch (3)
library function, and so support for `LC_COLLATE' depends on the
system library.    This variable also affects the interpretation of
the response to
.BR \-ok;
while the `LC_MESSAGES' variable selects the actual pattern used to
interpret the response to
.BR \-ok ,
the interpretation of any bracket expressions in the pattern will be
affected by `LC_COLLATE'.

.IP LC_CTYPE
This variable affects the treatment of character classes used in
regular expressions and also with
the
.B \-name
test, if the system's
.BR fnmatch (3)
library function supports this.  This variable also affects the
interpretation of any character classes in the regular expressions
used to interpret the response to the prompt issued by
.BR \-ok .
The `LC_CTYPE' environment variable will
also affect which characters are considered to be unprintable when
filenames are printed; see the section UNUSUAL FILENAMES.

.IP LC_MESSAGES
Determines the locale to be used for internationalised messages.  If
the `POSIXLY_CORRECT' environment variable is set, this also
determines the interpretation of the response to the prompt made by the
.BR \-ok
action.

.IP NLSPATH
Determines the location of the internationalisation message catalogues.

.IP PATH
Affects the directories which are searched to find the executables
invoked by
.BR \-exec ,
.BR \-execdir ,
.B \-ok
and
.BR \-okdir .

.IP POSIXLY_CORRECT
Determines the block size used by
.B \-ls
and
.BR \-fls .
If
.B POSIXLY_CORRECT
is set, blocks are units of 512 bytes.  Otherwise they are units of 1024 bytes.
.IP
Setting this variable also turns off
warning messages (that is, implies
.BR \-nowarn )
by default, because POSIX requires that apart from
the output for
.BR \-ok ,
all messages printed on stderr are diagnostics and must result in a
non-zero exit status.
.IP
When POSIXLY_CORRECT is not set,
.B \-perm
+zzz
is treated just like
.B \-perm
/zzz
if
+zzz is not a valid symbolic mode.  When POSIXLY_CORRECT is set, such
constructs are treated as an error.
.IP
When POSIXLY_CORRECT is set, the response to the prompt made by the
.B \-ok
action is interpreted according to the system's message catalogue, as
opposed to according to
.BR find 's
own message translations.

.IP TZ
Affects the time zone used for some of the time-related format
directives of
.B \-printf
and
.BR \-fprintf .
.SH "EXAMPLES"
.nf
.B find /tmp \-name core \-type f \-print | xargs /bin/rm \-f

.fi
Find files named
.B core
in or below the directory
.B /tmp
and delete them.  Note that this will work incorrectly if there are
any filenames containing newlines, single or double quotes, or spaces.
.P
.B find /tmp \-name core \-type f \-print0 | xargs \-0 /bin/rm \-f

.fi
Find files named
.B core
in or below the directory
.B /tmp
and delete them, processing filenames in such a way that file or
directory names containing single or double quotes, spaces or newlines
are correctly handled.  The
.B \-name
test comes before the
.B \-type
test in order to avoid having to call
.B stat(2)
on every file.

.P
.nf
.B find . \-type f \-exec file \(aq{}\(aq \e;

.fi
Runs `file' on every file in or below the current directory.  Notice
that the braces are enclosed in single quote marks to protect them
from interpretation as shell script punctuation.  The semicolon is
similarly protected by the use of a backslash, though single quotes
could have been used in that case also.

.P
.nf
.B find / \e( \-perm \-4000 \-fprintf /root/suid.txt \(aq%#m %u %p\en\(aq \e) , \e
.B  \e( \-size +100M \-fprintf /root/big.txt  \(aq%\-10s %p\en\(aq \e)

.fi
Traverse the filesystem just once, listing setuid files and
directories into
.B /root/suid.txt
and large files into
.BR /root/big.txt .

.P
.nf
.B find $HOME  \-mtime 0

.fi
Search for files in your home directory which have been modified in
the last twenty-four hours.  This command works this way because the
time since each file was last modified is divided by 24 hours and any
remainder is discarded.  That means that to match
.B \-mtime
.BR 0 ,
a file will have to have a modification in the past which is less than
24 hours ago.

.P
.nf
.B find /sbin /usr/sbin -executable \e! -readable \-print

.fi
Search for files which are executable but not readable.

.P
.nf
.B find . \-perm 664

.fi
Search for files which have read and write permission for their owner,
and group, but which other users can read but not write to.  Files
which meet these criteria but have other permissions bits set (for
example if someone can execute the file) will not be matched.

.P
.nf
.B find . \-perm \-664

.fi
Search for files which have read and write permission for their owner
and group, and which other users can read, without regard to the
presence of any extra permission bits (for example the executable
bit).  This will match a file which has mode 0777, for example.

.P
.nf
.B find . \-perm /222

.fi
Search for files which are writable by somebody (their owner, or
their group, or anybody else).

.P
.nf
.B find . \-perm /220
.B find . \-perm /u+w,g+w
.B find . \-perm /u=w,g=w

.fi
All three of these commands do the same thing, but the first one uses
the octal representation of the file mode, and the other two use the
symbolic form.  These commands all search for files which are
writable by either their owner or their group.  The files don't have
to be writable by both the owner and group to be matched; either will
do.

.P
.nf
.B find . \-perm \-220
.B find . \-perm \-g+w,u+w

.fi
Both these commands do the same thing; search for files which are
writable by both their owner and their group.

.P
.nf
.B find . \-perm \-444 \-perm /222 ! \-perm /111
.B find . \-perm \-a+r \-perm /a+w ! \-perm /a+x

.fi
These two commands both search for files that are readable for
everybody (
.B \-perm \-444
or
.BR "\-perm \-a+r" ),
have at least one write bit
set (
.B \-perm /222
or
.BR "\-perm /a+w" )
but are not executable for anybody (
.B ! \-perm /111
and
.B ! \-perm /a+x
respectively).

.P
.nf
.B cd /source-dir
.B find . \-name .snapshot \-prune \-o \e( \e! \-name "*~" \-print0 \e)|
.B cpio \-pmd0   /dest-dir

.fi
This command copies the contents of
.B /source-dir
to
.BR /dest-dir ,
but omits files and directories named
.B .snapshot
(and anything in them).  It also omits files or directories whose name
ends in
.BR ~ ,
but not their contents.  The construct
.B \-prune \-o \e( \&amp;...\&amp; \-print0 \e)
is quite common.  The idea here is that the expression before
.B \-prune
matches things which are to be pruned.  However, the
.B \-prune
action itself returns true, so the following
.B \-o
ensures that the right hand side is evaluated only for those
directories which didn't get pruned (the contents of the pruned
directories are not even visited, so their contents are irrelevant).
The expression on the right hand side of the
.B \-o
is in parentheses only for clarity.  It emphasises that the
.B \-print0
action takes place only for things that didn't have
.B \-prune
applied to them.  Because the default `and' condition between tests
binds more tightly than
.BR \-o ,
this is the default anyway, but the parentheses help to show
what is going on.

.P
.nf
.B find repo/ -exec test -d {}/.svn \e; -or \e
.B -exec test -d {}/.git \e; -or -exec test  -d {}/CVS \e; \e
.B -print -prune
.fi

Given the following directory of projects and their associated SCM
administrative directories, perform an efficient search for the
projects' roots:

.nf
.B repo/project1/CVS
.B repo/gnu/project2/.svn
.B repo/gnu/project3/.svn
.B repo/gnu/project3/src/.svn
.B repo/project4/.git

.fi
In this example,
.B \-prune
prevents unnecessary descent into directories that have already been
discovered (for example we do not search project3/src because we
already found project3/.svn), but ensures sibling directories
(project2 and project3) are found.

.SH EXIT STATUS
.PP
.B find
exits with status 0 if all files are processed successfully, greater
than 0 if errors occur.   This is deliberately a very broad
description, but if the return value is non-zero, you should not rely
on the correctness of the results of
.BR find .

When some error occurs,
.B find
may stop immediately, without completing all the actions specified.
For example, some starting points may not have been examined or some
pending program invocations for
.B \-exec \&amp;...\&amp; {} +
or
.B \-execdir \&amp;...\&amp; {} +
may not have been performed.

.SH "SEE ALSO"
\fBlocate\fP(1), \fBlocatedb\fP(5), \fBupdatedb\fP(1), \fBxargs\fP(1),
\fBchmod\fP(1), \fBfnmatch\fP(3), \fBregex\fP(7), \fBstat\fP(2),
\fBlstat\fP(2), \fBls\fP(1), \fBprintf\fP(3), \fBstrftime\fP(3),
\fBctime\fP(3)

The full documentation for
.B find
is maintained as a Texinfo manual.  If the
.B info
and
.B find
programs are properly installed at your site, the command
.B info find
should give you access to the complete manual.

.SH "HISTORY"
As of findutils-4.2.2, shell metacharacters (`*', `?' or `[]' for
example) used in filename patterns will match a leading `.', because
IEEE POSIX interpretation 126 requires this.
.P
As of findutils-4.3.3,
.B \-perm /000
now matches all files instead of none.
.P
Nanosecond-resolution
timestamps were implemented in findutils-4.3.3.
.P
As of findutils-4.3.11, the
.B \-delete
action sets
.BR find 's
exit status to a nonzero value when it fails.
However,
.B find
will not exit immediately.  Previously,
.BR find 's
exit status was unaffected by the failure of
.BR \-delete .
.TS
l l l .
Feature	Added in	Also occurs in
\-newerXY	4.3.3	BSD
\-D	4.3.1
\-O	4.3.1
\-readable	4.3.0
\-writable	4.3.0
\-executable	4.3.0
\-regextype	4.2.24
\-exec ... +	4.2.12	POSIX
\-execdir	4.2.12	BSD
\-okdir	4.2.12
\-samefile	4.2.11
\-H	4.2.5	POSIX
\-L	4.2.5	POSIX
\-P	4.2.5	BSD
\-delete	4.2.3
\-quit	4.2.3
\-d	4.2.3	BSD
\-wholename	4.2.0
\-iwholename	4.2.0
\-ignore_readdir_race	4.2.0
\-fls	4.0
\-ilname	3.8
\-iname	3.8
\-ipath	3.8
\-iregex	3.8
.TE
.P
The syntax
\.B \-perm +MODE
was removed in findutils-4.5.12, in favour of
\.B \-perm
.BR /MODE .
The
.B +MODE
syntax had been deprecated since findutils-4.2.21
which was released in 2005.
.P
.SH "NON-BUGS"
.nf
.B $ find . \-name *.c \-print
find: paths must precede expression
Usage: find [\-H] [\-L] [\-P] [\-Olevel] [\-D help|tree|search|stat|rates|opt|exec] [path...] [expression]
.fi
.P
This happens because
.I *.c
has been expanded by the shell
resulting in
.B find
actually receiving a command line like this:
.nf

.B find . \-name bigram.c code.c frcode.c locate.c \-print

.fi
That command is of course not going to work.  Instead of doing things
this way, you should enclose the pattern in quotes or escape the wildcard:
.nf
.B $ find . \-name \(aq*.c\(aq \-print
.B $ find . \-name \e*.c \-print
.fi

.SH "BUGS"
.P
There are security problems inherent in the behaviour that the POSIX
standard specifies for
.BR find ,
which therefore cannot be fixed.  For example, the
.B \-exec
action is
inherently insecure, and
.B \-execdir
should be used instead.
Please see \fBFinding Files\fP for more information.
.P
The environment variable
.B  LC_COLLATE
has no effect on the
.B \-ok
action.
.P
The best way to report a bug is to use the form at
http://savannah.gnu.org/bugs/?group=findutils.
The reason for this is that you will then be able to track progress in
fixing the problem.   Other comments about \fBfind\fP(1) and about
the findutils package in general can be sent to the
.I bug\-findutils
mailing list.  To join the list, send email to
.IR bug\-findutils\-request@gnu.org .
.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.
.TH FOLD "1" "March 2017" "GNU coreutils 8.27" "User Commands"
.SH NAME
fold \- wrap each input line to fit in specified width
.SH SYNOPSIS
.B fold
[\fI\,OPTION\/\fR]... [\fI\,FILE\/\fR]...
.SH DESCRIPTION
.\" Add any additional description here
.PP
Wrap input lines in each FILE, writing to standard output.
.PP
With no FILE, or when FILE is \-, read standard input.
.PP
Mandatory arguments to long options are mandatory for short options too.
.TP
\fB\-b\fR, \fB\-\-bytes\fR
count bytes rather than columns
.TP
\fB\-s\fR, \fB\-\-spaces\fR
break at spaces
.TP
\fB\-w\fR, \fB\-\-width\fR=\fI\,WIDTH\/\fR
use WIDTH columns instead of 80
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-\-version\fR
output version information and exit
.SH AUTHOR
Written by David MacKenzie.
.SH "REPORTING BUGS"
GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt;
.br
Report fold translation bugs to &lt;http://translationproject.org/team/&gt;
.SH COPYRIGHT
Copyright \(co 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
Full documentation at: &lt;http://www.gnu.org/software/coreutils/fold&gt;
.br
or available locally via: info \(aq(coreutils) fold invocation\(aq
'\" et
.TH FORT77 "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
fort77
\(em FORTRAN compiler (\fBFORTRAN\fP)
.SH SYNOPSIS
.LP
.nf
fort77 \fB[\fR\(mic\fB] [\fR\(mig\fB] [\fR\(miL \fIdirectory\fB]\fR...\fB [\fR\(miO \fIoptlevel\fB] [\fR\(mio \fIoutfile\fB] [\fR\(mis\fB]
[\fR\(miw\fB] \fIoperand\fR...
.fi
.SH DESCRIPTION
The
.IR fort77
utility is the interface to the FORTRAN compilation system; it shall
accept the full FORTRAN-77 language defined by the ANSI\ X3.9\(hy1978 standard. The system
conceptually consists of a compiler and link editor. The files
referenced by
.IR operand s
are compiled and linked to produce an executable file. It is
unspecified whether the linking occurs entirely within the operation of
.IR fort77 ;
some implementations may produce objects that are not fully resolved
until the file is executed.
.P
If the
.BR \(mic
option is present, for all pathname operands of the form
.IR file \c
.BR .f ,
the files:
.sp
.RS 4
.nf
\fB
$(basename \fIpathname\fR.f).o
.fi \fR
.P
.RE
.P
shall be created or overwritten as the result of successful
compilation. If the
.BR \(mic
option is not specified, it is unspecified whether such
.BR .o
files are created or deleted for the
.IR file \c
.BR .f
operands.
.P
If there are no options that prevent link editing (such as
.BR \(mic )
and all operands compile and link without error, the resulting
executable file shall be written into the file named by the
.BR \(mio
option (if present) or to the file
.BR a.out .
The executable file shall be created as specified in the System Interfaces volume of POSIX.1\(hy2008, except
that the file permissions shall be set to:
S_IRWXO | S_IRWXG | S_IRWXU
.P
and that the bits specified by the
.IR umask
of the process shall be cleared.
.SH OPTIONS
The
.IR fort77
utility shall conform to the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 12.2" ", " "Utility Syntax Guidelines",
except that:
.IP " *" 4
The
.BR \(mil
.IR library
operands have the format of options, but their position within a list
of operands affects the order in which libraries are searched.
.IP " *" 4
The order of specifying the multiple
.BR \(miL
options is significant.
.IP " *" 4
Conforming applications shall specify each option separately; that is,
grouping option letters (for example,
.BR \(micg )
need not be recognized by all implementations.
.P
The following options shall be supported:
.IP "\fB\(mic\fR" 10
Suppress the link-edit phase of the compilation, and do not remove any
object files that are produced.
.IP "\fB\(mig\fR" 10
Produce symbolic information in the object or executable files; the
nature of this information is unspecified, and may be modified by
implementation-defined interactions with other options.
.IP "\fB\(mis\fR" 10
Produce object or executable files, or both, from which symbolic and
other information not required for proper execution using the
.IR exec
family of functions defined in the System Interfaces volume of POSIX.1\(hy2008 has been removed (stripped).
If both
.BR \(mig
and
.BR \(mis
options are present, the action taken is unspecified.
.IP "\fB\(mio\ \fIoutfile\fR" 10
Use the pathname
.IR outfile ,
instead of the default
.BR a.out ,
for the executable file produced. If the
.BR \(mio
option is present with
.BR \(mic ,
the result is unspecified.
.IP "\fB\(miL\ \fIdirectory\fR" 10
Change the algorithm of searching for the libraries named in
.BR \(mil
operands to look in the directory named by the
.IR directory
pathname before looking in the usual places. Directories named in
.BR \(miL
options shall be searched in the specified order. At least ten
instances of this option shall be supported in a single
.IR fort77
command invocation. If a directory specified by a
.BR \(miL
option contains a file named
.BR libf.a ,
the results are unspecified.
.IP "\fB\(miO\ \fIoptlevel\fR" 10
Specify the level of code optimization. If the
.IR optlevel
option-argument is the digit
.BR '0' ,
all special code optimizations shall be disabled. If it is the digit
.BR '1' ,
the nature of the optimization is unspecified. If the
.BR \(miO
option is omitted, the nature of the system's default optimization is
unspecified. It is unspecified whether code generated in the presence
of the
.BR \(miO
0 option is the same as that generated when
.BR \(miO
is omitted. Other
.IR optlevel
values may be supported.
.IP "\fB\(miw\fR" 10
Suppress warnings.
.P
Multiple instances of
.BR \(miL
options can be specified.
.SH OPERANDS
An
.IR operand
is either in the form of a pathname or the form
.BR \(mil
.IR library .
At least one operand of the pathname form shall be specified. The
following operands shall be supported:
.IP "\fIfile.\fBf\fR" 10
The pathname of a FORTRAN source file to be compiled and optionally
passed to the link editor. The filename operand shall be of this form
if the
.BR \(mic
option is used.
.IP "\fIfile.\fBa\fR" 10
A library of object files typically produced by
.IR ar ,
and passed directly to the link editor. Implementations may recognize
implementation-defined suffixes other than
.BR .a
as denoting object file libraries.
.IP "\fIfile.\fBo\fR" 10
An object file produced by
.IR fort77
.BR \(mic
and passed directly to the link editor. Implementations may recognize
implementation-defined suffixes other than
.BR .o
as denoting object files.
.P
The processing of other files is implementation-defined.
.IP "\fB\(mil\ \fIlibrary\fR" 10
(The letter ell.) Search the library named:
.RS 10 
.sp
.RS 4
.nf
\fB
lib\fIlibrary\fR.a
.fi \fR
.P
.RE
.P
A library is searched when its name is encountered, so the placement of
a
.BR \(mil
operand is significant. Several standard libraries can be specified in
this manner, as described in the EXTENDED DESCRIPTION section.
Implementations may recognize implementation-defined suffixes other
than
.BR .a
as denoting libraries.
.RE
.SH STDIN
Not used.
.SH "INPUT FILES"
The input file shall be one of the following: a text file containing
FORTRAN source code; an object file in the format produced by
.IR fort77
.BR \(mic ;
or a library of object files, in the format produced by archiving zero
or more object files, using
.IR ar .
Implementations may supply additional utilities that produce files in
these formats. Additional input files are implementation-defined.
.P
A
&lt;tab&gt;
encountered within the first six characters on a line of source code
shall cause the compiler to interpret the following character as if it
were the seventh character on the line (that is, in column 7).
.SH "ENVIRONMENT VARIABLES"
The following environment variables shall affect the execution of
.IR fort77 :
.IP "\fILANG\fP" 10
Provide a default value for the internationalization variables that are
unset or null. (See the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 8.2" ", " "Internationalization Variables"
for the precedence of internationalization variables used to determine
the values of locale categories.)
.IP "\fILC_ALL\fP" 10
If set to a non-empty string value, override the values of all the
other internationalization variables.
.IP "\fILC_CTYPE\fP" 10
Determine the locale for the interpretation of sequences of bytes of
text data as characters (for example, single-byte as opposed to
multi-byte characters in arguments and input files).
.IP "\fILC_MESSAGES\fP" 10
.br
Determine the locale that should be used to affect the format and
contents of diagnostic messages written to standard error.
.IP "\fINLSPATH\fP" 10
Determine the location of message catalogs for the processing of
.IR LC_MESSAGES .
.IP "\fITMPDIR\fP" 10
Determine the pathname that should override the default directory for
temporary files, if any.
.SH "ASYNCHRONOUS EVENTS"
Default.
.SH STDOUT
Not used.
.SH STDERR
The standard error shall be used only for diagnostic messages.
If more than one
.IR file
operand ending in
.BR .f
(or possibly other unspecified suffixes) is given, for each such file:
.sp
.RS 4
.nf
\fB
"%s:\en", &lt;\fIfile\fR&gt;
.fi \fR
.P
.RE
.P
may be written to allow identification of the diagnostic message with
the appropriate input file.
.P
This utility may produce warning messages about certain conditions that
do not warrant returning an error (non-zero) exit value.
.SH "OUTPUT FILES"
Object files, listing files, and executable files shall be produced in
unspecified formats.
.SH "EXTENDED DESCRIPTION"
.SS "Standard Libraries"
.P
The
.IR fort77
utility shall recognize the following
.BR \(mil
operand for the standard library:
.IP "\fB\(mil\ f\fR" 10
This library contains all functions referenced in the ANSI\ X3.9\(hy1978 standard. This
operand shall not be required to be present to cause a search of this
library.
.P
In the absence of options that inhibit invocation of the link editor,
such as
.BR \(mic ,
the
.IR fort77
utility shall cause the equivalent of a
.BR "\(mil\ f"
operand to be passed to the link editor as the last
.BR \(mil
operand, causing it to be searched after all other object files and
libraries are loaded.
.P
It is unspecified whether the library
.BR libf.a
exists as a regular file. The implementation may accept as
.BR \(mil
operands names of objects that do not exist as regular files.
.SS "External Symbols"
.P
The FORTRAN compiler and link editor shall support the significance of
external symbols up to a length of at least 31 bytes; case folding is
permitted. The action taken upon encountering symbols exceeding the
implementation-defined maximum symbol length is unspecified.
.P
The compiler and link editor shall support a minimum of 511 external
symbols per source or object file, and a minimum of 4\|095 external
symbols total. A diagnostic message is written to standard output if
the implementation-defined limit is exceeded; other actions are
unspecified.
.SH "EXIT STATUS"
The following exit values shall be returned:
.IP "\00" 6
Successful compilation or link edit.
.IP &gt;0 6
An error occurred.
.SH "CONSEQUENCES OF ERRORS"
When
.IR fort77
encounters a compilation error, it shall write a diagnostic to standard
error and continue to compile other source code operands. It shall
return a non-zero exit status, but it is implementation-defined
whether an object module is created. If the link edit is unsuccessful,
a diagnostic message shall be written to standard error, and
.IR fort77
shall exit with a non-zero status.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
None.
.SH EXAMPLES
The following usage example compiles
.BR xyz.f
and creates the executable file
.BR foo :
.sp
.RS 4
.nf
\fB
fort77 \(mio foo xyz.f
.fi \fR
.P
.RE
.P
The following example compiles
.BR xyz.f
and creates the object file
.BR xyz.o :
.sp
.RS 4
.nf
\fB
fort77 \(mic xyz.f
.fi \fR
.P
.RE
.P
The following example compiles
.BR xyz.f
and creates the executable file
.BR a.out :
.sp
.RS 4
.nf
\fB
fort77 xyz.f
.fi \fR
.P
.RE
.P
The following example compiles
.BR xyz.f ,
links it with
.BR b.o ,
and creates the executable
.BR a.out :
.sp
.RS 4
.nf
\fB
fort77 xyz.f b.o
.fi \fR
.P
.RE
.SH RATIONALE
The name of this utility was chosen as
.IR fort77
to parallel the renaming of the C compiler. The name
.IR f77
was not chosen to avoid problems with historical implementations. The
ANSI\ X3.9\(hy1978 standard was selected as a normative reference because the ISO/IEC version
of FORTRAN-77 has been superseded by the ISO/IEC\ 1539:\|1991 standard.
.P
The file inclusion and symbol definition
.BR #define
mechanisms used by the
.IR c99
utility were not included in this volume of POSIX.1\(hy2008\(emeven though they are commonly
implemented\(emsince there is no requirement that the FORTRAN compiler
use the C preprocessor.
.P
The
.BR \(mionetrip
option was not included in this volume of POSIX.1\(hy2008, even though many historical compilers
support it, because it is derived from FORTRAN-66; it is an anachronism
that should not be perpetuated.
.P
Some implementations produce compilation listings. This aspect of
FORTRAN has been left unspecified because there was controversy
concerning the various methods proposed for implementing it: a
.BR \(miV
option overlapped with historical vendor practice and a naming
convention of creating files with
.BR .l
suffixes collided with historical
.IR lex
file naming practice.
.P
There is no
.BR \(miI
option in this version of this volume of POSIX.1\(hy2008 to specify a directory for file
inclusion. An INCLUDE directive has been a part of the Fortran-90
discussions, but an interface supporting that standard is not in the
current scope.
.P
It is noted that many FORTRAN compilers produce an object module even
when compilation errors occur; during a subsequent compilation, the
compiler may patch the object module rather than recompiling all the
code. Consequently, it is left to the implementor whether or not an
object file is created.
.P
A reference to MIL-STD-1753
was removed from an early proposal in response to a request from the
POSIX FORTRAN-binding standard developers. It was not the intention of
the standard developers to require certification of the FORTRAN
compiler, and IEEE\ Std\ 1003.9\(hy1992 does not specify the military standard or any
special preprocessing requirements. Furthermore, use of that document
would have been inappropriate for an international standard.
.P
The specification of optimization has been subject to changes through
early proposals. At one time,
.BR \(miO
and
.BR \(miN
were Booleans: optimize and do not optimize (with an unspecified
default). Some historical practice led this to be changed to:
.IP "\fB\(miO\fR\ 0" 10
No optimization.
.IP "\fB\(miO\fR\ 1" 10
Some level of optimization.
.IP "\fB\(miO\ \fIn\fR" 10
Other, unspecified levels of optimization.
.P
It is not always clear whether ``good code generation'' is the same
thing as optimization. Simple optimizations of local actions do not
usually affect the semantics of a program. The
.BR \(miO
0 option has been included to accommodate the very particular nature of
scientific calculations in a highly optimized environment; compilers
make errors. Some degree of optimization is expected, even if it is not
documented here, and the ability to shut it off completely could be
important when porting an application. An implementation may treat
.BR \(miO
0 as ``do less than normal'' if it wishes, but this is only meaningful
if any of the operations it performs can affect the semantics of a
program. It is highly dependent on the implementation whether doing
less than normal is logical. It is not the intent of the
.BR \(miO
0 option to ask for inefficient code generation, but rather to assure
that any semantically visible optimization is suppressed.
.P
The specification of standard library access is consistent with the C
compiler specification. Implementations are not required to have
.BR /usr/lib/libf.a ,
as many historical implementations do, but if not they are required to
recognize
.BR f
as a token.
.P
External symbol size limits are in normative text; conforming
applications need to know these limits. However, the minimum maximum
symbol length should be taken as a constraint on a conforming
application, not on an implementation, and consequently the action
taken for a symbol exceeding the limit is unspecified. The minimum size
for the external symbol table was added for similar reasons.
.P
The CONSEQUENCES OF ERRORS section clearly specifies the behavior of
the compiler when compilation or link-edit errors occur. The behavior
of several historical implementations was examined, and the choice was
made to be silent on the status of the executable, or
.BR a.out ,
file in the face of compiler or linker errors. If a linker writes the
executable file, then links it on disk with
\fIlseek\fR()s
and
\fIwrite\fR()s,
the partially linked executable file can be left on disk and its
execute bits turned off if the link edit fails. However, if the linker
links the image in memory before writing the file to disk, it need not
touch the executable file (if it already exists) because the link edit
fails. Since both approaches are historical practice, a conforming
application shall rely on the exit status of
.IR fort77 ,
rather than on the existence or mode of the executable file.
.P
The
.BR \(mig
and
.BR \(mis
options are not specified as mutually-exclusive. Historically, these two
options have been mutually-exclusive, but because both are so loosely
specified, it seemed appropriate to leave their interaction
unspecified.
.P
The requirement that conforming applications specify compiler options
separately is to reserve the multi-character option name space for
vendor-specific compiler options, which are known to exist in many
historical implementations. Implementations are not required to
recognize, for example,
.BR \(migc
as if it were
.BR \(mig
.BR \(mic ;
nor are they forbidden from doing so. The SYNOPSIS shows all of the
options separately to highlight this requirement on applications.
.P
Echoing filenames to standard error is considered a diagnostic message
because it would otherwise be difficult to associate an error message
with the erring file. They are described with ``may'' to allow
implementations to use other methods of identifying files and to
parallel the description in
.IR c99 .
.SH "FUTURE DIRECTIONS"
A compilation system based on the ISO/IEC\ 1539:\|1991 standard may be considered for a
future version; it may have a different utility name from
.IR fort77 .
.SH "SEE ALSO"
.IR "\fIar\fR\^",
.IR "\fIasa\fR\^",
.IR "\fIc99\fR\^",
.IR "\fIumask\fR\^"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "Chapter 8" ", " "Environment Variables",
.IR "Section 12.2" ", " "Utility Syntax Guidelines"
.P
The System Interfaces volume of POSIX.1\(hy2008,
.IR "\fIexec\fR\^"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
.\"
.\" Copyright 1993-2005 Werner Almesberger
.\"           2005-2012 Craig Small
.\" This program is free software; you can redistribute it and/or modify
.\" it under the terms of the GNU General Public License as published by
.\" the Free Software Foundation; either version 2 of the License, or
.\" (at your option) any later version.
.\"
.TH FUSER 1 "2012-07-28" "psmisc" "User Commands"
.SH NAME
fuser \- identify processes using files or sockets
.SH SYNOPSIS
.ad l
.B fuser
.RB [ \-fuv ]
.RB [ \-a | \-s ]
.RB [ \-4 | \-6 ]
.RB [ \-c | \-m | \-n
.IR space ]
.RB [ \ \-k
.RB [ \-i ]
.RB [ \-M ]
.RB [ \-w ]
.RB [ \- \fISIGNAL\fR]
]
.IR name " ..."
.br
.B fuser
.RB \-l
.br
.B fuser
.RB \-V
.ad b
.SH DESCRIPTION
.B fuser
displays the PIDs of processes using the specified files or file
systems.  In the default display mode, each file name is followed by a
letter denoting the type of access:
.PP
.RS
.PD 0
.TP
.B c
current directory.
.TP
.B e
executable being run.
.TP
.B f
open file.
.B f
is omitted in default display mode.
.TP
.B F
open file for writing.
.B F
is omitted in default display mode.
.TP
.B r
root directory.
.TP
.B m
mmap'ed file or shared library.
.PD
.RE
.LP
.B fuser
returns a non-zero return code if none of the specified files is
accessed or in case of a fatal error.  If at least one access has been
found,
.B fuser
returns zero.
.PP
In order to look up processes using TCP and UDP sockets, the
corresponding name space has to be selected with the
.B \-n
option. By default
.B fuser
will look in both IPv6 and IPv4 sockets.  To change the default,
behavior, use the
.B \-4
and
.B \-6
options.  The socket(s) can be specified by the local and remote port,
and the remote address.  All fields are optional, but commas in front
of missing fields must be present:
.PP
\fB[\fR\fIlcl_port\fR\fB][\fR,\fB[\fR\fIrmt_host\fR\fB][\fR,\fB[\fIrmt_port\fR\fB]]]
.PP
Either symbolic or numeric values can be used for IP addresses and port
numbers.
.PP
.B fuser
outputs only the PIDs to stdout, everything else is sent to stderr.
.SH OPTIONS
.TP
\fB\-a\fR, \fB\-\-all\fR
Show all files specified on the command line.  By default, only files
that are accessed by at least one process are shown.
.TP
\fB\-c\fR
Same as \-m option, used for POSIX compatibility.
.TP
\fB\-f\fR
Silently ignored, used for POSIX compatibility.
.TP
\fB\-k\fR, \fB\-\-kill\fR
Kill processes accessing the file.  Unless changed with
\fB\-\fR\fISIGNAL\fR, SIGKILL is sent.  An
.B fuser
process never kills itself, but may kill other
.B fuser
processes.  The effective user ID of the process executing
.B fuser
is set to its real user ID before attempting to kill.
.TP
\fB\-i\fR, \fB\-\-interactive\fR
Ask the user for confirmation before killing a process. This option is
silently ignored if
.B \-k
is not present too.
.TP
\fB\-l\fR, \fB\-\-list\-signals\fR
List all known signal names.
.TP
\fB\-m\fR \fINAME\fR, \fB\-\-mount\fR \fINAME\fR
.I NAME
specifies a file on a mounted file system or a block device that is
mounted.  All processes accessing files on that file system are listed.
If a directory file is specified, it is automatically changed to
.IR NAME /.
to use any file system that might be mounted on that directory.
.TP
\fB\-M\fR, \fB\-\-ismountpoint\fR
Request will be fulfilled only if
.I NAME
specifies a mountpoint.  This is an invaluable seatbelt which prevents
you from killing the machine if
.I NAME
happens to not be a filesystem.
.TP
\fB\-w\fP
Kill only processes which have write access.  This option is silently
ignored if
.B \-k
is not present too.
.TP
\fB\-n \fISPACE\fR, \fB\-\-namespace\fR \fISPACE\fR
Select a different name space.  The name spaces
.B file
(file names, the default),
.B udp
(local UDP ports), and
.B tcp
(local TCP ports) are supported.  For ports, either the port number or
the symbolic name can be specified.  If there is no ambiguity, the
shortcut notation \fIname\fB/\fIspace\fR (e.g. \fI80\fB/\fItcp\fR)
can be used.
.TP
\fB\-s\fR, \fB\-\-silent\fR
Silent operation.
.B  \-u
and
.B \-v
are ignored in this mode.
.B \-a
must not be used with
.BR \-s .
.TP
\fB\-\fISIGNAL\fR
Use the specified signal instead of SIGKILL when killing processes.
Signals can be specified either by name (e.g.
.BR \-HUP ) or by
number (e.g.
.BR \-1 ).
This option is silently ignored if the
.B \-k
option is not used.
.TP
\fB\-u\fR, \fB\-\-user\fR
Append the user name of the process owner to each PID.
.TP
\fB\-v\fR, \fB\-\-verbose\fR

Verbose mode.  Processes are shown in a
.BR  ps -like
style.  The fields PID, USER and COMMAND are similar to
.BR ps .
ACCESS shows how the process accesses the file.  Verbose mode will also
show when a particular file is being access as a mount point, knfs
export or swap file.  In this case
.B kernel
is shown instead of the PID.
.TP
\fB\-V\fR, \fB\-\-version\fR
Display version information.
.TP
\fB\-4\fR, \fB\-\-ipv4\fR
Search only for IPv4 sockets.  This option must not be used with the
.B \-6
option and only has an effect with the tcp and udp namespaces.
.TP
\fB\-6\fR, \fB\-\-ipv6\fR
Search only for IPv6 sockets.  This option must not be used with the
.B \-4
option and only has an effect with the tcp and udp namespaces.
.IP \fB\-\fR
Reset all options and set the signal back to SIGKILL.
.SH FILES
.TP
/proc
location of the proc file system
.SH EXAMPLES
.TP
.B fuser \-km /home
kills all processes accessing the file system /home in any way.
.TP
\fBif fuser \-s /dev/ttyS1; then :; else \fIsomething\fB; fi\fR
invokes
.I something
if no other process is using /dev/ttyS1.
.TP
.B fuser telnet/tcp
shows all processes at the (local) TELNET port.
.SH RESTRICTIONS
Processes accessing the same file or file system several times in the
same way are only shown once.
.PP
If the same object is specified several times on the command line, some
of those entries may be ignored.
.PP
.B fuser
may only be able to gather partial information unless run with
privileges.  As a consequence, files opened by processes belonging to
other users may not be listed and executables may be classified as
mapped only.
.PP
Installing
.B fuser
SUID root will avoid problems associated with partial information, but
may be undesirable for security and privacy reasons.
.PP
.B udp
and
.B tcp
name spaces, and UNIX domain sockets can't be searched with kernels
older than 1.3.78.
.PP
Accesses by the kernel are only shown with the
.B \-v
option.
.PP
The
.B \-k
option only works on processes.  If the user is the kernel,
.B fuser
will print an advice, but take no action beyond that.
.SH BUGS
.PP
fuser \-m /dev/sgX will show (or kill with the \-k flag) all processes,
even if you don't have that device configured.  There may be other
devices it does this for too.
.PP
.B fuser
cannot report on any processes that it doesn't have permission to look
at the file descriptor table for.  The most common time this problem
occurs is when looking for TCP or UDP sockets when running
.B fuser
as a non-root user.  In this case
.B fuser
will report no access
.PP
The mount \-m option will match any file within the save device as the
specified file, use the \-M option as well if you mean to specify only
the mount point.
.SH "SEE ALSO"
.BR kill (1),
.BR killall (1),
.BR lsof (8),
.BR pkill (1),
.BR ps (1),
.BR kill (2).
.\{{{}}}
'\" et
.TH GENCAT "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
gencat
\(em generate a formatted message catalog
.SH SYNOPSIS
.LP
.nf
gencat \fIcatfile msgfile\fR...
.fi
.SH DESCRIPTION
The
.IR gencat
utility shall merge the message text source file
.IR msgfile
into a formatted message catalog
.IR catfile .
The file
.IR catfile
shall be created if it does not already exist. If
.IR catfile
does exist, its messages shall be included in the new
.IR catfile .
If set and message numbers collide, the new message text defined in
.IR msgfile
shall replace the old message text currently contained in
.IR catfile .
.SH OPTIONS
None.
.SH OPERANDS
The following operands shall be supported:
.IP "\fIcatfile\fR" 10
A pathname of the formatted message catalog. If
.BR '\(mi' 
is specified, standard output shall be used. The format of the message
catalog produced is unspecified.
.IP "\fImsgfile\fR" 10
A pathname of a message text source file. If
.BR '\(mi' 
is specified for an instance of
.IR msgfile ,
standard input shall be used. The format of message text source files
is defined in the EXTENDED DESCRIPTION section.
.SH STDIN
The standard input shall not be used unless a
.IR msgfile
operand is specified as
.BR '\(mi' .
.SH "INPUT FILES"
The input files shall be text files.
.SH "ENVIRONMENT VARIABLES"
The following environment variables shall affect the execution of
.IR gencat :
.IP "\fILANG\fP" 10
Provide a default value for the internationalization variables that are
unset or null. (See the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 8.2" ", " "Internationalization Variables"
for the precedence of internationalization variables used to determine
the values of locale categories.)
.IP "\fILC_ALL\fP" 10
If set to a non-empty string value, override the values of all the
other internationalization variables.
.IP "\fILC_CTYPE\fP" 10
Determine the locale for the interpretation of sequences of bytes of
text data as characters (for example, single-byte as opposed to
multi-byte characters in arguments and input files).
.IP "\fILC_MESSAGES\fP" 10
.br
Determine the locale that should be used to affect the format and
contents of diagnostic messages written to standard error.
.IP "\fINLSPATH\fP" 10
Determine the location of message catalogs for the processing of
.IR LC_MESSAGES .
.SH "ASYNCHRONOUS EVENTS"
Default.
.SH STDOUT
The standard output shall not be used unless the
.IR catfile
operand is specified as
.BR '\(mi' .
.SH STDERR
The standard error shall be used only for diagnostic messages.
.SH "OUTPUT FILES"
None.
.SH "EXTENDED DESCRIPTION"
The content of a message text file shall be in the format defined as
follows. Note that the fields of a message text source line are
separated by a single
&lt;blank&gt;
character. Any other
&lt;blank&gt;
characters are considered to be part of the subsequent field.
.IP "\fB$set\ \fIn\ comment\fR" 10
.br
This line specifies the set identifier of the following messages until
the next
.BR $set
or end-of-file appears. The
.IR n
denotes the set identifier, which is defined as a number in the range
[1,
{NL_SETMAX}]
(see the
.IR &lt;limits.h&gt; 
header defined in the Base Definitions volume of POSIX.1\(hy2008). The application shall ensure that set
identifiers are presented in ascending order within a single source
file, but need not be contiguous. Any string following the set
identifier shall be treated as a comment. If no
.BR $set
directive is specified in a message text source file, all messages
shall be located in an implementation-defined default message set
NL_SETD (see the
.IR &lt;nl_types.h&gt; 
header defined in the Base Definitions volume of POSIX.1\(hy2008).
.IP "\fB$delset\ \fIn\ comment\fR" 10
.br
This line deletes message set
.IR n
from an existing message catalog. The
.IR n
denotes the set number [1,
{NL_SETMAX}].
Any string following the set number shall be treated as a comment.
.IP "\fB$\ \fIcomment\fR" 10
A line beginning with
.BR '$' 
followed by a
&lt;blank&gt;
shall be treated as a comment.
.IP "\fIm\ message-text\fR" 10
.br
The
.IR m
denotes the message identifier, which is defined as a number in the
range [1,
{NL_MSGMAX}]
(see the
.IR &lt;limits.h&gt; 
header). The
.IR message-text
shall be stored in the message catalog with the set identifier
specified by the last
.BR $set
directive, and with message identifier
.IR m .
If the
.IR message-text
is empty, and a
&lt;blank&gt;
field separator is present, an empty string shall be stored
in the message catalog. If a message source line has a message number,
but neither a field separator nor
.IR message-text ,
the existing message with that number (if any) shall be deleted from
the catalog. The application shall ensure that message identifiers are
in ascending order within a single set, but need not be contiguous. The
application shall ensure that the length of
.IR message-text
is in the range [0,
{NL_TEXTMAX}]
(see the
.IR &lt;limits.h&gt; 
header).
.IP "\fB$quote\ \fIn\fR" 10
This line specifies an optional quote character
.IR c ,
which can be used to surround
.IR message-text
so that trailing
&lt;space&gt;
characters or null (empty) messages are visible in a message source
line. By default, or if an empty
.BR $quote
directive is supplied, no quoting of
.IR message-text
shall be recognized.
.P
Empty lines in a message text source file shall be ignored. The
effects of lines starting with any character other than those defined
above are implementation-defined.
.P
Text strings can contain the special characters and escape sequences
defined in the following table:
.TS
center tab(@) box;
cB | cB | cB
l | l | lf5.
Description@Symbol@Sequence
_
&lt;newline&gt;@NL(LF)@\en
Horizontal-tab@HT@\et
&lt;vertical-tab&gt;@VT@\ev
&lt;backspace&gt;@BS@\eb
&lt;carriage-return&gt;@CR@\er
&lt;form-feed&gt;@FF@\ef
Backslash@\fR\e\fP@\e\e
Bit pattern@\fRddd\fP@\eddd
.TE
.P
The escape sequence
.BR \(dq\eddd\(dq 
consists of
&lt;backslash&gt;
followed by one, two, or three octal digits, which shall be taken to
specify the value of the desired character. If the character following a
&lt;backslash&gt;
is not one of those specified, the
&lt;backslash&gt;
shall be ignored.
.P
A
&lt;backslash&gt;
followed by a
&lt;newline&gt;
is also used to continue a string on the following line. Thus, the
following two lines describe a single message string:
.sp
.RS 4
.nf
\fB
1 This line continues \e
to the next line
.fi \fR
.P
.RE
.P
which shall be equivalent to:
.sp
.RS 4
.nf
\fB
1 This line continues to the next line
.fi \fR
.P
.RE
.SH "EXIT STATUS"
The following exit values shall be returned:
.IP "\00" 6
Successful completion.
.IP &gt;0 6
An error occurred.
.SH "CONSEQUENCES OF ERRORS"
Default.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
Message catalogs produced by
.IR gencat
are binary encoded, meaning that their portability cannot be guaranteed
between different types of machine. Thus, just as C programs need to
be recompiled for each type of machine, so message catalogs must be
recreated via
.IR gencat .
.SH EXAMPLES
None.
.SH RATIONALE
None.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "\fIiconv\fR\^"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "Chapter 8" ", " "Environment Variables",
.IR "\fB&lt;limits.h&gt;\fP",
.IR "\fB&lt;nl_types.h&gt;\fP"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
'\" et
.TH GETCONF "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
getconf
\(em get configuration values
.SH SYNOPSIS
.LP
.nf
getconf \fB[\fR\(miv specification\fB] \fIsystem_var\fR
.P
getconf \fB[\fR\(miv specification\fB] \fIpath_var pathname\fR
.fi
.SH DESCRIPTION
In the first synopsis form, the
.IR getconf
utility shall write to the standard output the value of the variable
specified by the
.IR system_var
operand.
.P
In the second synopsis form, the
.IR getconf
utility shall write to the standard output the value of the variable
specified by the
.IR path_var
operand for the path specified by the
.IR pathname
operand.
.P
The value of each configuration variable shall be determined as if it
were obtained by calling the function from which it is defined to be
available by this volume of POSIX.1\(hy2008 or by the System Interfaces volume of POSIX.1\(hy2008 (see the OPERANDS section). The
value shall reflect conditions in the current operating environment.
.SH OPTIONS
The
.IR getconf
utility shall conform to the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 12.2" ", " "Utility Syntax Guidelines".
.P
The following option shall be supported:
.IP "\fB\(miv\ \fIspecification\fR" 10
.br
Indicate a specific specification and version for which configuration
variables shall be determined. If this option is not specified, the
values returned correspond to an implementation default conforming
compilation environment.
.RS 10 
.P
If the command:
.sp
.RS 4
.nf
\fB
getconf _POSIX_V7_ILP32_OFF32
.fi \fR
.P
.RE
.P
does not write
.BR \(dq\(mi1\en\(dq 
or
.BR \(dqundefined\en\(dq 
to standard output, then commands of the form:
.sp
.RS 4
.nf
\fB
getconf \(miv POSIX_V7_ILP32_OFF32 ...
.fi \fR
.P
.RE
.P
determine values for configuration variables corresponding to the
POSIX_V7_ILP32_OFF32 compilation environment specified in
.IR "\fIc99\fR\^",
the EXTENDED DESCRIPTION.
.P
If the command:
.sp
.RS 4
.nf
\fB
getconf _POSIX_V7_ILP32_OFFBIG
.fi \fR
.P
.RE
.P
does not write
.BR \(dq\(mi1\en\(dq 
or
.BR \(dqundefined\en\(dq 
to standard output, then commands of the form:
.sp
.RS 4
.nf
\fB
getconf \(miv POSIX_V7_ILP32_OFFBIG ...
.fi \fR
.P
.RE
.P
determine values for configuration variables corresponding to the
POSIX_V7_ILP32_OFFBIG compilation environment specified in
.IR "\fIc99\fR\^",
the EXTENDED DESCRIPTION.
.P
If the command:
.sp
.RS 4
.nf
\fB
getconf _POSIX_V7_LP64_OFF64
.fi \fR
.P
.RE
.P
does not write
.BR \(dq\(mi1\en\(dq 
or
.BR \(dqundefined\en\(dq 
to standard output, then commands of the form:
.sp
.RS 4
.nf
\fB
getconf \(miv POSIX_V7_LP64_OFF64 ...
.fi \fR
.P
.RE
.P
determine values for configuration variables corresponding to the
POSIX_V7_LP64_OFF64 compilation environment specified in
.IR "\fIc99\fR\^",
the EXTENDED DESCRIPTION.
.P
If the command:
.sp
.RS 4
.nf
\fB
getconf _POSIX_V7_LPBIG_OFFBIG
.fi \fR
.P
.RE
.P
does not write
.BR \(dq\(mi1\en\(dq 
or
.BR \(dqundefined\en\(dq 
to standard output, then commands of the form:
.sp
.RS 4
.nf
\fB
getconf \(miv POSIX_V7_LPBIG_OFFBIG ...
.fi \fR
.P
.RE
.P
determine values for configuration variables corresponding to the
POSIX_V7_LPBIG_OFFBIG compilation environment specified in
.IR "\fIc99\fR\^",
the EXTENDED DESCRIPTION.
.RE
.SH OPERANDS
The following operands shall be supported:
.IP "\fIpath_var\fR" 10
A name of a configuration variable. All of the variables in the
Variable column of the table in the DESCRIPTION of the
\fIfpathconf\fR()
function defined in the System Interfaces volume of POSIX.1\(hy2008, without the enclosing braces, shall be
supported. The implementation may add other local variables.
.IP "\fIpathname\fR" 10
A pathname for which the variable specified by
.IR path_var
is to be determined.
.IP "\fIsystem_var\fR" 10
A name of a configuration variable. All of the following variables
shall be supported:
.RS 10 
.IP " *" 4
The names in the Variable column of the table in the DESCRIPTION of the
\fIsysconf\fR()
function in the System Interfaces volume of POSIX.1\(hy2008, except for the entries corresponding to
_SC_CLK_TCK, _SC_GETGR_R_SIZE_MAX, and _SC_GETPW_R_SIZE_MAX, without
the enclosing braces.
.RS 4 
.P
For compatibility with earlier versions, the following variable names
shall also be supported:
POSIX2_C_BIND
POSIX2_C_DEV
POSIX2_CHAR_TERM
POSIX2_FORT_DEV
POSIX2_FORT_RUN
POSIX2_LOCALEDEF
POSIX2_SW_DEV
POSIX2_UPE
POSIX2_VERSION
.P
and shall be equivalent to the same name prefixed with an
&lt;underscore&gt;.
This requirement may be removed in a future version.
.RE
.IP " *" 4
The names of the symbolic constants used as the
.IR name
argument of the
\fIconfstr\fR()
function in the System Interfaces volume of POSIX.1\(hy2008, without the _CS_ prefix.
.IP " *" 4
The names of the symbolic constants listed under the headings ``Maximum
Values'' and ``Minimum Values'' in the description of the
.IR &lt;limits.h&gt; 
header in the Base Definitions volume of POSIX.1\(hy2008, without the enclosing braces.
.RS 4 
.P
For compatibility with earlier versions, the following variable names
shall also be supported:
POSIX2_BC_BASE_MAX
POSIX2_BC_DIM_MAX
POSIX2_BC_SCALE_MAX
POSIX2_BC_STRING_MAX
POSIX2_COLL_WEIGHTS_MAX
POSIX2_EXPR_NEST_MAX
POSIX2_LINE_MAX
POSIX2_RE_DUP_MAX
.P
and shall be equivalent to the same name prefixed with an
&lt;underscore&gt;.
This requirement may be removed in a future version.
.RE
.P
The implementation may add other local values.
.RE
.SH STDIN
Not used.
.SH "INPUT FILES"
None.
.SH "ENVIRONMENT VARIABLES"
The following environment variables shall affect the execution of
.IR getconf :
.IP "\fILANG\fP" 10
Provide a default value for the internationalization variables that are
unset or null. (See the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 8.2" ", " "Internationalization Variables"
for the precedence of internationalization variables used to determine
the values of locale categories.)
.IP "\fILC_ALL\fP" 10
If set to a non-empty string value, override the values of all the
other internationalization variables.
.IP "\fILC_CTYPE\fP" 10
Determine the locale for the interpretation of sequences of bytes of
text data as characters (for example, single-byte as opposed to
multi-byte characters in arguments).
.IP "\fILC_MESSAGES\fP" 10
.br
Determine the locale that should be used to affect the format and
contents of diagnostic messages written to standard error.
.IP "\fINLSPATH\fP" 10
Determine the location of message catalogs for the processing of
.IR LC_MESSAGES .
.SH "ASYNCHRONOUS EVENTS"
Default.
.SH STDOUT
If the specified variable is defined on the system and its value is
described to be available from the
\fIconfstr\fR()
function defined in the System Interfaces volume of POSIX.1\(hy2008, its value shall be written in the
following format:
.sp
.RS 4
.nf
\fB
"%s\en", &lt;\fIvalue\fR&gt;
.fi \fR
.P
.RE
.P
Otherwise, if the specified variable is defined on the system, its
value shall be written in the following format:
.sp
.RS 4
.nf
\fB
"%d\en", &lt;\fIvalue\fR&gt;
.fi \fR
.P
.RE
.P
If the specified variable is valid, but is undefined on the system,
.IR getconf
shall write using the following format:
.sp
.RS 4
.nf
\fB
"undefined\en"
.fi \fR
.P
.RE
.P
If the variable name is invalid or an error occurs, nothing shall be
written to standard output.
.SH STDERR
The standard error shall be used only for diagnostic messages.
.SH "OUTPUT FILES"
None.
.SH "EXTENDED DESCRIPTION"
None.
.SH "EXIT STATUS"
The following exit values shall be returned:
.IP "\00" 6
The specified variable is valid and information about its current state
was written successfully.
.IP &gt;0 6
An error occurred.
.SH "CONSEQUENCES OF ERRORS"
Default.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
None.
.SH EXAMPLES
The following example illustrates the value of
{NGROUPS_MAX}:
.sp
.RS 4
.nf
\fB
getconf NGROUPS_MAX
.fi \fR
.P
.RE
.P
The following example illustrates the value of
{NAME_MAX}
for a specific directory:
.sp
.RS 4
.nf
\fB
getconf NAME_MAX /usr
.fi \fR
.P
.RE
.P
The following example shows how to deal more carefully with results
that might be unspecified:
.sp
.RS 4
.nf
\fB
if value=$(getconf PATH_MAX /usr); then
if [ "$value" = "undefined" ]; then
echo PATH_MAX in /usr is indeterminate.
else
echo PATH_MAX in /usr is $value.
fi
else
echo Error in getconf.
fi
.fi \fR
.P
.RE
.SH RATIONALE
The original need for this utility, and for the
\fIconfstr\fR()
function, was to provide a way of finding the configuration-defined
default value for the
.IR PATH
environment variable. Since
.IR PATH
can be modified by the user to include directories that could contain
utilities replacing the standard utilities, shell scripts need
a way to determine the system-supplied
.IR PATH
environment variable value that contains the correct search path for
the standard utilities. It was later suggested that access to the other
variables described in this volume of POSIX.1\(hy2008 could also be useful to applications.
.P
This functionality of
.IR getconf
would not be adequately subsumed by another command such as:
.sp
.RS 4
.nf
\fB
grep \fIvar\fP /etc/conf
.fi \fR
.P
.RE
.P
because such a strategy would provide correct values for neither those
variables that can vary at runtime, nor those that can vary depending
on the path.
.P
Early proposal versions of
.IR getconf
specified exit status 1 when the specified variable was valid, but not
defined on the system. The output string
.BR \(dqundefined\(dq 
is now used to specify this case with exit code 0 because so many
things depend on an exit code of zero when an invoked utility is
successful.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "\fIc99\fR\^"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "Chapter 8" ", " "Environment Variables",
.IR "Section 12.2" ", " "Utility Syntax Guidelines",
.IR "\fB&lt;limits.h&gt;\fP"
.P
The System Interfaces volume of POSIX.1\(hy2008,
.IR "\fIconfstr\fR\^(\|)",
.IR "\fIfpathconf\fR\^(\|)",
.IR "\fIsysconf\fR\^(\|)",
.IR "\fIsystem\fR\^(\|)"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
'\" et
.TH GETOPTS "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
getopts
\(em parse utility options
.SH SYNOPSIS
.LP
.nf
getopts \fIoptstring name \fB[\fIarg\fR...\fB]\fR
.fi
.SH DESCRIPTION
The
.IR getopts
utility shall retrieve options and option-arguments from a list of
parameters. It shall support the Utility Syntax Guidelines 3 to 10,
inclusive, described in the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 12.2" ", " "Utility Syntax Guidelines".
.P
Each time it is invoked, the
.IR getopts
utility shall place the value of the next option in the shell variable
specified by the
.IR name
operand and the index of the next argument to be processed in the shell
variable
.IR OPTIND .
Whenever the shell is invoked,
.IR OPTIND
shall be initialized to 1.
.P
When the option requires an option-argument, the
.IR getopts
utility shall place it in the shell variable
.IR OPTARG .
If no option was found, or if the option that was found does not have
an option-argument,
.IR OPTARG
shall be unset.
.P
If an option character not contained in the
.IR optstring
operand is found where an option character is expected, the shell
variable specified by
.IR name
shall be set to the
&lt;question-mark&gt;
(\c
.BR '?' )
character. In this case, if the first character in
.IR optstring
is a
&lt;colon&gt;
(\c
.BR ':' ),
the shell variable
.IR OPTARG
shall be set to the option character found, but no output shall be
written to standard error; otherwise, the shell variable
.IR OPTARG
shall be unset and a diagnostic message shall be written to standard
error. This condition shall be considered to be an error detected in
the way arguments were presented to the invoking application, but shall
not be an error in
.IR getopts
processing.
.P
If an option-argument is missing:
.IP " *" 4
If the first character of
.IR optstring
is a
&lt;colon&gt;,
the shell variable specified by
.IR name
shall be set to the
&lt;colon&gt;
character and the shell variable
.IR OPTARG
shall be set to the option character found.
.IP " *" 4
Otherwise, the shell variable specified by
.IR name
shall be set to the
&lt;question-mark&gt;
character, the shell variable
.IR OPTARG
shall be unset, and a diagnostic message shall be written to standard
error. This condition shall be considered to be an error detected in
the way arguments were presented to the invoking application, but shall
not be an error in
.IR getopts
processing; a diagnostic message shall be written as stated, but the
exit status shall be zero.
.P
When the end of options is encountered, the
.IR getopts
utility shall exit with a return value greater than zero; the shell
variable
.IR OPTIND
shall be set to the index of the first operand, or the value
.BR \(dq$#\(dq +1
if there are no operands; the
.IR name
variable shall be set to the
&lt;question-mark&gt;
character. Any of the following shall identify the end of options:
the first
.BR \(dq\(mi\|\(mi\(dq 
argument that is not an option-argument, finding an argument that is
not an option-argument and does not begin with a
.BR '\(mi' ,
or encountering an error.
.P
The shell variables
.IR OPTIND
and
.IR OPTARG
shall be local to the caller of
.IR getopts
and shall not be exported by default.
.P
The shell variable specified by the
.IR name
operand,
.IR OPTIND ,
and
.IR OPTARG
shall affect the current shell execution environment; see
.IR "Section 2.12" ", " "Shell Execution Environment".
.P
If the application sets
.IR OPTIND
to the value 1, a new set of parameters can be used: either the
current positional parameters or new
.IR arg
values. Any other attempt to invoke
.IR getopts
multiple times in a single shell execution environment with parameters
(positional parameters or
.IR arg
operands) that are not the same in all invocations, or with an
.IR OPTIND
value modified to be a value other than 1, produces unspecified
results.
.SH OPTIONS
None.
.SH OPERANDS
The following operands shall be supported:
.IP "\fIoptstring\fR" 10
A string containing the option characters recognized by the utility
invoking
.IR getopts .
If a character is followed by a
&lt;colon&gt;,
the option shall be expected to have an argument, which should be supplied
as a separate argument. Applications should specify an option character
and its option-argument as separate arguments, but
.IR getopts
shall interpret the characters following an option character requiring
arguments as an argument whether or not this is done. An explicit null
option-argument need not be recognized if it is not supplied as a
separate argument when
.IR getopts
is invoked. (See also the
\fIgetopt\fR()
function defined in the System Interfaces volume of POSIX.1\(hy2008.) The characters
&lt;question-mark&gt;
and
&lt;colon&gt;
shall not be used as option characters by an application. The use of
other option characters that are not alphanumeric produces unspecified
results. If the option-argument is not supplied as a separate argument
from the option character, the value in
.IR OPTARG
shall be stripped of the option character and the
.BR '\(mi' .
The first character in
.IR optstring
determines how
.IR getopts
behaves if an option character is not known or an option-argument is
missing.
.IP "\fIname\fR" 10
The name of a shell variable that shall be set by the
.IR getopts
utility to the option character that was found.
.P
The
.IR getopts
utility by default shall parse positional parameters passed to the
invoking shell procedure. If
.IR arg s
are given, they shall be parsed instead of the positional parameters.
.SH STDIN
Not used.
.SH "INPUT FILES"
None.
.SH "ENVIRONMENT VARIABLES"
The following environment variables shall affect the execution of
.IR getopts :
.IP "\fILANG\fP" 10
Provide a default value for the internationalization variables that are
unset or null. (See the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 8.2" ", " "Internationalization Variables"
for the precedence of internationalization variables used to determine
the values of locale categories.)
.IP "\fILC_ALL\fP" 10
If set to a non-empty string value, override the values of all the
other internationalization variables.
.IP "\fILC_CTYPE\fP" 10
Determine the locale for the interpretation of sequences of bytes of
text data as characters (for example, single-byte as opposed to
multi-byte characters in arguments and input files).
.IP "\fILC_MESSAGES\fP" 10
.br
Determine the locale that should be used to affect the format and
contents of diagnostic messages written to standard error.
.IP "\fINLSPATH\fP" 10
Determine the location of message catalogs for the processing of
.IR LC_MESSAGES .
.IP "\fIOPTIND\fP" 10
This variable shall be used by the
.IR getopts
utility as the index of the next argument to be processed.
.SH "ASYNCHRONOUS EVENTS"
Default.
.SH STDOUT
Not used.
.SH STDERR
Whenever an error is detected and the first character in the
.IR optstring
operand is not a
&lt;colon&gt;
(\c
.BR ':' ),
a diagnostic message shall be written to standard error with the
following information in an unspecified format:
.IP " *" 4
The invoking program name shall be identified in the message. The
invoking program name shall be the value of the shell special parameter
0 (see
.IR "Section 2.5.2" ", " "Special Parameters")
at the time the
.IR getopts
utility is invoked. A name equivalent to:
.RS 4 
.sp
.RS 4
.nf
\fB
basename "$0"
.fi \fR
.P
.RE
.P
may be used.
.RE
.IP " *" 4
If an option is found that was not specified in
.IR optstring ,
this error is identified and the invalid option character shall be
identified in the message.
.IP " *" 4
If an option requiring an option-argument is found, but an
option-argument is not found, this error shall be identified and the
invalid option character shall be identified in the message.
.SH "OUTPUT FILES"
None.
.SH "EXTENDED DESCRIPTION"
None.
.SH "EXIT STATUS"
The following exit values shall be returned:
.IP "\00" 6
An option, specified or unspecified by
.IR optstring ,
was found.
.IP &gt;0 6
The end of options was encountered or an error occurred.
.SH "CONSEQUENCES OF ERRORS"
Default.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
Since
.IR getopts
affects the current shell execution environment, it is generally
provided as a shell regular built-in. If it is called in a subshell or
separate utility execution environment, such as one of the following:
.sp
.RS 4
.nf
\fB
(getopts abc value "$@")
nohup getopts ...
find . \(miexec getopts ... \e;
.fi \fR
.P
.RE
.P
it does not affect the shell variables in the caller's environment.
.P
Note that shell functions share
.IR OPTIND
with the calling shell even though the positional parameters are
changed. If the calling shell and any of its functions uses
.IR getopts
to parse arguments, the results are unspecified.
.SH EXAMPLES
The following example script parses and displays its arguments:
.sp
.RS 4
.nf
\fB
aflag=
bflag=
while getopts ab: name
do
case $name in
a)    aflag=1;;
b)    bflag=1
bval="$OPTARG";;
?)   printf "Usage: %s: [\(mia] [\(mib value] args\en" $0
exit 2;;
esac
done
if [ ! \(miz "$aflag" ]; then
printf "Option \(mia specified\en"
fi
if [ ! \(miz "$bflag" ]; then
printf 'Option \(mib "%s" specified\en' "$bval"
fi
shift $(($OPTIND \(mi 1))
printf "Remaining arguments are: %s\en$*"
.fi \fR
.P
.RE
.SH RATIONALE
The
.IR getopts
utility was chosen in preference to the System V
.IR getopt
utility because
.IR getopts
handles option-arguments containing
&lt;blank&gt;
characters.
.P
The
.IR OPTARG
variable is not mentioned in the ENVIRONMENT VARIABLES section because
it does not affect the execution of
.IR getopts ;
it is one of the few ``output-only'' variables used by the standard
utilities.
.P
The
&lt;colon&gt;
is not allowed as an option character because that is not historical
behavior, and it violates the Utility Syntax Guidelines. The
&lt;colon&gt;
is now specified to behave as in the KornShell version of the
.IR getopts
utility; when used as the first character in the
.IR optstring
operand, it disables diagnostics concerning missing option-arguments
and unexpected option characters. This replaces the use of the
.IR OPTERR
variable that was specified in an early proposal.
.P
The formats of the diagnostic messages produced by the
.IR getopts
utility and the
\fIgetopt\fR()
function are not fully specified because implementations with superior
(``friendlier'') formats objected to the formats used by some
historical implementations. The standard developers considered it
important that the information in the messages used be uniform between
.IR getopts
and
\fIgetopt\fR().
Exact duplication of the messages might not be possible, particularly
if a utility is built on another system that has a different
\fIgetopt\fR()
function, but the messages must have specific information included so
that the program name, invalid option character, and type of error can
be distinguished by a user.
.P
Only a rare application program intercepts a
.IR getopts
standard error message and wants to parse it. Therefore,
implementations are free to choose the most usable messages they can
devise. The following formats are used by many historical
implementations:
.sp
.RS 4
.nf
\fB
"%s: illegal option \(mi\|\(mi %c\en", &lt;\fIprogram name\fP&gt;, &lt;\fIoption character\fP&gt;
.P
"%s: option requires an argument \(mi\|\(mi %c\en", &lt;\fIprogram name\fP&gt;, \e
&lt;\fIoption character\fP&gt;
.fi \fR
.P
.RE
.P
Historical shells with built-in versions of
\fIgetopt\fR()
or
.IR getopts
have used different formats, frequently not even indicating the option
character found in error.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "Section 2.5.2" ", " "Special Parameters"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "Chapter 8" ", " "Environment Variables",
.IR "Section 12.2" ", " "Utility Syntax Guidelines"
.P
The System Interfaces volume of POSIX.1\(hy2008,
.IR "\fIgetopt\fR\^(\|)"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
.\" GNU grep man page
.if !\n(.g \{\
.	if !\w|\*(lq| \{\
.		ds lq ``
.		if \w'\(lq' .ds lq "\(lq
.	\}
.	if !\w|\*(rq| \{\
.		ds rq ''
.		if \w'\(rq' .ds rq "\(rq
.	\}
.\}
.
.ie \n[.g] .mso www.tmac
.el \{\
. de MTO
\\$2 \(laemail: \\$1 \(ra\\$3
..
. de URL
\\$2 \(laURL: \\$1 \(ra\\$3
..
.\}
.
.TH GREP 1 \*(Dt "GNU grep 3.0" "User Commands"
.hy 0
.
.SH NAME
grep, egrep, fgrep \- print lines matching a pattern
.
.SH SYNOPSIS
.B grep
.RI [ OPTIONS ]
.I PATTERN
.RI [ FILE .\|.\|.]
.br
.B grep
.RI [ OPTIONS ]
.RB [ \-e
.I PATTERN
|
.B \-f
.IR FILE ]
.RI [ FILE .\|.\|.]
.
.SH DESCRIPTION
.B grep
searches the named input
.IR FILE s
for lines containing a match to the given
.IR PATTERN .
If no files are specified, or if the file
.RB "\*(lq" \- "\*(rq"
is given,
.B grep
searches standard input.
By default,
.B grep
prints the matching lines.
.PP
In addition, the variant programs
.B egrep
and
.B fgrep
are the same as
.B "grep\ \-E"
and
.BR "grep\ \-F" ,
respectively.
These variants are deprecated, but are provided for backward compatibility.
.
.SH OPTIONS
.SS "Generic Program Information"
.TP
.B \-\^\-help
Output a usage message and exit.
.TP
.BR \-V ", " \-\^\-version
Output the version number of
.B grep
and exit.
.SS "Matcher Selection"
.TP
.BR \-E ", " \-\^\-extended\-regexp
Interpret
.I PATTERN
as an extended regular expression (ERE, see below).
.TP
.BR \-F ", " \-\^\-fixed\-strings
Interpret
.I PATTERN
as a list of fixed strings (instead of regular expressions),
separated by newlines,
any of which is to be matched.
.TP
.BR \-G ", " \-\^\-basic\-regexp
Interpret
.I PATTERN
as a basic regular expression (BRE, see below).
This is the default.
.TP
.BR \-P ", " \-\^\-perl\-regexp
Interpret the pattern as a Perl-compatible regular expression (PCRE).
This is highly experimental and
.B "grep \-P"
may warn of unimplemented features.
.SS "Matching Control"
.TP
.BI \-e " PATTERN" "\fR,\fP \-\^\-regexp=" PATTERN
Use
.I PATTERN
as the pattern.
If this option is used multiple times or is combined with the
.B \-f
.RB ( \-\-file )
option, search for all patterns given.
This option can be used to protect a pattern beginning with \*(lq\-\*(rq.
.TP
.BI \-f " FILE" "\fR,\fP \-\^\-file=" FILE
Obtain patterns from
.IR FILE ,
one per line.
If this option is used multiple times or is combined with the
.B \-e
.RB ( \-\-regexp )
option, search for all patterns given.
The empty file contains zero patterns, and therefore matches nothing.
.TP
.BR \-i ", " \-\^\-ignore\-case
Ignore case distinctions in both the
.I PATTERN
and the input files.
.TP
.BR \-v ", " \-\^\-invert\-match
Invert the sense of matching, to select non-matching lines.
.TP
.BR \-w ", " \-\^\-word\-regexp
Select only those lines containing matches that form whole words.
The test is that the matching substring must either be at the
beginning of the line, or preceded by a non-word constituent
character.
Similarly, it must be either at the end of the line
or followed by a non-word constituent character.
Word-constituent characters are letters, digits, and the underscore.
This option has no effect if
.B \-x
is also specified.
.TP
.BR \-x ", " \-\^\-line\-regexp
Select only those matches that exactly match the whole line.
For a regular expression pattern, this is like parenthesizing the
pattern and then surrounding it with
.B ^
and
.BR $ .
.TP
.B \-y
Obsolete synonym for
.BR \-i .
.SS "General Output Control"
.TP
.BR \-c ", " \-\^\-count
Suppress normal output; instead print a count of
matching lines for each input file.
With the
.BR \-v ", " \-\^\-invert\-match
option (see below), count non-matching lines.
.TP
.BR \-\^\-color [ =\fIWHEN\fP "], " \-\^\-colour [ =\fIWHEN\fP ]
Surround the matched (non-empty) strings, matching lines, context lines,
file names, line numbers, byte offsets, and separators (for fields and
groups of context lines) with escape sequences to display them in color
on the terminal.
The colors are defined by the environment variable
.BR GREP_COLORS .
The deprecated environment variable
.B GREP_COLOR
is still supported, but its setting does not have priority.
.I WHEN
is
.BR never ", " always ", or " auto .
.TP
.BR \-L ", " \-\^\-files\-without\-match
Suppress normal output; instead print the name
of each input file from which no output would
normally have been printed.
The scanning will stop on the first match.
.TP
.BR \-l ", " \-\^\-files\-with\-matches
Suppress normal output; instead print
the name of each input file from which output
would normally have been printed.
The scanning will stop on the first match.
.TP
.BI \-m " NUM" "\fR,\fP \-\^\-max\-count=" NUM
Stop reading a file after
.I NUM
matching lines.
If the input is standard input from a regular file,
and
.I NUM
matching lines are output,
.B grep
ensures that the standard input is positioned to just after the last
matching line before exiting, regardless of the presence of trailing
context lines.
This enables a calling process to resume a search.
When
.B grep
stops after
.I NUM
matching lines, it outputs any trailing context lines.
When the
.B \-c
or
.B \-\^\-count
option is also used,
.B grep
does not output a count greater than
.IR NUM .
When the
.B \-v
or
.B \-\^\-invert\-match
option is also used,
.B grep
stops after outputting
.I NUM
non-matching lines.
.TP
.BR \-o ", " \-\^\-only\-matching
Print only the matched (non-empty) parts of a matching line,
with each such part on a separate output line.
.TP
.BR \-q ", " \-\^\-quiet ", " \-\^\-silent
Quiet; do not write anything to standard output.
Exit immediately with zero status if any match is found,
even if an error was detected.
Also see the
.B \-s
or
.B \-\^\-no\-messages
option.
.TP
.BR \-s ", " \-\^\-no\-messages
Suppress error messages about nonexistent or unreadable files.
.SS "Output Line Prefix Control"
.TP
.BR \-b ", " \-\^\-byte\-offset
Print the 0-based byte offset within the input file
before each line of output.
If
.B \-o
.RB ( \-\^\-only\-matching )
is specified,
print the offset of the matching part itself.
.TP
.BR \-H ", " \-\^\-with\-filename
Print the file name for each match.
This is the default when there is more than one file to search.
.TP
.BR \-h ", " \-\^\-no\-filename
Suppress the prefixing of file names on output.
This is the default when there is only one file
(or only standard input) to search.
.TP
.BI \-\^\-label= LABEL
Display input actually coming from standard input as input coming from file
.IR LABEL .
This is especially useful when implementing tools like
.BR zgrep ,
e.g.,
.BR "gzip -cd foo.gz | grep --label=foo -H something" .
See also the
.B \-H
option.
.TP
.BR \-n ", " \-\^\-line\-number
Prefix each line of output with the 1-based line number
within its input file.
.TP
.BR \-T ", " \-\^\-initial\-tab
Make sure that the first character of actual line content lies on a
tab stop, so that the alignment of tabs looks normal.
This is useful with options that prefix their output to the actual content:
.BR \-H , \-n ,
and
.BR \-b .
In order to improve the probability that lines
from a single file will all start at the same column,
this also causes the line number and byte offset (if present)
to be printed in a minimum size field width.
.TP
.BR \-u ", " \-\^\-unix\-byte\-offsets
Report Unix-style byte offsets.
This switch causes
.B grep
to report byte offsets as if the file were a Unix-style text file,
i.e., with CR characters stripped off.
This will produce results identical to running
.B grep
on a Unix machine.
This option has no effect unless
.B \-b
option is also used;
it has no effect on platforms other than \s-1MS-DOS\s0 and \s-1MS\s0-Windows.
.TP
.BR \-Z ", " \-\^\-null
Output a zero byte (the \s-1ASCII\s0
.B NUL
character) instead of the character that normally follows a file name.
For example,
.B "grep \-lZ"
outputs a zero byte after each file name instead of the usual newline.
This option makes the output unambiguous, even in the presence of file
names containing unusual characters like newlines.
This option can be used with commands like
.BR "find \-print0" ,
.BR "perl \-0" ,
.BR "sort \-z" ,
and
.B "xargs \-0"
to process arbitrary file names,
even those that contain newline characters.
.SS "Context Line Control"
.TP
.BI \-A " NUM" "\fR,\fP \-\^\-after\-context=" NUM
Print
.I NUM
lines of trailing context after matching lines.
Places a line containing a group separator
.RB ( \-\^\- )
between contiguous groups of matches.
With the
.B \-o
or
.B \-\^\-only\-matching
option, this has no effect and a warning is given.
.TP
.BI \-B " NUM" "\fR,\fP \-\^\-before\-context=" NUM
Print
.I NUM
lines of leading context before matching lines.
Places a line containing a group separator
.RB ( \-\^\- )
between contiguous groups of matches.
With the
.B \-o
or
.B \-\^\-only\-matching
option, this has no effect and a warning is given.
.TP
.BI \-C " NUM" "\fR,\fP \-" NUM "\fR,\fP \-\^\-context=" NUM
Print
.I NUM
lines of output context.
Places a line containing a group separator
.RB ( \-\^\- )
between contiguous groups of matches.
With the
.B \-o
or
.B \-\^\-only\-matching
option, this has no effect and a warning is given.
.SS "File and Directory Selection"
.TP
.BR \-a ", " \-\^\-text
Process a binary file as if it were text; this is equivalent to the
.B \-\^\-binary\-files=text
option.
.TP
.BI \-\^\-binary\-files= TYPE
If a file's data or metadata
indicate that the file contains binary data,
assume that the file is of type
.IR TYPE .
Non-text bytes indicate binary data; these are either output bytes that are
improperly encoded for the current locale, or null input bytes when the
.B \-z
option is not given.
.IP
By default,
.I TYPE
is
.BR binary ,
and when
.B grep
discovers that a file is binary it suppresses any further output, and
instead outputs either a one-line message saying that a binary file
matches, or no message if there is no match.
.IP
If
.I TYPE
is
.BR without-match ,
when
.B grep
discovers that a file is binary it assumes that the rest of the file
does not match; this is equivalent to the
.B \-I
option.
.IP
If
.I TYPE
is
.BR text ,
.B grep
processes a binary file as if it were text; this is equivalent to the
.B \-a
option.
.IP
When
.I type
is
.BR binary ,
.B grep
may treat non-text bytes as line terminators even without the
.B \-z
option.  This means choosing
.B binary
versus
.B text
can affect whether a pattern matches a file.  For
example, when
.I type
is
.B binary
the pattern
.B q$ might
match
.B q
immediately followed by a null byte, even though this
is not matched when
.I type
is
.BR text .
Conversely, when
.I type
is
.B binary
the pattern
.B .\&amp;
(period) might not match a null byte.
.IP
.I Warning:
The
.B \-a
option might output binary garbage,
which can have nasty side effects if the output is a terminal and if the
terminal driver interprets some of it as commands.
On the other hand, when reading files whose text encodings are
unknown, it can be helpful to use
.B \-a
or to set
.B LC_ALL='C'
in the environment, in order to find more matches even if the matches
are unsafe for direct display.
.TP
.BI \-D " ACTION" "\fR,\fP \-\^\-devices=" ACTION
If an input file is a device, FIFO or socket, use
.I ACTION
to process it.
By default,
.I ACTION
is
.BR read ,
which means that devices are read just as if they were ordinary files.
If
.I ACTION
is
.BR skip ,
devices are silently skipped.
.TP
.BI \-d " ACTION" "\fR,\fP \-\^\-directories=" ACTION
If an input file is a directory, use
.I ACTION
to process it.
By default,
.I ACTION
is
.BR read ,
i.e., read directories just as if they were ordinary files.
If
.I ACTION
is
.BR skip ,
silently skip directories.
If
.I ACTION
is
.BR recurse ,
read all files under each directory, recursively,
following symbolic links only if they are on the command line.
This is equivalent to the
.B \-r
option.
.TP
.BI \-\^\-exclude= GLOB
Skip any command-line file with a name suffix that matches the pattern
.IR GLOB ,
using wildcard matching; a name suffix is either the whole
name, or any suffix starting after a
.B /
and before a +non-\fB/\fP.
When searching recursively, skip any subfile whose base name matches
.IR GLOB ;
the base name is the part after the last
.BR / .
A pattern can use
.BR * ,
.BR ? ,
and
.BR [ ... ]
as wildcards, and
.B \e
to quote a wildcard or backslash character literally.
.TP
.BI \-\^\-exclude-from= FILE
Skip files whose base name matches any of the file-name globs read from
.I FILE
(using wildcard matching as described under
.BR \-\^\-exclude ).
.TP
.BI \-\^\-exclude-dir= GLOB
Skip any command-line directory with a name suffix that matches the
pattern
.IR GLOB .
When searching recursively, skip any subdirectory
whose base name matches
.IR GLOB .
Ignore any redundant trailing slashes in
.IR GLOB .
.TP
.BR \-I
Process a binary file as if it did not contain matching data; this is
equivalent to the
.B \-\^\-binary\-files=without-match
option.
.TP
.BI \-\^\-include= GLOB
Search only files whose base name matches
.I GLOB
(using wildcard matching as described under
.BR \-\^\-exclude ).
.TP
.BR \-r ", " \-\^\-recursive
Read all files under each directory, recursively,
following symbolic links only if they are on the command line.
Note that if no file operand is given, grep searches the working directory.
This is equivalent to the
.B "\-d recurse"
option.
.TP
.BR \-R ", " \-\^\-dereference\-recursive
Read all files under each directory, recursively.
Follow all symbolic links, unlike
.BR \-r .
.SS "Other Options"
.TP
.BR \-\^\-line\-buffered
Use line buffering on output.
This can cause a performance penalty.
.TP
.BR \-U ", " \-\^\-binary
Treat the file(s) as binary.
By default, under \s-1MS-DOS\s0 and \s-1MS\s0-Windows,
.BR grep
guesses whether a file is text or binary as described for the
.B \-\^\-binary\-files
option.
If
.BR grep
decides the file is a text file, it strips the CR characters from the
original file contents (to make regular expressions with
.B ^
and
.B $
work correctly).
Specifying
.B \-U
overrules this guesswork, causing all files to be read and passed to the
matching mechanism verbatim; if the file is a text file with CR/LF
pairs at the end of each line, this will cause some regular
expressions to fail.
This option has no effect on platforms
other than \s-1MS-DOS\s0 and \s-1MS\s0-Windows.
.TP
.BR \-z ", " \-\^\-null\-data
Treat input and output data as sequences of lines, each terminated by
a zero byte (the ASCII NUL character) instead of a newline.
Like the
.B \-Z
or
.B \-\^\-null
option, this option can be used with commands like
.B sort -z
to process arbitrary file names.
.
.SH "REGULAR EXPRESSIONS"
A regular expression is a pattern that describes a set of strings.
Regular expressions are constructed analogously to arithmetic
expressions, by using various operators to combine smaller expressions.
.PP
.B grep
understands three different versions of regular expression syntax:
\*(lqbasic\*(rq (BRE), \*(lqextended\*(rq (ERE) and \*(lqperl\*(rq (PCRE).
In
.RB "\s-1GNU\s0\ " grep ,
there is no difference in available functionality between basic and
extended syntaxes.
In other implementations, basic regular expressions are less powerful.
The following description applies to extended regular expressions;
differences for basic regular expressions are summarized afterwards.
Perl-compatible regular expressions give additional functionality, and are
documented in pcresyntax(3) and pcrepattern(3), but work only if
PCRE is available in the system.
.PP
The fundamental building blocks are the regular expressions
that match a single character.
Most characters, including all letters and digits,
are regular expressions that match themselves.
Any meta-character with special meaning
may be quoted by preceding it with a backslash.
.PP
The period
.B .\&amp;
matches any single character.
.SS "Character Classes and Bracket Expressions"
A
.I "bracket expression"
is a list of characters enclosed by
.B [
and
.BR ] .
It matches any single
character in that list; if the first character of the list
is the caret
.B ^
then it matches any character
.I not
in the list.
For example, the regular expression
.B [0123456789]
matches any single digit.
.PP
Within a bracket expression, a
.I "range expression"
consists of two characters separated by a hyphen.
It matches any single character that sorts between the two characters,
inclusive, using the locale's collating sequence and character set.
For example, in the default C locale,
.B [a\-d]
is equivalent to
.BR [abcd] .
Many locales sort characters in dictionary order, and in these locales
.B [a\-d]
is typically not equivalent to
.BR [abcd] ;
it might be equivalent to
.BR [aBbCcDd] ,
for example.
To obtain the traditional interpretation of bracket expressions,
you can use the C locale by setting the
.B LC_ALL
environment variable to the value
.BR C .
.PP
Finally, certain named classes of characters are predefined within
bracket expressions, as follows.
Their names are self explanatory, and they are
.BR [:alnum:] ,
.BR [:alpha:] ,
.BR [:cntrl:] ,
.BR [:digit:] ,
.BR [:graph:] ,
.BR [:lower:] ,
.BR [:print:] ,
.BR [:punct:] ,
.BR [:space:] ,
.BR [:upper:] ,
and
.BR [:xdigit:].
For example,
.B [[:alnum:]]
means the character class of numbers and
letters in the current locale. In the C locale and \s-1ASCII\s0
character set encoding, this is the same as
.BR [0\-9A\-Za\-z] .
(Note that the brackets in these class names are part of the symbolic
names, and must be included in addition to the brackets delimiting
the bracket expression.)
Most meta-characters lose their special meaning inside bracket expressions.
To include a literal
.B ]
place it first in the list.
Similarly, to include a literal
.B ^
place it anywhere but first.
Finally, to include a literal
.B \-
place it last.
.SS Anchoring
The caret
.B ^
and the dollar sign
.B $
are meta-characters that respectively match the empty string at the
beginning and end of a line.
.SS "The Backslash Character and Special Expressions"
The symbols
.B \e&lt;
and
.B \e&gt;
respectively match the empty string at the beginning and end of a word.
The symbol
.B \eb
matches the empty string at the edge of a word,
and
.B \eB
matches the empty string provided it's
.I not
at the edge of a word.
The symbol
.B \ew
is a synonym for
.B [_[:alnum:]]
and
.B \eW
is a synonym for
.BR [^_[:alnum:]] .
.SS Repetition
A regular expression may be followed by one of several repetition operators:
.PD 0
.TP
.B ?
The preceding item is optional and matched at most once.
.TP
.B *
The preceding item will be matched zero or more times.
.TP
.B +
The preceding item will be matched one or more times.
.TP
.BI { n }
The preceding item is matched exactly
.I n
times.
.TP
.BI { n ,}
The preceding item is matched
.I n
or more times.
.TP
.BI {, m }
The preceding item is matched at most
.I m
times.
This is a \s-1GNU\s0 extension.
.TP
.BI { n , m }
The preceding item is matched at least
.I n
times, but not more than
.I m
times.
.PD
.SS Concatenation
Two regular expressions may be concatenated; the resulting
regular expression matches any string formed by concatenating
two substrings that respectively match the concatenated
expressions.
.SS Alternation
Two regular expressions may be joined by the infix operator
.BR | ;
the resulting regular expression matches any string matching
either alternate expression.
.SS Precedence
Repetition takes precedence over concatenation, which in turn
takes precedence over alternation.
A whole expression may be enclosed in parentheses
to override these precedence rules and form a subexpression.
.SS "Back References and Subexpressions"
The back-reference
.BI \e n\c
\&amp;, where
.I n
is a single digit, matches the substring
previously matched by the
.IR n th
parenthesized subexpression of the regular expression.
.SS "Basic vs Extended Regular Expressions"
In basic regular expressions the meta-characters
.BR ? ,
.BR + ,
.BR { ,
.BR | ,
.BR ( ,
and
.BR )
lose their special meaning; instead use the backslashed
versions
.BR \e? ,
.BR \e+ ,
.BR \e{ ,
.BR \e| ,
.BR \e( ,
and
.BR \e) .
.
.SH "ENVIRONMENT VARIABLES"
The behavior of
.B grep
is affected by the following environment variables.
.PP
The locale for category
.BI LC_ foo
is specified by examining the three environment variables
.BR LC_ALL ,
.BR LC_\fIfoo\fP ,
.BR LANG ,
in that order.
The first of these variables that is set specifies the locale.
For example, if
.B LC_ALL
is not set, but
.B LC_MESSAGES
is set to
.BR pt_BR ,
then the Brazilian Portuguese locale is used for the
.B LC_MESSAGES
category.
The C locale is used if none of these environment variables are set,
if the locale catalog is not installed, or if
.B grep
was not compiled with national language support (\s-1NLS\s0).
The shell command
.B "locale \-a"
lists locales that are currently available.
.TP
.B GREP_OPTIONS
This variable specifies default options
to be placed in front of any explicit options.
As this causes problems when writing portable scripts,
this feature will be removed in a future release of
.BR grep ,
and
.B grep
warns if it is used.
Please use an alias or script instead.
.TP
.B GREP_COLOR
This variable specifies the color used to highlight matched (non-empty) text.
It is deprecated in favor of
.BR GREP_COLORS ,
but still supported.
The
.BR mt ,
.BR ms ,
and
.B mc
capabilities of
.B GREP_COLORS
have priority over it.
It can only specify the color used to highlight
the matching non-empty text in any matching line
(a selected line when the
.B -v
command-line option is omitted,
or a context line when
.B -v
is specified).
The default is
.BR 01;31 ,
which means a bold red foreground text on the terminal's default background.
.TP
.B GREP_COLORS
Specifies the colors and other attributes
used to highlight various parts of the output.
Its value is a colon-separated list of capabilities
that defaults to
.B ms=01;31:mc=01;31:sl=:cx=:fn=35:ln=32:bn=32:se=36
with the
.B rv
and
.B ne
boolean capabilities omitted (i.e., false).
Supported capabilities are as follows.
.RS
.TP
.B sl=
SGR substring for whole selected lines
(i.e.,
matching lines when the
.B \-v
command-line option is omitted,
or non-matching lines when
.B \-v
is specified).
If however the boolean
.B rv
capability
and the
.B \-v
command-line option are both specified,
it applies to context matching lines instead.
The default is empty (i.e., the terminal's default color pair).
.TP
.B cx=
SGR substring for whole context lines
(i.e.,
non-matching lines when the
.B \-v
command-line option is omitted,
or matching lines when
.B \-v
is specified).
If however the boolean
.B rv
capability
and the
.B \-v
command-line option are both specified,
it applies to selected non-matching lines instead.
The default is empty (i.e., the terminal's default color pair).
.TP
.B rv
Boolean value that reverses (swaps) the meanings of
the
.B sl=
and
.B cx=
capabilities
when the
.B \-v
command-line option is specified.
The default is false (i.e., the capability is omitted).
.TP
.B mt=01;31
SGR substring for matching non-empty text in any matching line
(i.e.,
a selected line when the
.B \-v
command-line option is omitted,
or a context line when
.B \-v
is specified).
Setting this is equivalent to setting both
.B ms=
and
.B mc=
at once to the same value.
The default is a bold red text foreground over the current line background.
.TP
.B ms=01;31
SGR substring for matching non-empty text in a selected line.
(This is only used when the
.B \-v
command-line option is omitted.)
The effect of the
.B sl=
(or
.B cx=
if
.BR rv )
capability remains active when this kicks in.
The default is a bold red text foreground over the current line background.
.TP
.B mc=01;31
SGR substring for matching non-empty text in a context line.
(This is only used when the
.B \-v
command-line option is specified.)
The effect of the
.B cx=
(or
.B sl=
if
.BR rv )
capability remains active when this kicks in.
The default is a bold red text foreground over the current line background.
.TP
.B fn=35
SGR substring for file names prefixing any content line.
The default is a magenta text foreground over the terminal's default background.
.TP
.B ln=32
SGR substring for line numbers prefixing any content line.
The default is a green text foreground over the terminal's default background.
.TP
.B bn=32
SGR substring for byte offsets prefixing any content line.
The default is a green text foreground over the terminal's default background.
.TP
.B se=36
SGR substring for separators that are inserted
between selected line fields
.RB ( : ),
between context line fields,
.RB ( \- ),
and between groups of adjacent lines when nonzero context is specified
.RB ( \-\^\- ).
The default is a cyan text foreground over the terminal's default background.
.TP
.B ne
Boolean value that prevents clearing to the end of line
using Erase in Line (EL) to Right
.RB ( \\\\\\33[K )
each time a colorized item ends.
This is needed on terminals on which EL is not supported.
It is otherwise useful on terminals
for which the
.B back_color_erase
.RB ( bce )
boolean terminfo capability does not apply,
when the chosen highlight colors do not affect the background,
or when EL is too slow or causes too much flicker.
The default is false (i.e., the capability is omitted).
.PP
Note that boolean capabilities have no
.BR = ...
part.
They are omitted (i.e., false) by default and become true when specified.
.PP
See the Select Graphic Rendition (SGR) section
in the documentation of the text terminal that is used
for permitted values and their meaning as character attributes.
These substring values are integers in decimal representation
and can be concatenated with semicolons.
.B grep
takes care of assembling the result
into a complete SGR sequence
.RB ( \\\\\\33[ ... m ).
Common values to concatenate include
.B 1
for bold,
.B 4
for underline,
.B 5
for blink,
.B 7
for inverse,
.B 39
for default foreground color,
.B 30
to
.B 37
for foreground colors,
.B 90
to
.B 97
for 16-color mode foreground colors,
.B 38;5;0
to
.B 38;5;255
for 88-color and 256-color modes foreground colors,
.B 49
for default background color,
.B 40
to
.B 47
for background colors,
.B 100
to
.B 107
for 16-color mode background colors, and
.B 48;5;0
to
.B 48;5;255
for 88-color and 256-color modes background colors.
.RE
.TP
\fBLC_ALL\fP, \fBLC_COLLATE\fP, \fBLANG\fP
These variables specify the locale for the
.B LC_COLLATE
category,
which determines the collating sequence
used to interpret range expressions like
.BR [a\-z] .
.TP
\fBLC_ALL\fP, \fBLC_CTYPE\fP, \fBLANG\fP
These variables specify the locale for the
.B LC_CTYPE
category,
which determines the type of characters,
e.g., which characters are whitespace.
This category also determines the character encoding, that is, whether
text is encoded in UTF-8, ASCII, or some other encoding.  In the C or
POSIX locale, all characters are encoded as a single byte and every
byte is a valid character.
.TP
\fBLC_ALL\fP, \fBLC_MESSAGES\fP, \fBLANG\fP
These variables specify the locale for the
.B LC_MESSAGES
category,
which determines the language that
.B grep
uses for messages.
The default C locale uses American English messages.
.TP
.B POSIXLY_CORRECT
If set,
.B grep
behaves as \s-1POSIX\s0 requires; otherwise,
.B grep
behaves more like other \s-1GNU\s0 programs.
\s-1POSIX\s0 requires that options that follow file names must be
treated as file names; by default, such options are permuted to the
front of the operand list and are treated as options.
Also, \s-1POSIX\s0 requires that unrecognized options be diagnosed as
\*(lqillegal\*(rq, but since they are not really against the law the default
is to diagnose them as \*(lqinvalid\*(rq.
.B POSIXLY_CORRECT
also disables \fB_\fP\fIN\fP\fB_GNU_nonoption_argv_flags_\fP,
described below.
.TP
\fB_\fP\fIN\fP\fB_GNU_nonoption_argv_flags_\fP
(Here
.I N
is
.BR grep 's
numeric process ID.)  If the
.IR i th
character of this environment variable's value is
.BR 1 ,
do not consider the
.IR i th
operand of
.B grep
to be an option, even if it appears to be one.
A shell can put this variable in the environment for each command it runs,
specifying which operands are the results of file name wildcard
expansion and therefore should not be treated as options.
This behavior is available only with the \s-1GNU\s0 C library, and only
when
.B POSIXLY_CORRECT
is not set.
.
.SH "EXIT STATUS"
Normally the exit status is 0 if a line is selected, 1 if no lines
were selected, and 2 if an error occurred.  However, if the
.B \-q
or
.B \-\^\-quiet
or
.B \-\^\-silent
is used and a line is selected, the exit status is 0 even if an error
occurred.
.
.SH COPYRIGHT
Copyright 1998-2000, 2002, 2005-2017 Free Software Foundation, Inc.
.PP
This is free software;
see the source for copying conditions.
There is NO warranty;
not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.
.SH BUGS
.SS "Reporting Bugs"
Email bug reports to
.MTO bug-grep@gnu.org "the bug-reporting address" .
An
.URL http://lists.gnu.org/mailman/listinfo/bug-grep "email archive"
and a
.URL http://debbugs.gnu.org/cgi/pkgreport.cgi?package=grep "bug tracker"
are available.
.SS "Known Bugs"
Large repetition counts in the
.BI { n , m }
construct may cause
.B grep
to use lots of memory.
In addition,
certain other obscure regular expressions require exponential time
and space, and may cause
.B grep
to run out of memory.
.PP
Back-references are very slow, and may require exponential time.
.
.SH "SEE ALSO"
.SS "Regular Manual Pages"
awk(1), cmp(1), diff(1), find(1), gzip(1),
perl(1), sed(1), sort(1), xargs(1), zgrep(1),
read(2),
pcre(3), pcresyntax(3), pcrepattern(3),
terminfo(5),
glob(7), regex(7).
.SS "\s-1POSIX\s0 Programmer's Manual Page"
grep(1p).
.SS "Full Documentation"
A
.URL http://www.gnu.org/software/grep/manual/ "complete manual"
is available.
If the
.B info
and
.B grep
programs are properly installed at your site, the command
.IP
.B info grep
.PP
should give you access to the complete manual.
.
.SH NOTES
This man page is maintained only fitfully;
the full documentation is often more up-to-date.
.\" Work around problems with some troff -man implementations.
.br
'\" et
.TH HASH "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
hash
\(em remember or report utility locations
.SH SYNOPSIS
.LP
.nf
hash \fB[\fIutility\fR...\fB]\fR
.P
hash \(mir
.fi
.SH DESCRIPTION
The
.IR hash
utility shall affect the way the current shell environment remembers
the locations of utilities found as described in
.IR "Section 2.9.1.1" ", " "Command Search and Execution".
Depending on the arguments specified, it shall add utility locations to
its list of remembered locations or it shall purge the contents of the
list. When no arguments are specified, it shall report on the contents
of the list.
.P
Utilities provided as built-ins to the shell shall not be reported by
.IR hash .
.SH OPTIONS
The
.IR hash
utility shall conform to the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 12.2" ", " "Utility Syntax Guidelines".
.P
The following option shall be supported:
.IP "\fB\(mir\fP" 10
Forget all previously remembered utility locations.
.SH OPERANDS
The following operand shall be supported:
.IP "\fIutility\fR" 10
The name of a utility to be searched for and added to the list of
remembered locations. If
.IR utility
contains one or more
&lt;slash&gt;
characters, the results are unspecified.
.SH STDIN
Not used.
.SH "INPUT FILES"
None.
.SH "ENVIRONMENT VARIABLES"
The following environment variables shall affect the execution of
.IR hash :
.IP "\fILANG\fP" 10
Provide a default value for the internationalization variables that are
unset or null. (See the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 8.2" ", " "Internationalization Variables"
for the precedence of internationalization variables used to determine
the values of locale categories.)
.IP "\fILC_ALL\fP" 10
If set to a non-empty string value, override the values of all the
other internationalization variables.
.IP "\fILC_CTYPE\fP" 10
Determine the locale for the interpretation of sequences of bytes of
text data as characters (for example, single-byte as opposed to
multi-byte characters in arguments).
.IP "\fILC_MESSAGES\fP" 10
.br
Determine the locale that should be used to affect the format and
contents of diagnostic messages written to standard error.
.IP "\fINLSPATH\fP" 10
Determine the location of message catalogs for the processing of
.IR LC_MESSAGES .
.IP "\fIPATH\fP" 10
Determine the location of
.IR utility ,
as described in the Base Definitions volume of POSIX.1\(hy2008,
.IR "Chapter 8" ", " "Environment Variables".
.SH "ASYNCHRONOUS EVENTS"
Default.
.SH STDOUT
The standard output of
.IR hash
shall be used when no arguments are specified. Its format is
unspecified, but includes the pathname of each utility in the list of
remembered locations for the current shell environment. This list
shall consist of those utilities named in previous
.IR hash
invocations that have been invoked, and may contain those invoked and
found through the normal command search process.
.SH STDERR
The standard error shall be used only for diagnostic messages.
.SH "OUTPUT FILES"
None.
.SH "EXTENDED DESCRIPTION"
None.
.SH "EXIT STATUS"
The following exit values shall be returned:
.IP "\00" 6
Successful completion.
.IP &gt;0 6
An error occurred.
.SH "CONSEQUENCES OF ERRORS"
Default.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
Since
.IR hash
affects the current shell execution environment, it is always provided
as a shell regular built-in. If it is called in a separate utility
execution environment, such as one of the following:
.sp
.RS 4
.nf
\fB
nohup hash \(mir
find . \(mitype f | xargs hash
.fi \fR
.P
.RE
.P
it does not affect the command search process of the caller's
environment.
.P
The
.IR hash
utility may be implemented as an alias\(emfor example,
.IR alias
.BR "\(mit\ \(mi" ,
in which case utilities found through normal command search are not
listed by the
.IR hash
command.
.P
The effects of
.IR hash
.BR \(mir
can also be achieved portably by resetting the value of
.IR PATH ;
in the simplest form, this can be:
.sp
.RS 4
.nf
\fB
PATH="$PATH"
.fi \fR
.P
.RE
.P
The use of
.IR hash
with
.IR utility
names is unnecessary for most applications, but may provide a
performance improvement on a few implementations; normally, the hashing
process is included by default.
.SH EXAMPLES
None.
.SH RATIONALE
None.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "Section 2.9.1.1" ", " "Command Search and Execution"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "Chapter 8" ", " "Environment Variables",
.IR "Section 12.2" ", " "Utility Syntax Guidelines"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
'\" t -*- coding: UTF-8 -*-
.\"
.\" Copyright (C) 2014 Marko Myllynen &lt;myllynen@redhat.com&gt;
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" &lt;http://www.gnu.org/licenses/&gt;.
.\" %%%LICENSE_END
.\"
.TH ICONV 1 2014-07-08 "GNU" "Linux User Manual"
.SH NAME
iconv \- convert text from one character encoding to another
.SH SYNOPSIS
.B iconv
.RI [ options ]
.RI "[\-f " from-encoding "]"
.RI "[\-t " to-encoding "]"
.RI [ inputfile ]...
.SH DESCRIPTION
The
.B iconv
program reads in text in one encoding and outputs the text in another
encoding.
If no input files are given, or if it is given as a dash (\-),
.B iconv
reads from standard input.
If no output file is given,
.B iconv
writes to standard output.
.PP
If no
.I from-encoding
is given, the default is derived
from the current locale's character encoding.
If no
.I to-encoding
is given, the default is derived
from the current locale's character
encoding.
.SH OPTIONS
.TP
.BI \-f " from-encoding" "\fR, \fP\-\-from\-code=" from-encoding
Use
.I from-encoding
for input characters.
.TP
.BI \-t " to-encoding" "\fR, \fP\-\-to\-code=" to-encoding
Use
.I to-encoding
for output characters.

If the string
.BR //IGNORE
is appended to
.IR to-encoding ,
characters that cannot be converted are discarded and an error is
printed after conversion.

If the string
.BR //TRANSLIT
is appended to
.IR to-encoding ,
characters being converted are transliterated when needed and possible.
This means that when a character cannot be represented in the target
character set, it can be approximated through one or several similar
looking characters.
Characters that are outside of the target character set and cannot be
transliterated are replaced with a question mark (?) in the output.
.TP
.BR \-l ", " \-\-list
List all known character set encodings.
.TP
.B "\-c"
Silently discard characters that cannot be converted instead of
terminating when encountering such characters.
.TP
.BI \-o " outputfile" "\fR, \fP\-\-output=" outputfile
Use
.I outputfile
for output.
.TP
.BR \-s ", " \-\-silent
This option is ignored; it is provided only for compatibility.
.TP
.B "\-\-verbose"
Print progress information on standard error when processing
multiple files.
.TP
.BR \-? ", " \-\-help
Print a usage summary and exit.
.TP
.B "\-\-usage"
Print a short usage summary and exit.
.TP
.BR \-V ", " \-\-version
Print the version number, license, and disclaimer of warranty for
.BR iconv .
.SH EXIT STATUS
Zero on success, non-zero on errors.
.SH ENVIRONMENT
Internally, the
.B iconv
program uses the
.BR iconv (3)
function which in turn uses
.I gconv
modules (dynamically loaded shared libraries)
to convert to and from a character set.
Before calling
.BR iconv (3),
the
.B iconv
program must first allocate a conversion descriptor using
.BR iconv_open (3).
The operation of the latter function is influenced by the setting of the
.B GCONV_PATH
environment variable:
.IP * 3
If
.B GCONV_PATH
is not set,
.BR iconv_open (3)
loads the system gconv module configuration cache file created by
.BR iconvconfig (8)
and then, based on the configuration,
loads the gconv modules needed to perform the conversion.
If the system gconv module configuration cache file is not available
then the system gconv module configuration file is used.
.IP *
If
.B GCONV_PATH
is defined (as a colon-separated list of pathnames),
the system gconv module configuration cache is not used.
Instead,
.BR iconv_open (3)
first tries to load the configuration files by searching the directories in
.BR GCONV_PATH
in order,
followed by the system default gconv module configuration file.
If a directory does not contain a gconv module configuration file,
any gconv modules that it may contain are ignored.
If a directory contains a gconv module configuration file
and it is determined that a module needed for this conversion is
available in the directory,
then the needed module is loaded from that directory,
the order being such that the first suitable module found in
.B GCONV_PATH
is used.
This allows users to use custom modules and even replace system-provided
modules by providing such modules in
.B GCONV_PATH
directories.
.SH FILES
.TP
.I /usr/lib/gconv
Usual default gconv module path.
.TP
.I /usr/lib/gconv/gconv\-modules
Usual system default gconv module configuration file.
.TP
.I /usr/lib/gconv/gconv\-modules.cache
Usual system gconv module configuration cache.
.SH CONFORMING TO
POSIX.1-2001.
.SH EXAMPLE
Convert text from the ISO 8859-15 character encoding to UTF-8:

.in +4n
.nf
$ \fBiconv \-f ISO\-8859\-15 \-t UTF\-8 &lt; input.txt &gt; output.txt\fP
.fi
.in
.PP
The next example converts from UTF-8 to ASCII, transliterating when
possible:

.in +4n
.nf
$ \fBecho abc ß α € àḃç | iconv \-f UTF\-8 \-t ASCII//TRANSLIT\fP
abc ss ? EUR abc
.fi
.in
.SH SEE ALSO
.BR locale (1),
.BR iconv (3),
.BR nl_langinfo (3),
.BR charsets (7),
.BR iconvconfig (8)
.SH COLOPHON
This page is part of release 4.11 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.
.TH ID "1" "March 2017" "GNU coreutils 8.27" "User Commands"
.SH NAME
id \- print real and effective user and group IDs
.SH SYNOPSIS
.B id
[\fI\,OPTION\/\fR]... [\fI\,USER\/\fR]
.SH DESCRIPTION
.\" Add any additional description here
.PP
Print user and group information for the specified USER,
or (when USER omitted) for the current user.
.TP
\fB\-a\fR
ignore, for compatibility with other versions
.TP
\fB\-Z\fR, \fB\-\-context\fR
print only the security context of the process
.TP
\fB\-g\fR, \fB\-\-group\fR
print only the effective group ID
.TP
\fB\-G\fR, \fB\-\-groups\fR
print all group IDs
.TP
\fB\-n\fR, \fB\-\-name\fR
print a name instead of a number, for \fB\-ugG\fR
.TP
\fB\-r\fR, \fB\-\-real\fR
print the real ID instead of the effective ID, with \fB\-ugG\fR
.TP
\fB\-u\fR, \fB\-\-user\fR
print only the effective user ID
.TP
\fB\-z\fR, \fB\-\-zero\fR
delimit entries with NUL characters, not whitespace;
.IP
not permitted in default format
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-\-version\fR
output version information and exit
.PP
Without any OPTION, print some useful set of identified information.
.SH AUTHOR
Written by Arnold Robbins and David MacKenzie.
.SH "REPORTING BUGS"
GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt;
.br
Report id translation bugs to &lt;http://translationproject.org/team/&gt;
.SH COPYRIGHT
Copyright \(co 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
Full documentation at: &lt;http://www.gnu.org/software/coreutils/id&gt;
.br
or available locally via: info \(aq(coreutils) id invocation\(aq
.\" Copyright 2002 Andre C. Mazzone (linuxdev@karagee.com)
.\" May be distributed under the GNU General Public License
.TH IPCRM "1" "July 2014" "util-linux" "User Commands"
.SH NAME
ipcrm \- remove certain IPC resources
.SH SYNOPSIS
.B ipcrm
[options]
.sp
.B ipcrm
.RB { shm | msg | sem }
.IR id ...
.SH DESCRIPTION
.B ipcrm
removes System V inter-process communication (IPC) objects
and associated data structures from the system.
In order to delete such objects, you must be superuser, or
the creator or owner of the object.
.PP
System V IPC objects are of three types: shared memory,
message queues, and semaphores.
Deletion of a message queue or semaphore object is immediate
(regardless of whether any process still holds an IPC
identifier for the object).
A shared memory object is only removed
after all currently attached processes have detached
.RB ( shmdt (2))
the object from their virtual address space.
.PP
Two syntax styles are supported.  The old Linux historical syntax specifies
a three-letter keyword indicating which class of object is to be deleted,
followed by one or more IPC identifiers for objects of this type.
.PP
The SUS-compliant syntax allows the specification of
zero or more objects of all three types in a single command line,
with objects specified either by key or by identifier (see below).
Both keys and identifiers may be specified in decimal, hexadecimal
(specified with an initial '0x' or '0X'), or octal (specified with
an initial '0').
.PP
The details of the removes are described in
.BR shmctl (2),
.BR msgctl (2),
and
.BR semctl (2).
The identifiers and keys can be found by using
.BR ipcs (1).
.SH OPTIONS
.TP
\fB-a\fR, \fB\-\-all\fR [\fBshm\fR] [\fBmsg\fR] [\fBsem\fR]
Remove all resources.  When an option argument is provided, the removal is
performed only for the specified resource types.  \fIWarning!\fR  Do not use
.B \-a
if you are unsure how the software using the resources might react to missing
objects.  Some programs create these resources at startup and may not have
any code to deal with an unexpected disappearance.
.TP
.BR \-M , " \-\-shmem\-key " \fIshmkey
Remove the shared memory segment created with
.I shmkey
after the last detach is performed.
.TP
.BR \-m , " \-\-shmem\-id " \fIshmid
Remove the shared memory segment identified by
.I shmid
after the last detach is performed.
.TP
.BR \-Q , " \-\-queue\-key " \fImsgkey
Remove the message queue created with
.IR msgkey .
.TP
.BR \-q , " \-\-queue\-id " \fImsgid
Remove the message queue identified by
.IR msgid .
.TP
.BR \-S , " \-\-semaphore\-key " \fIsemkey
Remove the semaphore created with
.IR semkey .
.TP
.BR \-s , " \-\-semaphore\-id " \fIsemid
Remove the semaphore identified by
.IR semid .
.TP
.BR \-V , " \-\-version"
Display version information and exit.
.TP
.BR \-h , " \-\-help"
Display help text and exit.
.SH NOTES
In its first Linux implementation, \fBipcrm\fR used the deprecated syntax
shown in the second line of the
.BR SYNOPSIS .
Functionality present in other *nix implementations of \fBipcrm\fR has since
been added, namely the ability to delete resources by key (not just
identifier), and to respect the same command-line syntax.  For backward
compatibility the previous syntax is still supported.
.\" .SH AUTHORS
.\" Andre C. Mazzone (linuxdev@karagee.com)
.\" .br
.\" Krishna Balasubramanian (balasub@cis.ohio-state.edu)
.SH SEE ALSO
.nh
.BR ipcmk (1),
.BR ipcs (1),
.BR msgctl (2),
.BR msgget (2),
.BR semctl (2),
.BR semget (2),
.BR shmctl (2),
.BR shmdt (2),
.BR shmget (2),
.BR ftok (3)
.SH AVAILABILITY
The ipcrm command is part of the util-linux package and is available from
.UR ftp://\:ftp.kernel.org\:/pub\:/linux\:/utils\:/util-linux/
Linux Kernel Archive
.UE .
.\" Copyright 1993 Rickard E. Faith (faith@cs.unc.edu)
.\" May be distributed under the GNU General Public License
.TH IPCS "1" "July 2014" "util-linux" "User Commands"
.SH NAME
ipcs \- show information on IPC facilities
.SH SYNOPSIS
.B ipcs
[options]
.SH DESCRIPTION
.B ipcs
shows information on the inter-process communication facilities
for which the calling process has read access.
By default it shows information about all three resources:
shared memory segments, message queues, and semaphore arrays.
.SH OPTIONS
.TP
\fB\-i\fR, \fB\-\-id\fR \fIid\fR
Show full details on just the one resource element identified by
.IR id .
This option needs to be combined with one of the three resource options:
.BR \-m ,
.BR \-q " or"
.BR \-s .
.TP
\fB\-h\fR, \fB\-\-help\fR
Display help text and exit.
.TP
\fB\-V\fR, \fB\-\-version\fR
Display version information and exit.
.SS "Resource options"
.TP
\fB\-m\fR, \fB\-\-shmems\fR
Write information about active shared memory segments.
.TP
\fB\-q\fR, \fB\-\-queues\fR
Write information about active message queues.
.TP
\fB\-s\fR, \fB\-\-semaphores\fR
Write information about active semaphore sets.
.TP
\fB\-a\fR, \fB\-\-all\fR
Write information about all three resources (default).
.SS "Output formats"
Of these options only one takes effect: the last one specified.
.TP
\fB\-c\fR, \fB\-\-creator\fR
Show creator and owner.
.TP
\fB\-l\fR, \fB\-\-limits\fR
Show resource limits.
.TP
\fB\-p\fR, \fB\-\-pid\fR
Show PIDs of creator and last operator.
.TP
\fB\-t\fR, \fB\-\-time\fR
Write time information.  The time of the last control operation that changed
the access permissions for all facilities, the time of the last
.BR msgsnd (2)
and
.BR msgrcv (2)
operations on message queues, the time of the last
.BR shmat (2)
and
.BR shmdt (2)
operations on shared memory, and the time of the last
.BR semop (2)
operation on semaphores.
.TP
\fB\-u\fR, \fB\-\-summary\fR
Show status summary.
.SS "Representation"
These affect only the \fB\-l\fR (\fB\-\-limits\fR) option.
.TP
\fB\-b\fR, \fB\-\-bytes\fR
Print sizes in bytes.
.TP
.B \-\-human
Print sizes in human-readable format.
.SH SEE ALSO
.BR ipcmk (1),
.BR ipcrm (1),
.BR msgrcv (2),
.BR msgsnd (2),
.BR semget (2),
.BR semop (2),
.BR shmat (2),
.BR shmdt (2),
.BR shmget (2)
.SH CONFORMING TO
The Linux ipcs utility is not fully compatible to the POSIX ipcs utility.
The Linux version does not support the POSIX
.BR \-a ,
.B \-b
and
.B \-o
options, but does support the
.B \-l
and
.B \-u
options not defined by POSIX.  A portable application shall not use the
.BR \-a ,
.BR \-b ,
.BR \-o ,
.BR \-l ,
and
.B \-u
options.
.SH AUTHOR
.UR balasub@cis.ohio-state.edu
Krishna Balasubramanian
.UE
.SH AVAILABILITY
The ipcs command is part of the util-linux package and is available from
.UR ftp://\:ftp.kernel.org\:/pub\:/linux\:/utils\:/util-linux/
Linux Kernel Archive
.UE .
'\" et
.TH JOBS "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
jobs
\(em display status of jobs in the current session
.SH SYNOPSIS
.LP
.nf
jobs \fB[\fR\(mil|\(mip\fB] [\fIjob_id\fR...\fB]\fR
.fi
.SH DESCRIPTION
The
.IR jobs
utility shall display the status of jobs that were started in the
current shell environment; see
.IR "Section 2.12" ", " "Shell Execution Environment".
.P
When
.IR jobs
reports the termination status of a job, the shell shall remove its
process ID from the list of those ``known in the current shell
execution environment''; see
.IR "Section 2.9.3.1" ", " "Examples".
.SH OPTIONS
The
.IR jobs
utility shall conform to the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 12.2" ", " "Utility Syntax Guidelines".
.P
The following options shall be supported:
.IP "\fB\(mil\fP" 10
(The letter ell.) Provide more information about each job listed. This
information shall include the job number, current job, process group
ID, state, and the command that formed the job.
.IP "\fB\(mip\fP" 10
Display only the process IDs for the process group leaders of the
selected jobs.
.P
By default, the
.IR jobs
utility shall display the status of all stopped jobs, running
background jobs and all jobs whose status has changed and have not been
reported by the shell.
.SH OPERANDS
The following operand shall be supported:
.IP "\fIjob_id\fR" 10
Specifies the jobs for which the status is to be displayed. If no
.IR job_id
is given, the status information for all jobs shall be displayed. The
format of
.IR job_id
is described in the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 3.204" ", " "Job Control Job ID".
.SH STDIN
Not used.
.SH "INPUT FILES"
None.
.SH "ENVIRONMENT VARIABLES"
The following environment variables shall affect the execution of
.IR jobs :
.IP "\fILANG\fP" 10
Provide a default value for the internationalization variables that are
unset or null. (See the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 8.2" ", " "Internationalization Variables"
for the precedence of internationalization variables used to determine
the values of locale categories.)
.IP "\fILC_ALL\fP" 10
If set to a non-empty string value, override the values of all the
other internationalization variables.
.IP "\fILC_CTYPE\fP" 10
Determine the locale for the interpretation of sequences of bytes of
text data as characters (for example, single-byte as opposed to
multi-byte characters in arguments).
.IP "\fILC_MESSAGES\fP" 10
.br
Determine the locale that should be used to affect the format and
contents of diagnostic messages written to standard error and
informative messages written to standard output.
.IP "\fINLSPATH\fP" 10
Determine the location of message catalogs for the processing of
.IR LC_MESSAGES .
.SH "ASYNCHRONOUS EVENTS"
Default.
.SH STDOUT
If the
.BR \(mip
option is specified, the output shall consist of one line for each
process ID:
.sp
.RS 4
.nf
\fB
"%d\en", &lt;\fIprocess ID\fR&gt;
.fi \fR
.P
.RE
.P
Otherwise, if the
.BR \(mil
option is not specified, the output shall be a series of lines of the
form:
.sp
.RS 4
.nf
\fB
"[%d] %c %s %s\en", &lt;\fIjob-number\fR&gt;, &lt;\fIcurrent\fR&gt;, &lt;\fIstate\fR&gt;, &lt;\fIcommand\fR&gt;
.fi \fR
.P
.RE
.P
where the fields shall be as follows:
.IP "&lt;\fIcurrent\fP&gt;" 10
The character
.BR '\(pl' 
identifies the job that would be used as a default for the
.IR fg
or
.IR bg
utilities; this job can also be specified using the
.IR job_id
%+ or
.BR \(dq%%\(dq .
The character
.BR '\(mi' 
identifies the job that would become the default if the current default
job were to exit; this job can also be specified using the
.IR job_id
%\(mi. For other jobs, this field is a
&lt;space&gt;.
At most one job can be identified with
.BR '\(pl' 
and at most one job can be identified with
.BR '\(mi' .
If there is any suspended job, then the current job shall be a
suspended job. If there are at least two suspended jobs, then the
previous job also shall be a suspended job.
.IP "&lt;\fIjob-number\fP&gt;" 10
A number that can be used to identify the process group to the
.IR wait ,
.IR fg ,
.IR bg ,
and
.IR kill
utilities. Using these utilities, the job can be identified by
prefixing the job number with
.BR '%' .
.IP "&lt;\fIstate\fP&gt;" 10
One of the following strings (in the POSIX locale):
.RS 10 
.IP "\fBRunning\fR" 10
Indicates that the job has not been suspended by a signal and has not
exited.
.IP "\fBDone\fR" 10
Indicates that the job completed and returned exit status zero.
.IP "\fBDone\fR(\fIcode\fR)" 10
Indicates that the job completed normally and that it exited with the
specified non-zero exit status,
.IR code ,
expressed as a decimal number.
.IP "\fBStopped\fR" 10
Indicates that the job was suspended by the SIGTSTP signal.
.IP "\fBStopped\fR\ (\fBSIGTSTP\fR)" 10
.br
Indicates that the job was suspended by the SIGTSTP signal.
.IP "\fBStopped\fR\ (\fBSIGSTOP\fR)" 10
.br
Indicates that the job was suspended by the SIGSTOP signal.
.IP "\fBStopped\fR\ (\fBSIGTTIN\fR)" 10
.br
Indicates that the job was suspended by the SIGTTIN signal.
.IP "\fBStopped\fR\ (\fBSIGTTOU\fR)" 10
.br
Indicates that the job was suspended by the SIGTTOU signal.
.P
The implementation may substitute the string
.BR Suspended
in place of
.BR Stopped .
If the job was terminated by a signal, the format of &lt;\fIstate\fP&gt; is
unspecified, but it shall be visibly distinct from all of the other
&lt;\fIstate\fP&gt; formats shown here and shall indicate the name or
description of the signal causing the termination.
.RE
.IP "&lt;\fIcommand\fR&gt;" 10
The associated command that was given to the shell.
.P
If the
.BR \(mil
option is specified, a field containing the process group ID shall be
inserted before the &lt;\fIstate\fP&gt; field. Also, more processes in a
process group may be output on separate lines, using only the process
ID and &lt;\fIcommand\fP&gt; fields.
.SH STDERR
The standard error shall be used only for diagnostic messages.
.SH "OUTPUT FILES"
None.
.SH "EXTENDED DESCRIPTION"
None.
.SH "EXIT STATUS"
The following exit values shall be returned:
.IP "\00" 6
Successful completion.
.IP &gt;0 6
An error occurred.
.SH "CONSEQUENCES OF ERRORS"
Default.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
The
.BR \(mip
option is the only portable way to find out the process group of a job
because different implementations have different strategies for
defining the process group of the job. Usage such as $(\c
.IR jobs
.BR \(mip )
provides a way of referring to the process group of the job in an
implementation-independent way.
.P
The
.IR jobs
utility does not work as expected when it is operating in its own
utility execution environment because that environment has no
applicable jobs to manipulate. See the APPLICATION USAGE section for
.IR "\fIbg\fR\^".
For this reason,
.IR jobs
is generally implemented as a shell regular built-in.
.SH EXAMPLES
None.
.SH RATIONALE
Both
.BR \(dq%%\(dq 
and
.BR \(dq%+\(dq 
are used to refer to the current job. Both forms are of equal
validity\(emthe
.BR \(dq%%\(dq 
mirroring
.BR \(dq$$\(dq 
and
.BR \(dq%+\(dq 
mirroring the output of
.IR jobs .
Both forms reflect historical practice of the KornShell and the C shell
with job control.
.P
The job control features provided by
.IR bg ,
.IR fg ,
and
.IR jobs
are based on the KornShell. The standard developers examined the
characteristics of the C shell versions of these utilities and found
that differences exist. Despite widespread use of the C shell, the
KornShell versions were selected for this volume of POSIX.1\(hy2008 to maintain a degree of
uniformity with the rest of the KornShell features selected (such as
the very popular command line editing features).
.P
The
.IR jobs
utility is not dependent on the job control option, as are the
seemingly related
.IR bg
and
.IR fg
utilities because
.IR jobs
is useful for examining background jobs, regardless of the condition of
job control. When the user has invoked a
.IR set
.BR +m
command and job control has been turned off,
.IR jobs
can still be used to examine the background jobs associated with that
current session. Similarly,
.IR kill
can then be used to kill background jobs with
.IR kill
%&lt;\fIbackground job number\fP&gt;.
.P
The output for terminated jobs is left unspecified to accommodate
various historical systems. The following formats have been witnessed:
.IP " 1." 4
.BR Killed (\c
.IR "signal name" )
.IP " 2." 4
.IR "signal name"
.IP " 3." 4
.IR "signal name" (\c
.BR coredump )
.IP " 4." 4
.IR "signal description" \(mi
.BR "core dumped"
.P
Most users should be able to understand these formats, although it
means that applications have trouble parsing them.
.P
The calculation of job IDs was not described since this would suggest
an implementation, which may impose unnecessary restrictions.
.P
In an early proposal, a
.BR \(min
option was included to ``Display the status of jobs that have changed,
exited, or stopped since the last status report''. It was removed
because the shell always writes any changed status of jobs before each
prompt.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "Section 2.12" ", " "Shell Execution Environment",
.IR "\fIbg\fR\^",
.IR "\fIfg\fR\^",
.IR "\fIkill\fR\^",
.IR "\fIwait\fR\^"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 3.204" ", " "Job Control Job ID",
.IR "Chapter 8" ", " "Environment Variables",
.IR "Section 12.2" ", " "Utility Syntax Guidelines"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.
.TH JOIN "1" "March 2017" "GNU coreutils 8.27" "User Commands"
.SH NAME
join \- join lines of two files on a common field
.SH SYNOPSIS
.B join
[\fI\,OPTION\/\fR]... \fI\,FILE1 FILE2\/\fR
.SH DESCRIPTION
.\" Add any additional description here
.PP
For each pair of input lines with identical join fields, write a line to
standard output.  The default join field is the first, delimited by blanks.
.PP
When FILE1 or FILE2 (not both) is \-, read standard input.
.TP
\fB\-a\fR FILENUM
also print unpairable lines from file FILENUM, where
FILENUM is 1 or 2, corresponding to FILE1 or FILE2
.TP
\fB\-e\fR EMPTY
replace missing input fields with EMPTY
.TP
\fB\-i\fR, \fB\-\-ignore\-case\fR
ignore differences in case when comparing fields
.TP
\fB\-j\fR FIELD
equivalent to '\-1 FIELD \fB\-2\fR FIELD'
.TP
\fB\-o\fR FORMAT
obey FORMAT while constructing output line
.TP
\fB\-t\fR CHAR
use CHAR as input and output field separator
.TP
\fB\-v\fR FILENUM
like \fB\-a\fR FILENUM, but suppress joined output lines
.TP
\fB\-1\fR FIELD
join on this FIELD of file 1
.TP
\fB\-2\fR FIELD
join on this FIELD of file 2
.TP
\fB\-\-check\-order\fR
check that the input is correctly sorted, even
if all input lines are pairable
.TP
\fB\-\-nocheck\-order\fR
do not check that the input is correctly sorted
.TP
\fB\-\-header\fR
treat the first line in each file as field headers,
print them without trying to pair them
.TP
\fB\-z\fR, \fB\-\-zero\-terminated\fR
line delimiter is NUL, not newline
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-\-version\fR
output version information and exit
.PP
Unless \fB\-t\fR CHAR is given, leading blanks separate fields and are ignored,
else fields are separated by CHAR.  Any FIELD is a field number counted
from 1.  FORMAT is one or more comma or blank separated specifications,
each being 'FILENUM.FIELD' or '0'.  Default FORMAT outputs the join field,
the remaining fields from FILE1, the remaining fields from FILE2, all
separated by CHAR.  If FORMAT is the keyword 'auto', then the first
line of each file determines the number of fields output for each line.
.PP
Important: FILE1 and FILE2 must be sorted on the join fields.
E.g., use "sort \fB\-k\fR 1b,1" if 'join' has no options,
or use "join \fB\-t\fR ''" if 'sort' has no options.
Note, comparisons honor the rules specified by 'LC_COLLATE'.
If the input is not sorted and some lines cannot be joined, a
warning message will be given.
.SH AUTHOR
Written by Mike Haertel.
.SH "REPORTING BUGS"
GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt;
.br
Report join translation bugs to &lt;http://translationproject.org/team/&gt;
.SH COPYRIGHT
Copyright \(co 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
comm(1), uniq(1)
.PP
.br
Full documentation at: &lt;http://www.gnu.org/software/coreutils/join&gt;
.br
or available locally via: info \(aq(coreutils) join invocation\(aq
.\" Copyright 1994 Salvatore Valente (svalente@mit.edu)
.\" Copyright 1992 Rickard E. Faith (faith@cs.unc.edu)
.\" May be distributed under the GNU General Public License
.TH KILL 1 "July 2014" "util-linux" "User Commands"
.SH NAME
kill \- terminate a process
.SH SYNOPSIS
.B kill
.RB [ \- \fIsignal\fR| \-s
.IR signal | \fB-p\fP ]
.RB [ \-q
.IR value ]
.RB [ \-a ]
.RB [ \-\- ]
.IR pid | name ...
.br
.B kill \-l
.RI [ number ]
.RB "| " \-L
.SH DESCRIPTION
The command
.B kill
sends the specified \fIsignal\fR to the specified processes or process groups.
.PP
If no signal is specified, the TERM signal is sent.
The default action for this signal is to terminate the process.
This signal should be used in preference to the
KILL signal (number 9), since a process may install a handler for the
TERM signal in order to perform clean-up steps before terminating in
an orderly fashion.
If a process does not terminate after a TERM signal has been sent,
then the KILL signal may be used; be aware that the latter signal
cannot be caught, and so does not give the target process the opportunity
to perform any clean-up before terminating.
.PP
Most modern shells have a builtin kill command, with a usage rather similar to
that of the command described here.  The
.BR \-\-all ,
.BR \-\-pid ", and"
.BR \-\-queue
options, and the possibility to specify processes by command name, are local extensions.
.PP
If \fIsignal\fR is 0, then no actual signal is sent, but error checking is still performed.

.SH ARGUMENTS
The list of processes to be signaled can be a mixture of names and PIDs.
.TP
.I pid
Each
.I pid
can be one of four things:
.RS
.TP
.I n
where
.I n
is larger than 0.  The process with PID
.I n
is signaled.
.TP
.B 0
All processes in the current process group are signaled.
.TP
.B -1
All processes with a PID larger than 1 are signaled.
.TP
.BI - n
where
.I n
is larger than 1.  All processes in process group
.I n
are signaled.  When an argument of the form '-n' is given, and it is meant to
denote a process group, either a signal must be specified first, or the
argument must be preceded by a '--' option, otherwise it will be taken as the
signal to send.
.RE
.TP
.I name
All processes invoked using this \fIname\fR will be signaled.

.SH OPTIONS
.TP
\fB\-s\fR, \fB\-\-signal\fR \fIsignal\fR
The signal to send.  It may be given as a name or a number.
.TP
\fB\-l\fR, \fB\-\-list\fR [\fInumber\fR]
Print a list of signal names, or convert the given signal number to a name.
The signals can be found in
.I /usr/\:include/\:linux/\:signal.h
.TP
\fB\-L\fR, \fB\-\-table\fR
Similar to \fB\-l\fR, but it will print signal names and their corresponding
numbers.
.TP
\fB\-a\fR, \fB\-\-all\fR
Do not restrict the command-name-to-PID conversion to processes with the same
UID as the present process.
.TP
\fB\-p\fR, \fB\-\-pid\fR
Only print the process ID (PID) of the named processes, do not send any
signals.
.TP
\fB\-\-verbose\fR
Print PID(s) that will be signaled with kill along with the signal.
.TP
\fB\-q\fR, \fB\-\-queue\fR \fIvalue\fR
Use
.BR sigqueue (3)
rather than
.BR kill (2).
The
.I value
argument is an integer that is sent along with the signal.  If the
receiving process has installed a handler for this signal using the
.B SA_SIGINFO
flag to
.BR sigaction (2),
then it can obtain this data via the
.I si_sigval
field of the
.I siginfo_t
structure.

.SH NOTES
Although it is possible to specify the TID (thread ID, see
.BR gettid (2))
of one of the threads in a multithreaded process as the argument of
.BR kill ,
the signal is nevertheless directed to the process
(i.e., the entire thread group).
In other words, it is not possible to send a signal to an
explicitly selected thread in a multithreaded process.
The signal will be delivered to an arbitrarily selected thread
in the target process that is not blocking the signal.
For more details, see
.BR signal (7)
and the description of
.BR CLONE_THREAD
in
.BR clone (2).

.SH RETURN CODES
.B kill
has the following return codes:
.TP
.BR 0
success
.TP
.BR 1
failure
.TP
.BR 64
partial success (when more than one process specified)

.SH SEE ALSO
.BR bash (1),
.BR tcsh (1),
.BR sigaction (2),
.BR kill (2),
.BR sigqueue (3),
.BR signal (7)

.SH AUTHORS
.MT svalente@mit.edu
Salvatore Valente
.ME
.br
.MT kzak@redhat.com
Karel Zak
.ME
.br
.PP
The original version was taken from BSD 4.4.

.SH AVAILABILITY
The kill command is part of the util-linux package and is available from
.UR ftp://\:ftp.kernel.org\:/pub\:/linux\:/utils\:/util-linux/
Linux Kernel Archive
.UE .
'\" et
.TH LEX "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
lex
\(em generate programs for lexical tasks (\fBDEVELOPMENT\fP)
.SH SYNOPSIS
.LP
.nf
lex \fB[\fR\(mit\fB] [\fR\(min|\(miv\fB] [\fIfile\fR...\fB]\fR
.fi
.SH DESCRIPTION
The
.IR lex
utility shall generate C programs to be used in lexical processing of
character input, and that can be used as an interface to
.IR yacc .
The C programs shall be generated from
.IR lex
source code and conform to the ISO\ C standard, without depending on any undefined,
unspecified, or implementation-defined behavior, except in cases where
the code is copied directly from the supplied source, or in cases that
are documented by the implementation. Usually, the
.IR lex
utility shall write the program it generates to the file
.BR lex.yy.c ;
the state of this file is unspecified if
.IR lex
exits with a non-zero exit status. See the EXTENDED DESCRIPTION
section for a complete description of the
.IR lex
input language.
.SH OPTIONS
The
.IR lex
utility shall conform to the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 12.2" ", " "Utility Syntax Guidelines",
except for Guideline 9.
.P
The following options shall be supported:
.IP "\fB\(min\fP" 10
Suppress the summary of statistics usually written with the
.BR \(miv
option. If no table sizes are specified in the
.IR lex
source code and the
.BR \(miv
option is not specified, then
.BR \(min
is implied.
.IP "\fB\(mit\fP" 10
Write the resulting program to standard output instead of
.BR lex.yy.c .
.IP "\fB\(miv\fP" 10
Write a summary of
.IR lex
statistics to the standard output. (See the discussion of
.IR lex
table sizes in
.IR "Definitions in lex".)
If the
.BR \(mit
option is specified and
.BR \(min
is not specified, this report shall be written to standard error. If
table sizes are specified in the
.IR lex
source code, and if the
.BR \(min
option is not specified, the
.BR \(miv
option may be enabled.
.SH OPERANDS
The following operand shall be supported:
.IP "\fIfile\fR" 10
A pathname of an input file. If more than one such
.IR file
is specified, all files shall be concatenated to produce a single
.IR lex
program. If no
.IR file
operands are specified, or if a
.IR file
operand is
.BR '\(mi' ,
the standard input shall be used.
.SH STDIN
The standard input shall be used if no
.IR file
operands are specified, or if a
.IR file
operand is
.BR '\(mi' .
See INPUT FILES.
.SH "INPUT FILES"
The input files shall be text files containing
.IR lex
source code, as described in the EXTENDED DESCRIPTION section.
.SH "ENVIRONMENT VARIABLES"
The following environment variables shall affect the execution of
.IR lex :
.IP "\fILANG\fP" 10
Provide a default value for the internationalization variables that are
unset or null. (See the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 8.2" ", " "Internationalization Variables"
for the precedence of internationalization variables used to determine
the values of locale categories.)
.IP "\fILC_ALL\fP" 10
If set to a non-empty string value, override the values of all the
other internationalization variables.
.IP "\fILC_COLLATE\fP" 10
.br
Determine the locale for the behavior of ranges, equivalence classes,
and multi-character collating elements within regular expressions. If
this variable is not set to the POSIX locale, the results are
unspecified.
.IP "\fILC_CTYPE\fP" 10
Determine the locale for the interpretation of sequences of bytes of
text data as characters (for example, single-byte as opposed to
multi-byte characters in arguments and input files), and the behavior
of character classes within regular expressions. If this variable is
not set to the POSIX locale, the results are unspecified.
.IP "\fILC_MESSAGES\fP" 10
.br
Determine the locale that should be used to affect the format and
contents of diagnostic messages written to standard error.
.IP "\fINLSPATH\fP" 10
Determine the location of message catalogs for the processing of
.IR LC_MESSAGES .
.SH "ASYNCHRONOUS EVENTS"
Default.
.SH STDOUT
If the
.BR \(mit
option is specified, the text file of C source code output of
.IR lex
shall be written to standard output.
.P
If the
.BR \(mit
option is not specified:
.IP " *" 4
Implementation-defined informational, error, and warning messages
concerning the contents of
.IR lex
source code input shall be written to either the standard output or
standard error.
.IP " *" 4
If the
.BR \(miv
option is specified and the
.BR \(min
option is not specified,
.IR lex
statistics shall also be written to either the standard output or
standard error, in an implementation-defined format. These
statistics may also be generated if table sizes are specified with a
.BR '%' 
operator in the
.IR Definitions
section, as long as the
.BR \(min
option is not specified.
.SH STDERR
If the
.BR \(mit
option is specified, implementation-defined informational, error, and
warning messages concerning the contents of
.IR lex
source code input shall be written to the standard error.
.P
If the
.BR \(mit
option is not specified:
.IP " 1." 4
Implementation-defined informational, error, and warning messages
concerning the contents of
.IR lex
source code input shall be written to either the standard output or
standard error.
.IP " 2." 4
If the
.BR \(miv
option is specified and the
.BR \(min
option is not specified,
.IR lex
statistics shall also be written to either the standard output or
standard error, in an implementation-defined format. These
statistics may also be generated if table sizes are specified with a
.BR '%' 
operator in the
.IR Definitions
section, as long as the
.BR \(min
option is not specified.
.SH "OUTPUT FILES"
A text file containing C source code shall be written to
.BR lex.yy.c ,
or to the standard output if the
.BR \(mit
option is present.
.SH "EXTENDED DESCRIPTION"
Each input file shall contain
.IR lex
source code, which is a table of regular expressions with corresponding
actions in the form of C program fragments.
.P
When
.BR lex.yy.c
is compiled and linked with the
.IR lex
library (using the
.BR "\(mil\ l"
operand with
.IR c99 ),
the resulting program shall read character input from the standard
input and shall partition it into strings that match the given
expressions.
.br
.P
When an expression is matched, these actions shall occur:
.IP " *" 4
The input string that was matched shall be left in
.IR yytext
as a null-terminated string;
.IR yytext
shall either be an external character array or a pointer to a
character string. As explained in
.IR "Definitions in lex",
the type can be explicitly selected using the
.BR %array
or
.BR %pointer
declarations, but the default is implementation-defined.
.IP " *" 4
The external
.BR int
.IR yyleng
shall be set to the length of the matching string.
.IP " *" 4
The expression's corresponding program fragment, or action, shall be
executed.
.P
During pattern matching,
.IR lex
shall search the set of patterns for the single longest possible
match. Among rules that match the same number of characters, the rule
given first shall be chosen.
.P
The general format of
.IR lex
source shall be:
.sp
.RS
.IR Definitions
.BR %%
.IR Rules
.BR %%
.IR User Subroutines
.RE
.P
The first
.BR \(dq%%\(dq 
is required to mark the beginning of the rules (regular expressions and
actions); the second
.BR \(dq%%\(dq 
is required only if user subroutines follow.
.P
Any line in the
.IR Definitions
section beginning with a
&lt;blank&gt;
shall be assumed to be a C program fragment and shall be copied to the
external definition area of the
.BR lex.yy.c
file. Similarly, anything in the
.IR Definitions
section included between delimiter lines containing only
.BR \(dq%{\(dq 
and
.BR \(dq%}\(dq 
shall also be copied unchanged to the external definition area of the
.BR lex.yy.c
file.
.P
Any such input (beginning with a
&lt;blank&gt;
or within
.BR \(dq%{\(dq 
and
.BR \(dq%}\(dq 
delimiter lines) appearing at the beginning of the
.IR Rules
section before any rules are specified shall be written to
.BR lex.yy.c
after the declarations of variables for the
\fIyylex\fR()
function and before the first line of code in
\fIyylex\fR().
Thus, user variables local to
\fIyylex\fR()
can be declared here, as well as application code to execute upon entry
to
\fIyylex\fR().
.P
The action taken by
.IR lex
when encountering any input beginning with a
&lt;blank&gt;
or within
.BR \(dq%{\(dq 
and
.BR \(dq%}\(dq 
delimiter lines appearing in the
.IR Rules
section but coming after one or more rules is undefined. The presence
of such input may result in an erroneous definition of the
\fIyylex\fR()
function.
.P
C-language code in the input shall not contain C-language trigraphs.
The C-language code within
.BR \(dq%{\(dq 
and
.BR \(dq%}\(dq 
delimiter lines shall not contain any lines consisting only of
.BR \(dq%}\(dq ,
or only of
.BR \(dq%%\(dq .
.SS "Definitions in lex"
.P
.IR Definitions
appear before the first
.BR \(dq%%\(dq 
delimiter. Any line in this section not contained between
.BR \(dq%{\(dq 
and
.BR \(dq%}\(dq 
lines and not beginning with a
&lt;blank&gt;
shall be assumed to define a
.IR lex
substitution string. The format of these lines shall be:
.sp
.RS 4
.nf
\fB
\fIname substitute\fR
.fi \fR
.P
.RE
.P
If a
.IR name
does not meet the requirements for identifiers in the ISO\ C standard, the result
is undefined. The string
.IR substitute
shall replace the string {\c
.IR name }
when it is used in a rule. The
.IR name
string shall be recognized in this context only when the braces are
provided and when it does not appear within a bracket expression or
within double-quotes.
.P
In the
.IR Definitions
section, any line beginning with a
&lt;percent-sign&gt;
(\c
.BR '%' )
character and followed by an alphanumeric word beginning with either
.BR 's' 
or
.BR 'S' 
shall define a set of start conditions. Any line beginning with a
.BR '%' 
followed by a word beginning with either
.BR 'x' 
or
.BR 'X' 
shall define a set of exclusive start conditions. When the generated
scanner is in a
.BR %s
state, patterns with no state specified shall be also active; in a
.BR %x
state, such patterns shall not be active. The rest of the line, after
the first word, shall be considered to be one or more
&lt;blank&gt;-separated
names of start conditions. Start condition names shall be constructed
in the same way as definition names. Start conditions can be used to
restrict the matching of regular expressions to one or more states as
described in
.IR "Regular Expressions in lex".
.P
Implementations shall accept either of the following two
mutually-exclusive declarations in the
.IR Definitions
section:
.IP "\fB%array\fR" 10
Declare the type of
.IR yytext
to be a null-terminated character array.
.IP "\fB%pointer\fR" 10
Declare the type of
.IR yytext
to be a pointer to a null-terminated character string.
.P
The default type of
.IR yytext
is implementation-defined. If an application refers to
.IR yytext
outside of the scanner source file (that is, via an
.BR extern ),
the application shall include the appropriate
.BR %array
or
.BR %pointer
declaration in the scanner source file.
.P
Implementations shall accept declarations in the
.IR Definitions
section for setting certain internal table sizes. The declarations are
shown in the following table.
.sp
.ce 1
\fBTable: Table Size Declarations in \fIlex\fP\fR
.TS
center tab(!) box;
cB | cB | cB
l | l | n.
Declaration!Description!Minimum Value
_
%\fBp \fIn\fR!Number of positions!2\|500
%\fBn \fIn\fR!Number of states!500
%\fBa \fIn\fR!Number of transitions!2\|000
%\fBe \fIn\fR!Number of parse tree nodes!1\|000
%\fBk \fIn\fR!Number of packed character classes!1\|000
%\fBo \fIn\fR!Size of the output array!3\|000
.TE
.P
In the table,
.IR n
represents a positive decimal integer, preceded by one or more
&lt;blank&gt;
characters. The exact meaning of these table size numbers is
implementation-defined. The implementation shall document how these
numbers affect the
.IR lex
utility and how they are related to any output that may be generated by
the implementation should limitations be encountered during the
execution of
.IR lex .
It shall be possible to determine from this output which of the table
size values needs to be modified to permit
.IR lex
to successfully generate tables for the input language. The values in
the column Minimum Value represent the lowest values conforming
implementations shall provide.
.SS "Rules in lex"
.P
The rules in
.IR lex
source files are a table in which the left column contains regular
expressions and the right column contains actions (C program fragments)
to be executed when the expressions are recognized.
.sp
.RS 4
.nf
\fB
\fIERE action
ERE action\fP
\&amp;...
.fi \fR
.P
.RE
.P
The extended regular expression (ERE) portion of a row shall be
separated from
.IR action
by one or more
&lt;blank&gt;
characters. A regular expression containing
&lt;blank&gt;
characters shall be recognized under one of the following conditions:
.IP " *" 4
The entire expression appears within double-quotes.
.IP " *" 4
The
&lt;blank&gt;
characters appear within double-quotes or square brackets.
.IP " *" 4
Each
&lt;blank&gt;
is preceded by a
&lt;backslash&gt;
character.
.SS "User Subroutines in lex"
.P
Anything in the user subroutines section shall be copied to
.BR lex.yy.c
following
\fIyylex\fR().
.SS "Regular Expressions in lex"
.P
The
.IR lex
utility shall support the set of extended regular expressions (see the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 9.4" ", " "Extended Regular Expressions"),
with the following additions and exceptions to the syntax:
.IP "\fR\&amp;\(dq...\&amp;\(dq\fR" 10
Any string enclosed in double-quotes shall represent the characters
within the double-quotes as themselves, except that
&lt;backslash&gt;-escapes
(which appear in the following table) shall be recognized. Any
&lt;backslash&gt;-escape
sequence shall be terminated by the closing quote. For example,
.BR \(dq\e01\(dq \c
.BR \(dq1\(dq 
represents a single string: the octal value 1 followed by the
character
.BR '1' .
.IP "&lt;\fIstate\fR&gt;\fIr\fR,\ &lt;\fIstate1,state2,\fR.\|.\|.&gt;\fIr\fR" 10
.br
The regular expression
.IR r
shall be matched only when the program is in one of the start
conditions indicated by
.IR state ,
.IR state1 ,
and so on; see
.IR "Actions in lex".
(As an exception to the typographical conventions of the rest of this volume of POSIX.1\(hy2008,
in this case &lt;\fIstate\fP&gt; does not represent a metavariable, but the
literal angle-bracket characters surrounding a symbol.) The start
condition shall be recognized as such only at the beginning of a
regular expression.
.IP "\fIr\fP/\fIx\fP" 10
The regular expression
.IR r
shall be matched only if it is followed by an occurrence of regular
expression
.IR x
(\c
.IR x
is the instance of trailing context, further defined below). The token
returned in
.IR yytext
shall only match
.IR r .
If the trailing portion of
.IR r
matches the beginning of
.IR x ,
the result is unspecified. The
.IR r
expression cannot include further trailing context or the
.BR '$' 
(match-end-of-line) operator;
.IR x
cannot include the
.BR '^' 
(match-beginning-of-line) operator, nor trailing context, nor the
.BR '$' 
operator. That is, only one occurrence of trailing context is allowed
in a
.IR lex
regular expression, and the
.BR '^' 
operator only can be used at the beginning of such an expression.
.IP "{\fIname\fR}" 10
When
.IR name
is one of the substitution symbols from the
.IR Definitions
section, the string, including the enclosing braces, shall be replaced
by the
.IR substitute
value. The
.IR substitute
value shall be treated in the extended regular expression as if it were
enclosed in parentheses. No substitution shall occur if {\c
.IR name }
occurs within a bracket expression or within double-quotes.
.P
Within an ERE, a
&lt;backslash&gt;
character shall be considered to begin an escape sequence as specified
in the table in the Base Definitions volume of POSIX.1\(hy2008,
.IR "Chapter 5" ", " "File Format Notation"
(\c
.BR '\e\e' ,
.BR '\ea' ,
.BR '\eb' ,
.BR '\ef' ,
.BR '\en' ,
.BR '\er' ,
.BR '\et' ,
.BR '\ev' ).
In addition, the escape sequences in the following table shall be
recognized.
.P
A literal
&lt;newline&gt;
cannot occur within an ERE; the escape sequence
.BR '\en' 
can be used to represent a
&lt;newline&gt;.
A
&lt;newline&gt;
shall not be matched by a period operator.
.br
.sp
.ce 1
\fBTable: Escape Sequences in \fIlex\fP\fR
.ad l
.TS
center tab(@) box;
cB | cB | cB
cB | cB | cB
lf5 | lw(2.4i) | lw(2.4i).
Escape
Sequence@Description@Meaning
_
\e\fIdigits\fP@T{
A
&lt;backslash&gt;
character followed by the longest sequence of one, two, or three
octal-digit characters (01234567). If all of the digits are 0 (that is,
representation of the NUL character), the behavior is undefined.
T}@T{
The character whose encoding is represented by the one, two, or
three-digit octal integer. Multi-byte characters require
multiple, concatenated escape sequences of this type, including the
leading
&lt;backslash&gt;
for each byte.
T}
_
\ex\fIdigits\fP@T{
A
&lt;backslash&gt;
character followed by the longest sequence of hexadecimal-digit
characters (01234567abcdefABCDEF). If all of the digits are 0 (that is,
representation of the NUL character), the behavior is undefined.
T}@T{
The character whose encoding is represented by the hexadecimal
integer.
T}
_
\ec@T{
A
&lt;backslash&gt;
character followed by any character not described in this
table or in the table in the Base Definitions volume of POSIX.1\(hy2008,
.IR "Chapter 5" ", " "File Format Notation"
(\c
.BR '\e\e' ,
.BR '\ea' ,
.BR '\eb' ,
.BR '\ef' ,
.BR '\en' ,
.BR '\er' ,
.BR '\et' ,
.BR '\ev' ).
T}@T{
The character
.BR 'c' ,
unchanged.
T}
.TE
.ad b
.TP 10
.BR Note:
If a
.BR '\ex' 
sequence needs to be immediately followed by a hexadecimal digit
character, a sequence such as
.BR \(dq\ex1\(dq \c
.BR \(dq1\(dq 
can be used, which represents a character containing the value 1,
followed by the character
.BR '1' .
.P
.P
The order of precedence given to extended regular expressions for
.IR lex
differs from that specified in the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 9.4" ", " "Extended Regular Expressions".
The order of precedence for
.IR lex
shall be as shown in the following table, from high to low.
.TP 10
.BR Note:
The escaped characters entry is not meant to imply that these are
operators, but they are included in the table to show their
relationships to the true operators. The start condition, trailing
context, and anchoring notations have been omitted from the table
because of the placement restrictions described in this section; they
can only appear at the beginning or ending of an ERE.
.P
.br
.sp
.ce 1
\fBTable: ERE Precedence in \fIlex\fP\fR
.TS
center tab(@) box;
cB | cB
lf2 | lf5.
Extended Regular Expression@Precedence
_
collation-related bracket symbols@[= =]  [: :]  [. .]
escaped characters@\e&lt;\fIspecial character\fP&gt;
bracket expression@[ ]
quoting@"..."
grouping@( )
definition@{\fIname\fP}
single-character RE duplication@* + ?
concatenation
interval expression@{m,n}
alternation@|
.TE
.P
The ERE anchoring operators
.BR '^' 
and
.BR '$' 
do not appear in the table. With
.IR lex
regular expressions, these operators are restricted in their use: the
.BR '^' 
operator can only be used at the beginning of an entire regular
expression, and the
.BR '$' 
operator only at the end. The operators apply to the entire regular
expression. Thus, for example, the pattern
.BR \(dq(^abc)|(def$)\(dq 
is undefined; it can instead be written as two separate rules, one with
the regular expression
.BR \(dq^abc\(dq 
and one with
.BR \(dqdef$\(dq ,
which share a common action via the special
.BR '|' 
action (see below). If the pattern were written
.BR \(dq^abc|def$\(dq ,
it would match either
.BR \(dqabc\(dq 
or
.BR \(dqdef\(dq 
on a line by itself.
.P
Unlike the general ERE rules, embedded anchoring is not allowed by most
historical
.IR lex
implementations. An example of embedded anchoring would be for
patterns such as
.BR \(dq(^|\ )foo(\ |$)\(dq 
to match
.BR \(dqfoo\(dq 
when it exists as a complete word. This functionality can be obtained
using existing
.IR lex
features:
.sp
.RS 4
.nf
\fB
^foo/[ \en]      |
" foo"/[ \en]    /* Found foo as a separate word. */
.fi \fR
.P
.RE
.P
Note also that
.BR '$' 
is a form of trailing context (it is equivalent to
.BR \(dq/\en\(dq )
and as such cannot be used with regular expressions containing another
instance of the operator (see the preceding discussion of trailing
context).
.P
The additional regular expressions trailing-context operator
.BR '/' 
can be used as an ordinary character if presented within double-quotes,
.BR \(dq/\(dq ;
preceded by a
&lt;backslash&gt;,
.BR \(dq\e/\(dq ;
or within a bracket expression,
.BR \(dq[/]\(dq .
The start-condition
.BR '&lt;' 
and
.BR '&gt;' 
operators shall be special only in a start condition at the beginning
of a regular expression; elsewhere in the regular expression they shall
be treated as ordinary characters.
.SS "Actions in lex"
.P
The action to be taken when an ERE is matched can be a C program
fragment or the special actions described below; the program fragment
can contain one or more C statements, and can also include special
actions. The empty C statement
.BR ';' 
shall be a valid action; any string in the
.BR lex.yy.c
input that matches the pattern portion of such a rule is effectively
ignored or skipped. However, the absence of an action shall not be
valid, and the action
.IR lex
takes in such a condition is undefined.
.P
The specification for an action, including C statements and special
actions, can extend across several lines if enclosed in braces:
.sp
.RS 4
.nf
\fB
\fIERE\fP &lt;\fIone or more blanks\fR&gt; { \fIprogram statement
program statement\fP }
.fi \fR
.P
.RE
.P
The program statements shall not contain unbalanced curly brace
preprocessing tokens.
.P
The default action when a string in the input to a
.BR lex.yy.c
program is not matched by any expression shall be to copy the string to
the output. Because the default behavior of a program generated by
.IR lex
is to read the input and copy it to the output, a minimal
.IR lex
source program that has just
.BR \(dq%%\(dq 
shall generate a C program that simply copies the input to the output
unchanged.
.P
Four special actions shall be available:
.sp
.RS 4
.nf
\fB
|   ECHO;   REJECT;   BEGIN
.fi \fR
.P
.RE
.IP "\fR|\fR" 10
The action
.BR '|' 
means that the action for the next rule is the action for this rule.
Unlike the other three actions,
.BR '|' 
cannot be enclosed in braces or be
&lt;semicolon&gt;-terminated;
the application shall ensure that it is specified alone, with no other
actions.
.IP "\fBECHO;\fR" 10
Write the contents of the string
.IR yytext
on the output.
.IP "\fBREJECT;\fR" 10
Usually only a single expression is matched by a given string in the
input.
.BR REJECT
means ``continue to the next expression that matches the current
input'', and shall cause whatever rule was the second choice after the
current rule to be executed for the same input. Thus, multiple rules
can be matched and executed for one input string or overlapping input
strings. For example, given the regular expressions
.BR \(dqxyz\(dq 
and
.BR \(dqxy\(dq 
and the input
.BR \(dqxyz\(dq ,
usually only the regular expression
.BR \(dqxyz\(dq 
would match. The next attempted match would start after
.BR z.
If the last action in the
.BR \(dqxyz\(dq 
rule is
.BR REJECT ,
both this rule and the
.BR \(dqxy\(dq 
rule would be executed. The
.BR REJECT
action may be implemented in such a fashion that flow of control does
not continue after it, as if it were equivalent to a
.BR goto
to another part of
\fIyylex\fR().
The use of
.BR REJECT
may result in somewhat larger and slower scanners.
.IP "\fBBEGIN\fR" 10
The action:
.RS 10 
.sp
.RS 4
.nf
\fB
BEGIN \fInewstate\fP;
.fi \fR
.P
.RE
.P
switches the state (start condition) to
.IR newstate .
If the string
.IR newstate
has not been declared previously as a start condition in the
.IR Definitions
section, the results are unspecified. The initial state is indicated
by the digit
.BR '0' 
or the token
.BR INITIAL .
.RE
.P
The functions or macros described below are accessible to user code
included in the
.IR lex
input. It is unspecified whether they appear in the C code output of
.IR lex ,
or are accessible only through the
.BR "\(mil\ l"
operand to
.IR c99
(the
.IR lex
library).
.IP "\fBint\ \fIyylex\fR(\fBvoid\fR)" 6
.br
Performs lexical analysis on the input; this is the primary function
generated by the
.IR lex
utility. The function shall return zero when the end of input is
reached; otherwise, it shall return non-zero values (tokens) determined
by the actions that are selected.
.IP "\fBint\ \fIyymore\fR(\fBvoid\fR)" 6
.br
When called, indicates that when the next input string is recognized,
it is to be appended to the current value of
.IR yytext
rather than replacing it; the value in
.IR yyleng
shall be adjusted accordingly.
.IP "\fBint\ \fIyyless\fR(\fBint\ \fIn\fR)" 6
.br
Retains
.IR n
initial characters in
.IR yytext ,
NUL-terminated, and treats the remaining characters as if they had not
been read; the value in
.IR yyleng
shall be adjusted accordingly.
.IP "\fBint\ \fIinput\fR(\fBvoid\fR)" 6
.br
Returns the next character from the input, or zero on end-of-file. It
shall obtain input from the stream pointer
.IR yyin ,
although possibly via an intermediate buffer. Thus, once scanning has
begun, the effect of altering the value of
.IR yyin
is undefined. The character read shall be removed from the input
stream of the scanner without any processing by the scanner.
.IP "\fBint\ \fIunput\fR(\fBint\ \fIc\fR)" 6
.br
Returns the character
.BR 'c' 
to the input;
.IR yytext
and
.IR yyleng
are undefined until the next expression is matched. The result of
using
\fIunput\fR()
for more characters than have been input is unspecified.
.P
The following functions shall appear only in the
.IR lex
library accessible through the
.BR "\(mil\ l"
operand; they can therefore be redefined by a conforming application:
.IP "\fBint\ \fIyywrap\fR(\fBvoid\fR)" 6
.br
Called by
\fIyylex\fR()
at end-of-file; the default
\fIyywrap\fR()
shall always return 1. If the application requires
\fIyylex\fR()
to continue processing with another source of input, then the
application can include a function
\fIyywrap\fR(),
which associates another file with the external variable
.BR "FILE *"
.IR yyin
and shall return a value of zero.
.IP "\fBint\ \fImain\fR(\fBint\ \fIargc\fR, \fBchar *\fIargv\fR[\|])" 6
.br
Calls
\fIyylex\fR()
to perform lexical analysis, then exits. The user code can contain
\fImain\fR()
to perform application-specific operations, calling
\fIyylex\fR()
as applicable.
.P
Except for
\fIinput\fR(),
\fIunput\fR(),
and
\fImain\fR(),
all external and static names generated by
.IR lex
shall begin with the prefix
.BR yy
or
.BR YY .
.SH "EXIT STATUS"
The following exit values shall be returned:
.IP "\00" 6
Successful completion.
.IP &gt;0 6
An error occurred.
.SH "CONSEQUENCES OF ERRORS"
Default.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
Conforming applications are warned that in the
.IR Rules
section, an ERE without an action is not acceptable, but need not be
detected as erroneous by
.IR lex .
This may result in compilation or runtime errors.
.P
The purpose of
\fIinput\fR()
is to take characters off the input stream and discard them as far as
the lexical analysis is concerned. A common use is to discard the body
of a comment once the beginning of a comment is recognized.
.P
The
.IR lex
utility is not fully internationalized in its treatment of regular
expressions in the
.IR lex
source code or generated lexical analyzer. It would seem desirable to
have the lexical analyzer interpret the regular expressions given in
the
.IR lex
source according to the environment specified when the lexical analyzer
is executed, but this is not possible with the current
.IR lex
technology. Furthermore, the very nature of the lexical analyzers
produced by
.IR lex
must be closely tied to the lexical requirements of the input language
being described, which is frequently locale-specific anyway. (For
example, writing an analyzer that is used for French text is not
automatically useful for processing other languages.)
.SH EXAMPLES
The following is an example of a
.IR lex
program that implements a rudimentary scanner for a Pascal-like
syntax:
.sp
.RS 4
.nf
\fB
%{
/* Need this for the call to atof() below. */
#include &lt;math.h&gt;
/* Need this for printf(), fopen(), and stdin below. */
#include &lt;stdio.h&gt;
%}
.P
DIGIT    [0\(mi9]
ID       [a\(miz][a\(miz0\(mi9]*
.P
%%
.P
{DIGIT}+ {
printf("An integer: %s (%d)\en", yytext,
atoi(yytext));
}
.P
{DIGIT}+"."{DIGIT}*        {
printf("A float: %s (%g)\en", yytext,
atof(yytext));
}
.P
if|then|begin|end|procedure|function        {
printf("A keyword: %s\en", yytext);
}
.P
{ID}    printf("An identifier: %s\en", yytext);
.P
"+"|"\(mi"|"*"|"/"        printf("An operator: %s\en", yytext);
.P
"{"[^}\en]*"}"    /* Eat up one-line comments. */
.P
[ \et\en]+        /* Eat up white space. */
.P
\&amp;.  printf("Unrecognized character: %s\en", yytext);
.P
%%
.P
int main(int argc, char *argv[])
{
++argv, \(mi\|\(miargc;  /* Skip over program name. */
if (argc &gt; 0)
yyin = fopen(argv[0], "r");
else
yyin = stdin;
.P
yylex();
}
.fi \fR
.P
.RE
.SH RATIONALE
Even though the
.BR \(mic
option and references to the C language are retained in this
description,
.IR lex
may be generalized to other languages, as was done at one time for EFL,
the Extended FORTRAN Language. Since the
.IR lex
input specification is essentially language-independent, versions of
this utility could be written to produce Ada, Modula-2, or Pascal code,
and there are known historical implementations that do so.
.P
The current description of
.IR lex
bypasses the issue of dealing with internationalized EREs in the
.IR lex
source code or generated lexical analyzer. If it follows the model used
by
.IR awk
(the source code is assumed to be presented in the POSIX locale, but
input and output are in the locale specified by the environment
variables), then the tables in the lexical analyzer produced by
.IR lex
would interpret EREs specified in the
.IR lex
source in terms of the environment variables specified when
.IR lex
was executed. The desired effect would be to have the lexical analyzer
interpret the EREs given in the
.IR lex
source according to the environment specified when the lexical analyzer
is executed, but this is not possible with the current
.IR lex
technology.
.P
The description of octal and hexadecimal-digit escape sequences agrees
with the ISO\ C standard use of escape sequences.
.P
Earlier versions of this standard allowed for implementations with
bytes other than eight bits, but this has been modified in this
version.
.P
There is no detailed output format specification. The observed behavior
of
.IR lex
under four different historical implementations was that none of these
implementations consistently reported the line numbers for error and
warning messages. Furthermore, there was a desire that
.IR lex
be allowed to output additional diagnostic messages. Leaving message
formats unspecified avoids these formatting questions and problems with
internationalization.
.P
Although the
.BR %x
specifier for
.IR exclusive
start conditions is not historical practice, it is believed to be a
minor change to historical implementations and greatly enhances the
usability of
.IR lex
programs since it permits an application to obtain the expected
functionality with fewer statements.
.P
The
.BR %array
and
.BR %pointer
declarations were added as a compromise between historical systems.
The System V-based
.IR lex
copies the matched text to a
.IR yytext
array. The
.IR flex
program, supported in BSD and GNU systems, uses a pointer. In the
latter case, significant performance improvements are available for
some scanners. Most historical programs should require no change in
porting from one system to another because the string being referenced
is null-terminated in both cases. (The method used by
.IR flex
in its case is to null-terminate the token in place by remembering the
character that used to come right after the token and replacing it
before continuing on to the next scan.) Multi-file programs with
external references to
.IR yytext
outside the scanner source file should continue to operate on their
historical systems, but would require one of the new declarations to be
considered strictly portable.
.P
The description of EREs avoids unnecessary duplication of ERE details
because their meanings within a
.IR lex
ERE are the same as that for the ERE in this volume of POSIX.1\(hy2008.
.P
The reason for the undefined condition associated with text beginning
with a
&lt;blank&gt;
or within
.BR \(dq%{\(dq 
and
.BR \(dq%}\(dq 
delimiter lines appearing in the
.IR Rules
section is historical practice. Both the BSD and System V
.IR lex
copy the indented (or enclosed) input in the
.IR Rules
section (except at the beginning) to unreachable areas of the
\fIyylex\fR()
function (the code is written directly after a
.IR break
statement). In some cases, the System V
.IR lex
generates an error message or a syntax error, depending on the form of
indented input.
.P
The intention in breaking the list of functions into those that may
appear in
.BR lex.yy.c
\fIversus\fR those that only appear in
.BR libl.a
is that only those functions in
.BR libl.a
can be reliably redefined by a conforming application.
.P
The descriptions of standard output and standard error are somewhat
complicated because historical
.IR lex
implementations chose to issue diagnostic messages to standard output
(unless
.BR \(mit
was given). POSIX.1\(hy2008 allows this behavior, but leaves an opening
for the more expected behavior of using standard error for diagnostics.
Also, the System V behavior of writing the statistics when any table
sizes are given is allowed, while BSD-derived systems can avoid it. The
programmer can always precisely obtain the desired results by using
either the
.BR \(mit
or
.BR \(min
options.
.P
The OPERANDS section does not mention the use of
.BR \(mi
as a synonym for standard input; not all historical implementations
support such usage for any of the
.IR file
operands.
.P
A description of the
.IR "translation table"
was deleted from early proposals because of its relatively low usage in
historical applications.
.P
The change to the definition of the
\fIinput\fR()
function that allows buffering of input presents the opportunity for
major performance gains in some applications.
.P
The following examples clarify the differences between
.IR lex
regular expressions and regular expressions appearing elsewhere in
\&amp;this volume of POSIX.1\(hy2008. For regular expressions of the form
.BR \(dqr/x\(dq ,
the string matching
.IR r
is always returned; confusion may arise when the beginning of
.IR x
matches the trailing portion of
.IR r .
For example, given the regular expression
.BR \(dqa*b/cc\(dq 
and the input
.BR \(dqaaabcc\(dq ,
.IR yytext
would contain the string
.BR \(dqaaab\(dq 
on this match. But given the regular expression
.BR \(dqx*/xy\(dq 
and the input
.BR \(dqxxxy\(dq ,
the token
.BR xxx ,
not
.BR xx ,
is returned by some implementations because
.BR xxx
matches
.BR \(dqx*\(dq .
.P
In the rule
.BR \(dqab*/bc\(dq ,
the
.BR \(dqb*\(dq 
at the end of
.IR r
extends
.IR r 's
match into the beginning of the trailing context, so the result is
unspecified. If this rule were
.BR \(dqab/bc\(dq ,
however, the rule matches the text
.BR \(dqab\(dq 
when it is followed by the text
.BR \(dqbc\(dq .
In this latter case, the matching of
.IR r
cannot extend into the beginning of
.IR x ,
so the result is specified.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "\fIc99\fR\^",
.IR "\fIed\fR\^",
.IR "\fIyacc\fR\^"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "Chapter 5" ", " "File Format Notation",
.IR "Chapter 8" ", " "Environment Variables",
.IR "Chapter 9" ", " "Regular Expressions",
.IR "Section 12.2" ", " "Utility Syntax Guidelines"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.
.TH LINK "1" "March 2017" "GNU coreutils 8.27" "User Commands"
.SH NAME
link \- call the link function to create a link to a file
.SH SYNOPSIS
.B link
\fI\,FILE1 FILE2\/\fR
.br
.B link
\fI\,OPTION\/\fR
.SH DESCRIPTION
.\" Add any additional description here
.PP
Call the link function to create a link named FILE2 to an existing FILE1.
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-\-version\fR
output version information and exit
.SH AUTHOR
Written by Michael Stone.
.SH "REPORTING BUGS"
GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt;
.br
Report link translation bugs to &lt;http://translationproject.org/team/&gt;
.SH COPYRIGHT
Copyright \(co 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
link(2)
.PP
.br
Full documentation at: &lt;http://www.gnu.org/software/coreutils/link&gt;
.br
or available locally via: info \(aq(coreutils) link invocation\(aq
.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.
.TH LN "1" "March 2017" "GNU coreutils 8.27" "User Commands"
.SH NAME
ln \- make links between files
.SH SYNOPSIS
.B ln
[\fI\,OPTION\/\fR]... [\fI\,-T\/\fR] \fI\,TARGET LINK_NAME   (1st form)\/\fR
.br
.B ln
[\fI\,OPTION\/\fR]... \fI\,TARGET                  (2nd form)\/\fR
.br
.B ln
[\fI\,OPTION\/\fR]... \fI\,TARGET\/\fR... \fI\,DIRECTORY     (3rd form)\/\fR
.br
.B ln
[\fI\,OPTION\/\fR]... \fI\,-t DIRECTORY TARGET\/\fR...  \fI\,(4th form)\/\fR
.SH DESCRIPTION
.\" Add any additional description here
.PP
In the 1st form, create a link to TARGET with the name LINK_NAME.
In the 2nd form, create a link to TARGET in the current directory.
In the 3rd and 4th forms, create links to each TARGET in DIRECTORY.
Create hard links by default, symbolic links with \fB\-\-symbolic\fR.
By default, each destination (name of new link) should not already exist.
When creating hard links, each TARGET must exist.  Symbolic links
can hold arbitrary text; if later resolved, a relative link is
interpreted in relation to its parent directory.
.PP
Mandatory arguments to long options are mandatory for short options too.
.TP
\fB\-\-backup\fR[=\fI\,CONTROL\/\fR]
make a backup of each existing destination file
.TP
\fB\-b\fR
like \fB\-\-backup\fR but does not accept an argument
.TP
\fB\-d\fR, \fB\-F\fR, \fB\-\-directory\fR
allow the superuser to attempt to hard link
directories (note: will probably fail due to
system restrictions, even for the superuser)
.TP
\fB\-f\fR, \fB\-\-force\fR
remove existing destination files
.TP
\fB\-i\fR, \fB\-\-interactive\fR
prompt whether to remove destinations
.TP
\fB\-L\fR, \fB\-\-logical\fR
dereference TARGETs that are symbolic links
.TP
\fB\-n\fR, \fB\-\-no\-dereference\fR
treat LINK_NAME as a normal file if
it is a symbolic link to a directory
.TP
\fB\-P\fR, \fB\-\-physical\fR
make hard links directly to symbolic links
.TP
\fB\-r\fR, \fB\-\-relative\fR
create symbolic links relative to link location
.TP
\fB\-s\fR, \fB\-\-symbolic\fR
make symbolic links instead of hard links
.TP
\fB\-S\fR, \fB\-\-suffix\fR=\fI\,SUFFIX\/\fR
override the usual backup suffix
.TP
\fB\-t\fR, \fB\-\-target\-directory\fR=\fI\,DIRECTORY\/\fR
specify the DIRECTORY in which to create
the links
.TP
\fB\-T\fR, \fB\-\-no\-target\-directory\fR
treat LINK_NAME as a normal file always
.TP
\fB\-v\fR, \fB\-\-verbose\fR
print name of each linked file
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-\-version\fR
output version information and exit
.PP
The backup suffix is '~', unless set with \fB\-\-suffix\fR or SIMPLE_BACKUP_SUFFIX.
The version control method may be selected via the \fB\-\-backup\fR option or through
the VERSION_CONTROL environment variable.  Here are the values:
.TP
none, off
never make backups (even if \fB\-\-backup\fR is given)
.TP
numbered, t
make numbered backups
.TP
existing, nil
numbered if numbered backups exist, simple otherwise
.TP
simple, never
always make simple backups
.PP
Using \fB\-s\fR ignores \fB\-L\fR and \fB\-P\fR.  Otherwise, the last option specified controls
behavior when a TARGET is a symbolic link, defaulting to \fB\-P\fR.
.SH AUTHOR
Written by Mike Parker and David MacKenzie.
.SH "REPORTING BUGS"
GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt;
.br
Report ln translation bugs to &lt;http://translationproject.org/team/&gt;
.SH COPYRIGHT
Copyright \(co 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
link(2), symlink(2)
.PP
.br
Full documentation at: &lt;http://www.gnu.org/software/coreutils/ln&gt;
.br
or available locally via: info \(aq(coreutils) ln invocation\(aq
.\" Copyright (C) 2014 Michael Kerrisk &lt;mtk.manpages@gmail.com&gt;
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH LOCALE 1 2016-03-15 "Linux" "Linux User Manual"
.SH NAME
locale \- get locale-specific information
.SH SYNOPSIS
.nf
.BR locale " [\fIoption\fP]"
.BR locale " [\fIoption\fP] " \-a
.BR locale " [\fIoption\fP] " \-m
.BR locale " [\fIoption\fP] \fIname\fP..."
.fi
.SH DESCRIPTION
The
.B locale
command displays information about the current locale, or all locales,
on standard output.

When invoked without arguments,
.B locale
displays the current locale settings for each locale category (see
.BR locale (5)),
based on the settings of the environment variables that control the locale
(see
.BR locale (7)).
Values for variables set in the environment are printed without double
quotes, implied values are printed with double quotes.

If either the
.B \-a
or the
.B \-m
option (or one of their long-format equivalents) is specified,
the behavior is as follows:
.TP
.BR \-a ", " \-\-all\-locales
Display a list of all available locales.
The
.B -v
option causes the
.B LC_IDENTIFICATION
metadata about each locale to be included in the output.
.TP
.BR \-m ", " \-\-charmaps
Display the available charmaps (character set description files).
To display the current character set for the locale, use
\fBlocale -c charmap\fR.
.PP
The
.B locale
command can also be provided with one or more arguments,
which are the names of locale keywords (for example,
.IR date_fmt ,
.IR ctype-class-names ,
.IR yesexpr ,
or
.IR decimal_point )
or locale categories (for example,
.BR LC_CTYPE
or
.BR LC_TIME ).
For each argument, the following is displayed:
.IP * 3
For a locale keyword, the value of that keyword to be displayed.
.IP *
For a locale category,
the values of all keywords in that category are displayed.
.PP
When arguments are supplied, the following options are meaningful:
.TP
.BR \-c ", " \-\-category\-name
For a category name argument,
write the name of the locale category
on a separate line preceding the list of keyword values for that category.

For a keyword name argument,
write the name of the locale category for this keyword
on a separate line preceding the keyword value.

This option improves readability when multiple name arguments are specified.
It can be combined with the
.B \-k
option.
.TP
.BR \-k ", " \-\-keyword\-name
For each keyword whose value is being displayed,
include also the name of that keyword,
so that the output has the format:

\fIkeyword\fP="\fIvalue\fP"
.PP
The
.B locale
command also knows about the following options:
.TP
.BR \-v ", " \-\-verbose
Display additional information for some command-line option and argument
combinations.
.TP
.BR \-? ", " \-\-help
Display a summary of command-line options and arguments and exit.
.TP
.BR \-\-usage
Display a short usage message and exit.
.TP
.BR \-V ", " \-\-version
Display the program version and exit.
.SH FILES
.TP
.I /usr/lib/locale/locale-archive
Usual default locale archive location.
.TP
.I /usr/share/i18n/locales
Usual default path for locale definition files.
.SH CONFORMING TO
POSIX.1-2001, POSIX.1-2008.
.SH EXAMPLE
.nf
$ \fBlocale\fP
LANG=en_US.UTF\-8
LC_CTYPE="en_US.UTF\-8"
LC_NUMERIC="en_US.UTF\-8"
LC_TIME="en_US.UTF\-8"
LC_COLLATE="en_US.UTF\-8"
LC_MONETARY="en_US.UTF\-8"
LC_MESSAGES="en_US.UTF\-8"
LC_PAPER="en_US.UTF\-8"
LC_NAME="en_US.UTF\-8"
LC_ADDRESS="en_US.UTF\-8"
LC_TELEPHONE="en_US.UTF\-8"
LC_MEASUREMENT="en_US.UTF\-8"
LC_IDENTIFICATION="en_US.UTF\-8"
LC_ALL=

$ \fBlocale date_fmt\fP
%a %b %e %H:%M:%S %Z %Y

$ \fBlocale \-k date_fmt\fP
date_fmt="%a %b %e %H:%M:%S %Z %Y"

$ \fBlocale \-ck date_fmt\fP
LC_TIME
date_fmt="%a %b %e %H:%M:%S %Z %Y"

$ \fBlocale LC_TELEPHONE\fP
+%c (%a) %l
(%a) %l
11
1
UTF\-8

$ \fBlocale \-k LC_TELEPHONE\fP
tel_int_fmt="+%c (%a) %l"
tel_dom_fmt="(%a) %l"
int_select="11"
int_prefix="1"
telephone\-codeset="UTF\-8"
.fi

The following example compiles a custom locale from the
.I ./wrk
directory with the
.BR localedef (1)
utility under the
.I $HOME/.locale
directory, then tests the result with the
.BR date (1)
command, and then sets the environment variables
.B LOCPATH
and
.B LANG
in the shell profile file so that the custom locale will be used in the
subsequent user sessions:

.nf
$ \fBmkdir -p $HOME/.locale\fP
$ \fBI18NPATH=./wrk/ localedef -f UTF-8 -i fi_SE $HOME/.locale/fi_SE.UTF-8\fP
$ \fBLOCPATH=$HOME/.locale LC_ALL=fi_SE.UTF-8 date\fP
$ \fBecho "export LOCPATH=\\$HOME/.locale" &gt;&gt; $HOME/.bashrc\fP
$ \fBecho "export LANG=fi_SE.UTF-8" &gt;&gt; $HOME/.bashrc\fP
.fi
.SH SEE ALSO
.BR localedef (1),
.BR charmap (5),
.BR locale (5),
.BR locale (7)
.SH COLOPHON
This page is part of release 4.11 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2001 Richard Braakman
.\" Copyright (C) 2004 Alastair McKinstry
.\" Copyright (C) 2005 Lars Wirzenius
.\" Copyright (C) 2014 Marko Myllynen
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" &lt;http://www.gnu.org/licenses/&gt;.
.\" %%%LICENSE_END
.\"
.\" This manual page was initially written by Richard Braakman
.\" on behalf of the Debian GNU/Linux Project and anyone else
.\" who wants it. It was amended by Alastair McKinstry to
.\" explain new ISO 14652 elements, and amended further by
.\" Lars Wirzenius to document new functionality (as of GNU
.\" C library 2.3.5).
.\"
.TH LOCALEDEF 1 2016-07-17 "Linux" "Linux User Manual"
.SH NAME
localedef \- compile locale definition files
.SH SYNOPSIS
.ad l
.nh
.B localedef
.RI [ options ]
.I outputpath
.br
.B "localedef \-\-list\-archive"
.RI [ options ]
.br
.B "localedef \-\-delete\-from\-archive"
.RI [ options ]
.IR localename " ..."
.br
.B "localedef \-\-add\-to\-archive"
.RI [ options ]
.IR compiledpath
.br
.B "localedef \-\-version"
.br
.B "localedef \-\-help"
.br
.B "localedef \-\-usage"
.ad b
.hy
.SH DESCRIPTION
The
.B localedef
program reads the indicated
.I charmap
and
.I input
files, compiles them to a binary form quickly usable by the
locale functions in the C library
.RB ( setlocale (3),
.BR localeconv (3),
etc.), and places the output in
.IR outputpath .

The
.I outputpath
argument is interpreted as follows:
.IP * 3
If
.I outputpath
contains a slash character ('/'), it is interpreted as the name of the
directory where the output definitions are to be stored.
In this case, there is a separate output file for each locale category
.RI ( LC_TIME ,
.IR LC_NUMERIC ,
and so on).
.IP *
If the
.B \-\-no\-archive
option is used,
.I outputpath
is the name of a subdirectory in
.I /usr/lib/locale
where per-category compiled files are placed.
.IP *
Otherwise,
.I outputpath
is the name of a locale and the compiled locale data is added to the
archive file
.IR /usr/lib/locale/locale-archive .
A locale archive is a memory-mapped file which contains all the
system-provided locales;
it is used by all localized programs when the environment variable
.B LOCPATH
is not set.
.PP
In any case,
.B localedef
aborts if the directory in which it tries to write locale files has
not already been created.
.PP
If no
.I charmapfile
is given, the value
.I ANSI_X3.4-1968
(for ASCII) is used by default.
If no
.I inputfile
is given, or if it is given as a dash
(\-),
.B localedef
reads from standard input.
.SH OPTIONS
.SS Operation-selection options
A few options direct
.B localedef
to do something other than compile locale definitions.
Only one of these options should be used at a time.
.TP
.B \-\-delete\-from\-archive
Delete the named locales from the locale archive file.
.TP
.B \-\-list\-archive
List the locales contained in the locale archive file.
.TP
.B \-\-add\-to\-archive
Add the
.I compiledpath
directories to the locale archive file.
The directories should have been created by previous runs of
.BR localedef ,
using
.BR \-\-no\-archive .
.SS Other options
Some of the following options are sensible only for certain operations;
generally, it should be self-evident which ones.
.TP
.BI \-f " charmapfile" "\fR, \fP\-\-charmap=" charmapfile
Specify the file that defines the character set
that is used by the input file.
If
.I charmapfile
contains a slash character ('/'),
it is interpreted as the name of the character map.
Otherwise, the file is sought in the current directory
and the default directory for character maps.
If the environment variable
.B I18NPATH
is set,
.I $I18NPATH/charmaps/
and
.I $I18NPATH/
are also searched after the current directory.
The default directory for character maps is printed by
.BR "localedef \-\-help" .
.TP
.BI \-i " inputfile" "\fR, \fP\-\-inputfile=" inputfile
Specify the locale definition file to compile.
The file is sought in the current directory
and the default directory for locale definition files.
If the environment variable
.B I18NPATH
is set,
.I $I18NPATH/locales/
and
.I $I18NPATH
are also searched after the current directory.
The default directory for locale definition files is printed by
.BR "localedef \-\-help" .
.TP
.BI \-u " repertoirefile" "\fR, \fP\-\-repertoire-map=" repertoirefile
Read mappings from symbolic names to Unicode code points from
.IR repertoirefile .
If
.I repertoirefile
contains a slash character ('/'),
it is interpreted as the pathname of the repertoire map.
Otherwise, the file is sought in the current directory
and the default directory for repertoire maps.
If the environment variable
.B I18NPATH
is set,
.I $I18NPATH/repertoiremaps/
and
.I $I18NPATH
are also searched after the current directory.
The default directory for repertoire maps is printed by
.BR "localedef \-\-help" .
.TP
.BI \-A " aliasfile" "\fR, \fP\-\-alias\-file=" aliasfile
Use
.I aliasfile
to look up aliases for locale names.
There is no default aliases file.
.TP
.BI \-\-prefix= pathname
Set the prefix to be prepended to the full archive pathname.
By default, the prefix is empty.
Setting the prefix to
.IR foo ,
the archive would be placed in
.IR foo/usr/lib/locale/locale-archive .
.TP
.BR \-c ", " \-\-force
Write the output files even if warnings were generated about the input
file.
.TP
.BR \-v ", " \-\-verbose
Generate extra warnings about errors that are normally ignored.
.TP
.B \-\-quiet
Suppress all notifications and warnings, and report only fatal errors.
.TP
.B \-\-posix
Conform strictly to POSIX.  Implies
.BR \-\-verbose .
This option currently has no other effect.
POSIX conformance is assumed if the environment variable
.B POSIXLY_CORRECT
is set.
.TP
.B \-\-replace
Replace a locale in the locale archive file.
Without this option, if the locale is in the archive file already,
an error occurs.
.TP
.B \-\-no\-archive
Do not use the locale archive file, instead create
.I outputpath
as a subdirectory in the same directory as the locale archive file,
and create separate output files for locale categories in it.
This is helpful to prevent system locale archive updates from overwriting
custom locales created with
.BR localedef .
.TP
.BR \-? ", " \-\-help
Print a usage summary and exit.
Also prints the default paths used by
.BR localedef .
.TP
.B "\-\-usage"
Print a short usage summary and exit.
.TP
.BR \-V ", " \-\-version
Print the version number, license, and disclaimer of warranty for
.BR localedef .
.SH EXIT STATUS
One of the following exit values can be returned by
.BR localedef :
.RS 3
.TP 10
.B 0
Command completed successfully.
.TP
.B 1
Warnings or errors occurred, output files were written.
.TP
.B 4
Errors encountered, no output created.
.RE
.SH ENVIRONMENT
.TP
.B POSIXLY_CORRECT
The
.B \-\-posix
flag is assumed if this environment variable is set.
.TP
.B I18NPATH
A colon-separated list of search directories for files.
.SH FILES
.TP
.I /usr/share/i18n/charmaps
Usual default character map path.
.TP
.I /usr/share/i18n/locales
Usual default path for locale definition files.
.TP
.I /usr/share/i18n/repertoiremaps
Usual default repertoire map path.
.TP
.I /usr/lib/locale/locale-archive
Usual default locale archive location.
.TP
.I /usr/lib/locale
Usual default path for compiled individual locale data files.
.TP
.I outputpath/LC_ADDRESS
An output file that contains information about formatting of
addresses and geography-related items.
.TP
.I outputpath/LC_COLLATE
An output file that contains information about the rules for comparing
strings.
.TP
.I outputpath/LC_CTYPE
An output file that contains information about character classes.
.TP
.I outputpath/LC_IDENTIFICATION
An output file that contains metadata about the locale.
.TP
.I outputpath/LC_MEASUREMENT
An output file that contains information about locale measurements
(metric versus US customary).
.TP
.I outputpath/LC_MESSAGES/SYS_LC_MESSAGES
An output file that contains information about the language messages
should be printed in, and what an affirmative or negative answer looks
like.
.TP
.I outputpath/LC_MONETARY
An output file that contains information about formatting of monetary
values.
.TP
.I outputpath/LC_NAME
An output file that contains information about salutations for persons.
.TP
.I outputpath/LC_NUMERIC
An output file that contains information about formatting of nonmonetary
numeric values.
.TP
.I outputpath/LC_PAPER
An output file that contains information about settings related to
standard paper size.
.TP
.I outputpath/LC_TELEPHONE
An output file that contains information about formats to be used with
telephone services.
.TP
.I outputpath/LC_TIME
An output file that contains information about formatting of data and
time values.
.SH CONFORMING TO
POSIX.1-2008.
.SH EXAMPLE
Compile the locale files for Finnish in the UTF\-8 character set
and add it to the default locale archive with the name
.BR fi_FI.UTF\-8 :
.PP
.RS
localedef \-f UTF\-8 \-i fi_FI fi_FI.UTF\-8
.RE
.PP
The next example does the same thing, but generates files into the
.I fi_FI.UTF\-8
directory which can then be used by programs when the environment
variable
.B LOCPATH
is set to the current directory (note that the last argument must
contain a slash):
.PP
.RS
localedef \-f UTF\-8 \-i fi_FI ./fi_FI.UTF\-8
.RE
.SH SEE ALSO
.BR locale (1),
.BR charmap (5),
.BR locale (5),
.BR repertoiremap (5),
.BR locale (7)
.SH COLOPHON
This page is part of release 4.11 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1983, 1990, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	@(#)logger.1	8.1 (Berkeley) 6/6/93
.\"
.TH LOGGER "1" "November 2015" "util-linux" "User Commands"
.SH NAME
logger \- enter messages into the system log
.SH SYNOPSIS
.B logger
[options]
.RI [ message ]
.SH DESCRIPTION
.B logger
makes entries in the system log.
.sp
When the optional \fImessage\fR argument is present, it is written
to the log.  If it is not present, and the \fB\-f\fR option is not
given either, then standard input is logged.
.SH OPTIONS
.TP
.BR \-d , " \-\-udp"
Use datagrams (UDP) only.  By default the connection is tried to the
syslog port defined in /etc/services, which is often 514 .
.TP
.BR \-e , " \-\-skip-empty"
Ignore empty lines when processing files.  An empty line
is defined to be a line without any characters.  Thus a line consisting
only of whitespace is NOT considered empty.
Note that when the \fB\-\-prio\-prefix\fR option is specified, the priority
is not part of the line.  Thus an empty line in this mode is a line that does
not have any characters after the priority prefix (e.g. \fB&lt;13&gt;\fR).
.TP
.BR \-f , " \-\-file " \fIfile
Log the contents of the specified \fIfile\fR.
This option cannot be combined with a command-line message.
.TP
.B \-i
Log the PID of the logger process with each line.
.TP
.BR "\-\-id" [ =\fIid ]
Log the PID of the logger process with each line.  When the optional
argument \fIid\fR is specified, then it is used instead of the logger
command's PID.  The use of \fB\-\-id=$$\fR
(PPID) is recommended in scripts that send several messages.

Note that the system logging infrastructure (for example \fBsystemd\fR when
listening on /dev/log) may follow local socket credentials to overwrite the
PID specified in the message.
.BR logger (1)
is able to set those socket credentials to the given \fIid\fR, but only if you
have root permissions and a process with the specified PID exists, otherwise
the socket credentials are not modified and the problem is silently ignored.
.TP
.BR \-\-journald [ =\fIfile ]
Write a systemd journal entry.  The entry is read from the given \fIfile\fR,
when specified, otherwise from standard input.
Each line must begin with a field that is accepted by journald; see
.BR systemd.journal-fields (7)
for details.  The use of a MESSAGE_ID field is generally a good idea, as it
makes finding entries easy.  Examples:
.IP
.nf
\fB    logger \-\-journald &lt;&lt;end
\fB    MESSAGE_ID=67feb6ffbaf24c5cbec13c008dd72309
\fB    MESSAGE=The dogs bark, but the caravan goes on.
\fB    DOGS=bark
\fB    CARAVAN=goes on
\fB    end
.IP
\fB    logger \-\-journald=entry.txt
.fi
.IP
Notice that
.B \-\-journald
will ignore values of other options, such as priority.  If priority is
needed it must be within input, and use PRIORITY field.  The simple
execution of
.B journalctl
will display MESSAGE field.  Use
.B journalctl \-\-output json-pretty
to see rest of the fields.
.TP
.BR \-\-msgid " \fImsgid
Sets the RFC5424 MSGID field.  Note that the space character is not permitted
inside of \fImsgid\fR.  This option is only used if \fB\-\-rfc5424\fR is
specified as well; otherwise, it is silently ignored.
.TP
.BR \-n , " \-\-server " \fIserver
Write to the specified remote syslog \fIserver\fR
instead of to the system log socket.  Unless
\fB\-\-udp\fR or \fB\-\-tcp\fR
is specified, \fBlogger\fR will first try to use UDP,
but if this fails a TCP connection is attempted.
.TP
.BR \-\-no\-act
Causes everything to be done except for writing the log message to the system
log, and removing the connection or the journal.  This option can be used
together with \fB\-\-stderr\fR for testing purposes.
.TP
.B \-\-octet\-count
Use the RFC 6587 octet counting framing method for sending messages.
When this option is not used, the default is no framing on UDP, and
RFC6587 non-transparent framing (also known as octet stuffing) on TCP.
.TP
.BR \-P , " \-\-port " \fIport
Use the specified \fIport\fR.  When this option is not specified, the
port defaults to syslog for udp and to syslog-conn for tcp connections.
.TP
.BR \-p , " \-\-priority " \fIpriority
Enter the message into the log with the specified \fIpriority\fR.
The priority may be specified numerically or as a
.IR facility . level
pair.
For example, \fB\-p local3.info\fR
logs the message as informational in the local3 facility.
The default is \fBuser.notice\fR.
.TP
.B \-\-prio\-prefix
Look for a syslog prefix on every line read from standard input.
This prefix is a decimal number within angle brackets that encodes both
the facility and the level.  The number is constructed by multiplying the
facility by 8 and then adding the level.  For example, \fBlocal0.info\fR,
meaning facility=16 and level=6, becomes \fB&lt;134&gt;\fR.
.sp
If the prefix contains no facility, the facility defaults to what is
specified by the \fB\-p\fR option.  Similarly, if no prefix is provided,
the line is logged using the \fIpriority\fR given with \fB\-p\fR.
.sp
This option doesn't affect a command-line message.
.TP
.B \-\-rfc3164
Use the RFC 3164 BSD syslog protocol to submit messages to a remote server.
.TP
.BR \-\-rfc5424 [ =\fIwithout ]
Use the RFC 5424 syslog protocol to submit messages to a remote server.
The optional \fIwithout\fR argument can be a comma-separated list of
the following values: \fBnotq\fR, \fBnotime\fR, \fBnohost\fR.

The \fBnotq\fR value suppresses the time-quality structured data
from the submitted message.  The time-quality information shows whether
the local clock was synchronized plus the maximum number of microseconds
the timestamp might be off.  The time quality is also automatically
suppressed when \fB\-\-sd\-id timeQuality\fR is specified.

The \fBnotime\fR value (which implies \fBnotq\fR)
suppresses the complete sender timestamp that is in
ISO-8601 format, including microseconds and timezone.

The \fBnohost\fR value suppresses
.BR gethostname (2)
information from the message header.
.IP
The RFC 5424 protocol has been the default for
.B logger
since version 2.26.
.TP
.BR \-s , " \-\-stderr"
Output the message to standard error as well as to the system log.
.TP
.BR "\-\-sd\-id \fIname" [ @\fIdigits ]
Specifies a structured data element ID for an RFC 5424 message header.  The
option has to be used before \fB\-\-sd\-param\fR to introduce a new element.
The number of structured data elements is unlimited.  The ID (\fIname\fR plus
possibly \fB@\fIdigits\fR) is case-sensitive and uniquely identifies the type
and purpose of the element.  The same ID must not exist more than once in
a message.  The \fB@\fIdigits\fR part is required for user-defined
non-standardized IDs.

\fBlogger\fR currently generates the \fBtimeQuality\fR standardized element
only.  RFC 5424 also describes the elements \fBorigin\fR (with parameters
ip, enterpriseId, software and swVersion) and \fBmeta\fR (with parameters
sequenceId, sysUpTime and language).
These element IDs may be specified without the \fB@\fIdigits\fR suffix.

.TP
.BR "\-\-sd\-param " \fIname ="\fIvalue\fB"
Specifies a structured data element parameter, a name and value pair.
The option has to be used after \fB\-\-sd\-id\fR and may be specified more
than once for the same element.  Note that the quotation marks around
\fIvalue\fR are required and must be escaped on the command line.
.IP
.nf
\fB    logger \-\-rfc5424 \-\-sd-id zoo@123               \\
\fB                     \-\-sd-param tiger=\\"hungry\\"   \\
\fB                     \-\-sd-param zebra=\\"running\\"  \\
\fB                     \-\-sd-id manager@123           \\
\fB                     \-\-sd-param onMeeting=\\"yes\\"  \\
\fB                     "this is message"
.fi
.IP
produces:
.IP
.nf
\fB  &lt;13&gt;1 2015-10-01T14:07:59.168662+02:00 ws kzak - - [timeQuality tzKnown="1" isSynced="1" syncAccuracy="218616"][zoo@123 tiger="hungry" zebra="running"][manager@123 onMeeting="yes"] this is message
.fi
.IP
.TP
.BR \-\-size " \fIsize
Sets the maximum permitted message size to \fIsize\fR.  The default
is 1KiB characters, which is the limit traditionally used and specified
in RFC 3164.  With RFC 5424, this limit has become flexible.  A good assumption
is that RFC 5424 receivers can at least process 4KiB messages.

Most receivers accept messages larger than 1KiB over any type of syslog
protocol.  As such, the \fB\-\-size\fR option affects logger in
all cases (not only when \fB\-\-rfc5424\fR was used).

Note: the message-size limit limits the overall message size, including
the syslog header.  Header sizes vary depending on the selected options and
the hostname length.  As a rule of thumb, headers are usually not longer than
50 to 80 characters.  When selecting a maximum message size, it is important
to ensure that the receiver supports the max size as well, otherwise messages
may become truncated.  Again, as a rule of thumb two to four KiB message size
should generally be OK, whereas anything larger should be verified to work.

.TP
.BR \-\-socket\-errors [ =\fImode ]
Print errors about Unix socket connections.  The \fImode\fR can be a value of
\fBoff\fR, \fBon\fR, or \fBauto\fR.  When the mode is auto logger will detect
if the init process is systemd, and if so assumption is made /dev/log can be
used early at boot.  Other init systems lack of /dev/log will not cause errors
that is identical with messaging using
.BR openlog (3)
system call.  The
.BR logger (1)
before version 2.26 used openlog, and hence was unable to detected loss of
messages sent to Unix sockets.
.IP
The default mode is \fBauto\fR.  When errors are not enabled lost messages are
not communicated and will result to successful return value of
.BR logger (1)
invocation.
.TP
.BR \-T , " \-\-tcp"
Use stream (TCP) only.  By default the connection is tried to the
.I syslog-conn
port defined in /etc/services, which is often
.IR 601 .
.TP
.BR \-t , " \-\-tag " \fItag
Mark every line to be logged with the specified
.IR tag .
The default tag is the name of the user logged in on the terminal (or a user
name based on effective user ID).
.TP
.BR \-u , " \-\-socket " \fIsocket
Write to the specified
.I socket
instead of to the system log socket.
.TP
.B \-\-
End the argument list.  This allows the \fImessage\fR
to start with a hyphen (\-).
.TP
.BR \-V , " \-\-version"
Display version information and exit.
.TP
.BR \-h , " \-\-help"
Display help text and exit.
.SH RETURN VALUE
The
.B logger
utility exits 0 on success, and &gt;0 if an error occurs.
.SH FACILITIES AND LEVELS
Valid facility names are:
.IP
.TS
tab(:);
left l l.
\fBauth
\fBauthpriv\fR:for security information of a sensitive nature
\fBcron
\fBdaemon
\fBftp
\fBkern\fR:cannot be generated from userspace process, automatically converted to \fBuser
\fBlpr
\fBmail
\fBnews
\fBsyslog
\fBuser
\fBuucp
\fBlocal0
to:
\fBlocal7
\fBsecurity\fR:deprecated synonym for \fBauth
.TE
.PP
Valid level names are:
.IP
.TS
tab(:);
left l l.
\fBemerg
\fBalert
\fBcrit
\fBerr
\fBwarning
\fBnotice
\fBinfo
\fBdebug
\fBpanic\fR:deprecated synonym for \fBemerg
\fBerror\fR:deprecated synonym for \fBerr
\fBwarn\fR:deprecated synonym for \fBwarning
.TE
.PP
For the priority order and intended purposes of these facilities and levels, see
.BR syslog (3).
.SH EXAMPLES
.B logger System rebooted
.br
.B logger \-p local0.notice \-t HOSTIDM \-f /dev/idmc
.br
.B logger \-n loghost.example.com System rebooted
.SH SEE ALSO
.BR journalctl (1),
.BR syslog (3),
.BR systemd.journal-fields (7)
.SH STANDARDS
The
.B logger
command is expected to be IEEE Std 1003.2 ("POSIX.2") compatible.
.SH AVAILABILITY
The logger command is part of the util-linux package and is available from
.UR ftp://\:ftp.kernel.org\:/pub\:/linux\:/utils\:/util-linux/
Linux Kernel Archive
.UE .
.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.
.TH LOGNAME "1" "March 2017" "GNU coreutils 8.27" "User Commands"
.SH NAME
logname \- print user\'s login name
.SH SYNOPSIS
.B logname
[\fI\,OPTION\/\fR]
.SH DESCRIPTION
.\" Add any additional description here
.PP
Print the name of the current user.
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-\-version\fR
output version information and exit
.SH AUTHOR
Written by FIXME: unknown.
.SH "REPORTING BUGS"
GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt;
.br
Report logname translation bugs to &lt;http://translationproject.org/team/&gt;
.SH COPYRIGHT
Copyright \(co 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
Full documentation at: &lt;http://www.gnu.org/software/coreutils/logname&gt;
.br
or available locally via: info \(aq(coreutils) logname invocation\(aq
.\"
.\" lp man page for CUPS.
.\"
.\" Copyright 2007-2016 by Apple Inc.
.\" Copyright 1997-2006 by Easy Software Products.
.\"
.\" These coded instructions, statements, and computer programs are the
.\" property of Apple Inc. and are protected by Federal copyright
.\" law.  Distribution and use rights are outlined in the file "LICENSE.txt"
.\" which should have been included with this file.  If this file is
.\" file is missing or damaged, see the license at "http://www.cups.org/".
.\"
.TH lp 1 "CUPS" "2 May 2016" "Apple Inc."
.SH NAME
lp \- print files
.SH SYNOPSIS
.B lp
[
.B \-E
] [
.B \-U
.I username
] [
.B \-c
] [
\fB\-d \fIdestination\fR[\fB/\fIinstance\fR]
] [
\fB\-h \fIhostname\fR[\fB:\fIport\fR]
] [
.B \-m
] [
.B \-n
.I num-copies
] [
\fB\-o \fIoption\fR[\fB=\fIvalue\fR]
] [
.B \-q
.I priority
] [
.B \-s
] [
.B \-t
.I title
] [
.B \-H
.I handling
] [
.B \-P
.I page-list
] [
.B \-\-
] [
.I file(s)
]
.br
.B lp
[
.B \-E
] [
.B \-U
.I username
] [
.B \-c
] [
\fB\-h \fIhostname\fR[\fB:\fIport\fR]
] [
.B \-i
.I job-id
] [
.B \-n
.I num-copies
] [
\fB\-o \fIoption\fR[\fB=\fIvalue\fR]
] [
.B \-q
.I priority
] [
.B \-t
.I title
] [
.B \-H
.I handling
] [
.B \-P
.I page-list
]
.SH DESCRIPTION
\fBlp\fR submits files for printing or alters a pending job.
Use a filename of "-" to force printing from the standard input.
.SS THE DEFAULT DESTINATION
CUPS provides many ways to set the default destination. The \fBLPDEST\fR and \fBPRINTER\fR environment variables are consulted first.
If neither are set, the current default set using the
.BR lpoptions (1)
command is used, followed by the default set using the
.BR lpadmin (8)
command.
.SH OPTIONS
The following options are recognized by \fIlp\fR:
.TP 5
.B \-\-
Marks the end of options; use this to print a file whose name begins with a dash (\-).
.TP 5
.B \-E
Forces encryption when connecting to the server.
.TP 5
\fB\-U \fIusername\fR
Specifies the username to use when connecting to the server.
.TP 5
.B \-c
This option is provided for backwards-compatibility only. On systems that support it, this option forces the print file to be copied to the spool directory before printing.
In CUPS, print files are always sent to the scheduler via IPP which has the same effect.
.TP 5
\fB\-d \fIdestination\fR
Prints files to the named printer.
.TP 5
\fB\-h \fIhostname\fR[\fB:\fIport\fR]
Chooses an alternate server.
.TP 5
\fB\-i \fIjob-id\fR
Specifies an existing job to modify.
.TP 5
.B \-m
Sends an email when the job is completed.
.TP 5
\fB\-n \fIcopies\fR
Sets the number of copies to print.
.TP 5
\fB\-o "\fIname\fB=\fIvalue \fR[ ... \fIname\fB=\fIvalue \fR]\fB"\fR
Sets one or more job options.
See "COMMON JOB OPTIONS" below.
.TP 5
\fB\-q \fIpriority\fR
Sets the job priority from 1 (lowest) to 100 (highest).
The default priority is 50.
.TP 5
.B \-s
Do not report the resulting job IDs (silent mode.)
.TP 5
\fB\-t "\fIname\fB"\fR
Sets the job name.
.TP 5
\fB\-H \fIhh:mm\fR
.TP 5
\fB\-H hold\fR
.TP 5
\fB-H immediate\fR
.TP 5
\fB-H restart\fR
.TP 5
\fB-H resume\fR
Specifies when the job should be printed.
A value of \fIimmediate\fR will print the file immediately, a value of \fIhold\fR will hold the job indefinitely, and a UTC time value (HH:MM) will hold the job until the specified UTC (not local) time.
Use a value of \fIresume\fR with the \fI-i\fR option to resume a held job.
Use a value of \fIrestart\fR with the \fI-i\fR option to restart a completed job.
.TP 5
\fB\-P \fIpage-list\fR
Specifies which pages to print in the document.
The list can contain a list of numbers and ranges (#-#) separated by commas, e.g., "1,3-5,16".
The page numbers refer to the output pages and not the document's original pages - options like "number-up" can affect the numbering of the pages.
.SS COMMON JOB OPTIONS
Aside from the printer-specific options reported by the
.BR lpoptions (1)
command, the following generic options are available:
.TP 5
\fB\-o collate=true\fR
Prints collated copies.
.TP 5
\fB\-o fit\-to\-page\fR
Scales the print file to fit on the page.
.TP 5
\fB\-o job-hold-until=\fIwhen\fR
Holds the job until the specified local time.
"when" can be "indefinite" to hold the until released, "day-time" to print the job between 6am and 6pm local time, "night" to print the job between 6pm and 6am local time, "second-shift" to print the job between 4pm and 12am local time, "third-shift" to print the job between 12am and 8am local time, or "weekend" to print the job on Saturday or Sunday.
.TP 5
\fB\-o job-hold-until=\fIhh:mm\fR
Holds the job until the specified time in hours and minutes UTC.
.TP 5
\fB\-o job-priority=\fIpriority\fR
Set the priority to a value from 1 (lowest) to 100 (highest), which influences when a job is scheduled for printing.
The default priority is typically 50.
.TP 5
\fB\-o job-sheets=\fIname\fR\fR
Prints a cover page (banner) with the document.
The "name" can be "classified", "confidential", "secret", "standard", "topsecret", or "unclassified".
.TP 5
\fB\-o job-sheets=\fIstart-name,end-name\fR\fR
Prints cover pages (banners) with the document.
.TP 5
\fB\-o media=\fIsize\fR
Sets the page size to \fIsize\fR. Most printers support at least the size names "a4", "letter", and "legal".
.TP 5
\fB\-o mirror\fR
Mirrors each page.
.TP 5
\fB\-o number\-up=\fR{\fI2|4|6|9|16\fR}
Prints 2, 4, 6, 9, or 16 document (input) pages on each output page.
.TP 5
\fB\-o number\-up\-layout=\fIlayout\fR
Specifies the layout of pages with the "number-up" option.
The "layout" string can be "btlr", "btrl", "lrbt", "lrtb", "rlbt", "rltb", "tblr", or "tbrl" - the first two letters determine the column order while the second two letters determine the row order.
"bt" is bottom-to-top, "lr" is left-to-right, "rl" is right-to-left, and "tb" is top-to-bottom.
.TP 5
\fB\-o orientation\-requested=4\fR
Prints the job in landscape (rotated 90 degrees counter-clockwise).
.TP 5
\fB\-o orientation\-requested=5\fR
Prints the job in landscape (rotated 90 degrees clockwise).
.TP 5
\fB\-o orientation\-requested=6\fR
Prints the job in reverse portrait (rotated 180 degrees).
.TP 5
\fB\-o outputorder=reverse\fR
Prints pages in reverse order.
.TP 5
\fB\-o page\-border=\fIborder\fR
Prints a border around each document page.
"border" is "double", "double\-thick", "single", or "single\-thick".
.TP 5
\fB\-o page\-ranges=\fIpage-list\fR
Specifies which pages to print in the document.
The list can contain a list of numbers and ranges (#-#) separated by commas, e.g., "1,3-5,16".
The page numbers refer to the output pages and not the document's original pages - options like "number-up" can affect the numbering of the pages.
.TP 5
\fB\-o sides=one\-sided\fR
Prints on one side of the paper.
.TP 5
\fB\-o sides=two\-sided\-long\-edge\fR
Prints on both sides of the paper for portrait output.
.TP 5
\fB\-o sides=two\-sided\-short\-edge\fR
Prints on both sides of the paper for landscape output.
.SH CONFORMING TO
Unlike the System V printing system, CUPS allows printer names to contain any printable character except SPACE, TAB, "/", or "#".
Also, printer and class names are \fInot\fR case-sensitive.
.LP
The \fI-q\fR option accepts a different range of values than the Solaris lp command, matching the IPP job priority values (1-100, 100 is highest priority) instead of the Solaris values (0-39, 0 is highest priority).
.SH EXAMPLES
Print two copies of a document to the default printer:
.nf

lp -n 2 filename

.fi
Print a double-sided legal document to a printer called "foo":
.nf

lp -d foo -o media=legal -o sides=two-sided-long-edge filename

.fi
Print a presentation document 2-up to a printer called "foo":
.nf

lp -d foo -o number-up=2 filename
.fi
.SH SEE ALSO
.BR cancel (1),
.BR lpadmin (8),
.BR lpoptions (1),
.BR lpq (1),
.BR lpr (1),
.BR lprm (1),
.BR lpstat (1),
CUPS Online Help (http://localhost:631/help)
.SH COPYRIGHT
Copyright \[co] 2007-2017 by Apple Inc.
.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.
.TH LS "1" "March 2017" "GNU coreutils 8.27" "User Commands"
.SH NAME
ls \- list directory contents
.SH SYNOPSIS
.B ls
[\fI\,OPTION\/\fR]... [\fI\,FILE\/\fR]...
.SH DESCRIPTION
.\" Add any additional description here
.PP
List information about the FILEs (the current directory by default).
Sort entries alphabetically if none of \fB\-cftuvSUX\fR nor \fB\-\-sort\fR is specified.
.PP
Mandatory arguments to long options are mandatory for short options too.
.TP
\fB\-a\fR, \fB\-\-all\fR
do not ignore entries starting with .
.TP
\fB\-A\fR, \fB\-\-almost\-all\fR
do not list implied . and ..
.TP
\fB\-\-author\fR
with \fB\-l\fR, print the author of each file
.TP
\fB\-b\fR, \fB\-\-escape\fR
print C\-style escapes for nongraphic characters
.TP
\fB\-\-block\-size\fR=\fI\,SIZE\/\fR
scale sizes by SIZE before printing them; e.g.,
\&amp;'\-\-block\-size=M' prints sizes in units of
1,048,576 bytes; see SIZE format below
.TP
\fB\-B\fR, \fB\-\-ignore\-backups\fR
do not list implied entries ending with ~
.TP
\fB\-c\fR
with \fB\-lt\fR: sort by, and show, ctime (time of last
modification of file status information);
with \fB\-l\fR: show ctime and sort by name;
otherwise: sort by ctime, newest first
.TP
\fB\-C\fR
list entries by columns
.TP
\fB\-\-color\fR[=\fI\,WHEN\/\fR]
colorize the output; WHEN can be 'always' (default
if omitted), 'auto', or 'never'; more info below
.TP
\fB\-d\fR, \fB\-\-directory\fR
list directories themselves, not their contents
.TP
\fB\-D\fR, \fB\-\-dired\fR
generate output designed for Emacs' dired mode
.TP
\fB\-f\fR
do not sort, enable \fB\-aU\fR, disable \fB\-ls\fR \fB\-\-color\fR
.TP
\fB\-F\fR, \fB\-\-classify\fR
append indicator (one of */=&gt;@|) to entries
.TP
\fB\-\-file\-type\fR
likewise, except do not append '*'
.TP
\fB\-\-format\fR=\fI\,WORD\/\fR
across \fB\-x\fR, commas \fB\-m\fR, horizontal \fB\-x\fR, long \fB\-l\fR,
single\-column \fB\-1\fR, verbose \fB\-l\fR, vertical \fB\-C\fR
.TP
\fB\-\-full\-time\fR
like \fB\-l\fR \fB\-\-time\-style\fR=\fI\,full\-iso\/\fR
.TP
\fB\-g\fR
like \fB\-l\fR, but do not list owner
.TP
\fB\-\-group\-directories\-first\fR
group directories before files;
.IP
can be augmented with a \fB\-\-sort\fR option, but any
use of \fB\-\-sort\fR=\fI\,none\/\fR (\fB\-U\fR) disables grouping
.TP
\fB\-G\fR, \fB\-\-no\-group\fR
in a long listing, don't print group names
.TP
\fB\-h\fR, \fB\-\-human\-readable\fR
with \fB\-l\fR and/or \fB\-s\fR, print human readable sizes
(e.g., 1K 234M 2G)
.TP
\fB\-\-si\fR
likewise, but use powers of 1000 not 1024
.TP
\fB\-H\fR, \fB\-\-dereference\-command\-line\fR
follow symbolic links listed on the command line
.TP
\fB\-\-dereference\-command\-line\-symlink\-to\-dir\fR
follow each command line symbolic link
.IP
that points to a directory
.TP
\fB\-\-hide\fR=\fI\,PATTERN\/\fR
do not list implied entries matching shell PATTERN
(overridden by \fB\-a\fR or \fB\-A\fR)
.TP
\fB\-\-indicator\-style\fR=\fI\,WORD\/\fR
append indicator with style WORD to entry names:
none (default), slash (\fB\-p\fR),
file\-type (\fB\-\-file\-type\fR), classify (\fB\-F\fR)
.TP
\fB\-i\fR, \fB\-\-inode\fR
print the index number of each file
.TP
\fB\-I\fR, \fB\-\-ignore\fR=\fI\,PATTERN\/\fR
do not list implied entries matching shell PATTERN
.TP
\fB\-k\fR, \fB\-\-kibibytes\fR
default to 1024\-byte blocks for disk usage
.TP
\fB\-l\fR
use a long listing format
.TP
\fB\-L\fR, \fB\-\-dereference\fR
when showing file information for a symbolic
link, show information for the file the link
references rather than for the link itself
.TP
\fB\-m\fR
fill width with a comma separated list of entries
.TP
\fB\-n\fR, \fB\-\-numeric\-uid\-gid\fR
like \fB\-l\fR, but list numeric user and group IDs
.TP
\fB\-N\fR, \fB\-\-literal\fR
print entry names without quoting
.TP
\fB\-o\fR
like \fB\-l\fR, but do not list group information
.TP
\fB\-p\fR, \fB\-\-indicator\-style\fR=\fI\,slash\/\fR
append / indicator to directories
.TP
\fB\-q\fR, \fB\-\-hide\-control\-chars\fR
print ? instead of nongraphic characters
.TP
\fB\-\-show\-control\-chars\fR
show nongraphic characters as\-is (the default,
unless program is 'ls' and output is a terminal)
.TP
\fB\-Q\fR, \fB\-\-quote\-name\fR
enclose entry names in double quotes
.TP
\fB\-\-quoting\-style\fR=\fI\,WORD\/\fR
use quoting style WORD for entry names:
literal, locale, shell, shell\-always,
shell\-escape, shell\-escape\-always, c, escape
.TP
\fB\-r\fR, \fB\-\-reverse\fR
reverse order while sorting
.TP
\fB\-R\fR, \fB\-\-recursive\fR
list subdirectories recursively
.TP
\fB\-s\fR, \fB\-\-size\fR
print the allocated size of each file, in blocks
.TP
\fB\-S\fR
sort by file size, largest first
.TP
\fB\-\-sort\fR=\fI\,WORD\/\fR
sort by WORD instead of name: none (\fB\-U\fR), size (\fB\-S\fR),
time (\fB\-t\fR), version (\fB\-v\fR), extension (\fB\-X\fR)
.TP
\fB\-\-time\fR=\fI\,WORD\/\fR
with \fB\-l\fR, show time as WORD instead of default
modification time: atime or access or use (\fB\-u\fR);
ctime or status (\fB\-c\fR); also use specified time
as sort key if \fB\-\-sort\fR=\fI\,time\/\fR (newest first)
.TP
\fB\-\-time\-style\fR=\fI\,STYLE\/\fR
with \fB\-l\fR, show times using style STYLE:
full\-iso, long\-iso, iso, locale, or +FORMAT;
FORMAT is interpreted like in 'date'; if FORMAT
is FORMAT1&lt;newline&gt;FORMAT2, then FORMAT1 applies
to non\-recent files and FORMAT2 to recent files;
if STYLE is prefixed with 'posix\-', STYLE
takes effect only outside the POSIX locale
.TP
\fB\-t\fR
sort by modification time, newest first
.TP
\fB\-T\fR, \fB\-\-tabsize\fR=\fI\,COLS\/\fR
assume tab stops at each COLS instead of 8
.TP
\fB\-u\fR
with \fB\-lt\fR: sort by, and show, access time;
with \fB\-l\fR: show access time and sort by name;
otherwise: sort by access time, newest first
.TP
\fB\-U\fR
do not sort; list entries in directory order
.TP
\fB\-v\fR
natural sort of (version) numbers within text
.TP
\fB\-w\fR, \fB\-\-width\fR=\fI\,COLS\/\fR
set output width to COLS.  0 means no limit
.TP
\fB\-x\fR
list entries by lines instead of by columns
.TP
\fB\-X\fR
sort alphabetically by entry extension
.TP
\fB\-Z\fR, \fB\-\-context\fR
print any security context of each file
.TP
\fB\-1\fR
list one file per line.  Avoid '\en' with \fB\-q\fR or \fB\-b\fR
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-\-version\fR
output version information and exit
.PP
The SIZE argument is an integer and optional unit (example: 10K is 10*1024).
Units are K,M,G,T,P,E,Z,Y (powers of 1024) or KB,MB,... (powers of 1000).
.PP
Using color to distinguish file types is disabled both by default and
with \fB\-\-color\fR=\fI\,never\/\fR.  With \fB\-\-color\fR=\fI\,auto\/\fR, ls emits color codes only when
standard output is connected to a terminal.  The LS_COLORS environment
variable can change the settings.  Use the dircolors command to set it.
.SS "Exit status:"
.TP
0
if OK,
.TP
1
if minor problems (e.g., cannot access subdirectory),
.TP
2
if serious trouble (e.g., cannot access command\-line argument).
.SH AUTHOR
Written by Richard M. Stallman and David MacKenzie.
.SH "REPORTING BUGS"
GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt;
.br
Report ls translation bugs to &lt;http://translationproject.org/team/&gt;
.SH COPYRIGHT
Copyright \(co 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
Full documentation at: &lt;http://www.gnu.org/software/coreutils/ls&gt;
.br
or available locally via: info \(aq(coreutils) ls invocation\(aq
.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.4.
.TH M4 "1" "December 2016" "GNU M4 1.4.18" "User Commands"
.SH NAME
m4 \- macro processor
.SH SYNOPSIS
.B m4
[\fI\,OPTION\/\fR]... [\fI\,FILE\/\fR]...
.SH DESCRIPTION
Process macros in FILEs.  If no FILE or if FILE is `\-', standard input
is read.
.PP
Mandatory or optional arguments to long options are mandatory or optional
for short options too.
.SS "Operation modes:"
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-\-version\fR
output version information and exit
.TP
\fB\-E\fR, \fB\-\-fatal\-warnings\fR
once: warnings become errors, twice: stop
execution at first error
.TP
\fB\-i\fR, \fB\-\-interactive\fR
unbuffer output, ignore interrupts
.TP
\fB\-P\fR, \fB\-\-prefix\-builtins\fR
force a `m4_' prefix to all builtins
.TP
\fB\-Q\fR, \fB\-\-quiet\fR, \fB\-\-silent\fR
suppress some warnings for builtins
.TP
\fB\-\-warn\-macro\-sequence\fR[=\fI\,REGEXP\/\fR]
warn if macro definition matches REGEXP,
.IP
default \e$\e({[^}]*}\e|[0\-9][0\-9]+\e)
.TP
\fB\-W\fR, \fB\-\-word\-regexp\fR=\fI\,REGEXP\/\fR
use REGEXP for macro name syntax
.SS "Preprocessor features:"
.TP
\fB\-D\fR, \fB\-\-define=NAME\fR[=\fI\,VALUE\/\fR]
define NAME as having VALUE, or empty
.TP
\fB\-I\fR, \fB\-\-include\fR=\fI\,DIRECTORY\/\fR
append DIRECTORY to include path
.TP
\fB\-s\fR, \fB\-\-synclines\fR
generate `#line NUM "FILE"' lines
.TP
\fB\-U\fR, \fB\-\-undefine\fR=\fI\,NAME\/\fR
undefine NAME
.SS "Limits control:"
.TP
\fB\-g\fR, \fB\-\-gnu\fR
override \fB\-G\fR to re\-enable GNU extensions
.TP
\fB\-G\fR, \fB\-\-traditional\fR
suppress all GNU extensions
.TP
\fB\-H\fR, \fB\-\-hashsize\fR=\fI\,PRIME\/\fR
set symbol lookup hash table size [509]
.TP
\fB\-L\fR, \fB\-\-nesting\-limit\fR=\fI\,NUMBER\/\fR
change nesting limit, 0 for unlimited [0]
.SS "Frozen state files:"
.TP
\fB\-F\fR, \fB\-\-freeze\-state\fR=\fI\,FILE\/\fR
produce a frozen state on FILE at end
.TP
\fB\-R\fR, \fB\-\-reload\-state\fR=\fI\,FILE\/\fR
reload a frozen state from FILE at start
.SS "Debugging:"
.TP
\fB\-d\fR, \fB\-\-debug\fR[=\fI\,FLAGS\/\fR]
set debug level (no FLAGS implies `aeq')
.TP
\fB\-\-debugfile\fR[=\fI\,FILE\/\fR]
redirect debug and trace output to FILE
(default stderr, discard if empty string)
.TP
\fB\-l\fR, \fB\-\-arglength\fR=\fI\,NUM\/\fR
restrict macro tracing size
.TP
\fB\-t\fR, \fB\-\-trace\fR=\fI\,NAME\/\fR
trace NAME when it is defined
.SS "FLAGS is any of:"
.TP
a
show actual arguments
.TP
c
show before collect, after collect and after call
.TP
e
show expansion
.TP
f
say current input file name
.TP
i
show changes in input files
.TP
l
say current input line number
.TP
p
show results of path searches
.TP
q
quote values as necessary, with a or e flag
.TP
t
trace for all macro calls, not only traceon'ed
.TP
x
add a unique macro call id, useful with c flag
.TP
V
shorthand for all of the above flags
.PP
If defined, the environment variable `M4PATH' is a colon\-separated list
of directories included after any specified by `\-I'.
.PP
Exit status is 0 for success, 1 for failure, 63 for frozen file version
mismatch, or whatever value was passed to the m4exit macro.
.SH AUTHOR
Written by Rene' Seindal.
.SH "REPORTING BUGS"
Report bugs to: bug\-m4@gnu.org
.br
GNU M4 home page: &lt;http://www.gnu.org/software/m4/&gt;
.br
General help using GNU software: &lt;http://www.gnu.org/gethelp/&gt;
.SH COPYRIGHT
Copyright \(co 2016 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
The full documentation for
.B m4
is maintained as a Texinfo manual.  If the
.B info
and
.B m4
programs are properly installed at your site, the command
.IP
.B info m4
.PP
should give you access to the complete manual.
.\" Copyright (c) 1980, 1990, 1993
.\"     The Regents of the University of California.  All rights reserved.
.\" Copyright (c) 2000
.\"     Gunnar Ritter.  All rights reserved.
.\" Copyright (c) 2012 - 2015 Steffen (Daode) Nurpmeso &lt;sdaoden@users.sf.net&gt;.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"     This product includes software developed by the University of
.\"     California, Berkeley and its contributors.
.\"     This product includes software developed by Gunnar Ritter
.\"     and his contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS 'AS IS' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"@ S-nail(1): v14.8.16 / 2017-01-27
.Dd Jan 27, 2017
.ds VV \\%v14.8.16
.ds UU \\%MAIL
.ds UA \\%Mail
.ds ua \\%mail
.ds VV \\%v14.8.16
.ds UR \\%mail.rc
.ds ur \\%~/.mailrc
.ds OB [Obsolete]
.ds OP [Option]
.ds IN [v15-compat]
.ds OU [no v15-compat]
.ds ID [v15 behaviour may differ]
.ds BY (Binary)
.ds RO (Read-only)
.Dt "\*(UU" 1
.Os
.\" Uncomment for mandoc(1) compat.:
.\".ds mx-toc-name TABLE OF CONTENTS
.Mx -enable -preprocessed
.Mx -anchor-spass Sh "NAME" 1
.Mx -anchor-spass Sh "SYNOPSIS" 2
.Mx -anchor-spass Sh "\*[mx-toc-name]" 3
.Mx -anchor-spass Sh "DESCRIPTION" 4
.Mx -anchor-spass Sh "COMMANDS" 5
.Mx -anchor-spass Sh "TILDE ESCAPES" 6
.Mx -anchor-spass Sh "VARIABLE OPTIONS" 7
.Mx -anchor-spass Sh "ENVIRONMENT" 8
.Mx -anchor-spass Sh "FILES" 9
.Mx -anchor-spass Sh "EXAMPLES" 10
.Mx -anchor-spass Sh "FAQ" 11
.Mx -anchor-spass Sh "SEE ALSO" 12
.Mx -anchor-spass Sh "HISTORY" 13
.Mx -anchor-spass Sh "AUTHORS" 14
.Mx -anchor-spass Sh "CAVEATS" 15
.Mx -anchor-spass Sh "BUGS" 16
.Mx -anchor-spass Ss "Options" 4
.Mx -anchor-spass Ss "A starter" 4
.Mx -anchor-spass Ss "Sending mail" 4
.Mx -anchor-spass Ss "Reading mail" 4
.Mx -anchor-spass Ss "Viewing HTML mail and MIME attachments" 4
.Mx -anchor-spass Ss "Mailing lists" 4
.Mx -anchor-spass Ss "Resource files" 4
.Mx -anchor-spass Ss "Character sets" 4
.Mx -anchor-spass Ss "Message states" 4
.Mx -anchor-spass Ss "Specifying messages" 4
.Mx -anchor-spass Ss "On URL syntax and credential lookup" 4
.Mx -anchor-spass Ss "Command line editor" 4
.Mx -anchor-spass Ss "Coloured message display" 4
.Mx -anchor-spass Ss "Initial Settings" 7
.Mx -anchor-spass Ss "Binary options" 7
.Mx -anchor-spass Ss "Value options" 7
.Mx -anchor-spass Ss "The mime.types files" 9
.Mx -anchor-spass Ss "The .netrc file" 9
.Mx -anchor-spass Ss "An example configuration" 10
.Mx -anchor-spass Ss "Signed and encrypted messages with S/MIME" 10
.Mx -anchor-spass Ss "Using CRLs with S/MIME or SSL/TLS" 10
.Mx -anchor-spass Ss "Handling spam" 10
.Mx -anchor-spass Ss "\*(UA shortly hangs on startup" 11
.Mx -anchor-spass Ss "I can't login to Google mail a.k.a. GMail" 11
.Mx -anchor-spass Fl "A"
.Mx -anchor-spass Fl "a"
.Mx -anchor-spass Fl "B"
.Mx -anchor-spass Fl "b"
.Mx -anchor-spass Fl "c"
.Mx -anchor-spass Fl "D"
.Mx -anchor-spass Fl "d"
.Mx -anchor-spass Fl "E"
.Mx -anchor-spass Fl "e"
.Mx -anchor-spass Fl "F"
.Mx -anchor-spass Fl "f"
.Mx -anchor-spass Fl "H"
.Mx -anchor-spass Fl "h"
.Mx -anchor-spass Fl "i"
.Mx -anchor-spass Fl "L"
.Mx -anchor-spass Fl "N"
.Mx -anchor-spass Fl "n"
.Mx -anchor-spass Fl "q"
.Mx -anchor-spass Fl "R"
.Mx -anchor-spass Fl "r"
.Mx -anchor-spass Fl "S"
.Mx -anchor-spass Fl "s"
.Mx -anchor-spass Fl "t"
.Mx -anchor-spass Fl "u"
.Mx -anchor-spass Fl "V"
.Mx -anchor-spass Fl "v"
.Mx -anchor-spass Fl "X"
.Mx -anchor-spass Fl "~"
.Mx -anchor-spass Fl "#"
.Mx -anchor-spass Fl "."
.Mx -anchor-spass Pa "\*(UR"
.Mx -anchor-spass Pa "\*(ur"
.Mx -anchor-spass Ic "#"
.Mx -anchor-spass Ic "~"
.Mx -anchor-spass Ic "-"
.Mx -anchor-spass Ic "="
.Mx -anchor-spass Ic "?"
.Mx -anchor-spass Ic "!"
.Mx -anchor-spass Ic "|"
.Mx -anchor-spass Ic "account"
.Mx -anchor-spass Ic "alias"
.Mx -anchor-spass Ic "alternates"
.Mx -anchor-spass Ic "answered"
.Mx -anchor-spass Ic "cache"
.Mx -anchor-spass Ic "call"
.Mx -anchor-spass Ic "cd"
.Mx -anchor-spass Ic "certsave"
.Mx -anchor-spass Ic "chdir"
.Mx -anchor-spass Ic "collapse"
.Mx -anchor-spass Ic "connect"
.Mx -anchor-spass Ic "Copy"
.Mx -anchor-spass Ic "copy"
.Mx -anchor-spass Ic "cwd"
.Mx -anchor-spass Ic "Decrypt"
.Mx -anchor-spass Ic "decrypt"
.Mx -anchor-spass Ic "define"
.Mx -anchor-spass Ic "delete"
.Mx -anchor-spass Ic "discard"
.Mx -anchor-spass Ic "disconnect"
.Mx -anchor-spass Ic "dp"
.Mx -anchor-spass Ic "dt"
.Mx -anchor-spass Ic "draft"
.Mx -anchor-spass Ic "echo"
.Mx -anchor-spass Ic "edit"
.Mx -anchor-spass Ic "elif"
.Mx -anchor-spass Ic "else"
.Mx -anchor-spass Ic "endif"
.Mx -anchor-spass Ic "errors"
.Mx -anchor-spass Ic "exit"
.Mx -anchor-spass Ic "features"
.Mx -anchor-spass Ic "File"
.Mx -anchor-spass Ic "file"
.Mx -anchor-spass Ic "flag"
.Mx -anchor-spass Ic "folder"
.Mx -anchor-spass Ic "folders"
.Mx -anchor-spass Ic "Followup"
.Mx -anchor-spass Ic "followup"
.Mx -anchor-spass Ic "followupall"
.Mx -anchor-spass Ic "followupsender"
.Mx -anchor-spass Ic "Forward"
.Mx -anchor-spass Ic "forward"
.Mx -anchor-spass Ic "from"
.Mx -anchor-spass Ic "Fwd"
.Mx -anchor-spass Ic "fwd"
.Mx -anchor-spass Ic "fwdignore"
.Mx -anchor-spass Ic "fwdretain"
.Mx -anchor-spass Ic "ghost"
.Mx -anchor-spass Ic "headers"
.Mx -anchor-spass Ic "help"
.Mx -anchor-spass Ic "history"
.Mx -anchor-spass Ic "hold"
.Mx -anchor-spass Ic "if"
.Mx -anchor-spass Ic "ignore"
.Mx -anchor-spass Ic "imap"
.Mx -anchor-spass Ic "imapcodec"
.Mx -anchor-spass Ic "inc"
.Mx -anchor-spass Ic "list"
.Mx -anchor-spass Ic "localopts"
.Mx -anchor-spass Ic "Lreply"
.Mx -anchor-spass Ic "Mail"
.Mx -anchor-spass Ic "mail"
.Mx -anchor-spass Ic "mbox"
.Mx -anchor-spass Ic "mimetype"
.Mx -anchor-spass Ic "mlist"
.Mx -anchor-spass Ic "mlsubscribe"
.Mx -anchor-spass Ic "Move"
.Mx -anchor-spass Ic "move"
.Mx -anchor-spass Ic "More"
.Mx -anchor-spass Ic "more"
.Mx -anchor-spass Ic "netrc"
.Mx -anchor-spass Ic "newmail"
.Mx -anchor-spass Ic "next"
.Mx -anchor-spass Ic "New"
.Mx -anchor-spass Ic "new"
.Mx -anchor-spass Ic "noop"
.Mx -anchor-spass Ic "Page"
.Mx -anchor-spass Ic "page"
.Mx -anchor-spass Ic "Pipe"
.Mx -anchor-spass Ic "pipe"
.Mx -anchor-spass Ic "preserve"
.Mx -anchor-spass Ic "Print"
.Mx -anchor-spass Ic "print"
.Mx -anchor-spass Ic "quit"
.Mx -anchor-spass Ic "redirect"
.Mx -anchor-spass Ic "Redirect"
.Mx -anchor-spass Ic "remove"
.Mx -anchor-spass Ic "rename"
.Mx -anchor-spass Ic "Reply"
.Mx -anchor-spass Ic "reply"
.Mx -anchor-spass Ic "replyall"
.Mx -anchor-spass Ic "replysender"
.Mx -anchor-spass Ic "Resend"
.Mx -anchor-spass Ic "resend"
.Mx -anchor-spass Ic "Respond"
.Mx -anchor-spass Ic "respond"
.Mx -anchor-spass Ic "respondall"
.Mx -anchor-spass Ic "respondsender"
.Mx -anchor-spass Ic "retain"
.Mx -anchor-spass Ic "Save"
.Mx -anchor-spass Ic "save"
.Mx -anchor-spass Ic "savediscard"
.Mx -anchor-spass Ic "saveignore"
.Mx -anchor-spass Ic "saveretain"
.Mx -anchor-spass Ic "seen"
.Mx -anchor-spass Ic "set"
.Mx -anchor-spass Ic "setenv"
.Mx -anchor-spass Ic "shell"
.Mx -anchor-spass Ic "shortcut"
.Mx -anchor-spass Ic "show"
.Mx -anchor-spass Ic "size"
.Mx -anchor-spass Ic "sort"
.Mx -anchor-spass Ic "source"
.Mx -anchor-spass Ic "source_if"
.Mx -anchor-spass Ic "spamclear"
.Mx -anchor-spass Ic "spamforget"
.Mx -anchor-spass Ic "spamham"
.Mx -anchor-spass Ic "spamrate"
.Mx -anchor-spass Ic "spamset"
.Mx -anchor-spass Ic "spamspam"
.Mx -anchor-spass Ic "thread"
.Mx -anchor-spass Ic "top"
.Mx -anchor-spass Ic "touch"
.Mx -anchor-spass Ic "Type"
.Mx -anchor-spass Ic "type"
.Mx -anchor-spass Ic "unaccount"
.Mx -anchor-spass Ic "unalias"
.Mx -anchor-spass Ic "unanswered"
.Mx -anchor-spass Ic "uncollapse"
.Mx -anchor-spass Ic "undefine"
.Mx -anchor-spass Ic "undelete"
.Mx -anchor-spass Ic "undraft"
.Mx -anchor-spass Ic "unflag"
.Mx -anchor-spass Ic "unfwdignore"
.Mx -anchor-spass Ic "unfwdretain"
.Mx -anchor-spass Ic "unghost"
.Mx -anchor-spass Ic "unignore"
.Mx -anchor-spass Ic "unmimetype"
.Mx -anchor-spass Ic "unmlist"
.Mx -anchor-spass Ic "unmlsubscribe"
.Mx -anchor-spass Ic "Unread"
.Mx -anchor-spass Ic "unread"
.Mx -anchor-spass Ic "unretain"
.Mx -anchor-spass Ic "unsaveignore"
.Mx -anchor-spass Ic "unsaveretain"
.Mx -anchor-spass Ic "unset"
.Mx -anchor-spass Ic "unsetenv"
.Mx -anchor-spass Ic "unshortcut"
.Mx -anchor-spass Ic "unsort"
.Mx -anchor-spass Ic "unthread"
.Mx -anchor-spass Ic "urlcodec"
.Mx -anchor-spass Ic "varedit"
.Mx -anchor-spass Ic "varshow"
.Mx -anchor-spass Ic "verify"
.Mx -anchor-spass Ic "visual"
.Mx -anchor-spass Ic "write"
.Mx -anchor-spass Ic "xit"
.Mx -anchor-spass Ic "z"
.Mx -anchor-spass Ic "Z"
.Mx -anchor-spass Ic "~~"
.Mx -anchor-spass Ic "~!"
.Mx -anchor-spass Ic "~."
.Mx -anchor-spass Ic "~:"
.Mx -anchor-spass Ic "~?"
.Mx -anchor-spass Ic "~&lt;"
.Mx -anchor-spass Ic "~&lt;!"
.Mx -anchor-spass Ic "~@"
.Mx -anchor-spass Ic "~A"
.Mx -anchor-spass Ic "~a"
.Mx -anchor-spass Ic "~b"
.Mx -anchor-spass Ic "~c"
.Mx -anchor-spass Ic "~d"
.Mx -anchor-spass Ic "~e"
.Mx -anchor-spass Ic "~F"
.Mx -anchor-spass Ic "~f"
.Mx -anchor-spass Ic "~H"
.Mx -anchor-spass Ic "~h"
.Mx -anchor-spass Ic "~i"
.Mx -anchor-spass Ic "~M"
.Mx -anchor-spass Ic "~m"
.Mx -anchor-spass Ic "~p"
.Mx -anchor-spass Ic "~q"
.Mx -anchor-spass Ic "~R"
.Mx -anchor-spass Ic "~r"
.Mx -anchor-spass Ic "~s"
.Mx -anchor-spass Ic "~t"
.Mx -anchor-spass Ic "~U"
.Mx -anchor-spass Ic "~u"
.Mx -anchor-spass Ic "~v"
.Mx -anchor-spass Ic "~w"
.Mx -anchor-spass Ic "~x"
.Mx -anchor-spass Ic "~|"
.Mx -anchor-spass Va "add-file-recipients"
.Mx -anchor-spass Va "allnet"
.Mx -anchor-spass Va "append"
.Mx -anchor-spass Va "ask"
.Mx -anchor-spass Va "asksub"
.Mx -anchor-spass Va "askatend"
.Mx -anchor-spass Va "askattach"
.Mx -anchor-spass Va "askcc"
.Mx -anchor-spass Va "askbcc"
.Mx -anchor-spass Va "asksign"
.Mx -anchor-spass Va "autocollapse"
.Mx -anchor-spass Va "autoprint"
.Mx -anchor-spass Va "autothread"
.Mx -anchor-spass Va "bang"
.Mx -anchor-spass Va "batch-exit-on-error"
.Mx -anchor-spass Va "bsdannounce"
.Mx -anchor-spass Va "bsdcompat"
.Mx -anchor-spass Va "bsdflags"
.Mx -anchor-spass Va "bsdheadline"
.Mx -anchor-spass Va "bsdmsgs"
.Mx -anchor-spass Va "bsdorder"
.Mx -anchor-spass Va "bsdset"
.Mx -anchor-spass Va "colour-disable"
.Mx -anchor-spass Va "colour-pager"
.Mx -anchor-spass Va "debug"
.Mx -anchor-spass Va "disconnected"
.Mx -anchor-spass Va "disposition-notification-send"
.Mx -anchor-spass Va "dot"
.Mx -anchor-spass Va "dotlock-ignore-error"
.Mx -anchor-spass Va "editalong"
.Mx -anchor-spass Va "editheaders"
.Mx -anchor-spass Va "emptystart"
.Mx -anchor-spass Va "flipr"
.Mx -anchor-spass Va "followup-to"
.Mx -anchor-spass Va "forward-as-attachment"
.Mx -anchor-spass Va "fullnames"
.Mx -anchor-spass Va "header"
.Mx -anchor-spass Va "history-gabby"
.Mx -anchor-spass Va "history-gabby-persist"
.Mx -anchor-spass Va "hold"
.Mx -anchor-spass Va "idna-disable"
.Mx -anchor-spass Va "ignore"
.Mx -anchor-spass Va "ignoreeof"
.Mx -anchor-spass Va "imap-use-starttls"
.Mx -anchor-spass Va "keep"
.Mx -anchor-spass Va "keepsave"
.Mx -anchor-spass Va "line-editor-disable"
.Mx -anchor-spass Va "markanswered"
.Mx -anchor-spass Va "message-id-disable"
.Mx -anchor-spass Va "metoo"
.Mx -anchor-spass Va "mime-allow-text-controls"
.Mx -anchor-spass Va "netrc-lookup"
.Mx -anchor-spass Va "outfolder"
.Mx -anchor-spass Va "page"
.Mx -anchor-spass Va "piperaw"
.Mx -anchor-spass Va "pop3-bulk-load"
.Mx -anchor-spass Va "pop3-no-apop"
.Mx -anchor-spass Va "pop3-no-apop-HOST"
.Mx -anchor-spass Va "pop3-use-starttls"
.Mx -anchor-spass Va "print-all-chars"
.Mx -anchor-spass Va "print-alternatives"
.Mx -anchor-spass Va "quiet"
.Mx -anchor-spass Va "quote-as-attachment"
.Mx -anchor-spass Va "recipients-in-cc"
.Mx -anchor-spass Va "record-resent"
.Mx -anchor-spass Va "reply-in-same-charset"
.Mx -anchor-spass Va "rfc822-body-from_"
.Mx -anchor-spass Va "save"
.Mx -anchor-spass Va "searchheaders"
.Mx -anchor-spass Va "sendcharsets-else-ttycharset"
.Mx -anchor-spass Va "sendwait"
.Mx -anchor-spass Va "showlast"
.Mx -anchor-spass Va "showname"
.Mx -anchor-spass Va "showto"
.Mx -anchor-spass Va "skipemptybody"
.Mx -anchor-spass Va "smime-force-encryption"
.Mx -anchor-spass Va "smime-sign"
.Mx -anchor-spass Va "smime-no-default-ca"
.Mx -anchor-spass Va "smtp-use-starttls"
.Mx -anchor-spass Va "ssl-no-default-ca"
.Mx -anchor-spass Va "term-ca-mode"
.Mx -anchor-spass Va "keep-content-length"
.Mx -anchor-spass Va "v15-compat"
.Mx -anchor-spass Va "verbose"
.Mx -anchor-spass Va "writebackedited"
.Mx -anchor-spass Va "agent-shell-lookup"
.Mx -anchor-spass Va "attrlist"
.Mx -anchor-spass Va "autobcc"
.Mx -anchor-spass Va "autocc"
.Mx -anchor-spass Va "autosort"
.Mx -anchor-spass Va "charset-7bit"
.Mx -anchor-spass Va "charset-8bit"
.Mx -anchor-spass Va "charset-unknown-8bit"
.Mx -anchor-spass Va "cmd"
.Mx -anchor-spass Va "colour-from_"
.Mx -anchor-spass Va "colour-header"
.Mx -anchor-spass Va "colour-msginfo"
.Mx -anchor-spass Va "colour-partinfo"
.Mx -anchor-spass Va "colour-terms"
.Mx -anchor-spass Va "colour-uheader"
.Mx -anchor-spass Va "colour-user-headers"
.Mx -anchor-spass Va "crt"
.Mx -anchor-spass Va "datefield"
.Mx -anchor-spass Va "datefield-markout-older"
.Mx -anchor-spass Va "encoding"
.Mx -anchor-spass Va "escape"
.Mx -anchor-spass Va "expandaddr"
.Mx -anchor-spass Va "expandargv"
.Mx -anchor-spass Va "features"
.Mx -anchor-spass Va "file-hook-load-EXTENSION"
.Mx -anchor-spass Va "file-hook-save-EXTENSION"
.Mx -anchor-spass Va "folder"
.Mx -anchor-spass Va "folder-hook"
.Mx -anchor-spass Va "folder-hook-FOLDER"
.Mx -anchor-spass Va "followup-to-honour"
.Mx -anchor-spass Va "from"
.Mx -anchor-spass Va "fwdheading"
.Mx -anchor-spass Va "headline"
.Mx -anchor-spass Va "headline-bidi"
.Mx -anchor-spass Va "hostname"
.Mx -anchor-spass Va "imap-auth"
.Mx -anchor-spass Va "imap-cache"
.Mx -anchor-spass Va "imap-delim"
.Mx -anchor-spass Va "imap-keepalive"
.Mx -anchor-spass Va "imap-list-depth"
.Mx -anchor-spass Va "inbox"
.Mx -anchor-spass Va "indentprefix"
.Mx -anchor-spass Va "line-editor-cursor-right"
.Mx -anchor-spass Va "mime-counter-evidence"
.Mx -anchor-spass Va "mimetypes-load-control"
.Mx -anchor-spass Va "NAIL_EXTRA_RC"
.Mx -anchor-spass Va "NAIL_HEAD"
.Mx -anchor-spass Va "NAIL_HISTFILE"
.Mx -anchor-spass Va "NAIL_HISTSIZE"
.Mx -anchor-spass Va "NAIL_TAIL"
.Mx -anchor-spass Va "newfolders"
.Mx -anchor-spass Va "newmail"
.Mx -anchor-spass Va "ORGANIZATION"
.Mx -anchor-spass Va "password"
.Mx -anchor-spass Va "pipe-TYPE/SUBTYPE"
.Mx -anchor-spass Ev "NAIL_TMPDIR"
.Mx -anchor-spass Ev "NAIL_FILENAME"
.Mx -anchor-spass Ev "NAIL_FILENAME_GENERATED"
.Mx -anchor-spass Ev "NAIL_CONTENT"
.Mx -anchor-spass Ev "NAIL_CONTENT_EVIDENCE"
.Mx -anchor-spass Va "pipe-EXTENSION"
.Mx -anchor-spass Va "pop3-keepalive"
.Mx -anchor-spass Va "prompt"
.Mx -anchor-spass Va "quote"
.Mx -anchor-spass Va "quote-fold"
.Mx -anchor-spass Va "record"
.Mx -anchor-spass Va "reply_strings"
.Mx -anchor-spass Va "replyto"
.Mx -anchor-spass Va "reply-to-honour"
.Mx -anchor-spass Va "screen"
.Mx -anchor-spass Va "sendcharsets"
.Mx -anchor-spass Va "sender"
.Mx -anchor-spass Va "sendmail"
.Mx -anchor-spass Va "sendmail-arguments"
.Mx -anchor-spass Va "sendmail-no-default-arguments"
.Mx -anchor-spass Va "sendmail-progname"
.Mx -anchor-spass Va "Sign"
.Mx -anchor-spass Va "sign"
.Mx -anchor-spass Va "signature"
.Mx -anchor-spass Va "smime-ca-dir"
.Mx -anchor-spass Va "smime-ca-file"
.Mx -anchor-spass Va "smime-cipher"
.Mx -anchor-spass Va "smime-crl-dir"
.Mx -anchor-spass Va "smime-crl-file"
.Mx -anchor-spass Va "smime-encrypt-USER@HOST"
.Mx -anchor-spass Va "smime-sign-cert"
.Mx -anchor-spass Va "smime-sign-include-certs"
.Mx -anchor-spass Va "smime-sign-message-digest"
.Mx -anchor-spass Va "smtp"
.Mx -anchor-spass Va "smtp-auth"
.Mx -anchor-spass Va "smtp-hostname"
.Mx -anchor-spass Va "spam-interface"
.Mx -anchor-spass Va "spam-maxsize"
.Mx -anchor-spass Va "spamc-command"
.Mx -anchor-spass Va "spamc-arguments"
.Mx -anchor-spass Va "spamc-user"
.Mx -anchor-spass Va "spamd-socket"
.Mx -anchor-spass Va "spamd-user"
.Mx -anchor-spass Va "spamfilter-ham"
.Mx -anchor-spass Va "spamfilter-noham"
.Mx -anchor-spass Va "spamfilter-nospam"
.Mx -anchor-spass Va "spamfilter-rate"
.Mx -anchor-spass Va "spamfilter-spam"
.Mx -anchor-spass Va "spamfilter-rate-scanscore"
.Mx -anchor-spass Va "ssl-ca-dir"
.Mx -anchor-spass Va "ssl-ca-file"
.Mx -anchor-spass Va "ssl-cert"
.Mx -anchor-spass Va "ssl-cipher-list"
.Mx -anchor-spass Va "ssl-config-file"
.Mx -anchor-spass Va "ssl-crl-file"
.Mx -anchor-spass Va "ssl-crl-dir"
.Mx -anchor-spass Va "ssl-key"
.Mx -anchor-spass Va "ssl-method"
.Mx -anchor-spass Va "ssl-protocol"
.Mx -anchor-spass Va "ssl-rand-egd"
.Mx -anchor-spass Va "ssl-rand-file"
.Mx -anchor-spass Va "ssl-verify"
.Mx -anchor-spass Va "stealthmua"
.Mx -anchor-spass Va "toplines"
.Mx -anchor-spass Va "ttycharset"
.Mx -anchor-spass Va "user"
.Mx -anchor-spass Va "version"
.Mx -anchor-spass Va "version-major"
.Mx -anchor-spass Va "version-minor"
.Mx -anchor-spass Va "version-update"
.Mx -anchor-spass Ev "COLUMNS"
.Mx -anchor-spass Ev "DEAD"
.Mx -anchor-spass Ev "EDITOR"
.Mx -anchor-spass Ev "HOME"
.Mx -anchor-spass Ev "LANG"
.Mx -anchor-spass Ev "LC_ALL"
.Mx -anchor-spass Ev "LC_COLLATE"
.Mx -anchor-spass Ev "LC_CTYPE"
.Mx -anchor-spass Ev "LC_MESSAGES"
.Mx -anchor-spass Ev "LINES"
.Mx -anchor-spass Ev "LISTER"
.Mx -anchor-spass Ev "MBOX"
.Mx -anchor-spass Ev "MAIL"
.Mx -anchor-spass Ev "MAILRC"
.Mx -anchor-spass Ev "NAIL_NO_SYSTEM_RC"
.Mx -anchor-spass Ev "NETRC"
.Mx -anchor-spass Ev "PAGER"
.Mx -anchor-spass Ev "PATH"
.Mx -anchor-spass Ev "SHELL"
.Mx -anchor-spass Ev "SYSV3"
.Mx -anchor-spass Ev "TERM"
.Mx -anchor-spass Ev "TMPDIR"
.Mx -anchor-spass Ev "USER"
.Mx -anchor-spass Ev "VISUAL"
.Mx -anchor-spass Pa "~/.mime.types"
.Mx -anchor-spass Pa "/etc/mime.types"
.Mx -anchor-spass Pa "~/.netrc"
.Sh NAME
.Nm \*(UA \%[\*(VV]
.Nd send and receive Internet mail
.Sh SYNOPSIS
.Nm \*(ua
.Fl h | Fl Fl help
.Nm \*(ua
.Bk -words
.Op Fl BDdEFintv~
.Op Fl A Ar account
.Op Fl a Ar attachment
.Op Fl b Ar bcc-addr
.Op Fl c Ar cc-addr
.Op Fl q Ar quote-file
.Op Fl r Ar from-addr
.Op Fl S Ar variable Ns Op Ns = Ns Ar value
.Op Fl s Ar subject
.Op Fl X Ar cmd
.Op Fl \&amp;.
.Ar to-addr ...
.Op Fl Fl \: Ar mta-option ...
.Ek
.Nm \*(ua
.Bk -words
.Op Fl BDdEeHiNnRv~#
.Op Fl A Ar account
.Op Fl L Ar spec-list
.Op Fl r Ar from-addr
.Op Fl S Ar variable Ns Op Ns = Ns Ar value
.Op Fl X Ar cmd
.Fl f Op Ar file
.Op Fl Fl \: Ar mta-option ...
.Ek
.Nm \*(ua
.Bk -words
.Op Fl BDdEeHiNnRv~#
.Op Fl A Ar account
.Op Fl L Ar spec-list
.Op Fl r Ar from-addr
.Op Fl S Ar variable Ns Op Ns = Ns Ar value
.Op Fl u Ar user
.Op Fl X Ar cmd
.Op Fl Fl \: Ar mta-option ...
.Ek
.Mx -toc -tree html pdf ps xhtml
.Sh DESCRIPTION
.Bd -filled -compact -offset indent
.Sy Compatibility note:
S-nail (\*(UA) will wrap up into \%S-mailx in v15.0 (circa 2018).
A partial set of compatibility options exist, tagged as \*(IN and \*(OU.
To choose upward compatible behaviour, please set the internal variable
.Va v15-compat .
Anything which will vanish in v15.0 is tagged \*(OB, and using
.Fl d
will print warnings for many use cases of obsolete features.
.Ed
.Pp
\*(UA is a mail processing system with a command syntax reminiscent of
.Xr ed 1
with lines replaced by messages.
It is intended to provide the functionality of the POSIX
.Xr mailx 1
command and offers (mostly optional) extensions for line editing, IDNA,
MIME, S/MIME, SMTP and POP3 (and IMAP).
It is usable as a mail batch language.
.Ss "Options"
.Bl -tag -width ".Fl _ Ar _ccount"
.Mx
.It Fl A Ar account
Executes an
.Ic account
command (see below) for
.Ar account
after the startup files have been read.
.Mx
.It Fl a Ar file
Attach the given file to the message.
The same filename conventions as described in the section
.Sx COMMANDS
apply: shell word expansion is restricted to the tilde
.Ql ~
and variables.
Shall
.Ar file
not be accessible but contain a
.Ql =
character, then anything after the
.Ql =
is assumed to specify the input character set and anything before
.Ql =
the filename: this is the only option to specify the input character set
(and don't perform any character set conversion) for text attachments
from the command line, not using the
.Ic ~@
tilde escape command.
.Mx
.It Fl B
Make standard input and standard output line-buffered.
.Mx
.It Fl b Ar address
Send blind carbon copies to the given list of addresses.
.Sx Sending mail
below goes into more detail on that.
.Mx
.It Fl c Ar address
Send carbon copies to the given list of addresses.
.Mx
.It Fl D
\*(OP Set the
.Va disconnected
variable.
.Mx
.It Fl d
Set the
.Va debug
variable, which enables debug messages and disables message delivery.
.Mx
.It Fl E
Set the
.Va skipemptybody
variable and thus discard messages with an empty message part body.
This is useful for sending messages from scripts.
.Mx
.It Fl e
Just check if mail is present in the system mailbox.
If yes, return an exit status of zero, a non-zero value otherwise.
.Mx
.It Fl F
Save the message to send in a file named after the local part of the
first recipient's address (instead of in
.Va record Ns ).
.Mx
.It Fl f Op Ar file
Read in the contents of the user's
.Ev MBOX
(or the specified file) for processing;
when \*(UA is quit, it writes undeleted messages back to this file
(but be aware of the
.Va hold
option).
Some special conventions are recognized for the string
.Ar file
which are documented for the
.Ic file
command below.
Note that
.Ar file
is not a direct argument to the flag
.Fl f ,
but is instead taken from the command line after option processing has
been completed.
In order to use a
.Ar file
that starts with a hyphen, prefix it with a (relative) path, as in
.Ql ./-hyphenbox.mbox .
.Mx
.It Fl H
Print a header summary of all messages and exit.
A configurable summary view is available via the
.Fl L
option.
.Mx
.It Fl h
Print a short usage summary.
Because of widespread use a
.Fl Fl help
argument will have the same effect.
.Mx
.It Fl i
Set the
.Va ignore
variable to ignore tty interrupt signals.
.Mx
.It Fl L Ar spec-list
Print a header summary of only those messages that match the given
.Ar spec-list ,
then exit.
See the section
.Sx "Specifying messages"
for the format of
.Ar spec-list .
If the
.Fl H
option has been given in addition no header summary is produced,
but \*(UA will instead indicate via its exit status whether
.Ar spec-list
matched any messages
.Pf ( Ql 0 )
or not
.Pf ( Ql 1 ) ;
note that any verbose output is suppressed in this mode and must instead
be enabled explicitly (e.g., by using the option
.Fl v ) .
.Mx
.It Fl N
Unset the
.Va header
variable and thus inhibit initial display of message headers when
reading mail or editing a mail folder.
.Mx
.It Fl n
Inhibits reading
.Pa \*(UR
upon startup.
This option should be activated for \*(UA scripts that are invoked on
more than one machine, because the contents of that file may differ
between them.
(The same behaviour can be achieved by setting the
.Ev NAIL_NO_SYSTEM_RC
environment variable.)
.Mx
.It Fl q Ar file
Start the message with the contents of the specified file.
May be given in send mode only.
.Mx
.It Fl R
Any folder opened will be in read-only mode.
.Mx
.It Fl r Ar address
If
.Ar address
is a valid address then it specifies the envelope sender address to be
passed to the MTA as
.Ql -f Ar address
when a message is send.
Shall
.Ar address
include a user name, comments etc., then the components will be
separated and the name part will be passed to the MTA individually via
.Ql -F Ar name .
The given
.Ar address
will also be assigned to the
.Va from
variable, just as if additionally
.Ql -Sfrom=address
had been specified (therefore affecting SMTP data transfer, too).
.Pp
If instead an empty string is passed as
.Ar address
then the content of the variable
.Va from
will be evaluated and used for this purpose whenever the MTA is
contacted.
Note that \*(UA by default, without
.Fl \&amp;\&amp;r
that is, neither passes
.Ql -f
nor
.Ql -F
flags to the MTA by itself.
.Mx
.It Fl S Ar variable Ns Op = Ns value
Sets the internal option
.Ar variable
and, in case of a value option, assigns
.Ar value
to it.
Even though options set via
.Fl S
may be overwritten from within resource files,
the command line setting will be reestablished after all resource files
have been loaded.
.Mx
.It Fl s Ar subject
Specify the subject of the to-be-sent message.
.Mx
.It Fl t
The message to be sent is expected to contain a message header with
.Ql To: ,
.Ql Cc: ,
or
.Ql Bcc:
fields giving its recipients, which will be added to those given on the
command line.
If a message subject is specified via
.Ql Subject:
then it'll be used in favour of one given on the command line.
.Pp
Also understood are
.Ql Reply-To:
(possibly overriding
.Va replyto ) ,
.Ql Sender:
(p.\ o.\&amp;
.Va sender ) ,
.Ql Organization:
(p.\ o.\&amp;
.Va ORGANIZATION ) .
Note you can also specify
.Ql From: ,
possibly overriding
.Va from
and the envelope address possibly specified with the option
.Fl r !
.Pp
The following, which are normally created automatically based
upon the message context, can also be specified:
.Ql Message-ID: ,
.Ql In-Reply-To: ,
.Ql References:
and
.Ql Mail-Followup-To:
(special address massage will however still occur for the latter).
.Mx
.It Fl u Ar user
Read the system mailbox of
.Ar user
(appropriate privileges presumed), and
.Dq assume to be
.Ar user
in some aspects, e.g. in respect to
.Ic file Ns
\(enexpansions of
.Ql %
etc.; also see
.Ev USER .
.Mx
.It Fl V
Print \*(UA's version and exit.
.Mx
.It Fl v
Setting the
.Va verbose
option causes some verbosity (like printing of certificate chains).
Using it twice increases the level of verbosity.
.Mx
.It Fl X Ar cmd
Add the given
.Ar cmd
to the list of commands to be executed before normal operation starts.
Correlates with
.Fl #
and
.Va batch-exit-on-error ;
the only possibility to execute commands in non-interactive mode when
reading startup files is actively prohibited.
.Mx
.It Fl ~
Enable
.Sx TILDE ESCAPES
even if not in interactive mode.
.Mx
.It Fl #
This sets several options to prepare \*(UA for working in (most likely
non-interactive) batch mode:
.Va dot ,
.Va emptystart ,
.Pf no Va header ,
.Va quiet ,
.Va sendwait ,
as well as
.Ev MBOX
and
.Va folder
(both to
.Pa /dev/null ) .
It also enables processing of
.Sx "TILDE ESCAPES" .
E.g., the following should send an email message to
.Dq bob :
.Bd -literal -offset indent
$ LC_ALL=C printf 'm bob\en~s ubject\enText\en.\enx\en' | \e
LC_ALL=C MAILRC=/dev/null s-nail -n -# -Snosave
.Ed
.Mx
.It Fl \&amp;.
This flag forces termination of option processing in order to prevent
.Dq option injection
(attacks).
It also forcefully puts \*(UA into send mode, see
.Sx "Sending mail" .
.El
.Pp
In the above list of supported command line options,
.Fl D , d , E , i , N
and
.Fl v
are implemented by means of setting the respective option, as via
.Fl S .
.Bk -words
.Op Ar mta-option ...
.Ek
arguments that are given at the end of the command line after a
.Ql --
separator will be passed through to the mail-transfer-agent (MTA) and
persist for an entire (interactive) session \(en if the setting of
.Va expandargv
allows their recognition;
MTA arguments can also be specified in the variable
.Va sendmail-arguments ;
find MTA interaction described in more detail in the documentation of
.Va sendmail .
MTA arguments are ignored when mail is send via SMTP data transfer.
.Ss "A starter"
\*(UA is a direct descendant of the BSD Mail program that was introduced
in 1978 (itself superceeding the simpler UNIX mail program) and used
to introduce itself (in the Mail reference manual) as follows:
.Bd -ragged -offset indent
Mail provides a simple and friendly environment for sending and
receiving mail.
It divides incoming mail into its constituent messages and allows the
user to deal with them in any order.
In addition, it provides a set of
.Xr ed 1 Ns
-like commands for manipulating messages and sending mail.
Mail offers the user simple editing capabilities to ease the composition
of outgoing messages, as well as providing the ability to define and
send to names which address groups of users.
.Ed
.Pp
\*(UA is thus the user side of the Unix mail system, whereas the system
side (mail-transfer-agent, MTA) was traditionally taken by
.Xr sendmail 8 ;
today
.Xr postfix 1
or
.Xr exim 8
are often used for this purpose instead.
If the \*(OPal SMTP feature has been built into \*(UA then the
system side is not a mandatory precondition for mail delivery.
.Pp
Because \*(UA strives for compliance with POSIX
.Xr mailx 1
it is likely that some configuration settings have to be adjusted before
using it is a smooth experience.
The default global
.Pa \*(UR
file already bends those standard settings a bit towards more user
friendliness and safety, e.g., it sets the
.Va hold
and
.Va keepsave
options in order to suppress the automatic moving of messages to
.Ev MBOX
that would otherwise occur (see
.Sx "Message states" )
and
.Va keep
to not remove empty files in order not to mangle file permissions when
files eventually get recreated.
It does not set the
.Va folder
option so that by default file grouping (via the
.Ql +
prefix as documented also for
.Ic file )
is not enabled.
The section
.Sx EXAMPLES
contains some further suggestions.
.Ss "Sending mail"
To send a message to one or more people, using a local
mail-transfer-agent (MTA; the executable path can be set via
.Va sendmail )
or the \*(OPal builtin SMTP (set and see the variable
.Va smtp )
transport to actually deliver the generated mail message, \*(UA can be
invoked with arguments which are the names of people to whom the mail
will be sent:
.Bd -literal -offset indent
$ \*(ua -s Subject -a attachm.ent bill@host1 'Bob &lt;bob@host2&gt;'
# But... try it in an isolated dry-run mode first
$ LC_ALL=C MAILRC=/dev/null \e
\*(ua -n -d -vv -Sfrom="me &lt;he@re&gt;" \e
-s Subject -. "(Lovely) Bob &lt;bob@host2&gt;"
.Ed
.Pp
The user is then expected to type in the message contents.
In this compose mode \*(UA treats lines beginning with the character
.Ql ~
special \(en these are so-called
.Sx "TILDE ESCAPES"
which can be used to read in files, process shell commands, add and edit
attachments and more; e.g., the tilde escape
.Ql Ic ~e
will start the text editor to revise the message in it's current state,
.Ql Ic ~h
allows editing of the message recipients and
.Ql Ic ~?
gives an overview of available tilde escapes.
Typing control-D
.Ql ^D
at the beginning of an empty line leaves compose mode and causes the
message to be send, whereas typing control-C
.Ql ^C
twice will abort the current letter (saving its contents in the file
denoted by
.Ev DEAD
unless
.Pf no Va save
is set.)
.Pp
A number of options can be used to alter default behavior; e.g.,
.Ic set Ns
ting (also via
.Fl S )
.Va editalong
will automatically startup a text editor when compose mode is entered,
.Va askcc
will cause the user to be prompted actively for carbon-copy recipients
and the
.Va dot
option will allow leaving compose mode by writing a line consisting
solely of a dot
.Pf ( Ql \&amp;. ) .
.Pp
Very important, though, is to define which
.Sx "Character sets"
may be used when sending messages, usually by setting the option
.Va sendcharsets
accordingly,
having read the section
.Sx "The mime.types files"
to understand how the MIME-type of outgoing attachments is classified
and the knowledge that messages are sent asynchronously unless
.Va sendwait
is set: only with it MTA delivery errors will be recognizable.
.Pp
Setting
.Va from
is often necessary (e.g., in conjunction with
.Va smtp )
or desirable, you may want to do some dry-run tests before you go.
Saving a copy of the sent messages in a
.Va record
may also be desirable \(en as for most mailbox file targets some
special conventions are recognized, see the
.Ic file
command for more on that.
The section
.Sx "On URL syntax and credential lookup"
will spread some light on the
.Ql USER@HOST
variable chains as well as on using URLs for accessing protocol-specific
resources, like
.Va smtp ,
and
.Sx EXAMPLES
contains an example configuration for sending messages via some of the
well-known public mail providers;
note it also gives a compact overview on how to setup a secure SSL/TLS
environment.
.Pp
Message recipients (as specified on the command line or defined in
.Ql To: ,
.Ql Cc:
or
.Ql Bcc: )
may not only be email addressees but can also be names of mailboxes and
even complete shell command pipe specifications.
Proper quoting may be necessary, e.g., to embed whitespace characters.
(Recall that \*(UA deals with mail standards, therefore those define the
rules with which content is interpreted.)
If the variable
.Va expandaddr
is not set then only network addresses (see
.Xr mailaddr 7
for a description of mail addresses) and plain user names (including MTA
aliases) may be used, other types will be filtered out, giving a warning
message.
.Pp
If the variable
.Va expandaddr
is set then extended recipient addresses will optionally be accepted:
Any name which starts with a vertical bar
.Ql |
character specifies a command pipe \(en the command string following the
.Ql |
is executed and the message is sent to its standard input;
Likewise, any name that starts with the character slash
.Ql /
or the character sequence dot slash
.Ql ./
is treated as a file, regardless of the remaining content.
Any other name which contains an at sign
.Ql @
character is treated as a network address;
Any other name which starts with a plus sign
.Ql +
character specifies a mailbox name;
Any other name which contains a slash
.Ql /
character but no exclamation mark
.Ql \&amp;!
or percent sign
.Ql %
character before also specifies a mailbox name;
What remains is treated as a network address.
.Bd -literal -offset indent
$ echo bla | \*(ua -Sexpandaddr -s test ./mbox.mbox
$ echo bla | \*(ua -Sexpandaddr -s test '|cat &gt;&gt; ./mbox.mbox'
$ echo safe | LC_ALL=C MAILRC=/dev/null \e
\*(ua -n -Sv15-compat -Ssendwait -Snosave \e
-Sexpandaddr=fail,-all,+addr -s test \e
-. bob@home.net
.Ed
.Pp
It is possible to create personal distribution lists via the
.Ic alias
command, so that, for instance, the user can send mail to
.Ql cohorts
and have it go to a group of people:
.Pp
.Dl alias cohorts bill jkf mark kridle@ucbcory ~/mail/cohorts.mbox
.Pp
Please note that this mechanism has nothing in common with the system
wide aliases that may be used by the local MTA (mail-transfer-agent),
which are subject to the
.Ql name
constraint of
.Va expandaddr
and are often tracked in a file
.Pa /etc/aliases
(and documented in
.Xr aliases 5
and
.Xr sendmail 1 ) .
Personal aliases will be expanded by \*(UA before the message is sent,
and are thus a convenient alternative to specifying each addressee by
itself.
.Pp
To avoid environmental noise scripts should
.Dq detach
\*(ua from any configuration files and create a script-local
environment, either by pointing the
.Ev MAILRC
variable to a custom configuration file, or by using the
.Fl S
command line option to specify options:
.Bd -literal -offset indent
$ env LC_ALL=C MAILRC=/dev/null password=NOTSECRET \e
\*(ua -n -Sv15-compat -Ssendwait -Snosave \e
-Sexpandaddr=fail,-all,+addr \e
-S 'smtp=smtps://mylogin@some.host:465' -Ssmtp-auth=login \e
-S 'from=scriptreply@domain' \e
-s 'subject' -a attachment_file \e
-. "Recipient 1 &lt;recipient1@domain&gt;" recipient2@domain \e
&lt; content_file
.Ed
.Ss "Reading mail"
When invoked without addressees \*(UA enters interactive mode in which
mails may be read.
When used like that the user's system mailbox
(see the command
.Ic file
for an in-depth description of the different mailbox types that exist)
is read in and a one line header of each message therein is displayed.
The visual style of this summary of
.Ic headers
can be adjusted through the variable
.Va headline
and the possible sorting criterion via
.Va autosort .
Scrolling through
.Va screen Ns
fuls of
.Ic headers
can be performed with the command
.Ic z .
If the initially opened mailbox is empty \*(UA will instead exit
immediately (after displaying a message) unless the variable
.Va emptystart
is found to be set.
.Pp
At the
.Va prompt
the command
.Ic list
will give a listing of all available commands and
.Ic help
will give a summary of some common ones.
If the \*(OPal documentation strings are available one can type
.Ql ?X
and see the actual expansion of
.Ql X
and what it's purpose is, i.e., commands can be abbreviated
(note that POSIX defines some abbreviations, so that the alphabetical
order of commands doesn't necessarily relate to the abbreviations; it is
possible to define overwrites with the
.Ic ghost
command, however).
.Pp
Messages are given numbers (starting at 1) which uniquely identify
messages; the current message \(en the
.Dq dot
\(en will either be the first new message, or the first unread message,
or the first message of the mailbox; the option
.Va showlast
will instead cause usage of the last message for this purpose.
.Pp
Messages can be printed with the
.Ic print
command, or short:
.Ql p .
By default the current message
.Pf ( Dq dot )
is printed, but like with most other commands it is possible to give
a fancy message specification (see
.Sx "Specifying messages" ) ,
e.g.,
.Ql p:u
will display all unread messages,
.Ql p.
will print the
.Dq dot ,
.Ql p 1 5
will print the messages 1 and 5,
.Ql p 1-5
will print the messages 1 through 5, and
.Ql p-
and
.Ql p+
will print the last and the next message, respectively.
.Pp
In the default setup all header fields of a message will be printed,
but this can be changed: either by blacklisting a list of fields via
.Ic ignore ,
or by whitelisting only a given list with the
.Ic retain
command, e.g.,
.Ql Ic \:retain Ns \0date from to cc subject .
In order to print all header fields of a message regardless of currently
active ignore or retain lists, use the command
.Ic Print .
The variable
.Va crt
controls whether and when \*(UA will use the configured
.Ev PAGER
for printing instead of directly writing to the terminal (generally
speaking).
.Pp
Dependent upon the configuration a
.Sx "Command line editor"
aims at making user experience with the many
.Sx COMMANDS
a bit nicer.
When reading the system mailbox or when
.Fl f
(or
.Ic file )
specified a mailbox explicitly prefixed with the special
.Ql %:
modifier then messages which have been read will be moved to the user's
.Ev MBOX
file automatically when the mailbox is left, either by changing the
active mailbox or by quitting \*(UA (also see
.Sx "Message states" ) .
.Pp
After examining a message the user can also
.Ic delete Ql d
the message,
.Ic reply Ql r
to the sender and all recipients or
.Ic Reply Ql R
exclusively to the sender.
Messages can also be
.Ic forward Ns
ed (shorter alias is
.Ic fwd Ns ).
Note that when replying to or forwarding a message recipient addresses
will be stripped from comments and names unless the option
.Va fullnames
is set.
Deletion causes \*(UA to forget about the message;
This is not irreversible, though, one can
.Ic undelete Ql u
the message by giving its number,
or the \*(UA session can be ended by giving the
.Ic exit Ql x
command.
.Pp
To end a mail processing session one may either issue
.Ic quit Ql q
to cause a full program exit, which possibly includes
automatic moving of read messages to
.Ev MBOX
as well as updating the \*(OPal command line editor history file,
or use the command
.Ic exit Ql x
instead in order to prevent any of these actions.
.Ss "Viewing HTML mail and MIME attachments"
Messages which are HTML-only get more and more common and of course many
messages come bundled with a bouquet of MIME attachments.
Whereas \*(UA \*(OPally supports a simple HTML-to-text converter to deal
with HTML messages (see
.Sx "The mime.types files" ) ,
it normally can't deal with any of these itself, but instead programs
need to become registered to deal with specific MIME types or file
extensions.
These programs may either prepare plain text versions of their input
in order to enable \*(UA to display the content on the terminal,
or display the content themselves, for example in a graphical window.
The latter type of programs by default
.Dq blocks
\*(UA until the external viewer has terminated, but asynchronous
side-by-side execution is also possible, in which case \*(UA will
continue to display the message and remain responsive.
.Pp
To install an external handler program for a specific MIME type set an
according
.Va pipe-TYPE/SUBTYPE
variable.
To define a handler for a specific file extension set the respective
.Va pipe-EXTENSION
variable \(en these handlers take precedence.
The variable
.Va mime-counter-evidence
can be set to improve dealing with faulty MIME part declarations as are
often seen in real-life messages.
E.g., to display a HTML message inline (that is, converted to a more
fancy plain text representation than the builtin converter is capable to
produce) with either of the text-mode browsers
.Xr lynx 1
or
.Xr elinks 1 ,
teach \*(UA about MathML documents and make it display them as plain text
and to open PDF attachments in an external PDF viewer, asynchronously:
.Bd -literal -offset indent
if $features !@ HTML-FILTER
#set pipe-text/html="elinks -force-html -dump 1"
set pipe-text/html="lynx -stdin -dump -force_html"
# Display HTML as plain text instead
#set pipe-text/html=@
endif
mimetype '@ application/mathml+xml mathml'
set pipe-application/pdf="@&amp;set -C;\e
: &gt; \e"${TMPDIR}/${NAIL_FILENAME_GENERATED}\e"; \e
trap \e"rm -f \e\e\e"${TMPDIR}/${NAIL_FILENAME_GENERATED}\e\e\e"\e" \e
EXIT INT QUIT PIPE TERM;\e
set +C;\e
cat &gt; \e"${TMPDIR}/${NAIL_FILENAME_GENERATED}\e"; \e
xpdf \e"${TMPDIR}/${NAIL_FILENAME_GENERATED}\e""
.Ed
.Pp
Note: special care must be taken when using such commands as mail
viruses may be distributed by this method: if messages of type
.Ql application/x-sh
or files with the extension
.Ql .sh
were blindly filtered through the shell, for example, a message sender
could easily execute arbitrary code on the system \*(UA is running on.
For more on MIME, also in respect to sending of messages, see the
section
.Sx "The mime.types files"
and the command
.Ic mimetype .
.Ss "Mailing lists"
\*(UA offers some support to ease handling of mailing lists.
The command
.Ic mlist
promotes all given arguments to known mailing lists, and
.Ic mlsubscribe
sets their subscription attribute, creating them first as necessary.
(On the other hand
.Ic unmlsubscribe
doesn't
.Ic unmlist
automatically, but only resets the subscription attribute.)
Using the commands without arguments will print out (a subset of) all
currently defined mailing lists.
The
.Va headline
format
.Ql \&amp;%T
can be used to mark out messages with configured list addresses
in the header display.
.Pp
\*(OPally mailing lists may also be specified as regular expressions,
which allows matching of many addresses with a single expression.
However, all fully qualified list addresses are matched via a fast
dictionary, whereas expressions are placed in (a) list(s) which is
(are) matched sequentially.
.Bd -literal -offset indent
set followup-to followup-to-honour=ask-yes reply-to-honour=ask-yes
mlist a1@b1.c1 a2@b2.c2 .*@lists.c3$
mlsubscribe a4@b4.c4 exact@lists.c3
.Ed
.Pp
The variable
.Va followup-to-honour
will ensure that a
.Ql Mail-\:Followup-\:To:
header is honoured when the message is being replied to (via
.Ic reply
and
.Ic Lreply )
and
.Va followup-to
controls whether this header is created when sending mails; it will be
created automatically for a couple of reasons, too, like when the
special
.Dq mailing list specific
respond command
.Ic Lreply
is used, when
.Ic reply
is used to respond to a message with its
.Ql Mail-Followup-To:
being honoured etc.
.Pp
A difference in between the handling of known and subscribed lists is
that the address of the sender is usually not part of a generated
.Ql Mail-Followup-To:
when addressing the latter, whereas it is for the former kind of lists.
Usually because there are exceptions: say, if multiple lists are
addressed and not all of them are subscribed lists.
.Pp
For convenience \*(UA will, temporarily, automatically add a list
address that is presented in the
.Ql List-To:
header of a message that is being responded to to the list of known
mailing lists.
Shall that header have existed \*(UA will instead, dependend on the
variable
.Va reply-to-honour ,
use an also set
.Ql Reply-To:
for this purpose in order to accept a list administrators' wish that
is supposed to have been manifested like that (but only if it provides
a single address which resides on the same domain as what is stated in
.Ql List-To: ) .
.Ss "Resource files"
Upon startup \*(UA reads in several resource files:
.Bl -tag -width ".It Pa _AIL_EXTRA_R_"
.Mx
.It Pa \*(UR
System wide initialization file.
Reading of this file can be suppressed, either by using the
.Fl n
command line option, or by setting the environment variable
.Ev NAIL_NO_SYSTEM_RC .
.Mx
.It Pa \*(ur
File giving initial commands.
A different file can be chosen by setting the environment variable
.Ev MAILRC .
.It Va NAIL_EXTRA_RC
Can be used to define an optional startup file to be read after
.Pa \*(ur .
This variable is only honoured in certain circumstances (see its
documentation for more).
.El
.Pp
The content of these files is interpreted as follows:
.Pp
.Bl -bullet -compact
.It
A lines' leading whitespace is ignored.
.It
An empty line is ignored.
.It
If the line (content) starts with the number sign
.Ql #
then it is a comment-command \(en a real command! \(en and also ignored.
This command is the only form of comment that is understood.
.It
A line can be
.Dq continued
on the next line if the newline character is
.Dq escaped
by preceding it with the backslash character
.Ql \e .
Note that any leading whitespace of follow lines is removed:
If whitespace is desired it must be placed before the backslash.
For example:
.Bd -literal -offset indent
# This line is a comment command.  And y\e
es, it is really continued here.
set debug \e
verbose
.Ed
.El
.Ss "Character sets"
\*(OP \*(UA detects the character set of the terminal by using
mechanisms that are controlled by the
.Ev LC_CTYPE
locale setting
(the manual for
.Xr setlocale 3
should give an overview); the \*(UA internal variable
.Va ttycharset
will be set to the detected terminal character set accordingly
and will thus show up in the output of the commands
.Ic set
and
.Ic varshow .
.Pp
However, a user supplied
.Va ttycharset
value is not overwritten by this detection mechanism: this
.Dq feature
must be used if the detection doesn't work properly,
and it may be used to adjust the name of the locale character set.
E.g., on BSD systems one may use a locale with the character set
ISO8859-1, which is not a valid name for this character set; to be on
the safe side, one may set
.Va ttycharset
to the correct name, which is ISO-8859-1.
.Pp
Note that changing the value doesn't mean much beside that,
since several aspects of the real character set are implied by the
locale environment of the system,
and that stays unaffected by the content of an overwritten
.Va ttycharset
variable.
(This is mostly an issue when interactively using \*(UA, though.
It is actually possible to send mail in a completely
.Dq faked
locale environment.)
.Pp
If no character set conversion capabilities have been compiled into
\*(UA (i.e., no
.Xr iconv 3
library has been found), then
.Va ttycharset
will be the only supported character set,
it is simply assumed that it can be used to exchange 8-bit messages,
and the rest of this section does not apply;
it may however still be necessary to explicitly set it if automatic
detection fails, since in that case it defaults to the mentioned
ISO-8859-1.
.Pp
When reading messages, their text is converted into
.Va ttycharset
as necessary in order to display them on the users terminal.
Unprintable characters and invalid byte sequences are detected
and replaced by proper substitution characters (unless the variable
.Va print-all-chars
was set once \*(UA was started).
Also see
.Va charset-unknown-8bit
to deal with another hairy aspect of message interpretation.
.Pp
When sending messages all their parts and attachments are classified.
Whereas no character set conversion is performed on those parts which
appear to be binary data,
the character set being used must be declared within the MIME header of
an outgoing text part if it contains characters that do not conform to
the set of characters that are allowed by the email standards.
Permissible values for character sets can be declared using the
.Va sendcharsets
variable, and
.Va charset-8bit ,
which defines a catch-all last-resort fallback character set that is
implicitly appended to the list of character-sets in
.Va sendcharsets .
.Pp
When replying to a message and the variable
.Va reply-in-same-charset
is set then the character set of the message being replied to is tried
first.
And it is also possible to make \*(UA work even more closely related to
the current locale setting automatically by using the variable
.Va sendcharsets-else-ttycharset ,
please see there for more information.
.Pp
All the specified character sets are tried in order unless the
conversion of the part or attachment succeeds.
If none of the tried (8-bit) character sets is capable to represent the
content of the part or attachment,
then the message will not be sent and its text will be saved to
.Ev DEAD .
In general, if the message
.Dq Cannot convert from a to b
appears, either some characters are not appropriate for the currently
selected (terminal) character set,
or the needed conversion is not supported by the system.
In the first case, it is necessary to set an appropriate
.Ev LC_CTYPE
locale and/or the variable
.Va ttycharset .
.Pp
The best results are usually achieved when \*(UA is run in a UTF-8
locale on a UTF-8 capable terminal, in which case the full Unicode
spectrum of characters is available.
In this setup characters from various countries can be displayed,
while it is still possible to use more simple character sets for sending
to retain maximum compatibility with older mail clients.
.Ss "Message states"
\*(UA differentiates in between several different message states;
the current state will be reflected in the header display if
.Va headline
is configured to do so.
In \*(UA message states are inspected when leaving a mailbox and may
cause messages to be automatically moved to the special
.Ev MBOX
mailbox \(en because this may be irritating to users which are used to
.Dq more modern
mail-user-agents, the default global
.Pa \*(UR
sets the
.Va hold
and
.Va keepsave
variables in order to suppress this behaviour.
.Bl -tag -width ".It Ql _reserved"
.It Ql new
Message has neither been viewed nor moved to any other state.
Such messages are retained even in the system mailbox.
.It Ql unread
Message has neither been viewed nor moved to any other state, but the
message was present already when the mailbox has been opened last:
Such messages are retained even in the system mailbox.
.It Ql read
The message has been processed by one of the following commands:
.Ic ~f ,
.Ic ~m ,
.Ic ~F ,
.Ic ~M ,
.Ic copy ,
.Ic mbox ,
.Ic next ,
.Ic pipe  ,
.Ic print ,
.Ic Print ,
.Ic top ,
.Ic type ,
.Ic Type ,
.Ic undelete .
The
.Ic delete ,
.Ic dp ,
and
.Ic dt
commands may also cause the next message to be marked as read, depending
on the value of the
.Va autoprint
variable.
Except when the
.Ic exit
command is used, messages that are in the system mailbox or in mailboxes
which were opened with the special
.Ql %:
prefix and are in
.Ql read
state when the mailbox is left will be saved in
.Ev MBOX
unless the option
.Va hold
it set.
.It Ql deleted
The message has been processed by one of the following commands:
.Ic delete ,
.Ic dp ,
.Ic dt .
Only
.Ic undelete
can be used to access such messages.
.It Ql preserved
The message has been processed by a
.Ic preserve
command and it will be retained in its current location.
.It Ql saved
The message has been processed by one of the following commands:
.Ic save
or
.Ic write .
Unless when the
.Ic exit
command is used, messages that are in the system mailbox or in mailboxes
which were opened with the special
.Ql %:
prefix and are in
.Ql saved
state when the mailbox is left will be deleted; they will be saved in
.Ev MBOX
when the option
.Va keepsave
is set.
.El
.Ss "Specifying messages"
Commands such as
.Ic print
and
.Ic delete
can be given a list of message numbers as arguments to apply to a number
of messages at once.
Thus
.Ql delete 1 2
deletes messages 1 and 2,
whereas
.Ql delete 1-5
will delete the messages 1 through 5.
In sorted or threaded mode (see the
.Ic sort
command),
.Ql delete 1-5
will delete the messages that are located between (and including)
messages 1 through 5 in the sorted/threaded order, as shown in the
header summary.
Multiple colon modifiers can be joined into one, e.g.,
.Ql :du .
The following special message names exist:
.Bl -tag -width ".It Ar _n_u"
.It Ar :n
All
.Ql new
messages.
.It Ar :o
All old messages (any not in state
.Ql read
or
.Ql new ) .
.It Ar :u
All
.Ql unread
messages.
.It Ar :d
All
.Ql deleted
messages (for the
.Ic undelete
command).
.It Ar :r
All
.Ql read
messages.
.It Ar :f
All
.Ic flag Ns
ged messages.
.It Ar :a
All answered messages
(cf. the
.Va markanswered
variable).
.It Ar :t
All messages marked as draft.
.It Ar :s
\*(OP All messages classified as spam.
.It Ar :S
\*(OP All messages with unsure spam classification.
.It Ar \&amp;.
The current message, the so-called
.Dq dot .
.It Ar \&amp;;
The message that was previously the current message.
.It Ar \&amp;,
The parent message of the current message,
that is the message with the Message-ID given in the
.Ql In-Reply-To:
field or the last entry of the
.Ql References:
field of the current message.
.It Ar -
The next previous undeleted message,
or the next previous deleted message for the
.Ic undelete
command.
In sorted/threaded mode,
the next previous such message in the sorted/threaded order.
.It Ar +
The next undeleted message,
or the next deleted message for the
.Ic undelete
command.
In sorted/threaded mode,
the next such message in the sorted/threaded order.
.It Ar ^
The first undeleted message,
or the first deleted message for the
.Ic undelete
command.
In sorted/threaded mode,
the first such message in the sorted/threaded order.
.It Ar $
The last message.
In sorted/threaded mode,
the last message in the sorted/threaded order.
.It Ar &amp; Ns Ar x
In threaded mode,
selects the message addressed with
.Ar x ,
where
.Ar x
is any other message specification,
and all messages from the thread that begins at it.
Otherwise it is identical to
.Ar x .
If
.Ar x
is omitted,
the thread beginning with the current message is selected.
.It Ar *
All messages.
.It Ar `
All messages that were included in the message list for the previous
command.
.It Ar / Ns Ar string
All messages that contain
.Ar string
in the subject field (case ignored).
See also the
.Va searchheaders
variable.
If
.Ar string
is empty,
the string from the previous specification of that type is used again.
.It Xo Op Ar @ Ns Ar name-list Ns
.Ar @ Ns Ar expr
.Xc
All messages that contain the given case-insensitive search
.Ar expr Ns
ession; if the \*(OPal regular expression (see
.Xr re_format 7 )
support is available
.Ar expr
will be interpreted as one if any of the
.Dq magical
regular expression characters is seen.
If the optional
.Ar @ Ns Ar name-list
part is missing, the search is restricted to the subject field body,
but otherwise
.Ar name-list
specifies a comma-separated list of header fields to search, as in
.Pp
.Dl '@to,from,cc@Someone i ought to know'
.Pp
In order to search for a string that includes a
.Ql @
(commercial at) character the
.Ar name-list
is effectively non-optional, but may be given as the empty string.
Some special header fields may be abbreviated:
.Ql f ,
.Ql t ,
.Ql c ,
.Ql b
and
.Ql s
will match
.Ql From ,
.Ql To ,
.Ql Cc ,
.Ql Bcc
and
.Ql Subject ,
respectively and case-insensitively.
The special names
.Ql header
or
.Ql &lt;
can be used to search in (all of) the header(s) of the message, and the
special names
.Ql body
or
.Ql &gt;
and
.Ql text
or
.Ql =
can be used to perform full text searches \(en whereas the former
searches only the body, the latter also searches the message header.
.Pp
This message specification performs full text comparison, but even with
regular expression support it is almost impossible to write a search
expression that savely matches only a specific address domain.
To request that the content of the header is treated as a list of
addresses, and to strip those down to the plain email address which the
search expression is to be matched against, prefix the header name
(abbreviation) with a tilde
.Ql ~ :
.Pp
.Dl '@~f@@a\e.safe\e.domain\e.match$'
.It Ar address
A case-insensitive
.Dq any substring matches
search against the
.Ql From:
header, which will match addresses (too) even if
.Va showname
is set (and POSIX says
.Dq any address as shown in a header summary shall be matchable in this form ) ;
However, if the
.Va allnet
variable is set, only the local part of the address is evaluated
for the comparison, not ignoring case, and the setting of
.Va showname
is completely ignored.
For finer control and match boundaries use the
.Ql @
search expression; the \*(OPal IMAP-style
.Ql (from address)
expression can also be used if substring matches are desired.
.El
.Pp
\*(OP IMAP-style SEARCH expressions may also be used.
This addressing mode is available with all types of folders;
\*(UA will perform the search locally as necessary.
Strings must be enclosed by double quotes
.Ql \&amp;"
in their entirety if they contain white space or parentheses;
within the quotes, only backslash
.Ql \e
is recognized as an escape character.
All string searches are case-insensitive.
When the description indicates that the
.Dq envelope
representation of an address field is used,
this means that the search string is checked against both a list
constructed as
.Bd -literal -offset indent
(\*qname\*q \*qsource\*q \*qlocal-part\*q \*qdomain-part\*q)
.Ed
.Pp
for each address,
and the addresses without real names from the respective header field.
These search expressions can be nested using parentheses, see below for
examples.
.Pp
.Bl -tag -compact -width ".It Ar _n_u"
.It Ar ( criterion )
All messages that satisfy the given
.Ar criterion .
.It Ar ( criterion1 criterion2 ... criterionN )
All messages that satisfy all of the given criteria.
.It Ar ( or criterion1 criterion2 )
All messages that satisfy either
.Ar criterion1
or
.Ar criterion2 ,
or both.
To connect more than two criteria using
.Ql or
specifications have to be nested using additional parentheses,
as with
.Ql (or a (or b c)) ,
since
.Ql (or a b c)
really means
.Ql ((a or b) and c) .
For a simple
.Ql or
operation of independent criteria on the lowest nesting level,
it is possible to achieve similar effects by using three separate
criteria, as with
.Ql (a) (b) (c) .
.It Ar ( not criterion )
All messages that do not satisfy
.Ar criterion .
.It Ar ( bcc \*q Ns Ar string Ns Ar \*q )
All messages that contain
.Ar string
in the envelope representation of the
.Ql Bcc:
field.
.It Ar ( cc \*q Ns Ar string Ns Ar \*q )
All messages that contain
.Ar string
in the envelope representation of the
.Ql Cc:
field.
.It Ar ( from \*q Ns Ar string Ns Ar \*q )
All messages that contain
.Ar string
in the envelope representation of the
.Ql From:
field.
.It Ar ( subject \*q Ns Ar string Ns Ar \*q )
All messages that contain
.Ar string
in the
.Ql Subject:
field.
.It Ar ( to \*q Ns Ar string Ns Ar \*q )
All messages that contain
.Ar string
in the envelope representation of the
.Ql To:
field.
.It Ar ( header name \*q Ns Ar string Ns Ar \*q )
All messages that contain
.Ar string
in the specified
.Ql Name:
field.
.It Ar ( body \*q Ns Ar string Ns Ar \*q )
All messages that contain
.Ar string
in their body.
.It Ar ( text \*q Ns Ar string Ns Ar \*q )
All messages that contain
.Ar string
in their header or body.
.It Ar ( larger size )
All messages that are larger than
.Ar size
(in bytes).
.It Ar ( smaller size )
All messages that are smaller than
.Ar size
(in bytes).
.It Ar ( before date )
All messages that were received before
.Ar date ,
which must be in the form
.Ql d[d]-mon-yyyy ,
where
.Ql d
denotes the day of the month as one or two digits,
.Ql mon
is the name of the month \(en one of
.Ql Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec ,
and
.Ql yyyy
is the year as four digits, e.g.,
.Ql 28-Dec-2012 .
.It Ar ( on date )
All messages that were received on the specified date.
.It Ar ( since date )
All messages that were received since the specified date.
.It Ar ( sentbefore date )
All messages that were sent on the specified date.
.It Ar ( senton date )
All messages that were sent on the specified date.
.It Ar ( sentsince date )
All messages that were sent since the specified date.
.It Ar ()
The same criterion as for the previous search.
This specification cannot be used as part of another criterion.
If the previous command line contained more than one independent
criterion then the last of those criteria is used.
.El
.Ss "On URL syntax and credential lookup"
\*(IN For accessing protocol-specific resources, like POP3 mailboxes,
usage of compact and standardized Uniform Resource Locators
(URL, RFC 1738) has become omnipresent.
\*(UA expects and understands URLs in the following form;
parts in brackets
.Ql []
denote optional parts, optional either because there also exist other
ways to define the information in question or because support of the
part is protocol-specific \(en e.g.,
.Ql /path
is used by the IMAP protocol but not by POP3.
.Pp
.Dl PROTOCOL://[USER[:PASSWORD]@]server[:port][/path]
.Pp
If
.Ql USER
and
.Ql PASSWORD
are specified as part of an URL they must be given in URL percent
encoded (RFC 3986) form \(en the command
.Ic urlcodec
can be used to perform the encoding and show the encoded value.
(This doesn't really conform to any standard, but for one it isn't
used for any data exchange over the internet, and second it's easier for
users to simply call
.Ic urlcodec
on a string and use that instead of having to deal with several
different standards.)
On the other hand, values given in variable names are expected not to be
URL percent encoded.
.Pp
Many variable options of \*(UA exist in multiple versions, called
variable chains for the rest of this document: the plain
.Ql variable
as well as
.Ql variable-HOST
and
.Ql variable-USER@HOST .
Here
.Ql HOST
indeed means
.Ql server:port
if a
.Ql port
had been specified in the respective URL, otherwise it refers to the plain
.Ql server .
Also,
.Ql USER
isn't truly the
.Ql USER
that had been found when doing the user chain lookup as is described
below, i.e., this
.Ql USER
will never be in URL percent encoded form, whether it came from an URL or not.
.Pp
For example, whether an hypothetical URL
.Ql smtp://hey%3Ayou@our.house
had been given that includes a user, or whether the URL was
.Ql smtp://our.house
and the user had been found differently, to lookup the variable chain
.Va smtp-use-starttls
\*(UA first looks for whether
.Ql smtp-\:use-\:starttls-\:hey:you@our.house
is defined, then whether
.Ql smtp-\:use-\:starttls-\:our.house
exists before finally ending up looking at the plain variable itself.
.Pp
\*(UA obeys the following logic scheme when dealing with the
necessary credential informations of an account:
.Bl -bullet
.It
If no
.Ql USER
has been given in the URL the variables
.Va user-HOST
and
.Va user
are looked up; if no such variable(s) can be found then \*(UA will,
when enforced by the \*(OPal variables
.Va netrc-lookup-HOST
or
.Va netrc-lookup ,
search the users
.Pa .netrc
file for a
.Ql HOST
specific entry which provides a
.Ql login
name: this lookup will only succeed if unambiguous (one possible matching
entry for
.Ql HOST ) .
.Pp
If there is still no
.Ql USER
then \*(UA will fall back to the user who is supposed to run \*(UA:
either the name that has been given with the
.Fl u
command line option (or, equivalently, but with less precedence, the
environment variable
.Ev USER ) ,
or the
.Dq current
user.
The identity of this user has been fixated during \*(UA startup and is
known to be a valid user on the current host.
.It
Authentication: unless otherwise noted this will lookup the
.Va PROTOCOL-auth-USER@HOST , PROTOCOL-auth-HOST , PROTOCOL-auth
variable chain, falling back to a protocol-specific default should this
have no success.
.It
If no
.Ql PASSWORD
has been given in the URL \(en it should be noted once that specifying
the password in the URL is only syntactic sugar for the user, it'll
never be part of an URL that \*(UA uses itself \(en, then if the
.Ql USER
has been found through the \*(OPal
.Pa .netrc
file lookup then that may have already provided the password, too.
Otherwise the variable chain
.Va password-USER@HOST , password-HOST , password
is looked up.
.Pp
\*(OP Then if any of the variables of the chain
.Va agent-shell-lookup-USER@HOST , agent-shell-lookup-HOST , \
agent-shell-lookup
is set the shell command specified therein is run and the output (less
newline characters) will be used as the password.
It is perfectly valid for such an agent to simply not return any data,
in which case the password lookup is continued somewhere else;
Any command failure is treated as a hard error, however.
.Pp
The next variable chain that is inspected is the \*(OPal
.Va netrc-lookup-USER@HOST , netrc-lookup-HOST , netrc-lookup ,
but this time looking only for the password (multiple user accounts
for a single machine may exist as well as a fallback entry without
user but with a password).
.Pp
If at that point there is still no password available, but the
(protocols') chosen authentication type requires a password, then in
interactive mode the user will be prompted on the terminal.
.El
.Pp
.Sy Note:
S/MIME verification works relative to the values found in the
.Ql From:
(or
.Ql Sender: )
header field(s), which means that the values of
.Va smime-sign , smime-sign-cert , smime-sign-include-certs
and
.Va smime-sign-message-digest
will not be looked up using the
.Ql USER
and
.Ql HOST
chains from above but instead use the corresponding values from the
message that is being worked on.
In unusual cases multiple and different
.Ql USER
and
.Ql HOST
combinations may therefore be involved \(en on the other hand those
unusual cases become possible.
The usual case is as short as:
.Pp
.Dl set smtp=smtp://USER:PASS@HOST smtp-use-starttls \e
.Dl \ \ \ \ smime-sign smime-sign-cert=+smime.pair
.Pp
The section
.Sx EXAMPLES
contains complete example configurations.
.Ss "Command line editor"
\*(OP \*(UA can be configured to support a command line editor and
command history lists which are saved in between sessions.
One may link against fully-fledged external libraries
.Pf ( Xr readline 6 ,
.Xr editline 3 Ns
) or use \*(UA's own command line editor NCL (Nail-Command-Line)
instead, which should work in all environments which comply to the
ISO C standard (ISO/IEC 9899:1990/Amendment 1:1995).
When an external library is used, interactive behaviour of \*(UA relies
on that library and may not correspond one-to-one to what is described
in this manual.
.Pp
Regardless of the actually used command line editor
.Ic history
entries will be created for lines entered in command mode only, and
creation of such an entry can be forcefully suppressed by starting the
line with a space character.
Note that
.Ic history
handling is by itself an optional feature and may therefore not be
available.
For more information see the documentation of the options
.Va emptystart ,
.Va history-gabby ,
.Va history-gabby-persist ,
.Va line-editor-disable ,
.Va NAIL_HISTFILE
and
.Va NAIL_HISTSIZE .
.Pp
The builtin \*(UA command line editor supports the following operations;
the notation
.Ql ^-character
stands for the combination of the
.Dq Control
key plus the mentioned character, e.g.,
.Ql ^A
means
.Dq hold down control key and press the A key :
.Pp
.Bl -tag -compact -width "Ql _M"
.It Ql ^A
Go to the start of the line.
.It Ql ^B
Move the cursor backward one character.
.It Ql ^D
Forward delete the character under the cursor;
quits \*(UA if used on the empty line unless the
.Va ignoreeof
option is set.
.It Ql ^E
Go to the end of the line.
.It Ql ^F
Move the cursor forward one character.
.It Ql ^G
Cancel current operation, full reset.
If there is an active history search or tabulator expansion then this
command will first reset that, reverting to the former line content;
thus a second reset is needed for a full reset in this case.
In all cases \*(UA will reset a possibly used multibyte character input
state machine.
.It Ql ^H
The same as
.Dq backspace :
backward delete one character.
.It Ql ^I
\*(OP The same as
.Dq horizontal tabulator :
try to expand the word before the cursor.
(Note this is not
.Dq tabulator-completion
as is known from the
.Xr sh 1
but really means the usual \*(UA expansion, as documented for
.Ic file ,
yet it involves shell expansion as a last step, too.)
.It Ql ^J
The same as
.Dq ENTER :
complete this line of input.
.It Ql ^K
Delete all characters from the cursor to the end of the line.
.It Ql ^L
Repaint the line.
.It Ql ^N
\*(OP Go to the next history entry.
.It Ql ^O
Execute the command
.Ic dp .
.It Ql ^P
\*(OP Go to the previous history entry.
.It Ql ^R
\*(OP Complete the current line from (the remaining older) history entries.
.It Ql ^U
The same as
.Ql ^A
followed by
.Ql ^K .
.It Ql ^W
Delete the characters from the one preceding the cursor to the preceding
word boundary.
.It Ql ^X
Move the cursor forward one word boundary.
.It Ql ^Y
Move the cursor backward one word boundary.
.El
.Pp
If problems with commands that are based upon rightwise movement are
encountered, adjustments of the option
.Va line-editor-cursor-right
may solve the problem, as documented for it.
.Pp
If the terminal produces key sequences which are compatible with
.Xr xterm 1
then the left and right cursor keys will map to
.Ql ^B
and
.Ql ^F ,
respectively, the up and down cursor keys will map to
.Ql ^P
and
.Ql ^N ,
and the Home/End/PgUp/PgDown keys will call the
.Ic z
command with the respective arguments
.Ql 0 ,
.Ql $ ,
.Ql -
and
.Ql +
(i.e., perform scrolling through the header summary list).
.Ss "Coloured message display"
\*(OP \*(UA can be configured to support coloured message display,
realized by emitting ANSI colour escape sequences.
Colours are only used when the
.Ev TERM
environment variable is set and either the terminal type can be found in
.Va colour-terms
or its name includes the string
.Ql color .
.Pp
On top of that the binary option
.Va colour-pager
defines whether these colour sequences are also generated when the output
of a command needs to go through the
.Ev PAGER
(also see
.Va crt Ns
) \(en this is not enabled by default because different pager programs
need different command line switches or other configuration in order to
support those colour sequences, please see the option for more details.
.Pp
To forcefully disable all colour support, set
.Va colour-disable .
.Pp
Colours can be configured through font attributes
.Pf ( Ql ft=
\(en
.Ql bold ,
.Ql invers
and
.Ql underline ) ,
foreground
.Pf ( Ql fg= )
and background
.Pf ( Ql bg= )
colours
.Pf ( Ql black ,
.Ql blue ,
.Ql green ,
.Ql red ,
.Ql brown ,
.Ql magenta ,
.Ql cyan
and
.Ql white ) .
Multiple specifications can be joined in a comma separated list, as in
.Pp
.Dl set colour-msginfo="ft=bold,fg=magenta,bg=cyan"
.Pp
Options to be set are
.Va colour-msginfo ,
.Va colour-partinfo ,
.Va colour-from_ ,
.Va colour-header
and
.Va colour-uheader ,
as well as
.Va colour-user-headers ,
which is a list of headers to be colourized via
.Va colour-uheader
instead of the default
.Va colour-header .
.Sh COMMANDS
Each command is typed on a line by itself,
and may take arguments following the command word.
The command need not be typed in its entirety \(en
the first command which matches the typed prefix is used.
(The command
.Ic list
prints a sorted list of available commands, and the command
.Ic help
(or
.Ic \&amp;? ) ,
when given an argument, will show a documentation string for the
expansion, as in
.Ql ?unc ;
documentation strings are however \*(OPal.)
.Pp
For commands which take message lists as arguments, the next message
forward that satisfies the command's requirements will be used shall no
explicit message list have been passed.
If there are no messages forward of the current message,
the search proceeds backwards,
and if there are no good messages at all,
\*(UA types
.Dq no applicable messages
and aborts the command.
The arguments to commands can be quoted, using the following methods:
.Pp
.Bl -bullet -compact -offset indent
.It
An argument can be enclosed between paired double-quotes
.Ql """argument"""
or
single-quotes
.Ql 'argument' ;
any white space, shell word expansion, or backslash characters (except
as described next) within the quotes are treated literally as part of
the argument.
A double-quote will be treated literally within single-quotes and vice
versa.
Inside such a quoted string the actually used quote character can be
used nonetheless by escaping it with a backslash
.Ql \e ,
as in
.Ql """y\e""ou""" .
.It
An argument that is not enclosed in quotes, as above, can usually still
contain space characters if those spaces are backslash-escaped.
.It
A backslash outside of the enclosing quotes is discarded
and the following character is treated literally as part of the argument.
.It
An unquoted backslash at the end of a command line is discarded and the
next line continues the command.
.El
.Pp
Filenames, where expected, are subsequently subjected to the following
transformations, in sequence:
.Pp
.Bl -bullet -compact -offset indent
.It
If the filename begins with an unquoted plus sign, and the
.Va folder
variable is defined,
the plus sign will be replaced by the value of the
.Va folder
variable followed by a slash.
If the
.Va folder
variable is unset or is set to null, the filename will be unchanged.
.It
Shell word expansions are applied to the filename.
.Sy Compatibility note:
on the long run support for complete shell word expansion will be
replaced by an internally implemented restricted expansion mechanism in
order to circumvent possible security impacts through shell expansion.
Expect that a growing number of program parts only support this
restricted syntax:
.Pp
Meta expansions are applied to the filename: leading tilde characters
.Pf ( Ql ~/ )
will be replaced by the expansion of
.Ev HOME ,
and any occurrence of
.Ql $VARIABLE
(or
.Ql ${VARIABLE} )
will be replaced by the expansion of the variable, if possible;
\*(UA internal as well as environmental (shell) variables can be
accessed through this mechanism.
In order to include a raw
.Ql $
character precede it with a backslash
.Ql \e ,
to include a backslash double it.
If more than a single pathname results from this expansion and the
command is expecting one file, an error results.
.Pp
Note that in interactive display context, in order to allow simple
value acceptance (typing
.Dq ENTER ) ,
backslash quoting is performed automatically as necessary, e.g., a file
.Ql diet\e is \ecurd.txt
will be displayed as
.Ql diet\e\e is \e\ecurd.txt .
.El
.Pp
The following commands are available:
.Bl -tag -width ".Ic _ccount"
.Mx
.It Ic #
The comment-command causes the entire line to be ignored.
.Sy Note:
this really is a normal command which' purpose is to discard its
arguments, not a
.Dq comment-start
indicating special character, which means that, e.g., trailing comments
on a line are not possible.
.Mx
.It Ic ~
Interprets the remainder of the word as a macro name and passes it
through to the
.Ic call
command; e.g.,
.Ql ~ Ns Ar mymacro
is a shorter synonym for
.Ql call Ar mymacro .
.Mx
.It Ic -
Print out the preceding message.
If given a numeric argument n,
goes to the n'th previous message and prints it.
.Mx
.It Ic =
Show the current message number (the
.Dq dot ) .
.Mx
.It Ic \&amp;?
Prints a brief summary of commands.
\*(OP Given an argument a synopsis for the command in question is
printed instead;
commands can be abbreviated in general and this command can be used
to see the full expansion of an abbreviation including the synopsis,
try, e.g.,
.Ql ?h ,
.Ql ?hel
and
.Ql ?help
and see how the display changes.
.Mx
.It Ic \&amp;!
Executes the
.Ev SHELL
(see
.Xr sh 1 Ns
) command which follows.
.Mx
.It Ic \&amp;|
A synonym for the
.Ic pipe
command.
.Mx
.It Ic account
(ac) Creates, selects or lists (an) account(s).
An account is a group of commands and variable settings which together
usually arrange the environment for the purpose of creating a system login.
Without any argument a listing of all defined accounts and their content
is printed.
A specific account can be activated by giving solely its name, resulting
in the system mailbox or inbox of that account to be activated as via an
explicit use of the command
.Ic file .
The two argument form is identical to defining a macro as via
.Ic define .
For example:
.Bd -literal -offset indent
account myisp {
set folder=imaps://mylogin@imap.myisp.example
set record=+Sent
set from="myname@myisp.example (My Name)"
set smtp=smtp://mylogin@smtp.myisp.example
}
.Ed
.Pp
creates an account named
.Ql myisp
which can later be selected by specifying
.Ql account myisp .
The special account
.Ql null
(case-insensitive) always exists.
.Ic localopts
can be used to localize account settings \(en different to normal macros
the settings will be reverted once the account is switched off.
Accounts can be deleted via
.Ic unaccount .
.Mx
.It Ic alias
(a) With no arguments, prints out all currently-defined aliases.
With one argument, prints out that alias.
With more than one argument,
creates a new alias or appends to an existing one.
.Ic unalias
can be used to delete aliases.
.Mx
.It Ic alternates
(alt) Manage a list of alternate addresses / names of the active user,
members of which will be removed from recipient lists when replying to
messages (and the
.Va metoo
variable is not set).
If arguments are given the set of alternate names is replaced by them,
without arguments the current set is displayed.
.Mx
.It Ic answered
Takes a message list and marks each message as having been answered.
This mark has no technical meaning in the mail system;
it just causes messages to be marked in the header summary,
and makes them specially addressable.
.Mx
.It Ic cache
\*(OP Only applicable to cached IMAP mailboxes;
takes a message list and reads the specified messages into the IMAP
cache.
.Mx
.It Ic call
Calls a macro that has been created via
.Ic define .
.Mx
.It Ic cd
(ch) Change the working directory to
.Ev HOME
or the given argument.
Synonym for
.Ic chdir .
.Mx
.It Ic certsave
\*(OP Only applicable to S/MIME signed messages.
Takes a message list and a file name and saves the certificates
contained within the message signatures to the named file in both
human-readable and PEM format.
The certificates can later be used to send encrypted messages to the
respective message senders by setting
.Va smime-encrypt-USER@HOST
variables.
.Mx
.It Ic chdir
(ch) Change the working directory to
.Ev HOME
or the given argument.
Synonym for
.Ic cd .
.Mx
.It Ic collapse
Only applicable to threaded mode.
Takes a message list and makes all replies to these messages invisible
in header summaries, unless they are in state
.Ql new .
.Mx
.It Ic connect
\*(OP If operating in disconnected mode on an IMAP mailbox,
switch to online mode and connect to the mail server while retaining
the mailbox status.
See the description of the
.Va disconnected
variable for more information.
.Mx
.It Ic Copy
(C) Copy messages to files whose names are derived from the author of
the respective message and don't mark them as being saved;
otherwise identical to
.Ic Save .
.Mx
.It Ic copy
(c) Copy messages to the named file and don't mark them as being saved;
otherwise identical to
.Ic save .
.Mx
.It Ic cwd
Print the current working directory.
.Mx
.It Ic Decrypt
\*(OP For unencrypted messages this command is identical to
.Ic Copy ;
Encrypted messages are first decrypted, if possible, and then copied.
.Mx
.It Ic decrypt
\*(OP For unencrypted messages this command is identical to
.Ic copy ;
Encrypted messages are first decrypted, if possible, and then copied.
.Mx
.It Ic define
Without arguments the current list of macros, including their content,
is printed, but otherwise a macro is defined.
A macro definition is a sequence of commands in the following form:
.Bd -literal -offset indent
define name {
command1
command2
...
commandN
}
.Ed
.Pp
A defined macro can be invoked explicitly by using the
.Ic call
or
.Ic ~
commands, or implicitly by setting the
.Va folder-hook
or
.Va folder-hook-FOLDER
variables.
Note that interpretation of
.Ic localopts
depends on how (i.e.,
.Dq as what :
normal macro, folder hook, account switch) the macro is invoked.
Macros can be deleted via
.Ic undefine .
.Mx
.It Ic delete
(d) Marks the given message list as
.Ql deleted .
Deleted messages will neither be saved in
.Ev MBOX
nor will they be available for most other commands.
.Mx
.It Ic discard
(di) Identical to
.Ic ignore .
Also see
.Ic retain .
.Mx
.It Ic disconnect
\*(OP (disco) If operating in online mode on an IMAP mailbox,
switch to disconnected mode while retaining the mailbox status.
See the description of the
.Va disconnected
variable for more.
A list of messages may optionally be given as argument;
the respective messages are then read into the cache before the
connection is closed.
Thus `disco *' makes the entire mailbox available for disconnected use.
.Mx
.Mx
.It Ic dp , dt
Deletes the current message and prints the next message.
If there is no next message, \*(UA says
.Dq at EOF .
.Mx
.It Ic draft
Takes a message list and marks each given message as a draft.
This mark has no technical meaning in the mail system;
it just causes messages to be marked in the header summary,
and makes them specially addressable.
.Mx
.It Ic echo
(ec) Echoes its arguments,
resolving special names as documented for the command
.Ic file .
The escape sequences
.Ql \ea ,
.Ql \eb ,
.Ql \ec ,
.Ql \ef ,
.Ql \en ,
.Ql \er ,
.Ql \et ,
.Ql \ev ,
.Ql \e\e
and
.Ql \e0octal-num
are interpreted just as they are by
.Xr printf 1
(proper quoting provided).
.Mx
.It Ic edit
(e) Point the text editor (as defined in
.Ev EDITOR )
at each message from the given list in turn.
Modified contents are discarded unless the
.Va writebackedited
variable is set.
.Mx
.It Ic elif
Part of the
.Ic if Ns / Ns Ic elif Ns / Ns Ic else Ns / Ns Ic endif
conditional \(em if the condition of a preceeding
.Ic if
was false, check the following condition and execute the following block
if it evaluates true.
.Mx
.It Ic else
(el) Part of the
.Ic if Ns / Ns Ic elif Ns / Ns Ic else Ns / Ns Ic endif
conditional \(em if none of the conditions of the preceeding
.Ic if
and
.Ic elif
commands was true, the
.Ic else
block is executed.
.Mx
.It Ic endif
(en) Marks the end of an
.Ic if Ns / Ns Ic elif Ns / Ns Ic else Ns / Ns Ic endif
conditional execution block.
.Mx
.It Ic errors
\*(OP Since \*(UA uses the console as a user interface it can happen
that messages scroll by too fast to become recognized.
Optionally an error message ring queue is available which stores
duplicates of any error message and notifies the user in interactive
sessions whenever a new error has occurred.
The queue is finite: if its maximum size is reached any new message
replaces the eldest.
The command
.Ic errors
can be used to manage this message queue: if given
.Ar show
or no argument the queue will be displayed and cleared,
.Ar clear
will only clear all messages from the queue.
.Mx
.It Ic exit
(ex or x) Exit from \*(UA without changing the active mailbox and skip
any saving of messages in
.Ev MBOX
as well as a possibly tracked command line editor history file.
.Mx
.It Ic features
Print the list of features that have been compiled into \*(UA.
.Mx
.It Ic File
(Fi) Like
.Ic file ,
but open the mailbox readonly.
.Mx
.It Ic file
(fi) The file command switches to a new mailbox.
Without arguments it prints the complete state of the current mailbox.
If an argument is given, it will write out changes (such as deletions)
the user has made and open a new mailbox.
Some special conventions are recognized for the
.Ar name
argument:
.Pp
.Bl -tag -compact -offset indent -width ".Ar %:__lespec"
.It Ar #
(number sign) means the previous file,
.It Ar %
(percent sign) means the invoking user's system mailbox, which either is
the (itself expandable)
.Va inbox
if that is set (\*(ID and non-empty), the standardized absolute pathname
indicated by
.Ev MAIL
if that is set, or a builtin compile-time default otherwise.
(\*(OB For IMAP folders only, and only if
.Va inbox
is not set, the value of
.Va folder
is inspected and used if found.)
.It Ar %user
means the system mailbox of
.Ar user
(and never the value of
.Va inbox
nor
.Va folder ,
regardless of their actual setting),
.It Ar &amp;
(ampersand) means the invoking user's
.Ev MBOX
file and
.It Ar +file
means a
.Ar file
in the
.Va folder
directory.
.It Ar %:filespec
expands to the same value as
.Ar filespec ,
but the file is handled as a system mailbox by, e.g., the
.Ic mbox
and
.Ic save
commands, meaning that messages that have been read in the current
session will be moved to the
.Ev MBOX
mailbox instead of simply being flagged as read.
.El
.Pp
If the name matches one of the strings defined with the command
.Ic shortcut ,
it is replaced by its long form and expanded.
If the name ends with
.Ql .gz ,
.Ql .bz2
or
.Ql .xz
it is treated as being compressed with
.Xr gzip 1 ,
.Xr bzip2 1
or
.Xr xz 1 ,
respectively, and transparently handled through an intermediate
(un)compression step (using a temporary file) with the according
facility, sufficient support provided.
Likewise, if the named file doesn't exist, but a file with one of the
mentioned compression extensions does, then the name is automatically
expanded and the compressed file is used.
.Pp
Otherwise, if the name ends with an extension for which
.Va file-hook-load-EXTENSION
and
.Va file-hook-save-EXTENSION
variables are set, then the given hooks will be used to load and save
.Dq name ,
and \*(UA will work with an intermediate temporary file.
.Pp
MBOX files (flat file-based mailboxes) are generally locked during file
operations in order to avoid inconsistencies against concurrent
modifications.
Mailbox files which \*(UA treats as system mailboxes will also be
protected by so-called dotlock files, the traditional way of mail spool
file locking: for any file
.Ql a
a lock file
.Ql a.lock
will be created for the duration of the synchronization \(em
as necessary a privilege-separated dotlock child process will be used
to accommodate for necessary privilege adjustments in order to create
the dotlock file in the same directory
and with the same user and group identities as the file of interest.
.Pp
If
.Ar name
refers to a directory with the subdirectories
.Ql tmp ,
.Ql new
and
.Ql cur ,
then it is treated as a folder in
.Dq Maildir
format.
A name of the form
.Pp
.Dl \*(IN protocol://[user[:password]@]host[:port][/path]
.Dl \*(OU protocol://[user@]host[:port][/path]
.Pp
is taken as an Internet mailbox specification.
The \*(OPally supported protocols are
.Ar pop3
(POP3) and
.Ar pop3s
(POP3 with SSL/TLS encrypted transport).
The
.Ar [/path]
part is valid only for IMAP.
Also see the section
.Sx "On URL syntax and credential lookup" .
.Pp
\*(OU If
.Ar user
contains special characters, in particular
.Ql /
or
.Ql % ,
they must be escaped in URL notation \(en the command
.Ic urlcodec
can be used to show the necessary conversion.
.Pp
The optional `path' part applies to IMAP only;
if it is omitted, the default `INBOX' is used.
(IMAP paths undergo inspections and possible transformations before use
(and the command
.Ic imapcodec
can be used to manually apply them to any given argument).
Hierarchy delimiters are normalized, a step which is configurable via the
.Va imap-delim
variable chain, but defaults to the first seen delimiter otherwise.
\*(UA supports internationalised IMAP names, and en- and decodes the
names from and to the
.Va ttycharset
as necessary and possible.
If \*(UA is connected to an IMAP server,
a name of the form `@mailbox' refers to the `mailbox' on that server,
but otherwise a `@' prefix has no special meaning.
.Mx
.It Ic flag
Takes a message list and marks the messages as
.Ic flag Ns
ged for urgent/special attention.
This mark has no technical meaning in the mail system;
it just causes messages to be highlighted in the header summary,
and makes them specially addressable.
.Mx
.It Ic folder
(fold) The same as
.Ic file .
.Mx
.It Ic folders
With no arguments, list the names of the folders in the folder directory.
With an existing folder as an argument,
lists the names of folders below the named folder;
e.\|g. the command `folders @' lists the folders on the base level of
the current IMAP server.
See also the variable
.Va imap-list-depth .
.Mx
.It Ic Followup
(F) Similar to
.Ic Respond ,
but saves the message in a file named after the local part of the first
recipient's address (instead of in
.Va record Ns ).
.Mx
.It Ic followup
(fo) Similar to
.Ic respond ,
but saves the message in a file named after the local part of the first
recipient's address (instead of in
.Va record Ns ).
.Mx
.It Ic followupall
Similar to
.Ic followup ,
but responds to all recipients regardless of the
.Va flipr
variable.
.Mx
.It Ic followupsender
Similar to
.Ic Followup ,
but responds to the sender only regardless of the
.Va flipr
variable.
.Mx
.It Ic Forward
Alias for
.Ic Fwd .
.Mx
.It Ic forward
Alias for
.Ic fwd .
.Mx
.It Ic from
(f) Takes a list of messages and prints their message headers
(which qualifies this command as \*(UAs search facility).
.Mx
.It Ic Fwd
Similar to
.Ic fwd ,
but saves the message in a file named after the local part of the
recipient's address (instead of in
.Va record Ns ).
.Mx
.It Ic fwd
Takes a message and the address of a recipient
and forwards the message to him.
The text of the original message is included in the new one,
with the value of the
.Va fwdheading
variable printed before.
The
.Ic fwdignore
and
.Ic fwdretain
commands specify which header fields are included in the new message.
Only the first part of a multipart message is included unless the
.Va forward-as-attachment
option is set.
Unless the option
.Va fullnames
is set recipient addresses will be stripped from comments, names etc.
.Mx
.It Ic fwdignore
Specifies which header fields are to be ignored with the command
.Ic fwd .
This command has no effect when the
.Va forward-as-attachment
option is set.
.Mx
.It Ic fwdretain
Specifies which header fields are to be retained with the command
.Ic fwd .
.Ic fwdretain
overrides
.Ic fwdignore .
This command has no effect when the
.Va forward-as-attachment
option is set.
.Mx
.It Ic ghost
Define or list command aliases, so-called ghosts.
Without arguments a list of all currently known aliases is printed.
With one argument the expansion of the given alias is shown.
With two or more arguments a command alias is defined or updated: the
first argument is the name under which the remaining command line should
be accessible, the content of which can be just about anything.
A ghost can be used everywhere a normal command can be used, but always
takes precedence; any arguments that are given to the command alias are
joined onto the alias content, and the resulting string forms the
command line that is, in effect, executed.
Also see
.Ic unghost .
.Bd -literal -offset indent
? gh xx
`ghost': no such alias: "xx"
? gh xx echo hello,
? gh xx
ghost xx "echo hello,"
? xx
hello,
? xx world
hello, world
.Ed
.Mx
.It Ic headers
(h) Show the current group of headers, the size of which depends on
the variable
.Va screen .
If a message-specification is given the group of headers containing the
first message therein is shown and the message at the top of the screen
becomes the new
.Dq dot .
.Mx
.It Ic help
(hel) A synonym for
.Ic \&amp;? .
.Mx
.It Ic history
\*(OP Either
.Ar show
or
.Ar clear
the list of history entries;
a decimal
.Ar NUMBER
argument selects and shows the respective history entry \(en
press
.Dq ENTER
to accept it, and the history entry will become the new history top.
The default mode if no arguments are given is
.Ar show .
.Mx
.It Ic hold
(ho, also
.Ic preserve )
Takes a message list and marks each message therein to be saved in the
user's system mailbox instead of in
.Ev MBOX .
Does not override the
.Ic delete
command.
\*(UA deviates from the POSIX standard with this command, because a
.Ic next
command issued after
.Ic hold
will display the following message, not the current one.
.Mx
.It Ic if
(i) Part of the nestable
.Ic if Ns / Ns Ic elif Ns / Ns Ic else Ns / Ns Ic endif
conditional execution construct \(em if the given condition is true then
the encapsulated block is executed.
POSIX only supports the conditions
.Ql [Rr]eceive ,
.Ql [Ss]end
and
.Ql [Tt]erm
(execute if standard input is a tty), all remaining conditions are
non-portable extensions; note that falsely specified conditions cause
the execution of the entire conditional construct until the
(matching) closing
.Ic endif
command to be suppressed.
The syntax of the nestable
.Ic if
conditional execution construct requires that each condition and syntax
element is surrounded by whitespace.
.Bd -literal -offset indent
if receive
commands ...
else
commands ...
endif
.Ed
.Pp
Another condition can be any boolean value (see the section
.Sx "Value options"
for booleans) to mark an enwrapped block as
.Dq never execute
or
.Dq always execute .
It is possible to check a variable for existence or compare its
expansion against a user given value or another variable via the
.Ql $
.Pf ( Dq variable next )
conditional trigger character.
The available comparison operators are
.Ql &lt;
(less than),
.Ql &lt;=
(less than or equal to),
.Ql ==
(equal),
.Ql !=
(not equal),
.Ql &gt;=
(greater than or equal to),
.Ql &gt;
(greater than),
.Ql =@
(is substring of) and
.Ql !@
(is not substring of).
The values of the left and right hand side are treated as strings and
are compared 8-bit byte-wise, ignoring case according to the rules of
the US-ASCII encoding (therefore, dependend on the active locale,
possibly producing false results for strings in the locale encoding).
Except for the substring checks the comparison will instead be performed
arithmetically if both, the user given value as well as the variable
content, can be parsed as numbers (integers).
An unset variable is treated as the empty string.
.Pp
When the \*(OPal regular expression support is available, the additional
test cases
.Ql =~
and
.Ql !~
can be used.
They treat the right hand side as a regular expression that is matched
case-insensitively and according to the active
.Ev LC_CTYPE
locale, meaning that strings in the locale encoding should be matched
correctly.
.Pp
Conditions can be joined via AND-OR lists (where the AND operator is
.Ql &amp;&amp;
and the OR operator is
.Ql || ) ,
which have equal precedence and will be evaluated with left
associativity, thus using the same syntax that is known for the
.Xr sh 1 .
It is also possible to form groups of conditions and lists by enclosing
them in pairs of brackets
.Ql [\ \&amp;.\&amp;.\&amp;.\ ] ,
which may be interlocked within each other, and also be joined via
AND-OR lists.
.Pp
The results of individual conditions and entire groups may be modified
via unary operators: the unary operator
.Ql \&amp;!
will reverse the result.
.Bd -literal -offset indent
if $debug
echo *debug* is set
endif
if $ttycharset == "UTF-8"
echo *ttycharset* is set to UTF-8, case-insensitively
endif
set t1=one t2=one
if $t1 == $t2
echo These two variables are equal
endif
if $version-major &gt;= 15
echo Running a new version..
if $features =@ "regex"
if $TERM =~ "^xterm\&amp;.*"
echo ..in an X terminal
endif
endif
if [ [ true ] &amp;&amp; [ [ $debug ] || [ $verbose ] ] ]
echo Noisy, noisy
endif
if true &amp;&amp; $debug || $verbose
echo Left associativity, as is known from the shell
endif
if ! ! true &amp;&amp; ! [ ! $debug &amp;&amp; ! $verbose ]
echo Unary operator support
endif
endif
.Ed
.Mx
.It Ic ignore
Without arguments the list of ignored header fields is printed,
otherwise the given list of header fields is added to the ignore list:
Header fields in the ignore list are not printed on the terminal when
a message is printed.
To print a message in its entirety, use the commands
.Ic Type
or
.Ic Print .
Also see
.Ic discard
and
.Ic retain .
.Mx
.It Ic imap
\*(OP Sends command strings directly to the current IMAP server.
\*(UA operates always in IMAP `selected state' on the current mailbox;
commands that change this will produce undesirable results and should be
avoided.
Useful IMAP commands are:
.Bl -tag -offset indent -width ".Ic getquotearoot"
.It create
Takes the name of an IMAP mailbox as an argument and creates it.
.It getquotaroot
(RFC 2087) Takes the name of an IMAP mailbox as an argument
and prints the quotas that apply to the mailbox.
Not all IMAP servers support this command.
.It namespace
(RFC 2342) Takes no arguments and prints the Personal Namespaces,
the Other User's Namespaces and the Shared Namespaces.
Each namespace type is printed in parentheses;
if there are multiple namespaces of the same type,
inner parentheses separate them.
For each namespace a prefix and a hierarchy separator is listed.
Not all IMAP servers support this command.
.El
.Mx
.It Ic imapcodec
\*(OP Perform IMAP path transformations on all the given strings.
The first argument specifies the operation:
.Ar enc[ode]
normalizes hierarchy delimiters (see
.Va imap-delim )
and converts the strings from the locale
.Va ttycharset
to the internationalised variant used by IMAP,
.Ar dec[code]
does the reverse operation.
Errors are indicated by prepending the output with the string
.Ql ERROR .
.Mx
.It Ic inc
Same as
.Ic newmail .
.Mx
.It Ic list
Prints the names of all available commands, alphabetically sorted.
.Mx
.It Ic localopts
This command can be used to localize changes to variables, meaning that
their state will be reverted to the former one once the covered scope
is left.
It can only be used inside of macro definition blocks introduced by
.Ic account
or
.Ic define ,
and is interpreted as a boolean (see
.Sx "Value options" ) ;
the
.Dq covered scope
of an account is left once it is switched off again.
.Bd -literal -offset indent
define temporary_settings {
set global_option1
localopts on
set local_option1
set local_option2
localopts off
set global_option2
}
.Ed
.Pp
.Sy Note
that this setting
.Dq stacks up :
i.e., if
.Ql macro1
enables change localization and calls
.Ql macro2 ,
which explicitly resets localization, then any value changes within
.Ql macro2
will still be reverted by
.Ql macro1 !
.Mx
.It Ic Lreply
Reply to messages that come in via known
.Pf ( Ic mlist )
or subscribed
.Pf ( Ic mlsubscribe )
mailing lists, or pretend to do so (see
.Sx "Mailing lists" ) :
on top of the usual
.Ic reply
functionality this will actively resort and even remove message
recipients in order to generate a message that is supposed to be send to
a mailing list.
For example it will also implicitly generate a
.Ql Mail-Followup-To:
header if that seems useful, regardless of the setting of the variable
.Va followup-to .
.Mx
.It Ic Mail
Similar to
.Ic mail ,
but saves the message in a file named after the local part of the first
recipient's address (instead of in
.Va record Ns ).
.Mx
.It Ic mail
(m) Takes a (list of) recipient address(es) as (an) argument(s),
or asks on standard input if none were given;
then collects the remaining mail content and sends it out.
.Mx
.It Ic mbox
(mb) The given message list is to be sent to
.Ev MBOX
when \*(UA is quit; this is the default action unless the
.Va hold
option is set.
\*(ID This command can only be used in a system mailbox (see
.Ic file ) .
.Mx
.It Ic mimetype
Without any arguments the content of the MIME type cache will displayed.
Otherwise each argument defines a complete MIME type specification of
a type that shall be added (prepended) to the cache.
In any event MIME type sources are loaded first as necessary \(en
.Va mimetypes-load-control
can be used to fine-tune which sources are actually loaded.
Refer to the section on
.Sx "The mime.types files"
for more on MIME type specifications and this topic in general.
MIME type unregistration and cache resets can be triggered with
.Ic unmimetype .
.Mx
.It Ic mlist
Without arguments the list of all currently defined mailing lists
(and their attributes, if any) is printed.
Otherwise all given arguments (which need not be quoted except for
whitespace) will be added and henceforth be recognized as mailing lists.
Mailing lists may be removed via the command
.Ic unmlist .
.Pp
If the \*(OPal regular expression support is available then mailing
lists may also be specified as regular expressions (see
.Xr re_format 7
for more on those).
.Mx
.It Ic mlsubscribe
Without arguments the list of all currently defined mailing lists which
have a subscription attribute is printed.
Otherwise this attribute will be set for all given mailing lists,
newly creating them as necessary (as via
.Ic mlist ) .
Subscription attributes may be removed via the command
.Ic unmlsubscribe .
Also see
.Va followup-to .
.Mx
.It Ic Move
Similar to
.Ic move ,
but moves the messages to a file named after the local part of the
sender address of the first message (instead of in
.Va record Ns ).
.Mx
.It Ic move
Acts like
.Ic copy
but marks the messages for deletion if they were transferred
successfully.
.Mx
.It Ic More
Like
.Ic more ,
but also prints ignored header fields and all MIME parts.
Identical to
.Ic Page .
.Mx
.It Ic more
Invokes the
.Ev PAGER
on the given messages, even in non-interactive mode and as long as the
standard output is a terminal.
Identical to
.Ic page .
.Mx
.It Ic netrc
\*(OP Either
.Pf ( Ar show
or)
.Ar clear
the current
.Pa .netrc
cache, loading the file first as necessary in the former case.
Note that \*(UA will try to read the file only once, use
.Ql Ic netrc Ns \:\0\:clear
to unlock the next attempt.
See
.Va netrc-lookup
and the section
.Sx "On URL syntax and credential lookup" ;
the section
.Sx "The .netrc file"
documents the file format in detail.
.Mx
.It Ic newmail
Checks for new mail in the current folder without committing any changes
before.
If new mail is present, a message is printed.
If the
.Va header
variable is set,
the headers of each new message are also printed.
.Mx
.It Ic next
(n) (like
.Ql +
or
.Dq ENTER )
Goes to the next message in sequence and types it.
With an argument list, types the next matching message.
.Mx
.It Ic New
Same as
.Ic Unread .
.Mx
.It Ic new
Same as
.Ic unread .
.Mx
.It Ic noop
If the current folder is accessed via a network connection, a
.Dq NOOP
command is sent, otherwise no operation is performed.
.Mx
.It Ic Page
Like
.Ic page ,
but also prints ignored header fields and all MIME parts.
Identical to
.Ic More .
.Mx
.It Ic page
Invokes the
.Ev PAGER
on the given messages, even in non-interactive mode and as long as the
standard output is a terminal.
Identical to
.Ic more .
.Mx
.It Ic Pipe
Like
.Ic pipe
but also pipes ignored header fields and all parts of MIME
.Ql multipart/alternative
messages.
.Mx
.It Ic pipe
(pi) Takes a message list and a shell command
and pipes the messages through the command.
Without an argument the current message is piped through the command
given by the
.Va cmd
variable.
If the
.Va page
variable is set,
every message is followed by a formfeed character.
.Mx
.It Ic preserve
(pre) A synonym for
.Ic hold .
.Mx
.It Ic Print
(P) Like
.Ic print
but also prints out ignored header fields and all parts of MIME
.Ql multipart/alternative
messages.
See also
.Ic print ,
.Ic ignore
and
.Ic retain .
.Mx
.It Ic print
(p) Takes a message list and types out each message on the user's
terminal.
For MIME multipart messages, all parts with a content type of
.Ql text
or
.Ql message
are shown, the other are hidden except for their headers.
Messages are decrypted and converted to the terminal character set
if necessary.
.Mx
.It Ic quit
(q) Terminates the session, saving all undeleted, unsaved messages in
the current
.Ev MBOX ,
preserving all messages marked with
.Ic hold
or
.Ic preserve
or never referenced in the system mailbox,
and removing all other messages from the system mailbox.
If new mail has arrived during the session,
the message
.Dq You have new mail
will be shown.
If given while editing a mailbox file with the command line flag
.Fl f ,
then the edit file is rewritten.
A return to the shell is effected,
unless the rewrite of edit file fails,
in which case the user can escape with the exit command.
.Mx
.It Ic redirect
Same as
.Ic resend .
.Mx
.It Ic Redirect
Same as
.Ic Resend .
.Mx
.It Ic remove
Removes the named folders.
The user is asked for confirmation in interactive mode.
.Mx
.It Ic rename
Takes the name of an existing folder
and the name for the new folder
and renames the first to the second one.
Both folders must be of the same type
and must be located on the current server for IMAP.
.Mx
.It Ic Reply
(R) Reply to originator.
Does not reply to other recipients of the original message.
.Va flipr
will exchange this command with
.Ic reply .
Unless the option
.Va fullnames
is set the recipient address will be stripped from comments, names etc.
.Mx
.It Ic reply
(r) Take a message and group-responds to it by addressing the sender
and all recipients.
.Va followup-to ,
.Va followup-to-honour ,
.Va reply-to-honour
as well as
.Va recipients-in-cc
influence response behaviour.
The command
.Ic Lreply
offers special support for replying to mailing lists.
Unless the option
.Va fullnames
is set recipient addresses will be stripped from comments, names etc.
If
.Va flipr
is set the commands
.Ic Reply
and
.Ic reply
are exchanged.
.Mx
.It Ic replyall
Similar to
.Ic reply ,
but initiates a group-reply regardless of the value of
.Va flipr .
.Mx
.It Ic replysender
Similar to
.Ic Reply ,
but responds to the sender only regardless of the value of
.Va flipr .
.Mx
.It Ic Resend
Like
.Ic resend ,
but does not add any header lines.
This is not a way to hide the sender's identity,
but useful for sending a message again to the same recipients.
.Mx
.It Ic resend
Takes a list of messages and a user name
and sends each message to the named user.
.Ql Resent-From:
and related header fields are prepended to the new copy of the message.
.Mx
.It Ic Respond
Same as
.Ic Reply .
.Mx
.It Ic respond
Same as
.Ic reply .
.Mx
.It Ic respondall
Same as
.Ic replyall .
.Mx
.It Ic respondsender
Same as
.Ic replysender .
.Mx
.It Ic retain
(ret) Without arguments the list of retained header fields is printed,
otherwise the given list of header fields is added to the retain list:
Header fields in the retain list are shown on the terminal when
a message is printed, all other header fields are suppressed.
To print a message in its entirety, use the commands
.Ic Type
or
.Ic Print .
Also see
.Ic discard
and
.Ic ignore ;
.Ic retain
takes precedence over the mentioned.
.Mx
.It Ic Save
(S) Similar to
.Ic save,
but saves the messages in a file named after the local part of the
sender of the first message instead of (in
.Va record
and) taking a filename argument.
.Mx
.It Ic save
(s) Takes a message list and a filename and appends each message in turn
to the end of the file.
If no filename is given, the
.Ev MBOX
file is used.
The filename in quotes, followed by the generated character count
is echoed on the user's terminal.
If editing a system mailbox the messages are marked for deletion.
Compressed files and IMAP mailboxes are handled as described for the
.Fl f
command line option above.
.Mx
.It Ic savediscard
Same as
.Ic saveignore .
.Mx
.It Ic saveignore
Is to
.Ic save
what
.Ic ignore
is to
.Ic print
and
.Ic type .
Header fields thus marked are filtered out when saving a message by
.Ic save
or when automatically saving to
.Ev MBOX .
This command should only be applied to header fields that do not contain
information needed to decode the message,
as MIME content fields do.
If saving messages on an IMAP account ignoring fields makes it
impossible to copy the data directly on the server,
thus operation usually becomes much slower.
.Mx
.It Ic saveretain
Is to
.Ic save
what
.Ic retain
is to
.Ic print
and
.Ic type .
Header fields thus marked are the only ones saved with a message when
saving by
.Ic save
or when automatically saving to
.Ev MBOX .
.Ic saveretain
overrides
.Ic saveignore .
The use of this command is strongly discouraged since it may strip
header fields that are needed to decode the message correctly.
.Mx
.It Ic seen
Takes a message list and marks all messages as having been read.
.Mx
.It Ic set
(se) Without arguments this command prints all options and, for
non-binary options, values that are currently known to \*(UA.
Setting any of the options
.Va bsdcompat
or
.Va bsdset
changes the output format to BSD style, otherwise a properly quoted
listing is produced.
If
.Va debug
is set or
.Va verbose
has been set twice then the listing is modified to mark out assembled
variables.
.Pp
Otherwise modifies (set and unsets) the given options.
Arguments are of the form
.Ql option=value
(no space before or after
.Ql = ) ,
or plain
.Ql option
if there is no value.
Quotation marks may be placed around any part of the assignment
statement to quote blanks or tabs, e.g.,
.Pp
.Dl set indentprefix="-&gt;"
.Pp
If an argument begins with
.Ql no ,
as in
.Ql set nosave ,
the effect is the same as invoking the
.Ic unset
command with the remaining part of the variable
.Pf ( Ql unset save ) .
.Mx
.It Ic setenv
Identical to
.Ic set
except that the options are also exported into the program environment;
since this task requires native host support the command will always
report error if that is not available (but still act like
.Ic set
in this case).
This operation is a no-op unless all resource files have been loaded.
Also see
.Ic unsetenv .
.Mx
.It Ic shell
(sh) Invokes an interactive version of the shell.
.Mx
.It Ic shortcut
Without arguments the list of all currently defined shortcuts is
printed.
Otherwise all given arguments (which need not be quoted except for
whitespace) are treated as pairs of shortcuts and their expansions,
creating new or changing already existing shortcuts, as necessary.
Shortcuts may be removed via the command
.Ic unshortcut .
The expansion strings should be in the syntax that has been described
for the
.Ic file
command.
.Mx
.It Ic show
Like
.Ic print ,
but performs neither MIME decoding nor decryption, so that the raw
message text is shown.
.Mx
.It Ic size
(si) Print the size in characters of each message of the given
message-list.
.Mx
.It Ic sort
Create a sorted representation of the current folder,
and change the
.Ic next
command and the addressing modes such that they refer to messages in the
sorted order.
Message numbers are the same as in regular mode.
If the
.Va header
variable is set,
a header summary in the new order is also printed.
Possible sorting criteria are:
.Pp
.Bl -tag -compact -offset indent -width "subject"
.It date
Sort the messages by their
.Ql Date:
field, that is by the time they were sent.
.It from
Sort messages by the value of their
.Ql From:
field, that is by the address of the sender.
If the
.Va showname
variable is set, the sender's real name (if any) is used.
.It size
Sort the messages by their size.
.It spam
\*(OP Sort the message by their spam score, as has been classified by
.Ic spamrate .
.It status
Sort the messages by their message status.
.It subject
Sort the messages by their subject.
.It thread
Create a threaded display.
.It to
Sort messages by the value of their
.Ql To:
field, that is by the address of the recipient.
If the
.Va showname
variable is set, the recipient's real name (if any) is used.
.El
.Pp
If no argument is given,
the current sorting criterion is printed.
.Mx
.It Ic source
(so) The source command reads commands from a file.
.Mx
.It Ic source_if
The difference to
.Ic source
is that this command will not generate an error if the given file
argument cannot be opened successfully.
This can matter in, e.g., resource files, since loading of those is
stopped when an error is encountered.
.Mx
.It Ic spamclear
\*(OP Takes a list of messages and clears their
.Ql is-spam
flag.
.Mx
.It Ic spamforget
\*(OP Takes a list of messages and causes the
.Va spam-interface
to forget it has ever used them to train its Bayesian filter.
Unless otherwise noted the
.Ql is-spam
flag of the message is inspected to chose whether a message shall be
forgotten to be
.Dq ham
or
.Dq spam .
.Mx
.It Ic spamham
\*(OP Takes a list of messages and informs the Bayesian filter of the
.Va spam-interface
that they are
.Dq ham .
This also clears the
.Ql is-spam
flag of the messages in question.
.Mx
.It Ic spamrate
\*(OP Takes a list of messages and rates them using the configured
.Va spam-interface ,
without modifying the messages, but setting their
.Ql is-spam
flag as appropriate; because the spam rating headers are lost the rate
will be forgotten once the mailbox is left.
Refer to the manual section
.Sx "Handling spam"
for the complete picture of spam handling in \*(UA.
.Mx
.It Ic spamset
\*(OP Takes a list of messages and sets their
.Ql is-spam
flag.
.Mx
.It Ic spamspam
\*(OP Takes a list of messages and informs the Bayesian filter of the
.Va spam-interface
that they are
.Dq spam .
This also sets the
.Ql is-spam
flag of the messages in question.
.Mx
.It Ic thread
\*(OB The same as
.Ql sort thread
(consider using a
.Ql ghost
as necessary).
Create a threaded representation of the current folder,
i.\|e. indent messages that are replies to other messages in the header
display and change the
.Ic next
command and the addressing modes such that they refer to messages in the
threaded order.
Message numbers are the same as in unthreaded mode.
If the
.Va header
variable is set,
a header summary in threaded order is also printed.
.Mx
.It Ic top
(to) Takes a message list and prints the top few lines of each.
The number of lines printed is controlled by the variable
.Va toplines
and defaults to five.
.Mx
.It Ic touch
(tou) Takes a message list and marks the messages for saving in
.Ev MBOX .
\*(UA deviates from the POSIX standard with this command,
as a following
.Ic next
command will display the following message instead of the current one.
.Mx
.It Ic Type
(T) Identical to the
.Ic Print
command.
.Mx
.It Ic type
(t) A synonym for
.Ic print .
.Mx
.It Ic unaccount
Delete all given accounts.
An error message is printed if a given account is not defined.
The special name
.Ql *
will discard all existing accounts.
.Mx
.It Ic unalias
(una) Takes a list of names defined by alias commands
and discards the remembered groups of users.
The special name
.Ql *
will discard all existing aliases.
.Mx
.It Ic unanswered
Takes a message list and marks each message as not having been answered.
.Mx
.It Ic uncollapse
Only applicable to threaded mode.
Takes a message list and makes the message and all replies to it visible
in header summaries again.
When a message becomes the current message,
it is automatically made visible.
Also when a message with collapsed replies is printed,
all of these are automatically uncollapsed.
.Mx
.It Ic undefine
Undefine all given macros.
An error message is printed if a given macro is not defined.
The special name
.Ql *
will discard all existing macros.
.Mx
.It Ic undelete
(u) Takes a message list and marks each message as not being deleted.
.Mx
.It Ic undraft
Takes a message list and
.Pf un Ic draft Ns
s each message.
.Mx
.It Ic unflag
Takes a message list and marks each message as not being
.Ic flag Ns ged .
.Mx
.It Ic unfwdignore
Removes the header field names from the list of ignored fields for the
.Ic forward
command.
The special name
.Ql *
will remove all fields.
.Mx
.It Ic unfwdretain
Removes the header field names from the list of retained fields for the
.Ic forward
command.
The special name
.Ql *
will remove all fields.
.Mx
.It Ic unghost
Remove all the given command
.Ic ghost Ns s Ns .
The special name
.Ql *
will remove all ghosts.
.Mx
.It Ic unignore
Removes the header field names from the list of ignored fields.
The special name
.Ql *
will remove all fields.
.Mx
.It Ic unmimetype
Delete all given MIME types, e.g.,
.Ql unmimetype text/plain
will remove all registered specifications for the MIME type
.Ql text/plain .
The special name
.Ql *
will discard all existing MIME types, just as will
.Ql reset ,
but which also reenables cache initialization via
.Va mimetypes-load-control .
.Mx
.It Ic unmlist
Forget about all the given mailing lists.
The special name
.Ql *
will remove all lists.
Also see
.Ic mlist .
.Mx
.It Ic unmlsubscribe
Remove the subscription attribute from all given mailing lists.
The special name
.Ql *
will clear the attribute from all lists which have it set.
Also see
.Ic mlsubscribe .
.Mx
.It Ic Unread
Same as
.Ic unread .
.Mx
.It Ic unread
Takes a message list and marks each message as not having been read.
.Mx
.It Ic unretain
Removes the header field names from the list of retained fields.
The special name
.Ql *
will remove all fields.
.Mx
.It Ic unsaveignore
Removes the header field names from the list of ignored fields for
saving.
The special name
.Ql *
will remove all fields.
.Mx
.It Ic unsaveretain
Removes the header field names from the list of retained fields for
saving.
The special name
.Ql *
will remove all fields.
.Mx
.It Ic unset
(uns) Takes a list of option names and discards their remembered values;
the inverse of
.Ic set .
.Mx
.It Ic unsetenv
Identical to
.Ic unset
except that the options are also removed from the program environment;
since this task requires native host support the command will always
report error if that is not available (but still act like
.Ic unset Ns
).
This operation is a no-op unless all resource files have been loaded.
Also see
.Ic setenv .
.Mx
.It Ic unshortcut
Deletes the shortcut names given as arguments.
The special name
.Ql *
will remove all shortcuts.
.Mx
.It Ic unsort
Disable sorted or threaded mode
(see the
.Ic sort
and
.Ic thread
commands),
return to normal message order and,
if the
.Va header
variable is set,
print a header summary.
.Mx
.It Ic unthread
\*(OB
Same as
.Ic unsort .
.Mx
.It Ic urlcodec
Perform URL percent codec operations, rather according to RFC 3986,
on all given strings.
This is character set agnostic and thus locale dependent, and it may
decode bytes which are invalid in the current locale, unless the input
solely consists of characters in the portable character set, see
.Sx "Character sets" .
The first argument specifies the operation:
.Ar enc[ode]
or
.Ar dec[code]
perform plain URL percent en- and decoding, respectively.
.Ar p[ath]enc[ode]
and
.Ar p[ath]dec[ode]
perform a slightly modified operation which should be better for
pathnames: it doesn't allow a tilde
.Ql ~ ,
and will neither accept hyphen
.Ql -
nor dot
.Ql \&amp;.
as an initial character.
.Mx
.It Ic varedit
Edit the values of or create the given variable(s) in the
.Ev EDITOR .
Binary variables cannot be edited.
.Mx
.It Ic varshow
Show informations about all the given options.
\*(UA knows about a finite set of known builtin variables that are
subdivided further in binary and value variants;
they may have special properties, like
.Dq read-only
(setting may not be changed) and
.Dq virtual ,
meaning that the value is generated on-the-fly as necessary.
Beside those known variables an infinite number of unknown, so-called
.Dq assembled
variables, which are expected to be able to store values, may exist.
.Bd -literal -offset indent
? set foo=bar nobar
? varshow sendwait version-major foo bar
"sendwait": (73) binary: set=1 (ENVIRON=0)
"version-major": (192) value, read-only, virtual:\e
set=1 (ENVIRON=0) value&lt;14&gt;
"foo": (assembled) set=1 (ENVIRON=0) value&lt;bar&gt;
"bar": (assembled) set=0 (ENVIRON=0) value&lt;NULL&gt;
.Ed
.Mx
.It Ic verify
\*(OP Takes a message list and verifies each message.
If a message is not a S/MIME signed message,
verification will fail for it.
The verification process checks if the message was signed using a valid
certificate,
if the message sender's email address matches one of those contained
within the certificate,
and if the message content has been altered.
.Mx
.It Ic visual
(v) Takes a message list and invokes the display editor on each message.
Modified contents are discarded unless the
.Va writebackedited
variable is set.
.Mx
.It Ic write
(w) For conventional messages the body without all headers is written.
The original message is never marked for deletion in the originating
mail folder.
The output is decrypted and converted to its native format as necessary.
If the output file exists, the text is appended.
If a message is in MIME multipart format its first part is written to
the specified file as for conventional messages, handling of the remains
depends on the execution mode.
No special handling of compressed files is performed.
.Pp
In interactive mode the user is consecutively asked for the filenames of
the processed parts.
For convience saving of each part may be skipped by giving an empty
value, the same result as writing it to
.Pa /dev/null .
Shell piping the part content by specifying a leading vertical bar
.Ql |
character for the filename is supported.
Other user input is expanded as usually for folders, e.g., tilde
expansion is performed, and contents of the destination file are
overwritten if the file previously existed.
.Pp
\*(ID In non-interactive mode any part which does not specify a filename
is ignored, and suspicious parts of filenames of the remaining parts are
URL percent encoded (as via
.Ic urlcodec )
to prevent injection of malicious character sequences, resulting in
a filename that will be written into the current directory.
Existing files won't be overwritten, instead the part number or
a dot are appended after a number sign
.Ql #
to the name until file creation succeeds (or fails due to other
reasons).
.Mx
.It Ic xit
(x) A synonym for
.Ic exit .
.Mx
.It Ic z
\*(UA presents message headers in
.Va screen Ns
fuls as described under the
.Ic headers
command.
Without arguments this command scrolls to the next window of messages,
likewise if the argument is
.Ql + .
An argument of
.Ql -
scrolls to the last,
.Ql ^
scrolls to the first, and
.Ql $
to the last
.Va \&amp;\&amp;screen
of messages.
A number argument prefixed by
.Ql +
or
.Ql \-
indicates that the window is calculated in relation to the current
position, and a number without a prefix specifies an absolute position.
.Mx
.It Ic Z
Similar to
.Ic z ,
but scrolls to the next or previous window that contains at least one
.Ql new
or
.Ic flag Ns
ged message.
.El
.Sh "TILDE ESCAPES"
Here is a summary of the tilde escapes,
which are used to perform special functions when composing messages.
Tilde escapes are only recognized at the beginning of lines.
The name
.Dq tilde escape
is somewhat of a misnomer since the actual escape character can be
changed by adjusting the option
.Va escape .
.Bl -tag -width ".Ic __ filename"
.Mx
.It Ic ~~ Ar string
Insert the string of text in the message prefaced by a single
.Ql ~ .
(If the escape character has been changed,
that character must be doubled
in order to send it at the beginning of a line.)
.Mx
.It Ic ~! Ar command
Execute the indicated shell
.Ar command ,
then return to the message.
.Mx
.It Ic ~.
Same effect as typing the end-of-file character.
.Mx
.It Ic ~: Ar \*(UA-command Ns \0or Ic ~_ Ar \*(UA-command
Execute the given \*(UA command.
Not all commands, however, are allowed.
.Mx
.It Ic ~?
Write a summary of command escapes.
.Mx
.It Ic ~&lt; Ar filename
Identical to
.Ic ~r .
.Mx
.It Ic ~&lt;! Ar command
.Ar command
is executed using the shell.
Its standard output is inserted into the message.
.Mx
.It Ic ~@ Op Ar filename...
With no arguments, edit the attachment list interactively.
If an attachment's file name is left empty,
that attachment is deleted from the list.
When the end of the attachment list is reached,
\*(UA will ask for further attachments until an empty name is given.
If a given file name solely consists of the number sign
.Ql #
followed by a valid message number of the currently active mailbox, then
the given message is attached as a MIME
.Ql message/rfc822
and the rest of this section does not apply.
.Pp
If character set conversion has been compiled into \*(UA, then this mode
gives the user the option to specify input and output character sets,
unless the file extension indicates binary content, in which case \*(UA
asks whether this step shall be skipped for the attachment in question.
If not skipped, then the charset that succeeds to represent the
attachment data will be used in the
.Ql charset=
MIME parameter of the mail message:
.Pp
.Bl -bullet -compact
.It
If input and output character sets are specified, then the conversion is
performed on the fly.
The user will be asked repeatedly until the desired conversion succeeds.
.It
If only an output character set is specified, then the input is assumed
to be in the
.Va ttycharset
charset and will be converted to the given output charset on the fly.
The user will be asked repeatedly until the desired conversion succeeds.
.It
If no character sets are specified at all then the algorithm that is
documented in the section
.Sx "Character sets"
is applied, but directly and on the fly.
The user will be asked repeatedly until the desired conversion succeeds.
.It
Finally, if an input-, but no output character set is specified, then no
conversion is ever performed, but the
.Ql charset=
MIME parameter value will still be set to the user input.
.It
The character set selection loop can be left by typing
.Ql control-C ,
i.e., causing an interrupt.
Note that before \*(UA version 15.0 this terminates the entire
current attachment selection, not only the character set selection.
.El
.Pp
Without character set conversion support, \*(UA will ask for the input
character set only, and it'll set the
.Ql charset=
MIME parameter value to the given input, if any;
if no user input is seen then the
.Va ttycharset
character set will be used for the parameter value instead.
Note that the file extension check isn't performed in this mode, since
no conversion will take place anyway.
.Pp
Note that in non-interactive mode, for reproduceabilities sake, there
will always be two questions for each attachment, regardless of whether
character set conversion is available and what the file extension is.
The first asks for the filename, and the second asks for the input
character set to be passed through to the corresponding MIME parameter;
no conversion will be tried if there is input to the latter question,
otherwise the usual conversion algorithm, as above, is applied.
For message attachments, the answer to the second question is completely
ignored.
.Pp
If (instead)
.Ar filename
arguments are specified for the
.Ic \&amp;\&amp;~@
command they are treated as a comma separated list of files,
which are all expanded and appended to the end of the attachment list.
(Filenames with commas, or with leading or trailing whitespace can only
be added via the command line or the first method.
Message attachments can only be added via the first method;
filenames which clash with message numbers can only be added via the
command line or the second method.)
In this mode the (text) attachments are assumed to be in
.Va ttycharset
encoding, and will be evaluated as documented in the section
.Sx "Character sets" .
.Mx
.It Ic ~A
Inserts the string contained in the
.Va Sign
variable (same as
.Ql Ic ~i Ns \0Sign ) .
The escape sequences tabulator
.Ql \et
and newline
.Ql \en
are understood.
.Mx
.It Ic ~a
Inserts the string contained in the
.Va sign
variable (same as
.Ql Ic ~i Ns \0sign ) .
The escape sequences tabulator
.Ql \et
and newline
.Ql \en
are understood.
.Mx
.It Ic ~b Ar name ...
Add the given names to the list of blind carbon copy recipients.
.Mx
.It Ic ~c Ar name ...
Add the given names to the list of carbon copy recipients.
.Mx
.It Ic ~d
Read the file specified by the
.Ev DEAD
variable into the message.
.Mx
.It Ic ~e
Invoke the text editor on the message collected so far.
After the editing session is finished,
the user may continue appending text to the message.
.Mx
.It Ic ~F Ar messages
Read the named messages into the message being sent, including all
message headers and MIME parts.
If no messages are specified, read in the current message.
.Mx
.It Ic ~f Ar messages
Read the named messages into the message being sent.
If no messages are specified, read in the current message.
.Ic ignore
and
.Ic retain
lists are used to modify the message headers.
For MIME multipart messages,
only the first printable part is included.
.Mx
.It Ic ~H
Edit the message header fields
.Ql From: ,
.Ql Reply-To: ,
.Ql Sender:
and
.Ql Organization:
by typing each one in turn and allowing the user to edit the field.
The default values for these fields originate from the
.Va from , replyto , sender
and
.Va ORGANIZATION
variables.
.Mx
.It Ic ~h
Edit the message header fields
.Ql To: ,
.Ql Cc: ,
.Ql Bcc:
and
.Ql Subject:
by typing each one in turn and allowing the user to edit the field.
.Mx
.It Ic ~i Ar variable
Insert the value of the specified variable into the message,
adding a newline character at the end.
The message remains unaltered if the variable is unset or empty.
The escape sequences tabulator
.Ql \et
and newline
.Ql \en
are understood.
.Mx
.It Ic ~M Ar messages
Read the named messages into the message being sent,
indented by
.Va indentprefix .
If no messages are specified, read the current message.
.Mx
.It Ic ~m Ar messages
Read the named messages into the message being sent,
indented by
.Va indentprefix .
If no messages are specified, read the current message.
.Ic ignore
and
.Ic retain
lists are used to modify the message headers.
For MIME multipart messages,
only the first printable part is included.
.Mx
.It Ic ~p
Print out the message collected so far,
prefaced by the message header fields
and followed by the attachment list, if any.
.Mx
.It Ic ~q
Abort the message being sent,
copying it to the file specified by the
.Ev DEAD
variable if
.Va save
is set.
.Mx
.It Ic ~R Ar filename
Read the named file into the message, indented by
.Va indentprefix .
.Mx
.It Ic ~r Ar filename
Read the named file into the message.
.Mx
.It Ic ~s Ar string
Cause the named string to become the current subject field.
.Mx
.It Ic ~t Ar name ...
Add the given name(s) to the direct recipient list.
.Mx
.It Ic ~U Ar messages
Read in the given / current message(s) excluding all headers, indented by
.Va indentprefix .
.Mx
.It Ic ~u Ar messages
Read in the given / current message(s), excluding all headers.
.Mx
.It Ic ~v
Invoke an alternate editor (defined by the
.Ev VISUAL
option) on the message collected so far.
Usually, the alternate editor will be a screen editor.
After the editor is quit,
the user may resume appending text to the end of the message.
.Mx
.It Ic ~w Ar filename
Write the message onto the named file.
If the file exists,
the message is appended to it.
.Mx
.It Ic ~x
Same as
.Ic ~q ,
except that the message is not saved at all.
.Mx
.It Ic ~| Ar command
Pipe the message through the specified filter command.
If the command gives no output or terminates abnormally,
retain the original text of the message.
E.g., the command
.Xr fmt 1
is often used as a rejustifying filter.
.El
.Sh "VARIABLE OPTIONS"
Variables are controlled via
.Ic set
and
.Ic unset
commands; in general using
.Ic unset
can also be accomplished by prefixing a variable name with the string
.Dq no
and calling
.Ic set ,
e.g.,
.Ql unset crt
will have the same effect as
.Ql set nocrt .
Creation or editing of variables in an editor can also be achieved with
.Ic varedit .
.Ic varshow
will give more insight on the given variable(s), whereas
.Ic set
will print a listing of all variables when called without arguments.
Options are also implicitly inherited from the program
.Sx ENVIRONMENT
and can be set explicitly via the command line option
.Fl S .
.Pp
Different kind of options exist:
binary options, which can only be in one of the two states
.Dq set
and
.Dq unset ,
as well as value options which have an assigned string value, for which
proper quoting may be important upon assignment time.
.Ss "Initial Settings"
The standard POSIX 2008/Cor 1-2013 mandates the following initial
variable settings:
.Pf no Va allnet ,
.Pf no Va append ,
.Va asksub ,
.Pf no Va askbcc ,
.Pf no Va autoprint ,
.Pf no Va bang ,
.Pf no Va cmd ,
.Pf no Va crt ,
.Pf no Va debug ,
.Pf no Va dot ,
.Va escape
set to
.Ql ~ ,
.Pf no Va flipr ,
.Pf no Va folder ,
.Va header ,
.Pf no Va hold ,
.Pf no Va ignore ,
.Pf no Va ignoreeof ,
.Pf no Va keep ,
.Pf no Va keepsave ,
.Pf no Va metoo ,
.Pf no Va outfolder ,
.Pf no Va page ,
.Va prompt
set to
.Ql ?\0
(note that \*(UA deviates from the standard by using
.Ql \e&amp;\0 ,
but the
.Ql \e&amp;
special prompt escape results in
.Dq \&amp;?
being printed unless
.Va bsdcompat
is set),
.Pf no Va quiet ,
.Pf no Va record ,
.Va save ,
.Pf no Va sendwait ,
.Pf no Va showto ,
.Pf no Va Sign ,
.Pf no Va sign ,
.Va toplines
set to
.Ql 5 .
.Pp
Notes: \*(UA doesn't support the
.Pf no Va onehop
variable \(en use command line options or
.Va sendmail-arguments
to pass options through to a MTA.
And the default global
.Pa \*(UR
file (which is loaded unless the
.Fl n
command line flag has been used or the
.Ev NAIL_NO_SYSTEM_RC
environment variable is set) bends those initial settings a bit, e.g.,
it sets the options
.Va hold ,
.Va keepsave
and
.Va keep ,
to name a few, calls
.Ic retain
etc., and should thus be taken into account.
.Ss "Binary options"
.Bl -tag -width ".Va _utoprin_"
.Mx
.It Va add-file-recipients
When file or pipe recipients have been specified,
mention them in the corresponding address fields of the message instead
of silently stripping them from their recipient list.
By default such addressees are not mentioned.
.Mx
.It Va allnet
Causes only the local part to be evaluated
when comparing addresses.
.Mx
.It Va append
Causes messages saved in
.Ev MBOX
to be appended to the end rather than prepended.
This should always be set.
.Mx
.Mx
.It Va ask Ns \0or Va asksub
Causes \*(UA to prompt for the subject of each message sent.
If the user responds with simply a newline,
no subject field will be sent.
.Mx
.It Va askatend
Causes the prompts for
.Ql Cc:
and
.Ql Bcc:
lists to appear after the message has been edited.
.Mx
.It Va askattach
If set, \*(UA asks for files to attach at the end of each message, shall
the list be found empty at that time.
An empty line finalizes the list.
.Mx
.It Va askcc
Causes the user to be prompted for carbon copy recipients
(at the end of each message if
.Va askatend
or
.Va bsdcompat
are set) shall the list be found empty (at that time).
An empty line finalizes the list.
.Mx
.It Va askbcc
Causes the user to be prompted for blind carbon copy
recipients (at the end of each message if
.Va askatend
or
.Va bsdcompat
are set) shall the list be found empty (at that time).
An empty line finalizes the list.
.Mx
.It Va asksign
\*(OP Causes the user to be prompted if the message is to be signed at
the end of each message.
The
.Va smime-sign
variable is ignored when this variable is set.
.Mx
.It Va autocollapse
Causes threads to be collapsed automatically when threaded mode is
entered (see the
.Ic collapse
command).
.Mx
.It Va autoprint
Causes the delete command to behave like
.Ql dp - ;
thus, after deleting a message the next one will be typed automatically.
.Mx
.It Va autothread
\*(OB Causes threaded mode (see the
.Ic thread
command) to be entered automatically when a folder is opened.
The same as
.Ql autosort=thread .
.Mx
.It Va bang
Enables the substitution of
.Ql \&amp;!
by the contents of the last command line in shell escapes.
.Mx
.It Va batch-exit-on-error
If the batch mode has been enabled via the
.Fl #
command line option, then this variable will be consulted whenever \*(UA
completes one operation (returns to the command prompt); if it is set
then \*(UA will terminate if the last operation generated an error.
.Mx
.It Va bsdannounce
Causes automatic display of a header summary after executing a
.Ic file
command.
.Mx
.It Va bsdcompat
Sets some cosmetical features to traditional BSD style;
has the same affect as setting
.Va askatend
and all other variables prefixed with
.Ql bsd ;
it also changes the meaning of the \*(UA specific
.Ql \e&amp;
.Va prompt
escape sequence.
.Mx
.It Va bsdflags
Changes the letters printed in the first column of a header summary
to traditional BSD style.
.Mx
.It Va bsdheadline
Changes the display of columns in a header summary to traditional BSD
style.
.Mx
.It Va bsdmsgs
Changes some informational messages to traditional BSD style.
.Mx
.It Va bsdorder
Causes the
.Ql Subject:
field to appear immediately after the
.Ql To:
field in message headers and with the
.Ic ~h
.Sx "TILDE ESCAPES" .
.Mx
.It Va bsdset
Changes the output format of the
.Ic set
command to traditional BSD style.
.Mx
.It Va colour-disable
\*(OP Forcefully disable usage of colours.
Also see the section
.Sx "Coloured message display" .
.Mx
.It Va colour-pager
\*(OP Whether colour shall be used for output that is paged through
.Ev PAGER .
Note that pagers may need special flags, e.g.,
.Xr less 1
requires the option
.Fl \&amp;\&amp;R
and
.Xr lv 1
the option
.Fl \&amp;\&amp;c
in order to support colours; therefore \*(UA will inspect the variable
.Ev PAGER
\(en if that starts with the string
.Dq less
a non-existing environment variable
.Va LESS
will be set to
.Ql FRSXi ,
likewise for
.Dq lv
.Va LV
will optionally be set to
.Dq -c .
Also see the section
.Sx "Coloured message display"
for more on this.
.Mx
.It Va debug
Prints debugging messages and disables the actual delivery of messages.
Also implies
.Pf no Va record
and
.Pf no Va save .
.Mx
.It Va disconnected
\*(OP When an IMAP mailbox is selected and this variable is set,
no connection to the server is initiated.
Instead, data is obtained from the local cache (see
.Va imap-cache Ns
).
Mailboxes that are not present in the cache
and messages that have not yet entirely been fetched from the server
are not available;
to fetch all messages in a mailbox at once,
the command
.No ` Ns Li copy * /dev/null Ns '
can be used while still in connected mode.
Changes that are made to IMAP mailboxes in disconnected mode are queued
and committed later when a connection to that server is made.
This procedure is not completely reliable since it cannot be guaranteed
that the IMAP unique identifiers (UIDs) on the server still match the
ones in the cache at that time.
Data is saved to
.Ev DEAD
when this problem occurs.
.It Va disconnected-USER@HOST
The specified account is handled as described for the
.Va disconnected
variable above,
but other accounts are not affected.
.Mx
.It Va disposition-notification-send
\*(OP Emit a
.Ql Disposition-Notification-To:
header (RFC 3798) with the message.
This requires a set
.Va from
variable.
.Mx
.It Va dot
When dot is set, a dot
.Ql \&amp;.
on a line by itself during message input from a terminal shall be
treated as end-of-message (in addition to the normal end-of-file
condition).
If
.Va ignoreeof
is set
.Pf no Va dot
is ignored and using a dot is the only method to terminate input mode.
.Mx
.It Va dotlock-ignore-error
\*(OP Synchronization of mailboxes which \*(UA treats as system
mailboxes (see the command
.Ic file )
will be protected with so-called dotlock files\(emthe traditional mail
spool file locking method\(emin addition to system file locking.
Because \*(UA ships with a privilege-separated dotlock creation program
that should always be able to create such a dotlock file there is no
good reason to ignore dotlock file creation errors, and thus these are
fatal unless this variable is set.
.Mx
.It Va editalong
If this variable is set then the editor is started automatically when
a message is composed in interactive mode, as if the
.Ic ~e
.Sx "TILDE ESCAPES"
had been specified.
The
.Va editheaders
variable is implied for this automatically spawned editor session.
.Mx
.It Va editheaders
When a message is edited while being composed,
its header is included in the editable text.
The
.Ql To: ,
.Ql Cc: ,
.Ql Bcc: ,
.Ql Subject: ,
.Ql From: ,
.Ql Reply-To: ,
.Ql Sender: ,
and
.Ql Organization:
fields are accepted within the header, other fields are ignored.
.Mx
.It Va emptystart
If the mailbox is empty \*(UA normally prints
.Dq \&amp;No mail for user
and exits immediately.
If this option is set \*(UA starts even with an empty mailbox.
.Mx
.It Va flipr
This option reverses the meanings of a set of reply commands,
turning the lowercase variants, which by default address all recipients
included in the header of a message
.Pf ( Ic reply , respond , followup )
into the uppercase variants, which by default address the sender only
.Pf ( Ic Reply , Respond , Followup )
and vice versa.
The commands
.Ic replysender , respondsender , followupsender
as well as
.Ic replyall , respondall , followupall
are not affected by the current setting of
.Va flipr .
.Mx
.It Va followup-to
Controls whether a
.Ql Mail-Followup-To:
header is generated when sending messages to known mailing lists.
Also see
.Va followup-to-honour
and the commands
.Ic mlist , mlsubscribe , reply
and
.Ic Lreply .
.Mx
.It Va forward-as-attachment
Original messages are normally sent as inline text with the
.Ic forward
command,
and only the first part of a multipart message is included.
With this option messages are sent as unmodified MIME
.Ql message/rfc822
attachments with all of their parts included.
.Mx
.It Va fullnames
When replying to or forwarding a message \*(UA normally removes the
comment and name parts of email addresses.
If this variable is set such stripping is not performed,
and comments, names etc. are retained.
.Mx
.It Va header
Causes the header summary to be written at startup and after commands
that affect the number of messages or the order of messages in the
current folder; enabled by default.
The command line option
.Fl N
can be used to set
.Pf no Va header .
.Mx
.It Va history-gabby
\*(OP Add more entries to the history as is normally done.
.Mx
.It Va history-gabby-persist
\*(OP \*(UAs own NCL will not save the additional (gabby) history
entries in persistent storage unless this variable is also set.
Also see
.Va NAIL_HISTFILE .
.Mx
.It Va hold
This option is used to hold messages in the system mailbox by default.
.Mx
.It Va idna-disable
\*(OP Can be used to turn off the automatic conversion of domain names
according to the rules of IDNA (internationalized domain names for
applications).
Since the IDNA code assumes that domain names are specified with the
.Va ttycharset
character set, an UTF-8 locale charset is required to represent all
possible international domain names (before conversion, that is).
.Mx
.It Va ignore
Ignore interrupt signals from the terminal while entering messages;
instead echo them as
.Ql @
characters and discard the current line.
.Mx
.It Va ignoreeof
Ignore end-of-file conditions
.Pf ( Ql control-D ) ,
on message input, which instead can be terminated only by entering a
.Va dot
.Ql \&amp;.
on a line by itself or by using the
.Ic ~.
.Sx "TILDE ESCAPES" .
This option also applies to \*(UA command mode.
.Mx Va imap-use-starttls
.It Va imap-use-starttls-USER@HOST , imap-use-starttls-HOST , imap-use-starttls
\*(OP Causes \*(UA to issue a `STARTTLS' command to make an unencrypted
IMAP session SSL/TLS encrypted.
This functionality is not supported by all servers,
and is not used if the session is already encrypted by the IMAPS method.
.Mx
.It Va keep
If set, an empty mailbox file is not removed.
This may improve the interoperability with other mail user agents
when using a common folder directory, and prevents malicious users
from creating fake mailboxes in a world-writable spool directory.
Note this only applies to local regular (MBOX) files, other mailbox
types will never be removed.
.Mx
.It Va keepsave
When a message is saved it is usually discarded from the originating
folder when \*(UA is quit.
Setting this option causes all saved message to be retained.
.Mx
.It Va line-editor-disable
Turn off any enhanced command line editing capabilities (see
.Sx "Command line editor"
for more).
.Mx
.It Va markanswered
When a message is replied to and this variable is set,
it is marked as having been answered.
This mark has no technical meaning in the mail system;
it just causes messages to be marked in the header summary,
and makes them specially addressable.
.Mx
.It Va message-id-disable
By setting this option the generation of
.Ql Message-ID:
can be completely suppressed, effectively leaving this task up to the
mail-transfer-agent (MTA) or the SMTP server.
(According to RFC 5321 your SMTP server is not required to add this
field by itself, so you should ensure that it accepts messages without a
.Ql Message-ID . )
.Mx
.It Va metoo
Usually, when an
.Ic alias
expansion contains the sender, the sender is removed from the expansion.
Setting this option suppresses these removals.
Note that a set
.Va metoo
also causes a
.Ql -m
option to be passed to mail-transfer-agents (MTAs);
though most of the modern MTAs don't (no longer) document this flag, no
MTA is known which doesn't support it (for historical compatibility).
.Mx
.It Va mime-allow-text-controls
When sending messages, each part of the message is MIME-inspected in
order to classify the
.Ql Content-Type:
and
.Ql Content-Transfer-Encoding:
(see
.Va encoding )
that is required to send this part over mail transport, i.e.,
a computation rather similar to what the
.Xr file 1
command produces when used with the
.Ql --mime
option.
.Pp
This classification however treats text files which are encoded in
UTF-16 (seen for HTML files) and similar character sets as binary
octet-streams, forcefully changing any
.Ql text/plain
or
.Ql text/html
specification to
.Ql application/octet-stream :
If that actually happens a yet unset charset MIME parameter is set to
.Ql binary ,
effectively making it impossible for the receiving MUA to automatically
interpret the contents of the part.
.Pp
If this option is set, and the data was unambiguously identified as text
data at first glance (by a
.Ql .txt
or
.Ql .html
file extension), then the original
.Ql Content-Type:
will not be overwritten.
.Mx Va netrc-lookup
.It Va netrc-lookup-USER@HOST , netrc-lookup-HOST , netrc-lookup
\*(IN \*(OP Used to control usage of the users
.Pa .netrc
file for lookup of account credentials, as documented in the section
.Sx "On URL syntax and credential lookup"
and for the command
.Ic netrc ;
the section
.Sx "The .netrc file"
documents the file format.
.Mx
.It Va outfolder
Causes the filename given in the
.Va record
variable
and the sender-based filenames for the
.Ic Copy
and
.Ic Save
commands to be interpreted relative to the directory given in the
.Va folder
variable rather than to the current directory,
unless it is set to an absolute pathname.
.Mx
.It Va page
If set, each message the
.Ic pipe
command prints out is followed by a formfeed character
.Ql \ef .
.Mx
.It Va piperaw
Send messages to the
.Ic pipe
command without performing MIME and character set conversions.
.Mx
.Mx Va pop3-bulk-load
.It Va pop3-bulk-load-USER@HOST , pop3-bulk-load-HOST , pop3-bulk-load
\*(OP When accessing a POP3 server \*(UA loads the headers of the
messages, and only requests the message bodies on user request.
For the POP3 protocol this means that the message headers will be
downloaded twice.
If this option is set then \*(UA will download only complete messages
from the given POP3 server(s) instead.
.Mx Va pop3-no-apop
.It Va pop3-no-apop-USER@HOST , pop3-no-apop-HOST , pop3-no-apop
\*(OP Unless this variable is set the
.Ql APOP
authentication method will be used when connecting to a POP3 server that
advertises support.
The advantage of
.Ql APOP
is that the password is not sent in clear text over the wire and that
only a single packet is sent for the user/password tuple.
Note that
.Va pop3-no-apop-HOST
requires \*(IN.
.Mx Va pop3-use-starttls
.It Va pop3-use-starttls-USER@HOST , pop3-use-starttls-HOST , pop3-use-starttls
\*(OP Causes \*(UA to issue a
.Ql STLS
command to make an unencrypted POP3 session SSL/TLS encrypted.
This functionality is not supported by all servers,
and is not used if the session is already encrypted by the POP3S method.
Note that
.Va pop3-use-starttls-HOST
requires \*(IN.
.Mx
.It Va print-all-chars
This option causes all characters to be considered printable.
It is only effective if given in a startup file.
With this option set some character sequences in messages may put the
user's terminal in an undefined state when printed;
it should only be used as a last resort if no working system locale can
be found.
.Mx
.It Va print-alternatives
When a MIME message part of type
.Ql multipart/alternative
is displayed and it contains a subpart of type
.Ql text/plain ,
other parts are normally discarded.
Setting this variable causes all subparts to be displayed,
just as if the surrounding part was of type
.Ql multipart/mixed .
.Mx
.It Va quiet
Suppresses the printing of the version when first invoked.
.Mx
.It Va quote-as-attachment
If this is set, then the original message is added in its entirety as a
.Ql message/rfc822
MIME attachment when replying to a message.
Note this works regardless of the setting of
.Va quote .
.Mx
.It Va recipients-in-cc
On group replies, specify only the sender of the original mail in
.Ql To:
and mention the other recipients in the secondary
.Ql Cc: .
By default all recipients of the original mail will be addressed via
.Ql To: .
.Mx
.It Va record-resent
If both this variable and the
.Va record
variable are set,
the
.Ic resend
and
.Ic Resend
commands save messages to the
.Va record
folder as it is normally only done for newly composed messages.
.Mx
.It Va reply-in-same-charset
If this variable is set \*(UA first tries to use the same character set
of the original message for replies.
If this fails, the mechanism described in
.Sx "Character sets"
is evaluated as usual.
.Mx
.It Va rfc822-body-from_
This variable can be used to force displaying a so-called
.Ql From_
line for messages that are embedded into an envelope mail via the
.Ql message/rfc822
MIME mechanism, for more visual convenience.
.Mx
.It Va save
Enable saving of (partial) messages in
.Ev DEAD
upon interrupt or delivery error.
.Mx
.It Va searchheaders
Expand message-list specifiers in the form
.Ql /x:y
to all messages containing the substring
.Dq y
in the header field
.Ql x .
The string search is case insensitive.
.Mx
.It Va sendcharsets-else-ttycharset
\*(OP If this variable is set, but
.Va sendcharsets
is not, then \*(UA acts as if
.Va sendcharsets
had been set to the value of the variable
.Va ttycharset .
In effect this combination passes through the message data in the
character set of the current locale (given that
.Va ttycharset
hasn't been set manually), i.e., without converting it to the
.Va charset-8bit
fallback character set.
Thus, mail message text will be in ISO-8859-1 encoding when send from
within a ISO-8859-1 locale, and in UTF-8 encoding when send from within
an UTF-8 locale.
If no character set conversion capabilities are available in \*(UA then
the only supported character set is
.Va ttycharset .
.It Va sendmail-no-default-arguments
Unless this option is set \*(UA will pass some well known
standard command line options to the defined
.Va sendmail
program, see there for more.
.Mx
.It Va sendwait
When sending a message wait until the MTA (including the builtin SMTP
one) exits before accepting further commands.
.Sy Only
with this variable set errors reported by the MTA will be recognizable!
If the MTA returns a non-zero exit status,
the exit status of \*(ua will also be non-zero.
.Mx
.It Va showlast
Setting this option causes \*(UA to start at the last message instead of
the first one when opening a mail folder.
.Mx
.It Va showname
Causes \*(UA to use the sender's real name instead of the plain address
in the header field summary and in message specifications.
.Mx
.It Va showto
Causes the recipient of the message to be shown in the header summary
if the message was sent by the user.
.Mx
.It Va skipemptybody
If an outgoing message does not contain any text in its first or only
message part,
do not send it but discard it silently (see also the command line option
.Fl E ) .
.Mx
.It Va smime-force-encryption
\*(OP Causes \*(UA to refuse sending unencrypted messages.
.Mx
.It Va smime-sign
\*(OP S/MIME sign outgoing messages with the user's private key and
include the user's certificate as a MIME attachment.
Signing a message enables a recipient to verify that the sender used
a valid certificate,
that the email addresses in the certificate match those in the message
header and that the message content has not been altered.
It does not change the message text,
and people will be able to read the message as usual.
Also see
.Va smime-sign-cert , smime-sign-include-certs
and
.Va smime-sign-message-digest .
.Mx
.It Va smime-no-default-ca
\*(OP Don't load default CA locations when verifying S/MIME signed
messages.
.Mx Va smtp-use-starttls
.It Va smtp-use-starttls-USER@HOST , smtp-use-starttls-HOST , smtp-use-starttls
\*(OP Causes \*(UA to issue a
.Ql STARTTLS
command to make an SMTP session SSL/TLS encrypted, i.e., to enable
transport layer security.
.Mx
.It Va ssl-no-default-ca
\*(OP Don't load default CA locations to verify SSL/TLS server
certificates.
.Mx
.It Va term-ca-mode
\*(OP If terminal capability queries are supported and this option is
set then \*(UA will try to switch to the
.Dq alternate screen
when in interactive mode, so that the terminal will go back to the
normal screen, leaving all the text there intact, when \*(UA exits.
.Sy Note:
even when supported for this to produce appealing results the used
.Ev PAGER
and possibly configured
.Va pipe-TYPE/SUBTYPE
applications that take control over the terminal need to have
corresponding support too, e.g., the
.Xr less 1
pager should be driven with the
.Ql -X
command line flag.
.Mx
.It Va keep-content-length
When (editing messages and) writing
.Ev MBOX
mailbox files \*(UA can be told to keep the
.Ql Content-Length:
and
.Ql Lines:
header fields that some MUAs generate by setting this variable.
Since \*(UA does neither use nor update these non-standardized header
fields (which in itself shows one of their conceptual problems),
stripping them should increase interoperability in between MUAs that
work with with same mailbox files.
Note that, if this is not set but
.Va writebackedited ,
as below, is, a possibly performed automatic stripping of these header
fields already marks the message as being modified.
.Mx
.It Va v15-compat
Setting this option enables upward compatibility with \*(UA version 15.0
in respect to which configuration options are available and how they are
handled.
This manual uses \*(IN and \*(OU to refer to the new and the old way of
doing things, respectively.
.Mx
.It Va verbose
Setting this option, also controllable via the command line option
.Fl v ,
causes \*(UA to be more verbose, so that, e.g., certificate chains will
be displayed on the users terminal.
Setting this binary option twice increases the level of verbosity, in
which case even details of the actual message delivery and protocol
conversations are shown.
A single
.Pf no Va verbose
is sufficient to disable verbosity as such.
.Mx
.It Va writebackedited
If this variable is set messages modified using the
.Ic edit
or
.Ic visual
commands are written back to the current folder when it is quit;
it is only honoured for writable folders in MBOX format, though.
Note that the editor will be pointed to the raw message content in that
case, i.e., neither MIME decoding nor decryption will have been
performed, and proper RFC 4155
.Ql From_
quoting of newly added or edited content is also left as an excercise to
the user.
.El
.Ss "Value options"
Options with values that are generally treated as strings.
To embed whitespace (space and tabulator) in a value it either needs to
be escaped with a backslash character, or the entire value must be
enclosed in (double or single) quotation marks;
To use quotation marks identical to those used to enclose the value,
escape them with a backslash character.
The backslash character has no special meaning except in these cases.
.Bd -literal -offset indent
set 1=val\e one 2="val two" 3='val "three"' 4='val \e'four\e''
varshow 1 2 3 4
unset 1 2 3 4
.Ed
.Pp
Booleans are special string values that must either be set to decimal
integers (in which case
.Ql 0
is false and
.Ql 1
and any other value is true) or to any of
.Ql off ,
.Ql no
and
.Ql false
for a false boolean and
.Ql on ,
.Ql yes
and
.Ql true
for a true boolean; matching is performed case-insensitively.
And there exists a special kind of boolean, the
.Dq quadoption :
this is expected to either name a boolean or one of the strings
.Ql ask-yes
and
.Ql ask-no
(in fact:
.Ql ask-
followed by a valid boolean, case-insensitively);
if one of the latter is set then in interactive mode the user will be
prompted with the default value (also used for empty user input) set to
the given boolean, whereas in non-interactive the given default will
be used right away.
.Bl -tag -width ".It Va _utoprin_"
.Mx Va agent-shell-lookup
.It Va agent-shell-lookup-USER@HOST , agent-shell-lookup-HOST , \
agent-shell-lookup
\*(IN \*(OP Account passwords can be fetched via an external agent
program in order to permit encrypted password storage \(en see
.Sx "On URL syntax and credential lookup"
for more on credential lookup.
If this is set then the content is interpreted as a shell command the
output of which (with newline characters removed) is treated as the
account password shall the command succeed (and have produced non-empty
non-newline output); e.g., via
.Xr gpg 1 :
.Bd -literal -offset indent
$ echo PASSWORD &gt; .pass
$ gpg -e .pass
$ eval `gpg-agent --daemon \e
--pinentry-program=/usr/bin/pinentry-curses \e
--max-cache-ttl 99999 --default-cache-ttl 99999`
$ echo 'set agent-shell-lookup="gpg -d .pass.gpg"' \e
&gt;&gt; \*(ur
.Ed
.Pp
A couple of environment variables will be set for the agent:
.Pp
.Bl -tag -compact -width ".It Ev _AIL_TMPDIR[337]"
.It Ev NAIL_TMPDIR
The temporary directory that \*(UA uses.
Usually identical to
.Ev TMPDIR ,
but guaranteed to be set and usable by child processes;
to ensure the latter condition for
.Ev TMPDIR
also, it'll be set.
.It Ev NAIL_USER
The user
.Pf ( Ql USER )
for which the password is looked up.
.It Ev NAIL_USER_ENC
The URL percent-encoded variant of
.Ev NAIL_USER .
.It Ev NAIL_HOST
The plain machine hostname of the user account.
.It Ev NAIL_HOST_PORT
The
.Ql HOST
(hostname possibly including port) of the user account.
.El
.Mx
.It Va attrlist
A sequence of characters to print in the
.Ql attribute
column of the
.Va headline
as shown in the header display; each for one type of messages (see
.Sx "Message states" ) ,
with the default being
.Ql NUROSPMFAT+\-$~
or
.Ql NU\ \ *HMFAT+\-$~
if
.Va bsdflags
or the
.Ev SYSV3
environment variable are set, in the following order:
.Pp
.Bl -tag -compact -offset indent -width ".It Ql _"
.It Ql N
new.
.It Ql U
unread but old.
.It Ql R
new but read.
.It Ql O
read and old.
.It Ql S
saved.
.It Ql P
preserved.
.It Ql M
mboxed.
.It Ql F
flagged.
.It Ql A
answered.
.It Ql T
draft.
.It Ql +
start of a collapsed thread.
.It Ql -
collapsed.
.It Ql $
classified as spam.
.It Ql ~
classified as possible spam.
.El
.Mx
.It Va autobcc
Specifies a list of recipients to which a blind carbon copy of each
outgoing message will be sent automatically.
.Mx
.It Va autocc
Specifies a list of recipients to which a carbon copy of each outgoing
message will be sent automatically.
.Mx
.It Va autosort
Causes sorted mode (see the
.Ic sort
command) to be entered automatically with the value of this option as
sorting method when a folder is opened.
.Mx
.It Va charset-7bit
The value that should appear in the
.Ql charset=
parameter of
.Ql Content-Type:
MIME header fields when no character set conversion of the message data
was performed.
This defaults to US-ASCII, and the chosen character set should be
US-ASCII compatible.
.Mx
.It Va charset-8bit
\*(OP The default 8-bit character set that is used as an implicit last
member of the variable
.Va sendcharsets .
This defaults to UTF-8.
If no character set conversion capabilities are available in \*(UA then
the only supported character set is
.Va ttycharset .
Refer to the section
.Sx "Character sets"
for the complete picture of character set conversion in \*(UA.
.Mx
.It Va charset-unknown-8bit
\*(OP RFC 1428 specifies conditions when internet mail gateways shall
.Dq upgrade
the content of a mail message by using a character set with the name
.Ql unknown-8bit .
Because of the unclassified nature of this character set \*(UA will not
be capable to convert this character set to any other character set.
If this variable is set any message part which uses the character set
.Ql unknown-8bit
is assumed to really be in the character set given in the value,
otherwise the (final) value of
.Va charset-8bit
is used for this purpose.
.Mx
.It Va cmd
The default value for the
.Ic pipe
command.
.Mx
.It Va colour-from_
\*(OP The colour specification for so-called
.Ql From_
lines.
See the section
.Sx "Coloured message display"
for the format of the value.
.Mx
.It Va colour-header
\*(OP The colour specification for header lines.
.Mx
.It Va colour-msginfo
\*(OP The colour specification for the introductional message info line.
.Mx
.It Va colour-partinfo
\*(OP The colour specification for MIME part info lines.
.Mx
.It Va colour-terms
\*(OP A comma-separated list of
.Ev TERM Ns
inals for which coloured message display can be used.
Entries only need to be added if the string
.Dq color
isn't part of the terminal name itself; the default value is
.Pp
.Dl cons25,linux,rxvt,rxvt-unicode,\:screen,\:sun,\:vt100,\:vt220,\:\
wsvt25,\:xterm
.Mx
.It Va colour-uheader
\*(OP The colour specification for those header lines that have been
placed in the
.Va colour-user-headers
list.
See the section
.Sx "Coloured message display" .
.Mx
.It Va colour-user-headers
A comma separated list of (case-insensitive) header names which should
be colourized with the alternative
.Va colour-uheader
colours.
The default value is
.Ql from,subject .
.Mx
.It Va crt
In a(n interactive) terminal session, then if this valued option is set
it'll be used as a threshold to determine how many lines the given
output has to span before it will be displayed via the configured
.Ev PAGER ;
Usage of the
.Ev PAGER
can be forced by setting this to the value
.Ql 0 ,
setting it without a value will deduce the current height of the
terminal screen to compute the treshold (see
.Ev LINES
and
.Xr stty 1 ) .
.Mx
.It Va datefield
The date in a header summary is normally the date of the mailbox
.Ql From_
line of the message.
If this variable is set, then the date as given in the
.Ql Date:
field is used, converted to local time.
It is possible to control the display of the date by assigning a value,
in which case the
.Xr strftime 3
function will be used to format the date accordingly.
Please read your system manual for the available formats.
Note that the
.Ql %n
format should not be used, because \*(UA doesn't take embedded newlines
into account when calculating how many lines fit onto the screen.
.Mx
.It Va datefield-markout-older
This option, when set in addition to
.Va datefield ,
is used to display
.Dq older
messages (concept is rather comparable to the
.Fl \&amp;\&amp;l
option of the POSIX utility
.Xr ls 1 ) .
The content interpretation is identical to
.Va datefield .
.Mx
.It Va encoding
Suggestion for the MIME encoding to use in outgoing text messages
and message parts.
Valid values are the default
.Ql quoted-printable ,
.Ql 8bit
and
.Ql base64 .
.Ql 8bit
may cause problems when transferring mail messages over channels that
are not ESMTP (RFC 1869) compliant.
If there is no need to encode a message,
.Ql 7bit
transfer mode is always used regardless of this variable.
Binary data is always encoded as
.Ql base64 .
.Mx
.It Va escape
If defined, the first character of this option
gives the character to use in place of
.Ql ~
to denote
.Sx "TILDE ESCAPES" .
.Mx
.It Va expandaddr
If not set then file and command pipeline targets are not allowed,
and any such address will be filtered out, giving a warning message.
If set without a value then all possible recipient address
specifications will be accepted \(en see the section
.Sx "Sending mail"
for more on this.
To accept them, but only in interactive mode, or when tilde commands
were enabled explicitly by using one of the command line options
.Fl ~
or
.Fl # ,
set this to the (case-insensitive) value
.Ql restrict
(note right now this is actually like setting
.Ql restrict,-all,+name,+addr ) .
.Pp
In fact the value is interpreted as a comma-separated list of values.
If it contains
.Ql fail
then the existence of disallowed specifications is treated as a hard
send error instead of only filtering them out.
The remaining values specify whether a specific type of recipient
address specification is allowed (optionally indicated by a plus sign
.Ql +
prefix) or disallowed (prefixed with a hyphen
.Ql - ) .
The value
.Ql all
addresses all possible address specifications,
.Ql file
file targets,
.Ql pipe
command pipeline targets,
.Ql name
plain user names and (MTA) aliases (\*(OB
.Ql noalias
may be used as an alternative syntax to
.Ql -name )
and
.Ql addr
network addresses.
These kind of values are interpreted in the given order, so that
.Ql restrict,\:fail,\:+file,\:-all,\:+addr
will cause hard errors for any non-network address recipient address
unless \*(UA is in interactive mode or has been started with the
.Fl ~
or
.Fl #
command line option; in the latter case(s) any address may be used, then.
.Mx
.It Va expandargv
Unless this variable is set additional mail-transfer-agent (MTA)
arguments from the command line, as can be given after a
.Ql --
separator, are ignored due to safety reasons.
However, if set to the special value
.Ql fail ,
then the presence of additional MTA arguments is treated as a hard
error that causes \*(UA to exit with failure status.
A lesser strict variant is the otherwise identical
.Ql restrict ,
which does accept such arguments in interactive mode, or if tilde
commands were enabled explicitly by using one of the command line options
.Fl ~
or
.Fl # .
.Mx
.It Va features
\*(RO Information on the features compiled into \*(UA \(en the content
of this variable is identical to the output of the command
.Ic features .
.Mx
.Mx
.It Va file-hook-load-EXTENSION , file-hook-save-EXTENSION
It is possible to install file hooks which will be used by the
.Ic file
command in order to be able to transparently handle (through an
intermediate temporary file) files with specific
.Ql EXTENSION Ns
s: the variable values can include shell snippets and are expected to
write data to standard output / read data from standard input,
respectively.
\*(ID The variables may not be changed while there is a mailbox
attendant.
.Bd -literal -offset indent
set file-hook-load-xy='echo &gt;&amp;2 XY-LOAD; gzip -cd' \e
file-hook-save-xy='echo &gt;&amp;2 XY-SAVE; gzip -c' \e
record=+null-sent.xy
.Ed
.Mx
.It Va folder
The name of the directory to use for storing folders of messages.
All folder names that begin with
.Ql +
refer to files below it.
The same special conventions as documented for the
.Ic file
command may be used when specifying a new value for
.Va \&amp;\&amp;folder ,
but be aware that the expansion is fully performed immediately.
E.g., if the expanded name refers to an IMAP account, all names that
begin with `+' refer to IMAP mailboxes below the
.Va folder
target box.
.Pp
Note: for IMAP it makes a difference whether
.Va \&amp;\&amp;folder
ends with a directory separator solidus or not in respect to the
automatic append of `INBOX' strings.
Ssome IMAP servers do not accept the creation of mailboxes in
the hierarchy base, but require that they are created as subfolders of
`INBOX' \(en with such servers a folder name of the form
.Pp
.Dl imaps://mylogin@imap.myisp.example/INBOX.
.Pp
should be used (the last character is the server's hierarchy delimiter).
Folder names prefixed by `+' will then refer to folders below `INBOX',
while folder names prefixed by `@' refer to folders below the hierarchy
base.
See the
.Ic imap
namespace command for a method to detect the appropriate prefix and
delimiter.
.Mx
.It Va folder-hook
When a folder is opened and this variable is set,
the macro corresponding to the value of this variable is executed.
The macro is also invoked when new mail arrives,
but message lists for commands executed from the macro
only include newly arrived messages then.
If
.Ic localopts
are activated in a folder hook, then the covered settings will be
reverted once the folder is left again.
.Mx
.It Va folder-hook-FOLDER
Overrides
.Va folder-hook
for a folder named
.Ql FOLDER .
Unlike other folder specifications, the fully expanded name of a folder,
without metacharacters, is used to avoid ambiguities.
However, if the mailbox resides under
.Va folder
then the usual
.Ql +
specification is tried in addition, e.g., if
.Va \&amp;\&amp;folder
is
.Dq mail
(and thus relative to the user's home directory) then
.Pa /home/usr1/mail/sent
will be tried as
.Ql folder-hook-/home/usr1/mail/sent
first, but then followed by
.Ql folder-hook-+sent .
.Mx
.It Va followup-to-honour
Controls whether a
.Ql Mail-Followup-To:
header is honoured when group-replying to a message via
.Ic reply
or
.Ic Lreply .
This is a quadoption; if set without a value it defaults to
.Dq yes .
Also see
.Va followup-to
and the commands
.Ic mlist
and
.Ic mlsubscribe .
.Mx
.It Va from
The address (or a list of addresses) to put into the
.Ql From:
field of the message header, quoting RFC 5322:
the author(s) of the message, that is, the mailbox(es) of the person(s)
or system(s) responsible for the writing of the message.
If replying to messages these addresses are handled as if they were in
the
.Ic alternates
list.
If the machine's hostname is not valid at the Internet (for example at
a dialup machine) then either this variable or
.Va hostname
(\*(IN and with
.Va smtp
.Va smtp-hostname
adds even more fine-tuning capabilities),
have to be set.
If
.Va \&amp;\&amp;from
contains more than one address,
setting the
.Va sender
variable is required (according to the standard RFC 5322).
.Mx
.It Va fwdheading
The string to print before the text of a message with the
.Ic forward
command
(unless the
.Va forward-as-attachment
variable is set).
Defaults to
.Dq -------- Original Message --------
if unset; No heading is printed if it is set to the empty string.
.Mx
.It Va headline
A format string to use for the header summary,
similar to
.Xr printf 3
formats.
A percent character
.Ql %
introduces a format specifier that may be followed by a number
indicating the field width;
If the (possibly implicitly implied) field width is negative, the field
is to be left-aligned.
Valid format specifiers are:
.Pp
.Bl -tag -compact -offset indent -width "_%%_"
.It Ql %%
A plain percent character.
.It Ql %&gt;
A space character but for the current message, for which it expands to
.Ql &gt; .
.It Ql %&lt;
A space character but for the current message, for which it expands to
.Ql &lt; .
.It Ql %$
\*(OP The spam score of the message, as has been classified via the
command
.Ic spamrate .
Prints only a replacement character if there is no spam support.
.It Ql %a
Message attribute character (status flag); the actual content can be
adjusted by setting
.Va attrlist .
.It Ql %d
The date when the message was received.
.It Ql %e
The indenting level in threaded mode.
.It Ql %f
The address of the message sender.
.It Ql %i
The message thread structure.
(Note that this format doesn't support a field width.)
.It Ql %l
The number of lines of the message.
.It Ql %m
Message number.
.It Ql %o
The number of octets (bytes) in the message.
.It Ql %s
Message subject (if any).
.It Ql %S
Message subject (if any) in double quotes.
.It Ql \&amp;%T
Message recipient flags: is the addressee of the message a known or
subscribed mailing list \(en see
.Ic mlist
and
.Ic mlsubscribe .
.It Ql %t
The position in threaded/sorted order.
.El
.Pp
The default is
.Ql %&gt;\&amp;%a\&amp;%m\ %-18f\ %16d\ %4l/%\-5o\ %i%-s ,
or
.Ql %&gt;\&amp;%a\&amp;%m\ %20-f\ \ %16d\ %3l/%\-5o\ %i%-S
if
.Va bsdcompat
is set.
Also see
.Va attrlist
and
.Va headline-bidi .
.Mx
.It Va headline-bidi
Bidirectional text requires special treatment when displaying headers,
because numbers (in dates or for file sizes etc.) will not affect the
current text direction, in effect resulting in ugly line layouts when
arabic or other right-to-left text is to be displayed.
On the other hand only a minority of terminals is capable to correctly
handle direction changes, so that user interaction is necessary for
acceptable results.
Note that extended host system support is required nonetheless, e.g.,
detection of the terminal character set is one precondition;
and this feature only works in an Unicode (i.e., UTF-8) locale.
.Pp
In general setting this variable will cause \*(UA to encapsulate text
fields that may occur when printing
.Va headline
(and some other fields, like dynamic expansions in
.Va prompt )
with special Unicode control sequences;
it is possible to fine-tune the terminal support level by assigning
a value:
no value (or any value other than
.Ql 1 ,
.Ql 2
and
.Ql 3 )
will make \*(UA assume that the terminal is capable to properly deal
with Unicode version 6.3, in which case text is embedded in a pair of
U+2068 (FIRST STRONG ISOLATE) and U+2069 (POP DIRECTIONAL ISOLATE)
characters.
In addition no space on the line is reserved for these characters.
.Pp
Weaker support is chosen by using the value
.Ql 1
(Unicode 6.3, but reserve the room of two spaces for writing the control
sequences onto the line).
The values
.Ql 2
and
.Ql 3
select Unicode 1.1 support (U+200E, LEFT-TO-RIGHT MARK); the latter
again reserves room for two spaces in addition.
.Mx
.It Va hostname
Use this string as hostname when expanding local addresses instead of
the value obtained from
.Xr uname 3
and
.Xr getaddrinfo 3 ,
i.e., in
.Ql Message-ID:
and
.Ql From:
fields.
Note that when
.Va smtp
transport is not used then it is normally the responsibility of the MTA
to create these fields, \*(IN in conjunction with
.Va smtp
however
.Va smtp-hostname
also influences the results;
you should produce some test messages with the desired combination of
.Va \&amp;\&amp;hostname ,
and/or
.Va from ,
.Va sender
etc. first.
.Mx Va imap-auth
.It Va imap-auth-USER@HOST , imap-auth
\*(OP Sets the IMAP authentication method.
Valid values are `login' for the usual password-based authentication
(the default),
`cram-md5', which is a password-based authentication that does not send
the password over the network in clear text,
and `gssapi' for GSS-API based authentication.
.Mx
.It Va imap-cache
\*(OP Enables caching of IMAP mailboxes.
The value of this variable must point to a directory that is either
existent or can be created by \*(UA.
All contents of the cache can be deleted by \*(UA at any time;
it is not safe to make assumptions about them.
.Mx Va imap-delim
.It Va imap-delim-USER@HOST , imap-delim-HOST , imap-delim
\*(OP The hierarchy separator used by the IMAP server.
Whenever an IMAP path is specified it will undergo normalization.
One of the normalization steps is the squeeze and adjustment of
hierarchy separators.
If this variable is set, any occurrence of any character of the given
value that exists in the path will be replaced by the first member of
the value; an empty value will cause the default to be used, it is
.Ql /. .
If not set, we will reuse the first hierarchy separator character that
is discovered in a user-given mailbox name.
.Mx Va imap-keepalive
.It Va imap-keepalive-USER@HOST , imap-keepalive-HOST , imap-keepalive
\*(OP IMAP servers may close the connection after a period of
inactivity; the standard requires this to be at least 30 minutes,
but practical experience may vary.
Setting this variable to a numeric `value' greater than 0 causes
a `NOOP' command to be sent each `value' seconds if no other operation
is performed.
.Mx
.It Va imap-list-depth
\*(OP When retrieving the list of folders on an IMAP server, the
.Ic folders
command stops after it has reached a certain depth to avoid possible
infinite loops.
The value of this variable sets the maximum depth allowed.
The default is 2.
If the folder separator on the current IMAP server is a slash `/',
this variable has no effect and the
.Ic folders
command does not descend to subfolders.
.Mx
.It Va inbox
If this is set it will be used for expansions of
.Ql % ,
see
.Ic file
for more.
\*(ID IMAP users may set this to the empty string to force bypassing the
special handling of
.Va folder .
The value supports a subset of filename expansions itself.
.Mx
.It Va indentprefix
String used by the
.Ic ~m , ~M
and
.Ic ~R
.Sx "TILDE ESCAPES"
and by the
.Va quote
option for indenting messages,
in place of the normal tabulator character
.Ql ^I ,
which is the default.
Be sure to quote the value if it contains spaces or tabs.
.Mx
.It Va line-editor-cursor-right
\*(OP If the builtin command line editor is used, actions which are
based on rightwise movement may not work on some terminals.
If you encounter such problems, set this variable to the terminal
control sequence that is necessary to move the cursor one column to the
right.
The default is
.Ql \e033[C ,
which should work for most terminals.
Less often occur
.Ql \e033OC
and
.Ql \e014 .
Note that
.Dq Escape
and other control character have to be written as shell-style escape
sequences, e.g.,
.Ql \e033
for (US-ASCII)
.Dq Escape .
.Mx
.It Va mime-counter-evidence
Normally the
.Ql Content-Type:
field is used to decide how to handle MIME parts.
Some MUAs however don't use
.Xr mime.types 5
or a similar mechanism to correctly classify content, but simply specify
.Ql application/octet-stream ,
even for plain text attachments like
.Ql text/diff .
If this variable is set then \*(UA will try to classify such MIME
message parts on its own, if possible, and through their file name.
This variable can also be given a non-empty value, in which case the
value is expected to be a number, actually a carrier of bits.
Creating the bit-carrying number is a simple addition:
.Bd -literal -offset indent
? !echo Value should be set to $((2 + 4))
Value should be set to 6
.Ed
.Pp
.Bl -bullet -compact
.It
If bit two is set (2) then the detected
.Qd real
content-type will be carried along with the message and be used for
deciding which
.Va pipe-TYPE/SUBTYPE
is responsible for the MIME part, shall that question arise;
when displaying such a MIME part the part-info will indicate the
overridden content-type by showing a plus-sign
.Ql + .
.It
If bit three is set (4) then the counter-evidence is always produced
and a positive result will be used as the MIME type, even forcefully
overriding the parts given MIME type.
.El
.Mx
.It Va mimetypes-load-control
This option can be used to control which of the
.Xr mime.types 5
databases are loaded by \*(UA, as furtherly described in the section
.Sx "The mime.types files" .
If the letter
.Ql u
is part of the option value, then the user's personal
.Pa ~/.mime.types
file will be loaded (if it exists); likewise the letter
.Ql s
controls loading of the system wide
.Pa /etc/mime.types ;
the user file is loaded first, letter matching is case-insensitive.
If this option is not set \*(UA will try to load both files instead.
Incorporation of the \*(UA-builtin MIME types cannot be suppressed,
but they will be matched last.
.Pp
More sources can be specified by using a different syntax: if the
value string contains an equals sign
.Ql =
then it is instead parsed as a comma-separated list of the described
letters plus
.Ql f=FILENAME
pairs; the given filenames will be expanded and loaded, and their
content may use the extended syntax that is described in the section
.Sx "The mime.types files" .
.Mx
.It Va NAIL_EXTRA_RC
The name of an optional startup file to be read after
.Pa \*(ur .
This variable has an effect only if it is set in
.Pa \*(UR
or
.Pa \&amp;\&amp;\*(ur ,
it is not imported from the environment in order to honour
.Ql MAILRC=/dev/null Ns /
.Fl n
invocations.
Use this file for commands that are not understood by other POSIX
.Xr mailx 1
implementations.
.Mx
.It Va NAIL_HEAD
A string to put at the beginning of each new message.
The escape sequences tabulator
.Ql \et
and newline
.Ql \en
are understood.
.Mx
.It Va NAIL_HISTFILE
\*(OP If a command line editor is available then this can be set to
name the (expandable) path of the location of a permanent history file.
.Mx
.It Va NAIL_HISTSIZE
\*(OP If a command line editor is available this value restricts the
amount of history entries that are saved into a set and valid
.Va NAIL_HISTFILE .
A value of less than 0 disables this feature;
note that loading and incorporation of
.Va NAIL_HISTFILE
upon program startup can also be suppressed by doing this.
An unset or invalid value, or 0, causes a default value to be used.
Dependent on the available command line editor this will also define the
number of history entries in memory;
it is also editor-specific whether runtime updates of this value will be
honoured.
.Mx
.It Va NAIL_TAIL
A string to put at the end of each new message.
The escape sequences tabulator
.Ql \et
and newline
.Ql \en
are understood.
.Mx
.It Va newfolders
If this variable has the value
.Ql maildir ,
newly created local folders will be in Maildir format.
.Mx
.It Va newmail
Checks for new mail in the current folder each time the prompt is
printed.
For IMAP mailboxes the server is then polled for new mail,
which may result in delayed operation if the connection to the server is
slow.
A Maildir folder must be re-scanned to determine if new mail has arrived.
.Pp
If this variable is set to the special value
.Dq nopoll
an IMAP server is not actively asked for new mail, but new mail may
still be detected and announced with any other IMAP command that is sent
to the server.
In either case the IMAP server may send notifications about messages
that have been deleted on the server by another process or client.
In this case,
.Dq Expunged X messages
is printed regardless of this variable, and message numbers may have
changed.
.Pp
If this variable is set to the special value
.Ql nopoll
then a Maildir folder will not be rescanned completely, but only
timestamp changes are detected.
.Mx
.It Va ORGANIZATION
The value to put into the
.Ql Organization:
field of the message header.
.Mx Va password
.It Va password-USER@HOST , password-HOST , password
\*(IN Variable chain that sets a password, which is used in case none has
been given in the protocol and account-specific URL;
as a last resort \*(UA will ask for a password on the user's terminal if
the authentication method requires a password.
Specifying passwords in a startup file is generally a security risk;
the file should be readable by the invoking user only.
.It Va password-USER@HOST
\*(OU (see the chain above for \*(IN)
Set the password for
.Ql USER
when connecting to
.Ql HOST .
If no such variable is defined for a host,
the user will be asked for a password on standard input.
Specifying passwords in a startup file is generally a security risk;
the file should be readable by the invoking user only.
.Mx
.It Va pipe-TYPE/SUBTYPE
When a MIME message part of type
.Ql TYPE/SUBTYPE
(normalized to lowercase) is displayed or quoted,
its text is filtered through the value of this variable interpreted as
a shell command.
The special value
.Ql @
can be used to force interpretation of the message part as plain text, e.g.,
.Ql set pipe-application/pgp-signature=@
will henceforth treat signatures as plain text and display them "as is".
(The same can also be achieved, in a more useful context, by using the
.Ic mimetype
command in conjunction with a type marker.)
.Pp
Also, if a shell command is prefixed with
.Ql @ ,
then the command will only be used to prepare the MIME message part if
the message is displayed by itself, but not when multiple messages are
displayed at once.
.Pp
Finally, if a shell command is prefixed with
.Ql @&amp; ,
then, in addition to what has been described for the plain
.Ql @
shell command prefix, the command will be run asynchronously, i.e.,
without blocking \*(UA, which may be a handy way to display a, e.g., PDF
file while also continuing to read the mail message.
Some information about the MIME part to be displayed is embedded into
the environment of the shell command:
.Pp
.Bl -tag -compact -width ".It Ev _AIL__ILENAME__ENERATED"
.Mx
.It Ev NAIL_TMPDIR
The temporary directory that \*(UA uses.
Usually identical to
.Ev TMPDIR ,
but guaranteed to be set and usable by child processes;
to ensure the latter condition for
.Ev \&amp;\&amp;TMPDIR
also, it'll be set.
.Mx
.It Ev NAIL_FILENAME
The filename, if any is set, the empty string otherwise.
.Mx
.It Ev NAIL_FILENAME_GENERATED
A random string.
.Mx
.It Ev NAIL_CONTENT
The MIME content-type of the part, if known, the empty string otherwise.
.Mx
.It Ev NAIL_CONTENT_EVIDENCE
If
.Va mime-counter-evidence
includes the carry-around-bit (2), then this will be set to the detected
MIME content-type; not only then identical to
.Ev \&amp;\&amp;NAIL_CONTENT
otherwise.
.El
.Mx
.It Va pipe-EXTENSION
This is identical to
.Va pipe-TYPE/SUBTYPE
except that
.Ql EXTENSION
(normalized to lowercase using character mappings of the ASCII charset)
names a file extension, e.g.,
.Ql xhtml .
Handlers registered using this method take precedence.
.Mx Va pop3-keepalive
.It Va pop3-keepalive-USER@HOST , pop3-keepalive-HOST , pop3-keepalive
\*(OP POP3 servers close the connection after a period of inactivity;
the standard requires this to be at least 10 minutes,
but practical experience may vary.
Setting this variable to a numeric value greater than
.Ql 0
causes a
.Ql NOOP
command to be sent each value seconds if no other operation is performed.
.Mx
.It Va prompt
The string printed when a command is accepted.
Prompting may be prevented by either setting this to the null string
or by setting
.Pf no Va prompt .
The same XSI escape sequences that are understood by the
.Ic echo
command may be used within
.Va \&amp;\&amp;prompt .
.Pp
In addition, the following \*(UA specific additional sequences are
understood:
.Ql \e&amp; ,
which expands to
.Dq \&amp;?
unless
.Va bsdcompat
is set, in which case it expands to
.Dq \&amp;&amp; ;
note that
.Ql \e&amp;\0
is the default value of
.Va \&amp;\&amp;prompt .
.Ql \e? ,
which will expand to
.Dq 1
if the last command failed and to
.Dq 0
otherwise,
.Ql \e$ ,
which will expand to the name of the currently active
.Ic account ,
if any, and to the empty string otherwise, and
.Ql \e@ ,
which will expand to the name of the currently active mailbox.
(Note that the prompt buffer is size-limited, excess is cut off.)
.Pp
Even though
.Va \&amp;\&amp;prompt
checks for
.Va headline-bidi
to encapsulate the expansions of the
.Ql \e$
and
.Ql \e@
escape sequences as necessary to correctly display bidirectional text,
this is not true for the final string that makes up
.Va \&amp;\&amp;prompt
as such, i.e., real BIDI handling is not supported.
.Pp
When a newer version of the
.Xr editline 3
.Sx "Command line editor"
is used, any escape sequence must itself be encapsulated with another
escape character for usage with the
.Va EL_PROMPT_ESC
mechanism: \*(UA configures the control character
.Ql \e01
for this.
.Mx
.It Va quote
If set, \*(UA starts a replying message with the original message
prefixed by the value of the variable
.Va indentprefix .
Normally, a heading consisting of
.Dq Fromheaderfield wrote:
is printed before the quotation.
If the string
.Ql noheading
is assigned to the
.Va \&amp;\&amp;quote
variable, this heading is omitted.
If the string
.Ql headers
is assigned, the headers selected by the
.Ic ignore Ns / Ns Ic retain
commands are printed above the message body,
thus
.Va \&amp;\&amp;quote
acts like an automatic
.Pf ` Ic ~m Ns '
.Sx "TILDE ESCAPES"
command, then.
If the string
.Ql allheaders
is assigned, all headers are printed above the message body and all MIME
parts are included, making
.Va \&amp;\&amp;quote
act like an automatic
.Pf ` Ic ~M Ns '
command; also see
.Va quote-as-attachment .
.Mx
.It Va quote-fold
\*(OP Can be set in addition to
.Va indentprefix .
Setting this turns on a more fancy quotation algorithm in that leading
quotation characters are compressed and overlong lines are folded.
.Va \&amp;\&amp;quote-fold
can be set to either one or two (space separated) numeric values,
which are interpreted as the maximum (goal) and the minimum line length,
respectively, in a spirit rather equal to the
.Xr fmt 1
program, but line-, not paragraph-based.
If not set explicitly the minimum will reflect the goal algorithmically.
The goal can't be smaller than the length of
.Va indentprefix
plus some additional pad.
Necessary adjustments take place silently.
.Mx
.It Va record
If defined, gives the pathname of the folder used to record all outgoing
mail.
If not defined, then outgoing mail is not saved.
When saving to this folder fails the message is not sent,
but instead saved to
.Ev DEAD .
.Mx
.It Va reply_strings
Can be set to a comma-separated list of (case-insensitive according to
ASCII rules) strings which shall be recognized in addition to the
builtin strings as
.Ql Subject:
reply message indicators \(en builtin are
.Ql Re: ,
which is mandated by RFC 5322, as well as the german
.Ql Aw: .
.Mx
.It Va replyto
A list of addresses to put into the
.Ql Reply-To:
field of the message header.
Members of this list are handled as if they were in the
.Ic alternates
list.
.Mx
.It Va reply-to-honour
Controls whether a
.Ql Reply-To:
header is honoured when replying to a message via
.Ic reply
or
.Ic Lreply .
This is a quadoption; if set without a value it defaults to
.Dq yes .
.Mx
.It Va screen
When \*(UA initially prints the message headers it determines the number
to print by looking at the speed of the terminal.
The faster the terminal, the more it prints.
This option overrides this calculation and specifies how many message
headers are printed.
This number is also used for scrolling with the
.Ic z
command.
.Mx
.It Va sendcharsets
\*(OP A comma-separated list of character set names that can be used in
outgoing internet mail.
The value of the variable
.Va charset-8bit
is automatically appended to this list of character-sets.
If no character set conversion capabilities are compiled into \*(UA then
the only supported charset is
.Va ttycharset .
Also see
.Va sendcharsets-else-ttycharset
and refer to the section
.Sx "Character sets"
for the complete picture of character set conversion in \*(UA.
.Mx
.It Va sender
An address that is put into the
.Ql Sender:
field of outgoing messages, quoting RFC 5322: the mailbox of the agent
responsible for the actual transmission of the message.
This field should normally not be used unless the
.Ql From:
field contains more than one address, on which case it is required.
The
.Va \&amp;\&amp;sender
address is handled as if it were in the
.Ic alternates
list.
.Mx
.It Va sendmail
To use an alternate mail transport agent (MTA),
set this option to the full pathname of the program to use.
It may be necessary to set
.Va sendmail-progname
in addition.
.Pp
The MTA will be passed command line arguments from several possible
sources: from the variable
.Va sendmail-arguments
if set, from the command line if given and the variable
.Va expandargv
allows their use.
Argument processing of the MTA will be terminated with a
.Ql --
separator.
.Pp
The otherwise occurring implicit usage of the following MTA command line
arguments can be disabled by setting the boolean option
.Va sendmail-no-default-arguments
(which will also disable passing
.Ql --
to the MTA):
.Ql -i
(for not treating a line with only a dot
.Ql \&amp;.
character as the end of input),
.Ql -m
(shall the option
.Va metoo
be set) and
.Ql -v
(if the
.Va verbose
option is set); in conjunction with the
.Fl r
command line option \*(UA will also pass
.Ql -f
as well as
.Ql -F .
.Mx
.It Va sendmail-arguments
Arguments to pass through to the Mail-Transfer-Agent can be given via
this option.
The content of this variable will be split up in a vector of arguments
which will be joined onto other possible MTA options:
.Pp
.Dl set sendmail-arguments='-t -X \&amp;"/tmp/my log\&amp;"'
.Mx
.It Va sendmail-no-default-arguments
\*(BY Unless this option is set \*(UA will pass some well known
standard command line options to the defined
.Va sendmail
program, see there for more.
.Mx
.It Va sendmail-progname
Many systems use a so-called
.Xr mailwrapper 8
environment to ensure compatibility with
.Xr sendmail 1 .
This works by inspecting the name that was used to invoke the mail
delivery system.
If this variable is set then the mailwrapper (the program that is
actually executed when calling
.Dq sendmail )
will treat its contents as that name.
The default is
.Ql sendmail .
.Mx
.It Va Sign
A string for use with the
.Ic ~A
tilde escape.
.Mx
.It Va sign
A string for use with the
.Ic ~a
tilde escape.
.Mx
.It Va signature
Must correspond to the name of a readable file if set.
The file's content is then appended to each singlepart message
and to the first part of each multipart message.
Be warned that there is no possibility to edit the signature for an
individual message.
.Mx
.It Va smime-ca-dir
\*(OP Specifies a directory with CA certificates in PEM (Privacy
Enhanced Mail) format for verification of S/MIME signed messages.
.Mx
.It Va smime-ca-file
\*(OP Specifies a file with CA certificates in PEM format for
verification of S/MIME signed messages.
.Mx Va smime-cipher
.It Va smime-cipher-USER@HOST , smime-cipher
\*(OP Specifies the cipher to use when generating S/MIME encrypted
messages (for the specified account).
RFC 5751 mandates a default of
.Ql aes128
(AES-128 CBC).
Possible values are (case-insensitive and) in decreasing cipher strength:
.Ql aes256
(AES-256 CBC),
.Ql aes192
(AES-192 CBC),
.Ql aes128
(AES-128 CBC),
.Ql des3
(DES EDE3 CBC, 168 bits; default if
.Ql aes128
isn't available) and
.Ql des
(DES CBC, 56 bits).
.Pp
The actually available cipher algorithms depend on the cryptographic
library that \*(UA uses.
\*(OP Support for more cipher algorithms may be available through
dynamic loading via, e.g.,
.Xr EVP_get_cipherbyname 3
(OpenSSL) if \*(UA has been compiled to support this.
.Mx
.It Va smime-crl-dir
\*(OP Specifies a directory that contains files with CRLs in PEM format
to use when verifying S/MIME messages.
.Mx
.It Va smime-crl-file
\*(OP Specifies a file that contains a CRL in PEM format to use when
verifying S/MIME messages.
.Mx
.It Va smime-encrypt-USER@HOST
\*(OP If this variable is set, messages send to the given receiver are
encrypted before sending.
The value of the variable must be set to the name of a file that
contains a certificate in PEM format.
.Pp
If a message is sent to multiple recipients,
each of them for whom a corresponding variable is set will receive an
individually encrypted message;
other recipients will continue to receive the message in plain text
unless the
.Va smime-force-encryption
variable is set.
It is recommended to sign encrypted messages, i.e., to also set the
.Va smime-sign
variable.
.Mx Va smime-sign-cert
.It Va smime-sign-cert-USER@HOST , smime-sign-cert
\*(OP Points to a file in PEM format.
For the purpose of signing and decryption this file needs to contain the
user's private key as well as his certificate.
.Pp
For message signing
.Ql USER@HOST
is always derived from the value of
.Va from
(or, if that contains multiple addresses,
.Va sender ) .
For the purpose of encryption the recipient's public encryption key
(certificate) is expected; the command
.Ic certsave
can be used to save certificates of signed messages (the section
.Sx "Signed and encrypted messages with S/MIME"
gives some details).
This mode of operation is usually driven by the specialized form.
.Pp
When decrypting messages the account is derived from the recipient
fields
.Pf ( Ql To:
and
.Ql Cc: )
of the message, which are searched for addresses for which such
a variable is set.
\*(UA always uses the first address that matches,
so if the same message is sent to more than one of the user's addresses
using different encryption keys, decryption might fail.
.Mx Va smime-sign-include-certs
.It Va smime-sign-include-certs-USER@HOST , smime-sign-include-certs
\*(OP If used, this is supposed to a consist of a comma-separated list
of files, each of which containing a single certificate in PEM format to
be included in the S/MIME message in addition to the
.Va smime-sign-cert
certificate.
This is most useful for long certificate chains if it is desired to aid
the receiving party's verification process.
Note that top level certificates may also be included in the chain but
don't play a role for verification.
Also see
.Va smime-sign-cert .
Remember that for this
.Ql USER@HOST
refers to the variable
.Va from
(or, if that contains multiple addresses,
.Va sender ) .
.Mx Va smime-sign-message-digest
.It Va smime-sign-message-digest-USER@HOST , smime-sign-message-digest
\*(OP Specifies the message digest to use when signing S/MIME messages.
RFC 5751 mandates a default of
.Ql sha1 .
Possible values are (case-insensitive and) in decreasing cipher strength:
.Ql sha512 ,
.Ql sha384 ,
.Ql sha256 ,
.Ql sha224
and
.Ql md5 .
.Pp
The actually available message digest algorithms depend on the
cryptographic library that \*(UA uses.
\*(OP Support for more message digest algorithms may be available
through dynamic loading via, e.g.,
.Xr EVP_get_digestbyname 3
(OpenSSL) if \*(UA has been compiled to support this.
Remember that for this
.Ql USER@HOST
refers to the variable
.Va from
(or, if that contains multiple addresses,
.Va sender ) .
.Mx
.It Va smtp
\*(OP Normally \*(UA invokes the program defined via
.Va sendmail
to transfer messages, as described in
.Sx "Sending mail" .
Setting the
.Va \&amp;\&amp;smtp
variable will instead cause SMTP network connections be made to the
server specified therein in order to directly submit the message.
\*(UA knows about three different
.Dq SMTP protocols :
.Pp
.Bl -bullet -compact
.It
The plain SMTP protocol (RFC 5321) that normally lives on the
server port 25 and requires setting the
.Va smtp-use-starttls
variable to enter a SSL/TLS encrypted session state.
Assign a value like \*(IN
.Ql [smtp://][user[:password]@]server[:port]
(\*(OU
.Ql [smtp://]server[:port] )
to choose this protocol.
.It
Then the so-called SMTPS which is supposed to live on server port 465
and is automatically SSL/TLS secured.
Unfortunately it never became a standardized protocol and may thus not
be supported by your hosts network service database
\(en in fact the port number has already been reassigned to other
protocols!
.Pp
SMTPS is nonetheless a commonly offered protocol and thus can be
chosen by assigning a value like \*(IN
.Ql smtps://[user[:password]@]server[:port]
(\*(OU
.Ql smtps://server[:port] ) ;
due to the mentioned problems it is usually necessary to explicitly
specify the port as
.Ql :465 ,
however.
.It
Finally there is the SUBMISSION protocol (RFC 6409), which usually
lives on server port 587 and is practically identically to the SMTP
protocol from \*(UAs point of view beside that; it requires setting the
.Va smtp-use-starttls
variable to enter a SSL/TLS secured session state.
Assign a value like \*(IN
.Ql submission://[user[:password]@]server[:port]
(\*(OU
.Ql submission://server[:port] ) .
.El
.Pp
For more on credentials etc. please see
.Sx "On URL syntax and credential lookup" .
The SMTP transfer is executed in a child process, which runs
asynchronously unless either the
.Va sendwait
or the
.Va verbose
variable is set.
If it receives a TERM signal, it will abort and save the message to
.Ev DEAD .
.Mx Va smtp-auth
.It Va smtp-auth-USER@HOST , smtp-auth-HOST , smtp-auth
\*(OP Variable chain that sets the SMTP authentication method.
Possible values are
.Ql none
(\*(OU default),
.Ql plain
(\*(IN default),
.Ql login
as well as the \*(OPal methods
.Ql cram-md5
and
.Ql gssapi .
The
.Ql none
method doesn't need any user credentials,
.Ql gssapi
requires a user name and all other methods require a user name and
a password.
See \*(IN
.Va smtp ,
.Va user
and
.Va password
(\*(OU
.Va smtp-auth-password
and
.Va smtp-auth-user ) .
Note that
.Va smtp-auth-HOST
is \*(IN.
\*(OU: Note for
.Va smtp-auth-USER@HOST :
may override dependend on sender address in the variable
.Va from .
.It Va smtp-auth-password
\*(OP \*(OU Sets the global fallback password for SMTP authentication.
If the authentication method requires a password, but neither
.Va smtp-auth-password
nor a matching
.Va smtp-auth-password-USER@HOST
can be found,
\*(UA will ask for a password on the user's terminal.
.It Va smtp-auth-password-USER@HOST
\*(OU Overrides
.Va smtp-auth-password
for specific values of sender addresses, dependent upon the variable
.Va from .
.It Va smtp-auth-user
\*(OP \*(OU Sets the global fallback user name for SMTP authentication.
If the authentication method requires a user name, but neither
.Va smtp-auth-user
nor a matching
.Va smtp-auth-user-USER@HOST
can be found,
\*(UA will ask for a user name on the user's terminal.
.It Va smtp-auth-user-USER@HOST
\*(OU Overrides
.Va smtp-auth-user
for specific values of sender addresses, dependent upon the variable
.Va from .
.Mx
.It Va smtp-hostname
\*(IN Normally \*(UA uses the variable
.Va from
to derive the necessary
.Ql USER@HOST
information to issue a
.Ql MAIL FROM:&lt;&gt;
SMTP command.
Setting
.Va smtp-hostname
can be used to use the
.Ql USER
from the SMTP account
.Pf ( Va smtp
or the
.Va user
variable chain)
and the
.Ql HOST
from the content of this variable (or, if that is the empty string,
.Va hostname
or the local hostname as a last resort).
This often allows using an address that is itself valid but hosted by
a provider other than which (in
.Va from )
is about to send the message.
Setting this variable also influences the generated
.Ql Message-ID: .
.Mx
.It Va spam-interface
\*(OP In order to use any of the spam-related commands (like, e.g.,
.Ic spamrate )
the desired spam interface must be defined by setting this variable.
Please refer to the manual section
.Sx "Handling spam"
for the complete picture of spam handling in \*(UA.
All or none of the following interfaces may be available:
.Bl -tag -width ".It Ql _ilte_"
.It Ql spamc
Interaction with
.Xr spamc 1
from the
.Xr spamassassin 1
.Pf ( Lk http://spamassassin.apache.org SpamAssassin )
suite.
Different to the generic filter interface \*(UA will automatically add
the correct arguments for a given command and has the necessary
knowledge to parse the program's output.
A default value for
.Va spamc-command
will have been compiled into the \*(UA binary if
.Xr spamc 1
has been found in
.Ev PATH
during compilation.
Shall it be necessary to define a specific connection type (rather than
using a configuration file for that), the variable
.Va spamc-arguments
can be used as in, e.g.,
.Ql -d server.example.com -p 783 .
It is also possible to specify a per-user configuration via
.Va spamc-user .
Note that this interface doesn't inspect the
.Ql is-spam
flag of a message for the command
.Ic spamforget .
.It Ql spamd
\*(UA will directly communicate with the
.Xr spamassassin 1
daemon
.Xr spamd 1
via a path-based
.Xr unix 4
stream socket as specified in
.Va spamd-socket .
It is possible to specify a per-user configuration via
.Va spamd-user .
.It Ql filter
generic spam filter support via freely configurable hooks.
This interface is ment for programs like
.Xr bogofilter 1
and
.Xr sylfilter 1
and requires according behaviour in respect to the hooks' exit
status for at least the command
.Ic spamrate
.Pf ( Ql 0
meaning a message is spam,
.Ql 1
for non-spam,
.Ql 2
for unsure and any other return value indicating a hard error);
since the hooks can include shell code snippets diverting behaviour
can be intercepted as necessary.
The hooks are
.Va spamfilter-ham , spamfilter-noham , spamfilter-nospam , \
spamfilter-rate
and
.Va spamfilter-spam ;
the manual section
.Sx "Handling spam"
contains examples for some programs.
The process environment of the hooks will have the variables
.Ev NAIL_TMPDIR , TMPDIR
and
.Ev NAIL_FILENAME_GENERATED
set.
Note that spam score support for
.Ic spamrate
isn't supported unless the \*(OPtional regular expression support is
available and the
.Va spamfilter-rate-scanscore
variable is set.
.El
.Mx
.It Va spam-maxsize
\*(OP Messages that exceed this size won't be passed through to the
configured
.Va spam-interface .
The default is 420000 bytes.
.Mx
.It Va spamc-command
\*(OP The path to the
.Xr spamc 1
program for the
.Ql spamc
.Va spam-interface .
Note that the path is not expanded, but used
.Dq as is .
A fallback path will have been compiled into the \*(UA binary if the
executable had been found during compilation.
.Mx
.It Va spamc-arguments
\*(OP Even though \*(UA deals with most arguments for the
.Ql spamc
.Va spam-interface
automatically, it may at least sometimes be desirable to specifiy
connection-related ones via this variable, e.g.,
.Ql -d server.example.com -p 783 .
.Mx
.It Va spamc-user
\*(OP Specify a username for per-user configuration files for the
.Ql spamc
.Va spam-interface .
If this is set to the empty string then \*(UA will use the name of the
current
.Va user .
.Mx
.It Va spamd-socket
\*(OP Specify the path of the
.Xr unix 4
domain socket on which
.Xr spamd 1
listens for connections for the
.Ql spamd
.Va spam-interface .
Note that the path is not expanded, but used
.Dq as is .
.Mx
.It Va spamd-user
\*(OP Specify a username for per-user configuration files for the
.Ql spamd
.Va spam-interface .
If this is set to the empty string then \*(UA will use the name of the
current
.Va user .
.Mx
.Mx
.Mx
.Mx
.Mx
.It Va spamfilter-ham , spamfilter-noham , \
spamfilter-nospam , spamfilter-rate , spamfilter-spam
\*(OP Command and argument hooks for the
.Ql filter
.Va spam-interface .
The manual section
.Sx "Handling spam"
contains examples for some programs.
.Mx
.It Va spamfilter-rate-scanscore
\*(OP Because of the generic nature of the
.Ql filter
.Va spam-interface
spam scores are not supported for it by default, but if the \*(OPtional
regular expression support is available then setting this variable can
be used to overcome this restriction.
It is interpreted as follows: first a number (digits) is parsed that
must be followed by a semicolon
.Ql \&amp;;
and a regular expression.
Then the latter is used to parse the first output line of the
.Va spamfilter-rate
hook, and, in case the evaluation is successful, the group that has been
specified via the number is interpreted as a floating point scan score.
.Mx
.It Va ssl-ca-dir
\*(OP Specifies a directory with CA certificates in PEM (Pricacy
Enhanced Mail) for verification of of SSL/TLS server certificates.
See
.Xr SSL_CTX_load_verify_locations 3
for more information.
.Mx
.It Va ssl-ca-file
\*(OP Specifies a file with CA certificates in PEM format for
verification of SSL/TLS server certificates.
See
.Xr SSL_CTX_load_verify_locations 3
for more information.
.Mx Va ssl-cert
.It Va ssl-cert-USER@HOST , ssl-cert-HOST , ssl-cert
\*(OP Variable chain that sets the file name for a SSL/TLS client
certificate required by some servers.
This is a direct interface to the
.Ql Certificate
slot of the
.Xr SSL_CONF_cmd 3
function of the OpenSSL library, if available.
.Mx Va ssl-cipher-list
.It Va ssl-cipher-list-USER@HOST , ssl-cipher-list-HOST , ssl-cipher-list
\*(OP Specifies a list of ciphers for SSL/TLS connections.
This is a direct interface to the
.Ql CipherString
slot of the
.Xr SSL_CONF_cmd 3
function of the OpenSSL library, if available; see
.Xr ciphers 1
for more information.
By default \*(UA doesn't set a list of ciphers, which in effect will use a
.Va ssl-protocol
specific cipher (protocol standards ship with a list of acceptable
ciphers), possibly cramped to what the actually used SSL/TLS library
supports \(en the manual section
.Sx "An example configuration"
also contains a SSL/TLS use case.
.Mx
.It Va ssl-config-file
\*(OP If this variable is set \*(UA will call
.Xr CONF_modules_load_file 3
to allow OpenSSL to be configured according to the host system wide
security settings.
If a non-empty value is given then this will be used to specify the
configuration file to be used instead of the global OpenSSL default;
note that in this case it is an error if the file cannot be loaded.
The application name will always be passed as
.Dq \*(ua .
.Mx
.It Va ssl-crl-file
\*(OP Specifies a file that contains a CRL in PEM format to use when
verifying SSL/TLS server certificates.
.Mx
.It Va ssl-crl-dir
\*(OP Specifies a directory that contains files with CRLs in PEM format
to use when verifying SSL/TLS server certificates.
.Mx Va ssl-key
.It Va ssl-key-USER@HOST , ssl-key-HOST , ssl-key
\*(OP Variable chain that sets the file name for the private key of
a SSL/TLS client certificate.
If unset, the name of the certificate file is used.
The file is expected to be in PEM format.
This is a direct interface to the
.Ql PrivateKey
slot of the
.Xr SSL_CONF_cmd 3
function of the OpenSSL library, if available.
.Mx Va ssl-method
.It Va ssl-method-USER@HOST , ssl-method-HOST , ssl-method
\*(OP
\*(OB Please use the newer and more flexible
.Va ssl-protocol
instead: if both values are set,
.Va ssl-protocol
will take precedence!
Can be set to the following values, the actually used
.Va ssl-protocol
specification to which it is mapped is shown in parenthesis:
.Ql tls1.2
.Pf ( Ql -ALL, TLSv1.2 ) ,
.Ql tls1.1
.Pf ( Ql -ALL, TLSv1.1 ) ,
.Ql tls1
.Pf ( Ql -ALL, TLSv1 )
and
.Ql ssl3
.Pf ( Ql -ALL, SSLv3 ) ;
the special value
.Ql auto
is mapped to
.Ql ALL, -SSLv2
and thus includes the SSLv3 protocol.
Note that SSLv2 is no longer supported at all.
.Mx Va ssl-protocol
.It Va ssl-protocol-USER@HOST , ssl-protocol-HOST , ssl-protocol
\*(OP Specify the used SSL/TLS protocol.
This is a direct interface to the
.Ql Protocol
slot of the
.Xr SSL_CONF_cmd 3
function of the OpenSSL library, if available;
otherwise an \*(UA internal parser is used which understands the
following subset of (case-insensitive) command strings:
.Ql SSLv3 ,
.Ql TLSv1 ,
.Ql TLSv1.1
and
.Ql TLSv1.2 ,
as well as the special value
.Ql ALL .
Multiple specifications may be given via a comma-separated list which
ignores any whitespace.
An optional
.Ql +
plus prefix will enable a protocol, a
.Ql -
minus prefix will disable it, so that
.Ql -ALL, TLSv1.2
will enable only the TLSv1.2 protocol.
.Pp
It depends upon the used TLS/SSL library which protocols are actually
supported and which protocols are used if
.Va ssl-protocol
is not set, but note that SSLv2 is no longer supported at all and
actively disabled.
Especially for older protocols explicitly securing
.Va ssl-cipher-list
may be worthwile, see
.Sx "An example configuration" .
.Mx
.It Va ssl-rand-egd
\*(OP Gives the pathname to an entropy daemon socket, see
.Xr RAND_egd 3 .
Not all SSL/TLS libraries support this.
.Mx
.It Va ssl-rand-file
\*(OP Gives the pathname to a file with entropy data, see
.Xr RAND_load_file 3 .
If the file is a regular file writable by the invoking user,
new data is written to it after it has been loaded.
.Mx Va ssl-verify
.It Va ssl-verify-USER@HOST , ssl-verify-HOST , ssl-verify
\*(OP Variable chain that sets the action to be performed if an error
occurs during SSL/TLS server certificate validation.
Valid (case-insensitive) values are
.Ql strict
(fail and close connection immediately),
.Ql ask
(ask whether to continue on standard input),
.Ql warn
(print a warning and continue),
.Ql ignore
(do not perform validation).
The default is
.Ql ask .
.Mx
.It Va stealthmua
If only set without an assigned value, then this option inhibits the
generation of the
.Ql Message-ID:
and
.Ql User-Agent:
header fields that include obvious references to \*(UA.
There are two pitfalls associated with this:
First, the message id of outgoing messages is not known anymore.
Second, an expert may still use the remaining information in the header
to track down the originating mail user agent.
If set to the value
.Ql noagent ,
then the mentioned
.Ql Message-ID:
suppression doesn't occur.
.Mx
.It Va toplines
If defined, gives the number of lines of a message to be printed out
with the top command; normally, the first five lines are printed.
.Mx
.It Va ttycharset
The character set of the terminal \*(UA operates on,
and the one and only supported character set that \*(UA can use if no
character set conversion capabilities have been compiled into it,
in which case it defaults to ISO-8859-1 unless it can deduce a value
from the
.Ev LC_CTYPE
locale environment.
Refer to the section
.Sx "Character sets"
for the complete picture about character sets.
.Mx Va user
.It Va user-HOST , user
\*(IN Variable chain that sets a global fallback user name, which is
used in case none has been given in the protocol and account-specific
URL.
This variable defaults to the value of
.Ev USER .
.Mx
.Mx
.Mx
.Mx
.It Va version , version-major , version-minor , version-update
\*(RO \*(UA version information: the first variable contains a string
containing the complete version identification \(en this is identical to
the output of the command
.Ic version .
The latter three contain only digits: the major, minor and update
version numbers.
.El
.Sh ENVIRONMENT
The term
.Dq environment variable
should be considered an indication that the following variables are
either standardized as being vivid parts of process environments, or
are commonly found in there.
Unless otherwise explicitly noted they integrate into the normal
variable handling, as documented above, from \*(UAs point of view.
.Bl -tag -width ".It Ev _AILR_"
.Mx
.It Ev COLUMNS
The user's preferred width in column positions for the terminal screen
or window.
Queried and used once on program startup.
.Mx
.It Ev DEAD
The name of the file to use for saving aborted messages if
.Va save
is set; this defaults to
.Pa dead.letter
in the user's
.Ev HOME
directory.
.Mx
.It Ev EDITOR
Pathname of the text editor to use in the
.Ic edit
command and
.Ic ~e
.Sx "TILDE ESCAPES" .
A default editor is used if this value is not defined.
.Mx
.It Ev HOME
The user's home directory.
This variable is only used when it resides in the process environment.
Use
.Ic setenv
to update the value at runtime.
.Mx
.Mx
.Mx
.Mx
.Mx
.It Ev LANG , LC_ALL , LC_COLLATE , LC_CTYPE , LC_MESSAGES
See
.Xr locale 7
and
.Sx "Character sets" .
.Mx
.It Ev LINES
The user's preferred number of lines on a page or the vertical screen
or window size in lines.
Queried and used once on program startup.
.Mx
.It Ev LISTER
Pathname of the directory lister to use in the
.Ic folders
command when operating on local mailboxes.
Default is
.Xr ls 1
(path search through
.Ev SHELL ) .
.Mx
.It Ev MBOX
The name of the user's mbox file.
Supports a logical subset of the special conventions that are
documented for the
.Ic file
command and the
.Va folder
option.
The fallback default is
.Pa mbox
in the user's
.Ev HOME
directory.
.Mx
.It Ev MAIL
Is used as the user's primary system mailbox, unless
.Va inbox
is set, see
.Ic file .
This is assumed to be an absolute pathname.
.Mx
.It Ev MAILRC
Is used as a startup file instead of
.Pa \*(ur
if set.
When \*(UA scripts are invoked on behalf of other users,
this variable should be set to
.Pa /dev/null
to avoid side-effects from reading their configuration files.
This variable is only used when it resides in the process environment.
.Mx
.It Ev NAIL_NO_SYSTEM_RC
If this variable is set then reading of
.Pa \*(UR
at startup is inhibited, i.e., the same effect is achieved as if \*(UA
had been started up with the option
.Fl n .
This variable is only used when it resides in the process environment.
.Mx
.It Ev NETRC
\*(IN \*(OP This variable overrides the default location of the user's
.Pa .netrc
file.
.Mx
.It Ev PAGER
Pathname of the program to use in the more command or when the
.Va crt
variable is set.
The default paginator is
.Xr more 1
(path search through
.Ev SHELL ) .
.Mx
.It Ev PATH
A list of directories that is searched by the shell when looking for
commands (as such only recognized in the process environment).
.Mx
.It Ev SHELL
The shell to use for the commands
.Ic \&amp;! ,
.Ic shell ,
the
.Ic ~!
.Sx "TILDE ESCAPES"
and when starting subprocesses.
A default shell is used if this option is not defined.
.Mx
.It Ev SYSV3
Changes the letters printed in the first column of a header summary.
.Mx
.It Ev TERM
\*(OP The terminal type for which output is to be prepared.
.Mx
.It Ev TMPDIR
Used as directory for temporary files instead of
.Pa /tmp ,
if set.
This variable is only used when it resides in the process environment.
Use
.Ic setenv
to update the value at runtime.
.Mx
.It Ev USER
Force identification as the given user, i.e., identical to the
.Fl u
command line option.
This variable is only used when it resides in the process environment.
Use
.Ic setenv
to update the value at runtime, but note that doing so won't trigger any
of those validation checks that were performed on program startup (again).
.Mx
.It Ev VISUAL
Pathname of the text editor to use in the
.Ic visual
command and
.Ic ~v
.Sx "TILDE ESCAPES" .
.El
.Sh FILES
.Bl -tag -width ".It Pa _etc/mime.type_"
.It Pa \*(ur
File giving initial commands.
.It Pa \*(UR
System wide initialization file.
.Mx
.It Pa ~/.mime.types
Personal MIME types, see
.Sx "The mime.types files" .
.Mx
.It Pa /etc/mime.types
System wide MIME types, see
.Sx "The mime.types files" .
.Mx
.It Pa ~/.netrc
\*(IN \*(OP The default location of the users
.Pa .netrc
file \(en the section
.Sx "The .netrc file"
documents the file format.
.El
.Ss "The mime.types files"
When sending messages \*(UA tries to determine the content type of all
attachments.
When displaying message content or attachments \*(UA uses the content
type to decide whether it can directly display data or whether it needs to
deal with content handlers, as can be defined via
.Va pipe-TYPE/SUBTYPE
(and
.Va pipe-EXTENSION )
variables, to do so.
.Pp
It learns about MIME types and how to treat them by reading
.Pa mime.types
files, the loading of which can be controlled by setting the variable
.Va mimetypes-load-control .
(The command
.Ic mimetype
can also be used to deal with MIME types.)
.Pa mime.types
files have the following syntax:
.Pp
.Dl type/subtype extension [extension ...]
.Pp
where
.Ql type/subtype
are strings describing the file contents, and one or multiple
.Ql extension Ns
s, separated by whitespace, name the part of a filename starting after
the last dot (of interest).
Comments may be introduced anywhere on a line with a number sign
.Ql # ,
causing the remaining line to be discarded.
\*(UA also supports an extended, non-portable syntax in specially
crafted files, which can be loaded via the alternative value syntax of
.Va mimetypes-load-control
and prepends an optional
.Ql type-marker :
.Pp
.Dl [type-marker ]type/subtype extension [extension ...]
.Pp
The following type markers are supported:
.Pp
.Bl -tag -compact -offset indent -width ".It Ar _n_u"
.It Ar @
Treat message parts with this content as plain text.
.It Ar @t@
The same as plain
.Ar @ .
.It Ar @h@
Treat message parts with this content as HTML tagsoup.
If the \*(OPal HTML-tagsoup-to-text converter is not available treat
the content as plain text instead.
.It Ar @H@
Likewise
.Ar @h@
but instead of falling back to plain text require an explicit content
handler to be defined.
.El
.Pp
Further reading:
for sending messages:
.Va mime-allow-text-controls .
For reading etc. messages:
.Sx "Viewing HTML mail and MIME attachments" ,
.Va mime-counter-evidence ,
.Va pipe-TYPE/SUBTYPE ,
.Va pipe-EXTENSION .
.Ss "The .netrc file"
The
.Pa .netrc
file contains user credentials for machine accounts.
The default location in the user's
.Ev HOME
directory may be overridden by the
.Ev NETRC
environment variable.
The file consists of space, tabulator or newline separated tokens.
\*(UA implements a parser that supports a superset of the original BSD
syntax, but users should nonetheless be aware of portability glitches
of that file format, shall their
.Pa .netrc
be usable across multiple programs and platforms:
.Pp
.Bl -bullet -compact
.It
BSD doesn't support single, but only double quotation marks, e.g.,
.Ql password="pass with spaces" .
.It
BSD (only?) supports escaping of single characters via a backslash
(e.g., a space can be escaped via
.Ql \e\0 ) ,
in- as well as outside of a quoted string.
.It
BSD doesn't require the final quotation mark of the final user input token.
.It
At least Hewlett-Packard seems to support a format which also allows
tokens to be separated with commas \(en this format is not supported!
.It
Whereas other programs may require that the
.Pa .netrc
file is accessible by only the user if it contains a
.Cd password
token for any other
.Cd login
than
.Dq anonymous ,
\*(UA will always require these strict permissions.
.El
.Pp
Of the following list of supported tokens \*(UA only uses (and caches)
.Cd machine ,
.Cd login
and
.Cd password :
.Bl -tag -width password
.It Cd machine Ar name
The hostname of the entries' machine, lowercase-normalized by \*(UA
before use.
Any further file content, until either end-of-file or the occurrence
of another
.Cd machine
or a
.Cd default
first-class token is bound (only related) to the machine
.Ar name .
.Pp
As an extension that shouldn't be the cause of any worries
\*(UA supports a single wildcard prefix for
.Ar name :
.Bd -literal -offset indent
machine *.example.com login USER password PASS
machine pop3.example.com login USER password PASS
machine smtp.example.com login USER password PASS
.Ed
.Pp
which would match
.Ql xy.example.com
as well as
.Ql pop3.example.com ,
but neither
.Ql example.com
nor
.Ql local.smtp.example.com .
Note that in the example neither
.Ql pop3.example.com
nor
.Ql smtp.example.com
will be matched by the wildcard, since the exact matches take
precedence (it is however faster to specify it the other way around).
.It Cd default
This is the same as
.Cd machine
except that it is a fallback entry that is used shall none of the
specified machines match; only one default token may be specified,
and it must be the last first-class token.
.It Cd login Ar name
The user name on the remote machine.
.It Cd password Ar string
The user's password on the remote machine.
.It Cd account Ar string
Supply an additional account password.
This is merely for FTP purposes.
.It Cd macdef Ar name
Define a macro.
A macro is defined with the specified
.Ar name ;
it is formed from all lines beginning with the next line and continuing
until a blank line is (consecutive newline characters are) encountered.
(Note that
.Cd macdef
entries cannot be utilized by multiple machines, too, but must be
defined following the
.Ic machine
they are intended to be used with.)
If a macro named
.Ar init
exists, it is automatically run as the last step of the login process.
This is merely for FTP purposes.
.El
.Sh EXAMPLES
.Ss "An example configuration"
.Bd -literal -offset indent
# This example assumes v15.0 compatibility mode
set v15-compat

# Where are the up-to-date SSL certificates?
#set ssl-ca-dir=/etc/ssl/certs
set ssl-ca-file=/etc/ssl/certs/ca-certificates.crt

# (Since we manage up-to-date ones explicitly, don't use any,
# possibly outdated, default certificates shipped with OpenSSL
set ssl-no-default-ca

# Don't use protocols olders than TLS v1.2.
# Change this only when the remote server doesn't support it:
# maybe use ssl-protocol-HOST (or -USER@HOST) syntax to define
# such explicit exceptions, then
set ssl-protocol="-ALL,+TLSv1.2"

# Explicitly define the list of ciphers, which may improve security,
# especially with protocols older than TLS v1.2.  See ciphers(1).
# Hint: it is important to include "@STRENGTH": only with it the
# final list will be sorted by algorithm strength.
# This is an example: in reality it is possibly best to only use
# ssl-cipher-list-HOST (or -USER@HOST), as necessary, again..
set ssl-cipher-list="ALL:!aNULL:!MEDIUM:!LOW:\e
!MD5:!RC4:!EXPORT:@STRENGTH"

# Request strict transport security checks!
set ssl-verify=strict

# Essential setting: select allowed character sets
set sendcharsets=utf-8,iso-8859-1

# A very kind option: when replying to a message, first try to
# use the same encoding that the original poster used herself!
set reply-in-same-charset

# When replying to or forwarding a message the comment and name
# parts of email addresses are removed unless this variable is set
set fullnames

# When sending messages, wait until the Mail-Transfer-Agent finishs.
# Only like this you'll be able to see errors reported through the
# exit status of the MTA (including the builtin SMTP one)!
set sendwait

# Only use builtin MIME types, no mime.types(5) files
set mimetypes-load-control

# Default directory where we act in (relative to $HOME)
set folder=mail MBOX=+mbox.mbox record=+sent.mbox \e
DEAD=+dead.mbox

# Make "file mymbox" and "file myrec" go to..
shortcut mymbox %:+mbox.mbox myrec +sent.mbox

# Not really optional, e.g., for S/MIME
set from="Your Name &lt;youremail@domain&gt;"

# It may be necessary to set hostname and/or smtp-hostname
# if the "SERVER" of smtp and "domain" of from don't match.
# The `urlcodec' command can be used to encode USER and PASS
set smtp=(smtp[s]/submission)://[USER[:PASS]@]SERVER[:PORT] \e
smtp-auth=login/plain... \e
smtp-use-starttls

# Never refuse to start into interactive mode, and more
set emptystart \e
colour-pager crt= followup-to followup-to-honour=ask-yes \e
history-gabby mime-counter-evidence=6 \e
prompt="\e033[31m?\e?[\e$ \e@]\e&amp; \e033[0m" \e
NAIL_HISTFILE=+.s-nailhist NAIL_HISTSIZE=-1 \e
reply-to-honour=ask-yes

# When `p'rinting messages, show only these headers
# (use `P'rint for all headers and `S'how for raw message)
retain date from to cc subject

# Some mailing lists
mlist @xyz-editor.xyz$ @xyzf.xyz$
mlsubscribe ^xfans@xfans.xyz$

# A real life example of a very huge free mail provider
account XooglX {
localopts yes
set from="Your Name &lt;youremail@domain&gt;"
# (The plain smtp:// proto is optional)
set smtp=USER:PASS@smtp.gmXil.com smtp-use-starttls
}

# Here is a pretty large one which does not allow sending mails
# if there is a domain name mismatch on the SMTP protocol level,
# which would bite us if the value of from does not match, e.g.,
# for people who have a sXXXXeforge project and want to speak
# with the mailing list under their project account (in from),
# still sending the message through their normal mail provider
account XandeX {
localopts true
set from="Your Name &lt;youremail@domain&gt;"
set smtp=smtps://USER:PASS@smtp.yaXXex.ru:465 \e
hostname=yaXXex.com smtp-hostname=
}

# Create some new commands so that, e.g., `ls /tmp' will..
ghost l   !ls -aFtr
ghost L   !ls -aFt
ghost ll  !ls -aFltr
ghost Ll  !ls -aFlt
ghost la  !ls -aFr
ghost La  !ls -aF
ghost lla !ls -aFlr
ghost Lla !ls -aFl
ghost lS  !ls -aFrS
ghost LS  !ls -aFS
ghost llS !ls -aFlrS
ghost LlS !ls -aFlS

# We don't support gpg(1) directly yet.  But simple --clearsign'd
# message parts can be dealt with as follows:
define V {
localopts yes
set pipe-text/plain="set -C;\e
: &gt; \e"${TMPDIR}/${NAIL_FILENAME_GENERATED}\e" \e
trap \e"rm -f \e\e\e"${TMPDIR}/${NAIL_FILENAME_GENERATED}\e\e\e"\e" \e
EXIT INT QUIT PIPE TERM;\e
set +C;\e
cat &gt; \e"${TMPDIR}/${NAIL_FILENAME_GENERATED}\e";\e
&lt; \e"${TMPDIR}/${NAIL_FILENAME_GENERATED}\e" awk \e
-v TMPFILE=\e"${TMPDIR}/${NAIL_FILENAME_GENERATED}\e" '\e
BEGIN {done=0}\e
/^-----BEGIN PGP SIGNED MESSAGE-----/,/^$/ {\e
if (done++ != 0)\e
next;\e
print \e"--- GPG --verify ---\e";\e
system(\e"gpg --verify \e" TMPFILE \e" 2&gt;&amp;1\e");\e
print \e"--- GPG --verify ---\e";\e
print \e"\e";\e
next;\e
}\e
/^-----BEGIN PGP SIGNATURE-----/,\e
/^-----END PGP SIGNATURE-----/ {\e
next;\e
}\e
{print}\e
'"
print
}
ghost V call V

define RK {
!printf 'Key IDs to gpg --recv-keys: ';\e
read keyids;\e
gpg --recv-keys ${keyids};
}
ghost RK call RK
.Ed
.Pp
When storing passwords in
.Pa \*(ur
appropriate permissions should be set on this file with
.Ql $ chmod 0600 \*(ur .
If the \*(OPal
.Va netrc-lookup
is available user credentials can be stored in the central
.Pa .netrc
file instead; e.g., here is a different version of the example account
that sets up SMTP and POP3:
.Bd -literal -offset indent
account XandeX {
localopts true
set from="Your Name &lt;youremail@domain&gt;"
set netrc-lookup
#set agent-shell-lookup="gpg -d .pass.gpg"

set smtp=smtps://smtp.yXXXXx.ru:465 \e
smtp-hostname= hostname=yXXXXx.com
set pop3-keepalive=240 pop3-no-apop-pop.yXXXXx.ru
ghost xp fi pop3s://pop.yXXXXx.ru
}
.Ed
.Pp
and, in the
.Pa .netrc
file:
.Bd -literal -offset indent
machine *.yXXXXx.ru login USER password PASS
.Ed
.Pp
If the also \*(OPal
.Va agent-shell-lookup
is available things could be diversified further by using encrypted
password storage: for this, don't specify
.Ql password PASS
in the
.Pa .netrc
file and instead uncomment the line that defines agent lookup in the
example
.Ic account
above, then create the encrypted password storage file
.Pa .pass.gpg :
.Bd -literal -offset indent
$ echo PASS &gt; .pass
$ gpg -e .pass
$ eval `gpg-agent --daemon \e
--pinentry-program=/usr/bin/pinentry-curses \e
--max-cache-ttl 99999 --default-cache-ttl 99999`
.Ed
.Pp
This configuration should now work just fine (use the
.Fl d
command line option for a(n almost) dry-run):
.Pp
.Dl $ echo text | \*(ua -vv -AXandeX -s Subject some@where
.Ss "Signed and encrypted messages with S/MIME"
\*(OP S/MIME provides two central mechanisms:
message signing and message encryption.
A signed message contains some data in addition to the regular text.
The data can be used to verify that the message was sent using a valid
certificate, that the sender's address in the message header matches
that in the certificate, and that the message text has not been altered.
Signing a message does not change its regular text;
it can be read regardless of whether the recipient's software is able to
handle S/MIME.
.Pp
It is thus usually possible to sign all outgoing messages if so desired.
Encryption, in contrast, makes the message text invisible for all people
except those who have access to the secret decryption key.
To encrypt a message, the specific recipient's public encryption key
must be known.
It is therefore not possible to send encrypted mail to people unless their
key has been retrieved from either previous communication or public key
directories.
A message should always be signed before it is encrypted.
Otherwise, it is still possible that the encrypted message text is
altered.
.Pp
A central concept to S/MIME is that of the certification authority (CA).
A CA is a trusted institution that issues certificates.
For each of these certificates it can be verified that it really
originates from the CA, provided that the CA's own certificate is
previously known.
A set of CA certificates is usually delivered with OpenSSL and installed
on your system.
If you trust the source of your OpenSSL software installation,
this offers reasonable security for S/MIME on the Internet.
(Otherwise set
.Va ssl-no-default-ca
and use
.Va smime-ca-file
and/or
.Va smime-ca-dir . )
In general, a certificate cannot be more secure than the method its CA
certificate has been retrieved with, though.
Thus if you download a CA certificate from the Internet,
you can only trust the messages you verify using that certificate as
much as you trust the download process.
.Pp
The first thing you need for participating in S/MIME message exchange is
your personal certificate, including a private key.
The certificate contains public information, in particular your name and
your email address(es), and the public key that is used by others to
encrypt messages for you,
and to verify signed messages they supposedly received from you.
The certificate is included in each signed message you send.
The private key must be kept secret.
It is used to decrypt messages that were previously encrypted with your
public key, and to sign messages.
.Pp
For personal use it is recommended that you get a S/MIME certificate
from one of the major CAs on the Internet using your WWW browser.
Many CAs offer such certificates for free.
There is also
.Lk https://www.CAcert.org
which issues client and server certificates to members of their
community for free; their root certificate
.Pf ( Lk https://\:www.cacert.org/\:certs/\:root.crt )
is often not in the default set of trusted CA root certificates, though,
which means you will have to download their root certificate separately
and ensure it is part of our S/MIME certificate validation chain by
including it in
.Va smime-ca-dir
or as a vivid member of the
.Va smime-ca-file .
But let's take a step-by-step tour on how to setup S/MIME with
a certificate from CAcert.org despite this situation!
.Pp
First of all you will have to become a member of the CAcert.org
community, simply by registrating yourself via the web interface.
Once you are, create and verify all email addresses you want to be able
to create signed and encrypted messages for/with using the corresponding
entries of the web interface.
Now ready to create S/MIME certificates, so let's create a new
.Dq client certificate ,
ensure to include all email addresses that should be covered by the
certificate in the following web form, and also to use your name as the
.Dq common name .
.Pp
Create a private key and a certificate request on your local computer
(please see the manual pages of the used commands for more in-depth
knowledge on what the used arguments etc. do):
.Pp
.Dl openssl req -nodes -newkey rsa:4096 -keyout key.pem -out creq.pem
.Pp
Afterwards copy-and-paste the content of
.Dq creq.pem
into the certificate-request (CSR) field of the web form on the
CAcert.org website (you may need to unfold some
.Dq advanced options
to see the corresponding text field).
This last step will ensure that your private key (which never left your
box) and the certificate belong together (through the public key that
will find its way into the certificate via the certificate-request).
You are now ready and can create your CAcert certified certificate.
Download and store or copy-and-paste it as
.Dq pub.crt .
.Pp
Yay.
In order to use your new S/MIME setup you will have to create
a combined private key/public key (certificate) file:
.Pp
.Dl cat key.pem pub.crt &gt; ME@HERE.com.paired
.Pp
This is the file \*(UA will work with.
If you have created your private key with a passphrase then \*(UA will
ask you for it whenever a message is signed or decrypted.
Set the following variables to henceforth use S/MIME (setting
.Va smime-ca-file
is of interest for verification only):
.Bd -literal -offset indent
set smime-ca-file=ALL-TRUSTED-ROOT-CERTS-HERE \e
smime-sign-cert=ME@HERE.com.paired \e
smime-sign-message-digest=SHA256 \e
smime-sign
.Ed
.Pp
From each signed message you send, the recipient can fetch your
certificate and use it to send encrypted mail back to you.
Accordingly if somebody sends you a signed message, you can do the same,
and use the
.Ic verify
command to check the validity of the certificate.
.Pp
Options of interest for S/MIME signing:
.Va smime-ca-dir ,
.Va smime-ca-file ,
.Va smime-crl-dir ,
.Va smime-crl-file ,
.Va smime-no-default-ca ,
.Va smime-sign ,
.Va smime-sign-cert ,
.Va smime-sign-include-certs
and
.Va smime-sign-message-digest .
.Pp
After it has been verified save the certificate via
.Ic certsave
and tell \*(UA that it should use it for encryption for further
communication with that somebody:
.Bd -literal -offset indent
certsave FILENAME
set smime-encrypt-USER@HOST=FILENAME \e
smime-cipher-USER@HOST=AES256
.Ed
.Pp
Additional options of interest for S/MIME en- and decryption:
.Va smime-cipher
and
.Va smime-encrypt-USER@HOST .
.Pp
You should carefully consider if you prefer to store encrypted messages
in decrypted form.
If you do, anybody who has access to your mail folders can read them,
but if you do not, you might be unable to read them yourself later if
you happen to lose your private key.
The
.Ic decrypt
command saves messages in decrypted form, while the
.Ic save , copy ,
and
.Ic move
commands leave them encrypted.
.Pp
Note that neither S/MIME signing nor encryption applies to message
subjects or other header fields yet.
Thus they may not contain sensitive information for encrypted messages,
and cannot be trusted even if the message content has been verified.
When sending signed messages,
it is recommended to repeat any important header information in the
message text.
.Ss "Using CRLs with S/MIME or SSL/TLS"
\*(OP Certification authorities (CAs) issue certificate revocation
lists (CRLs) on a regular basis.
These lists contain the serial numbers of certificates that have been
declared invalid after they have been issued.
Such usually happens because the private key for the certificate has
been compromised,
because the owner of the certificate has left the organization that is
mentioned in the certificate, etc.
To seriously use S/MIME or SSL/TLS verification,
an up-to-date CRL is required for each trusted CA.
There is otherwise no method to distinguish between valid and
invalidated certificates.
\*(UA currently offers no mechanism to fetch CRLs, nor to access them on
the Internet, so you have to retrieve them by some external mechanism.
.Pp
\*(UA accepts CRLs in PEM format only;
CRLs in DER format must be converted, like, e.\|g.:
.Pp
.Dl $ openssl crl \-inform DER \-in crl.der \-out crl.pem
.Pp
To tell \*(UA about the CRLs, a directory that contains all CRL files
(and no other files) must be created.
The
.Va smime-crl-dir
or
.Va ssl-crl-dir
variables, respectively, must then be set to point to that directory.
After that, \*(UA requires a CRL to be present for each CA that is used
to verify a certificate.
.Ss "Handling spam"
\*(OP \*(UA can make use of several spam interfaces for the purpose of
identification of, and, in general, dealing with spam messages.
A precondition of most commands in order to function is that the
.Va spam-interface
variable is set to one of the supported interfaces.
Once messages have been identified as spam their (volatile)
.Ql is-spam
state can be prompted: the
.Ql Ar :s
and
.Ql Ar :S
message specifications will address respective messages and their
.Va attrlist
entries will be used when displaying the
.Va headline
in the header display.
.Bl -bullet
.It
.Ic spamrate
rates the given messages and sets their
.Ql is-spam
flag accordingly.
If the spam interface offers spam scores those can also be displayed in
the header display by including the
.Ql %$
format in the
.Va headline
variable.
.It
.Ic spamham ,
.Ic spamspam
and
.Ic spamforget
will interact with the Bayesian filter of the chosen interface and learn
the given messages as
.Dq ham
or
.Dq spam ,
respectively; the last command can be used to cause
.Dq unlearning
of messages; it adheres to their current
.Ql is-spam
state and thus reverts previous teachings.
.It
.Ic spamclear
and
.Ic spamset
will simply set and clear, respectively, the mentioned volatile
.Ql is-spam
message flag, without any interface interaction.
.El
.Pp
The
.Xr spamassassin 1
based
.Va spam-interface Ns s
.Ql spamc
and
.Ql spamd
require a running instance of the
.Xr spamd 1
server in order to function, started with the option
.Fl -allow-tell
shall Bayesian filter learning be possible.
.Ql spamd
only works via a local path-based
.Xr unix 4
socket, but otherwise the following will be equivalently fine:
.Bd -literal -offset indent
$ spamd -i localhost:2142 -i /tmp/.spamsock -d [-L] [-l]
$ spamd --listen=localhost:2142 --listen=/tmp/.spamsock \e
--daemonize [--local] [--allow-tell]
.Ed
.Pp
Thereafter \*(UA can make use of these interfaces:
.Bd -literal -offset indent
$ \*(ua -Sspam-interface=spamd -Sspam-maxsize=500000 \e
-Sspamd-socket=/tmp/.spamsock -Sspamd-user=

$ \*(ua -Sspam-interface=spamc -Sspam-maxsize=500000 \e
-Sspamc-command=/usr/local/bin/spamc \e
-Sspamc-arguments="-U /tmp/.spamsock" -Sspamc-user=
or
$ \*(ua -Sspam-interface=spamc -Sspam-maxsize=500000 \e
-Sspamc-command=/usr/local/bin/spamc \e
-Sspamc-arguments="-d localhost -p 2142" -Sspamc-user=
.Ed
.Pp
Using the generic filter approach allows usage of programs like
.Xr bogofilter 1
and
.Xr sylfilter 1 .
Here is an example for the former, requiring it to be accessible via
.Ev PATH :
.Bd -literal -offset indent
$ \*(ua -Sspam-interface=filter -Sspam-maxsize=500000 \e
-Sspamfilter-ham="bogofilter -n" \e
-Sspamfilter-noham="bogofilter -N" \e
-Sspamfilter-nospam="bogofilter -S" \e
-Sspamfilter-rate="bogofilter -TTu 2&gt;/dev/null" \e
-Sspamfilter-spam="bogofilter -s" \e
-Sspamfilter-rate-scanscore="1;^(.+)$"
.Ed
.Pp
Because messages must exist on local storage in order to be scored (or
used for Bayesian filter training), it is possibly a good idea to
perform the local spam check last:
.Bd -literal -offset indent
define spamdelhook {
# Server side DCC
spamset (header x-dcc-brand-metrics "bulk")
# Server-side spamassassin(1)
spamset (header x-spam-flag "YES")
del :s # TODO we HAVE to be able to do `spamrate :u ! :sS'
move :S +maybe-spam
spamrate :u
del :s
move :S +maybe-spam
}
set folder-hook-FOLDER=spamdelhook
.Ed
.Pp
See also the documentation for the variables
.Va spam-interface , spam-maxsize ,
.Va spamc-command , spamc-arguments , spamc-user ,
.Va spamd-socket , spamd-user ,
.Va spamfilter-ham , spamfilter-noham , spamfilter-nospam , \
spamfilter-rate
and
.Va spamfilter-rate-scanscore .
.Sh "FAQ"
.Ss "\*(UA shortly hangs on startup"
This can have two reasons, one is the necessity to wait for a file lock
and can't be helped, the other being that \*(UA calls the function
.Xr uname 2
in order to query the nodename of the box (sometimes the real one is
needed instead of the one represented by the internal variable
.Va hostname ) .
You may have varying success by ensuring that the real hostname and
.Ql localhost
have entries in
.Pa /etc/hosts ,
or, more generally, that the name service is properly setup \(en
and does
.Xr hostname 1
return what you'd expect?
.Ss "I can't login to Google mail a.k.a. GMail"
Since 2014 some free service providers classify programs as
.Dq less secure
unless they use a special authentification method (OAuth 2.0) which
wasn't standardized for non-HTTP protocol authentication token query
until August 2015 (RFC 7628).
.Pp
Different to Kerberos / GSSAPI, which is developed since the mid of the
1980s, where a user can easily create a local authentication ticket for
her- and himself with the locally installed
.Xr kinit 1
program, that protocol has no such local part but instead requires
a world-wide-web query to create or fetch a token; since there is no
local cache this query has to be performed whenever \*(UA is invoked
from the command line (in interactive sessions situation may differ).
.Pp
\*(UA doesn't support OAuth.
Because of this it is necessary to declare \*(UA a
.Dq less secure app
(on the providers account web page) in order to read and send mail.
However, it also seems possible to take the following steps instead:
.Pp
.Bl -enum -compact
.It
give the provider the number of a mobile phone,
.It
enable
.Dq 2-Step Verification ,
.It
create an application specific password (16 characters), and
.It
use that special password instead of your real Google account password in
S-nail (for more on that see the section
.Sx "On URL syntax and credential lookup" ) .
.El
.Sh "SEE ALSO"
.Xr bogofilter 1 ,
.Xr bzip2 1 ,
.Xr file 1 ,
.Xr fmt 1 ,
.Xr gpg 1 ,
.Xr gpg-agent 1 ,
.Xr gzip 1 ,
.Xr less 1 ,
.Xr more 1 ,
.Xr newaliases 1 ,
.Xr openssl 1 ,
.Xr postfix 1 ,
.Xr printf 1 ,
.Xr sendmail 1 ,
.Xr sh 1 ,
.Xr spamassassin 1 ,
.Xr spamc 1 ,
.Xr spamd 1 ,
.Xr sylfilter 1 ,
.Xr vacation 1 ,
.Xr xterm 1 ,
.Xr xz 1 ,
.Xr editline 3 ,
.Xr iconv 3 ,
.Xr readline 3 ,
.Xr setlocale 3 ,
.Xr ssl 3 ,
.Xr aliases 5 ,
.Xr locale 7 ,
.Xr mailaddr 7 ,
.Xr re_format 7 ,
.Xr exim 8 ,
.Xr mailwrapper 8 ,
.Xr sendmail 8
.Sh HISTORY
A
.Em mail
command appeared in Version 1 AT&amp;T Unix.
Berkeley Mail was written in 1978 by Kurt Shoens.
This man page is derived from from
.Dq The Mail Reference Manual
originally written by Kurt Shoens.
.Dq Heirloom Mailx
enhancements are maintained and documented by Gunnar
Ritter.
.Dq S-nail
is maintained and documented by Steffen (Daode) Nurpmeso.
.Pp
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard for Information Technology
\(en Operating System Interface (POSIX), The Open Group Base
Specifications Issue 6, Copyright \(co 2001-2003 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
In the event of any discrepancy between this version and the original
IEEE and The Open Group Standard, the original IEEE and The Open Group
Standard is the referee document.
The original Standard can be obtained online at
.Lk http://www.opengroup.org/unix/online.html OpenGroup.org
Redistribution of this material is permitted so long as this notice
remains intact.
.Sh AUTHORS
.An "Kurt Shoens" ,
.An "Christos Zoulas" ,
.An "Gunnar Ritter" ,
.An "Steffen Nurpmeso" Aq Mt s-nail-users@lists.sourceforge.net
(later
.Mt s-mailx@sdaoden.eu ) .
.Sh CAVEATS
The character set conversion uses and relies upon the
.Xr iconv 3
function.
Its functionality differs widely between the various system environments
\*(UA runs on.
.Pp
Limitations with IMAP mailboxes are:
It is not possible to edit messages, but it is possible to append them.
Thus to edit a message, create a local copy of it, edit it, append it,
and delete the original.
The line count for the header display is only appropriate if the entire
message has been downloaded from the server.
The marking of messages as `new' is performed by the IMAP server;
use of the
.Ic exit
command instead of
.Ic quit
will not cause it to be reset, and if the
.Va newmail
variable is unset, messages that arrived during a session will not be
in state `new' anymore when the folder is opened again.
Also if commands queued in disconnected mode are committed,
the IMAP server will delete the `new' flag for all messages in the
changed folder,
and new messages will appear as unread when it is selected for viewing
later.
The `flagged', `answered', and `draft' attributes are usually permanent,
but some IMAP servers are known to drop them without notification.
Message numbers may change with IMAP every time before the prompt is
printed if \*(UA is notified by the server that messages have been
deleted by some other client or process.
In this case, `Expunged n messages' is printed, and message numbers may
have changed.
.Pp
Limitations with POP3 mailboxes are:
It is not possible to edit messages, they can only be copied and deleted.
The line count for the header display is only appropriate if the entire
message has been downloaded from the server.
The status field of a message is maintained by the server between
connections; some servers do not update it at all, and with a server
that does, the
.Ic exit
command will not cause the message status to be reset.
The
.Ic newmail
command and the
.Va newmail
variable have no effect.
It is not possible to rename or to remove POP3 mailboxes.
.Pp
If a
.Dq RUBOUT
(interrupt,
.Ql control-C )
is typed while an IMAP or POP3 operation is in progress, \*(UA will wait
until the operation can be safely aborted, and will then return to the
command loop and print the prompt again.
When a second
.Dq RUBOUT
is typed while \*(UA is waiting for the operation to complete, the
operation itself will be cancelled.
In this case, data that has not been fetched yet will have to be fetched
before the next command can be performed.
If the cancelled operation was using an SSL/TLS encrypted channel,
an error in the SSL transport will very likely result and render the
connection unusable.
.Pp
As \*(UA is a mail user agent, it provides only basic SMTP services.
If it fails to contact its upstream SMTP server, it will not make
further attempts to transfer the message at a later time,
and it does not leave other information about this condition than an
error message on the terminal and an entry in
.Ev DEAD .
This is usually not a problem if the SMTP server is located in the same
local network as the computer on which \*(UA is run.
However, care should be taken when using a remote server of an ISP;
it might be better to set up a local SMTP server then which just acts as
a proxy.
.Pp
\*(UA immediately contacts the SMTP server (or
.Xr sendmail 1 Ns
) even when operating in
.Va disconnected
mode.
It would not make much sense for \*(UA to defer outgoing mail since SMTP
servers usually provide much more elaborated delay handling than \*(UA
could perform as a client.
Thus the recommended setup for sending mail in
.Va disconnected
mode is to configure a local SMTP server such that it sends outgoing
mail as soon as an external network connection is available again,
i.e., to advise it to do that from a network startup script.
.Sh BUGS
IMAP support is very basic.
Interrupting an IMAP operation can lead to endless iterations of the
same operation.
With IMAP, at least if the IMAP cache is used, if multiple
.Ic connect
and
.Ic disconnect
cycles happen without an intervening change of the active mailbox then
\*(UA will at some time loose the ability to keep the local state
up-to-date, meaning that, e.g., messages show up with false numbers, and
including the possibility that messages are accessed via numbers that
are no(t longer) valid, resulting in program crashes.
The solution is to change the active mailbox before that happens :).
Also see the file
.Pa TODO
from the distribution or the repository.
After deleting some message of a POP3 mailbox the header summary falsely
claims that there are no messages to display, you need to perform
a scroll or dot movement to restore proper state.
In threaded display a power user may encounter crashes very
occasionally (this is may and very).
.TH MAKE 1 "28 February 2016" "GNU" "User Commands"
.SH NAME
make \- GNU make utility to maintain groups of programs
.SH SYNOPSIS
.B make
[\fIOPTION\fR]... [\fITARGET\fR]...
.SH DESCRIPTION
.LP
The
.I make
utility will determine automatically which pieces of a large program need to
be recompiled, and issue the commands to recompile them.  The manual describes
the GNU implementation of
.BR make ,
which was written by Richard Stallman and Roland McGrath, and is currently
maintained by Paul Smith.  Our examples show C programs, since they are very
common, but you can use
.B make
with any programming language whose compiler can be run with a shell command.
In fact,
.B make
is not limited to programs.  You can use it to describe any task where some
files must be updated automatically from others whenever the others change.
.LP
To prepare to use
.BR make ,
you must write a file called the
.I makefile
that describes the relationships among files in your program, and the states
the commands for updating each file.  In a program, typically the executable
file is updated from object files, which are in turn made by compiling source
files.
.LP
Once a suitable makefile exists, each time you change some source files,
this simple shell command:
.sp 1
.RS
.B make
.RE
.sp 1
suffices to perform all necessary recompilations.
The
.B make
program uses the makefile description and the last-modification times of the
files to decide which of the files need to be updated.  For each of those
files, it issues the commands recorded in the makefile.
.LP
.B make
executes commands in the
.I makefile
to update one or more target
.IR names ,
where
.I name
is typically a program.
If no
.B \-f
option is present,
.B make
will look for the makefiles
.IR GNUmakefile ,
.IR makefile ,
and
.IR Makefile ,
in that order.
.LP
Normally you should call your makefile either
.I makefile
or
.IR Makefile .
(We recommend
.I Makefile
because it appears prominently near the beginning of a directory
listing, right near other important files such as
.IR  README .)
The first name checked,
.IR GNUmakefile ,
is not recommended for most makefiles.  You should use this name if you have a
makefile that is specific to GNU
.BR make ,
and will not be understood by other versions of
.BR make .
If
.I makefile
is '\-', the standard input is read.
.LP
.B make
updates a target if it depends on prerequisite files
that have been modified since the target was last modified,
or if the target does not exist.
.SH OPTIONS
.sp 1
.TP 0.5i
\fB\-b\fR, \fB\-m\fR
These options are ignored for compatibility with other versions of
.BR make .
.TP 0.5i
\fB\-B\fR, \fB\-\-always\-make\fR
Unconditionally make all targets.
.TP 0.5i
\fB\-C\fR \fIdir\fR, \fB\-\-directory\fR=\fIdir\fR
Change to directory
.I dir
before reading the makefiles or doing anything else.
If multiple
.B \-C
options are specified, each is interpreted relative to the
previous one:
.BR "\-C " /
.BR "\-C " etc
is equivalent to
.BR "\-C " /etc.
This is typically used with recursive invocations of
.BR make .
.TP 0.5i
.B \-d
Print debugging information in addition to normal processing.
The debugging information says which files are being considered for
remaking, which file-times are being compared and with what results,
which files actually need to be remade, which implicit rules are
considered and which are applied---everything interesting about how
.B make
decides what to do.
.TP 0.5i
.BI \-\-debug "[=FLAGS]"
Print debugging information in addition to normal processing.
If the
.I FLAGS
are omitted, then the behavior is the same as if
.B \-d
was specified.
.I FLAGS
may be
.I a
for all debugging output (same as using
.BR \-d ),
.I b
for basic debugging,
.I v
for more verbose basic debugging,
.I i
for showing implicit rules,
.I j
for details on invocation of commands, and
.I m
for debugging while remaking makefiles.  Use
.I n
to disable all previous debugging flags.
.TP 0.5i
\fB\-e\fR, \fB\-\-environment\-overrides\fR
Give variables taken from the environment precedence
over variables from makefiles.
.TP 0.5i
\fB\-f\fR \fIfile\fR, \fB\-\-file\fR=\fIfile\fR, \fB\-\-makefile\fR=\fIFILE\fR
Use
.I file
as a makefile.
.TP 0.5i
\fB\-i\fR, \fB\-\-ignore\-errors\fR
Ignore all errors in commands executed to remake files.
.TP 0.5i
\fB\-I\fR \fIdir\fR, \fB\-\-include\-dir\fR=\fIdir\fR
Specifies a directory
.I dir
to search for included makefiles.
If several
.B \-I
options are used to specify several directories, the directories are
searched in the order specified.
Unlike the arguments to other flags of
.BR make ,
directories given with
.B \-I
flags may come directly after the flag:
.BI \-I dir
is allowed, as well as
.B \-I
.IR dir .
This syntax is allowed for compatibility with the C
preprocessor's
.B \-I
flag.
.TP 0.5i
\fB\-j\fR [\fIjobs\fR], \fB\-\-jobs\fR[=\fIjobs\fR]
Specifies the number of
.I jobs
(commands) to run simultaneously.
If there is more than one
.B \-j
option, the last one is effective.
If the
.B \-j
option is given without an argument,
.BR make
will not limit the number of jobs that can run simultaneously.
.TP 0.5i
\fB\-k\fR, \fB\-\-keep\-going\fR
Continue as much as possible after an error.
While the target that failed, and those that depend on it, cannot
be remade, the other dependencies of these targets can be processed
all the same.
.TP 0.5i
\fB\-l\fR [\fIload\fR], \fB\-\-load\-average\fR[=\fIload\fR]
Specifies that no new jobs (commands) should be started if there are
others jobs running and the load average is at least
.I load
(a floating-point number).
With no argument, removes a previous load limit.
.TP 0.5i
\fB\-L\fR, \fB\-\-check\-symlink\-times\fR
Use the latest mtime between symlinks and target.
.TP 0.5i
\fB\-n\fR, \fB\-\-just\-print\fR, \fB\-\-dry\-run\fR, \fB\-\-recon\fR
Print the commands that would be executed, but do not execute them (except in
certain circumstances).
.TP 0.5i
\fB\-o\fR \fIfile\fR, \fB\-\-old\-file\fR=\fIfile\fR, \fB\-\-assume\-old\fR=\fIfile\fR
Do not remake the file
.I file
even if it is older than its dependencies, and do not remake anything
on account of changes in
.IR file .
Essentially the file is treated as very old and its rules are ignored.
.TP 0.5i
\fB\-O\fR[\fItype\fR], \fB\-\-output\-sync\fR[=\fItype\fR]
When running multiple jobs in parallel with \fB-j\fR, ensure the output of
each job is collected together rather than interspersed with output from
other jobs.  If
.I type
is not specified or is
.B target
the output from the entire recipe for each target is grouped together.  If
.I type
is
.B line
the output from each command line within a recipe is grouped together.
If
.I type
is
.B recurse
output from an entire recursive make is grouped together.  If
.I type
is
.B none
output synchronization is disabled.
.TP 0.5i
\fB\-p\fR, \fB\-\-print\-data\-base\fR
Print the data base (rules and variable values) that results from
reading the makefiles; then execute as usual or as otherwise
specified.
This also prints the version information given by the
.B \-v
switch (see below).
To print the data base without trying to remake any files, use
.IR "make \-p \-f/dev/null" .
.TP 0.5i
\fB\-q\fR, \fB\-\-question\fR
``Question mode''.
Do not run any commands, or print anything; just return an exit status
that is zero if the specified targets are already up to date, nonzero
otherwise.
.TP 0.5i
\fB\-r\fR, \fB\-\-no\-builtin\-rules\fR
Eliminate use of the built\-in implicit rules.
Also clear out the default list of suffixes for suffix rules.
.TP 0.5i
\fB\-R\fR, \fB\-\-no\-builtin\-variables\fR
Don't define any built\-in variables.
.TP 0.5i
\fB\-s\fR, \fB\-\-silent\fR, \fB\-\-quiet\fR
Silent operation; do not print the commands as they are executed.
.TP 0.5i
\fB\-S\fR, \fB\-\-no\-keep\-going\fR, \fB\-\-stop\fR
Cancel the effect of the
.B \-k
option.
This is never necessary except in a recursive
.B make
where
.B \-k
might be inherited from the top-level
.B make
via MAKEFLAGS or if you set
.B \-k
in MAKEFLAGS in your environment.
.TP 0.5i
\fB\-t\fR, \fB\-\-touch\fR
Touch files (mark them up to date without really changing them)
instead of running their commands.
This is used to pretend that the commands were done, in order to fool
future invocations of
.BR make .
.TP 0.5i
.B \-\-trace
Information about the disposition of each target is printed (why the target is
being rebuilt and what commands are run to rebuild it).
.TP 0.5i
\fB\-v\fR, \fB\-\-version\fR
Print the version of the
.B make
program plus a copyright, a list of authors and a notice that there
is no warranty.
.TP 0.5i
\fB\-w\fR, \fB\-\-print\-directory\fR
Print a message containing the working directory
before and after other processing.
This may be useful for tracking down errors from complicated nests of
recursive
.B make
commands.
.TP 0.5i
.B \-\-no\-print\-directory
Turn off
.BR \-w ,
even if it was turned on implicitly.
.TP 0.5i
\fB\-W\fR \fIfile\fR, \fB\-\-what\-if\fR=\fIfile\fR, \fB\-\-new\-file\fR=\fIfile\fR, \fB\-\-assume\-new\fR=\fIfile\fR
Pretend that the target
.I file
has just been modified.
When used with the
.B \-n
flag, this shows you what would happen if you were to modify that file.
Without
.BR \-n ,
it is almost the same as running a
.I touch
command on the given file before running
.BR make ,
except that the modification time is changed only in the imagination of
.BR make .
.TP 0.5i
.B \-\-warn\-undefined\-variables
Warn when an undefined variable is referenced.
.SH "EXIT STATUS"
GNU
.B make
exits with a status of zero if all makefiles were successfully parsed
and no targets that were built failed.  A status of one will be returned
if the
.B \-q
flag was used and
.B make
determines that a target needs to be rebuilt.  A status of two will be
returned if any errors were encountered.
.SH "SEE ALSO"
The full documentation for
.B make
is maintained as a Texinfo manual.  If the
.B info
and
.B make
programs are properly installed at your site, the command
.IP
.B info make
.PP
should give you access to the complete manual.
.SH BUGS
See the chapter ``Problems and Bugs'' in
.IR "The GNU Make Manual" .
.SH AUTHOR
This manual page contributed by Dennis Morse of Stanford University.
Further updates contributed by Mike Frysinger.  It has been reworked by Roland
McGrath.  Maintained by Paul Smith.
.SH "COPYRIGHT"
Copyright \(co 1992-1993, 1996-2016 Free Software Foundation, Inc.
This file is part of
.IR "GNU make" .
.LP
GNU Make is free software; you can redistribute it and/or modify it under the
terms of the GNU General Public License as published by the Free Software
Foundation; either version 3 of the License, or (at your option) any later
version.
.LP
GNU Make is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
.LP
You should have received a copy of the GNU General Public License along with
this program.  If not, see
.IR http://www.gnu.org/licenses/ .
'\" t
.\" ** The above line should force tbl to be a preprocessor **
.\" Man page for man
.\"
.\" Copyright (C) 1994, 1995, Graeme W. Wilford. (Wilf.)
.\" Copyright (C) 2001, 2002, 2003, 2006, 2007, 2008 Colin Watson.
.\"
.\" You may distribute under the terms of the GNU General Public
.\" License as specified in the file COPYING that comes with the
.\" man-db distribution.
.\"
.\" Sat Oct 29 13:09:31 GMT 1994  Wilf. (G.Wilford@ee.surrey.ac.uk)
.\"
.pc
.TH MAN 1 "2016-12-12" "2.7.6.1" "Manual pager utils"
.SH NAME
man \- an interface to the on-line reference manuals
.SH SYNOPSIS
.\" The general command line
.B man
.RB [\| \-C
.IR file \|]
.RB [\| \-d \|]
.RB [\| \-D \|]
.RB [\| \-\-warnings \|\c
.RI [\|= warnings \|]\|]
.RB [\| \-R
.IR encoding \|]
.RB [\| \-L
.IR locale \|]
.RB [\| \-m
.IR system \|[\|,.\|.\|.\|]\|]
.RB [\| \-M
.IR path \|]
.RB [\| \-S
.IR list \|]
.RB [\| \-e
.IR extension \|]
.RB [\| \-i \||\| \-I \|]
.RB [\| \-\-regex \||\| \-\-wildcard \|]
.RB [\| \-\-names\-only \|]
.RB [\| \-a \|]
.RB [\| \-u \|]
.RB [\| \-\-no\-subpages \|]
.RB [\| \-P
.IR pager \|]
.RB [\| \-r
.IR prompt \|]
.RB [\| \-7 \|]
.RB [\| \-E
.IR encoding \|]
.RB [\| \-\-no\-hyphenation \|]
.RB [\| \-\-no\-justification \|]
.RB [\| \-p
.IR string \|]
.RB [\| \-t \|]
.RB [\| \-T \|\c
.RI [\| device \|]\|]
.RB [\| \-H \|\c
.RI [\| browser \|]\|]
.RB [\| \-X \|\c
.RI [\| dpi \|]\|]
.RB [\| \-Z \|]
.RI [\|[\| section \|]
.IR page [.\| section \|]\ \|.\|.\|.\|]\ \.\|.\|.\&amp;
.\" The apropos command line
.br
.B man
.B \-k
.RI [\| apropos
.IR options \|]
.I regexp
\&amp;.\|.\|.\&amp;
.\" The --global-apropos command line
.br
.B man
.B \-K
.RB [\| \-w \||\| \-W \|]
.RB [\| \-S
.IR list \|]
.RB [\| \-i \||\| \-I \|]
.RB [\| \-\-regex \|]
.RI [\| section \|]
.IR term \ .\|.\|.\&amp;
.\" The whatis command line
.br
.B man
.B \-f
.RI [\| whatis
.IR options \|]
.I page
\&amp;.\|.\|.\&amp;
.\" The --local command line
.br
.B man
.B \-l
.RB [\| \-C
.IR file \|]
.RB [\| \-d \|]
.RB [\| \-D \|]
.RB [\| \-\-warnings \|\c
.RI [\|= warnings \|]\|]
.RB [\| \-R
.IR encoding \|]
.RB [\| \-L
.IR locale \|]
.RB [\| \-P
.IR pager \|]
.RB [\| \-r
.IR prompt \|]
.RB [\| \-7 \|]
.RB [\| \-E
.IR encoding \|]
.RB [\| \-p
.IR string \|]
.RB [\| \-t \|]
.RB [\| \-T \|\c
.RI [\| device \|]\|]
.RB [\| \-H \|\c
.RI [\| browser \|]\|]
.RB [\| \-X \|\c
.RI [\| dpi \|]\|]
.RB [\| \-Z \|]
.I file
\&amp;.\|.\|.\&amp;
.\" The --where/--where-cat command line
.br
.B man
.BR \-w \||\| \-W
.RB [\| \-C
.IR file \|]
.RB [\| \-d \|]
.RB [\| \-D \|]
.I page
\&amp;.\|.\|.\&amp;
.\" The --catman command line
.br
.B man
.B \-c
.RB [\| \-C
.IR file \|]
.RB [\| \-d \|]
.RB [\| \-D \|]
.I page
\&amp;.\|.\|.\&amp;
.\" --help and --version
.br
.B man
.RB [\| \-?V \|]
.SH DESCRIPTION
.B man
is the system's manual pager.
Each
.I page
argument given to
.B man
is normally the name of a program, utility or function.
The
.I manual page
associated with each of these arguments is then found and displayed.
A
.IR section ,
if provided, will direct
.B man
to look only in that
.I section
of the manual.
The default action is to search in all of the available
.IR sections
following a pre-defined order ("1 n l 8 3 0 2 5 4 9 6 7" by default, unless overridden by
the
.B SECTION
directive in 
.IR /etc/man_db.conf ),
and to show only the first
.I page
found, even if
.I page
exists in several
.IR sections .

The table below shows the
.I section
numbers of the manual followed by the types of pages they contain.

.TS
tab (@);
l lx.
1@T{
Executable programs or shell commands
T}
2@T{
System calls (functions provided by the kernel)
T}
3@T{
Library calls (functions within program libraries)
T}
4@T{
Special files (usually found in \fI/dev\/\fR)
T}
5@T{
File formats and conventions eg \fI/etc/passwd\fR
T}
6@T{
Games
T}
7@T{
Miscellaneous (including macro packages and conventions),
e.g.\&amp; \fBman\fR(7), \fBgroff\fR(7)
T}
8@T{
System administration commands (usually only for root)
T}
9@T{
Kernel routines [\|Non standard\|]
T}
.TE

A manual
.I page
consists of several sections.

Conventional section names include
.BR NAME ,
.BR SYNOPSIS ,
.BR CONFIGURATION ,
.BR DESCRIPTION ,
.BR OPTIONS ,
.BR EXIT\ STATUS ,
.BR RETURN\ VALUE ,
.BR ERRORS ,
.BR ENVIRONMENT ,
.BR FILES ,
.BR VERSIONS ,
.BR CONFORMING\ TO ,
.BR NOTES ,
.BR BUGS ,
.BR EXAMPLE ,
.BR AUTHORS ,
and
.BR SEE\ ALSO .

The following conventions apply to the
.B SYNOPSIS
section and can be used as a guide in other sections.

.TS
tab (@);
l lx.
\fBbold text\fR@T{
type exactly as shown.
T}
\fIitalic text\fR@T{
replace with appropriate argument.
T}
[\|\fB\-abc\fR\|]@T{
any or all arguments within [ ] are optional.
T}
\fB\-a\|\fR|\|\fB\-b\fR@T{
options delimited by | cannot be used together.
T}
\fIargument\fR .\|.\|.@T{
\fIargument\fR is repeatable.
T}
[\|\fIexpression\fR\|]\fR .\|.\|.@T{
\fRentire \fIexpression\fR\ within [ ] is repeatable.
T}
.TE

Exact rendering may vary depending on the output device.
For instance, man will usually not be able to render italics when running in
a terminal, and will typically use underlined or coloured text instead.

The command or function illustration is a pattern that should match all
possible invocations.
In some cases it is advisable to illustrate several exclusive invocations
as is shown in the
.B SYNOPSIS
section of this manual page.
.SH EXAMPLES
.TP \w'man\ 'u
.BI man \ ls
Display the manual page for the
.I item
(program)
.IR ls .
.TP
\fBman \fIman\fR.\fI7
Display the manual page for macro package
.I man
from section \fI7\fR.
.TP
.BI man\ \-a \ intro
Display, in succession, all of the available
.I intro
manual pages contained within the manual.
It is possible to quit between successive displays or skip any of them.
.TP
\fBman \-t \fIalias \fR|\fI lpr \-Pps
Format the manual page referenced by
.RI ` alias ',
usually a shell manual page, into the default
.B troff
or
.B groff
format and pipe it to the printer named
.IR ps .
The default output for
.B groff
is usually PostScript.
.B man \-\-help
should advise as to which processor is bound to the
.B \-t
option.
.TP
.BI "man \-l \-T" "dvi ./foo.1x.gz" " &gt; " ./foo.1x.dvi
This command will decompress and format the nroff source manual page
.I ./foo.1x.gz
into a
.B device independent (dvi)
file.
The redirection is necessary as the
.B \-T
flag causes output to be directed to
.B stdout
with no pager.
The output could be viewed with a program such as
.B xdvi
or further processed into PostScript using a program such as
.BR dvips.
.TP
.BI man\ \-k \ printf
Search the short descriptions and manual page names for the keyword
.I printf
as regular expression.
Print out any matches.
Equivalent to
.BI apropos \ printf .
.TP
.BI man\ \-f \ smail
Lookup the manual pages referenced by
.I smail
and print out the short descriptions of any found.
Equivalent to
.BI whatis \ smail .
.SH OVERVIEW
Many options are available to
.B man
in order to give as much flexibility as possible to the user.
Changes can be made to the search path, section order, output processor,
and other behaviours and operations detailed below.

If set, various environment variables are interrogated to determine
the operation of
.BR man .
It is possible to set the `catch all' variable
.RB $ MANOPT
to any string in command line format with the exception that any spaces
used as part of an option's argument must be escaped (preceded by a
backslash).
.B man
will parse
.RB $ MANOPT
prior to parsing its own command line.
Those options requiring an argument will be overridden by the same options
found on the command line.
To reset all of the options set in
.RB $ MANOPT ,
.B \-D
can be specified as the initial command line option.
This will allow man to `forget' about the options specified in
.RB $ MANOPT
although they must still have been valid.

The manual pager utilities packaged as
.B man-db
make extensive use of
.B index
database caches.
These caches contain information such as where each manual page can be
found on the filesystem and what its
.I whatis
(short one line description of the man page) contains, and allow
.B man
to run faster than if it had to search the filesystem each time to find the
appropriate manual page.
If requested using the
.B \-u
option,
.B man
will ensure that the caches remain consistent, which can obviate the
need to manually run software to update traditional
.I whatis
text databases.

If
.B man
cannot find a
.B mandb
initiated
.B index
database for a particular manual page hierarchy, it will still search for
the requested manual pages, although file globbing will be necessary to
search within that hierarchy.
If
.B whatis
or
.B apropos
fails to find an
.B index
it will try to extract information from a traditional
.I whatis
database instead.
.\"`User' manual page hierarchies will have
.\".B index
.\"caches created `on the fly'.

These utilities support compressed source nroff files having, by default, the
extensions of
.BR .Z ", " .z " and " .gz .
It is possible to deal with any compression extension, but this information
must be known at compile time.
Also, by default, any cat pages produced are compressed using
.BR gzip .
Each `global' manual page hierarchy such as
.I /usr/share/man
or
.I /usr/X11R6/man
may have any directory as its cat page hierarchy.
Traditionally the cat pages are stored under the same hierarchy as the man
pages, but for reasons such as those specified in the
.BR "File Hierarchy Standard (FHS)" ,
it may be better to store them elsewhere.
For details on how to do this, please read
.BR manpath (5).
For details on why to do this, read the standard.

International support is available with this package.
Native language manual pages are accessible (if available on your system)
via use of
.I locale
functions.
To activate such support, it is necessary to set either
.RB $ LC_MESSAGES ,
.RB $ LANG
or another system dependent environment variable to your language locale,
usually specified in the
.B POSIX 1003.1
based format:

.\"
.\" Need a \c to make sure we don't get a space where we don't want one
.\"
.RI &lt; language &gt;[\|\c
.B _\c
.RI &lt; territory &gt;\|[\|\c
.B .\c
.RI &lt; character-set &gt;\|[\|\c
.B ,\c
.RI &lt; version &gt;\|]\|]\|]

If the desired page is available in your
.IR locale ,
it will be displayed in lieu of the standard
(usually American English) page.

Support for international message catalogues is also featured in this
package and can be activated in the same way, again if available.
If you find that the manual pages and message catalogues supplied with this
package are not available in your native language and you would like to
supply them, please contact the maintainer who will be coordinating such
activity.

For information regarding other features and extensions available with this
manual pager, please read the documents supplied with the package.
.SH DEFAULTS
.B man
will search for the desired manual pages within the
.I index
database caches. If the
.B \-u
option is given, a cache consistency check is performed to ensure the
databases accurately reflect the filesystem.
If this option is always given, it is not generally necessary to run
.B mandb
after the caches are initially created, unless a cache becomes corrupt.
However, the cache consistency check can be slow on systems with many
manual pages installed, so it is not performed by default, and system
administrators may wish to run
.B mandb
every week or so to keep the database caches fresh.
To forestall problems caused by outdated caches,
.B man
will fall back to file globbing if a cache lookup fails, just as it would
if no cache was present.

Once a manual page has been located, a check is performed to find out if a
relative preformatted `cat' file already exists and is newer than the nroff
file.
If it does and is, this preformatted file is (usually) decompressed and then
displayed, via use of a pager.
The pager can be specified in a number of ways, or else will fall back to a
default is used (see option
.B \-P
for details).
If no cat is found or is older than the nroff file, the nroff is filtered
through various programs and is shown immediately.

If a cat file can be produced (a relative cat directory exists and has
appropriate permissions),
.B man
will compress and store the cat file in the background.

The filters are deciphered by a number of means.
Firstly, the command line option
.B \-p
or the environment variable
.RB $ MANROFFSEQ
is interrogated.
If
.B \-p
was not used and the environment variable was not set, the initial line of
the nroff file is parsed for a preprocessor string.
To contain a valid preprocessor string, the first line must resemble

.B '\e"
.RB &lt; string &gt;

where
.B string
can be any combination of letters described by option
.B \-p
below.

If none of the above methods provide any filter information, a default set
is used.

A formatting pipeline is formed from the filters and the primary
formatter
.RB ( nroff
or
.RB [ tg ] roff
with
.BR \-t )
and executed.
Alternatively, if an executable program
.I mandb_nfmt
(or
.I mandb_tfmt
with
.BR \-t )
exists in the man tree root, it is executed instead.
It gets passed the manual source file, the preprocessor string, and
optionally the device specified with
.BR \-T " or " \-E
as arguments.
.\" ********************************************************************
.SH OPTIONS
Non argument options that are duplicated either on the command line, in
.RB $ MANOPT ,
or both, are not harmful.
For options that require an argument, each duplication will override the
previous argument value.
.SS "General options"
.TP
.BI \-C\  file \fR,\ \fB\-\-config\-file= file
Use this user configuration file rather than the default of
.IR ~/.manpath .
.TP
.BR \-d ", " \-\-debug
Print debugging information.
.TP
.BR \-D ", " \-\-default
This option is normally issued as the very first option and resets
.B man's
behaviour to its default.
Its use is to reset those options that may have been set in
.RB $ MANOPT .
Any options that follow
.B \-D
will have their usual effect.
.TP
\fB\-\-warnings\fP[=\fIwarnings\/\fP]
Enable warnings from
.IR groff .
This may be used to perform sanity checks on the source text of manual
pages.
.I warnings
is a comma-separated list of warning names; if it is not supplied, the
default is "mac".
See the \(lqWarnings\(rq node in
.B info groff
for a list of available warning names.
.SS "Main modes of operation"
.TP
.BR \-f ", " \-\-whatis
Equivalent to
.BR whatis .
Display a short description from the manual page, if available.
See
.BR whatis (1)
for details.
.TP
.BR \-k ", " \-\-apropos
Equivalent to
.BR apropos .
Search the short manual page descriptions for keywords and display any
matches.
See
.BR apropos (1)
for details.
.TP
.BR \-K ", " \-\-global\-apropos
Search for text in all manual pages.
This is a brute-force search, and is likely to take some time; if you can,
you should specify a section to reduce the number of pages that need to be
searched.
Search terms may be simple strings (the default), or regular expressions if
the
.B \-\-regex
option is used.
.IP
Note that this searches the
.I sources
of the manual pages, not the rendered text, and so may include false
positives due to things like comments in source files.
Searching the rendered text would be much slower.
.TP
.BR \-l ", " \-\-local\-file
Activate `local' mode.
Format and display local manual files instead of searching through the
system's manual collection.
Each manual page argument will be interpreted as an nroff source file in the
correct format.
.\" Compressed nroff source files with a supported compression
.\" extension will be decompressed by man prior to being displaying via the
.\" usual filters.
No cat file is produced.
If '\-' is listed as one of the arguments, input will be taken from stdin.
When this option is not used, and man fails to find the page required,
before displaying the error message, it attempts to act as if this
option was supplied, using the name as a filename and looking for an
exact match.
.TP
.BR \-w ", " \-\-where ", " \-\-path ", " \-\-location
Don't actually display the manual pages, but do print the location(s) of
the source nroff files that would be formatted.
.TP
.BR \-W ", " \-\-where\-cat ", " \-\-location\-cat
Don't actually display the manual pages, but do print the location(s) of
the cat files that would be displayed.
If \-w and \-W are both specified, print both separated by a space.
.TP
.BR \-c ", " \-\-catman
This option is not for general use and should only be used by the
.B catman
program.
.TP
.BI \-R\  encoding\fR,\ \fI \-\-recode\fR=\fIencoding
Instead of formatting the manual page in the usual way, output its source
converted to the specified
.IR encoding .
If you already know the encoding of the source file, you can also use
.BR manconv (1)
directly.
However, this option allows you to convert several manual pages to a single
encoding without having to explicitly state the encoding of each, provided
that they were already installed in a structure similar to a manual page
hierarchy.
.SS "Finding manual pages"
.TP
.BI \-L\  locale \fR,\ \fB\-\-locale= locale
.B man
will normally determine your current locale by a call to the C function
.BR setlocale (3)
which interrogates various environment variables, possibly including
.RB $ LC_MESSAGES
and
.RB $ LANG .
To temporarily override the determined value, use this option to supply a
.I locale
string directly to
.BR man .
Note that it will not take effect until the search for pages actually
begins.
Output such as the help message will always be displayed in the initially
determined locale.
.\"
.\" Due to the rather silly limit of 6 args per request in some `native'
.\" *roff compilers, we have do the following to get the two-line
.\" hanging tag on one line. .PP to begin a new paragraph, then the
.\" tag, then .RS (start relative indent), the text, finally .RE
.\" (end relative indent).
.\"
.PP
.B \-m
.I system\c
\|[\|,.\|.\|.\|]\|,
.BI \-\-systems= system\c
\|[\|,.\|.\|.\|]
.RS
If this system has access to other operating system's manual pages, they can
be accessed using this option.
To search for a manual page from NewOS's manual page collection,
use the option
.B \-m
.BR NewOS .

The
.I system
specified can be a combination of comma delimited operating system names.
To include a search of the native operating system's manual pages,
include the system name
.B man
in the argument string.
This option will override the
.RB $ SYSTEM
environment variable.
.RE
.TP
.BI \-M\  path \fR,\ \fB\-\-manpath= path
Specify an alternate manpath to use.
By default,
.B man
uses
.B manpath
derived code to determine the path to search.
This option overrides the
.RB $ MANPATH
environment variable and causes option
.B \-m
to be ignored.

A path specified as a manpath must be the root of a manual page hierarchy
structured into sections as described in the man-db manual (under "The
manual page system").
To view manual pages outside such hierarchies, see the
.B \-l
option.
.TP
.BI \-S\  list \fR,\ \fB\-s\  list \fR,\ \fB\-\-sections= list
List is a colon- or comma-separated list of `order specific' manual sections
to search.
This option overrides the
.RB $ MANSECT
environment variable.
(The
.B \-s
spelling is for compatibility with System V.)
.TP
.BI \-e\  sub-extension \fR,\ \fB\-\-extension= sub-extension
Some systems incorporate large packages of manual pages, such as those that
accompany the
.B Tcl
package, into the main manual page hierarchy.
To get around the problem of having two manual pages with the same name
such as
.BR exit (3),
the
.B Tcl
pages were usually all assigned to section
.BR l .
As this is unfortunate, it is now possible to put the pages in the correct
section, and to assign a specific `extension' to them, in this case,
.BR exit (3tcl).
Under normal operation,
.B man
will display
.BR exit (3)
in preference to
.BR exit (3tcl).
To negotiate this situation and to avoid having to know which section the
page you require resides in, it is now possible to give
.B man
a
.I sub-extension
string indicating which package the page must belong to.
Using the above example, supplying the option
.B \-e\ tcl
to
.B man
will restrict the search to pages having an extension of
.BR *tcl .
.TP
.BR \-i ", " \-\-ignore\-case
Ignore case when searching for manual pages.
This is the default.
.TP
.BR \-I ", " \-\-match\-case
Search for manual pages case-sensitively.
.TP
.B \-\-regex
Show all pages with any part of either their names or their descriptions
matching each
.I page
argument as a regular expression, as with
.BR apropos (1).
Since there is usually no reasonable way to pick a "best" page when
searching for a regular expression, this option implies
.BR \-a .
.TP
.B \-\-wildcard
Show all pages with any part of either their names or their descriptions
matching each
.I page
argument using shell-style wildcards, as with
.BR apropos (1)
.BR \-\-wildcard .
The
.I page
argument must match the entire name or description, or match on word
boundaries in the description.
Since there is usually no reasonable way to pick a "best" page when
searching for a wildcard, this option implies
.BR \-a .
.TP
.B \-\-names\-only
If the
.B \-\-regex
or
.B \-\-wildcard
option is used, match only page names, not page descriptions, as with
.BR whatis (1).
Otherwise, no effect.
.TP
.BR \-a ", " \-\-all
By default,
.B man
will exit after displaying the most suitable manual page it finds.
Using this option forces
.B man
to display all the manual pages with names that match the search criteria.
.TP
.BR \-u ", " \-\-update
This option causes
.B man
to perform an `inode level' consistency check on its database caches to
ensure that they are an accurate representation of the filesystem.
It will only have a useful effect if
.B man
is installed with the setuid bit set.
.TP
.B \-\-no\-subpages
By default,
.B man
will try to interpret pairs of manual page names given on the command line
as equivalent to a single manual page name containing a hyphen or an
underscore.
This supports the common pattern of programs that implement a number of
subcommands, allowing them to provide manual pages for each that can be
accessed using similar syntax as would be used to invoke the subcommands
themselves.
For example:

.nf
\&amp;  $ man \-aw git diff
\&amp;  /usr/share/man/man1/git\-diff.1.gz
.fi

To disable this behaviour, use the
.B \-\-no\-subpages
option.

.nf
\&amp;  $ man \-aw \-\-no\-subpages git diff
\&amp;  /usr/share/man/man1/git.1.gz
\&amp;  /usr/share/man/man3/Git.3pm.gz
\&amp;  /usr/share/man/man1/diff.1.gz
.fi
.SS "Controlling formatted output"
.TP
.BI \-P\  pager \fR,\ \fB\-\-pager= pager
Specify which output pager to use.
By default,
.B man
uses
.BR "less" .
This option overrides the
.RB $ MANPAGER
environment variable, which in turn overrides the
.RB $ PAGER
environment variable.
It is not used in conjunction with
.B \-f
or
.BR \-k .

The value may be a simple command name or a command with arguments, and may
use shell quoting (backslashes, single quotes, or double quotes).
It may not use pipes to connect multiple commands; if you need that, use a
wrapper script, which may take the file to display either as an argument or
on standard input.
.TP
.BI \-r\  prompt \fR,\ \fB\-\-prompt= prompt
If a recent version of
.B less
is used as the pager,
.B man
will attempt to set its prompt and some sensible options.
The default prompt looks like

.B \ Manual page\c
.IB \ name ( sec )\c
.BI \ line \ x

where
.I name
denotes the manual page name,
.I sec
denotes the section it was found under and
.IR x
the current line number.
.\"The default options are
.\".BR \-six8 .
This is achieved by using the
.RB $ LESS
environment variable.
.\"The actual default will depend on your chosen
.\".BR locale .

Supplying
.B \-r
with a string will override this default.
.\"You may need to do this if your
.\"version of
.\".B less
.\"rejects the default options or if you prefer a different prompt.
The string may contain the text
.B $MAN_PN
which will be expanded to the name of the current manual page and its
section name surrounded by `(' and `)'.
The string used to produce the default could be expressed as

.B \e\ Manual\e\ page\e\ \e$MAN_PN\e\ ?ltline\e\ %lt?L/%L.:
.br
.B byte\e\ %bB?s/%s..?\e\ (END):?pB\e\ %pB\e\e%..
.br
.B (press h for help or q to quit)

It is broken into three lines here for the sake of readability only.
For its meaning see the
.BR less (1)
manual page.
The prompt string is first evaluated by the shell.
All double quotes, back-quotes and backslashes in the prompt must be escaped
by a preceding backslash.
The prompt string may end in an escaped $ which may be followed by further
options for less.
By default
.B man
sets the
.B \-ix8
options.

The
.RB $ MANLESS
environment variable described below may be used to set a default prompt
string if none is supplied on the command line.
.TP
.BR \-7 ", " \-\-ascii
When viewing a pure
.IR ascii (7)
manual page on a 7 bit terminal or terminal emulator, some characters may
not display correctly when using the
.IR latin1 (7)
device description with
.B GNU
.BR nroff .
This option allows pure
.I ascii
manual pages to be displayed in
.I ascii
with the
.I latin1
device.
It will not translate any
.I latin1
text.
The following table shows the translations performed: some parts of it may
only be displayed properly when using
.B GNU
.BR nroff 's
.IR latin1 (7)
device.

.ie c \[shc] \
.  ds softhyphen \[shc]
.el \
.  ds softhyphen \(hy
.na
.TS
tab (@);
l c c c.
Description@Octal@latin1@ascii
_
T{
continuation hyphen
T}@255@\*[softhyphen]@-
T{
bullet (middle dot)
T}@267@\(bu@o
T{
acute accent
T}@264@\(aa@'
T{
multiplication sign
T}@327@\(mu@x
.TE
.ad

If the
.I latin1
column displays correctly, your terminal may be set up for
.I latin1
characters and this option is not necessary.
If the
.I latin1
and
.I ascii
columns are identical, you are reading this page using this option or
.B man
did not format this page using the
.I latin1
device description.
If the
.I latin1
column is missing or corrupt, you may need to view manual pages with this
option.

This option is ignored when using options
.BR \-t ,
.BR \-H ,
.BR \-T ,
or
.B \-Z
and may be useless for
.B nroff
other than
.BR GNU's .
.TP
.BI \-E\  encoding\fR,\ \fI \-\-encoding\fR=\fIencoding
Generate output for a character encoding other than the default.
For backward compatibility,
.I encoding
may be an
.B nroff
device such as
.BR ascii ", " latin1 ", or " utf8
as well as a true character encoding such as
.BR UTF\-8 .
.TP
.BR \-\-no\-hyphenation ", " \-\-nh
Normally,
.B nroff
will automatically hyphenate text at line breaks even in words that do not
contain hyphens, if it is necessary to do so to lay out words on a line
without excessive spacing.
This option disables automatic hyphenation, so words will only be hyphenated
if they already contain hyphens.

If you are writing a manual page and simply want to prevent
.B nroff
from hyphenating a word at an inappropriate point, do not use this option,
but consult the
.B nroff
documentation instead; for instance, you can put "\e%" inside a word to
indicate that it may be hyphenated at that point, or put "\e%" at the start
of a word to prevent it from being hyphenated.
.TP
.BR \-\-no\-justification ", " \-\-nj
Normally,
.B nroff
will automatically justify text to both margins.
This option disables full justification, leaving justified only to the left
margin, sometimes called "ragged-right" text.

If you are writing a manual page and simply want to prevent
.B nroff
from justifying certain paragraphs, do not use this option, but consult the
.B nroff
documentation instead; for instance, you can use the ".na", ".nf", ".fi",
and ".ad" requests to temporarily disable adjusting and filling.
.TP
.BI \-p\  string \fR,\ \fB\-\-preprocessor= string
Specify the sequence of preprocessors to run before
.B nroff
or
.BR troff / groff .
Not all installations will have a full set of preprocessors.
Some of the preprocessors and the letters used to designate them are:
.BR eqn " (" e ),
.BR grap " (" g ),
.BR pic " (" p ),
.BR tbl " (" t ),
.BR vgrind " (" v ),
.BR refer " (" r ).
This option overrides the
.RB $ MANROFFSEQ
environment variable.
.B zsoelim
is always run as the very first preprocessor.
.TP
.BR \-t ", " \-\-troff
Use
.I groff -mandoc
to format the manual page to stdout.
This option is not required in conjunction with
.BR \-H ,
.BR \-T ,
or
.BR \-Z .
.TP
\fB\-T\fP[\fIdevice\/\fP], \fB\-\-troff\-device\fP[=\fIdevice\/\fP]
This option is used to change
.B groff
(or possibly
.BR troff's )
output to be suitable for a device other than the default.
It implies
.BR \-t .
Examples (provided with Groff-1.17) include
.BR dvi ", " latin1 ", " ps ", " utf8 ,
.BR X75 " and " X100 .
.TP
\fB\-H\fP[\fIbrowser\/\fP], \fB\-\-html\fP[=\fIbrowser\/\fP]
This option will cause
.B groff
to produce HTML output, and will display that output in a web browser.
The choice of browser is determined by the optional
.I browser
argument if one is provided, by the
.RB $ BROWSER
environment variable, or by a compile-time default if that is unset (usually
.BR lynx ).
This option implies
.BR \-t ,
and will only work with
.B GNU
.BR troff .
.TP
\fB\-X\fP[\fIdpi\/\fP], \fB\-\-gxditview\fP[=\fIdpi\/\fP]
This option displays the output of
.B groff
in a graphical window using the
.B gxditview
program.
The
.I dpi
(dots per inch) may be 75, 75-12, 100, or 100-12, defaulting to 75;
the -12 variants use a 12-point base font.
This option implies
.B \-T
with the X75, X75-12, X100, or X100-12 device respectively.
.TP
.BR \-Z ", " \-\-ditroff
.B groff
will run
.B troff
and then use an appropriate post-processor to produce output suitable for
the chosen device.
If
.I groff -mandoc
is
.BR groff ,
this option is passed to
.B groff
and will suppress the use of a post-processor.
It implies
.BR \-t .
.SS "Getting help"
.TP
.BR \-? ", " \-\-help
Print a help message and exit.
.TP
.BR \-\-usage
Print a short usage message and exit.
.TP
.BR \-V ", " \-\-version
Display version information.
.SH "EXIT STATUS"
.TP
.B 0
Successful program execution.
.TP
.B 1
Usage, syntax or configuration file error.
.TP
.B 2
Operational error.
.TP
.B 3
A child process returned a non-zero exit status.
.TP
.B 16
At least one of the pages/files/keywords didn't exist or wasn't matched.
.SH ENVIRONMENT
.\".TP \w'MANROFFSEQ\ \ 'u
.TP
.B MANPATH
If
.RB $ MANPATH
is set, its value is used as the path to search for manual pages.
.TP
.B MANROFFOPT
The contents of
.RB $ MANROFFOPT
are added to the command line every time
.B man
invokes the formatter
.RB ( nroff ,
.BR troff ,
or
.BR groff ).
.TP
.B MANROFFSEQ
If
.RB $ MANROFFSEQ
is set, its value is used to determine the set of preprocessors to pass
each manual page through.
The default preprocessor list is system dependent.
.TP
.B MANSECT
If
.RB $ MANSECT
is set, its value is a colon-delimited list of sections and it is used to
determine which manual sections to search and in what order.
The default is "1 n l 8 3 0 2 5 4 9 6 7", unless overridden by the
.B SECTION
directive in
.IR /etc/man_db.conf .
.TP
.BR MANPAGER , " PAGER"
If
.RB $ MANPAGER
or
.RB $ PAGER
is set
.RB ($ MANPAGER
is used in preference), its value is used as the name of the program used to
display the manual page.
By default,
.B less
is used.

The value may be a simple command name or a command with arguments, and may
use shell quoting (backslashes, single quotes, or double quotes).
It may not use pipes to connect multiple commands; if you need that, use a
wrapper script, which may take the file to display either as an argument or
on standard input.
.TP
.B MANLESS
If
.RB $ MANLESS
is set, its value will be used as the default prompt string for the
.B less
pager, as if it had been passed using the
.B \-r
option (so any occurrences of the text
.B $MAN_PN
will be expanded in the same way).
For example, if you want to set the prompt string unconditionally to
\(lqmy prompt string\(rq, set
.RB $ MANLESS
to
.RB \(oq \-Psmy\ prompt\ string \(cq.
Using the
.B \-r
option overrides this environment variable.
.TP
.B BROWSER
If
.RB $ BROWSER
is set, its value is a colon-delimited list of commands, each of which in
turn is used to try to start a web browser for
.B man
.BR \-\-html .
In each command,
.I %s
is replaced by a filename containing the HTML output from
.BR groff ,
.I %%
is replaced by a single percent sign (%), and
.I %c
is replaced by a colon (:).
.TP
.B SYSTEM
If
.RB $ SYSTEM
is set, it will have the same effect as if it had been specified as the
argument to the
.B \-m
option.
.TP
.B MANOPT
If
.RB $ MANOPT
is set, it will be parsed prior to
.B man's
command line and is expected to be in a similar format.
As all of the other
.B man
specific environment variables can be expressed as command line options, and
are thus candidates for being included in
.RB $ MANOPT
it is expected that they will become obsolete.
N.B.  All spaces that should be interpreted as part of an option's argument
must be escaped.
.TP
.B MANWIDTH
If
.RB $ MANWIDTH
is set, its value is used as the line length for which manual pages should
be formatted.
If it is not set, manual pages will be formatted with a line length
appropriate to the current terminal (using the value of
.RB $ COLUMNS ,
an
.BR ioctl (2)
if available, or falling back to 80 characters if neither is available).
Cat pages will only be saved when the default formatting can be used, that
is when the terminal line length is between 66 and 80 characters.
.TP
.B MAN_KEEP_FORMATTING
Normally, when output is not being directed to a terminal (such as to a file
or a pipe), formatting characters are discarded to make it easier to read
the result without special tools.
However, if
.RB $ MAN_KEEP_FORMATTING
is set to any non-empty value, these formatting characters are retained.
This may be useful for wrappers around
.B man
that can interpret formatting characters.
.TP
.B MAN_KEEP_STDERR
Normally, when output is being directed to a terminal (usually to a pager),
any error output from the command used to produce formatted versions of
manual pages is discarded to avoid interfering with the pager's display.
Programs such as
.B groff
often produce relatively minor error messages about typographical problems
such as poor alignment, which are unsightly and generally confusing when
displayed along with the manual page.
However, some users want to see them anyway, so, if
.RB $ MAN_KEEP_STDERR
is set to any non-empty value, error output will be displayed as usual.
.TP
.BR LANG , " LC_MESSAGES"
Depending on system and implementation, either or both of
.RB $ LANG
and
.RB $ LC_MESSAGES
will be interrogated for the current message locale.
.B man
will display its messages in that locale (if available).
See
.BR setlocale (3)
for precise details.
.SH FILES
.TP
.I /etc/man_db.conf
man-db configuration file.
.TP
.I /usr/share/man
A global manual page hierarchy.
.TP
.I /usr/share/man/index.(bt|db|dir|pag)
A traditional global
.I index
database cache.
.TP
.I /var/cache/man/index.(bt|db|dir|pag)
An FHS
compliant global
.I index
database cache.
.SH "SEE ALSO"
.BR apropos (1),
.BR groff (1),
.BR less (1),
.BR manpath (1),
.BR nroff (1),
.BR troff (1),
.BR whatis (1),
.BR zsoelim (1),
.BR setlocale (3),
.BR manpath (5),
.BR ascii (7),
.BR latin1 (7),
.BR man (7),
.BR catman (8),
.BR mandb (8),
the man-db package manual,
.BR FSSTND
.SH HISTORY
1990, 1991 \(en Originally written by John W.\&amp; Eaton (jwe@che.utexas.edu).

Dec 23 1992: Rik Faith (faith@cs.unc.edu) applied bug fixes
supplied by Willem Kasdorp (wkasdo@nikhefk.nikef.nl).

30th April 1994 \(en 23rd February 2000: Wilf. (G.Wilford@ee.surrey.ac.uk)
has been developing and maintaining this package
with the help of a few dedicated people.

30th October 1996 \(en 30th March 2001: Fabrizio Polacco &lt;fpolacco@debian.org&gt;
maintained and enhanced this package for the Debian project, with the
help of all the community.

31st March 2001 \(en present day: Colin Watson &lt;cjwatson@debian.org&gt; is now
developing and maintaining man-db.
.\" Copyright (c) 1987, 1990, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	@(#)mesg.1	8.1 (Berkeley) 6/6/93
.\"
.TH MESG 1 "July 2014" "util-linux" "User Commands"
.SH NAME
mesg \- display (or do not display) messages from other users
.SH SYNOPSIS
.B mesg
[option]
.RB [ n | y ]
.SH DESCRIPTION
The
.B mesg
utility is invoked by a user to control write access others have to the
terminal device associated with standard error output.  If write access
is allowed, then programs such as
.BR talk (1)
and
.BR write (1)
may display messages on the terminal.
.PP
Traditionally, write access is allowed by default.  However, as users
become more conscious of various security risks, there is a trend to remove
write access by default, at least for the primary login shell.  To make
sure your ttys are set the way you want them to be set,
.B mesg
should be executed in your login scripts.
.SH ARGUMENTS
.TP
.B n
Disallow messages.
.TP
.B y
Allow messages to be displayed.
.PP
If no arguments are given,
.B mesg
shows the current message status on standard error output.
.SH OPTIONS
.TP
.BR \-v , " \-\-verbose"
Explain what is being done.
.TP
.BR \-V , " \-\-version"
Display version information and exit.
.TP
.BR \-h , " \-\-help"
Display help text and exit.
.SH EXIT STATUS
The
.B mesg
utility exits with one of the following values:
.RS 4
.TP
.B "\ 0"
Messages are allowed.
.TP
.B "\ 1"
Messages are not allowed.
.TP
.B "&gt;1"
An error has occurred.
.RE
.SH FILES
.I /dev/[pt]ty[pq]?
.SH "SEE ALSO"
.BR login (1),
.BR talk (1),
.BR write (1),
.BR wall (1),
.BR xterm (1)
.SH HISTORY
A
.B mesg
command appeared in Version 6 AT&amp;T UNIX.

.SH AVAILABILITY
The mesg command is part of the util-linux package and is available from
ftp://ftp.kernel.org/pub/linux/utils/util-linux/.
.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.
.TH MKDIR "1" "March 2017" "GNU coreutils 8.27" "User Commands"
.SH NAME
mkdir \- make directories
.SH SYNOPSIS
.B mkdir
[\fI\,OPTION\/\fR]... \fI\,DIRECTORY\/\fR...
.SH DESCRIPTION
.\" Add any additional description here
.PP
Create the DIRECTORY(ies), if they do not already exist.
.PP
Mandatory arguments to long options are mandatory for short options too.
.TP
\fB\-m\fR, \fB\-\-mode\fR=\fI\,MODE\/\fR
set file mode (as in chmod), not a=rwx \- umask
.TP
\fB\-p\fR, \fB\-\-parents\fR
no error if existing, make parent directories as needed
.TP
\fB\-v\fR, \fB\-\-verbose\fR
print a message for each created directory
.TP
\fB\-Z\fR
set SELinux security context of each created directory
to the default type
.TP
\fB\-\-context\fR[=\fI\,CTX\/\fR]
like \fB\-Z\fR, or if CTX is specified then set the SELinux
or SMACK security context to CTX
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-\-version\fR
output version information and exit
.SH AUTHOR
Written by David MacKenzie.
.SH "REPORTING BUGS"
GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt;
.br
Report mkdir translation bugs to &lt;http://translationproject.org/team/&gt;
.SH COPYRIGHT
Copyright \(co 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
mkdir(2)
.PP
.br
Full documentation at: &lt;http://www.gnu.org/software/coreutils/mkdir&gt;
.br
or available locally via: info \(aq(coreutils) mkdir invocation\(aq
.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.
.TH MKFIFO "1" "March 2017" "GNU coreutils 8.27" "User Commands"
.SH NAME
mkfifo \- make FIFOs (named pipes)
.SH SYNOPSIS
.B mkfifo
[\fI\,OPTION\/\fR]... \fI\,NAME\/\fR...
.SH DESCRIPTION
.\" Add any additional description here
.PP
Create named pipes (FIFOs) with the given NAMEs.
.PP
Mandatory arguments to long options are mandatory for short options too.
.TP
\fB\-m\fR, \fB\-\-mode\fR=\fI\,MODE\/\fR
set file permission bits to MODE, not a=rw \- umask
.TP
\fB\-Z\fR
set the SELinux security context to default type
.TP
\fB\-\-context\fR[=\fI\,CTX\/\fR]
like \fB\-Z\fR, or if CTX is specified then set the SELinux
or SMACK security context to CTX
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-\-version\fR
output version information and exit
.SH AUTHOR
Written by David MacKenzie.
.SH "REPORTING BUGS"
GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt;
.br
Report mkfifo translation bugs to &lt;http://translationproject.org/team/&gt;
.SH COPYRIGHT
Copyright \(co 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
mkfifo(3)
.PP
.br
Full documentation at: &lt;http://www.gnu.org/software/coreutils/mkfifo&gt;
.br
or available locally via: info \(aq(coreutils) mkfifo invocation\(aq
.\" Copyright (c) 1988, 1990 The Regents of the University of California.
.\" Copyright (c) 1988 Mark Nudleman
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	@(#)more.1	5.15 (Berkeley) 7/29/91
.\"
.\" Copyright (c) 1992 Rik Faith (faith@cs.unc.edu)
.\"
.TH MORE "1" "February 2014" "util-linux" "User Commands"
.SH NAME
more \- file perusal filter for crt viewing
.SH SYNOPSIS
.B more
[options]
.IR file ...
.SH DESCRIPTION
.B more
is a filter for paging through text one screenful at a time.  This version is
especially primitive.  Users should realize that
.BR less (1)
provides
.BR more (1)
emulation plus extensive enhancements.
.SH OPTIONS
Options are also taken from the environment variable
.B MORE
(make sure to precede them with a dash
.RB ( \- ))
but command-line options will override those.
.TP
.B \-d
Prompt with "[Press space to continue, 'q' to quit.]",
and display "[Press 'h' for instructions.]" instead of ringing
the bell when an illegal key is pressed.
.TP
.B \-l
Do not pause after any line containing a
.B \&amp;^L
(form feed).
.TP
.B \-f
Count logical lines, rather than screen lines (i.e., long lines are not folded).
.TP
.B \-p
Do not scroll.  Instead, clear the whole screen and then display the text.
Notice that this option is switched on automatically if the executable is
named
.BR page .
.TP
.B \-c
Do not scroll.  Instead, paint each screen from the top, clearing the
remainder of each line as it is displayed.
.TP
.B \-s
Squeeze multiple blank lines into one.
.TP
.B \-u
Suppress underlining.
.TP
.BI \- number
The screen size to use, in
.I number
of lines.
.TP
.BI + number
Start displaying each file at line
.IR number .
.TP
.BI +/ string
The
.I string
to be searched in each file before starting to display it.
.SH COMMANDS
Interactive commands for
.B more
are based on
.BR vi (1).
Some commands may be preceded by a decimal number, called k in the
descriptions below.  In the following descriptions,
.B ^X
means
.BR control-X .
.PP
.RS
.PD 1
.TP 10
.BR h \ or \ ?
Help; display a summary of these commands.  If you forget all other
commands, remember this one.
.TP
.B SPACE
Display next k lines of text.  Defaults to current screen size.
.TP
.B z
Display next k lines of text.  Defaults to current screen size.  Argument
becomes new default.
.TP
.B RETURN
Display next k lines of text.  Defaults to 1.  Argument becomes new default.
.TP
.BR d \ or \ \&amp;^D
Scroll k lines.  Default is current scroll size, initially 11.  Argument
becomes new default.
.TP
.BR q \ or \ Q \ or \ INTERRUPT
Exit.
.TP
.B s
Skip forward k lines of text.  Defaults to 1.
.TP
.B f
Skip forward k screenfuls of text.  Defaults to 1.
.TP
.BR b \ or \ \&amp;^B
Skip backwards k screenfuls of text.  Defaults to 1.  Only works with files,
not pipes.
.TP
.B '
Go to the place where the last search started.
.TP
.B =
Display current line number.
.TP
.B \&amp;/pattern
Search for kth occurrence of regular expression.  Defaults to 1.
.TP
.B n
Search for kth occurrence of last regular expression.  Defaults to 1.
.TP
.BR !command \ or \ :!command
Execute
.I command
in a subshell.
.TP
.B v
Start up an editor at current line.  The editor is taken from the environment
variable
.B VISUAL
if defined, or
.B EDITOR
if
.B VISUAL
is not defined, or defaults
to
.B vi
if neither
.B VISUAL
nor
.B EDITOR
is defined.
.TP
.B \&amp;^L
Redraw screen.
.TP
.B :n
Go to kth next file.  Defaults to 1.
.TP
.B :p
Go to kth previous file.  Defaults to 1.
.TP
.B :f
Display current file name and line number.
.TP
.B \&amp;.
Repeat previous command.
.SH ENVIRONMENT
The
.B more
command respects the following environment variables, if they exist:
.TP
.B MORE
This variable may be set with favored options to
.BR more .
.TP
.B SHELL
Current shell in use (normally set by the shell at login time).
.TP
.B TERM
The terminal type used by \fBmore\fR to get the terminal
characteristics necessary to manipulate the screen.
.TP
.B VISUAL
The editor the user prefers.  Invoked when command key
.I v
is pressed.
.TP
.B EDITOR
The editor of choice when
.B VISUAL
is not specified.
.SH SEE ALSO
.BR less (1),
.BR vi (1)
.SH AUTHORS
Eric Shienbrood, UC Berkeley
.br
Modified by Geoff Peck, UCB to add underlining, single spacing
.br
Modified by John Foderaro, UCB to add -c and MORE environment variable
.SH HISTORY
The
.B more
command appeared in 3.0BSD.  This man page documents
.B more
version 5.19 (Berkeley 6/29/88), which is currently in use in the Linux
community.  Documentation was produced using several other versions of the
man page, and extensive inspection of the source code.
.SH AVAILABILITY
The more command is part of the util-linux package and is available from
.UR ftp://\:ftp.kernel.org\:/pub\:/linux\:/utils\:/util-linux/
Linux Kernel Archive
.UE .
.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.
.TH MV "1" "March 2017" "GNU coreutils 8.27" "User Commands"
.SH NAME
mv \- move (rename) files
.SH SYNOPSIS
.B mv
[\fI\,OPTION\/\fR]... [\fI\,-T\/\fR] \fI\,SOURCE DEST\/\fR
.br
.B mv
[\fI\,OPTION\/\fR]... \fI\,SOURCE\/\fR... \fI\,DIRECTORY\/\fR
.br
.B mv
[\fI\,OPTION\/\fR]... \fI\,-t DIRECTORY SOURCE\/\fR...
.SH DESCRIPTION
.\" Add any additional description here
.PP
Rename SOURCE to DEST, or move SOURCE(s) to DIRECTORY.
.PP
Mandatory arguments to long options are mandatory for short options too.
.TP
\fB\-\-backup\fR[=\fI\,CONTROL\/\fR]
make a backup of each existing destination file
.TP
\fB\-b\fR
like \fB\-\-backup\fR but does not accept an argument
.TP
\fB\-f\fR, \fB\-\-force\fR
do not prompt before overwriting
.TP
\fB\-i\fR, \fB\-\-interactive\fR
prompt before overwrite
.TP
\fB\-n\fR, \fB\-\-no\-clobber\fR
do not overwrite an existing file
.PP
If you specify more than one of \fB\-i\fR, \fB\-f\fR, \fB\-n\fR, only the final one takes effect.
.TP
\fB\-\-strip\-trailing\-slashes\fR
remove any trailing slashes from each SOURCE
argument
.TP
\fB\-S\fR, \fB\-\-suffix\fR=\fI\,SUFFIX\/\fR
override the usual backup suffix
.TP
\fB\-t\fR, \fB\-\-target\-directory\fR=\fI\,DIRECTORY\/\fR
move all SOURCE arguments into DIRECTORY
.TP
\fB\-T\fR, \fB\-\-no\-target\-directory\fR
treat DEST as a normal file
.TP
\fB\-u\fR, \fB\-\-update\fR
move only when the SOURCE file is newer
than the destination file or when the
destination file is missing
.TP
\fB\-v\fR, \fB\-\-verbose\fR
explain what is being done
.TP
\fB\-Z\fR, \fB\-\-context\fR
set SELinux security context of destination
file to default type
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-\-version\fR
output version information and exit
.PP
The backup suffix is '~', unless set with \fB\-\-suffix\fR or SIMPLE_BACKUP_SUFFIX.
The version control method may be selected via the \fB\-\-backup\fR option or through
the VERSION_CONTROL environment variable.  Here are the values:
.TP
none, off
never make backups (even if \fB\-\-backup\fR is given)
.TP
numbered, t
make numbered backups
.TP
existing, nil
numbered if numbered backups exist, simple otherwise
.TP
simple, never
always make simple backups
.SH AUTHOR
Written by Mike Parker, David MacKenzie, and Jim Meyering.
.SH "REPORTING BUGS"
GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt;
.br
Report mv translation bugs to &lt;http://translationproject.org/team/&gt;
.SH COPYRIGHT
Copyright \(co 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
rename(2)
.PP
.br
Full documentation at: &lt;http://www.gnu.org/software/coreutils/mv&gt;
.br
or available locally via: info \(aq(coreutils) mv invocation\(aq
.\" Original author unknown.  This man page is in the public domain.
.\" Modified Sat Oct  9 17:46:48 1993 by faith@cs.unc.edu
.TH NEWGRP 1 "October 1993" "util-linux" "User Commands"
.SH NAME
newgrp \- log in to a new group
.SH SYNOPSIS
.B newgrp
.RI [ group ]
.SH DESCRIPTION
.B newgrp
changes the group identification of its caller, analogously to
.BR login (1).
The same person remains logged in, and the current directory
is unchanged, but calculations of access permissions to files are performed
with respect to the new group ID.
.LP
If no group is specified, the GID is changed to the login GID.
.LP
.SH FILES
.I /etc/group
.br
.I /etc/passwd

.SH "SEE ALSO"
.BR login (1),
.BR group (5)

.SH AUTHOR
Originally by Michael Haardt. Currently maintained by
Peter Orbaek (poe@daimi.aau.dk).

.SH AVAILABILITY
The newgrp command is part of the util-linux package and is available from
ftp://ftp.kernel.org/pub/linux/utils/util-linux/.
.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.
.TH NICE "1" "March 2017" "GNU coreutils 8.27" "User Commands"
.SH NAME
nice \- run a program with modified scheduling priority
.SH SYNOPSIS
.B nice
[\fI\,OPTION\/\fR] [\fI\,COMMAND \/\fR[\fI\,ARG\/\fR]...]
.SH DESCRIPTION
.\" Add any additional description here
.PP
Run COMMAND with an adjusted niceness, which affects process scheduling.
With no COMMAND, print the current niceness.  Niceness values range from
\fB\-20\fR (most favorable to the process) to 19 (least favorable to the process).
.PP
Mandatory arguments to long options are mandatory for short options too.
.TP
\fB\-n\fR, \fB\-\-adjustment\fR=\fI\,N\/\fR
add integer N to the niceness (default 10)
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-\-version\fR
output version information and exit
.PP
NOTE: your shell may have its own version of nice, which usually supersedes
the version described here.  Please refer to your shell's documentation
for details about the options it supports.
.SH AUTHOR
Written by David MacKenzie.
.SH "REPORTING BUGS"
GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt;
.br
Report nice translation bugs to &lt;http://translationproject.org/team/&gt;
.SH COPYRIGHT
Copyright \(co 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
nice(2), renice(1)
.PP
.br
Full documentation at: &lt;http://www.gnu.org/software/coreutils/nice&gt;
.br
or available locally via: info \(aq(coreutils) nice invocation\(aq
.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.
.TH NL "1" "March 2017" "GNU coreutils 8.27" "User Commands"
.SH NAME
nl \- number lines of files
.SH SYNOPSIS
.B nl
[\fI\,OPTION\/\fR]... [\fI\,FILE\/\fR]...
.SH DESCRIPTION
.\" Add any additional description here
.PP
Write each FILE to standard output, with line numbers added.
.PP
With no FILE, or when FILE is \-, read standard input.
.PP
Mandatory arguments to long options are mandatory for short options too.
.TP
\fB\-b\fR, \fB\-\-body\-numbering\fR=\fI\,STYLE\/\fR
use STYLE for numbering body lines
.TP
\fB\-d\fR, \fB\-\-section\-delimiter\fR=\fI\,CC\/\fR
use CC for logical page delimiters
.TP
\fB\-f\fR, \fB\-\-footer\-numbering\fR=\fI\,STYLE\/\fR
use STYLE for numbering footer lines
.TP
\fB\-h\fR, \fB\-\-header\-numbering\fR=\fI\,STYLE\/\fR
use STYLE for numbering header lines
.TP
\fB\-i\fR, \fB\-\-line\-increment\fR=\fI\,NUMBER\/\fR
line number increment at each line
.TP
\fB\-l\fR, \fB\-\-join\-blank\-lines\fR=\fI\,NUMBER\/\fR
group of NUMBER empty lines counted as one
.TP
\fB\-n\fR, \fB\-\-number\-format\fR=\fI\,FORMAT\/\fR
insert line numbers according to FORMAT
.TP
\fB\-p\fR, \fB\-\-no\-renumber\fR
do not reset line numbers for each section
.TP
\fB\-s\fR, \fB\-\-number\-separator\fR=\fI\,STRING\/\fR
add STRING after (possible) line number
.TP
\fB\-v\fR, \fB\-\-starting\-line\-number\fR=\fI\,NUMBER\/\fR
first line number for each section
.TP
\fB\-w\fR, \fB\-\-number\-width\fR=\fI\,NUMBER\/\fR
use NUMBER columns for line numbers
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-\-version\fR
output version information and exit
.PP
By default, selects \fB\-v1\fR \fB\-i1\fR \fB\-l1\fR \fB\-sTAB\fR \fB\-w6\fR \fB\-nrn\fR \fB\-hn\fR \fB\-bt\fR \fB\-fn\fR.
CC are two delimiter characters used to construct logical page delimiters,
a missing second character implies :.  Type \e\e for \e.  STYLE is one of:
.TP
a
number all lines
.TP
t
number only nonempty lines
.TP
n
number no lines
.TP
pBRE
number only lines that contain a match for the basic regular
expression, BRE
.PP
FORMAT is one of:
.TP
ln
left justified, no leading zeros
.TP
rn
right justified, no leading zeros
.TP
rz
right justified, leading zeros
.SH AUTHOR
Written by Scott Bartram and David MacKenzie.
.SH "REPORTING BUGS"
GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt;
.br
Report nl translation bugs to &lt;http://translationproject.org/team/&gt;
.SH COPYRIGHT
Copyright \(co 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
Full documentation at: &lt;http://www.gnu.org/software/coreutils/nl&gt;
.br
or available locally via: info \(aq(coreutils) nl invocation\(aq
.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C&lt;&gt;.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&amp;(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&amp;(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X&lt;&gt; in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&amp;
.    ds #] \&amp;
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&amp;
.    ds ` \&amp;
.    ds ^ \&amp;
.    ds , \&amp;
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H&gt;23 .if \n(.V&gt;19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "NM 1"
.TH NM 1 "2017-03-02" "binutils-2.28" "GNU Development Tools"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
nm \- list symbols from object files
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
nm [\fB\-A\fR|\fB\-o\fR|\fB\-\-print\-file\-name\fR] [\fB\-a\fR|\fB\-\-debug\-syms\fR]
[\fB\-B\fR|\fB\-\-format=bsd\fR] [\fB\-C\fR|\fB\-\-demangle\fR[=\fIstyle\fR]]
[\fB\-D\fR|\fB\-\-dynamic\fR] [\fB\-f\fR\fIformat\fR|\fB\-\-format=\fR\fIformat\fR]
[\fB\-g\fR|\fB\-\-extern\-only\fR] [\fB\-h\fR|\fB\-\-help\fR]
[\fB\-l\fR|\fB\-\-line\-numbers\fR] [\fB\-n\fR|\fB\-v\fR|\fB\-\-numeric\-sort\fR]
[\fB\-P\fR|\fB\-\-portability\fR] [\fB\-p\fR|\fB\-\-no\-sort\fR]
[\fB\-r\fR|\fB\-\-reverse\-sort\fR] [\fB\-S\fR|\fB\-\-print\-size\fR]
[\fB\-s\fR|\fB\-\-print\-armap\fR] [\fB\-t\fR \fIradix\fR|\fB\-\-radix=\fR\fIradix\fR]
[\fB\-u\fR|\fB\-\-undefined\-only\fR] [\fB\-V\fR|\fB\-\-version\fR]
[\fB\-X 32_64\fR] [\fB\-\-defined\-only\fR] [\fB\-\-no\-demangle\fR]
[\fB\-\-plugin\fR \fIname\fR] [\fB\-\-size\-sort\fR] [\fB\-\-special\-syms\fR]
[\fB\-\-synthetic\fR] [\fB\-\-with\-symbol\-versions\fR] [\fB\-\-target=\fR\fIbfdname\fR]
[\fIobjfile\fR...]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&amp;\s-1GNU \s0\fBnm\fR lists the symbols from object files \fIobjfile\fR....
If no object files are listed as arguments, \fBnm\fR assumes the file
\&amp;\fIa.out\fR.
.PP
For each symbol, \fBnm\fR shows:
.IP "\(bu" 4
The symbol value, in the radix selected by options (see below), or
hexadecimal by default.
.IP "\(bu" 4
The symbol type.  At least the following types are used; others are, as
well, depending on the object file format.  If lowercase, the symbol is
usually local; if uppercase, the symbol is global (external).  There
are however a few lowercase symbols that are shown for special global
symbols (\f(CW\*(C`u\*(C'\fR, \f(CW\*(C`v\*(C'\fR and \f(CW\*(C`w\*(C'\fR).
.RS 4
.ie n .IP """A""" 4
.el .IP "\f(CWA\fR" 4
.IX Item "A"
The symbol's value is absolute, and will not be changed by further
linking.
.ie n .IP """B""" 4
.el .IP "\f(CWB\fR" 4
.IX Item "B"
.PD 0
.ie n .IP """b""" 4
.el .IP "\f(CWb\fR" 4
.IX Item "b"
.PD
The symbol is in the uninitialized data section (known as \s-1BSS\s0).
.ie n .IP """C""" 4
.el .IP "\f(CWC\fR" 4
.IX Item "C"
The symbol is common.  Common symbols are uninitialized data.  When
linking, multiple common symbols may appear with the same name.  If the
symbol is defined anywhere, the common symbols are treated as undefined
references.
.ie n .IP """D""" 4
.el .IP "\f(CWD\fR" 4
.IX Item "D"
.PD 0
.ie n .IP """d""" 4
.el .IP "\f(CWd\fR" 4
.IX Item "d"
.PD
The symbol is in the initialized data section.
.ie n .IP """G""" 4
.el .IP "\f(CWG\fR" 4
.IX Item "G"
.PD 0
.ie n .IP """g""" 4
.el .IP "\f(CWg\fR" 4
.IX Item "g"
.PD
The symbol is in an initialized data section for small objects.  Some
object file formats permit more efficient access to small data objects,
such as a global int variable as opposed to a large global array.
.ie n .IP """i""" 4
.el .IP "\f(CWi\fR" 4
.IX Item "i"
For \s-1PE\s0 format files this indicates that the symbol is in a section
specific to the implementation of DLLs.  For \s-1ELF\s0 format files this
indicates that the symbol is an indirect function.  This is a \s-1GNU\s0
extension to the standard set of \s-1ELF\s0 symbol types.  It indicates a
symbol which if referenced by a relocation does not evaluate to its
address, but instead must be invoked at runtime.  The runtime
execution will then return the value to be used in the relocation.
.ie n .IP """I""" 4
.el .IP "\f(CWI\fR" 4
.IX Item "I"
The symbol is an indirect reference to another symbol.
.ie n .IP """N""" 4
.el .IP "\f(CWN\fR" 4
.IX Item "N"
The symbol is a debugging symbol.
.ie n .IP """p""" 4
.el .IP "\f(CWp\fR" 4
.IX Item "p"
The symbols is in a stack unwind section.
.ie n .IP """R""" 4
.el .IP "\f(CWR\fR" 4
.IX Item "R"
.PD 0
.ie n .IP """r""" 4
.el .IP "\f(CWr\fR" 4
.IX Item "r"
.PD
The symbol is in a read only data section.
.ie n .IP """S""" 4
.el .IP "\f(CWS\fR" 4
.IX Item "S"
.PD 0
.ie n .IP """s""" 4
.el .IP "\f(CWs\fR" 4
.IX Item "s"
.PD
The symbol is in an uninitialized data section for small objects.
.ie n .IP """T""" 4
.el .IP "\f(CWT\fR" 4
.IX Item "T"
.PD 0
.ie n .IP """t""" 4
.el .IP "\f(CWt\fR" 4
.IX Item "t"
.PD
The symbol is in the text (code) section.
.ie n .IP """U""" 4
.el .IP "\f(CWU\fR" 4
.IX Item "U"
The symbol is undefined.
.ie n .IP """u""" 4
.el .IP "\f(CWu\fR" 4
.IX Item "u"
The symbol is a unique global symbol.  This is a \s-1GNU\s0 extension to the
standard set of \s-1ELF\s0 symbol bindings.  For such a symbol the dynamic linker
will make sure that in the entire process there is just one symbol with
this name and type in use.
.ie n .IP """V""" 4
.el .IP "\f(CWV\fR" 4
.IX Item "V"
.PD 0
.ie n .IP """v""" 4
.el .IP "\f(CWv\fR" 4
.IX Item "v"
.PD
The symbol is a weak object.  When a weak defined symbol is linked with
a normal defined symbol, the normal defined symbol is used with no error.
When a weak undefined symbol is linked and the symbol is not defined,
the value of the weak symbol becomes zero with no error.  On some
systems, uppercase indicates that a default value has been specified.
.ie n .IP """W""" 4
.el .IP "\f(CWW\fR" 4
.IX Item "W"
.PD 0
.ie n .IP """w""" 4
.el .IP "\f(CWw\fR" 4
.IX Item "w"
.PD
The symbol is a weak symbol that has not been specifically tagged as a
weak object symbol.  When a weak defined symbol is linked with a normal
defined symbol, the normal defined symbol is used with no error.
When a weak undefined symbol is linked and the symbol is not defined,
the value of the symbol is determined in a system-specific manner without
error.  On some systems, uppercase indicates that a default value has been
specified.
.ie n .IP """\-""" 4
.el .IP "\f(CW\-\fR" 4
.IX Item "-"
The symbol is a stabs symbol in an a.out object file.  In this case, the
next values printed are the stabs other field, the stabs desc field, and
the stab type.  Stabs symbols are used to hold debugging information.
.ie n .IP """?""" 4
.el .IP "\f(CW?\fR" 4
.IX Item "?"
The symbol type is unknown, or object file format specific.
.RE
.RS 4
.RE
.IP "\(bu" 4
The symbol name.
.SH "OPTIONS"
.IX Header "OPTIONS"
The long and short forms of options, shown here as alternatives, are
equivalent.
.IP "\fB\-A\fR" 4
.IX Item "-A"
.PD 0
.IP "\fB\-o\fR" 4
.IX Item "-o"
.IP "\fB\-\-print\-file\-name\fR" 4
.IX Item "--print-file-name"
.PD
Precede each symbol by the name of the input file (or archive member)
in which it was found, rather than identifying the input file once only,
before all of its symbols.
.IP "\fB\-a\fR" 4
.IX Item "-a"
.PD 0
.IP "\fB\-\-debug\-syms\fR" 4
.IX Item "--debug-syms"
.PD
Display all symbols, even debugger-only symbols; normally these are not
listed.
.IP "\fB\-B\fR" 4
.IX Item "-B"
The same as \fB\-\-format=bsd\fR (for compatibility with the \s-1MIPS \s0\fBnm\fR).
.IP "\fB\-C\fR" 4
.IX Item "-C"
.PD 0
.IP "\fB\-\-demangle[=\fR\fIstyle\fR\fB]\fR" 4
.IX Item "--demangle[=style]"
.PD
Decode (\fIdemangle\fR) low-level symbol names into user-level names.
Besides removing any initial underscore prepended by the system, this
makes \*(C+ function names readable. Different compilers have different
mangling styles. The optional demangling style argument can be used to
choose an appropriate demangling style for your compiler.
.IP "\fB\-\-no\-demangle\fR" 4
.IX Item "--no-demangle"
Do not demangle low-level symbol names.  This is the default.
.IP "\fB\-D\fR" 4
.IX Item "-D"
.PD 0
.IP "\fB\-\-dynamic\fR" 4
.IX Item "--dynamic"
.PD
Display the dynamic symbols rather than the normal symbols.  This is
only meaningful for dynamic objects, such as certain types of shared
libraries.
.IP "\fB\-f\fR \fIformat\fR" 4
.IX Item "-f format"
.PD 0
.IP "\fB\-\-format=\fR\fIformat\fR" 4
.IX Item "--format=format"
.PD
Use the output format \fIformat\fR, which can be \f(CW\*(C`bsd\*(C'\fR,
\&amp;\f(CW\*(C`sysv\*(C'\fR, or \f(CW\*(C`posix\*(C'\fR.  The default is \f(CW\*(C`bsd\*(C'\fR.
Only the first character of \fIformat\fR is significant; it can be
either upper or lower case.
.IP "\fB\-g\fR" 4
.IX Item "-g"
.PD 0
.IP "\fB\-\-extern\-only\fR" 4
.IX Item "--extern-only"
.PD
Display only external symbols.
.IP "\fB\-h\fR" 4
.IX Item "-h"
.PD 0
.IP "\fB\-\-help\fR" 4
.IX Item "--help"
.PD
Show a summary of the options to \fBnm\fR and exit.
.IP "\fB\-l\fR" 4
.IX Item "-l"
.PD 0
.IP "\fB\-\-line\-numbers\fR" 4
.IX Item "--line-numbers"
.PD
For each symbol, use debugging information to try to find a filename and
line number.  For a defined symbol, look for the line number of the
address of the symbol.  For an undefined symbol, look for the line
number of a relocation entry which refers to the symbol.  If line number
information can be found, print it after the other symbol information.
.IP "\fB\-n\fR" 4
.IX Item "-n"
.PD 0
.IP "\fB\-v\fR" 4
.IX Item "-v"
.IP "\fB\-\-numeric\-sort\fR" 4
.IX Item "--numeric-sort"
.PD
Sort symbols numerically by their addresses, rather than alphabetically
by their names.
.IP "\fB\-p\fR" 4
.IX Item "-p"
.PD 0
.IP "\fB\-\-no\-sort\fR" 4
.IX Item "--no-sort"
.PD
Do not bother to sort the symbols in any order; print them in the order
encountered.
.IP "\fB\-P\fR" 4
.IX Item "-P"
.PD 0
.IP "\fB\-\-portability\fR" 4
.IX Item "--portability"
.PD
Use the \s-1POSIX.2\s0 standard output format instead of the default format.
Equivalent to \fB\-f posix\fR.
.IP "\fB\-r\fR" 4
.IX Item "-r"
.PD 0
.IP "\fB\-\-reverse\-sort\fR" 4
.IX Item "--reverse-sort"
.PD
Reverse the order of the sort (whether numeric or alphabetic); let the
last come first.
.IP "\fB\-S\fR" 4
.IX Item "-S"
.PD 0
.IP "\fB\-\-print\-size\fR" 4
.IX Item "--print-size"
.PD
Print both value and size of defined symbols for the \f(CW\*(C`bsd\*(C'\fR output style.
This option has no effect for object formats that do not record symbol
sizes, unless \fB\-\-size\-sort\fR is also used in which case a
calculated size is displayed.
.IP "\fB\-s\fR" 4
.IX Item "-s"
.PD 0
.IP "\fB\-\-print\-armap\fR" 4
.IX Item "--print-armap"
.PD
When listing symbols from archive members, include the index: a mapping
(stored in the archive by \fBar\fR or \fBranlib\fR) of which modules
contain definitions for which names.
.IP "\fB\-t\fR \fIradix\fR" 4
.IX Item "-t radix"
.PD 0
.IP "\fB\-\-radix=\fR\fIradix\fR" 4
.IX Item "--radix=radix"
.PD
Use \fIradix\fR as the radix for printing the symbol values.  It must be
\&amp;\fBd\fR for decimal, \fBo\fR for octal, or \fBx\fR for hexadecimal.
.IP "\fB\-u\fR" 4
.IX Item "-u"
.PD 0
.IP "\fB\-\-undefined\-only\fR" 4
.IX Item "--undefined-only"
.PD
Display only undefined symbols (those external to each object file).
.IP "\fB\-V\fR" 4
.IX Item "-V"
.PD 0
.IP "\fB\-\-version\fR" 4
.IX Item "--version"
.PD
Show the version number of \fBnm\fR and exit.
.IP "\fB\-X\fR" 4
.IX Item "-X"
This option is ignored for compatibility with the \s-1AIX\s0 version of
\&amp;\fBnm\fR.  It takes one parameter which must be the string
\&amp;\fB32_64\fR.  The default mode of \s-1AIX \s0\fBnm\fR corresponds
to \fB\-X 32\fR, which is not supported by \s-1GNU \s0\fBnm\fR.
.IP "\fB\-\-defined\-only\fR" 4
.IX Item "--defined-only"
Display only defined symbols for each object file.
.IP "\fB\-\-plugin\fR \fIname\fR" 4
.IX Item "--plugin name"
Load the plugin called \fIname\fR to add support for extra target
types.  This option is only available if the toolchain has been built
with plugin support enabled.
.IP "\fB\-\-size\-sort\fR" 4
.IX Item "--size-sort"
Sort symbols by size.  For \s-1ELF\s0 objects symbol sizes are read from the
\&amp;\s-1ELF,\s0 for other object types the symbol sizes are computed as the
difference between the value of the symbol and the value of the symbol
with the next higher value.  If the \f(CW\*(C`bsd\*(C'\fR output format is used
the size of the symbol is printed, rather than the value, and
\&amp;\fB\-S\fR must be used in order both size and value to be printed.
.IP "\fB\-\-special\-syms\fR" 4
.IX Item "--special-syms"
Display symbols which have a target-specific special meaning.  These
symbols are usually used by the target for some special processing and
are not normally helpful when included in the normal symbol lists.
For example for \s-1ARM\s0 targets this option would skip the mapping symbols
used to mark transitions between \s-1ARM\s0 code, \s-1THUMB\s0 code and data.
.IP "\fB\-\-synthetic\fR" 4
.IX Item "--synthetic"
Include synthetic symbols in the output.  These are special symbols
created by the linker for various purposes.  They are not shown by
default since they are not part of the binary's original source code.
.IP "\fB\-\-with\-symbol\-versions\fR" 4
.IX Item "--with-symbol-versions"
Enables the display of symbol version information if any exists.  The
version string is displayed as a suffix to the symbol name, preceeded by
an @ character.  For example \fBfoo@VER_1\fR.  If the version is
the default version to be used when resolving unversioned references
to the symbol then it is displayed as a suffix preceeded by two @
characters.  For example \fBfoo@@VER_2\fR.
.IP "\fB\-\-target=\fR\fIbfdname\fR" 4
.IX Item "--target=bfdname"
Specify an object code format other than your system's default format.
.IP "\fB@\fR\fIfile\fR" 4
.IX Item "@file"
Read command-line options from \fIfile\fR.  The options read are
inserted in place of the original @\fIfile\fR option.  If \fIfile\fR
does not exist, or cannot be read, then the option will be treated
literally, and not removed.
.Sp
Options in \fIfile\fR are separated by whitespace.  A whitespace
character may be included in an option by surrounding the entire
option in either single or double quotes.  Any character (including a
backslash) may be included by prefixing the character to be included
with a backslash.  The \fIfile\fR may itself contain additional
@\fIfile\fR options; any such options will be processed recursively.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&amp;\fIar\fR\|(1), \fIobjdump\fR\|(1), \fIranlib\fR\|(1), and the Info entries for \fIbinutils\fR.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1991\-2017 Free Software Foundation, Inc.
.PP
Permission is granted to copy, distribute and/or modify this document
under the terms of the \s-1GNU\s0 Free Documentation License, Version 1.3
or any later version published by the Free Software Foundation;
with no Invariant Sections, with no Front-Cover Texts, and with no
Back-Cover Texts.  A copy of the license is included in the
section entitled \*(L"\s-1GNU\s0 Free Documentation License\*(R".
.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.
.TH NOHUP "1" "March 2017" "GNU coreutils 8.27" "User Commands"
.SH NAME
nohup \- run a command immune to hangups, with output to a non-tty
.SH SYNOPSIS
.B nohup
\fI\,COMMAND \/\fR[\fI\,ARG\/\fR]...
.br
.B nohup
\fI\,OPTION\/\fR
.SH DESCRIPTION
.\" Add any additional description here
.PP
Run COMMAND, ignoring hangup signals.
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-\-version\fR
output version information and exit
.PP
If standard input is a terminal, redirect it from an unreadable file.
If standard output is a terminal, append output to 'nohup.out' if possible,
\&amp;'$HOME/nohup.out' otherwise.
If standard error is a terminal, redirect it to standard output.
To save output to FILE, use 'nohup COMMAND &gt; FILE'.
.PP
NOTE: your shell may have its own version of nohup, which usually supersedes
the version described here.  Please refer to your shell's documentation
for details about the options it supports.
.SH AUTHOR
Written by Jim Meyering.
.SH "REPORTING BUGS"
GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt;
.br
Report nohup translation bugs to &lt;http://translationproject.org/team/&gt;
.SH COPYRIGHT
Copyright \(co 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
Full documentation at: &lt;http://www.gnu.org/software/coreutils/nohup&gt;
.br
or available locally via: info \(aq(coreutils) nohup invocation\(aq
.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.
.TH OD "1" "March 2017" "GNU coreutils 8.27" "User Commands"
.SH NAME
od \- dump files in octal and other formats
.SH SYNOPSIS
.B od
[\fI\,OPTION\/\fR]... [\fI\,FILE\/\fR]...
.br
.B od
[\fI\,-abcdfilosx\/\fR]... [\fI\,FILE\/\fR] [[\fI\,+\/\fR]\fI\,OFFSET\/\fR[\fI\,.\/\fR][\fI\,b\/\fR]]
.br
.B od
\fI\,--traditional \/\fR[\fI\,OPTION\/\fR]... [\fI\,FILE\/\fR] [[\fI\,+\/\fR]\fI\,OFFSET\/\fR[\fI\,.\/\fR][\fI\,b\/\fR] [\fI\,+\/\fR][\fI\,LABEL\/\fR][\fI\,.\/\fR][\fI\,b\/\fR]]
.SH DESCRIPTION
.\" Add any additional description here
.PP
Write an unambiguous representation, octal bytes by default,
of FILE to standard output.  With more than one FILE argument,
concatenate them in the listed order to form the input.
.PP
With no FILE, or when FILE is \-, read standard input.
.PP
If first and second call formats both apply, the second format is assumed
if the last operand begins with + or (if there are 2 operands) a digit.
An OFFSET operand means \fB\-j\fR OFFSET.  LABEL is the pseudo\-address
at first byte printed, incremented when dump is progressing.
For OFFSET and LABEL, a 0x or 0X prefix indicates hexadecimal;
suffixes may be . for octal and b for multiply by 512.
.PP
Mandatory arguments to long options are mandatory for short options too.
.TP
\fB\-A\fR, \fB\-\-address\-radix\fR=\fI\,RADIX\/\fR
output format for file offsets; RADIX is one
of [doxn], for Decimal, Octal, Hex or None
.TP
\fB\-\-endian=\fR{big|little}
swap input bytes according the specified order
.TP
\fB\-j\fR, \fB\-\-skip\-bytes\fR=\fI\,BYTES\/\fR
skip BYTES input bytes first
.TP
\fB\-N\fR, \fB\-\-read\-bytes\fR=\fI\,BYTES\/\fR
limit dump to BYTES input bytes
.TP
\fB\-S\fR BYTES, \fB\-\-strings\fR[=\fI\,BYTES\/\fR]
output strings of at least BYTES graphic chars;
3 is implied when BYTES is not specified
.TP
\fB\-t\fR, \fB\-\-format\fR=\fI\,TYPE\/\fR
select output format or formats
.TP
\fB\-v\fR, \fB\-\-output\-duplicates\fR
do not use * to mark line suppression
.TP
\fB\-w[BYTES]\fR, \fB\-\-width\fR[=\fI\,BYTES\/\fR]
output BYTES bytes per output line;
32 is implied when BYTES is not specified
.TP
\fB\-\-traditional\fR
accept arguments in third form above
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-\-version\fR
output version information and exit
.SS "Traditional format specifications may be intermixed; they accumulate:"
.TP
\fB\-a\fR
same as \fB\-t\fR a,  select named characters, ignoring high\-order bit
.TP
\fB\-b\fR
same as \fB\-t\fR o1, select octal bytes
.TP
\fB\-c\fR
same as \fB\-t\fR c,  select printable characters or backslash escapes
.TP
\fB\-d\fR
same as \fB\-t\fR u2, select unsigned decimal 2\-byte units
.TP
\fB\-f\fR
same as \fB\-t\fR fF, select floats
.TP
\fB\-i\fR
same as \fB\-t\fR dI, select decimal ints
.TP
\fB\-l\fR
same as \fB\-t\fR dL, select decimal longs
.TP
\fB\-o\fR
same as \fB\-t\fR o2, select octal 2\-byte units
.TP
\fB\-s\fR
same as \fB\-t\fR d2, select decimal 2\-byte units
.TP
\fB\-x\fR
same as \fB\-t\fR x2, select hexadecimal 2\-byte units
.SS "TYPE is made up of one or more of these specifications:"
.TP
a
named character, ignoring high\-order bit
.TP
c
printable character or backslash escape
.TP
d[SIZE]
signed decimal, SIZE bytes per integer
.TP
f[SIZE]
floating point, SIZE bytes per float
.TP
o[SIZE]
octal, SIZE bytes per integer
.TP
u[SIZE]
unsigned decimal, SIZE bytes per integer
.TP
x[SIZE]
hexadecimal, SIZE bytes per integer
.PP
SIZE is a number.  For TYPE in [doux], SIZE may also be C for
sizeof(char), S for sizeof(short), I for sizeof(int) or L for
sizeof(long).  If TYPE is f, SIZE may also be F for sizeof(float), D
for sizeof(double) or L for sizeof(long double).
.PP
Adding a z suffix to any type displays printable characters at the end of
each output line.
.SS "BYTES is hex with 0x or 0X prefix, and may have a multiplier suffix:"
.TP
b
512
.TP
KB
1000
.TP
K
1024
.TP
MB
1000*1000
.TP
M
1024*1024
.PP
and so on for G, T, P, E, Z, Y.
.SH EXAMPLES
.TP
.B od -A x -t x1z -v
Display hexdump format output
.TP
.B od -A o -t oS -w16
The default output format used by od
.SH AUTHOR
Written by Jim Meyering.
.SH "REPORTING BUGS"
GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt;
.br
Report od translation bugs to &lt;http://translationproject.org/team/&gt;
.SH COPYRIGHT
Copyright \(co 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
Full documentation at: &lt;http://www.gnu.org/software/coreutils/od&gt;
.br
or available locally via: info \(aq(coreutils) od invocation\(aq
.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.
.TH PASTE "1" "March 2017" "GNU coreutils 8.27" "User Commands"
.SH NAME
paste \- merge lines of files
.SH SYNOPSIS
.B paste
[\fI\,OPTION\/\fR]... [\fI\,FILE\/\fR]...
.SH DESCRIPTION
.\" Add any additional description here
.PP
Write lines consisting of the sequentially corresponding lines from
each FILE, separated by TABs, to standard output.
.PP
With no FILE, or when FILE is \-, read standard input.
.PP
Mandatory arguments to long options are mandatory for short options too.
.TP
\fB\-d\fR, \fB\-\-delimiters\fR=\fI\,LIST\/\fR
reuse characters from LIST instead of TABs
.TP
\fB\-s\fR, \fB\-\-serial\fR
paste one file at a time instead of in parallel
.TP
\fB\-z\fR, \fB\-\-zero\-terminated\fR
line delimiter is NUL, not newline
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-\-version\fR
output version information and exit
.SH AUTHOR
Written by David M. Ihnat and David MacKenzie.
.SH "REPORTING BUGS"
GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt;
.br
Report paste translation bugs to &lt;http://translationproject.org/team/&gt;
.SH COPYRIGHT
Copyright \(co 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
Full documentation at: &lt;http://www.gnu.org/software/coreutils/paste&gt;
.br
or available locally via: info \(aq(coreutils) paste invocation\(aq
.\" patch man page
.ds = \-\^\-
.de Sp
.if t .sp .3
.if n .sp
..
.TH PATCH 1 "" GNU
.SH NAME
patch \- apply a diff file to an original
.SH SYNOPSIS
.B patch
.RI [ options ]
.RI [ originalfile
.RI [ patchfile ]]
.Sp
but usually just
.Sp
.BI "patch \-p" "num"
.BI &lt; patchfile
.SH DESCRIPTION
.B patch
takes a patch file
.I patchfile
containing a difference listing produced by the
.B diff
program and applies those differences to one or more original files,
producing patched versions.
Normally the patched versions are put in place of the originals.
Backups can be made; see the
.B \-b
or
.B \*=backup
option.
The names of the files to be patched are usually taken from the patch file,
but if there's just one file to be patched it can be specified on the
command line as
.IR originalfile .
.PP
Upon startup, patch attempts to determine the type of the diff listing,
unless overruled by a
\fB\-c\fP (\fB\*=context\fP),
\fB\-e\fP (\fB\*=ed\fP),
\fB\-n\fP (\fB\*=normal\fP),
or
\fB\-u\fP (\fB\*=unified\fP)
option.
Context diffs (old-style, new-style, and unified) and
normal diffs are applied by the
.B patch
program itself, while
.B ed
diffs are simply fed to the
.BR ed (1)
editor via a pipe.
.PP
.B patch
tries to skip any leading garbage, apply the diff,
and then skip any trailing garbage.
Thus you could feed an article or message containing a
diff listing to
.BR patch ,
and it should work.
If the entire diff is indented by a consistent amount, if lines end in \s-1CRLF\s0,
or if a diff is encapsulated one or more times by prepending
"\fB\- \fP" to lines starting with "\fB\-\fP" as specified by Internet RFC 934,
this is taken into account.
After removing indenting or encapsulation,
lines beginning with
.B #
are ignored, as they are considered to be comments.
.PP
With context diffs, and to a lesser extent with normal diffs,
.B patch
can detect when the line numbers mentioned in the patch are incorrect,
and attempts to find the correct place to apply each hunk of the patch.
As a first guess, it takes the line number mentioned for the hunk, plus or
minus any offset used in applying the previous hunk.
If that is not the correct place,
.B patch
scans both forwards and backwards for a set of lines matching the context
given in the hunk.
First
.B patch
looks for a place where all lines of the context match.
If no such place is found, and it's a context diff, and the maximum fuzz factor
is set to 1 or more, then another scan takes place ignoring the first and last
line of context.
If that fails, and the maximum fuzz factor is set to 2 or more,
the first two and last two lines of context are ignored,
and another scan is made.
(The default maximum fuzz factor is 2.)
.PP
Hunks with less prefix context than suffix context (after applying fuzz)
must apply at the start of the file if their first line number is\ 1.  Hunks
with more prefix context than suffix context (after applying fuzz) must apply
at the end of the file.
.PP
If
.B patch
cannot find a place to install that hunk of the patch, it puts the
hunk out to a reject file, which normally is the name of the output file
plus a
.B \&amp;.rej
suffix, or
.B #
if
.B \&amp;.rej
would generate a file name that is too long
(if even appending the single character
.B #
makes the file name too long, then
.B #
replaces the file name's last character).
.PP
The rejected hunk comes out in unified or context diff format.
If the input was a normal diff, many of the contexts are simply null.
The line numbers on the hunks in the reject file may be different than
in the patch file: they reflect the approximate location patch thinks the
failed hunks belong in the new file rather than the old one.
.PP
As each hunk is completed, you are told if the hunk
failed, and if so which line (in the new file)
.B patch
thought the hunk should go on.
If the hunk is installed at a different line
from the line number specified in the diff, you
are told the offset.
A single large offset
.I may
indicate that a hunk was installed in the
wrong place.
You are also told if a fuzz factor was used to make the match, in which
case you should also be slightly suspicious.
If the
.B \*=verbose
option is given, you are also told about hunks that match exactly.
.PP
If no original file
.I origfile
is specified on the command line,
.B patch
tries to figure out from the leading garbage what the name of the file
to edit is, using the following rules.
.LP
First,
.B patch
takes an ordered list of candidate file names as follows:
.TP 3
.B " \(bu"
If the header is that of a context diff,
.B patch
takes the old and new file names in the header.
A name is ignored if it does not have enough slashes to satisfy the
.BI \-p num
or
.BI \*=strip= num
option.
The name
.B /dev/null
is also ignored.
.TP
.B " \(bu"
If there is an
.B Index:\&amp;
line in the leading garbage
and if either the old and new names are both absent or if
.B patch
is conforming to \s-1POSIX\s0,
.B patch
takes the name in the
.B Index:\&amp;
line.
.TP
.B " \(bu"
For the purpose of the following rules,
the candidate file names are considered to be in the order (old, new, index),
regardless of the order that they appear in the header.
.LP
Then
.B patch
selects a file name from the candidate list as follows:
.TP 3
.B " \(bu"
If some of the named files exist,
.B patch
selects the first name if conforming to \s-1POSIX\s0,
and the best name otherwise.
.TP
.B " \(bu"
If
.B patch
is not ignoring \s-1RCS\s0, ClearCase, Perforce, and \s-1SCCS\s0 (see the
.BI "\-g\ " num
or
.BI \*=get= num
option), and no named files exist
but an \s-1RCS\s0, ClearCase, Perforce, or \s-1SCCS\s0 master is found,
.B patch
selects the first named file
with an \s-1RCS\s0, ClearCase, Perforce, or \s-1SCCS\s0 master.
.TP
.B " \(bu"
If no named files exist,
no \s-1RCS\s0, ClearCase, Perforce, or \s-1SCCS\s0 master was found,
some names are given,
.B patch
is not conforming to \s-1POSIX\s0,
and the patch appears to create a file,
.B patch
selects the best name requiring the creation of the fewest directories.
.TP
.B " \(bu"
If no file name results from the above heuristics, you are asked
for the name of the file to patch, and
.B patch
selects that name.
.LP
To determine the
.I best
of a nonempty list of file names,
.B patch
first takes all the names with the fewest path name components;
of those, it then takes all the names with the shortest basename;
of those, it then takes all the shortest names;
finally, it takes the first remaining name.
.PP
Additionally, if the leading garbage contains a
.B Prereq:\&amp;
line,
.B patch
takes the first word from the prerequisites line (normally a version
number) and checks the original file to see if that word can be found.
If not,
.B patch
asks for confirmation before proceeding.
.PP
The upshot of all this is that you should be able to say, while in a news
interface, something like the following:
.Sp
.RS
\fB| patch \-d /usr/src/local/blurfl\fP
.RE
.Sp
and patch a file in the
.B blurfl
directory directly from the article containing
the patch.
.PP
If the patch file contains more than one patch,
.B patch
tries to apply each of them as if they came from separate patch files.
This means, among other things, that it is assumed that the name of the file
to patch must be determined for each diff listing,
and that the garbage before each diff listing
contains interesting things such as file names and revision level, as
mentioned previously.
.SH OPTIONS
.TP 3
\fB\-b\fP  or  \fB\*=backup\fP
Make backup files.
That is, when patching a file,
rename or copy the original instead of removing it.
When backing up a file that does not exist,
an empty, unreadable backup file is created
as a placeholder to represent the nonexistent file.
See the
.B \-V
or
.B \*=version\-control
option for details about how backup file names are determined.
.TP
.B \*=backup\-if\-mismatch
Back up a file if the patch does not match the file exactly
and if backups are not otherwise requested.
This is the default unless
.B patch
is conforming to \s-1POSIX\s0.
.TP
.B \*=no\-backup\-if\-mismatch
Do not back up a file if the patch does not match the file exactly
and if backups are not otherwise requested.
This is the default if
.B patch
is conforming to \s-1POSIX\s0.
.TP
\fB\-B\fP \fIpref\fP  or  \fB\*=prefix=\fP\fIpref\fP
Use the
.B simple
method to determine backup file names (see the
.BI "\-V " method
or
.BI "\*=version\-control " method
option), and append
.I pref
to a file name when generating its backup file name.
For example, with
.B "\-B\ /junk/"
the simple backup file name for
.B src/patch/util.c
is
.BR /junk/src/patch/util.c .
.TP
\fB\*=binary\fP
Write all files in binary mode, except for standard output and
.BR /dev/tty .
When reading, disable the heuristic for transforming CRLF line endings into LF
line endings.  This option is needed on \s-1POSIX\s0 systems when applying patches
generated on non-\s-1POSIX\s0 systems to non-\s-1POSIX\s0 files.
(On \s-1POSIX\s0 systems, file reads and writes never transform line
endings. On Windows, reads and writes do transform line endings by default,
and patches should be generated by
.B "diff\ \*=binary"
when line endings are significant.)
.TP
\fB\-c\fP  or  \fB\*=context\fP
Interpret the patch file as a ordinary context diff.
.TP
\fB\-d\fP \fIdir\fP  or  \fB\*=directory=\fP\fIdir\fP
Change to the directory
.I dir
immediately, before doing
anything else.
.TP
\fB\-D\fP \fIdefine\fP  or  \fB\*=ifdef=\fP\fIdefine\fP
Use the
.BR #ifdef " .\|.\|. " #endif
construct to mark changes, with
.I define
as the differentiating symbol.
.TP
.B "\*=dry\-run"
Print the results of applying the patches without actually changing any files.
.TP
\fB\-e\fP  or  \fB\*=ed\fP
Interpret the patch file as an
.B ed
script.
.TP
\fB\-E\fP  or  \fB\*=remove\-empty\-files\fP
Remove output files that are empty after the patches have been applied.
Normally this option is unnecessary, since
.B patch
can examine the time stamps on the header to determine whether a file
should exist after patching.
However, if the input is not a context diff or if
.B patch
is conforming to \s-1POSIX\s0,
.B patch
does not remove empty patched files unless this option is given.
When
.B patch
removes a file, it also attempts to remove any empty ancestor directories.
.TP
\fB\-f\fP  or  \fB\*=force\fP
Assume that the user knows exactly what he or she is doing, and do not
ask any questions.  Skip patches whose headers
do not say which file is to be patched; patch files even though they have the
wrong version for the
.B Prereq:\&amp;
line in the patch; and assume that
patches are not reversed even if they look like they are.
This option does not suppress commentary; use
.B \-s
for that.
.TP
\fB\-F\fP \fInum\fP  or  \fB\*=fuzz=\fP\fInum\fP
Set the maximum fuzz factor.
This option only applies to diffs that have context, and causes
.B patch
to ignore up to that many lines of context in looking for places to install a hunk.
Note that a larger fuzz factor increases the odds of a faulty patch.
The default fuzz factor is 2.  A fuzz factor greater than or equal to the
number of lines of context in the context diff, ordinarily 3, ignores all
context.
.TP
\fB\-g\fP \fInum\fP  or  \fB\*=get=\fP\fInum\fP
This option controls
.BR patch 's
actions when a file is under \s-1RCS\s0 or \s-1SCCS\s0 control,
and does not exist or is read-only and matches the default version,
or when a file is under ClearCase or Perforce control and does not exist.
If
.I num
is positive,
.B patch
gets (or checks out) the file from the revision control system; if zero,
.B patch
ignores \s-1RCS\s0, ClearCase, Perforce, and \s-1SCCS\s0
and does not get the file; and if negative,
.B patch
asks the user whether to get the file.
The default value of this option is given by the value of the
.B PATCH_GET
environment variable if it is set; if not, the default value is zero.
.TP
.B "\*=help"
Print a summary of options and exit.
.TP
\fB\-i\fP \fIpatchfile\fP  or  \fB\*=input=\fP\fIpatchfile\fP
Read the patch from
.IR patchfile .
If
.I patchfile
is
.BR \- ,
read from standard input, the default.
.TP
\fB\-l\fP  or  \fB\*=ignore\-whitespace\fP
Match patterns loosely, in case tabs or spaces
have been munged in your files.
Any sequence of one or more blanks in the patch file matches any sequence
in the original file, and sequences of blanks at the ends of lines are ignored.
Normal characters must still match exactly.
Each line of the context must still match a line in the original file.
.TP
\fB\*=merge\fP or \fB\*=merge=merge\fP or \fB\*=merge=diff3\fP
Merge a patch file into the original files similar to \fBdiff3\fP(1) or
\fBmerge\fP(1).  If a conflict is found, \fBpatch\fP outputs a warning and
brackets the conflict with \fB&lt;&lt;&lt;&lt;&lt;&lt;&lt;\fP and \fB&gt;&gt;&gt;&gt;&gt;&gt;&gt;\fP lines.
A typical conflict will look like this:
.LP
.RS
.nf
.B &lt;&lt;&lt;&lt;&lt;&lt;&lt;
.I lines from the original file
.B |||||||
.I original lines from the patch
.B =======
.I new lines from the patch
.B &gt;&gt;&gt;&gt;&gt;&gt;&gt;
.RE
.fi
.IP "" 3
The optional argument of \fB\*=merge\fP determines the output format for
conflicts: the diff3 format shows the \fB|||||||\fP section with the original
lines from the patch; in the merge format, this section is missing.  The merge
format is the default.

This option implies \fB\*=forward\fP and does not take the
\fB--fuzz\fR=\fInum\fP option into account.
.TP
\fB\-n\fP  or  \fB\*=normal\fP
Interpret the patch file as a normal diff.
.TP
\fB\-N\fP  or  \fB\*=forward\fP
When a patch does not apply, patch usually checks if the patch looks like it
has been reversed.  The \fB\*=forward\fP option prevents that.
See also
.BR \-R .
.TP
\fB\-o\fP \fIoutfile\fP  or  \fB\*=output=\fP\fIoutfile\fP
Send output to
.I outfile
instead of patching files in place.
Do not use this option if
.I outfile
is one of the files to be patched.
When \fIoutfile\fP is \fB\-\fP, send output to standard output, and send any
messages that would usually go to standard output to standard error.
.TP
\fB\-p\fP\fInum\fP  or  \fB\*=strip\fP\fB=\fP\fInum\fP
Strip the smallest prefix containing
.I num
leading slashes from each file name found in the patch file.
A sequence of one or more adjacent slashes is counted as a single slash.
This controls how file names found in the patch file are treated, in case
you keep your files in a different directory than the person who sent
out the patch.
For example, supposing the file name in the patch file was
.Sp
.RS
\fB/u/howard/src/blurfl/blurfl.c\fP
.RE
.Sp
setting
.B \-p0
gives the entire file name unmodified,
.B \-p1
gives
.Sp
.RS
\fBu/howard/src/blurfl/blurfl.c\fP
.RE
.Sp
without the leading slash,
.B \-p4
gives
.Sp
.RS
\fBblurfl/blurfl.c\fP
.RE
.Sp
and not specifying
.B \-p
at all just gives you \fBblurfl.c\fP.
Whatever you end up with is looked for either in the current directory,
or the directory specified by the
.B \-d
option.
.TP
.B \*=posix
Conform more strictly to the \s-1POSIX\s0 standard, as follows.
.RS
.TP 3
.B " \(bu"
Take the first existing file from the list (old, new, index)
when intuiting file names from diff headers.
.TP
.B " \(bu"
Do not remove files that are empty after patching.
.TP
.B " \(bu"
Do not ask whether to get files from \s-1RCS\s0, ClearCase, Perforce,
or \s-1SCCS\s0.
.TP
.B " \(bu"
Require that all options precede the files in the command line.
.TP
.B " \(bu"
Do not backup files when there is a mismatch.
.RE
.TP
.BI \*=quoting\-style= word
Use style
.I word
to quote output names.
The
.I word
should be one of the following:
.RS
.TP
.B literal
Output names as-is.
.TP
.B shell
Quote names for the shell if they contain shell metacharacters or would
cause ambiguous output.
.TP
.B shell-always
Quote names for the shell, even if they would normally not require quoting.
.TP
.B c
Quote names as for a C language string.
.TP
.B escape
Quote as with
.B c
except omit the surrounding double-quote characters.
.LP
You can specify the default value of the
.B \*=quoting\-style
option with the environment variable
.BR QUOTING_STYLE .
If that environment variable is not set, the default value is
.BR shell .
.RE
.TP
\fB\-r\fP \fIrejectfile\fP  or  \fB\*=reject\-file=\fP\fIrejectfile\fP
Put rejects into
.I rejectfile
instead of the default
.B \&amp;.rej
file.  When \fIrejectfile\fP is \fB\-\fP, discard rejects.
.TP
\fB\-R\fP  or  \fB\*=reverse\fP
Assume that this patch was created with the old and new files swapped.
(Yes, I'm afraid that does happen occasionally, human nature being what it
is.)
.B patch
attempts to swap each hunk around before applying it.
Rejects come out in the swapped format.
The
.B \-R
option does not work with
.B ed
diff scripts because there is too little
information to reconstruct the reverse operation.
.Sp
If the first hunk of a patch fails,
.B patch
reverses the hunk to see if it can be applied that way.
If it can, you are asked if you want to have the
.B \-R
option set.
If it can't, the patch continues to be applied normally.
(Note: this method cannot detect a reversed patch if it is a normal diff
and if the first command is an append (i.e. it should have been a delete)
since appends always succeed, due to the fact that a null context matches
anywhere.
Luckily, most patches add or change lines rather than delete them, so most
reversed normal diffs begin with a delete, which fails, triggering
the heuristic.)
.TP
\fB\*=read\-only=\fP\fIbehavior\fP
Behave as requested when trying to modify a read-only file: \fBignore\fP the
potential problem, \fBwarn\fP about it (the default), or \fBfail\fP.
.TP
\fB\*=reject\-format=\fP\fIformat\fP
Produce reject files in the specified \fIformat\fP (either \fBcontext\fP or
\fBunified\fP).  Without this option, rejected hunks come out in unified diff
format if the input patch was of that format, otherwise in ordinary context
diff form.
.TP
\fB\-s\fP  or  \fB\*=silent\fP  or  \fB\*=quiet\fP
Work silently, unless an error occurs.
.TP
\fB\*=follow\-symlinks\fP
When looking for input files, follow symbolic links.  Replaces the symbolic
links, instead of modifying the files the symbolic links point to.  Git-style
patches to symbolic links will no longer apply.  This option exists for
backwards compatibility with previous versions of patch; its use is
discouraged.
.TP
\fB\-t\fP  or  \fB\*=batch\fP
Suppress questions like
.BR \-f ,
but make some different assumptions:
skip patches whose headers do not contain file names (the same as \fB\-f\fP);
skip patches for which the file has the wrong version for the
.B Prereq:\&amp;
line
in the patch; and assume that patches are reversed if they look like
they are.
.TP
\fB\-T\fP  or  \fB\*=set\-time\fP
Set the modification and access times of patched files from time stamps
given in context diff headers.  Unless specified in the time stamps,
assume that the context diff headers use local time.
.Sp
Use of this option with time stamps that do not include time zones is
not recommended, because patches using local time cannot easily be used
by people in other time zones, and because local time stamps are
ambiguous when local clocks move backwards during daylight-saving time
adjustments.  Make sure that time stamps include time zones, or generate
patches with \s-1UTC\s0 and use the
.B \-Z
or
.B \*=set\-utc
option instead.
.TP
\fB\-u\fP  or  \fB\*=unified\fP
Interpret the patch file as a unified context diff.
.TP
\fB\-v\fP  or  \fB\*=version\fP
Print out
.BR patch 's
revision header and patch level, and exit.
.TP
\fB\-V\fP \fImethod\fP  or  \fB\*=version\-control=\fP\fImethod\fP
Use
.I method
to determine
backup file names.  The method can also be given by the
.B PATCH_VERSION_CONTROL
(or, if that's not set, the
.BR VERSION_CONTROL )
environment variable, which is overridden by this option.
The method does not affect whether backup files are made;
it affects only the names of any backup files that are made.
.Sp
The value of
.I method
is like the \s-1GNU\s0
Emacs `version-control' variable;
.B patch
also recognizes synonyms that
are more descriptive.  The valid values for
.I method
are (unique abbreviations are
accepted):
.RS
.TP 3
\fBexisting\fP  or  \fBnil\fP
Make numbered backups of files that already have them,
otherwise simple backups.
This is the default.
.TP
\fBnumbered\fP  or  \fBt\fP
Make numbered backups.  The numbered backup file name for
.I F
is
.IB F .~ N ~
where
.I N
is the version number.
.TP
\fBsimple\fP  or  \fBnever\fP
Make simple backups.
The
.B \-B
or
.BR \*=prefix ,
.B \-Y
or
.BR \*=basename\-prefix ,
and
.B \-z
or
.BR \*=suffix
options specify the simple backup file name.
If none of these options are given, then a simple backup suffix is used;
it is the value of the
.B SIMPLE_BACKUP_SUFFIX
environment variable if set, and is
.B \&amp;.orig
otherwise.
.PP
With numbered or simple backups,
if the backup file name is too long, the backup suffix
.B ~
is used instead; if even appending
.B ~
would make the name too long, then
.B ~
replaces the last character of the file name.
.RE
.TP
\fB\*=verbose\fP
Output extra information about the work being done.
.TP
\fB\-x\fP \fInum\fP  or  \fB\*=debug=\fP\fInum\fP
Set internal debugging flags of interest only to
.B patch
patchers.
.TP
\fB\-Y\fP \fIpref\fP  or  \fB\*=basename\-prefix=\fP\fIpref\fP
Use the
.B simple
method to determine backup file names (see the
.BI "\-V " method
or
.BI "\*=version\-control " method
option), and prefix
.I pref
to the basename of a file name when generating its backup file name.
For example, with
.B "\-Y\ .del/"
the simple backup file name for
.B src/patch/util.c
is
.BR src/patch/.del/util.c .
.TP
\fB\-z\fP \fIsuffix\fP  or  \fB\*=suffix=\fP\fIsuffix\fP
Use the
.B simple
method to determine backup file names (see the
.BI "\-V " method
or
.BI "\*=version\-control " method
option), and use
.I suffix
as the suffix.
For example, with
.B "\-z\ -"
the backup file name for
.B src/patch/util.c
is
.BR src/patch/util.c- .
.TP
\fB\-Z\fP  or  \fB\*=set\-utc\fP
Set the modification and access times of patched files from time stamps
given in context diff headers. Unless specified in the time stamps,
assume that the context diff headers use Coordinated Universal Time
(\s-1UTC\s0, often known as \s-1GMT\s0).  Also see the
.B \-T
or
.B \*=set\-time
option.
.Sp
The
.B \-Z
or
.B \*=set\-utc
and
.B \-T
or
.B \*=set\-time
options normally refrain from setting a file's time if the file's original time
does not match the time given in the patch header, or if its
contents do not match the patch exactly.  However, if the
.B \-f
or
.B \*=force
option is given, the file time is set regardless.
.Sp
Due to the limitations of
.B diff
output format, these options cannot update the times of files whose
contents have not changed.  Also, if you use these options, you should remove
(e.g. with
.BR "make\ clean" )
all files that depend on the patched files, so that later invocations of
.B make
do not get confused by the patched files' times.
.SH ENVIRONMENT
.TP 3
.B PATCH_GET
This specifies whether
.B patch
gets missing or read-only files from \s-1RCS\s0, ClearCase, Perforce,
or \s-1SCCS\s0
by default; see the
.B \-g
or
.B \*=get
option.
.TP
.B POSIXLY_CORRECT
If set,
.B patch
conforms more strictly to the \s-1POSIX\s0 standard by default:
see the
.B \*=posix
option.
.TP
.B QUOTING_STYLE
Default value of the
.B \*=quoting\-style
option.
.TP
.B SIMPLE_BACKUP_SUFFIX
Extension to use for simple backup file names instead of
.BR \&amp;.orig .
.TP
\fBTMPDIR\fP, \fBTMP\fP, \fBTEMP\fP
Directory to put temporary files in;
.B patch
uses the first environment variable in this list that is set.
If none are set, the default is system-dependent;
it is normally
.B /tmp
on Unix hosts.
.TP
\fBVERSION_CONTROL\fP or \fBPATCH_VERSION_CONTROL\fP
Selects version control style; see the
.B \-v
or
.B \*=version\-control
option.
.SH FILES
.TP 3
.IB $TMPDIR "/p*"
temporary files
.TP
.B /dev/tty
controlling terminal; used to get answers to questions asked of the user
.SH "SEE ALSO"
.BR diff (1),
.BR ed (1),
.BR merge (1).
.Sp
Marshall T. Rose and Einar A. Stefferud,
Proposed Standard for Message Encapsulation,
Internet RFC 934 &lt;URL:ftp://ftp.isi.edu/in-notes/rfc934.txt&gt; (1985-01).
.SH "NOTES FOR PATCH SENDERS"
There are several things you should bear in mind if you are going to
be sending out patches.
.PP
Create your patch systematically.
A good method is the command
.BI "diff\ \-Naur\ " "old\ new"
where
.I old
and
.I new
identify the old and new directories.
The names
.I old
and
.I new
should not contain any slashes.
The
.B diff
command's headers should have dates
and times in Universal Time using traditional Unix format,
so that patch recipients can use the
.B \-Z
or
.B \*=set\-utc
option.
Here is an example command, using Bourne shell syntax:
.Sp
.RS
\fBLC_ALL=C TZ=UTC0 diff \-Naur gcc\-2.7 gcc\-2.8\fP
.RE
.PP
Tell your recipients how to apply the patch
by telling them which directory to
.B cd
to, and which
.B patch
options to use.  The option string
.B "\-Np1"
is recommended.
Test your procedure by pretending to be a recipient and applying
your patch to a copy of the original files.
.PP
You can save people a lot of grief by keeping a
.B patchlevel.h
file which is patched to increment the patch level
as the first diff in the patch file you send out.
If you put a
.B Prereq:\&amp;
line in with the patch, it won't let them apply
patches out of order without some warning.
.PP
You can create a file by sending out a diff that compares
.B /dev/null
or an empty file dated the Epoch (1970-01-01 00:00:00 \s-1UTC\s0)
to the file you want to create.
This only works if the file you want to create doesn't exist already in
the target directory.
Conversely, you can remove a file by sending out a context diff that compares
the file to be deleted with an empty file dated the Epoch.
The file will be removed unless
.B patch
is conforming to \s-1POSIX\s0 and the
.B \-E
or
.B \*=remove\-empty\-files
option is not given.
An easy way to generate patches that create and remove files
is to use \s-1GNU\s0
.BR diff 's
.B \-N
or
.B \*=new\-file
option.
.PP
If the recipient is supposed to use the
.BI \-p N
option, do not send output that looks like this:
.Sp
.RS
.ft CW
.ne 3
diff \-Naur v2.0.29/prog/README prog/README
.br
\-\^\-\^\- v2.0.29/prog/README   Mon Mar 10 15:13:12 1997
.br
+\^+\^+ prog/README   Mon Mar 17 14:58:22 1997
.ft
.RE
.Sp
because the two file names have different numbers of slashes,
and different versions of
.B patch
interpret the file names differently.
To avoid confusion, send output that looks like this instead:
.Sp
.RS
.ft CW
.ne 3
diff \-Naur v2.0.29/prog/README v2.0.30/prog/README
.br
\-\^\-\^\- v2.0.29/prog/README   Mon Mar 10 15:13:12 1997
.br
+\^+\^+ v2.0.30/prog/README   Mon Mar 17 14:58:22 1997
.ft
.RE
.Sp
.PP
Avoid sending patches that compare backup file names like
.BR README.orig ,
since this might confuse
.B patch
into patching a backup file instead of the real file.
Instead, send patches that compare the same base file names
in different directories, e.g.\&amp;
.B old/README
and
.BR new/README .
.PP
Take care not to send out reversed patches, since it makes people wonder
whether they already applied the patch.
.PP
Try not to have your patch modify derived files
(e.g. the file
.B configure
where there is a line
.B "configure: configure.in"
in your makefile), since the recipient should be
able to regenerate the derived files anyway.
If you must send diffs of derived files,
generate the diffs using \s-1UTC\s0,
have the recipients apply the patch with the
.B \-Z
or
.B \*=set\-utc
option, and have them remove any unpatched files that depend on patched files
(e.g. with
.BR "make\ clean" ).
.PP
While you may be able to get away with putting 582 diff listings into
one file, it may be wiser to group related patches into separate files in
case something goes haywire.
.SH DIAGNOSTICS
Diagnostics generally indicate that
.B patch
couldn't parse your patch file.
.PP
If the
.B \*=verbose
option is given, the message
.B Hmm.\|.\|.\&amp;
indicates that there is unprocessed text in
the patch file and that
.B patch
is attempting to intuit whether there is a patch in that text and, if so,
what kind of patch it is.
.PP
.BR patch 's
exit status is
0 if all hunks are applied successfully,
1 if some hunks cannot be applied or there were merge conflicts,
and 2 if there is more serious trouble.
When applying a set of patches in a loop it behooves you to check this
exit status so you don't apply a later patch to a partially patched file.
.SH CAVEATS
Context diffs cannot reliably represent the creation or deletion of
empty files, empty directories, or special files such as symbolic links.
Nor can they represent changes to file metadata like ownership, permissions,
or whether one file is a hard link to another.
If changes like these are also required, separate instructions
(e.g. a shell script) to accomplish them should accompany the patch.
.PP
.B patch
cannot tell if the line numbers are off in an
.B ed
script, and can detect
bad line numbers in a normal diff only when it finds a change or deletion.
A context diff using fuzz factor 3 may have the same problem.
You should probably do
a context diff in these cases to see if the changes made sense.
Of course, compiling without errors is a pretty good indication that the patch
worked, but not always.
.PP
.B patch
usually produces the correct results, even when it has to do a lot of
guessing.
However, the results are guaranteed to be correct only when the patch is
applied to exactly the same version of the file that the patch was
generated from.
.SH "COMPATIBILITY ISSUES"
The \s-1POSIX\s0 standard specifies behavior that differs from
.BR patch 's
traditional behavior.
You should be aware of these differences if you must interoperate with
.B patch
versions 2.1 and earlier, which do not conform to \s-1POSIX\s0.
.TP 3
.B " \(bu"
In traditional
.BR patch ,
the
.B \-p
option's operand was optional, and a bare
.B \-p
was equivalent to
.BR \-p0.
The
.B \-p
option now requires an operand, and
.B "\-p\ 0"
is now equivalent to
.BR \-p0 .
For maximum compatibility, use options like
.B \-p0
and
.BR \-p1 .
.Sp
Also,
traditional
.B patch
simply counted slashes when stripping path prefixes;
.B patch
now counts pathname components.
That is, a sequence of one or more adjacent slashes
now counts as a single slash.
For maximum portability, avoid sending patches containing
.B //
in file names.
.TP
.B " \(bu"
In traditional
.BR patch ,
backups were enabled by default.
This behavior is now enabled with the
.B \-b
or
.B \*=backup
option.
.Sp
Conversely, in \s-1POSIX\s0
.BR patch ,
backups are never made, even when there is a mismatch.
In \s-1GNU\s0
.BR patch ,
this behavior is enabled with the
.B \*=no\-backup\-if\-mismatch
option, or by conforming to \s-1POSIX\s0 with the
.B \*=posix
option or by setting the
.B POSIXLY_CORRECT
environment variable.
.Sp
The
.BI \-b "\ suffix"
option
of traditional
.B patch
is equivalent to the
.BI "\-b\ \-z" "\ suffix"
options of \s-1GNU\s0
.BR patch .
.TP
.B " \(bu"
Traditional
.B patch
used a complicated (and incompletely documented) method
to intuit the name of the file to be patched from the patch header.
This method did not conform to \s-1POSIX\s0, and had a few gotchas.
Now
.B patch
uses a different, equally complicated (but better documented) method
that is optionally \s-1POSIX\s0-conforming; we hope it has
fewer gotchas.  The two methods are compatible if the
file names in the context diff header and the
.B Index:\&amp;
line are all identical after prefix-stripping.
Your patch is normally compatible if each header's file names
all contain the same number of slashes.
.TP
.B " \(bu"
When traditional
.B patch
asked the user a question, it sent the question to standard error
and looked for an answer from
the first file in the following list that was a terminal:
standard error, standard output,
.BR /dev/tty ,
and standard input.
Now
.B patch
sends questions to standard output and gets answers from
.BR /dev/tty .
Defaults for some answers have been changed so that
.B patch
never goes into an infinite loop when using default answers.
.TP
.B " \(bu"
Traditional
.B patch
exited with a status value that counted the number of bad hunks,
or with status 1 if there was real trouble.
Now
.B patch
exits with status 1 if some hunks failed,
or with 2 if there was real trouble.
.TP
.B " \(bu"
Limit yourself to the following options when sending instructions
meant to be executed by anyone running \s-1GNU\s0
.BR patch ,
traditional
.BR patch ,
or a
.B patch
that conforms to \s-1POSIX\s0.
Spaces are significant in the following list, and operands are required.
.Sp
.nf
.in +3
.ne 11
.B \-c
.BI \-d " dir"
.BI \-D " define"
.B \-e
.B \-l
.B \-n
.B \-N
.BI \-o " outfile"
.BI \-p num
.B \-R
.BI \-r " rejectfile"
.in
.fi
.SH BUGS
Please report bugs via email to
.BR &lt;bug-patch@gnu.org&gt; .
.PP
If code has been duplicated (for instance with
\fB#ifdef OLDCODE\fP .\|.\|. \fB#else .\|.\|. #endif\fP),
.B patch
is incapable of patching both versions, and, if it works at all, will likely
patch the wrong one, and tell you that it succeeded to boot.
.PP
If you apply a patch you've already applied,
.B patch
thinks it is a reversed patch, and offers to un-apply the patch.
This could be construed as a feature.
.PP
Computing how to merge a hunk is significantly harder than using the standard
fuzzy algorithm.  Bigger hunks, more context, a bigger offset from the
original location, and a worse match all slow the algorithm down.
.SH COPYING
Copyright
.ie t \(co
.el (C)
1984, 1985, 1986, 1988 Larry Wall.
.br
Copyright
.ie t \(co
.el (C)
1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
2000, 2001, 2002, 2009 Free Software Foundation, Inc.
.PP
Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.
.PP
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the
entire resulting derived work is distributed under the terms of a
permission notice identical to this one.
.PP
Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be included in
translations approved by the copyright holders instead of in
the original English.
.SH AUTHORS
Larry Wall wrote the original version of
.BR patch .
Paul Eggert removed
.BR patch 's
arbitrary limits; added support for binary files,
setting file times, and deleting files;
and made it conform better to \s-1POSIX\s0.
Other contributors include Wayne Davison, who added unidiff support,
and David MacKenzie, who added configuration and backup support.
Andreas Gr\[:u]nbacher added support for merging.
.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.
.TH PATHCHK "1" "March 2017" "GNU coreutils 8.27" "User Commands"
.SH NAME
pathchk \- check whether file names are valid or portable
.SH SYNOPSIS
.B pathchk
[\fI\,OPTION\/\fR]... \fI\,NAME\/\fR...
.SH DESCRIPTION
.\" Add any additional description here
.PP
Diagnose invalid or unportable file names.
.TP
\fB\-p\fR
check for most POSIX systems
.TP
\fB\-P\fR
check for empty names and leading "\-"
.TP
\fB\-\-portability\fR
check for all POSIX systems (equivalent to \fB\-p\fR \fB\-P\fR)
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-\-version\fR
output version information and exit
.SH AUTHOR
Written by Paul Eggert, David MacKenzie, and Jim Meyering.
.SH "REPORTING BUGS"
GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt;
.br
Report pathchk translation bugs to &lt;http://translationproject.org/team/&gt;
.SH COPYRIGHT
Copyright \(co 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
Full documentation at: &lt;http://www.gnu.org/software/coreutils/pathchk&gt;
.br
or available locally via: info \(aq(coreutils) pathchk invocation\(aq
'\" et
.TH PAX "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
pax
\(em portable archive interchange
.SH SYNOPSIS
.LP
.nf
pax \fB[\fR\(midv\fB] [\fR\(mic|\(min\fB] [\fR\(miH|\(miL\fB] [\fR\(mio \fIoptions\fB] [\fR\(mif \fIarchive\fB] [\fR\(mis \fIreplstr\fB]\fR...
\fB[\fIpattern\fR...\fB]\fR
.P
pax \(mir\fB[\fR\(mic|\(min\fB] [\fR\(midikuv\fB] [\fR\(miH|\(miL\fB] [\fR\(mif \fIarchive\fB] [\fR\(mio \fIoptions\fB]\fR... \fB[\fR\(mip \fIstring\fB]\fR...
\fB[\fR\(mis \fIreplstr\fB]\fR... \fB[\fIpattern\fR...\fB]\fR
.P
pax \(miw \fB[\fR\(midituvX\fB] [\fR\(miH|\(miL\fB] [\fR\(mib \fIblocksize\fB] [[\fR\(mia\fB] [\fR\(mif \fIarchive\fB]] [\fR\(mio \fIoptions\fB]\fR...
\fB[\fR\(mis \fIreplstr\fB]\fR... \fB[\fR\(mix \fIformat\fB] [\fIfile\fR...\fB]\fR
.P
pax \(mir \(miw \fB[\fR\(midiklntuvX\fB] [\fR\(miH|\(miL\fB] [\fR\(mio \fIoptions\fB]\fR... \fB[\fR\(mip \fIstring\fB]\fR...
\fB[\fR\(mis \fIreplstr\fB]\fR... \fB[\fIfile\fR...\fB] \fIdirectory\fR
.fi
.SH DESCRIPTION
The
.IR pax
utility shall read, write, and write lists of the members of archive
files and copy directory hierarchies. A variety of archive formats
shall be supported; see the
.BR \(mix
.IR format
option.
.P
The action to be taken depends on the presence of the
.BR \(mir
and
.BR \(miw
options. The four combinations of
.BR \(mir
and
.BR \(miw
are referred to as the four modes of operation:
.BR list ,
.BR read ,
.BR write ,
and
.BR copy
modes, corresponding respectively to the four forms shown in the
SYNOPSIS section.
.IP "\fBlist\fP" 10
In
.BR list
mode (when neither
.BR \(mir
nor
.BR \(miw
are specified),
.IR pax
shall write the names of the members of the archive file read from the
standard input, with pathnames matching the specified patterns, to
standard output. If a named file is of type directory, the file
hierarchy rooted at that file shall be listed as well.
.IP "\fBread\fP" 10
In
.BR read
mode (when
.BR \(mir
is specified, but
.BR \(miw
is not),
.IR pax
shall extract the members of the archive file read from the standard
input, with pathnames matching the specified patterns. If an extracted
file is of type directory, the file hierarchy rooted at that file shall
be extracted as well. The extracted files shall be created performing
pathname resolution with the directory in which
.IR pax
was invoked as the current working directory.
.RS 10 
.P
If an attempt is made to extract a directory when the directory
already exists, this shall not be considered an error. If
an attempt is made to extract a FIFO when the FIFO already exists,
this shall not be considered an error.
.P
The ownership, access, and modification times, and file mode of the
restored files are discussed under the
.BR \(mip
option.
.RE
.IP "\fBwrite\fP" 10
In
.BR write
mode (when
.BR \(miw
is specified, but
.BR \(mir
is not),
.IR pax
shall write the contents of the
.IR file
operands to the standard output in an archive format. If no
.IR file
operands are specified, a list of files to copy, one per line, shall be
read from the standard input and each entry in this list shall be
processed as if it had been a
.IR file
operand on the command line. A file of type directory shall include
all of the files in the file hierarchy rooted at the file.
.IP "\fBcopy\fP" 10
In
.BR copy
mode (when both
.BR \(mir
and
.BR \(miw
are specified),
.IR pax
shall copy the
.IR file
operands to the destination directory.
.RS 10 
.P
If no
.IR file
operands are specified, a list of files to copy, one per line, shall be
read from the standard input. A file of type directory shall include
all of the files in the file hierarchy rooted at the file.
.P
The effect of the
.BR copy
shall be as if the copied files were written to a
.IR pax
format archive file and then subsequently extracted, except that there
may be hard links between the original and the copied files. If the
destination directory is a subdirectory of one of the files to be
copied, the results are unspecified. If the destination directory is a
file of a type not defined by the System Interfaces volume of POSIX.1\(hy2008, the results are
implementation-defined; otherwise, it shall be an error for the file
named by the
.IR directory
operand not to exist, not be writable by the user, or not be a file of
type directory.
.RE
.P
In
.BR read
or
.BR copy
modes, if intermediate directories are necessary to extract an archive
member,
.IR pax
shall perform actions equivalent to the
\fImkdir\fR()
function defined in the System Interfaces volume of POSIX.1\(hy2008, called with the following arguments:
.IP " *" 4
The intermediate directory used as the
.IR path
argument
.IP " *" 4
The value of the bitwise-inclusive OR of S_IRWXU, S_IRWXG, and S_IRWXO
as the
.IR mode
argument
.P
If any specified
.IR pattern
or
.IR file
operands are not matched by at least one file or archive member,
.IR pax
shall write a diagnostic message to standard error for each one that
did not match and exit with a non-zero exit status.
.P
The archive formats described in the EXTENDED DESCRIPTION section shall
be automatically detected on input. The default output archive format
shall be implementation-defined.
.P
A single archive can span multiple files. The
.IR pax
utility shall determine, in an implementation-defined manner, what
file to read or write as the next file.
.P
If the selected archive format supports the specification of linked files,
it shall be an error if these files cannot be linked when the archive
is extracted. For archive formats that do not store file contents with
each name that causes a hard link, if the file that contains the data
is not extracted during this
.IR pax
session, either the data shall be restored from the original file, or a
diagnostic message shall be displayed with the name of a file that can
be used to extract the data. In traversing directories,
.IR pax
shall detect infinite loops; that is, entering a previously visited
directory that is an ancestor of the last file visited. When it detects
an infinite loop,
.IR pax
shall write a diagnostic message to standard error and shall
terminate.
.SH OPTIONS
The
.IR pax
utility shall conform to the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 12.2" ", " "Utility Syntax Guidelines",
except that the order of presentation of the
.BR \(mio ,
.BR \(mip ,
and
.BR \(mis
options is significant.
.P
The following options shall be supported:
.IP "\fB\(mir\fP" 10
Read an archive file from standard input.
.IP "\fB\(miw\fP" 10
Write files to the standard output in the specified archive format.
.IP "\fB\(mia\fP" 10
Append files to the end of the archive. It is implementation-defined
which devices on the system support appending. Additional file formats
unspecified by this volume of POSIX.1\(hy2008 may impose restrictions on appending.
.IP "\fB\(mib\ \fIblocksize\fR" 10
Block the output at a positive decimal integer number of bytes per
write to the archive file. Devices and archive formats may impose
restrictions on blocking. Blocking shall be automatically determined on
input. Conforming applications shall not specify a
.IR blocksize
value larger than 32\|256. Default blocking when creating archives
depends on the archive format. (See the
.BR \(mix
option below.)
.IP "\fB\(mic\fP" 10
Match all file or archive members except those specified by the
.IR pattern
or
.IR file
operands.
.IP "\fB\(mid\fP" 10
Cause files of type directory being copied or archived or archive
members of type directory being extracted or listed to match only the
file or archive member itself and not the file hierarchy rooted at the
file.
.IP "\fB\(mif\ \fIarchive\fR" 10
Specify the pathname of the input or output archive, overriding the
default standard input (in
.BR list
or
.BR read
modes) or standard output (\c
.BR write
mode).
.IP "\fB\(miH\fP" 10
If a symbolic link referencing a file of type directory is specified on
the command line,
.IR pax
shall archive the file hierarchy rooted in the file referenced by the
link, using the name of the link as the root of the file hierarchy.
Otherwise, if a symbolic link referencing a file of any other file type
which
.IR pax
can normally archive is specified on the command line, then
.IR pax
shall archive the file referenced by the link, using the name of the
link. The default behavior, when neither
.BR \(miH
or
.BR \(miL
are specified, shall be to archive the symbolic link itself.
.IP "\fB\(mii\fP" 10
Interactively rename files or archive members. For each archive member
matching a
.IR pattern
operand or file matching a
.IR file
operand, a prompt shall be written to the file
.BR /dev/tty .
The prompt shall contain the name of the file or archive member, but
the format is otherwise unspecified. A line shall then be read from
.BR /dev/tty .
If this line is blank, the file or archive member shall be skipped. If
this line consists of a single period, the file or archive member shall
be processed with no modification to its name. Otherwise, its name
shall be replaced with the contents of the line. The
.IR pax
utility shall immediately exit with a non-zero exit status if
end-of-file is encountered when reading a response or if
.BR /dev/tty
cannot be opened for reading and writing.
.RS 10 
.P
The results of extracting a hard link to a file that has been renamed
during extraction are unspecified.
.RE
.IP "\fB\(mik\fP" 10
Prevent the overwriting of existing files.
.IP "\fB\(mil\fP" 10
(The letter ell.) In
.BR copy
mode, hard links shall be made between the source and destination file
hierarchies whenever possible. If specified in conjunction with
.BR \(miH
or
.BR \(miL ,
when a symbolic link is encountered, the hard link created in the
destination file hierarchy shall be to the file referenced by the
symbolic link. If specified when neither
.BR \(miH
nor
.BR \(miL
is specified, when a symbolic link is encountered, the implementation
shall create a hard link to the symbolic link in the source file
hierarchy or copy the symbolic link to the destination.
.IP "\fB\(miL\fP" 10
If a symbolic link referencing a file of type directory is specified on
the command line or encountered during the traversal of a file
hierarchy,
.IR pax
shall archive the file hierarchy rooted in the file referenced by the
link, using the name of the link as the root of the file hierarchy.
Otherwise, if a symbolic link referencing a file of any other file type
which
.IR pax
can normally archive is specified on the command line or encountered
during the traversal of a file hierarchy,
.IR pax
shall archive the file referenced by the link, using the name of the
link. The default behavior, when neither
.BR \(miH
or
.BR \(miL
are specified, shall be to archive the symbolic link itself.
.IP "\fB\(min\fP" 10
Select the first archive member that matches each
.IR pattern
operand. No more than one archive member shall be matched for each
pattern (although members of type directory shall still match the file
hierarchy rooted at that file).
.IP "\fB\(mio\ \fIoptions\fR" 10
Provide information to the implementation to modify the algorithm for
extracting or writing files. The value of
.IR options
shall consist of one or more
&lt;comma&gt;-separated
keywords of the form:
.RS 10 
.sp
.RS 4
.nf
\fB
\fIkeyword\fB[[\fR:\fB]\fR=\fIvalue\fB][\fR,\fIkeyword\fB[[\fR:\fB]\fR=\fIvalue\fB]\fR, ...\fB]\fR
.fi \fR
.P
.RE
.P
Some keywords apply only to certain file formats, as indicated with
each description. Use of keywords that are inapplicable to the file
format being processed produces undefined results.
.P
Keywords in the
.IR options
argument shall be a string that would be a valid portable filename as
described in the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 3.278" ", " "Portable Filename Character Set".
.TP 10
.BR Note:
Keywords are not expected to be filenames, merely to follow the same
character composition rules as portable filenames.
.P
.P
Keywords can be preceded with white space. The
.IR value
field shall consist of zero or more characters; within
.IR value ,
the application shall precede any literal
&lt;comma&gt;
with a
&lt;backslash&gt;,
which shall be ignored, but preserves the
&lt;comma&gt;
as part of
.IR value .
A
&lt;comma&gt;
as the final character, or a
&lt;comma&gt;
followed solely by white space as the final characters, in
.IR options
shall be ignored. Multiple
.BR \(mio
options can be specified; if keywords given to these multiple
.BR \(mio
options conflict, the keywords and values appearing later in command
line sequence shall take precedence and the earlier shall be silently
ignored. The following keyword values of
.IR options
shall be supported for the file formats as indicated:
.IP "\fBdelete\fR=\fIpattern\fR" 6
.br
(Applicable only to the
.BR \(mix
.BR pax
format.) When used in
.BR write
or
.BR copy
mode,
.IR pax
shall omit from extended header records that it produces any keywords
matching the string pattern. When used in
.BR read
or
.BR list
mode,
.IR pax
shall ignore any keywords matching the string pattern in the extended
header records. In both cases, matching shall be performed using the
pattern matching notation described in
.IR "Section 2.13.1" ", " "Patterns Matching a Single Character"
and
.IR "Section 2.13.2" ", " "Patterns Matching Multiple Characters".
For example:
.RS 6 
.sp
.RS 4
.nf
\fB
\(mio \fBdelete\fR=\fIsecurity\fR.*
.fi \fR
.P
.RE
.P
would suppress security-related information. See
.IR "pax Extended Header"
for extended header record keyword usage.
.P
When multiple
.BR \(mio \c
.BR delete=pattern
options are specified, the patterns shall be additive; all keywords
matching the specified string patterns shall be omitted from extended
header records that
.IR pax
produces.
.RE
.IP "\fBexthdr.name\fR=\fIstring\fR" 6
.br
(Applicable only to the
.BR \(mix
.BR pax
format.) This keyword allows user control over the name that is written
into the
.BR ustar
header blocks for the extended header produced under the circumstances
described in
.IR "pax Header Block".
The name shall be the contents of
.IR string ,
after the following character substitutions have been made:
.TS
center box tab(!);
cB | cB
cB | cB
lf5 | lw(3.8i).
\fIstring\fP
Includes:!Replaced by:
_
%d!T{
The directory name of the file, equivalent to the result of the
.IR dirname
utility on the translated pathname.
T}
%f!T{
The filename of the file, equivalent to the result of the
.IR basename
utility on the translated pathname.
T}
%p!T{
The process ID of the
.IR pax
process.
T}
%%!T{
A
.BR '%' 
character.
T}
.TE
.RS 6 
.P
Any other
.BR '%' 
characters in
.IR string
produce undefined results.
.P
If no
.BR \(mio
.BR exthdr.name=string
is specified,
.IR pax
shall use the following default value:
.sp
.RS 4
.nf
\fB
%d/PaxHeaders.%p/%f
.fi \fR
.P
.RE
.RE
.IP "\fBglobexthdr.name\fR=\fIstring\fR" 6
.br
(Applicable only to the
.BR \(mix
.BR pax
format.) When used in
.BR write
or
.BR copy
mode with the appropriate options,
.IR pax
shall create global extended header records with
.BR ustar
header blocks that will be treated as regular files by previous
versions of
.IR pax .
This keyword allows user control over the name that is written into the
.BR ustar
header blocks for global extended header records. The name shall be the
contents of string, after the following character substitutions have
been made:
.TS
center box tab(!);
cB | cB
cB | cB
lf5 | lw(3.8i).
\fIstring\fP
Includes:!Replaced by:
_
%n!T{
An integer that represents the sequence number of the global extended
header record in the archive, starting at 1.
T}
%p!T{
The process ID of the
.IR pax
process.
T}
%%!T{
A
.BR '%' 
character.
T}
.TE
.RS 6 
.P
Any other
.BR '%' 
characters in
.IR string
produce undefined results.
.P
If no
.BR \(mio
.BR globexthdr.name=string
is specified,
.IR pax
shall use the following default value:
.sp
.RS 4
.nf
\fB
$TMPDIR/GlobalHead.%p.%n
.fi \fR
.P
.RE
.P
where $\c
.IR TMPDIR
represents the value of the
.IR TMPDIR
environment variable. If
.IR TMPDIR
is not set,
.IR pax
shall use
.BR /tmp .
.RE
.IP "\fBinvalid\fR=\fIaction\fR" 6
.br
(Applicable only to the
.BR \(mix
.BR pax
format.) This keyword allows user control over the action
.IR pax
takes upon encountering values in an extended header record that, in
.BR read
or
.BR copy
mode, are invalid in the destination hierarchy or, in
.BR list
mode, cannot be written in the codeset and current locale of the
implementation. The following are invalid values that shall be
recognized by
.IR pax :
.RS 6 
.IP -- 4
In
.BR read
or
.BR copy
mode, a filename or link name that contains character encodings
invalid in the destination hierarchy. (For example, the name may
contain embedded NULs.)
.IP -- 4
In
.BR read
or
.BR copy
mode, a filename or link name that is longer than the maximum allowed
in the destination hierarchy (for either a pathname component or the
entire pathname).
.IP -- 4
In
.BR list
mode, any character string value (filename, link name, user name, and
so on) that cannot be written in the codeset and current locale of the
implementation.
.P
The following mutually-exclusive values of the
.IR action
argument are supported:
.IP "\fBbinary\fR" 10
In
.BR write
mode,
.IR pax
shall generate a
.BR hdrcharset = BINARY
extended header record for each file with a filename, link name, group
name, owner name, or any other field in an extended header record that
cannot be translated to the UTF\(hy8 codeset, allowing the archive to
contain the files with unencoded extended header record values. In
.BR read
or
.BR copy
mode,
.IR pax
shall use the values specified in the header without translation,
regardless of whether this may overwrite an existing file with a valid
name. In
.BR list
mode,
.IR pax
shall behave identically to the
.BR bypass
action.
.IP "\fBbypass\fR" 10
In
.BR read
or
.BR copy
mode,
.IR pax
shall bypass the file, causing no change to the destination hierarchy.
In
.BR list
mode,
.IR pax
shall write all requested valid values for the file, but its method for
writing invalid values is unspecified.
.IP "\fBrename\fR" 10
In
.BR read
or
.BR copy
mode,
.IR pax
shall act as if the
.BR \(mii
option were in effect for each file with invalid filename or link name
values, allowing the user to provide a replacement name interactively.
In
.BR list
mode,
.IR pax
shall behave identically to the
.BR bypass
action.
.IP "\fBUTF\(hy8\fR" 10
When used in
.BR read ,
.BR copy ,
or
.BR list
mode and a filename, link name, owner name, or any other field in an
extended header record cannot be translated from the
.BR pax
UTF\(hy8 codeset format to the codeset and current locale of the
implementation,
.IR pax
shall use the actual UTF\(hy8 encoding for the name. If a
.BR hdrcharset
extended header record is in effect for this file, the character set
specified by that record shall be used instead of UTF\(hy8. If a
.BR hdrcharset = BINARY
extended header record is in effect for this file, no translation shall
be performed.
.IP "\fBwrite\fR" 10
In
.BR read
or
.BR copy
mode,
.IR pax
shall write the file, translating the name, regardless of whether this
may overwrite an existing file with a valid name. In
.BR list
mode,
.IR pax
shall behave identically to the
.BR bypass
action.
.P
If no
.BR \(mio
.BR invalid=option
is specified,
.IR pax
shall act as if
.BR \(mio \c
.BR invalid=bypass
were specified. Any overwriting of existing files that may be allowed
by the
.BR \(mio \c
.BR invalid=
actions shall be subject to permission (\c
.BR \(mip )
and modification time (\c
.BR \(miu )
restrictions, and shall be suppressed if the
.BR \(mik
option is also specified.
.RE
.IP "\fBlinkdata\fP" 6
.br
(Applicable only to the
.BR \(mix
.BR pax
format.) In
.BR write
mode,
.IR pax
shall write the contents of a file to the archive even when that file
is merely a hard link to a file whose contents have already been
written to the archive.
.IP "\fBlistopt\fR=\fIformat\fP" 6
.br
This keyword specifies the output format of the table of contents
produced when the
.BR \(miv
option is specified in
.BR list
mode. See
.IR "List Mode Format Specifications".
To avoid ambiguity, the
.BR listopt=format
shall be the only or final
.BR keyword=value
pair in a
.BR \(mio
option-argument; all characters in the remainder of the option-argument
shall be considered part of the format string. When multiple
.BR \(mio \c
.BR listopt=format
options are specified, the format strings shall be considered a single,
concatenated string, evaluated in command line order.
.IP "\fBtimes\fR" 6
.br
(Applicable only to the
.BR \(mix
.IR pax
format.) When used in
.BR write
or
.BR copy
mode,
.IR pax
shall include
.BR atime
and
.BR mtime
extended header records for each file. See
.IR "pax Extended Header File Times".
.P
In addition to these keywords, if the
.BR \(mix
.IR pax
format is specified, any of the keywords and values defined in
.IR "pax Extended Header",
including implementation extensions, can be used in
.BR \(mio
option-arguments, in either of two modes:
.IP "\fBkeyword\fR=\fIvalue\fR" 6
.br
When used in
.BR write
or
.BR copy
mode, these keyword/value pairs shall be included at the beginning of
the archive as
.BR typeflag
.BR g
global extended header records. When used in
.BR read
or
.BR list
mode, these keyword/value pairs shall act as if they had been at the
beginning of the archive as
.BR typeflag
.BR g
global extended header records.
.IP "\fBkeyword\fR:=\fIvalue\fR" 6
.br
When used in
.BR write
or
.BR copy
mode, these keyword/value pairs shall be included as records at the
beginning of a
.BR typeflag
.BR x
extended header for each file. (This shall be equivalent to the
&lt;equals-sign&gt;
form except that it creates no
.BR typeflag
.BR g
global extended header records.) When used in
.BR read
or
.BR list
mode, these keyword/value pairs shall act as if they were included as
records at the end of each extended header; thus, they shall override
any global or file-specific extended header record keywords of the same
names. For example, in the command:
.RS 6 
.sp
.RS 4
.nf
\fB
pax \(mir \(mio "
gname:=mygroup,
" &lt;archive
.fi \fR
.P
.RE
.P
the group name will be forced to a new value for all files read from
the archive.
.RE
.P
The precedence of
.BR \(mio
keywords over various fields in the archive is described in
.IR "pax Extended Header Keyword Precedence".
.RE
.IP "\fB\(mip\ \fIstring\fR" 10
Specify one or more file characteristic options (privileges). The
.IR string
option-argument shall be a string specifying file characteristics to be
retained or discarded on extraction. The string shall consist of the
specification characters
.BR a ,
.BR e ,
.BR m ,
.BR o ,
and
.BR p .
Other implementation-defined characters can be included. Multiple
characteristics can be concatenated within the same string and multiple
.BR \(mip
options can be specified. The meaning of the specification characters
are as follows:
.RS 10 
.IP "\fRa\fP" 6
Do not preserve file access times.
.IP "\fRe\fP" 6
Preserve the user ID, group ID, file mode bits (see the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 3.169" ", " "File Mode Bits"),
access time, modification time, and any other implementation-defined
file characteristics.
.IP "\fRm\fP" 6
Do not preserve file modification times.
.IP "\fRo\fP" 6
Preserve the user ID and group ID.
.IP "\fRp\fP" 6
Preserve the file mode bits. Other implementation-defined file mode
attributes may be preserved.
.P
In the preceding list, ``preserve'' indicates that an attribute stored
in the archive shall be given to the extracted file, subject to the
permissions of the invoking process. The access and modification times
of the file shall be preserved unless otherwise specified with the
.BR \(mip
option or not stored in the archive. All attributes that are not
preserved shall be determined as part of the normal file creation
action (see
.IR "Section 1.1.1.4" ", " "File Read" ", " "Write" ", " "and Creation").
.P
If neither the
.BR e
nor the
.BR o
specification character is specified, or the user ID and group ID are
not preserved for any reason,
.IR pax
shall not set the S_ISUID and S_ISGID bits of the file mode.
.P
If the preservation of any of these items fails for any reason,
.IR pax
shall write a diagnostic message to standard error. Failure to preserve
these items shall affect the final exit status, but shall not cause the
extracted file to be deleted.
.P
If file characteristic letters in any of the
.IR string
option-arguments are duplicated or conflict with each other, the ones
given last shall take precedence. For example, if
.BR \(mip
.BR eme
is specified, file modification times are preserved.
.RE
.IP "\fB\(mis\ \fIreplstr\fR" 10
Modify file or archive member names named by
.IR pattern
or
.IR file
operands according to the substitution expression
.IR replstr ,
using the syntax of the
.IR ed
utility. The concepts of ``address'' and ``line'' are meaningless in
the context of the
.IR pax
utility, and shall not be supplied. The format shall be:
.RS 10 
.sp
.RS 4
.nf
\fB
\(mis /\fIold\fR/\fInew\fR/\fB[\fRgp\fB]\fR
.fi \fR
.P
.RE
.P
where as in
.IR ed ,
.IR old
is a basic regular expression and
.IR new
can contain an
&lt;ampersand&gt;,
.BR '\en' 
(where
.IR n
is a digit) back-references, or subexpression matching. The
.IR old
string shall also be permitted to contain
&lt;newline&gt;
characters.
.P
Any non-null character can be used as a delimiter (\c
.BR '/' 
shown here). Multiple
.BR \(mis
expressions can be specified; the expressions shall be applied in the
order specified, terminating with the first successful substitution.
The optional trailing
.BR 'g' 
is as defined in the
.IR ed
utility. The optional trailing
.BR 'p' 
shall cause successful substitutions to be written to standard error.
File or archive member names that substitute to the empty string shall
be ignored when reading and writing archives.
.RE
.IP "\fB\(mit\fP" 10
When reading files from the file system, and if the user has the
permissions required by
\fIutime\fR()
to do so, set the access time of each file read to the access time that
it had before being read by
.IR pax .
.IP "\fB\(miu\fP" 10
Ignore files that are older (having a less recent file modification
time) than a pre-existing file or archive member with the same name.
In
.BR read
mode, an archive member with the same name as a file in the file system
shall be extracted if the archive member is newer than the file. In
.BR write
mode, an archive file member with the same name as a file in the file
system shall be superseded if the file is newer than the archive
member. If
.BR \(mia
is also specified, this is accomplished by appending to the archive;
otherwise, it is unspecified whether this is accomplished by actual
replacement in the archive or by appending to the archive. In
.BR copy
mode, the file in the destination hierarchy shall be replaced by the
file in the source hierarchy or by a link to the file in the source
hierarchy if the file in the source hierarchy is newer.
.IP "\fB\(miv\fP" 10
In
.BR list
mode, produce a verbose table of contents (see the STDOUT section).
Otherwise, write archive member pathnames to standard error (see the
STDERR section).
.IP "\fB\(mix\ \fIformat\fR" 10
Specify the output archive format. The
.IR pax
utility shall support the following formats:
.RS 10 
.IP "\fBcpio\fR" 10
The
.BR cpio
interchange format; see the EXTENDED DESCRIPTION section. The default
.IR blocksize
for this format for character special archive files shall be 5\|120.
Implementations shall support all
.IR blocksize
values less than or equal to 32\|256 that are multiples of 512.
.IP "\fBpax\fR" 10
The
.BR pax
interchange format; see the EXTENDED DESCRIPTION section. The default
.IR blocksize
for this format for character special archive files shall be 5\|120.
Implementations shall support all
.IR blocksize
values less than or equal to 32\|256 that are multiples of 512.
.IP "\fBustar\fR" 10
The
.BR tar
interchange format; see the EXTENDED DESCRIPTION section. The default
.IR blocksize
for this format for character special archive files shall be 10\|240.
Implementations shall support all
.IR blocksize
values less than or equal to 32\|256 that are multiples of 512.
.P
Implementation-defined formats shall specify a default block size as
well as any other block sizes supported for character special archive
files.
.P
Any attempt to append to an archive file in a format different from the
existing archive format shall cause
.IR pax
to exit immediately with a non-zero exit status.
.RE
.IP "\fB\(miX\fP" 10
When traversing the file hierarchy specified by a pathname,
.IR pax
shall not descend into directories that have a different device ID (\c
.IR st_dev ;
see the System Interfaces volume of POSIX.1\(hy2008,
\fIstat\fR()).
.P
Specifying more than one of the mutually-exclusive options
.BR \(miH
and
.BR \(miL
shall not be considered an error and the last option specified shall
determine the behavior of the utility.
.P
The options that operate on the names of files or archive members (\c
.BR \(mic ,
.BR \(mii ,
.BR \(min ,
.BR \(mis ,
.BR \(miu ,
and
.BR \(miv )
shall interact as follows. In
.BR read
mode, the archive members shall be selected based on the user-specified
.IR pattern
operands as modified by the
.BR \(mic ,
.BR \(min ,
and
.BR \(miu
options. Then, any
.BR \(mis
and
.BR \(mii
options shall modify, in that order, the names of the selected files.
The
.BR \(miv
option shall write names resulting from these modifications.
.P
In
.BR write
mode, the files shall be selected based on the user-specified
pathnames as modified by the
.BR \(min
and
.BR \(miu
options. Then, any
.BR \(mis
and
.BR \(mii
options shall modify, in that order, the names of these selected files.
The
.BR \(miv
option shall write names resulting from these modifications.
.P
If both the
.BR \(miu
and
.BR \(min
options are specified,
.IR pax
shall not consider a file selected unless it is newer than the file to
which it is compared.
.SS "List Mode Format Specifications"
.P
In
.BR list
mode with the
.BR \(mio
.BR listopt=format
option, the
.IR format
argument shall be applied for each selected file. The
.IR pax
utility shall append a
&lt;newline&gt;
to the
.BR listopt
output for each selected file. The
.IR format
argument shall be used as the
.IR format
string described in the Base Definitions volume of POSIX.1\(hy2008,
.IR "Chapter 5" ", " "File Format Notation",
with the exceptions 1. through 6. defined in the EXTENDED DESCRIPTION
section of
.IR printf ,
plus the following exceptions:
.IP 7. 6
The sequence (\c
.IR keyword )
can occur before a format conversion specifier. The conversion
argument is defined by the value of
.IR keyword .
The implementation shall support the following keywords:
.RS 6 
.IP -- 4
Any of the Field Name entries in
.IR "Table 4-14, ustar Header Block"
and
.IR "Table 4-16, Octet-Oriented cpio Archive Entry".
The implementation may support the
.IR cpio
keywords without the leading
.BR c_
in addition to the form required by
.IR "Table 4-16, Octet-Oriented cpio Archive Entry".
.IP -- 4
Any keyword defined for the extended header in
.IR "pax Extended Header".
.IP -- 4
Any keyword provided as an implementation-defined extension within
the extended header defined in
.IR "pax Extended Header".
.P
For example, the sequence
.BR \(dq%(charset)s\(dq 
is the string value of the name of the character set in the extended
header.
.P
The result of the keyword conversion argument shall be the value from
the applicable header field or extended header, without any trailing
NULs.
.P
All keyword values used as conversion arguments shall be translated
from the UTF\(hy8 encoding (or alternative encoding specified by any
.BR hdrcharset
extended header record) to the character set appropriate for the local
file system, user database, and so on, as applicable.
.RE
.IP 8. 6
An additional conversion specifier character,
.BR T ,
shall be used to specify time formats. The
.BR T
conversion specifier character can be preceded by the sequence (\c
.IR keyword= \c
.IR subformat ),
where
.IR subformat
is a date format as defined by
.IR date
operands. The default
.IR keyword
shall be
.BR mtime
and the default subformat shall be:
.RS 6 
.sp
.RS 4
.nf
\fB
%b %e %H:%M %Y
.fi \fR
.P
.RE
.RE
.IP 9. 6
An additional conversion specifier character,
.BR M ,
shall be used to specify the file mode string as defined in
.IR ls
Standard Output. If (\c
.IR keyword )
is omitted, the
.BR mode
keyword shall be used. For example,
.BR %.1M
writes the single character corresponding to the &lt;\fIentry\ type\fP&gt;
field of the
.IR ls
.BR \(mil
command.
.IP 10. 6
An additional conversion specifier character,
.BR D ,
shall be used to specify the device for block or special files, if
applicable, in an implementation-defined format. If not applicable,
and (\c
.IR keyword )
is specified, then this conversion shall be equivalent to
\fR%(\fIkeyword\fR)u\fR. If not applicable, and (\c
.IR keyword )
is omitted, then this conversion shall be equivalent to
&lt;space&gt;.
.IP 11. 6
An additional conversion specifier character,
.BR F ,
shall be used to specify a pathname. The
.BR F
conversion character can be preceded by a sequence of
&lt;comma&gt;-separated
keywords:
.RS 6 
.sp
.RS 4
.nf
\fB
(\fIkeyword\fB[\fR,\fIkeyword\fB]\fR ... )
.fi \fR
.P
.RE
.P
The values for all the keywords that are non-null shall be concatenated
together, each separated by a
.BR '/' .
The default shall be (\c
.BR path )
if the keyword
.BR path
is defined; otherwise, the default shall be (\c
.BR prefix ,\c
.BR name ).
.RE
.IP 12. 6
An additional conversion specifier character,
.BR L ,
shall be used to specify a symbolic link expansion. If the current
file is a symbolic link, then
.BR %L
shall expand to:
.RS 6 
.sp
.RS 4
.nf
\fB
"%s \(mi&gt; %s", &lt;\fIvalue of keyword\fR&gt;, &lt;\fIcontents of link\fR&gt;
.fi \fR
.P
.RE
.P
Otherwise, the
.BR %L
conversion specification shall be the equivalent of
.BR %F .
.RE
.SH OPERANDS
The following operands shall be supported:
.IP "\fIdirectory\fR" 10
The destination directory pathname for
.BR copy
mode.
.IP "\fIfile\fR" 10
A pathname of a file to be copied or archived.
.IP "\fIpattern\fR" 10
A pattern matching one or more pathnames of archive members. A pattern
must be given in the name-generating notation of the pattern matching
notation in
.IR "Section 2.13" ", " "Pattern Matching Notation",
including the filename expansion rules in
.IR "Section 2.13.3" ", " "Patterns Used for Filename Expansion".
The default, if no
.IR pattern
is specified, is to select all members in the archive.
.SH STDIN
In
.BR write
mode, the standard input shall be used only if no
.IR file
operands are specified. It shall be a file containing a list of
pathnames, each terminated by a
&lt;newline&gt;
character.
.P
In
.BR list
and
.BR read
modes, if
.BR \(mif
is not specified, the standard input shall be an archive file.
.P
Otherwise, the standard input shall not be used.
.SH "INPUT FILES"
The input file named by the
.IR archive
option-argument, or standard input when the archive is read from there,
shall be a file formatted according to one of the specifications in the
EXTENDED DESCRIPTION section or some other implementation-defined
format.
.P
The file
.BR /dev/tty
shall be used to write prompts and read responses.
.SH "ENVIRONMENT VARIABLES"
The following environment variables shall affect the execution of
.IR pax :
.IP "\fILANG\fP" 10
Provide a default value for the internationalization variables that are
unset or null. (See the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 8.2" ", " "Internationalization Variables"
the precedence of internationalization variables used to determine the
values of locale categories.)
.IP "\fILC_ALL\fP" 10
If set to a non-empty string value, override the values of all the
other internationalization variables.
.IP "\fILC_COLLATE\fP" 10
.br
Determine the locale for the behavior of ranges, equivalence classes,
and multi-character collating elements used in the pattern matching
expressions for the
.IR pattern
operand, the basic regular expression for the
.BR \(mis
option, and the extended regular expression defined for the
.BR yesexpr
locale keyword in the
.IR LC_MESSAGES
category.
.IP "\fILC_CTYPE\fP" 10
Determine the locale for the interpretation of sequences of bytes of
text data as characters (for example, single-byte as opposed to
multi-byte characters in arguments and input files), the behavior of
character classes used in the extended regular expression defined for
the
.BR yesexpr
locale keyword in the
.IR LC_MESSAGES
category, and pattern matching.
.IP "\fILC_MESSAGES\fP" 10
.br
Determine the locale used to process affirmative responses, and the
locale used to affect the format and contents of diagnostic messages
and prompts written to standard error.
.IP "\fILC_TIME\fP" 10
Determine the format and contents of date and time strings when the
.BR \(miv
option is specified.
.IP "\fINLSPATH\fP" 10
Determine the location of message catalogs for the processing of
.IR LC_MESSAGES .
.IP "\fITMPDIR\fP" 10
Determine the pathname that provides part of the default global
extended header record file, as described for the
.BR \(mio
.BR globexthdr=
keyword in the OPTIONS section.
.IP "\fITZ\fP" 10
Determine the timezone used to calculate date and time strings when the
.BR \(miv
option is specified. If
.IR TZ
is unset or null, an unspecified default timezone shall be used.
.SH "ASYNCHRONOUS EVENTS"
Default.
.SH STDOUT
In
.BR write
mode, if
.BR \(mif
is not specified, the standard output shall be the archive formatted
according to one of the specifications in the EXTENDED DESCRIPTION
section, or some other implementation-defined format (see
.BR \(mix
.IR format ).
.P
In
.BR list
mode, when the
.BR \(mio \c
.BR listopt =\c
.IR format
has been specified, the selected archive members shall be written to
standard output using the format described under
.IR "List Mode Format Specifications".
In
.BR list
mode without the
.BR \(mio \c
.BR listopt =\c
.IR format
option, the table of contents of the selected archive members shall
be written to standard output using the following format:
.sp
.RS 4
.nf
\fB
"%s\en", &lt;\fIpathname\fR&gt;
.fi \fR
.P
.RE
.P
If the
.BR \(miv
option is specified in
.BR list
mode, the table of contents of the selected archive members shall be
written to standard output using the following formats.
.P
For pathnames representing hard links to previous members of the
archive:
.sp
.RS 4
.nf
\fB
"%s == %s\en", &lt;\fIls\fR \(mil \fIlisting\fR&gt;, &lt;\fIlinkname\fR&gt;
.fi \fR
.P
.RE
.P
For all other pathnames:
.sp
.RS 4
.nf
\fB
"%s\en", &lt;\fIls\fR \(mil \fIlisting\fR&gt;
.fi \fR
.P
.RE
.P
where &lt;\fIls\ \fR\(mil\ \fIlisting\fR&gt; shall be the format specified by
the
.IR ls
utility with the
.BR \(mil
option. When writing pathnames in this format, it is unspecified what
is written for fields for which the underlying archive format does not
have the correct information, although the correct number of
&lt;blank&gt;-separated
fields shall be written.
.P
In
.BR list
mode, standard output shall not be buffered more than a pathname
(plus any associated information and a
&lt;newline&gt;
terminator) at a time.
.SH STDERR
If
.BR \(miv
is specified in
.BR read ,
.BR write ,
or
.BR copy
modes,
.IR pax
shall write the pathnames it processes to the standard error output
using the following format:
.sp
.RS 4
.nf
\fB
"%s\en", &lt;\fIpathname\fR&gt;
.fi \fR
.P
.RE
.P
These pathnames shall be written as soon as processing is begun on the
file or archive member, and shall be flushed to standard error. The
trailing
&lt;newline&gt;,
which shall not be buffered, is written when the file has been read or
written.
.P
If the
.BR \(mis
option is specified, and the replacement string has a trailing
.BR 'p' ,
substitutions shall be written to standard error in the following
format:
.sp
.RS 4
.nf
\fB
"%s &gt;&gt; %s\en", &lt;\fIoriginal pathname\fR&gt;, &lt;\fInew pathname\fR&gt;
.fi \fR
.P
.RE
.P
In all operating modes of
.IR pax ,
optional messages of unspecified format concerning the input archive
format and volume number, the number of files, blocks, volumes, and
media parts as well as other diagnostic messages may be written to
standard error.
.P
In all formats, for both standard output and standard error, it is
unspecified how non-printable characters in pathnames or link names
are written.
.P
When using the
.BR \(mix \c
.BR pax
archive format, if a filename, link name, group name, owner name, or
any other field in an extended header record cannot be translated
between the codeset in use for that extended header record and the
character set of the current locale,
.IR pax
shall write a diagnostic message to standard error, shall process the
file as described for the
.BR \(mio
.BR invalid=
option, and then shall continue processing with the next file.
.SH "OUTPUT FILES"
In
.BR read
mode, the extracted output files shall be of the archived file type.
In
.BR copy
mode, the copied output files shall be the type of the file being
copied. In either mode, existing files in the destination hierarchy
shall be overwritten only when all permission (\c
.BR \(mip ),
modification time (\c
.BR \(miu ),
and invalid-value (\c
.BR \(mio \c
.BR invalid= )
tests allow it.
.P
In
.BR write
mode, the output file named by the
.BR \(mif
option-argument shall be a file formatted according to one of the
specifications in the EXTENDED DESCRIPTION section, or some other
implementation-defined format.
.SH "EXTENDED DESCRIPTION"
.SS "pax Interchange Format"
.P
A
.IR pax
archive tape or file produced in the
.BR \(mix \c
.BR pax
format shall contain a series of blocks. The physical layout of the
archive shall be identical to the
.BR ustar
format described in
.IR "ustar Interchange Format".
Each file archived shall be represented by the following sequence:
.IP " *" 4
An optional header block with extended header records. This header
block is of the form described in
.IR "pax Header Block",
with a
.IR typeflag
value of
.BR x
or
.BR g .
The extended header records, described in
.IR "pax Extended Header",
shall be included as the data for this header block.
.IP " *" 4
A header block that describes the file. Any fields in the preceding
optional extended header shall override the associated fields in
this header block for this file.
.IP " *" 4
Zero or more blocks that contain the contents of the file.
.P
At the end of the archive file there shall be two 512-byte blocks
filled with binary zeros, interpreted as an end-of-archive indicator.
.P
A schematic of an example archive with global extended header records
and two actual files is shown in
.IR "Figure 4-1, pax Format Archive Example".
In the example, the second file in the archive has no extended header
preceding it, presumably because it has no need for extended
attributes.
.sp
.ce 1
\fBFigure 4-1: pax Format Archive Example\fR
.SS "pax Header Block"
.P
The
.BR pax
header block shall be identical to the
.BR ustar
header block described in
.IR "ustar Interchange Format",
except that two additional
.IR typeflag
values are defined:
.IP "\fRx\fP" 6
Represents extended header records for the following file in the
archive (which shall have its own
.BR ustar
header block). The format of these extended header records shall be as
described in
.IR "pax Extended Header".
.IP "\fRg\fR" 6
Represents global extended header records for the following files in
the archive. The format of these extended header records shall be as
described in
.IR "pax Extended Header".
Each value shall affect all subsequent files that do not override that
value in their own extended header record and until another global
extended header record is reached that provides another value for the
same field. The
.IR typeflag
.BR g
global headers should not be used with interchange media that could
suffer partial data loss in transporting the archive.
.P
For both of these types, the
.IR size
field shall be the size of the extended header records in octets. The
other fields in the header block are not meaningful to this version of
the
.IR pax
utility. However, if this archive is read by a
.IR pax
utility conforming to the ISO\ POSIX\(hy2:\|1993 standard, the header block fields are used to
create a regular file that contains the extended header records as
data. Therefore, header block field values should be selected to
provide reasonable file access to this regular file.
.P
A further difference from the
.BR ustar
header block is that data blocks for files of
.IR typeflag
1 (the digit one) (hard link) may be included, which means that the
size field may be greater than zero. Archives created by
.IR pax
.BR \(mio
.BR linkdata
shall include these data blocks with the hard links.
.SS "pax Extended Header"
.P
A
.BR pax
extended header contains values that are inappropriate for the
.BR ustar
header block because of limitations in that format: fields requiring a
character encoding other than that described in the ISO/IEC\ 646:\|1991 standard, fields
representing file attributes not described in the
.BR ustar
header, and fields whose format or length do not fit the requirements
of the
.BR ustar
header. The values in an extended header add attributes to the
following file (or files; see the description of the
.IR typeflag
.BR g
header block) or override values in the following header block(s), as
indicated in the following list of keywords.
.P
An extended header shall consist of one or more records, each
constructed as follows:
.sp
.RS 4
.nf
\fB
"%d %s=%s\en", &lt;\fIlength\fR&gt;, &lt;\fIkeyword\fR&gt;, &lt;\fIvalue\fR&gt;
.fi \fR
.P
.RE
.P
The extended header records shall be encoded according to the ISO/IEC\ 10646\(hy1:\|2000 standard
UTF\(hy8 encoding. The &lt;\fIlength\fP&gt; field,
&lt;blank&gt;,
&lt;equals-sign&gt;,
and
&lt;newline&gt;
shown shall be limited to the portable character set, as encoded in
UTF\(hy8. The &lt;\fIkeyword\fP&gt; fields can be any UTF\(hy8 characters.
The &lt;\fIlength\fP&gt; field shall be the decimal length of the extended
header record in octets, including the trailing
&lt;newline&gt;.
If there is a
.BR hdrcharset
extended header in effect for a file, the
.IR value
field for any
.BR gname ,
.BR linkpath ,
.BR path ,
and
.BR uname
extended header records shall be encoded using the character set
specified by the
.BR hdrcharset
extended header record; otherwise, the
.IR value
field shall be encoded using UTF\(hy8. The
.IR value
field for all other keywords specified by POSIX.1\(hy2008 shall be
encoded using UTF\(hy8.
.P
The &lt;\fIkeyword\fP&gt; field shall be one of the entries from the
following list or a keyword provided as an implementation extension.
Keywords consisting entirely of lowercase letters, digits, and periods
are reserved for future standardization. A keyword shall not include an
&lt;equals-sign&gt;.
(In the following list, the notations ``file(s)'' or ``block(s)'' is used
to acknowledge that a keyword affects the following single file after a
.IR typeflag
.BR x
extended header, but possibly multiple files after
.IR typeflag
.BR g .
Any requirements in the list for
.IR pax
to include a record when in
.BR write
or
.BR copy
mode shall apply only when such a record has not already been provided
through the use of the
.BR \(mio
option. When used in
.BR copy
mode,
.IR pax
shall behave as if an archive had been created with applicable extended
header records and then extracted.)
.IP "\fBatime\fP" 10
The file access time for the following file(s), equivalent to the value
of the
.IR st_atime
member of the
.BR stat
structure for a file, as described by the
\fIstat\fR()
function. The access time shall be restored if the process has
appropriate privileges required to do so. The format of the
&lt;\fIvalue\fP&gt; shall be as described in
.IR "pax Extended Header File Times".
.IP "\fBcharset\fP" 10
The name of the character set used to encode the data in the following
file(s). The entries in the following table are defined to refer to
known standards; additional names may be agreed on between the
originator and recipient.
.TS
center box tab(!);
cB | cB
lf5 | l.
&lt;value&gt;!Formal Standard
_
ISO-IR 646 1990!ISO/IEC 646:\|1990
ISO-IR 8859 1 1998!ISO/IEC 8859\(hy1:\|1998
ISO-IR 8859 2 1999!ISO/IEC 8859\(hy2:\|1999
ISO-IR 8859 3 1999!ISO/IEC 8859\(hy3:\|1999
ISO-IR 8859 4 1998!ISO/IEC 8859\(hy4:\|1998
ISO-IR 8859 5 1999!ISO/IEC 8859\(hy5:\|1999
ISO-IR 8859 6 1999!ISO/IEC 8859\(hy6:\|1999
ISO-IR 8859 7 1987!ISO/IEC 8859\(hy7:\|1987
ISO-IR 8859 8 1999!ISO/IEC 8859\(hy8:\|1999
ISO-IR 8859 9 1999!ISO/IEC 8859\(hy9:\|1999
ISO-IR 8859 10 1998!ISO/IEC 8859\(hy10:\|1998
ISO-IR 8859 13 1998!ISO/IEC 8859\(hy13:\|1998
ISO-IR 8859 14 1998!ISO/IEC 8859\(hy14:\|1998
ISO-IR 8859 15 1999!ISO/IEC 8859\(hy15:\|1999
ISO-IR 10646 2000!ISO/IEC 10646:\|2000
ISO-IR 10646 2000 UTF-8!ISO/IEC 10646, UTF-8 encoding
BINARY!None.
.TE
.RS 10 
.P
The encoding is included in an extended header for information only;
when
.IR pax
is used as described in POSIX.1\(hy2008, it shall not translate the file data
into any other encoding. The
.BR BINARY
entry indicates unencoded binary data.
.P
When used in
.BR write
or
.BR copy
mode, it is implementation-defined whether
.IR pax
includes a
.BR charset
extended header record for a file.
.RE
.IP "\fBcomment\fP" 10
A series of characters used as a comment. All characters in the
&lt;\fIvalue\fP&gt; field shall be ignored by
.IR pax .
.IP "\fBgid\fP" 10
The group ID of the group that owns the file, expressed as a decimal
number using digits from the ISO/IEC\ 646:\|1991 standard. This record shall override the
.IR gid
field in the following header block(s). When used in
.BR write
or
.BR copy
mode,
.IR pax
shall include a
.IR gid
extended header record for each file whose group ID is greater than
2\|097\|151 (octal 7\|777\|777).
.IP "\fBgname\fP" 10
The group of the file(s), formatted as a group name in the group
database. This record shall override the
.IR gid
and
.IR gname
fields in the following header block(s), and any
.IR gid
extended header record. When used in
.BR read ,
.BR copy ,
or
.BR list
mode,
.IR pax
shall translate the name from the encoding in the header record to
the character set appropriate for the group database on the
receiving system. If any of the characters cannot be
translated, and if neither the
.BR \(mio \c
.BR invalid=UTF\(hy8
option nor the
.BR \(mio \c
.BR invalid=binary
option is specified, the results are implementation-defined.
When used in
.BR write
or
.BR copy
mode,
.IR pax
shall include a
.BR gname
extended header record for each file whose group name cannot be
represented entirely with the letters and digits of the portable
character set.
.IP "\fBhdrcharset\fR" 10
The name of the character set used to encode the value field of the
.BR gname ,
.BR linkpath ,
.BR path ,
and
.BR uname
.IR pax
extended header records. The entries in the following table are defined
to refer to known standards; additional names may be agreed between the
originator and the recipient.
.TS
center box tab(!);
cB | cB
lf5 | l.
&lt;value&gt;!Formal Standard
_
ISO-IR 10646 2000 UTF-8!ISO/IEC 10646, UTF-8 encoding
BINARY!None.
.TE
.RS 10 
.P
If no
.BR hdrcharset
extended header record is specified, the default character set used to
encode all values in extended header records shall be the ISO/IEC\ 10646\(hy1:\|2000 standard
UTF\(hy8 encoding.
.P
The
.BR BINARY
entry indicates that all values recorded in extended headers for
affected files are unencoded binary data from the underlying system.
.RE
.IP "\fBlinkpath\fP" 10
The pathname of a link being created to another file, of any type,
previously archived. This record shall override the
.IR linkname
field in the following
.BR ustar
header block(s). The following
.BR ustar
header block shall determine the type of link created. If
.IR typeflag
of the following header block is 1, it shall be a hard link. If
.IR typeflag
is 2, it shall be a symbolic link and the
.BR linkpath
value shall be the contents of the symbolic link. The
.IR pax
utility shall translate the name of the link (contents of the symbolic
link) from the encoding in the header to the character set appropriate
for the local file system. When used in
.BR write
or
.BR copy
mode,
.IR pax
shall include a
.BR linkpath
extended header record for each link whose pathname cannot be
represented entirely with the members of the portable character set
other than NUL.
.IP "\fBmtime\fP" 10
The file modification time of the following file(s), equivalent to the
value of the
.IR st_mtime
member of the
.BR stat
structure for a file, as described in the
\fIstat\fR()
function. This record shall override the
.IR mtime
field in the following header block(s). The modification time shall be
restored if the process has appropriate privileges required to do
so. The format of the &lt;\fIvalue\fP&gt; shall be as described in
.IR "pax Extended Header File Times".
.IP "\fBpath\fP" 10
The pathname of the following file(s). This record shall override the
.IR name
and
.IR prefix
fields in the following header block(s). The
.IR pax
utility shall translate the pathname of the file from the encoding in
the header to the character set appropriate for the local file system.
.RS 10 
.P
When used in
.BR write
or
.BR copy
mode,
.IR pax
shall include a
.IR path
extended header record for each file whose pathname cannot be
represented entirely with the members of the portable character set
other than NUL.
.RE
.IP "\fBrealtime.\fIany\fR" 10
The keywords prefixed by ``realtime.'' are reserved for future
standardization.
.IP "\fBsecurity.\fIany\fR" 10
The keywords prefixed by ``security.'' are reserved for future
standardization.
.IP "\fBsize\fP" 10
The size of the file in octets, expressed as a decimal number using
digits from the ISO/IEC\ 646:\|1991 standard. This record shall override the
.IR size
field in the following header block(s). When used in
.BR write
or
.BR copy
mode,
.IR pax
shall include a
.IR size
extended header record for each file with a size value greater than
8\|589\|934\|591 (octal 77\|777\|777\|777).
.IP "\fBuid\fP" 10
The user ID of the file owner, expressed as a decimal number using
digits from the ISO/IEC\ 646:\|1991 standard. This record shall override the
.IR uid
field in the following header block(s). When used in
.BR write
or
.BR copy
mode,
.IR pax
shall include a
.IR uid
extended header record for each file whose owner ID is greater than
2\|097\|151 (octal 7\|777\|777).
.IP "\fBuname\fP" 10
The owner of the following file(s), formatted as a user name in the
user database. This record shall override the
.IR uid
and
.IR uname
fields in the following header block(s), and any
.IR uid
extended header record. When used in
.BR read ,
.BR copy ,
or
.BR list
mode,
.IR pax
shall translate the name from the encoding in the header record to the
character set appropriate for the user database on the receiving
system. If any of the characters cannot be translated, and if neither
the
.BR \(mio \c
.BR invalid=UTF\(hy8
option nor the
.BR \(mio \c
.BR invalid=binary
option is specified, the results are implementation-defined.
When used in
.BR write
or
.BR copy
mode,
.IR pax
shall include a
.BR uname
extended header record for each file whose user name cannot be
represented entirely with the letters and digits of the portable
character set.
.P
If the &lt;\fIvalue\fP&gt; field is zero length, it shall delete any header
block field, previously entered extended header value, or global
extended header value of the same name.
.P
If a keyword in an extended header record (or in a
.BR \(mio
option-argument) overrides or deletes a corresponding field in the
.BR ustar
header block,
.IR pax
shall ignore the contents of that header block field.
.P
Unlike the
.BR ustar
header block fields, NULs shall not delimit &lt;\fIvalue\fP&gt;s; all
characters within the &lt;\fIvalue\fP&gt; field shall be considered data for
the field. None of the length limitations of the
.BR ustar
header block fields in
.IR "Table 4-14, ustar Header Block"
shall apply to the extended header records.
.SS "pax Extended Header Keyword Precedence"
.P
This section describes the precedence in which the various header
records and fields and command line options are selected to apply to a
file in the archive. When
.IR pax
is used in
.BR read
or
.BR list
modes, it shall determine a file attribute in the following sequence:
.IP " 1." 4
If
.BR \(mio \c
.BR delete=keyword-prefix
is used, the affected attributes shall be determined from step 7., if
applicable, or ignored otherwise.
.IP " 2." 4
If
.BR \(mio \c
.IR keyword :=
is used, the affected attributes shall be ignored.
.IP " 3." 4
If
.BR \(mio \c
.BR keyword:=value
is used, the affected attribute shall be assigned the value.
.IP " 4." 4
If there is a
.IR typeflag
.BR x
extended header record, the affected attribute shall be assigned the
&lt;\fIvalue\fP&gt;. When extended header records conflict, the last one
given in the header shall take precedence.
.IP " 5." 4
If
.BR \(mio \c
.BR keyword=value
is used, the affected attribute shall be assigned the value.
.IP " 6." 4
If there is a
.IR typeflag
.BR g
global extended header record, the affected attribute shall be assigned
the &lt;\fIvalue\fP&gt;. When global extended header records conflict, the
last one given in the global header shall take precedence.
.IP " 7." 4
Otherwise, the attribute shall be determined from the
.BR ustar
header block.
.SS "pax Extended Header File Times"
.P
The
.IR pax
utility shall write an
.BR mtime
record for each file in
.BR write
or
.BR copy
modes if the file's modification time cannot be represented exactly in
the
.BR ustar
header logical record described in
.IR "ustar Interchange Format".
This can occur if the time is out of
.BR ustar
range, or if the file system of the underlying implementation supports
non-integer time granularities and the time is not an integer. All of
these time records shall be formatted as a decimal representation of
the time in seconds since the Epoch. If a
&lt;period&gt;
(\c
.BR '.' )
decimal point character is present, the digits to the right of the
point shall represent the units of a subsecond timing granularity,
where the first digit is tenths of a second and each subsequent digit
is a tenth of the previous digit. In
.BR read
or
.BR copy
mode, the
.IR pax
utility shall truncate the time of a file to the greatest value that is
not greater than the input header file time. In
.BR write
or
.BR copy
mode, the
.IR pax
utility shall output a time exactly if it can be represented exactly as
a decimal number, and otherwise shall generate only enough digits so
that the same time shall be recovered if the file is extracted on a
system whose underlying implementation supports the same time
granularity.
.SS "ustar Interchange Format"
.P
A
.BR ustar
archive tape or file shall contain a series of logical records. Each
logical record shall be a fixed-size logical record of 512 octets (see
below). Although this format may be thought of as being stored on
9-track industry-standard 12.7 mm (0.5 in) magnetic tape, other types of
transportable media are not excluded. Each file archived shall be
represented by a header logical record that describes the file,
followed by zero or more logical records that give the contents of the
file. At the end of the archive file there shall be two 512-octet
logical records filled with binary zeros, interpreted as an
end-of-archive indicator.
.P
The logical records may be grouped for physical I/O operations, as
described under the
.BR \(mib \c
.IR blocksize
and
.BR \(mix
.BR ustar
options. Each group of logical records may be written with a single
operation equivalent to the
\fIwrite\fR()
function. On magnetic tape, the result of this write shall be a single
tape physical block. The last physical block shall always be the full
size, so logical records after the two zero logical records may contain
undefined data.
.P
The header logical record shall be structured as shown in the following
table. All lengths and offsets are in decimal.
.br
.sp
.ce 1
\fBTable 4-14: ustar Header Block\fR
.TS
center box tab(@);
cB | cB | cB
lI | n | n.
Field Name@Octet Offset@Length (in Octets)
_
name@0@100
mode@100@8
uid@108@8
gid@116@8
size@124@12
mtime@136@12
chksum@148@8
typeflag@156@1
linkname@157@100
magic@257@6
version@263@2
uname@265@32
gname@297@32
devmajor@329@8
devminor@337@8
prefix@345@155
.TE
.P
All characters in the header logical record shall be represented in the
coded character set of the ISO/IEC\ 646:\|1991 standard. For maximum portability between
implementations, names should be selected from characters represented
by the portable filename character set as octets with the most
significant bit zero. If an implementation supports the use of
characters outside of
&lt;slash&gt;
and the portable filename character set in names for files, users, and
groups, one or more implementation-defined encodings of these characters
shall be provided for interchange purposes.
.P
However, the
.IR pax
utility shall never create filenames on the local system that cannot
be accessed via the procedures described in POSIX.1\(hy2008. If a filename is
found on the medium that would create an invalid filename, it is
implementation-defined whether the data from the file is stored on the
file hierarchy and under what name it is stored. The
.IR pax
utility may choose to ignore these files as long as it produces an
error indicating that the file is being ignored.
.P
Each field within the header logical record is contiguous; that is,
there is no padding used. Each character on the archive medium shall be
stored contiguously.
.P
The fields
.IR magic ,
.IR uname ,
and
.IR gname
are character strings each terminated by a NUL character. The fields
.IR name ,
.IR linkname ,
and
.IR prefix
are NUL-terminated character strings except when all characters in the
array contain non-NUL characters including the last character. The
.IR version
field is two octets containing the characters
.BR \(dq00\(dq 
(zero-zero). The
.IR typeflag
contains a single character. All other fields are leading zero-filled
octal numbers using digits from the ISO/IEC\ 646:\|1991 standard IRV. Each numeric field is
terminated by one or more
&lt;space&gt;
or NUL characters.
.P
The
.IR name
and the
.IR prefix
fields shall produce the pathname of the file. A new pathname shall
be formed, if
.IR prefix
is not an empty string (its first character is not NUL), by
concatenating
.IR prefix
(up to the first NUL character), a
&lt;slash&gt;
character, and
.IR name ;
otherwise,
.IR name
is used alone. In either case,
.IR name
is terminated at the first NUL character. If
.IR prefix
begins with a NUL character, it shall be ignored. In this manner,
pathnames of at most 256 characters can be supported. If a pathname
does not fit in the space provided,
.IR pax
shall notify the user of the error, and shall not store any part of the
file\(emheader or data\(emon the medium.
.P
The
.IR linkname
field, described below, shall not use the
.IR prefix
to produce a pathname. As such, a
.IR linkname
is limited to 100 characters. If the name does not fit in the space
provided,
.IR pax
shall notify the user of the error, and shall not attempt to store the
link on the medium.
.P
The
.IR mode
field provides 12 bits encoded in the ISO/IEC\ 646:\|1991 standard octal digit representation.
The encoded bits shall represent the following values:
.br
.sp
.ce 1
\fBTable: ustar \fImode\fP Field\fR
.TS
tab(!) center box;
cB | cB | cB
n | l | l.
Bit Value!POSIX.1\(hy2008 Bit!Description
_
04\|000!S_ISUID!Set UID on execution.
02\|000!S_ISGID!Set GID on execution.
01\|000!&lt;reserved&gt;!Reserved for future standardization.
00\|400!S_IRUSR!Read permission for file owner class.
00\|200!S_IWUSR!Write permission for file owner class.
00\|100!S_IXUSR!Execute/search permission for file owner class.
00\|040!S_IRGRP!Read permission for file group class.
00\|020!S_IWGRP!Write permission for file group class.
00\|010!S_IXGRP!Execute/search permission for file group class.
00\|004!S_IROTH!Read permission for file other class.
00\|002!S_IWOTH!Write permission for file other class.
00\|001!S_IXOTH!Execute/search permission for file other class.
.TE
.P
When appropriate privileges are required to set one of these mode bits,
and the user restoring the files from the archive does not have
appropriate privileges, the mode bits for which the user does not have
appropriate privileges shall be ignored. Some of the mode bits in the
archive format are not mentioned elsewhere in this volume of POSIX.1\(hy2008. If the
implementation does not support those bits, they may be ignored.
.P
The
.IR uid
and
.IR gid
fields are the user and group ID of the owner and group of the file,
respectively.
.P
The
.IR size
field is the size of the file in octets. If the
.IR typeflag
field is set to specify a file to be of type 1 (a link) or 2 (a
symbolic link), the
.IR size
field shall be specified as zero. If the
.IR typeflag
field is set to specify a file of type 5 (directory), the
.IR size
field shall be interpreted as described under the definition of that
record type. No data logical records are stored for types 1, 2, or 5.
If the
.IR typeflag
field is set to 3 (character special file), 4 (block special file), or
6 (FIFO), the meaning of the
.IR size
field is unspecified by this volume of POSIX.1\(hy2008, and no data logical records shall be
stored on the medium. Additionally, for type 6, the
.IR size
field shall be ignored when reading. If the
.IR typeflag
field is set to any other value, the number of logical records written
following the header shall be (\c
.IR size +511)/512,
ignoring any fraction in the result of the division.
.P
The
.IR mtime
field shall be the modification time of the file at the time it was
archived. It is the ISO/IEC\ 646:\|1991 standard representation of the octal value of the
modification time obtained from the
\fIstat\fR()
function.
.P
The
.IR chksum
field shall be the ISO/IEC\ 646:\|1991 standard IRV representation of the octal value of the
simple sum of all octets in the header logical record. Each octet in
the header shall be treated as an unsigned value. These values shall be
added to an unsigned integer, initialized to zero, the precision of
which is not less than 17 bits. When calculating the checksum, the
.IR chksum
field is treated as if it were all
&lt;space&gt;
characters.
.P
The
.IR typeflag
field specifies the type of file archived. If a particular
implementation does not recognize the type, or the user does not have
appropriate privileges to create that type, the file shall be extracted
as if it were a regular file if the file type is defined to have a
meaning for the
.IR size
field that could cause data logical records to be written on the medium
(see the previous description for
.IR size ).
If conversion to a regular file occurs, the
.IR pax
utility shall produce an error indicating that the conversion took
place. All of the
.IR typeflag
fields shall be coded in the ISO/IEC\ 646:\|1991 standard IRV:
.IP "\fR0\fR" 8
Represents a regular file. For backwards-compatibility, a
.IR typeflag
value of binary zero (\c
.BR '\e0' )
should be recognized as meaning a regular file when extracting files
from the archive. Archives written with this version of the archive
file format create regular files with a
.IR typeflag
value of the ISO/IEC\ 646:\|1991 standard IRV
.BR '0' .
.IP "\fR1\fR" 8
Represents a file linked to another file, of any type, previously
archived. Such files are identified by having the same device
and file serial numbers, and pathnames that refer to different
directory entries. All such files shall be archived as linked files.
The linked-to name is specified in the
.IR linkname
field with a NUL-character terminator if it is less than 100 octets in
length.
.IP "\fR2\fR" 8
Represents a symbolic link. The contents of the symbolic link shall be
stored in the
.IR linkname
field.
.IP "\fR3,4\fR" 8
Represent character special files and block special files respectively.
In this case the
.IR devmajor
and
.IR devminor
fields shall contain information defining the device, the format of
which is unspecified by this volume of POSIX.1\(hy2008. Implementations may map the device
specifications to their own local specification or may ignore the
entry.
.IP "\fR5\fR" 8
Specifies a directory or subdirectory. On systems where disk allocation
is performed on a directory basis, the
.IR size
field shall contain the maximum number of octets (which may be rounded
to the nearest disk block allocation unit) that the directory may hold.
A
.IR size
field of zero indicates no such limiting. Systems that do not support
limiting in this manner should ignore the
.IR size
field.
.IP "\fR6\fR" 8
Specifies a FIFO special file. Note that the archiving of a FIFO file
archives the existence of this file and not its contents.
.IP "\fR7\fR" 8
Reserved to represent a file to which an implementation has associated
some high-performance attribute. Implementations without such
extensions should treat this file as a regular file (type 0).
.IP "\fRA\(hyZ\fR" 8
The letters
.BR 'A' 
to
.BR 'Z' ,
inclusive, are reserved for custom implementations. All other values
are reserved for future versions of this standard.
.P
It is unspecified whether files with pathnames that refer to the same
directory entry are archived as linked files or as separate files. If
they are archived as linked files, this means that attempting to
extract both pathnames from the resulting archive will always cause an
error (unless the
.BR \(miu
option is used) because the link cannot be created.
.P
It is unspecified whether files with the same device and file serial
numbers being appended to an archive are treated as linked files to
members that were in the archive before the append.
.P
Attempts to archive a socket using
.BR ustar
interchange format shall produce a diagnostic message. Handling of
other file types is implementation-defined.
.P
The
.IR magic
field is the specification that this archive was output in this archive
format. If this field contains
.BR ustar
(the five characters from the ISO/IEC\ 646:\|1991 standard IRV shown followed by NUL), the
.IR uname
and
.IR gname
fields shall contain the ISO/IEC\ 646:\|1991 standard IRV representation of the owner and
group of the file, respectively (truncated to fit, if necessary). When
the file is restored by a privileged, protection-preserving version of
the utility, the user and group databases shall be scanned for these
names. If found, the user and group IDs contained within these files
shall be used rather than the values contained within the
.IR uid
and
.IR gid
fields.
.SS "cpio Interchange Format"
.P
The octet-oriented
.BR cpio
archive format shall be a series of entries, each comprising a header
that describes the file, the name of the file, and then the contents of
the file.
.P
An archive may be recorded as a series of fixed-size blocks of octets.
This blocking shall be used only to make physical I/O more efficient.
The last group of blocks shall always be at the full size.
.P
For the octet-oriented
.BR cpio
archive format, the individual entry information shall be in the order
indicated and described by the following table; see also the
.IR &lt;cpio.h&gt; 
header.
.br
.sp
.ce 1
\fBTable 4-16: Octet-Oriented cpio Archive Entry\fR
.TS
center box tab(!);
cB | cB | cB
lI | n | l.
Header Field Name!Length (in Octets)!Interpreted as
_
c_magic!6!Octal number
c_dev!6!Octal number
c_ino!6!Octal number
c_mode!6!Octal number
c_uid!6!Octal number
c_gid!6!Octal number
c_nlink!6!Octal number
c_rdev!6!Octal number
c_mtime!11!Octal number
c_namesize!6!Octal number
c_filesize!11!Octal number
_
.T&amp;
cB | cB | cB
lI lI l.
Filename Field Name!Length!Interpreted as
_
c_name!c_namesize!Pathname string
_
.T&amp;
cB | cB | cB
lI lI l.
File Data Field Name!Length!Interpreted as
_
c_filedata!c_filesize!Data
.TE
.SS "cpio Header"
.P
For each file in the archive, a header as defined previously shall be
written. The information in the header fields is written as streams of
the ISO/IEC\ 646:\|1991 standard characters interpreted as octal numbers. The octal numbers
shall be extended to the necessary length by appending the ISO/IEC\ 646:\|1991 standard IRV
zeros at the most-significant-digit end of the number; the result is
written to the most-significant digit of the stream of octets first.
The fields shall be interpreted as follows:
.IP "\fIc_magic\fR" 10
Identify the archive as being a transportable archive by containing the
identifying value
.BR \(dq070707\(dq .
.IP "\fIc_dev\fR,\ \fIc_ino\fR" 10
Contains values that uniquely identify the file within the archive
(that is, no files contain the same pair of
.IR c_dev
and
.IR c_ino
values unless they are links to the same file). The values shall be
determined in an unspecified manner.
.IP "\fIc_mode\fR" 10
Contains the file type and access permissions as defined in the
following table.
.br
.sp
.ce 1
\fBTable 4-17: Values for cpio c_mode Field\fR
.TS
center box tab(@);
cB | cB | cB
l | n | l.
File Permissions Name@Value@Indicates
_
C_IRUSR@000\|400@Read by owner
C_IWUSR@000\|200@Write by owner
C_IXUSR@000\|100@Execute by owner
C_IRGRP@000\|040@Read by group
C_IWGRP@000\|020@Write by group
C_IXGRP@000\|010@Execute by group
C_IROTH@000\|004@Read by others
C_IWOTH@000\|002@Write by others
C_IXOTH@000\|001@Execute by others
C_ISUID@004\|000@Set \fIuid\fP
C_ISGID@002\|000@Set \fIgid\fP
C_ISVTX@001\|000@Reserved
_
.T&amp;
cB | cB | cB
l | n | l.
File Type Name@Value@Indicates
_
C_ISDIR@040\|000@Directory
C_ISFIFO@010\|000@FIFO
C_ISREG@0100\|000@Regular file
C_ISLNK@0120\|000@Symbolic link
.RS 10 
.P
C_ISBLK@060\|000@Block special file
C_ISCHR@020\|000@Character special file
C_ISSOCK@0140\|000@Socket
.P
C_ISCTG@0110\|000@Reserved
.TE
.P
Directories, FIFOs, symbolic links, and regular files shall be
supported on a system conforming to this volume of POSIX.1\(hy2008; additional values defined
previously are reserved for compatibility with existing systems.
Additional file types may be supported; however, such files should not
be written to archives intended to be transported to other systems.
.RE
.IP "\fIc_uid\fR" 10
Contains the user ID of the owner.
.IP "\fIc_gid\fR" 10
Contains the group ID of the group.
.IP "\fIc_nlink\fR" 10
Contains a number greater than or equal to the number of links in the
archive referencing the file. If the
.BR \(mia
option is used to append to a
.IR cpio
archive, then the
.IR pax
utility need not account for the files in the existing part of the
archive when calculating the
.IR c_nlink
values for the appended part of the archive, and need not alter the
.IR c_nlink
values in the existing part of the archive if additional files with the
same
.IR c_dev
and
.IR c_ino
values are appended to the archive.
.IP "\fIc_rdev\fR" 10
Contains implementation-defined information for character or block
special files.
.IP "\fIc_mtime\fR" 10
Contains the latest time of modification of the file at the time the
archive was created.
.IP "\fIc_namesize\fR" 10
Contains the length of the pathname, including the terminating NUL
character.
.IP "\fIc_filesize\fR" 10
Contains the length in octets of the data section following the
header structure.
.SS "cpio Filename"
.P
The
.IR c_name
field shall contain the pathname of the file. The length of this field
in octets is the value of
.IR c_namesize .
.P
If a filename is found on the medium that would create an invalid
pathname, it is implementation-defined whether the data from the file
is stored on the file hierarchy and under what name it is stored.
.P
All characters shall be represented in the ISO/IEC\ 646:\|1991 standard IRV. For maximum
portability between implementations, names should be selected from
characters represented by the portable filename character set as
octets with the most significant bit zero. If an implementation
supports the use of characters outside the portable filename character
set in names for files, users, and groups, one or more
implementation-defined encodings of these characters shall be provided
for interchange purposes. However, the
.IR pax
utility shall never create filenames on the local system that cannot
be accessed via the procedures described previously in this volume of POSIX.1\(hy2008. If a
filename is found on the medium that would create an invalid filename,
it is implementation-defined whether the data from the file is stored on
the local file system and under what name it is stored. The
.IR pax
utility may choose to ignore these files as long as it produces an
error indicating that the file is being ignored.
.SS "cpio File Data"
.P
Following
.IR c_name ,
there shall be
.IR c_filesize
octets of data. Interpretation of such data occurs in a manner
dependent on the file. For regular files, the data shall consist
of the contents of the file. For symbolic links, the data shall
consist of the contents of the symbolic link. If
.IR c_filesize
is zero, no data shall be contained in
.IR c_filedata .
.P
When restoring from an archive:
.IP " *" 4
If the user does not have appropriate privileges to create a file of
the specified type,
.IR pax
shall ignore the entry and write an error message to standard error.
.IP " *" 4
Only regular files and symbolic links have data to be restored. Presuming
a regular file meets any selection criteria that might be imposed on
the format-reading utility by the user, such data shall be restored.
.IP " *" 4
If a user does not have appropriate privileges to set a particular mode
flag, the flag shall be ignored. Some of the mode flags in the archive
format are not mentioned elsewhere in this volume of POSIX.1\(hy2008. If the implementation does
not support those flags, they may be ignored.
.SS "cpio Special Entries"
.P
FIFO special files, directories, and the trailer shall be recorded with
.IR c_filesize
equal to zero. Symbolic links shall be recorded with
.IR c_filesize
equal to the length of the contents of the symbolic link.
For other special files,
.IR c_filesize
is unspecified by this volume of POSIX.1\(hy2008. The header for the next file entry in the
archive shall be written directly after the last octet of the file
entry preceding it. A header denoting the filename
.BR TRAILER!!!
shall indicate the end of the archive; the contents of octets in the
last block of the archive following such a header are undefined.
.SH "EXIT STATUS"
The following exit values shall be returned:
.IP "\00" 6
All files were processed successfully.
.IP &gt;0 6
An error occurred.
.SH "CONSEQUENCES OF ERRORS"
If
.IR pax
cannot create a file or a link when reading an archive or cannot find a
file when writing an archive, or cannot preserve the user ID, group ID,
or file mode when the
.BR \(mip
option is specified, a diagnostic message shall be written to standard
error and a non-zero exit status shall be returned, but processing
shall continue. In the case where
.IR pax
cannot create a link to a file,
.IR pax
shall not, by default, create a second copy of the file.
.P
If the extraction of a file from an archive is prematurely terminated
by a signal or error,
.IR pax
may have only partially extracted the file or (if the
.BR \(min
option was not specified) may have extracted a file of the same name as
that specified by the user, but which is not the file the user wanted.
Additionally, the file modes of extracted directories may have
additional bits from the S_IRWXU mask set as well as incorrect
modification and access times.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
Caution is advised when using the
.BR \(mia
option to append to a
.IR cpio
format archive. If any of the files being appended happen to be given
the same
.IR c_dev
and
.IR c_ino
values as a file in the existing part of the archive, then they may be
treated as links to that file on extraction. Thus, it is risky to use
.BR \(mia
with
.IR cpio
format except when it is done on the same system that the original
archive was created on, and with the same
.IR pax
utility, and in the knowledge that there has been little or no file
system activity since the original archive was created that could lead
to any of the files appended being given the same
.IR c_dev
and
.IR c_ino
values as an unrelated file in the existing part of the archive. Also,
when (intentionally) appending additional links to a file in the
existing part of the archive, the
.IR c_nlink
values in the modified archive can be smaller than the number of links
to the file in the archive, which may mean that the links are not
preserved on extraction.
.P
The
.BR \(mip
(privileges) option was invented to reconcile differences between
historical
.IR tar
and
.IR cpio
implementations. In particular, the two utilities use
.BR \(mim
in diametrically opposed ways. The
.BR \(mip
option also provides a consistent means of extending the ways in which
future file attributes can be addressed, such as for enhanced security
systems or high-performance files. Although it may seem complex, there
are really two modes that are most commonly used:
.IP "\fB\(mip\ e\fR" 8
``Preserve everything''. This would be used by the historical
superuser, someone with all appropriate privileges, to preserve all
aspects of the files as they are recorded in the archive. The
.BR e
flag is the sum of
.BR o
and
.BR p ,
and other implementation-defined attributes.
.IP "\fB\(mip\ p\fR" 8
``Preserve'' the file mode bits. This would be used by the user with
regular privileges who wished to preserve aspects of the file other
than the ownership. The file times are preserved by default, but two
other flags are offered to disable these and use the time of
extraction.
.P
The one pathname per line format of standard input precludes
pathnames containing
&lt;newline&gt;
characters. Although such pathnames violate the portable filename
guidelines, they may exist and their presence may inhibit usage of
.IR pax
within shell scripts. This problem is inherited from historical archive
programs. The problem can be avoided by listing filename arguments on
the command line instead of on standard input.
.P
It is almost certain that appropriate privileges are required for
.IR pax
to accomplish parts of this volume of POSIX.1\(hy2008. Specifically, creating files of type
block special or character special, restoring file access times unless
the files are owned by the user (the
.BR \(mit
option), or preserving file owner, group, and mode (the
.BR \(mip
option) all probably require appropriate privileges.
.P
In
.BR read
mode, implementations are permitted to overwrite files when the archive
has multiple members with the same name. This may fail if permissions
on the first version of the file do not permit it to be overwritten.
.P
The
.BR cpio
and
.BR ustar
formats can only support files up to 8\|589\|934\|592 bytes
(8 \(** 2^30) in size.
.P
When archives containing binary header information are listed , the
filenames printed may cause strange behavior on some terminals.
.P
When all of the following are true:
.IP " 1." 4
A file of type directory is being placed into an archive.
.IP " 2." 4
The
.BR ustar
archive format is being used.
.IP " 3." 4
The pathname of the directory is less than or equal to 155 bytes long
(it will fit in the
.IR prefix
field in the
.BR ustar
header block).
.IP " 4." 4
The last component of the pathname of the directory is longer than 100
bytes long (it will not fit in the
.IR name
field in the
.BR ustar
header block).
.P
some implementations of the
.IR pax
utility will place the entire directory pathname in the
.IR prefix
field, set the
.IR name
field to an empty string, and place the directory in the archive.
Other implementations of the
.IR pax
utility will give an error under these conditions because the
.IR name
field is not large enough to hold the last component of the directory name.
This standard allows either behavior. However, when extracting a directory
from a
.BR ustar
format archive, this standard requires that all implementations be able
to extract a directory even if the
.IR name
field contains an empty string as long as the
.IR prefix
field does not also contain an empty string.
.SH EXAMPLES
The following command:
.sp
.RS 4
.nf
\fB
pax \(miw \(mif /dev/rmt/1m .
.fi \fR
.P
.RE
.P
copies the contents of the current directory to tape drive 1, medium
density (assuming historical System V device naming procedures\(emthe
historical BSD device name would be
.BR /dev/rmt9 ).
.P
The following commands:
.sp
.RS 4
.nf
\fB
mkdir \fInewdir\fR
pax \(mirw \fIolddir newdir\fR
.fi \fR
.P
.RE
.P
copy the
.IR olddir
directory hierarchy to
.IR newdir .
.sp
.RS 4
.nf
\fB
pax \(mir \(mis ',^//*usr//*,,' \(mif a.pax
.fi \fR
.P
.RE
.P
reads the archive
.BR a.pax ,
with all files rooted in
.BR /usr
in the archive extracted relative to the current directory.
.P
Using the option:
.sp
.RS 4
.nf
\fB
\(mio listopt="%M %(atime)T %(size)D %(name)s"
.fi \fR
.P
.RE
.P
overrides the default output description in Standard Output and instead
writes:
.sp
.RS 4
.nf
\fB
\(mirw\(mirw\(mi\|\(mi\|\(mi Jan 12 15:53 2003 1492 /usr/foo/bar
.fi \fR
.P
.RE
.P
Using the options:
.sp
.RS 4
.nf
\fB
\(mio listopt='%L\et%(size)D\en%.7' \e
\(mio listopt='(name)s\en%(atime)T\en%T'
.fi \fR
.P
.RE
.P
overrides the default output description in Standard Output and instead
writes:
.sp
.RS 4
.nf
\fB
/usr/foo/bar \(mi&gt; /tmp   1492
/usr/fo
Jan 12 15:53 1991
Jan 31 15:53 2003
.fi \fR
.P
.RE
.SH RATIONALE
The
.IR pax
utility was new for the ISO\ POSIX\(hy2:\|1993 standard. It represents a peaceful
compromise between advocates of the historical
.IR tar
and
.IR cpio
utilities.
.P
A fundamental difference between
.IR cpio
and
.IR tar
was in the way directories were treated. The
.IR cpio
utility did not treat directories differently from other files, and to
select a directory and its contents required that each file in the
hierarchy be explicitly specified. For
.IR tar ,
a directory matched every file in the file hierarchy it rooted.
.P
The
.IR pax
utility offers both interfaces; by default, directories map into the
file hierarchy they root. The
.BR \(mid
option causes
.IR pax
to skip any file not explicitly referenced, as
.IR cpio
historically did. The
.IR tar
.BR \(mi \c
.IR style
behavior was chosen as the default because it was believed that this
was the more common usage and because
.IR tar
is the more commonly available interface, as it was historically
provided on both System V and BSD implementations.
.P
The data interchange format specification in this volume of POSIX.1\(hy2008 requires that
processes with ``appropriate privileges'' shall always restore the
ownership and permissions of extracted files exactly as archived. If
viewed from the historic equivalence between superuser and
``appropriate privileges'', there are two problems
with this requirement. First, users running as superusers may
unknowingly set dangerous permissions on extracted files. Second, it is
needlessly limiting, in that superusers cannot extract files and own
them as superuser unless the archive was created by the superuser. (It
should be noted that restoration of ownerships and permissions for the
superuser, by default, is historical practice in
.IR cpio ,
but not in
.Im tar .)
In order to avoid these two problems, the
.IR pax
specification has an additional ``privilege'' mechanism, the
.BR \(mip
option. Only a
.IR pax
invocation with the privileges needed, and which has the
.BR \(mip
option set using the
.BR e
specification character, has appropriate privileges to restore
full ownership and permission information.
.P
Note also that this volume of POSIX.1\(hy2008 requires that the file ownership and access
permissions shall be set, on extraction, in the same fashion as the
\fIcreat\fR()
function when provided with the mode stored in the archive. This means
that the file creation mask of the user is applied to the file
permissions.
.P
Users should note that directories may be created by
.IR pax
while extracting files with permissions that are different from those
that existed at the time the archive was created. When extracting
sensitive information into a directory hierarchy that no longer exists,
users are encouraged to set their file creation mask appropriately to
protect these files during extraction.
.P
The table of contents output is written to standard output to
facilitate pipeline processing.
.P
An early proposal had hard links displaying for all pathnames. This
was removed because it complicates the output of the case where
.BR \(miv
is not specified and does not match historical
.IR cpio
usage. The hard-link information is available in the
.BR \(miv
display.
.P
The description of the
.BR \(mil
option allows implementations to make hard links to symbolic links.
Earlier versions of this standard did not specify any way to create a
hard link to a symbolic link, but many implementations provided this
capability as an extension. If there are hard links to symbolic links
when an archive is created, the implementation is required to archive
the hard link in the archive (unless
.BR \(miH
or
.BR \(miL
is specified). When in
.BR read
mode and in
.BR copy
mode, implementations supporting hard links to symbolic links should
use them when appropriate.
.P
The archive formats inherited from the POSIX.1\(hy1990 standard have certain restrictions
that have been brought along from historical usage. For example, there
are restrictions on the length of pathnames stored in the archive.
When
.IR pax
is used in
.BR copy (\c
.BR \(mirw )
mode (copying directory hierarchies), the ability to use extensions
from the
.BR \(mix \c
.BR pax
format overcomes these restrictions.
.P
The default
.IR blocksize
value of 5\|120 bytes for
.IR cpio
was selected because it is one of the standard block-size values for
.IR cpio ,
set when the
.BR \(miB
option is specified. (The other default block-size value for
.IR cpio
is 512 bytes, and this was considered to be too small.) The default
block value of 10\|240 bytes for
.IR tar
was selected because that is the standard block-size value for BSD
.IR tar .
The maximum block size of 32\|256 bytes (2\s-3\u15\d\s+3\(mi512 bytes)
is the largest multiple of 512 bytes that fits into a signed 16-bit
tape controller transfer register. There are known limitations in some
historical systems that would prevent larger blocks from being
accepted. Historical values were chosen to improve compatibility with
historical scripts using
.IR dd
or similar utilities to manipulate archives. Also, default block sizes
for any file type other than character special file has been deleted
from this volume of POSIX.1\(hy2008 as unimportant and not likely to affect the structure of the
resulting archive.
.P
Implementations are permitted to modify the block-size value based on
the archive format or the device to which the archive is being
written. This is to provide implementations with the opportunity to
take advantage of special types of devices, and it should not be used
without a great deal of consideration as it almost certainly decreases
archive portability.
.P
The intended use of the
.BR \(min
option was to permit extraction of one or more files from the archive
without processing the entire archive. This was viewed by the standard
developers as offering significant performance advantages over
historical implementations. The
.BR \(min
option in early proposals had three effects; the first was to cause
special characters in patterns to not be treated specially. The second
was to cause only the first file that matched a pattern to be
extracted. The third was to cause
.IR pax
to write a diagnostic message to standard error when no file was found
matching a specified pattern. Only the second behavior is retained by
this volume of POSIX.1\(hy2008, for many reasons. First, it is in general not acceptable for a
single option to have multiple effects. Second, the ability to make
pattern matching characters act as normal characters
is useful for parts of
.IR pax
other than file extraction. Third, a finer degree of control over the
special characters is useful because users may wish to normalize only a
single special character in a single filename. Fourth, given a more
general escape mechanism, the previous behavior of the
.BR \(min
option can be easily obtained using the
.BR \(mis
option or a
.IR sed
script. Finally, writing a diagnostic message when a pattern specified
by the user is unmatched by any file is useful behavior in all cases.
.P
In this version, the
.BR \(min
was removed from the
.BR copy
mode synopsis of
.IR pax ;
it is inapplicable because there are no pattern operands specified in
this mode.
.P
There is another method than
.IR pax
for copying subtrees in POSIX.1\(hy2008 described as part of the
.IR cp
utility. Both methods are historical practice:
.IR cp
provides a simpler, more intuitive interface, while
.IR pax
offers a finer granularity of control. Each provides additional
functionality to the other; in particular,
.IR pax
maintains the hard-link structure of the hierarchy while
.IR cp
does not. It is the intention of the standard developers that the
results be similar (using appropriate option combinations in both
utilities). The results are not required to be identical; there seemed
insufficient gain to applications to balance the difficulty of
implementations having to guarantee that the results would be exactly
identical.
.P
A single archive may span more than one file. It is suggested that
implementations provide informative messages to the user on standard
error whenever the archive file is changed.
.P
The
.BR \(mid
option (do not create intermediate directories not listed in the
archive) found in early proposals was originally provided as a
complement to the historic
.BR \(mid
option of
.IR cpio .
It has been deleted.
.P
The
.BR \(mis
option in early proposals specified a subset of the substitution
command from the
.IR ed
utility. As there was no reason for only a subset to be supported, the
.BR \(mis
option is now compatible with the current
.IR ed
specification. Since the delimiter can be any non-null character, the
following usage with single
&lt;space&gt;
characters is valid:
.sp
.RS 4
.nf
\fB
pax \(mis " foo bar " ...
.fi \fR
.P
.RE
.P
The
.BR \(mit
description is worded so as to note that this may cause the access time
update caused by some other activity (which occurs while the file is
being read) to be overwritten.
.P
The default behavior of
.IR pax
with regard to file modification times is the same as historical
implementations of
.IR tar .
It is not the historical behavior of
.IR cpio .
.P
Because the
.BR \(mii
option uses
.BR /dev/tty ,
utilities without a controlling terminal are not able to use this
option.
.P
The
.BR \(miy
option, found in early proposals, has been deleted because a line
containing a single
&lt;period&gt;
for the
.BR \(mii
option has equivalent functionality. The special lines for the
.BR \(mii
option (a single
&lt;period&gt;
and the empty line) are historical practice in
.IR cpio .
.P
In early drafts, a
.BR \(mie \c
.IR charmap
option was included to increase portability of files between systems
using different coded character sets. This option was omitted because
it was apparent that consensus could not be formed for it. In this
version, the use of UTF\(hy8 should be an adequate substitute.
.P
The ISO\ POSIX\(hy2:\|1993 standard and ISO\ POSIX\(hy1 standard requirements for
.IR pax ,
however, made it very difficult to create a single archive containing
files created using extended characters provided by different locales.
This version adds the
.BR hdrcharset
keyword to make it possible to archive files in these cases without
dropping files due to translation errors.
.P
Translating filenames and other attributes from a locale's encoding to
UTF\(hy8 and then back again can lose information, as the resulting
filename might not be byte-for-byte equivalent to the original. To
avoid this problem, users can specify the
.BR \(mio
.BR hdrcharset=binary
option, which will cause the resulting archive to use binary
format for all names and attributes. Such archives are not portable
among hosts that use different native encodings (e.g., EBCDIC
\fIversus\fR ASCII-based encodings), but they will allow interchange
among the vast majority of POSIX file systems in practical use. Also,
the
.BR \(mio
.BR hdrcharset=binary
option will cause
.IR pax
in
.BR copy
mode to behave more like other standard utilities such as
.IR cp .
.P
If the values specified by the
.BR \(mio
.BR exthdr.name=value ,
.BR \(mio
.BR globexthdr.name=value ,
or by
.BR $TMPDIR
(if
.BR \(mio
.BR globexthdr.name
is not specified) require a character encoding other than that
described in the ISO/IEC\ 646:\|1991 standard, a
.BR path
extended header record will have to be created for the file. If a
.BR hdrcharset
extended header record is active for such headers, it will determine
the codeset used for the value field in these extended
.BR path
header records. These
.BR path
extended header records always need to be created when writing an
archive even if
.BR hdrcharset=binary
has been specified and would contain the same (binary) data that
appears in the
.BR ustar
header record prefix and
.IR name
fields. (In other words, an extended header
.BR path
record is always required to be generated if the
.IR prefix
or
.IR name
fields contain non-ASCII characters even when
.BR hdrcharset=binary
is also in effect for that file.)
.P
The
.BR \(mik
option was added to address international concerns about the dangers
involved in the character set transformations of
.BR \(mie
(if the target character set were different from the source, the
filenames might be transformed into names matching existing files) and
also was made more general to protect files transferred between file
systems with different
{NAME_MAX}
values (truncating a filename on a smaller system might also
inadvertently overwrite existing files). As stated, it prevents any
overwriting, even if the target file is older than the source. This
version adds more granularity of options to solve this problem by
introducing the
.BR \(mio \c
.BR invalid=option \c
\(emspecifically the
.BR UTF\(hy8
and
.BR binary
actions. (Note that an existing file is still subject to overwriting in
this case. The
.BR \(mik
option closes that loophole.)
.P
Some of the file characteristics referenced in this volume of POSIX.1\(hy2008 might not be
supported by some archive formats. For example, neither the
.BR tar
nor
.BR cpio
formats contain the file access time. For this reason, the
.BR e
specification character has been provided, intended to cause all file
characteristics specified in the archive to be retained.
.P
It is required that extracted directories, by default, have their
access and modification times and permissions set to the values
specified in the archive. This has obvious problems in that the
directories are almost certainly modified after being extracted and
that directory permissions may not permit file creation. One possible
solution is to create directories with the mode specified in the
archive, as modified by the
.IR umask
of the user, with sufficient permissions to allow file creation. After
all files have been extracted,
.IR pax
would then reset the access and modification times and permissions as
necessary.
.P
The list-mode formatting description borrows heavily from the one
defined by the
.IR printf
utility. However, since there is no separate operand list to get
conversion arguments, the format was extended to allow specifying the
name of the conversion argument as part of the conversion
specification.
.P
The
.BR T
conversion specifier allows time fields to be displayed in any of
the date formats. Unlike the
.IR ls
utility,
.IR pax
does not adjust the format when the date is less than six months in the
past. This makes parsing the output more predictable.
.P
The
.BR D
conversion specifier handles the ability to display the major/minor
or file size, as with
.IR ls ,
by using \fR%\(mi8(\fIsize\fR)D\fR.
.P
The
.BR L
conversion specifier handles the
.IR ls
display for symbolic links.
.P
Conversion specifiers were added to generate existing known types used
for
.IR ls .
.SS "pax Interchange Format"
.P
The new POSIX data interchange format was developed primarily to
satisfy international concerns that the
.BR ustar
and
.BR cpio
formats did not provide for file, user, and group names encoded in
characters outside a subset of the ISO/IEC\ 646:\|1991 standard. The standard developers
realized that this new POSIX data interchange format should be very
extensible because there were other requirements they foresaw in the
near future:
.IP " *" 4
Support international character encodings and locale information
.IP " *" 4
Support security information (ACLs, and so on)
.IP " *" 4
Support future file types, such as realtime or contiguous files
.IP " *" 4
Include data areas for implementation use
.IP " *" 4
Support systems with words larger than 32 bits and timers with
subsecond granularity
.P
The following were not goals for this format because these are better
handled by separate utilities or are inappropriate for a portable
format:
.IP " *" 4
Encryption
.IP " *" 4
Compression
.IP " *" 4
Data translation between locales and codesets
.IP " *" 4
.IR inode
storage
.P
The format chosen to support the goals is an extension of the
.BR ustar
format. Of the two formats previously available, only the
.BR ustar
format was selected for extensions because:
.IP " *" 4
It was easier to extend in an upwards-compatible way. It offered version
flags and header block type fields with room for future
standardization. The
.BR cpio
format, while possessing a more flexible file naming methodology, could
not be extended without breaking some theoretical implementation
or using a dummy filename that could be a legitimate filename.
.IP " *" 4
Industry experience since the original ``\c
.IR tar
wars'' fought in developing the ISO\ POSIX\(hy1 standard has clearly been in favor of the
.BR ustar
format, which is generally the default output format selected for
.IR pax
implementations on new systems.
.P
The new format was designed with one additional goal in mind:
reasonable behavior when an older
.IR tar
or
.IR pax
utility happened to read an archive. Since the POSIX.1\(hy1990 standard mandated that a
``format-reading utility'' had to treat unrecognized
.IR typeflag
values as regular files, this allowed the format to include all the
extended information in a pseudo-regular file that preceded each real
file. An option is given that allows the archive creator to set up
reasonable names for these files on the older systems. Also, the
normative text suggests that reasonable file access values be used for
this
.BR ustar
header block. Making these header files inaccessible for convenient
reading and deleting would not be reasonable. File permissions of 600
or 700 are suggested.
.P
The
.BR ustar
.IR typeflag
field was used to accommodate the additional functionality of the new
format rather than magic or version because the POSIX.1\(hy1990 standard (and, by
reference, the previous version of
.IR pax ),
mandated the behavior of the format-reading utility when it encountered
an unknown
.IR typeflag ,
but was silent about the other two fields.
.P
Early proposals for the first version of this standard contained a proposed
archive format that was based on compatibility with the standard for
tape files (ISO\ 1001, similar to the format used historically on many
mainframes and minicomputers). This format was overly complex and required
considerable overhead in volume and header records. Furthermore, the
standard developers felt that it would not be acceptable to the community
of POSIX developers, so it was later changed to be a format more closely
related to historical practice on POSIX systems.
.P
The prefix and name split of pathnames in
.BR ustar
was replaced by the single path extended header record for simplicity.
.P
The concept of a global extended header (\c
.IR typeflag \c
.BR g )
was controversial. If this were applied to an archive being recorded on
magnetic tape, a few unreadable blocks at the beginning of the tape
could be a serious problem; a utility attempting to extract as many
files as possible from a damaged archive could lose a large percentage
of file header information in this case. However, if the archive were
on a reliable medium, such as a CD\(hyROM, the global extended header
offers considerable potential size reductions by eliminating redundant
information. Thus, the text warns against using the global method for
unreliable media and provides a method for implanting global
information in the extended header for each file, rather than in the
.IR typeflag
.BR g
records.
.P
No facility for data translation or filtering on a per-file basis is
included because the standard developers could not invent an interface
that would allow this in an efficient manner. If a filter, such as
encryption or compression, is to be applied to all the files, it is
more efficient to apply the filter to the entire archive as a single
file. The standard developers considered interfaces that would invoke a
shell script for each file going into or out of the archive, but the
system overhead in this approach was considered to be too high.
.P
One such approach would be to have
.BR filter=
records that give a pathname for an executable. When the program is
invoked, the file and archive would be open for standard input/output
and all the header fields would be available as environment variables
or command-line arguments. The standard developers did discuss such
schemes, but they were omitted from POSIX.1\(hy2008 due to concerns about
excessive overhead. Also, the program itself would need to be in the
archive if it were to be used portably.
.P
There is currently no portable means of identifying the character
set(s) used for a file in the file system. Therefore,
.IR pax
has not been given a mechanism to generate charset records
automatically. The only portable means of doing this is for the user to
write the archive using the
.BR \(mio \c
.BR charset=string
command line option. This assumes that all of the files in the archive
use the same encoding. The ``implementation-defined'' text is
included to allow for a system that can identify the encodings used for
each of its files.
.P
The table of standards that accompanies the charset record description
is acknowledged to be very limited. Only a limited number of character
set standards is reasonable for maximal interchange. Any character set
is, of course, possible by prior agreement. It was suggested that
EBCDIC be listed, but it was omitted because it is not defined by a
formal standard. Formal standards, and then only those with reasonably
large followings, can be included here, simply as a matter of
practicality. The &lt;\fIvalue\fP&gt;s represent names of officially
registered character sets in the format required by the ISO\ 2375:\|1985 standard.
.P
The normal
&lt;comma&gt;
or
&lt;blank&gt;-separated
list rules are not followed in the case of keyword options to allow
ease of argument parsing for
.IR getopts .
.P
Further information on character encodings is in
.IR "pax Archive Character Set Encoding/Decoding".
.P
The standard developers have reserved keyword name space for vendor
extensions. It is suggested that the format to be used is:
.sp
.RS 4
.nf
\fB
\fIVENDOR.keyword\fR
.fi \fR
.P
.RE
.P
where
.IR VENDOR
is the name of the vendor or organization in all uppercase letters. It
is further suggested that the keyword following the
&lt;period&gt;
be named differently than any of the standard keywords so that it could
be used for future standardization, if appropriate, by omitting the
.IR VENDOR
prefix.
.P
The &lt;\fIlength\fP&gt; field in the extended header record was included to
make it simpler to step through the records, even if a record contains
an unknown format (to a particular
.IR pax )
with complex interactions of special characters. It also provides a
minor integrity checkpoint within the records to aid a program
attempting to recover files from a damaged archive.
.P
There are no extended header versions of the
.IR devmajor
and
.IR devminor
fields because the unspecified format
.BR ustar
header field should be sufficient. If they are not, vendor-specific
extended keywords (such as
.IR VENDOR.devmajor )
should be used.
.P
Device and
.IR i -number
labeling of files was not adopted from
.IR cpio ;
files are interchanged strictly on a symbolic name basis, as in
.BR ustar .
.P
Just as with the
.BR ustar
format descriptions, the new format makes no special arrangements for
multi-volume archives. Each of the
.IR pax
archive types is assumed to be inside a single POSIX file and splitting
that file over multiple volumes (diskettes, tape cartridges, and so
on), processing their labels, and mounting each in the proper sequence
are considered to be implementation details that cannot be described
portably.
.P
The
.BR pax
format is intended for interchange, not only for backup on a single
(family of) systems. It is not as densely packed as might be possible
for backup:
.IP " *" 4
It contains information as coded characters that could be coded in
binary.
.IP " *" 4
It identifies extended records with name fields that could be omitted
in favor of a fixed-field layout.
.IP " *" 4
It translates names into a portable character set and identifies
locale-related information, both of which are probably unnecessary for
backup.
.P
The requirements on restoring from an archive are slightly different
from the historical wording, allowing for non-monolithic privilege to
bring forward as much as possible. In particular, attributes such as
``high performance file'' might be broadly but not universally granted
while set-user-ID or
\fIchown\fR()
might be much more restricted. There is no implication in POSIX.1\(hy2008 that
the security information be honored after it is restored to the file
hierarchy, in spite of what might be improperly inferred by the silence
on that topic. That is a topic for another standard.
.P
Links are recorded in the fashion described here because a link can be
to any file type. It is desirable in general to be able to restore part
of an archive selectively and restore all of those files completely. If
the data is not associated with each link, it is not possible to do
this. However, the data associated with a file can be large, and when
selective restoration is not needed, this can be a significant burden.
The archive is structured so that files that have no associated data
can always be restored by the name of any link name of any link, and
the user may choose whether data is recorded with each instance of a
file that contains data. The format permits mixing of both types of
links in a single archive; this can be done for special needs, and
.IR pax
is expected to interpret such archives on input properly, despite the
fact that there is no
.IR pax
option that would force this mixed case on output. (When
.BR \(mio
.BR linkdata
is used, the output must contain the duplicate data, but the
implementation is free to include it or omit it when
.BR \(mio
.BR linkdata
is not used.)
.P
The time values are included as extended header records for those
implementations needing more than the eleven octal digits allowed by
the
.BR ustar
format. Portable file timestamps cannot be negative. If
.IR pax
encounters a file with a negative timestamp in
.BR copy
or
.BR write
mode, it can reject the file, substitute a non-negative timestamp, or
generate a non-portable timestamp with a leading
.BR '\(mi' .
Even though some implementations can support finer file-time
granularities than seconds, the normative text requires support only
for seconds since the Epoch because the ISO\ POSIX\(hy1 standard states them that way. The
.BR ustar
format includes only
.IR mtime ;
the new format adds
.IR atime
and
.IR ctime
for symmetry. The
.IR atime
access time restored to the file system will be affected by the
.BR \(mip
.BR a
and
.BR \(mip
.BR e
options. The
.IR ctime
creation time (actually
.IR inode
modification time) is described with appropriate privileges so that
it can be ignored when writing to the file system. POSIX does not
provide a portable means to change file creation time. Nothing is
intended to prevent a non-portable implementation of
.IR pax
from restoring the value.
.P
The
.IR gid ,
.IR size ,
and
.IR uid
extended header records were included to allow expansion beyond the
sizes specified in the regular
.IR tar
header. New file system architectures are emerging that will exhaust
the 12-digit size field. There are probably not many systems requiring
more than 8 digits for user and group IDs, but the extended header
values were included for completeness, allowing overrides for all of
the decimal values in the
.IR tar
header.
.P
The standard developers intended to describe the effective results of
.IR pax
with regard to file ownerships and permissions; implementations are not
restricted in timing or sequencing the restoration of such, provided
the results are as specified.
.P
Much of the text describing the extended headers refers to use in ``\c
.BR write
or
.BR copy
modes''. The
.BR copy
mode references are due to the normative text: ``The effect of the
copy shall be as if the copied files were written to an archive file
and then subsequently extracted .\|.\|.''. There is certainly no way to
test whether
.IR pax
is actually generating the extended headers in
.BR copy
mode, but the effects must be as if it had.
.SS "pax Archive Character Set Encoding/Decoding"
.P
There is a need to exchange archives of files between systems of
different native codesets. Filenames, group names, and user names must
be preserved to the fullest extent possible when an archive is read on
the receiving platform. Translation of the contents of files is not
within the scope of the
.IR pax
utility.
.P
There will also be the need to represent characters that are not
available on the receiving platform. These unsupported characters
cannot be automatically folded to the local set of characters due to
the chance of collisions. This could result in overwriting previous
extracted files from the archive or pre-existing files on the system.
.P
For these reasons, the codeset used to represent characters within the
extended header records of the
.IR pax
archive must be sufficiently rich to handle all commonly used character
sets. The fields requiring translation include, at a minimum,
filenames, user names, group names, and link pathnames. Implementations
may wish to have localized extended keywords that use non-portable
characters.
.P
The standard developers considered the following options:
.IP " *" 4
The archive creator specifies the well-defined name of the source
codeset. The receiver must then recognize the codeset name and perform
the appropriate translations to the destination codeset.
.IP " *" 4
The archive creator includes within the archive the character mapping
table for the source codeset used to encode extended header records.
The receiver must then read the character mapping table and perform the
appropriate translations to the destination codeset.
.IP " *" 4
The archive creator translates the extended header records in the
source codeset into a canonical form. The receiver must then perform
the appropriate translations to the destination codeset.
.P
The approach that incorporates the name of the source codeset poses the
problem of codeset name registration, and makes the archive useless to
.IR pax
archive decoders that do not recognize that codeset.
.P
Because parts of an archive may be corrupted, the standard developers
felt that including the character map of the source codeset was too
fragile. The loss of this one key component could result in making the
entire archive useless. (The difference between this and the global
extended header decision was that the latter has a
workaround\(emduplicating extended header records on unreliable
media\(embut this would be too burdensome for large character set
maps.)
.P
Both of the above approaches also put an undue burden on the
.IR pax
archive receiver to handle the cross-product of all source and
destination codesets.
.P
To simplify the translation from the source codeset to the canonical
form and from the canonical form to the destination codeset, the
standard developers decided that the internal representation should be
a stateless encoding. A stateless encoding is one where each codepoint
has the same meaning, without regard to the decoder being in a specific
state. An example of a stateful encoding would be the Japanese
Shift-JIS; an example of a stateless encoding would be the ISO/IEC\ 646:\|1991 standard
(equivalent to 7-bit ASCII).
.P
For these reasons, the standard developers decided to adopt a canonical
format for the representation of file information strings. The obvious,
well-endorsed candidate is the ISO/IEC\ 10646\(hy1:\|2000 standard (based in part on Unicode), which
can be used to represent the characters of virtually all standardized
character sets. The standard developers initially agreed upon using
UCS2 (16-bit Unicode) as the internal representation. This repertoire
of characters provides a sufficiently rich set to represent all
commonly-used codesets.
.P
However, the standard developers found that the 16-bit Unicode
representation had some problems. It forced the issue of standardizing
byte ordering. The 2-byte length of each character made the extended
header records twice as long for the case of strings coded entirely
from historical 7-bit ASCII. For these reasons, the standard developers
chose the UTF\(hy8 defined in the ISO/IEC\ 10646\(hy1:\|2000 standard. This multi-byte representation
encodes UCS2 or UCS4 characters reliably and deterministically,
eliminating the need for a canonical byte ordering. In addition, NUL
octets and other characters possibly confusing to POSIX file systems do
not appear, except to represent themselves. It was realized that
certain national codesets take up more space after the encoding, due to
their placement within the UCS range; it was felt that the usefulness
of the encoding of the names outweighs the disadvantage of size
increase for file, user, and group names.
.P
The encoding of UTF\(hy8 is as follows:
.sp
.RS 4
.nf
\fB
UCS4 Hex Encoding  UTF-8 Binary Encoding
.P
00000000-0000007F  0xxxxxxx
00000080-000007FF  110xxxxx 10xxxxxx
00000800-0000FFFF  1110xxxx 10xxxxxx 10xxxxxx
00010000-001FFFFF  11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
00200000-03FFFFFF  111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx
04000000-7FFFFFFF  1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx
.fi \fR
.P
.RE
.P
where each
.BR 'x' 
represents a bit value from the character being translated.
.SS "ustar Interchange Format"
.P
The description of the
.BR ustar
format reflects numerous enhancements over pre-1988 versions of the
historical
.IR tar
utility. The goal of these changes was not only to provide the
functional enhancements desired, but also to retain compatibility
between new and old versions. This compatibility has been retained.
Archives written using the old archive format are compatible with the
new format.
.P
Implementors should be aware that the previous file format did not
include a mechanism to archive directory type files. For this reason,
the convention of using a filename ending with
&lt;slash&gt;
was adopted to specify a directory on the archive.
.P
The total size of the
.IR name
and
.IR prefix
fields have been set to meet the minimum requirements for
{PATH_MAX}.
If a pathname will fit within the
.IR name
field, it is recommended that the pathname be stored there without the
use of the
.IR prefix
field. Although the name field is known to be too small to contain
{PATH_MAX}
characters, the value was not changed in this version of the archive
file format to retain backwards-compatibility, and instead the prefix
was introduced. Also, because of the earlier version of the format,
there is no way to remove the restriction on the
.IR linkname
field being limited in size to just that of the
.IR name
field.
.P
The
.IR size
field is required to be meaningful in all implementation extensions,
although it could be zero. This is required so that the data blocks can
always be properly counted.
.P
It is suggested that if device special files need to be represented
that cannot be represented in the standard format, that one of the
extension types (\c
.BR A \(hy\c
.BR Z )
be used, and that the additional information for the special file be
represented as data and be reflected in the
.IR size
field.
.P
Attempting to restore a special file type, where it is converted to
ordinary data and conflicts with an existing filename, need not be
specially detected by the utility. If run as an ordinary user,
.IR pax
should not be able to overwrite the entries in, for example,
.BR /dev
in any case (whether the file is converted to another type or not). If
run as a privileged user, it should be able to do so, and it would be
considered a bug if it did not. The same is true of ordinary data files
and similarly named special files; it is impossible to anticipate the
needs of the user (who could really intend to overwrite the file), so
the behavior should be predictable (and thus regular) and rely on the
protection system as required.
.P
The value 7 in the
.IR typeflag
field is intended to define how contiguous files can be stored in a
.BR ustar
archive. POSIX.1\(hy2008 does not require the contiguous file extension, but does
define a standard way of archiving such files so that all conforming
systems can interpret these file types in a meaningful and consistent
manner. On a system that does not support extended file types, the
.IR pax
utility should do the best it can with the file and go on to the next.
.P
The file protection modes are those conventionally used by the
.IR ls
utility. This is extended beyond the usage in the ISO\ POSIX\(hy2 standard to support the
``shared text'' or ``sticky'' bit. It is intended that the conformance
document should not document anything beyond the existence of and
support of such a mode. Further extensions are expected to these bits,
particularly with overloading the set-user-ID and set-group-ID flags.
.SS "cpio Interchange Format"
.P
The reference to appropriate privileges in the
.BR cpio
format refers to an error on standard output; the
.BR ustar
format does not make comparable statements.
.P
The model for this format was the historical System V
.IR cpio \c
.BR \(mic
data interchange format. This model documents the portable version of
the
.BR cpio
format and not the binary version. It has the flexibility to transfer
data of any type described within POSIX.1\(hy2008, yet is extensible to transfer
data types specific to extensions beyond POSIX.1\(hy2008 (for example, contiguous
files). Because it describes existing practice, there is no question of
maintaining upwards-compatibility.
.SS "cpio Header"
.P
There has been some concern that the size of the
.IR c_ino
field of the header is too small to handle those systems that have very
large
.IR inode
numbers. However, the
.IR c_ino
field in the header is used strictly as a hard-link resolution
mechanism for archives. It is not necessarily the same value as the
.IR inode
number of the file in the location from which that file is extracted.
.P
The name
.IR c_magic
is based on historical usage.
.SS "cpio Filename"
.P
For most historical implementations of the
.IR cpio
utility,
{PATH_MAX}
octets can be used to describe the pathname without the addition of
any other header fields (the NUL character would be included in this
count).
{PATH_MAX}
is the minimum value for pathname size, documented as 256 bytes.
However, an implementation may use
.IR c_namesize
to determine the exact length of the pathname. With the current
description of the
.IR &lt;cpio.h&gt; 
header, this pathname size can be as large as a number that is
described in six octal digits.
.P
Two values are documented under the
.IR c_mode
field values to provide for extensibility for known file types:
.IP "\fB0110\ 000\fP" 10
Reserved for contiguous files. The implementation may treat the rest of
the information for this archive like a regular file. If this file type
is undefined, the implementation may create the file as a regular
file.
.P
This provides for extensibility of the
.BR cpio
format while allowing for the ability to read old archives. Files of an
unknown type may be read as ``regular files'' on some implementations.
On a system that does not support extended file types, the
.IR pax
utility should do the best it can with the file and go on to the next.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "Chapter 2" ", " "Shell Command Language",
.IR "\fIcp\fR\^",
.IR "\fIed\fR\^",
.IR "\fIgetopts\fR\^",
.IR "\fIls\fR\^",
.IR "\fIprintf\fR\^"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 3.169" ", " "File Mode Bits",
.IR "Chapter 5" ", " "File Format Notation",
.IR "Chapter 8" ", " "Environment Variables",
.IR "Section 12.2" ", " "Utility Syntax Guidelines",
.IR "\fB&lt;cpio.h&gt;\fP"
.P
The System Interfaces volume of POSIX.1\(hy2008,
.IR "\fIchown\fR\^(\|)",
.IR "\fIcreat\fR\^(\|)",
.IR "\fIfstatat\fR\^(\|)",
.IR "\fImkdir\fR\^(\|)",
.IR "\fImkfifo\fR\^(\|)",
.IR "\fIutime\fR\^(\|)",
.IR "\fIwrite\fR\^(\|)"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.
.TH PR "1" "March 2017" "GNU coreutils 8.27" "User Commands"
.SH NAME
pr \- convert text files for printing
.SH SYNOPSIS
.B pr
[\fI\,OPTION\/\fR]... [\fI\,FILE\/\fR]...
.SH DESCRIPTION
.\" Add any additional description here
.PP
Paginate or columnate FILE(s) for printing.
.PP
With no FILE, or when FILE is \-, read standard input.
.PP
Mandatory arguments to long options are mandatory for short options too.
.TP
+FIRST_PAGE[:LAST_PAGE], \fB\-\-pages\fR=\fI\,FIRST_PAGE[\/\fR:LAST_PAGE]
begin [stop] printing with page FIRST_[LAST_]PAGE
.TP
\fB\-COLUMN\fR, \fB\-\-columns\fR=\fI\,COLUMN\/\fR
output COLUMN columns and print columns down,
unless \fB\-a\fR is used. Balance number of lines in the
columns on each page
.TP
\fB\-a\fR, \fB\-\-across\fR
print columns across rather than down, used together
with \fB\-COLUMN\fR
.TP
\fB\-c\fR, \fB\-\-show\-control\-chars\fR
use hat notation (^G) and octal backslash notation
.TP
\fB\-d\fR, \fB\-\-double\-space\fR
double space the output
.TP
\fB\-D\fR, \fB\-\-date\-format\fR=\fI\,FORMAT\/\fR
use FORMAT for the header date
.TP
\fB\-e[CHAR[WIDTH]]\fR, \fB\-\-expand\-tabs\fR[=\fI\,CHAR[WIDTH]\/\fR]
expand input CHARs (TABs) to tab WIDTH (8)
.TP
\fB\-F\fR, \fB\-f\fR, \fB\-\-form\-feed\fR
use form feeds instead of newlines to separate pages
(by a 3\-line page header with \fB\-F\fR or a 5\-line header
and trailer without \fB\-F\fR)
.TP
\fB\-h\fR, \fB\-\-header\fR=\fI\,HEADER\/\fR
use a centered HEADER instead of filename in page header,
\fB\-h\fR "" prints a blank line, don't use \fB\-h\fR""
.TP
\fB\-i[CHAR[WIDTH]]\fR, \fB\-\-output\-tabs\fR[=\fI\,CHAR[WIDTH]\/\fR]
replace spaces with CHARs (TABs) to tab WIDTH (8)
.TP
\fB\-J\fR, \fB\-\-join\-lines\fR
merge full lines, turns off \fB\-W\fR line truncation, no column
alignment, \fB\-\-sep\-string\fR[=\fI\,STRING\/\fR] sets separators
.TP
\fB\-l\fR, \fB\-\-length\fR=\fI\,PAGE_LENGTH\/\fR
set the page length to PAGE_LENGTH (66) lines
(default number of lines of text 56, and with \fB\-F\fR 63).
implies \fB\-t\fR if PAGE_LENGTH &lt;= 10
.TP
\fB\-m\fR, \fB\-\-merge\fR
print all files in parallel, one in each column,
truncate lines, but join lines of full length with \fB\-J\fR
.TP
\fB\-n[SEP[DIGITS]]\fR, \fB\-\-number\-lines\fR[=\fI\,SEP[DIGITS]\/\fR]
number lines, use DIGITS (5) digits, then SEP (TAB),
default counting starts with 1st line of input file
.TP
\fB\-N\fR, \fB\-\-first\-line\-number\fR=\fI\,NUMBER\/\fR
start counting with NUMBER at 1st line of first
page printed (see +FIRST_PAGE)
.TP
\fB\-o\fR, \fB\-\-indent\fR=\fI\,MARGIN\/\fR
offset each line with MARGIN (zero) spaces, do not
affect \fB\-w\fR or \fB\-W\fR, MARGIN will be added to PAGE_WIDTH
.TP
\fB\-r\fR, \fB\-\-no\-file\-warnings\fR
omit warning when a file cannot be opened
.TP
\fB\-s[CHAR]\fR, \fB\-\-separator\fR[=\fI\,CHAR\/\fR]
separate columns by a single character, default for CHAR
is the &lt;TAB&gt; character without \fB\-w\fR and 'no char' with \fB\-w\fR.
\fB\-s[CHAR]\fR turns off line truncation of all 3 column
options (\fB\-COLUMN\fR|\-a \fB\-COLUMN\fR|\-m) except \fB\-w\fR is set
.TP
\fB\-S[STRING]\fR, \fB\-\-sep\-string\fR[=\fI\,STRING\/\fR]
separate columns by STRING,
without \fB\-S\fR: Default separator &lt;TAB&gt; with \fB\-J\fR and &lt;space&gt;
otherwise (same as \fB\-S\fR" "), no effect on column options
.TP
\fB\-t\fR, \fB\-\-omit\-header\fR
omit page headers and trailers;
implied if PAGE_LENGTH &lt;= 10
.TP
\fB\-T\fR, \fB\-\-omit\-pagination\fR
omit page headers and trailers, eliminate any pagination
by form feeds set in input files
.TP
\fB\-v\fR, \fB\-\-show\-nonprinting\fR
use octal backslash notation
.TP
\fB\-w\fR, \fB\-\-width\fR=\fI\,PAGE_WIDTH\/\fR
set page width to PAGE_WIDTH (72) characters for
multiple text\-column output only, \fB\-s[char]\fR turns off (72)
.TP
\fB\-W\fR, \fB\-\-page\-width\fR=\fI\,PAGE_WIDTH\/\fR
set page width to PAGE_WIDTH (72) characters always,
truncate lines, except \fB\-J\fR option is set, no interference
with \fB\-S\fR or \fB\-s\fR
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-\-version\fR
output version information and exit
.SH AUTHOR
Written by Pete TerMaat and Roland Huebner.
.SH "REPORTING BUGS"
GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt;
.br
Report pr translation bugs to &lt;http://translationproject.org/team/&gt;
.SH COPYRIGHT
Copyright \(co 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
Full documentation at: &lt;http://www.gnu.org/software/coreutils/pr&gt;
.br
or available locally via: info \(aq(coreutils) pr invocation\(aq
.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.
.TH PRINTF "1" "March 2017" "GNU coreutils 8.27" "User Commands"
.SH NAME
printf \- format and print data
.SH SYNOPSIS
.B printf
\fI\,FORMAT \/\fR[\fI\,ARGUMENT\/\fR]...
.br
.B printf
\fI\,OPTION\/\fR
.SH DESCRIPTION
.\" Add any additional description here
.PP
Print ARGUMENT(s) according to FORMAT, or execute according to OPTION:
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-\-version\fR
output version information and exit
.PP
FORMAT controls the output as in C printf.  Interpreted sequences are:
.TP
\e"
double quote
.TP
\e\e
backslash
.TP
\ea
alert (BEL)
.TP
\eb
backspace
.TP
\ec
produce no further output
.TP
\ee
escape
.TP
\ef
form feed
.TP
\en
new line
.TP
\er
carriage return
.TP
\et
horizontal tab
.TP
\ev
vertical tab
.TP
\eNNN
byte with octal value NNN (1 to 3 digits)
.TP
\exHH
byte with hexadecimal value HH (1 to 2 digits)
.TP
\euHHHH
Unicode (ISO/IEC 10646) character with hex value HHHH (4 digits)
.TP
\eUHHHHHHHH
Unicode character with hex value HHHHHHHH (8 digits)
.TP
%%
a single %
.TP
%b
ARGUMENT as a string with '\e' escapes interpreted,
except that octal escapes are of the form \e0 or \e0NNN
.TP
%q
ARGUMENT is printed in a format that can be reused as shell input,
escaping non\-printable characters with the proposed POSIX $'' syntax.
.PP
and all C format specifications ending with one of diouxXfeEgGcs, with
ARGUMENTs converted to proper type first.  Variable widths are handled.
.PP
NOTE: your shell may have its own version of printf, which usually supersedes
the version described here.  Please refer to your shell's documentation
for details about the options it supports.
.SH AUTHOR
Written by David MacKenzie.
.SH "REPORTING BUGS"
GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt;
.br
Report printf translation bugs to &lt;http://translationproject.org/team/&gt;
.SH COPYRIGHT
Copyright \(co 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
printf(3)
.PP
.br
Full documentation at: &lt;http://www.gnu.org/software/coreutils/printf&gt;
.br
or available locally via: info \(aq(coreutils) printf invocation\(aq
'\" t
.\" (The preceding line is a note to broken versions of man to tell
.\" Man page for ps.
.\" Quick hack conversion by Albert Cahalan, 1998.
.\" Licensed under version 2 of the Gnu General Public License.
.\"
.TH PS 1 "August 2015" "procps-ng" "User Commands"
.\"
.\" To render this page:
.\"    groff -t -b -man -X -P-resolution -P100 -Tps ps.1 &amp;
.\"    groff -t -b -man -X -TX100 ps.1 &amp;
.\"    tbl ps.1 | troff -Ww -man -z
.\"    groff -t -man -Tps ps.1 | ps2pdf - - &gt; ps.pdf
.\"
.\" Ragged-right text.
.na
.\" Disable hyphenation.
.nh
.\"
.\" ColSize is used for the format spec table.
.\" It's the left margin, minus the right, minus
.\" the space needed for the 1st two columns.
.\" Making it messy: inches, ens, points, scaled points...
.\"
.nr ColSize ((\n[.l] - \n[.i]) / 1n - 29)
.\"
.SH NAME
ps \- report a snapshot of the current processes.
.SH SYNOPSIS
\fBps\fR [\fIoptions\fR]
.PP
.PP
.SH DESCRIPTION
.B ps
displays information about a selection of the active processes.  If you want
a repetitive update of the selection and the displayed information, use
.IR top (1)
instead.
.P
This version of
.B ps
accepts several kinds of options:
.IP
.PD 0
.IP 1 4
UNIX options, which may be grouped and must be preceded by a dash.
.IP 2 4
BSD options, which may be grouped and must not be used with a dash.
.IP 3 4
GNU long options, which are preceded by two dashes.
.PD
.PP
Options of different types may be freely mixed, but conflicts can appear.
There are some synonymous options, which are functionally identical, due to
the many standards and
.B ps
implementations that this
.B ps
is compatible with.
.P
Note that "\fBps \-aux\fR" is distinct from "\fBps\ aux\fR".  The POSIX and
UNIX standards require that "\fBps\ \-aux\fR" print all processes owned by a
user named "x", as well as printing all processes that would be selected by
the
.B \-a
option.  If the user named "x" does not exist, this
.B ps
may interpret the command as "\fBps\ aux\fR" instead and print a warning.
This behavior is intended to aid in transitioning old scripts and habits.  It
is fragile, subject to change, and thus should not be relied upon.
.P
By default,
.B ps
selects all processes with the same effective user ID (euid=EUID) as the
current user and associated with the same terminal as the invoker.  It
displays the process ID (pid=PID), the terminal associated with the process
(tname=TTY), the cumulated CPU time in [DD\-]hh:mm:ss format (time=TIME), and
the executable name (ucmd=CMD).  Output is unsorted by default.
.P
The use of BSD\-style options will add process state (stat=STAT) to the
default display and show the command args (args=COMMAND) instead of the
executable name.  You can override this with the
.B PS_FORMAT
environment variable. The use of BSD\-style options will also change the
process selection to include processes on other terminals (TTYs) that are
owned by you; alternately, this may be described as setting the selection to
be the set of all processes filtered to exclude processes owned by other
users or not on a terminal.  These effects are not considered when options
are described as being "identical" below, so
.B \-M
will be considered identical to \fBZ\fR and so on.
.P
Except as described below, process selection options are additive.  The
default selection is discarded, and then the selected processes are added to
the set of processes to be displayed.  A process will thus be shown if it
meets any of the given selection criteria.
.PP
.\" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.SH "EXAMPLES"
.TP 3
To see every process on the system using standard syntax:
.B ps\ \-e
.br
.B ps\ \-ef
.br
.B ps\ \-eF
.br
.B ps\ \-ely
.TP
To see every process on the system using BSD syntax:
.B ps\ ax
.br
.B ps\ axu
.TP
To print a process tree:
.B ps\ -ejH
.br
.B ps\ axjf
.TP
To get info about threads:
.B ps\ -eLf
.br
.B ps\ axms
.TP
To get security info:
.B ps\ -eo euser,ruser,suser,fuser,f,comm,label
.br
.B ps\ axZ
.br
.B ps\ -eM
.TP
To see every process running as root (real\ &amp;\ effective\ ID) in user format:
.B ps\ \-U\ root\ \-u\ root\ u
.TP
To see every process with a user\-defined format:
.B ps\ \-eo\ pid,tid,class,rtprio,ni,pri,psr,pcpu,stat,wchan:14,comm
.br
.B ps\ axo\ stat,euid,ruid,tty,tpgid,sess,pgrp,ppid,pid,pcpu,comm
.br
.B ps\ \-Ao\ pid,tt,user,fname,tmout,f,wchan
.TP
Print only the process IDs of syslogd:
.B ps\ \-C\ syslogd\ \-o\ pid=
.TP
Print only the name of PID 42:
.B ps\ \-q\ 42\ \-o\ comm=
.PP
.PP
.\" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.SH "SIMPLE PROCESS SELECTION"
.TP
.BR a
Lift the BSD\-style "only yourself" restriction, which is imposed upon the
set of all processes when some BSD\-style (without "\-") options are used or
when the
.B ps
personality setting is BSD\-like.  The set of processes selected in this
manner is in addition to the set of processes selected by other means.  An
alternate description is that this option causes
.B ps
to list all processes with a terminal (tty), or to list all processes when
used together with the
.B x
option.
.TP
.B \-A
Select all processes.  Identical to
.BR \-e .
.TP
.B \-a
Select all processes except both session leaders (see
.IR getsid (2))
and processes not associated with a terminal.
.TP
.B \-d
Select all processes except session leaders.
.TP
.B \-\-deselect
Select all processes except those that fulfill the specified conditions
(negates the selection).  Identical to
.BR \-N .
.TP
.B \-e
Select all processes.  Identical to
.BR \-A .
.\" Current "g" behavior: add in the session leaders, which would
.\" be excluded in the sunos4 personality. Supposed "g" behavior:
.\" add in the group leaders -- at least according to the SunOS 4
.\" man page on the FreeBSD site. Uh oh. I think I had tested SunOS
.\" though, so maybe the code is correct.
.TP
.B g
Really all, even session leaders.  This flag is obsolete and may be
discontinued in a future release.  It is normally implied by the
.B a
flag, and is only useful when operating in the sunos4 personality.
.TP
.B \-N
Select all processes except those that fulfill the specified conditions
(negates the selection).  Identical to
.BR \-\-deselect .
.TP
.B T
Select all processes associated with this terminal.  Identical to the
.B t
option without any argument.
.TP
.B r
Restrict the selection to only running processes.
.TP
.B x
Lift the BSD\-style "must have a tty" restriction, which is imposed upon the
set of all processes when some BSD\-style (without "\-") options are used or
when the
.B ps
personality setting is BSD\-like.  The set of processes selected in this
manner is in addition to the set of processes selected by other means.  An
alternate description is that this option causes
.B ps
to list all processes owned by you (same EUID as
.BR ps ),
or to list all processes when used together with the
.B a
option.
.\" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.PD
.PP
.SH "PROCESS SELECTION BY LIST"
These options accept a single argument in the form of a blank\-separated or
comma\-separated list.  They can be used multiple times.  For example:
\fBps\ \-p\ "1\ 2"\ \-p\ 3,4\fR
.TP
.RI \- 123
Identical to \fB\-\-pid\ \fI123\fR.
.TP
.I 123
Identical to \fB\-\-pid\ \fI123\fR.
.TP
.BI \-C \ cmdlist
Select by command name.  This selects the processes whose executable name is
given in
.IR cmdlist .
.TP
.BI \-G \ grplist
Select by real group ID (RGID) or name.  This selects the processes whose
real group name or ID is in the
.I grplist
list.  The real group ID identifies the group of the user who created the
process, see
.IR getgid (2).
.TP
.BI \-g \ grplist
Select by session OR by effective group name.  Selection by session is
specified by many standards, but selection by effective group is the logical
behavior that several other operating systems use.  This
.B ps
will select by session when the list is completely numeric (as sessions
are).  Group ID numbers will work only when some group names are also
specified.  See the
.B \-s
and
.B \-\-group
options.
.TP
.BI \-\-Group \ grplist
Select by real group ID (RGID) or name.  Identical to
.BR \-G .
.TP
.BI \-\-group \ grplist
Select by effective group ID (EGID) or name.  This selects the processes
whose effective group name or ID is in
.IR grplist .
The effective group ID describes the group whose file access permissions are
used by the process (see
.IR getegid (2)).
The
.B \-g
option is often an alternative to
.BR \-\-group .
.TP
.BI p \ pidlist
Select by process ID.  Identical to
.B \-p
and
.BR \-\-pid .
.TP
.BI \-p \ pidlist
Select by PID.  This selects the processes whose process ID numbers appear in
.IR pidlist .
Identical to
.B p
and
.BR \-\-pid .
.TP
.BI  \-\-pid \ pidlist
Select by process\ ID.  Identical to
.B \-p
and
.BR p .
.TP
.BI \-\-ppid \ pidlist
Select by parent process ID.  This selects the processes with a parent
process\ ID in
.IR pidlist .
That is, it selects processes that are children of those listed in
.IR pidlist .
.TP
.BI q \ pidlist
Select by process ID (quick mode).  Identical to
.B \-q
and
.BR \-\-quick\-pid .
.TP
.BI \-q \ pidlist
Select by PID (quick mode).  This selects the processes whose process ID numbers appear in
.IR pidlist .
With this option \fBps\fR reads the necessary info only
for the pids listed in the \fIpidlist\fR and doesn't apply
additional filtering rules. The order of pids is unsorted
and preserved. No additional selection options, sorting
and forest type listings are allowed in this mode.
Identical to
.B q
and
.BR \-\-quick\-pid .
.TP
.BI  \-\-quick\-pid \ pidlist
Select by process\ ID (quick mode).  Identical to
.B \-q
and
.BR q .
.TP
.BI \-s \ sesslist
Select by session ID.  This selects the processes with a session ID specified
in
.IR sesslist .
.TP
.BI \-\-sid \ sesslist
Select by session\ ID.  Identical to
.BR \-s .
.TP
.BI t \ ttylist
Select by tty.  Nearly identical to
.B \-t
and
.BR \-\-tty ,
but can also
be used with an empty
.I ttylist
to indicate the terminal associated with
.BR ps .
Using the
.B T
option is considered cleaner than using
.B t
with an empty
.IR ttylist .
.TP
.BI \-t \ ttylist
Select by tty.  This selects the processes associated with the terminals
given in
.IR ttylist .
Terminals (ttys, or screens for text output) can be specified in several
forms: /dev/ttyS1, ttyS1, S1.  A plain "\-" may be used to select processes
not attached to any terminal.
.TP
.BI \-\-tty \ ttylist
Select by terminal.  Identical to
.B \-t
and
.BR t .
.TP
.BI U \ userlist
Select by effective user ID (EUID) or name.  This selects the processes whose
effective user name or ID is in
.IR userlist .
The effective user ID describes the user whose file access permissions are
used by the process (see
.IR  geteuid (2)).
Identical to
.B \-u
and
.BR \-\-user .
.TP
.BI \-U \ userlist
Select by real user ID (RUID) or name.  It selects the processes whose real
user name or ID is in the
.I userlist
list.  The real user ID identifies the user who created the process, see
.IR getuid (2).
.TP
.BI \-u \ userlist
Select by effective user ID (EUID) or name.  This selects the processes whose
effective user name or ID is in
.IR userlist .

The effective user ID describes the user whose file
access permissions are used by the process (see
.IR geteuid (2)).
Identical to
.B U
and
.BR \-\-user .
.TP
.BI \-\-User \ userlist
Select by real user ID (RUID) or name.  Identical to
.BR \-U .
.TP
.BI \-\-user \ userlist
Select by effective user ID (EUID) or name.  Identical to
.B \-u
and
.BR U .
.\" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.PD
.PP
.SH "OUTPUT FORMAT CONTROL"
These options are used to choose the information displayed by
.BR ps .
The output may differ by personality.
.PP
.TP
.B \-c
Show different scheduler information for the
.B \-l
option.
.TP
.B \-\-context
Display security context format (for SELinux).
.TP
.B \-f
Do full\-format listing. This option can be combined with many other
UNIX\-style options to add additional columns.  It also causes the command
arguments to be printed.  When used with
.BR \-L ,
the NLWP (number of threads) and LWP (thread ID) columns will be added.  See
the
.B c
option, the format keyword
.BR args ,
and the format keyword
.BR comm .
.TP
.B \-F
Extra full format.  See the
.B \-f
option, which
.B \-F
implies.
.TP
.BI \-\-format \ format
user\-defined format.  Identical to
.B \-o
and
.BR o .
.TP
.B j
BSD job control format.
.TP
.B \-j
Jobs format.
.TP
.B l
Display BSD long format.
.TP
.B \-l
Long format.  The
.B \-y
option is often useful with this.
.TP
.B \-M
Add a column of security data.  Identical to
.B Z
(for SELinux).
.TP
.BI O \ format
is preloaded
.B o
(overloaded).  The BSD
.B O
option can act like
.B \-O
(user\-defined output format with some common fields predefined) or can be
used to specify sort order.  Heuristics are used to determine the behavior of
this option.  To ensure that the desired behavior is obtained (sorting or
formatting), specify the option in some other way (e.g.  with
.B \-O
or
.BR \-\-sort ).
When used as a formatting option, it is identical to
.BR \-O ,
with the BSD personality.
.TP
.BI \-O \ format
Like
.BR \-o ,
but preloaded with some default columns.  Identical to
\fB\-o\ pid,\:\fIformat\fB,\:state,\:tname,\:time,\:command\fR or
\fB\-o\ pid,\:\fIformat\fB,\:tname,\:time,\:cmd\fR,
see
.B \-o
below.
.TP
.BI o \ format
Specify user\-defined format.  Identical to
.B \-o
and
.BR \-\-format .
.TP
.BI \-o \ format
User\-defined format.
.I format
is a single argument in the form of a blank\-separated or comma\-separated
list, which offers a way to specify individual output columns.  The
recognized keywords are described in the
.B STANDARD FORMAT SPECIFIERS
section below.  Headers may be renamed
.RB ( "ps \-o pid,\:ruser=RealUser \-o comm=Command" )
as desired.
If all column headers are empty
.RB ( "ps \-o pid= \-o comm=" )
then the header line will not be output.  Column width will increase as
needed for wide headers; this may be used to widen up columns such as WCHAN
.RB ( "ps \-o pid,\:wchan=\:WIDE\-\:WCHAN\-\:COLUMN \-o comm" ).
Explicit width
control
.RB ( "ps opid,\:wchan:42,\:cmd" )
is offered too.  The behavior of
.B ps -o pid=X,\:comm=Y
varies with personality; output may be one column named "X,\:comm=Y" or two
columns named "X" and "Y".  Use multiple
.B \-o
options when in doubt.  Use the
.B PS_FORMAT
environment variable to specify a default as desired; DefSysV and DefBSD are
macros that may be used to choose the default UNIX or BSD columns.
.TP
.B s
Display signal format.
.TP
.B u
Display user\-oriented format.
.TP
.B v
Display virtual memory format.
.TP
.B X
Register format.
.TP
.B \-y
Do not show flags; show rss in place of addr.  This option can only be used
with
.BR \-l .
.TP
.B Z
Add a column of security data.  Identical to
.B \-M
(for SELinux).
.\" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.PD
.PP
.SH "OUTPUT MODIFIERS"
.\"  .TP
.\"  .B C
.\"  use raw CPU time for %CPU instead of decaying average
.TP
.B c
Show the true command name.  This is derived from the name of the executable
file, rather than from the argv value.  Command arguments and any
modifications to them are thus not shown.  This option effectively turns the
.B args
format keyword into the
.B comm
format keyword; it is useful with the
.B \-f
format option and with the various BSD\-style format options, which all
normally display the command arguments.  See the
.B \-f
option, the format
keyword
.BR args ,
and the format keyword
.BR comm .
.TP
.BI \-\-cols \ n
Set screen width.
.TP
.BI \-\-columns \ n
Set screen width.
.TP
.B \-\-cumulative
Include some dead child process data (as a sum with the parent).
.TP
.B e
Show the environment after the command.
.TP
.B f
ASCII art process hierarchy (forest).
.TP
.B \-\-forest
ASCII art process tree.
.TP
.B h
No header.  (or, one header per screen in the BSD personality).  The
.B h
option is problematic.  Standard BSD
.B ps
uses this option to print a header on each page of output, but older Linux
.B ps
uses this option to totally disable the header.  This version of
.B ps
follows the Linux usage of not printing the header unless the BSD personality
has been selected, in which case it prints a header on each page of output.
Regardless of the current personality, you can use the long options
.B \-\-headers
and
.B \-\-no\-headers
to enable printing headers each page or disable headers entirely,
respectively.
.TP
.B \-H
Show process hierarchy (forest).
.TP
.B \-\-headers
Repeat header lines, one per page of output.
.TP
.BI k \ spec
Specify sorting order.  Sorting syntax is
[\fB+\fR|\fB\-\fR]\fIkey\fR[,[\fB+\fR|\fB\-\fR]\fIkey\fR[,...]].
Choose a multi\-letter key from the
.B STANDARD FORMAT SPECIFIERS
section.  The "+" is optional since default direction is increasing
numerical or lexicographic order.  Identical to
.BR \-\-sort .
.RS 8
.IP
Examples:
.br
.B ps jaxkuid,\-ppid,+pid
.br
.B ps axk comm o comm,args
.br
.B ps kstart_time \-ef
.RE
.TP
.BI \-\-lines \ n
Set screen height.
.TP
.B n
Numeric output for WCHAN and USER (including all types of UID and GID).
.TP
.B \-\-no\-headers
Print no header line at all.
.B \-\-no\-heading
is an alias for this option.
.TP
.BI O \ order
Sorting order (overloaded).
The BSD
.B O
option can act like
.B \-O
(user\-defined output format with some common fields predefined) or can be
used to specify sort order.  Heuristics are used to determine the behavior of
this option.  To ensure that the desired behavior is obtained (sorting or
formatting), specify the option in some other way (e.g.  with
.B \-O
or
.BR \-\-sort ).
.IP
For sorting, obsolete BSD
.B O
option syntax is
\fBO\fR[\fB+\fR|\fB\-\fR]\fIk1\fR[,[\fB+\fR|\fB\-\fR]\fIk2\fR[,...]].
It orders the processes listing according to the multilevel sort specified by
the sequence of one\-letter short keys
.IR k1 , k2 ", ..."
described in the
.B OBSOLETE SORT KEYS
section below.  The\ "+" is currently optional, merely re\-iterating the
default direction on a key, but may help to distinguish an
.B O
sort from an
.B O
format.  The "\-" reverses direction only on the key it precedes.
.TP
.BI \-\-rows \ n
Set screen height.
.TP
.B S
Sum up some information, such as CPU usage, from dead child processes into
their parent.  This is useful for examining a system where a parent process
repeatedly forks off short\-lived children to do work.
.TP
.BI \-\-sort \ spec
Specify sorting order.  Sorting syntax is
[\fB+\fR|\fB\-\fR]\fIkey\fR[,[\fB+\fR|\fB\-\fR]\fIkey\fR[,...]].  Choose a
multi\-letter key from the
.B STANDARD FORMAT SPECIFIERS
section.  The "+" is optional since default direction is increasing numerical
or lexicographic order.  Identical to
.BR k .
For example:
.B ps jax \-\-sort=\:uid,\:\-ppid,\:+pid
.TP
.B w
Wide output.  Use this option twice for unlimited width.
.TP
.B \-w
Wide output.  Use this option twice for unlimited width.
.TP
.BI \-\-width \ n
Set screen width.
.\" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.PD
.PP
.SH "THREAD DISPLAY"
.TP
.B H
Show threads as if they were processes.
.TP
.B \-L
Show threads, possibly with LWP and NLWP columns.
.TP
.B m
Show threads after processes.
.TP
.B \-m
Show threads after processes.
.TP
.B \-T
Show threads, possibly with SPID column.
.\" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.PD
.PP
.SH "OTHER INFORMATION"
.TP
.BI \-\-help \ section
Print a help message.  The section argument can be one of
\fIs\fRimple,
\fIl\fRist,
\fIo\fRutput,
\fIt\fRhreads,
\fIm\fRisc or
\fIa\fRll.
The argument can be shortened to one of the underlined letters as in: s|l|o|t|m|a.
.TP
.B \-\-info
Print debugging info.
.TP
.B L
List all format specifiers.
.TP
.B V
Print the procps-ng version.
.TP
.B \-V
Print the procps-ng version.
.TP
.B \-\-version
Print the procps-ng version.
.\" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.PD
.PP
.SH NOTES
This
.B ps
works by reading the virtual files in /proc.  This
.B ps
does not need to be setuid kmem or have any privileges to run.  Do not give
this
.B ps
any special permissions.
.PP
.PP
CPU usage is currently expressed as the percentage of time spent running
during the entire lifetime of a process.  This is not ideal, and\ it does not
conform to the standards that
.B ps
otherwise conforms to.  CPU usage is unlikely to add up to exactly 100%.
.PP
The SIZE and RSS fields don't count some parts of a process including the
page tables, kernel stack, struct thread_info, and struct task_struct.  This
is usually at least 20 KiB of memory that is always resident.  SIZE is the
virtual size of the process (code+\:data+\:stack).
.PP
Processes marked &lt;defunct&gt; are dead processes (so\-called "zombies") that
remain because their parent has not destroyed them properly.  These processes
will be destroyed by
.IR init (8)
if the parent process exits.
.PP
If the length of the username is greater than the length of the display
column, the username will be truncated. See the -o and -O formatting
options to customize length.
.PP
Commands options such as
.B ps \-aux
are not recommended as it is a confusion of two different standards.
According to the POSIX and UNIX standards, the above command asks to
display all processes with a TTY (generally the commands users are
running) plus all processes owned by a user named "x".  If that user
doesn't exist, then
.B ps
will assume you really meant "\fBps\fR \fIaux\fR".
.SH "PROCESS FLAGS"
The sum of these values is displayed in the "F" column,
which is provided by the
.B flags
output specifier:
.IP
.RS 8
.PD 0
.TP 5
1
forked but didn't exec
.TP
4
used super\-user privileges
.PD
.RE
.PP
.SH "PROCESS STATE CODES"
Here are the different values that the
.BR s , \ stat \ and \ state
output specifiers (header "STAT" or "S") will display to describe the state
of a process:
.IP
.RS 8
.PD 0
.TP 5
D
uninterruptible sleep (usually IO)
.TP
R
running or runnable (on run queue)
.TP
S
interruptible sleep (waiting for an event to complete)
.TP
T
stopped by job control signal
.TP
t
stopped by debugger during the tracing
.TP
W
paging (not valid since the 2.6.xx kernel)
.TP
X
dead (should never be seen)
.TP
Z
defunct ("zombie") process, terminated but not reaped by its parent
.PD
.RE
.PP
For BSD formats and when the
.B stat
keyword is used, additional characters may be displayed:
.IP
.RS 8
.PD 0
.TP 5
&lt;
high\-priority (not nice to other users)
.TP
N
low\-priority (nice to other users)
.TP
L
has pages locked into memory (for real\-time and custom IO)
.TP
s
is a session leader
.TP
l
is multi-threaded (using CLONE_THREAD, like NPTL pthreads do)
.TP
+
is in the foreground process group
.PD
.RE
.PP
.SH "OBSOLETE SORT KEYS"
These keys are used by the BSD
.B O
option (when it is used for sorting).  The GNU
.B \-\-sort
option doesn't use these keys, but the specifiers described below in the
.B STANDARD FORMAT SPECIFIERS
section.  Note that the values used in sorting are the internal values
.B ps
uses and not the "cooked" values used in some of the output format fields
(e.g.  sorting on tty will sort into device number, not according to the
terminal name displayed).  Pipe
.B ps
output into the
.BR sort (1)
command if you want to sort the cooked values.
.TS
l l lw(3i).
\fBKEY	LONG	DESCRIPTION\fR
c	cmd	simple name of executable
C	pcpu	cpu utilization
f	flags	flags as in long format F field
g	pgrp	process group ID
G	tpgid	controlling tty process group ID
j	cutime	cumulative user time
J	cstime	cumulative system time
k	utime	user time
m	min_flt	number of minor page faults
M	maj_flt	number of major page faults
n	cmin_flt	cumulative minor page faults
N	cmaj_flt	cumulative major page faults
o	session	session ID
p	pid	process ID
P	ppid	parent process ID
r	rss	resident set size
R	resident	resident pages
s	size	memory size in kilobytes
S	share	amount of shared pages
t	tty	the device number of the controlling tty
T	start_time	time process was started
U	uid	user ID number
u	user	user name
v	vsize	total VM size in KiB
y	priority	kernel scheduling priority
.\"K	stime	system time (conflict, system vs. start time)
.TE
.PP
.PP
.SH "AIX FORMAT DESCRIPTORS"
This
.B ps
supports AIX format descriptors, which work somewhat like the
formatting codes of
.IR printf (1)
and
.IR printf (3).
For example, the normal default output can be produced with this:
\fBps \-eo "%p %y %x %c"\fR.
The
.B NORMAL
codes are described in the next section.
.TS
l l l.
\fBCODE	NORMAL	HEADER\fR
%C	pcpu	%CPU
%G	group	GROUP
%P	ppid	PPID
%U	user	USER
%a	args	COMMAND
%c	comm	COMMAND
%g	rgroup	RGROUP
%n	nice	NI
%p	pid	PID
%r	pgid	PGID
%t	etime	ELAPSED
%u	ruser	RUSER
%x	time	TIME
%y	tty	TTY
%z	vsz	VSZ
.TE
.SH "STANDARD FORMAT SPECIFIERS"
Here are the different keywords that may be used to control the output
format (e.g. with option
.BR \-o )
or to sort the selected processes with the GNU\-style
.B \-\-sort
option.
.PP
For example:
.B ps \-eo pid,\:user,\:args \-\-sort user
.PP
This version of
.B ps
tries to recognize most of the keywords used in other implementations of
.BR ps .
.PP
The following user\-defined format specifiers may contain
spaces:
.BR args , \ cmd , \ comm , \ command , \ fname , \ ucmd , \ ucomm ,
.BR lstart , \ bsdstart , \ start .
.PP
Some keywords may not be available for sorting.

.\" #######################################################################
.\" lB1 lB1 lB1 lB1 s s s
.\" lB1 l1  l1  l1  s s s.
.\"
.\" lB1 lB1 lBw(5.5i)
.\" lB1 l1  l.
.\"
.TS
expand;
lB1 lB1 lBw(\n[ColSize]n)
lB1 l1  l.
CODE	HEADER	DESCRIPTION

%cpu	%CPU	T{
cpu utilization of the process in "##.#" format.  Currently, it is the CPU
time used divided by the time the process has been running (cputime/realtime
ratio), expressed as a percentage.  It will not add up to 100% unless you are
lucky.  (alias
.BR pcpu ).
T}

%mem	%MEM	T{
ratio of the process's resident set size  to the physical memory on the
machine, expressed as a percentage.  (alias
.BR pmem ).
T}

args	COMMAND	T{
command with all its arguments as a string. Modifications to the arguments
may be shown.  The output in this column may contain spaces.  A process
marked &lt;defunct&gt; is partly dead, waiting to be fully destroyed by its parent.
Sometimes the process args will be unavailable; when this happens,
.B ps
will instead print the executable name in brackets.  (alias
.BR cmd , \ command ).
See also the
.B comm
format keyword, the
.B \-f
option, and the
.B c
option.
.br
When specified last, this column will extend to the edge of the display.  If
.B ps
can not determine display width, as when output is redirected (piped) into a
file or another command, the output width is undefined (it may be 80,
unlimited, determined by the
.B TERM
variable, and so on).  The
.B COLUMNS
environment variable or
.B \-\-cols
option may be used to exactly determine the width in this case.  The
.B w
or
.B \-w
option may be also be used to adjust width.
T}

blocked	BLOCKED	T{
mask of the blocked signals, see
.IR signal (7).
According to the width of the field, a 32 or 64\-bit mask in hexadecimal
format is displayed.  (alias
.BR sig_block , \ sigmask ).
T}

bsdstart	START	T{
time the command started.  If the process was started less than 24 hours ago,
the output format is "\ HH:MM", else it is " Mmm:SS" (where Mmm is the three
letters of the month).  See also
.BR lstart , \ start , \ start_time ", and" \ stime .
T}

bsdtime	TIME	T{
accumulated cpu time, user + system.  The display format is usually
"MMM:SS", but can be shifted to the right if the process used more than 999
minutes of cpu time.
T}

c	C	T{
processor utilization. Currently, this is the integer value of the percent
usage over the lifetime of the process.  (see
.BR %cpu ).
T}

caught	CAUGHT	T{
mask of the caught signals, see
.IR signal (7).
According to the width of the field, a 32 or 64 bits mask in hexadecimal
format is displayed.  (alias
.BR sig_catch , \ sigcatch ).
T}

cgname	CGNAME	T{
display name of control groups to which the process belongs.
T}

cgroup	CGROUP	T{
display control groups to which the process belongs.
T}

class	CLS	T{
scheduling class of the process.  (alias
.BR policy , \ cls ).
Field's possible values are:
.IP "" 2
\-	not reported
.br
TS	SCHED_OTHER
.br
FF	SCHED_FIFO
.br
RR	SCHED_RR
.br
B	SCHED_BATCH
.br
ISO	SCHED_ISO
.br
IDL	SCHED_IDLE
.br
?	unknown value
T}

cls	CLS	T{
scheduling class of the process.  (alias
.BR policy , \ cls ).
Field's possible values are:
.IP "" 2
\-	not reported
.br
TS	SCHED_OTHER
.br
FF	SCHED_FIFO
.br
RR	SCHED_RR
.br
B	SCHED_BATCH
.br
ISO	SCHED_ISO
.br
IDL	SCHED_IDLE
.br
?	unknown value
T}

cmd	CMD	T{
see
.BR args .
(alias
.BR args , \ command ).
T}

comm	COMMAND	T{
command name (only the executable name).  Modifications to the command name
will not be shown.  A process marked &lt;defunct&gt; is partly dead, waiting to be
fully destroyed by its parent.  The output in this column may contain spaces.
(alias
.BR ucmd , \ ucomm ).
See also the
.B args format keyword,
the
.B \-f
option, and the
.B c
option.
.br
When specified last, this column will extend to the edge of the display.  If
.B ps
can not determine display width, as when output is redirected (piped) into a
file or another command, the output width is undefined (it may be 80,
unlimited, determined by the
.B TERM
variable, and so on).  The
.B COLUMNS
environment variable or
.B \-\-cols
option may be used to exactly determine the width in this case.  The
.BR w \ or \ \-w
option may be also be used to adjust width.
T}

command	COMMAND	T{
See
.BR args .
(alias
.BR args , \ command ).
T}

cp	CP	T{
per\-mill (tenths of a percent) CPU usage.  (see
.BR %cpu ).
T}

cputime	TIME	T{
cumulative CPU time, "[DD\-]hh:mm:ss" format.  (alias
.BR time ).
T}

drs	DRS	T{
data resident set size, the amount of physical memory devoted to other than
executable code.
T}

egid	EGID	T{
effective group ID number of the process as a decimal integer.  (alias
.BR gid ).
T}

egroup	EGROUP	T{
effective group ID of the process.  This will be the textual group ID, if it
can be obtained and the field width permits, or a decimal representation
otherwise.  (alias
.BR group ).
T}

eip	EIP	T{
instruction pointer.
T}

esp	ESP	T{
stack pointer.
T}

etime	ELAPSED	T{
elapsed time since the process was started, in the form [[DD\-]hh:]mm:ss.
T}

etimes	ELAPSED	T{
elapsed time since the process was started, in seconds.
T}

euid	EUID	T{
effective user ID (alias
.BR uid ).
T}

euser	EUSER	T{
effective user name.  This will be the textual user ID, if it can be obtained
and the field width permits, or a decimal representation otherwise.  The
.B n
option can be used to force the decimal representation.  (alias
.BR uname , \  user ).
T}

f	F	T{
flags associated with the process, see the
.B PROCESS FLAGS
section.  (alias
.BR flag , \ flags ).
T}

fgid	FGID	T{
filesystem access group\ ID.  (alias
.BR fsgid ).
T}

fgroup	FGROUP	T{
filesystem access group ID.  This will be the textual group ID, if it can
be obtained and the field width permits, or a decimal representation
otherwise.  (alias
.BR fsgroup ).
T}

flag	F	T{
see
.BR f .
(alias
.BR f , \ flags ).
T}

flags	F	T{
see
.BR f .
(alias
.BR f , \ flag ).
T}

fname	COMMAND	T{
first 8 bytes of the base name of the process's executable file.  The output
in this column may contain spaces.
T}

fuid	FUID	T{
filesystem access user ID.  (alias
.BR fsuid ).
T}

fuser	FUSER	T{
filesystem access user ID.  This will be the textual user ID, if it can be
obtained and the field width permits, or a decimal representation otherwise.
T}

gid	GID	T{
see
.BR egid .
(alias
.BR egid ).
T}

group	GROUP	T{
see
.BR egroup .
(alias
.BR egroup ).
T}

ignored	IGNORED	T{
mask of the ignored signals, see
.IR signal (7).
According to the width of the field, a 32 or 64 bits mask in hexadecimal
format is displayed.  (alias
.BR sig_ignore , \ sigignore ).
T}

ipcns	IPCNS	T{
Unique inode number describing the namespace the process belongs to. See namespaces(7).
T}

label	LABEL	T{
security label, most commonly used for SELinux context data.  This is for
the
.I Mandatory Access Control
("MAC") found on high\-security systems.
T}

lstart	STARTED	T{
time the command started.  See also
.BR bsdstart , \ start , \ start_time ", and" \ stime .
T}

lsession	SESSION	T{
displays the login session identifier of a process,
if systemd support has been included.
T}

lwp	LWP	T{
light weight process (thread) ID of the dispatchable entity (alias
.BR spid , \ tid ).
See
.B tid
for additional information.
T}

lxc	LXC	T{
The name of the lxc container within which a task is running.
If a process is not running inside a container, a dash ('\-') will be shown.
T}

machine	MACHINE	T{
displays the machine name for processes assigned to VM or container,
if systemd support has been included.
T}

maj_flt	MAJFLT	T{
The number of major page faults that have occurred with this process.
T}

min_flt	MINFLT	T{
The number of minor page faults that have occurred with this process.
T}

mntns	MNTNS	T{
Unique inode number describing the namespace the process belongs to. See namespaces(7).
T}

netns	NETNS	T{
Unique inode number describing the namespace the process belongs to. See namespaces(7).
T}

ni	NI	T{
nice value. This ranges from 19 (nicest) to \-20 (not nice to others),
see
.IR nice (1).
(alias
.BR nice ).
T}

nice	NI	T{
see
.BR ni .  (alias
.BR ni ).
T}

nlwp	NLWP	T{
number of lwps (threads) in the process.  (alias
.BR thcount ).
T}

nwchan	WCHAN	T{
address of the kernel function where the process is sleeping (use
.B wchan
if you want the kernel function name).  Running tasks will display a dash
('\-') in this column.
T}

ouid	OWNER	T{
displays the Unix user identifier of the owner of the session of a process,
if systemd support has been included.
T}

pcpu	%CPU	T{
see
.BR %cpu .
(alias
.BR %cpu ).
T}

pending	PENDING	T{
mask of the pending signals. See
.IR signal (7).
Signals pending on the process are distinct from signals pending on
individual threads.  Use the
.B m
option or the
.B \-m
option to see both.  According to the width of the field, a 32 or 64 bits
mask in hexadecimal format is displayed.  (alias
.BR sig ).
T}

pgid	PGID	T{
process group ID or, equivalently, the process ID of the process group
leader.  (alias
.BR pgrp ).
T}

pgrp	PGRP	T{
see
.BR pgid .
(alias
.BR pgid ).
T}

pid	PID	T{
a number representing the process ID (alias
.BR tgid ).
T}

pidns	PIDNS	T{
Unique inode number describing the namespace the process belongs to. See namespaces(7).
T}

pmem	%MEM	T{
see
.BR %mem .
(alias
.BR %mem ).
T}

policy	POL	T{
scheduling class of the process.  (alias
.BR class , \ cls ).
Possible values are:
.IP "" 2
\-	not reported
.br
TS	SCHED_OTHER
.br
FF	SCHED_FIFO
.br
RR	SCHED_RR
.br
B	SCHED_BATCH
.br
ISO	SCHED_ISO
.br
IDL	SCHED_IDLE
.br
?	unknown value
T}

ppid	PPID	T{
parent process ID.
T}

pri	PRI	T{
priority of the process.  Higher number means lower priority.
T}

psr	PSR	T{
processor that process is currently assigned to.
T}

rgid	RGID	T{
real group ID.
T}

rgroup	RGROUP	T{
real group name.  This will be the textual group ID, if it can be obtained
and the field width permits, or a decimal representation otherwise.
T}

rss	RSS	T{
resident set size, the non\-swapped physical memory that a task has used (in
kiloBytes).  (alias
.BR rssize , \ rsz ).
T}

rssize	RSS	T{
see
.BR rss .
(alias
.BR rss , \ rsz ).
T}

rsz	RSZ	T{
see
.BR rss .
(alias
.BR rss , \ rssize ).
T}

rtprio	RTPRIO	T{
realtime priority.
T}

ruid	RUID	T{
real user ID.
T}

ruser	RUSER	T{
real user ID.  This will be the textual user ID, if it can be obtained and
the field width permits, or a decimal representation otherwise.
T}

s	S	T{
minimal state display (one character).  See section
.B PROCESS STATE CODES
for the different values.  See also
.B stat
if you want additional information displayed.  (alias
.BR state ).
T}

sched	SCH	T{
scheduling policy of the process.  The policies SCHED_OTHER (SCHED_NORMAL),
SCHED_FIFO, SCHED_RR, SCHED_BATCH, SCHED_ISO, and SCHED_IDLE are respectively
displayed as 0, 1, 2, 3, 4, and 5.
T}

seat	SEAT	T{
displays the identifier associated with all hardware devices assigned
to a specific workplace,
if systemd support has been included.
T}

sess	SESS	T{
session ID or, equivalently, the process ID of the session leader.  (alias
.BR session , \ sid ).
T}

sgi_p	P	T{
processor that the process is currently executing on.  Displays "*" if the
process is not currently running or runnable.
T}

sgid	SGID	T{
saved group ID.  (alias
.BR svgid ).
T}

sgroup	SGROUP	T{
saved group name.  This will be the textual group ID, if it can be obtained
and the field width permits, or a decimal representation otherwise.
T}

sid	SID	T{
see
.BR sess .
(alias
.BR sess , \ session ).
T}

sig	PENDING	T{
see
.BR pending .
(alias
.BR pending , \ sig_pend ).
T}

sigcatch	CAUGHT	T{
see
.BR caught .
(alias
.BR caught , \ sig_catch ).
T}

sigignore	IGNORED	T{
see
.BR ignored .
(alias
.BR ignored , \ sig_ignore ).
T}

sigmask	BLOCKED	T{
see
.BR blocked .
(alias
.BR blocked , \ sig_block ).
T}

size	SIZE	T{
approximate amount of swap space that would be required if the process were
to dirty all writable pages and then be swapped out.  This number is very
rough!
T}

slice	SLICE	T{
displays the slice unit which a process belongs to,
if systemd support has been included.
T}

spid	SPID	T{
see
.BR lwp .
(alias
.BR lwp , \ tid ).
T}

stackp	STACKP	T{
address of the bottom (start) of stack for the process.
T}

start	STARTED	T{
time the command started.  If the process was started less than 24 hours ago,
the output format is "HH:MM:SS", else it is "\ \ Mmm\ dd" (where Mmm is a
three\-letter month name).  See also
.BR lstart , \ bsdstart , \ start_time ", and" \ stime .
T}

start_time	START	T{
starting time or date of the process.  Only the year will be displayed if the
process was not started the same year
.B ps
was invoked, or "MmmDD" if it was not started the same day, or "HH:MM"
otherwise.  See also
.BR bsdstart , \ start , \ lstart ", and" \ stime .
T}

stat	STAT	T{
multi\-character process state.  See section
.B PROCESS STATE CODES
for the different values meaning.  See also
.BR s \ and \ state
if you just want the first character displayed.
T}

state	S	T{
see
.BR s ". (alias" \ s ).
T}

suid	SUID	T{
saved user ID.  (alias
.BR svuid ).
T}

supgid	SUPGID	T{
group ids of supplementary groups, if any.  See
.BR getgroups (2).
T}

supgrp	SUPGRP	T{
group names of supplementary groups, if any.  See
.BR getgroups (2).
T}

suser	SUSER	T{
saved user name.  This will be the textual user ID, if it can be obtained and
the field width permits, or a decimal representation otherwise.  (alias
.BR svuser ).
T}

svgid	SVGID	T{
see
.BR sgid .
(alias
.BR sgid ).
T}

svuid	SVUID	T{
see
.BR suid .
(alias
.BR suid ).
T}

sz	SZ	T{
size in physical pages of the core image of the process.  This includes text,
data, and stack space.  Device mappings are currently excluded; this is
subject to change.  See
.BR vsz \ and \ rss .
T}

tgid	TGID	T{
a number representing the thread group to which a task belongs (alias
.BR pid ).
It is the process ID of the thread group leader.
T}

thcount	THCNT	T{
see
.BR nlwp .
(alias
.BR nlwp ).
number of kernel threads owned by the process.
T}

tid	TID	T{
the unique number representing a dispatchable entity (alias
.BR lwp , \ spid ).
This value may also appear as: a process ID (pid); a process group ID (pgrp);
a session ID for the session leader (sid); a thread group ID for the thread
group leader (tgid); and a tty process group ID for the process group leader
(tpgid).
T}

time	TIME	T{
cumulative CPU\ time, "[DD\-]HH:MM:SS" format.  (alias
.BR cputime ).
T}

tname	TTY	T{
controlling tty (terminal).  (alias
.BR tt , \ tty ).
T}

tpgid	TPGID	T{
ID of the foreground process group on the tty (terminal) that the process is
connected to, or \-1 if the process is not connected to a tty.
T}

trs	TRS	T{
text resident set size, the amount of physical memory devoted to executable code.
T}

tt	TT	T{
controlling tty (terminal).  (alias
.BR tname , \ tty ).
T}

tty	TT	T{
controlling tty (terminal).  (alias
.BR tname , \ tt ).
T}

ucmd	CMD	T{
see
.BR comm .
(alias
.BR comm , \ ucomm ).
T}

ucomm	COMMAND	T{
see
.BR comm .
(alias
.BR comm , \ ucmd ).
T}

uid	UID	T{
see
.BR euid .
(alias
.BR euid ).
T}

uname	USER	T{
see
.BR euser .
(alias
.BR euser , \ user ).
T}

unit	UNIT	T{
displays unit which a process belongs to,
if systemd support has been included.
T}

user	USER	T{
see
.BR euser .
(alias
.BR euser , \ uname ).
T}

userns	USERNS	T{
Unique inode number describing the namespace the process belongs to. See namespaces(7).
T}

utsns	UTSNS	T{
Unique inode number describing the namespace the process belongs to. See namespaces(7).
T}

uunit	UUNIT	T{
displays user unit which a process belongs to,
if systemd support has been included.
T}

vsize	VSZ	T{
see
.BR vsz .
(alias
.BR vsz ).
T}

vsz	VSZ	T{
virtual memory size of the process in KiB (1024\-byte units).  Device
mappings are currently excluded; this is subject to change.  (alias
.BR vsize ).
T}

wchan	WCHAN	T{
name of the kernel function in which the process is sleeping, a "\-" if the
process is running, or a "*" if the process is multi\-threaded and
.B ps
is not displaying threads.
T}

.TE
.\" #######################################################################
.PP
.PP
.SH "ENVIRONMENT VARIABLES"
The following environment variables could affect
.BR ps :
.TP 3
.B COLUMNS
Override default display width.
.TP
.B LINES
Override default display height.
.TP
.B PS_PERSONALITY
Set to one of posix, old, linux, bsd, sun, digital...  (see section
.B PERSONALITY
below).
.TP
.B CMD_ENV
Set to one of posix, old, linux, bsd, sun, digital...  (see section
.B PERSONALITY
below).
.TP
.B I_WANT_A_BROKEN_PS
Force obsolete command line interpretation.
.TP
.B LC_TIME
Date format.
.TP
.B PS_COLORS
Not currently supported.
.TP
.B PS_FORMAT
Default output format override. You may set this to a format
string of the type used for the
.B \-o
option.
The
.B DefSysV
and
.B DefBSD
values are particularly useful.
.TP
.B POSIXLY_CORRECT
Don't find excuses to ignore bad "features".
.TP
.B POSIX2
When set to "on", acts as
.BR POSIXLY_CORRECT .
.TP
.B UNIX95
Don't find excuses to ignore bad "features".
.TP
.B _XPG
Cancel \fBCMD_ENV\fR=\fIirix\fR non\-standard behavior.
.PP
In general, it is a bad idea to set these variables.  The one exception is
.B CMD_ENV
or
.BR PS_PERSONALITY ,
which could be set to Linux for normal systems.  Without that setting,
.B ps
follows the useless and bad parts of the Unix98 standard.
.PP
.SH "PERSONALITY"
.TS
l	l.
390	like the OS/390 OpenEdition \fBps\fR
aix	like AIX \fBps\fR
bsd	like FreeBSD \fBps\fR (totally non\-standard)
compaq	like Digital Unix \fBps\fR
debian	like the old Debian \fBps\fR
digital	like Tru64 (was Digital\ Unix, was OSF/1) \fBps\fR
gnu	like the old Debian \fBps\fR
hp	like HP\-UX \fBps\fR
hpux	like HP\-UX \fBps\fR
irix	like Irix \fBps\fR
linux	***** \fBrecommended\fR *****
old	like the original Linux \fBps\fR (totally non\-standard)
os390	like OS/390 Open Edition \fBps\fR
posix	standard
s390	like OS/390 Open Edition \fBps\fR
sco	like SCO \fBps\fR
sgi	like Irix \fBps\fR
solaris2	like Solaris 2+ (SunOS 5) \fBps\fR
sunos4	like SunOS 4 (Solaris 1) \fBps\fR (totally non\-standard)
svr4	standard
sysv	standard
tru64	like Tru64 (was Digital Unix, was OSF/1) \fBps\fR
unix	standard
unix95	standard
unix98	standard
.TE
.PP
.PP
.SH "SEE ALSO"
.BR pgrep (1),
.BR pstree (1),
.BR top (1),
.BR proc (5).
.PP
.PP
.SH STANDARDS
This
.B ps
conforms to:
.PP
.PD 0
.IP 1 4
Version 2 of the Single Unix Specification
.IP 2 4
The Open Group Technical Standard Base Specifications, Issue\ 6
.IP 3 4
IEEE Std 1003.1, 2004\ Edition
.IP 4 4
X/Open System Interfaces Extension [UP\ XSI]
.IP 5 4
ISO/IEC 9945:2003
.PD
.PP
.SH AUTHOR
.B ps
was originally written by
.UR lankeste@\:fwi.\:uva.\:nl
Branko Lankester
.UE .
.UR johnsonm@\:redhat.\:com
Michael K. Johnson
.UE
re\-wrote it significantly to use the proc filesystem, changing a few things
in the process.
.UR mjshield@\:nyx.\:cs.\:du.\:edu
Michael Shields
.UE
added the pid\-list feature.
.UR cblake@\:bbn.\:com
Charles Blake
.UE
added multi\-level sorting, the dirent\-style library, the device
name\-to\-number mmaped database, the approximate binary search directly on
System.map, and many code and documentation cleanups.  David Mossberger\-Tang
wrote the generic BFD support for psupdate.
.UR albert@\:users.\:sf.\:net
Albert Cahalan
.UE
rewrote ps for full Unix98 and BSD support, along with some ugly hacks for
obsolete and foreign syntax.
.PP
Please send bug reports to
.UR procps@\:freelists.\:org
.UE .
No subscription is required or suggested.
.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.
.TH PWD "1" "March 2017" "GNU coreutils 8.27" "User Commands"
.SH NAME
pwd \- print name of current/working directory
.SH SYNOPSIS
.B pwd
[\fI\,OPTION\/\fR]...
.SH DESCRIPTION
.\" Add any additional description here
.PP
Print the full filename of the current working directory.
.TP
\fB\-L\fR, \fB\-\-logical\fR
use PWD from environment, even if it contains symlinks
.TP
\fB\-P\fR, \fB\-\-physical\fR
avoid all symlinks
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-\-version\fR
output version information and exit
.PP
If no option is specified, \fB\-P\fR is assumed.
.PP
NOTE: your shell may have its own version of pwd, which usually supersedes
the version described here.  Please refer to your shell's documentation
for details about the options it supports.
.SH AUTHOR
Written by Jim Meyering.
.SH "REPORTING BUGS"
GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt;
.br
Report pwd translation bugs to &lt;http://translationproject.org/team/&gt;
.SH COPYRIGHT
Copyright \(co 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
getcwd(3)
.PP
.br
Full documentation at: &lt;http://www.gnu.org/software/coreutils/pwd&gt;
.br
or available locally via: info \(aq(coreutils) pwd invocation\(aq
'\" et
.TH QALTER "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
qalter
\(em alter batch job
.SH SYNOPSIS
.LP
.nf
qalter \fB[\fR\(mia \fIdate_time\fB] [\fR\(miA \fIaccount_string\fB] [\fR\(mic \fIinterval\fB] [\fR\(mie \fIpath_name\fB]
[\fR\(mih \fIhold_list\fB] [\fR\(mij \fIjoin_list\fB] [\fR\(mik \fIkeep_list\fB] [\fR\(mil \fIresource_list\fB]
[\fR\(mim \fImail_options\fB] [\fR\(miM \fImail_list\fB] [\fR\(miN \fIname\fB] [\fR\(mio \fIpath_name\fB]
[\fR\(mip \fIpriority\fB] [\fR\(mir \fIy\fR|\fIn\fB] [\fR\(miS \fIpath_name_list\fB] [\fR\(miu \fIuser_list\fB]
\fIjob_identifier\fR...
.fi
.SH DESCRIPTION
The attributes of a batch job are altered by a request to the batch
server that manages the batch job. The
.IR qalter
utility is a user-accessible batch client that requests the alteration
of the attributes of one or more batch jobs.
.P
The
.IR qalter
utility shall alter the attributes of those batch jobs, and only those
batch jobs, for which a batch
.IR job_identifier
is presented to the utility.
.P
The
.IR qalter
utility shall alter the attributes of batch jobs in the order in which
the batch
.IR job_identifier s
are presented to the utility.
.P
If the
.IR qalter
utility fails to process a batch
.IR job_identifier
successfully, the utility shall proceed to process the remaining batch
.IR job_identifier s,
if any.
.P
For each batch
.IR job_identifier
for which the
.IR qalter
utility succeeds, each attribute of the identified batch job shall be
altered as indicated by all the options presented to the utility.
.P
For each identified batch job for which the
.IR qalter
utility fails, the utility shall not alter any attribute of the batch
job.
.P
For each batch job that the
.IR qalter
utility processes, the utility shall not modify any attribute other
than those required by the options and option-arguments presented to
the utility.
.P
The
.IR qalter
utility shall alter batch jobs by sending a
.IR "Modify Job Request"
to the batch server that manages each batch job. At the time the
.IR qalter
utility exits, it shall have modified the batch job corresponding to
each successfully processed batch
.IR job_identifier .
An attempt to alter the attributes of a batch job in the RUNNING state
is implementation-defined.
.SH OPTIONS
The
.IR qalter
utility shall conform to the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 12.2" ", " "Utility Syntax Guidelines".
.P
The following options shall be supported by the implementation:
.IP "\fB\(mia\ \fIdate_time\fR" 10
Redefine the time at which the batch job becomes eligible for
execution.
.RS 10 
.P
The
.IR date_time
argument shall be in the same form and represent the same time as for
the
.IR touch
utility. The time so represented shall be set into the
.IR Execution_Time
attribute of the batch job. If the time specified is earlier than the
current time, the
.BR \(mia
option shall have no effect.
.RE
.IP "\fB\(miA\ \fIaccount_string\fR" 10
.br
Redefine the account to which the resource consumption of the batch job
should be charged.
.RS 10 
.P
The syntax of the
.IR account_string
option-argument is unspecified.
.P
The
.IR qalter
utility shall set the
.IR Account_Name
attribute of the batch job to the value of the
.IR account_string
option-argument.
.RE
.IP "\fB\(mic\ \fIinterval\fR" 10
Redefine whether the batch job should be checkpointed, and if so, how
often.
.RS 10 
.P
The
.IR qalter
utility shall accept a value for the interval option-argument that is
one of the following:
.IP "\fRn\fP" 10
No checkpointing is to be performed on the batch job
(NO_CHECKPOINT).
.IP "\fRs\fP" 10
Checkpointing is to be performed only when the batch server is shut
down (CHECKPOINT_AT_SHUTDOWN).
.IP "\fRc\fP" 10
Automatic periodic checkpointing is to be performed at the
.IR Minimum_Cpu_Interval
attribute of the batch queue, in units of CPU minutes
(CHECKPOINT_AT_MIN_CPU_INTERVAL).
.IP "\fRc\fR=\fIminutes\fR" 10
Automatic periodic checkpointing is to be performed every
.IR minutes
of CPU time, or every
.IR Minimum_Cpu_Interval
minutes, whichever is greater. The
.IR minutes
argument shall conform to the syntax for unsigned integers and shall be
greater than zero.
.P
An implementation may define other checkpoint intervals. The
conformance document for an implementation shall describe any
alternative checkpoint intervals, how they are specified, their
internal behavior, and how they affect the behavior of the utility.
.P
The
.IR qalter
utility shall set the
.IR Checkpoint
attribute of the batch job to the value of the
.IR interval
option-argument.
.RE
.IP "\fB\(mie\ \fIpath_name\fR" 10
.br
Redefine the path to be used for the standard error stream of the batch
job.
.RS 10 
.P
The
.IR qalter
utility shall accept a
.IR path_name
option-argument that conforms to the syntax of the
.IR path_name
element defined in the System Interfaces volume of POSIX.1\(hy2008, which can be preceded by a host name
element of the form
.IR hostname :.
.P
If the
.IR path_name
option-argument constitutes an absolute pathname, the
.IR qalter
utility shall set the
.IR Error_Path
attribute of the batch job to the value of the
.IR path_name
option-argument, including the host name element, if present.
.P
If the
.IR path_name
option-argument constitutes a relative pathname and no host name
element is specified, the
.IR qalter
utility shall set the
.IR Error_Path
attribute of the batch job to the value of the absolute pathname
derived by expanding the
.IR path_name
option-argument relative to the current directory of the process that
executes the
.IR qalter
utility.
.P
If the
.IR path_name
option-argument constitutes a relative pathname and a host name
element is specified, the
.IR qalter
utility shall set the
.IR Error_Path
attribute of the batch job to the value of the option-argument without
expansion.
.P
If the
.IR path_name
option-argument does not include a host name element, the
.IR qalter
utility shall prefix the pathname in the
.IR Error_Path
attribute with
.IR hostname :,
where
.IR hostname
is the name of the host upon which the
.IR qalter
utility is being executed.
.RE
.IP "\fB\(mih\ \fIhold_list\fR" 10
Redefine the types of holds, if any, on the batch job. The
.IR qalter
.BR \(mih
option shall accept a value for the
.IR hold_list
option-argument that is a string of alphanumeric characters in the
portable character set.
.RS 10 
.P
The
.IR qalter
utility shall accept a value for the
.IR hold_list
option-argument that is a string of one or more of the characters
.BR 'u' ,
.BR 's' ,
or
.BR 'o' ,
or the single character
.BR 'n' .
For each unique character in the
.IR hold_list
option-argument, the
.IR qalter
utility shall add a value to the
.IR Hold_Types
attribute of the batch job as follows, each representing a different
hold type:
.IP "\fRu\fP" 6
USER
.IP "\fRs\fP" 6
SYSTEM
.IP "\fRo\fP" 6
OPERATOR
.P
If any of these characters are duplicated in the
.IR hold_list
option-argument, the duplicates shall be ignored. An existing
.IR Hold_Types
attribute can be cleared by the hold type:
.IP "\fRn\fP" 6
NO_HOLD
.P
The
.IR qalter
utility shall consider it an error if any hold type other than
.BR 'n' 
is combined with hold type
.BR 'n' .
Strictly conforming applications shall not repeat any of the characters
.BR 'u' ,
.BR 's' ,
.BR 'o' ,
or
.BR 'n' 
within the
.IR hold_list
option-argument. The
.IR qalter
utility shall permit the repetition of characters, but shall not assign
additional meaning to the repeated characters. An implementation may
define other hold types. The conformance document for an implementation
shall describe any additional hold types, how they are specified, their
internal behavior, and how they affect the behavior of the utility.
.RE
.IP "\fB\(mij\ \fIjoin_list\fR" 10
Redefine which streams of the batch job are to be merged. The
.IR qalter
.BR \(mij
option shall accept a value for the
.IR join_list
option-argument that is a string of alphanumeric characters in the
portable character set.
.RS 10 
.P
The
.IR qalter
utility shall accept a
.IR join_list
option-argument that consists of one or more of the characters
.BR 'e' 
and
.BR 'o' ,
or the single character
.BR 'n' .
.P
All of the other batch job output streams specified shall be merged
into the output stream represented by the character listed first in the
.IR join_list
option-argument.
.P
For each unique character in the
.IR join_list
option-argument, the
.IR qalter
utility shall add a value to the
.IR Join_Path
attribute of the batch job as follows, each representing a different
batch job stream to join:
.IP "\fRe\fP" 6
The standard error of the batch job (JOIN_STD_ERROR).
.IP "\fRo\fP" 6
The standard output of the batch job (JOIN_STD_OUTPUT).
.P
An existing
.IR Join_Path
attribute can be cleared by the join type:
.IP "\fRn\fP" 6
NO_JOIN
.P
If
.BR 'n' 
is specified, then no files are joined. The
.IR qalter
utility shall consider it an error if any join type other than
.BR 'n' 
is combined with join type
.BR 'n' .
.P
Strictly conforming applications shall not repeat any of the characters
.BR 'e' ,
.BR 'o' ,
or
.BR 'n' 
within the
.IR join_list
option-argument. The
.IR qalter
utility shall permit the repetition of characters, but shall not assign
additional meaning to the repeated characters.
.P
An implementation may define other join types. The conformance document
for an implementation shall describe any additional batch job streams,
how they are specified, their internal behavior, and how they affect
the behavior of the utility.
.RE
.IP "\fB\(mik\ \fIkeep_list\fR" 10
Redefine which output of the batch job to retain on the execution host.
.RS 10 
.P
The
.IR qalter
.BR \(mik
option shall accept a value for the
.IR keep_list
option-argument that is a string of alphanumeric characters in the
portable character set.
.P
The
.IR qalter
utility shall accept a
.IR keep_list
option-argument that consists of one or more of the characters
.BR 'e' 
and
.BR 'o' ,
or the single character
.BR 'n' .
.P
For each unique character in the
.IR keep_list
option-argument, the
.IR qalter
utility shall add a value to the
.IR Keep_Files
attribute of the batch job as follows, each representing a different
batch job stream to keep:
.IP "\fRe\fP" 6
The standard error of the batch job (KEEP_STD_ERROR).
.IP "\fRo\fP" 6
The standard output of the batch job (KEEP_STD_OUTPUT).
.P
If both
.BR 'e' 
and
.BR 'o' 
are specified, then both files are retained. An existing
.IR Keep_Files
attribute can be cleared by the keep type:
.IP "\fRn\fP" 6
NO_KEEP
.P
If
.BR 'n' 
is specified, then no files are retained. The
.IR qalter
utility shall consider it an error if any keep type other than
.BR 'n' 
is combined with keep type
.BR 'n' .
.P
Strictly conforming applications shall not repeat any of the characters
.BR 'e' ,
.BR 'o' ,
or
.BR 'n' 
within the
.IR keep_list
option-argument. The
.IR qalter
utility shall permit the repetition of characters, but shall not assign
additional meaning to the repeated characters. An implementation may
define other keep types. The conformance document for an implementation
shall describe any additional keep types, how they are specified, their
internal behavior, and how they affect the behavior of the utility.
.RE
.IP "\fB\(mil\ \fIresource_list\fR" 10
.br
Redefine the resources that are allowed or required by the batch job.
.RS 10 
.P
The
.IR qalter
utility shall accept a
.IR resource_list
option-argument that conforms to the following syntax:
.sp
.RS 4
.nf
\fB
resource=value[,,resource=value,,...]
.fi \fR
.P
.RE
.P
The
.IR qalter
utility shall set one entry in the value of the
.IR Resource_List
attribute of the batch job for each resource listed in the
.IR resource_list
option-argument.
.P
Because the list of supported resource names might vary by batch
server, the
.IR qalter
utility shall rely on the batch server to validate the resource names
and associated values. See
.IR "Section 3.3.3" ", " "Multiple Keyword-Value Pairs"
for a means of removing
.IR keyword =\c
.IR value
(and
.IR value @\c
.IR keyword )
pairs and other general rules for list-oriented batch job attributes.
.RE
.IP "\fB\(mim\ \fImail_options\fR" 10
.br
Redefine the points in the execution of the batch job at which the
batch server is to send mail about a change in the state of the batch
job.
.RS 10 
.P
The
.IR qalter
.BR \(mim
option shall accept a value for the
.IR mail_options
option-argument that is a string of alphanumeric characters in the
portable character set.
.P
The
.IR qalter
utility shall accept a value for the
.IR mail_options
option-argument that is a string of one or more of the characters
.BR 'e' ,
.BR 'b' ,
and
.BR 'a' ,
or the single character
.BR 'n' .
For each unique character in the
.IR mail_options
option-argument, the
.IR qalter
utility shall add a value to the
.IR Mail_Users
attribute of the batch job as follows, each representing a different
time during the life of a batch job at which to send mail:
.IP "\fRe\fP" 6
MAIL_AT_EXIT
.IP "\fRb\fP" 6
MAIL_AT_BEGINNING
.IP "\fRa\fP" 6
MAIL_AT_ABORT
.P
If any of these characters are duplicated in the
.IR mail_options
option-argument, the duplicates shall be ignored.
.P
An existing
.IR Mail_Points
attribute can be cleared by the mail type:
.IP "\fRn\fP" 6
NO_MAIL
.P
If
.BR 'n' 
is specified, then mail is not sent. The
.IR qalter
utility shall consider it an error if any mail type other than
.BR 'n' 
is combined with mail type
.BR 'n' .
Strictly conforming applications shall not repeat any of the characters
.BR 'e' ,
.BR 'b' ,
.BR 'a' ,
or
.BR 'n' 
within the
.IR mail_options
option-argument. The
.IR qalter
utility shall permit the repetition of characters but shall not assign
additional meaning to the repeated characters.
.P
An implementation may define other mail types. The conformance document
for an implementation shall describe any additional mail types, how
they are specified, their internal behavior, and how they affect the
behavior of the utility.
.RE
.IP "\fB\(miM\ \fImail_list\fR" 10
Redefine the list of users to which the batch server that executes the
batch job is to send mail, if the batch server sends mail about the
batch job.
.RS 10 
.P
The syntax of the
.IR mail_list
option-argument is unspecified. If the implementation of the
.IR qalter
utility uses a name service to locate users, the utility shall accept
the syntax used by the name service.
.P
If the implementation of the
.IR qalter
utility does not use a name service to locate users, the implementation
shall accept the following syntax for user names:
.sp
.RS 4
.nf
\fB
mail_address[,,mail_address,,...]
.fi \fR
.P
.RE
.P
The interpretation of
.IR mail_address
is implementation-defined.
.P
The
.IR qalter
utility shall set the
.IR Mail_Users
attribute of the batch job to the value of the
.IR mail_list
option-argument.
.RE
.IP "\fB\(miN\ \fIname\fR" 10
Redefine the name of the batch job.
.RS 10 
.P
The
.IR qalter
.BR \(miN
option shall accept a value for the
.IR name
option-argument that is a string of up to 15 alphanumeric characters in
the portable character set where the first character is alphabetic.
.P
The syntax of the
.IR name
option-argument is unspecified.
.P
The
.IR qalter
utility shall set the
.IR Job_Name
attribute of the batch job to the value of the
.IR name
option-argument.
.RE
.IP "\fB\(mio\ \fIpath_name\fR" 10
.br
Redefine the path for the standard output of the batch job.
.RS 10 
.P
The
.IR qalter
utility shall accept a
.IR path_name
option-argument that conforms to the syntax of the
.IR path_name
element defined in the System Interfaces volume of POSIX.1\(hy2008, which can be preceded by a host name
element of the form
.IR hostname :.
.P
If the
.IR path_name
option-argument constitutes an absolute pathname, the
.IR qalter
utility shall set the
.IR Output_Path
attribute of the batch job to the value of the
.IR path_name
option-argument.
.P
If the
.IR path_name
option-argument constitutes a relative pathname and no host name
element is specified, the
.IR qalter
utility shall set the
.IR Output_Path
attribute of the batch job to the absolute pathname derived by
expanding the
.IR path_name
option-argument relative to the current directory of the process that
executes the
.IR qalter
utility.
.P
If the
.IR path_name
option-argument constitutes a relative pathname and a host name
element is specified, the
.IR qalter
utility shall set the
.IR Output_Path
attribute of the batch job to the value of the
.IR path_name
option-argument without any expansion of the pathname.
.P
If the
.IR path_name
option-argument does not include a host name element, the
.IR qalter
utility shall prefix the pathname in the
.IR Output_Path
attribute with
.IR hostname :,
where
.IR hostname
is the name of the host upon which the
.IR qalter
utility is being executed.
.RE
.IP "\fB\(mip\ \fIpriority\fR" 10
Redefine the priority of the batch job.
.RS 10 
.P
The
.IR qalter
utility shall accept a value for the priority option-argument that
conforms to the syntax for signed decimal integers, and which is not
less than \(mi1\|024 and not greater than 1\|023.
.P
The
.IR qalter
utility shall set the
.IR Priority
attribute of the batch job to the value of the
.IR priority
option-argument.
.RE
.IP "\fB\(mir\ \fRy\fR|\fRn\fR" 10
Redefine whether the batch job is rerunnable.
.RS 10 
.P
If the value of the option-argument is
.BR 'y' ,
the
.IR qalter
utility shall set the
.IR Rerunable
attribute of the batch job to TRUE.
.P
If the value of the option-argument is
.BR 'n' ,
the
.IR qalter
utility shall set the
.IR Rerunable
attribute of the batch job to FALSE.
.P
The
.IR qalter
utility shall consider it an error if any character other than
.BR 'y' 
or
.BR 'n' 
is specified in the option-argument.
.RE
.IP "\fB\(miS\ \fIpath_name_list\fR" 10
.br
Redefine the shell that interprets the script at the destination
system.
.RS 10 
.P
The
.IR qalter
utility shall accept a
.IR path_name_list
option-argument that conforms to the following syntax:
.sp
.RS 4
.nf
\fB
pathname[@host][,pathname[@host],...]
.fi \fR
.P
.RE
.P
The
.IR qalter
utility shall accept only one pathname that is missing a corresponding
host name. The
.IR qalter
utility shall allow only one pathname per named host.
.P
The
.IR qalter
utility shall add a value to the
.IR Shell_Path_List
attribute of the batch job for each entry in the
.IR path_name_list
option-argument. See
.IR "Section 3.3.3" ", " "Multiple Keyword-Value Pairs"
for a means of removing
.IR keyword =\c
.IR value
(and
.IR value @\c
.IR keyword )
pairs and other general rules for list-oriented batch job attributes.
.RE
.IP "\fB\(miu\ \fIuser_list\fR" 10
Redefine the user name under which the batch job is to run at the
destination system.
.RS 10 
.P
The
.IR qalter
utility shall accept a
.IR user_list
option-argument that conforms to the following syntax:
.sp
.RS 4
.nf
\fB
username[@host][,,username[@host],,...]
.fi \fR
.P
.RE
.P
The
.IR qalter
utility shall accept only one user name that is missing a corresponding
host name. The
.IR qalter
utility shall accept only one user name per named host.
.P
The
.IR qalter
utility shall add a value to the
.IR User_List
attribute of the batch job for each entry in the
.IR user_list
option-argument. See
.IR "Section 3.3.3" ", " "Multiple Keyword-Value Pairs"
for a means of removing
.IR keyword =\c
.IR value
(and
.IR value @\c
.IR keyword )
pairs and other general rules for list-oriented batch job attributes.
.RE
.SH OPERANDS
The
.IR qalter
utility shall accept one or more operands that conform to the syntax
for a batch
.IR job_identifier
(see
.IR "Section 3.3.1" ", " "Batch Job Identifier").
.SH STDIN
Not used.
.SH "INPUT FILES"
None.
.SH "ENVIRONMENT VARIABLES"
The following environment variables shall affect the execution of
.IR qalter :
.IP "\fILANG\fP" 10
Provide a default value for the internationalization variables that are
unset or null. (See the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 8.2" ", " "Internationalization Variables"
the precedence of internationalization variables used to determine the
values of locale categories.)
.IP "\fILC_ALL\fP" 10
If set to a non-empty string value, override the values of all the
other internationalization variables.
.IP "\fILC_CTYPE\fP" 10
Determine the locale for the interpretation of sequences of bytes of
text data as characters (for example, single-byte as opposed to
multi-byte characters in arguments).
.IP "\fILC_MESSAGES\fP" 10
.br
Determine the locale that should be used to affect the format and
contents of diagnostic messages written to standard error.
.IP "\fILOGNAME\fP" 10
Determine the login name of the user.
.IP "\fITZ\fP" 10
Determine the timezone used to interpret the
.IR date-time
option-argument. If
.IR TZ
is unset or null, an unspecified default timezone shall be used.
.SH "ASYNCHRONOUS EVENTS"
Default.
.SH STDOUT
None.
.SH STDERR
The standard error shall be used only for diagnostic messages.
.SH "OUTPUT FILES"
None.
.SH "EXTENDED DESCRIPTION"
None.
.SH "EXIT STATUS"
The following exit values shall be returned:
.IP "\00" 6
Successful completion.
.IP &gt;0 6
An error occurred.
.SH "CONSEQUENCES OF ERRORS"
In addition to the default behavior, the
.IR qalter
utility shall not be required to write a diagnostic message to standard
error when the error reply received from a batch server indicates that
the batch
.IR job_identifier
does not exist on the server. Whether or not the
.IR qalter
utility attempts to locate the batch job on other batch servers is
implementation-defined.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
None.
.SH EXAMPLES
None.
.SH RATIONALE
The
.IR qalter
utility allows users to change the attributes of a batch job.
.P
As a means of altering a queued job, the
.IR qalter
utility is superior to deleting and requeuing the batch job insofar as
an altered job retains its place in the queue with some traditional
selection algorithms. In addition, the
.IR qalter
utility is both shorter and simpler than a sequence of
.IR qdel
and
.IR qsub
utilities.
.P
The result of an attempt on the part of a user to alter a batch job in
a RUNNING state is implementation-defined because a batch job in the
RUNNING state will already have opened its output files and otherwise
performed any actions indicated by the options in effect at the time
the batch job began execution.
.P
The options processed by the
.IR qalter
utility are identical to those of the
.IR qsub
utility, with a few exceptions:
.BR \(miV ,
.BR \(miv ,
and
.BR \(miq .
The
.BR \(miV
and
.BR \(miv
are inappropriate for the
.IR qalter
utility, since they capture potentially transient environment
information from the submitting process. The
.BR \(miq
option would specify a new queue, which would largely negate the
previously stated advantage of using
.IR qalter ;
furthermore, the
.IR qmove
utility provides a superior means of moving jobs.
.P
Each of the following paragraphs provides the rationale for a
.IR qalter
option.
.P
Additional rationale concerning these options can be found in the
rationale for the
.IR qsub
utility.
.P
The
.BR \(mia
option allows users to alter the date and time at which a batch job
becomes eligible to run.
.P
The
.BR \(miA
option allows users to change the account that will be charged for the
resources consumed by the batch job. Support for the
.BR \(miA
option is mandatory for conforming implementations of
.IR qalter ,
even though support of accounting is optional for servers. Whether or
not to support accounting is left to the implementor of the server, but
mandatory support of the
.BR \(miA
option assures users of a consistent interface and allows them to
control accounting on servers that support accounting.
.P
The
.BR \(mic
option allows users to alter the checkpointing interval of a batch
job. A checkpointing system, which is not defined by POSIX.1\(hy2008, allows
recovery of a batch job at the most recent checkpoint in the event of a
crash. Checkpointing is typically used for jobs that consume expensive
computing time or must meet a critical schedule. Users should be
allowed to make the tradeoff between the overhead of checkpointing and
the risk to the timely completion of the batch job; therefore, this volume of POSIX.1\(hy2008
provides the checkpointing interval option. Support for checkpointing
is optional for servers.
.P
The
.BR \(mie
option allows users to alter the name and location of the standard
error stream written by a batch job. However, the path of the standard
error stream is meaningless if the value of the
.IR Join_Path
attribute of the batch job is TRUE.
.P
The
.BR \(mih
option allows users to set the hold type in the
.IR Hold_Types
attribute of a batch job. The
.IR qhold
and
.IR qrls
utilities add or remove hold types to the
.IR Hold_Types
attribute, respectively. The
.BR \(mih
option has been modified to allow for implementation-defined hold
types.
.P
The
.BR \(mij
option allows users to alter the decision to join (merge) the standard
error stream of the batch job with the standard output stream of the
batch job.
.P
The
.BR \(mil
option allows users to change the resource limits imposed on a batch
job.
.P
The
.BR \(mim
option allows users to modify the list of points in the life of a batch
job at which the designated users will receive mail notification.
.P
The
.BR \(miM
option allows users to alter the list of users who will receive
notification about events in the life of a batch job.
.P
The
.BR \(miN
option allows users to change the name of a batch job.
.P
The
.BR \(mio
option allows users to alter the name and path to which the standard
output stream of the batch job will be written.
.P
The
.BR \(miP
option allows users to modify the priority of a batch job. Support for
priority is optional for batch servers.
.P
The
.BR \(mir
option allows users to alter the rerunability status of a batch job.
.P
The
.BR \(miS
option allows users to change the name and location of the shell image
that will be invoked to interpret the script of the batch job. This
option has been modified to allow a list of shell name and locations
associated with different hosts.
.P
The
.BR \(miu
option allows users to change the user identifier under which the batch
job will execute.
.P
The
.IR job_identifier
operand syntax is provided so that the user can differentiate between
the originating and destination (or executing) batch server. These may
or may not be the same. The .\c
.IR server_name
portion identifies the originating batch server, while the @\c
.IR server
portion identifies the destination batch server.
.P
Historically, the
.IR qalter
utility has been a component of the Network Queuing System (NQS), the
existing practice from which this utility has been derived.
.SH "FUTURE DIRECTIONS"
The
.IR qalter
utility may be removed in a future version.
.SH "SEE ALSO"
.IR "Chapter 3" ", " "Batch Environment Services",
.IR "\fIqdel\fR\^",
.IR "\fIqhold\fR\^",
.IR "\fIqmove\fR\^",
.IR "\fIqrls\fR\^",
.IR "\fIqsub\fR\^",
.IR "\fItouch\fR\^"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "Chapter 8" ", " "Environment Variables",
.IR "Section 12.2" ", " "Utility Syntax Guidelines"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
'\" et
.TH QDEL "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
qdel
\(em delete batch jobs
.SH SYNOPSIS
.LP
.nf
qdel \fIjob_identifier\fP...
.fi
.SH DESCRIPTION
A batch job is deleted by sending a request to the batch server that
manages the batch job. A batch job that has been deleted is no longer
subject to management by batch services.
.P
The
.IR qdel
utility is a user-accessible client of batch services that requests the
deletion of one or more batch jobs.
.P
The
.IR qdel
utility shall request a batch server to delete those batch jobs for
which a batch
.IR job_identifier
is presented to the utility.
.P
The
.IR qdel
utility shall delete batch jobs in the order in which their batch
.IR job_identifier s
are presented to the utility.
.P
If the
.IR qdel
utility fails to process any batch
.IR job_identifier
successfully, the utility shall proceed to process the remaining batch
.IR job_identifier s,
if any.
.P
The
.IR qdel
utility shall delete each batch job by sending a
.IR "Delete Job Request"
to the batch server that manages the batch job.
.P
The
.IR qdel
utility shall not exit until the batch job corresponding to each
successfully processed batch
.IR job_identifier
has been deleted.
.SH OPTIONS
None.
.SH OPERANDS
The
.IR qdel
utility shall accept one or more operands that conform to the syntax
for a batch
.IR job_identifier
(see
.IR "Section 3.3.1" ", " "Batch Job Identifier").
.SH STDIN
Not used.
.SH "INPUT FILES"
None.
.SH "ENVIRONMENT VARIABLES"
The following environment variables shall affect the execution of
.IR qdel :
.IP "\fILANG\fP" 10
Provide a default value for the internationalization variables that are
unset or null. (See the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 8.2" ", " "Internationalization Variables"
the precedence of internationalization variables used to determine the
values of locale categories.)
.IP "\fILC_ALL\fP" 10
If set to a non-empty string value, override the values of all the
other internationalization variables.
.IP "\fILC_CTYPE\fP" 10
Determine the locale for the interpretation of sequences of bytes of
text data as characters (for example, single-byte as opposed to
multi-byte characters in arguments).
.IP "\fILC_MESSAGES\fP" 10
.br
Determine the locale that should be used to affect the format and
contents of diagnostic messages written to standard error.
.IP "\fILOGNAME\fP" 10
Determine the login name of the user.
.SH "ASYNCHRONOUS EVENTS"
Default.
.SH STDOUT
An implementation of the
.IR qdel
utility may write informative messages to standard output.
.SH STDERR
The standard error shall be used only for diagnostic messages.
.SH "OUTPUT FILES"
None.
.SH "EXTENDED DESCRIPTION"
None.
.SH "EXIT STATUS"
The following exit values shall be returned:
.IP "\00" 6
Successful completion.
.IP &gt;0 6
An error occurred.
.SH "CONSEQUENCES OF ERRORS"
In addition to the default behavior, the
.IR qdel
utility shall not be required to write a diagnostic message to standard
error when the error reply received from a batch server indicates that
the batch
.IR job_identifier
does not exist on the server. Whether or not the
.IR qdel
utility waits to output the diagnostic message while attempting to
locate the job on other servers is implementation-defined.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
None.
.SH EXAMPLES
None.
.SH RATIONALE
The
.IR qdel
utility allows users and administrators to delete jobs.
.P
The
.IR qdel
utility provides functionality that is not otherwise available. For
example, the
.IR kill
utility of the operating system does not suffice. First, to use the
.IR kill
utility, the user might have to log in on a remote node, because the
.IR kill
utility does not operate across the network. Second, unlike
.IR qdel ,
.IR kill
cannot remove jobs from queues. Lastly, the arguments of the
.IR qdel
utility are job identifiers rather than process identifiers, and so
this utility can be passed the output of the
.IR qselect
utility, thus providing users with a means of deleting a list of jobs.
.P
Because a set of jobs can be selected using the
.IR qselect
utility, the
.IR qdel
utility has not been complicated with options that provide for
selection of jobs. Instead, the batch jobs to be deleted are identified
individually by their job identifiers.
.P
Historically, the
.IR qdel
utility has been a component of NQS, the existing practice on which it
is based. However, the
.IR qdel
utility defined in this volume of POSIX.1\(hy2008 does not provide an option for specifying a
signal number to send to the batch job prior to the killing of the
process; that capability has been subsumed by the
.IR qsig
utility.
.P
A discussion was held about the delays of networking and the
possibility that the batch server may never respond, due to a down
router, down batch server, or other network mishap. The DESCRIPTION
records this under the words ``fails to process any job identifier''.
In the broad sense, the network problem is also an error, which causes
the failure to process the batch job identifier.
.SH "FUTURE DIRECTIONS"
The
.IR qdel
utility may be removed in a future version.
.SH "SEE ALSO"
.IR "Chapter 3" ", " "Batch Environment Services",
.IR "\fIkill\fR\^",
.IR "\fIqselect\fR\^",
.IR "\fIqsig\fR\^"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "Chapter 8" ", " "Environment Variables"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
'\" et
.TH QHOLD "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
qhold
\(em hold batch jobs
.SH SYNOPSIS
.LP
.nf
qhold \fB[\fR\(mih \fIhold_list\fB] \fIjob_identifier\fR...
.fi
.SH DESCRIPTION
A hold is placed on a batch job by a request to the batch server that
manages the batch job. A batch job that has one or more holds is not
eligible for execution. The
.IR qhold
utility is a user-accessible client of batch services that requests one
or more types of hold to be placed on one or more batch jobs.
.P
The
.IR qhold
utility shall place holds on those batch jobs for which a batch
.IR job_identifier
is presented to the utility.
.P
The
.IR qhold
utility shall place holds on batch jobs in the order in which their
batch
.IR job_identifier s
are presented to the utility. If the
.IR qhold
utility fails to process any batch
.IR job_identifier
successfully, the utility shall proceed to process the remaining batch
.IR job_identifier s,
if any.
.P
The
.IR qhold
utility shall place holds on each batch job by sending a
.IR "Hold Job Request"
to the batch server that manages the batch job.
.P
The
.IR qhold
utility shall not exit until holds have been placed on the batch job
corresponding to each successfully processed batch
.IR job_identifier .
.SH OPTIONS
The
.IR qhold
utility shall conform to the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 12.2" ", " "Utility Syntax Guidelines".
.P
The following option shall be supported by the implementation:
.IP "\fB\(mih\ \fIhold_list\fR" 10
Define the types of holds to be placed on the batch job.
.RS 10 
.P
The
.IR qhold
.BR \(mih
option shall accept a value for the
.IR hold_list
option-argument that is a string of alphanumeric characters in the
portable character set (see the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 6.1" ", " "Portable Character Set").
.P
The
.IR qhold
utility shall accept a value for the
.IR hold_list
option-argument that is a string of one or more of the characters
.BR 'u' ,
.BR 's' ,
or
.BR 'o' ,
or the single character
.BR 'n' .
.P
For each unique character in the
.IR hold_list
option-argument, the
.IR qhold
utility shall add a value to the
.IR Hold_Types
attribute of the batch job as follows, each representing a different
hold type:
.IP "\fRu\fP" 6
USER
.IP "\fRs\fP" 6
SYSTEM
.IP "\fRo\fP" 6
OPERATOR
.P
If any of these characters are duplicated in the
.IR hold_list
option-argument, the duplicates shall be ignored.
.P
An existing
.IR Hold_Types
attribute can be cleared by the following hold type:
.IP "\fRn\fP" 6
NO_HOLD
.P
The
.IR qhold
utility shall consider it an error if any hold type other than
.BR 'n' 
is combined with hold type
.BR 'n' .
.P
Strictly conforming applications shall not repeat any of the characters
.BR 'u' ,
.BR 's' ,
.BR 'o' ,
or
.BR 'n' 
within the
.IR hold_list
option-argument. The
.IR qhold
utility shall permit the repetition of characters, but shall not assign
additional meaning to the repeated characters.
.P
An implementation may define other hold types. The conformance document
for an implementation shall describe any additional hold types, how
they are specified, their internal behavior, and how they affect the
behavior of the utility.
.P
If the
.BR \(mih
option is not presented to the
.IR qhold
utility, the implementation shall set the
.IR Hold_Types
attribute to USER.
.RE
.SH OPERANDS
The
.IR qhold
utility shall accept one or more operands that conform to the syntax
for a batch
.IR job_identifier
(see
.IR "Section 3.3.1" ", " "Batch Job Identifier").
.SH STDIN
Not used.
.SH "INPUT FILES"
None.
.SH "ENVIRONMENT VARIABLES"
The following environment variables shall affect the execution of
.IR qhold :
.IP "\fILANG\fP" 10
Provide a default value for the internationalization variables that are
unset or null. (See the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 8.2" ", " "Internationalization Variables"
the precedence of internationalization variables used to determine the
values of locale categories.)
.IP "\fILC_ALL\fP" 10
If set to a non-empty string value, override the values of all the
other internationalization variables.
.IP "\fILC_CTYPE\fP" 10
Determine the locale for the interpretation of sequences of bytes of
text data as characters (for example, single-byte as opposed to
multi-byte characters in arguments).
.IP "\fILC_MESSAGES\fP" 10
.br
Determine the locale that should be used to affect the format and
contents of diagnostic messages written to standard error.
.IP "\fILOGNAME\fP" 10
Determine the login name of the user.
.SH "ASYNCHRONOUS EVENTS"
Default.
.SH STDOUT
None.
.SH STDERR
The standard error shall be used only for diagnostic messages.
.SH "OUTPUT FILES"
None.
.SH "EXTENDED DESCRIPTION"
None.
.SH "EXIT STATUS"
.br
The following exit values shall be returned:
.IP "\00" 6
Successful completion.
.IP &gt;0 6
An error occurred.
.SH "CONSEQUENCES OF ERRORS"
In addition to the default behavior, the
.IR qhold
utility shall not be required to write a diagnostic message to standard
error when the error reply received from a batch server indicates that
the batch
.IR job_identifier
does not exist on the server. Whether or not the
.IR qhold
utility waits to output the diagnostic message while attempting to
locate the job on other servers is implementation-defined.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
None.
.SH EXAMPLES
None.
.SH RATIONALE
The
.IR qhold
utility allows users to place a hold on one or more jobs. A hold makes
a batch job ineligible for execution.
.P
The
.IR qhold
utility has options that allow the user to specify the type of hold.
Should the user wish to place a hold on a set of jobs that meet a
selection criteria, such a list of jobs can be acquired using the
.IR qselect
utility.
.P
The
.BR \(mih
option allows the user to specify the type of hold that is to be placed
on the job. This option allows for USER, SYSTEM, OPERATOR, and
implementation-defined hold types. The USER and OPERATOR holds are
distinct. The batch server that manages the batch job will verify that
the user is authorized to set the specified hold for the batch job.
.P
Mail is not required on hold because the administrator has the tools
and libraries to build this option if he or she wishes.
.P
Historically, the
.IR qhold
utility has been a part of some existing batch systems, although it has
not traditionally been a part of the NQS.
.SH "FUTURE DIRECTIONS"
The
.IR qhold
utility may be removed in a future version.
.SH "SEE ALSO"
.IR "Chapter 3" ", " "Batch Environment Services",
.IR "\fIqselect\fR\^"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 6.1" ", " "Portable Character Set",
.IR "Chapter 8" ", " "Environment Variables",
.IR "Section 12.2" ", " "Utility Syntax Guidelines"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
'\" et
.TH QMOVE "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
qmove
\(em move batch jobs
.SH SYNOPSIS
.LP
.nf
qmove \fIdestination job_identifier\fP...
.fi
.SH DESCRIPTION
To move a batch job is to remove the batch job from the batch queue in
which it resides and instantiate the batch job in another batch queue.
A batch job is moved by a request to the batch server that manages the
batch job. The
.IR qmove
utility is a user-accessible batch client that requests the movement of
one or more batch jobs.
.P
The
.IR qmove
utility shall move those batch jobs, and only those batch jobs, for
which a batch
.IR job_identifier
is presented to the utility.
.P
The
.IR qmove
utility shall move batch jobs in the order in which the corresponding
batch
.IR job_identifier s
are presented to the utility.
.P
If the
.IR qmove
utility fails to process a batch
.IR job_identifier
successfully, the utility shall proceed to process the remaining batch
.IR job_identifier s,
if any.
.P
The
.IR qmove
utility shall move batch jobs by sending a
.IR "Move Job Request"
to the batch server that manages each batch job. The
.IR qmove
utility shall not exit before the batch jobs corresponding to all
successfully processed batch
.IR job_identifier s
have been moved.
.SH OPTIONS
None.
.SH OPERANDS
The
.IR qmove
utility shall accept one operand that conforms to the syntax for a
destination (see
.IR "Section 3.3.2" ", " "Destination").
.P
The
.IR qmove
utility shall accept one or more operands that conform to the syntax
for a batch
.IR job_identifier
(see
.IR "Section 3.3.1" ", " "Batch Job Identifier").
.SH STDIN
Not used.
.SH "INPUT FILES"
None.
.SH "ENVIRONMENT VARIABLES"
The following environment variables shall affect the execution of
.IR qmove :
.IP "\fILANG\fP" 10
Provide a default value for the internationalization variables that are
unset or null. (See the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 8.2" ", " "Internationalization Variables"
the precedence of internationalization variables used to determine the
values of locale categories.)
.IP "\fILC_ALL\fP" 10
If set to a non-empty string value, override the values of all the
other internationalization variables.
.IP "\fILC_CTYPE\fP" 10
Determine the locale for the interpretation of sequences of bytes of
text data as characters (for example, single-byte as opposed to
multi-byte characters in arguments).
.IP "\fILC_MESSAGES\fP" 10
.br
Determine the locale that should be used to affect the format and
contents of diagnostic messages written to standard error.
.IP "\fILOGNAME\fP" 10
Determine the login name of the user.
.SH "ASYNCHRONOUS EVENTS"
Default.
.SH STDOUT
None.
.SH STDERR
The standard error shall be used only for diagnostic messages.
.SH "OUTPUT FILES"
None.
.SH "EXTENDED DESCRIPTION"
None.
.SH "EXIT STATUS"
The following exit values shall be returned:
.IP "\00" 6
Successful completion.
.IP &gt;0 6
An error occurred.
.SH "CONSEQUENCES OF ERRORS"
In addition to the default behavior, the
.IR qmove
utility shall not be required to write a diagnostic message to standard
error when the error reply received from a batch server indicates that
the batch
.IR job_identifier
does not exist on the server. Whether or not the
.IR qmove
utility waits to output the diagnostic message while attempting to
locate the job on other servers is implementation-defined.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
None.
.SH EXAMPLES
None.
.SH RATIONALE
The
.IR qmove
utility allows users to move jobs between queues.
.P
The alternative to using the
.IR qmove
utility\(emdeleting the batch job and requeuing it\(ementails
considerably more typing.
.P
Since the means of selecting jobs based on attributes has been
encapsulated in the
.IR qselect
utility, the only option of the
.IR qmove
utility concerns authorization. The
.BR \(miu
option provides the user with the convenience of changing the user
identifier under which the batch job will execute. Minimalism and
consistency have taken precedence over convenience; the
.BR \(miu
option has been deleted because the equivalent capability exists with
the
.BR \(miu
option of the
.IR qalter
utility.
.SH "FUTURE DIRECTIONS"
The
.IR qmove
utility may be removed in a future version.
.SH "SEE ALSO"
.IR "Chapter 3" ", " "Batch Environment Services",
.IR "\fIqalter\fR\^",
.IR "\fIqselect\fR\^"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "Chapter 8" ", " "Environment Variables"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
'\" et
.TH QMSG "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
qmsg
\(em send message to batch jobs
.SH SYNOPSIS
.LP
.nf
qmsg \fB[\fR\(miEO\fB] \fImessage_string job_identifier\fR...
.fi
.SH DESCRIPTION
To send a message to a batch job is to request that a server write a
message string into one or more output files of the batch job. A
message is sent to a batch job by a request to the batch server that
manages the batch job. The
.IR qmsg
utility is a user-accessible batch client that requests the sending of
messages to one or more batch jobs.
.P
The
.IR qmsg
utility shall write messages into the files of batch jobs by sending a
.IR "Job Message Request"
to the batch server that manages the batch job. The
.IR qmsg
utility shall not directly write the message into the files of the
batch job.
.P
The
.IR qmsg
utility shall send a
.IR "Job Message Request"
for those batch jobs, and only those batch jobs, for which a batch
.IR job_identifier
is presented to the utility.
.P
The
.IR qmsg
utility shall send
.IR "Job Message Request" s
for batch jobs in the order in which their batch
.IR job_identifier s
are presented to the utility.
.P
If the
.IR qmsg
utility fails to process any batch
.IR job_identifier
successfully, the utility shall proceed to process the remaining batch
.IR job_identifier s,
if any.
.P
The
.IR qmsg
utility shall not exit before a
.IR "Job Message Request"
has been sent to the server that manages the batch job that corresponds
to each successfully processed batch
.IR job_identifier .
.SH OPTIONS
The
.IR qmsg
utility shall conform to the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 12.2" ", " "Utility Syntax Guidelines".
.P
The following options shall be supported by the implementation:
.IP "\fB\(miE\fP" 10
Specify that the message is written to the standard error of each batch
job.
.RS 10 
.P
The
.IR qmsg
utility shall write the message into the standard error of the batch
job.
.RE
.IP "\fB\(miO\fP" 10
Specify that the message is written to the standard output of each
batch job.
.RS 10 
.P
The
.IR qmsg
utility shall write the message into the standard output of the batch
job.
.RE
.P
If neither the
.BR \(miO
nor the
.BR \(miE
option is presented to the
.IR qmsg
utility, the utility shall write the message into an
implementation-defined file. The conformance document for the
implementation shall describe the name and location of the
implementation-defined file. If both the
.BR \(miO
and the
.BR \(miE
options are presented to the
.IR qmsg
utility, then the utility shall write the messages to both standard
output and standard error.
.SH OPERANDS
The
.IR qmsg
utility shall accept a minimum of two operands,
.IR message_string
and one or more batch
.IR job_identifier s.
.P
The
.IR message_string
operand shall be the string to be written to one or more output files
of the batch job followed by a
&lt;newline&gt;.
If the string contains
&lt;blank&gt;
characters, then the application shall ensure that the string is
quoted. The
.IR message_string
shall be encoded in the portable character set (see the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 6.1" ", " "Portable Character Set").
.P
All remaining operands are batch
.IR job_identifier s
that conform to the syntax for a batch
.IR job_identifier
(see
.IR "Section 3.3.1" ", " "Batch Job Identifier").
.SH STDIN
Not used.
.SH "INPUT FILES"
None.
.SH "ENVIRONMENT VARIABLES"
The following environment variables shall affect the execution of
.IR qmsg :
.IP "\fILANG\fP" 10
Provide a default value for the internationalization variables that are
unset or null. (See the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 8.2" ", " "Internationalization Variables"
the precedence of internationalization variables used to determine the
values of locale categories.)
.IP "\fILC_ALL\fP" 10
If set to a non-empty string value, override the values of all the
other internationalization variables.
.IP "\fILC_CTYPE\fP" 10
Determine the locale for the interpretation of sequences of bytes of
text data as characters (for example, single-byte as opposed to
multi-byte characters in arguments).
.IP "\fILC_MESSAGES\fP" 10
.br
Determine the locale that should be used to affect the format and
contents of diagnostic messages written to standard error.
.IP "\fILOGNAME\fP" 10
Determine the login name of the user.
.SH "ASYNCHRONOUS EVENTS"
Default.
.SH STDOUT
None.
.SH STDERR
The standard error shall be used only for diagnostic messages.
.SH "OUTPUT FILES"
None.
.SH "EXTENDED DESCRIPTION"
None.
.SH "EXIT STATUS"
The following exit values shall be returned:
.IP "\00" 6
Successful completion.
.IP &gt;0 6
An error occurred.
.SH "CONSEQUENCES OF ERRORS"
In addition to the default behavior, the
.IR qmsg
utility shall not be required to write a diagnostic message to standard
error when the error reply received from a batch server indicates that
the batch
.IR job_identifier
does not exist on the server. Whether or not the
.IR qmsg
utility waits to output the diagnostic message while attempting to
locate the job on other servers is implementation-defined.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
None.
.SH EXAMPLES
None.
.SH RATIONALE
The
.IR qmsg
utility allows users to write messages into the output files of running
jobs. Users, including operators and administrators, have a number of
occasions when they want to place messages in the output files of a
batch job. For example, if a disk that is being used by a batch job is
showing errors, the operator might note this in the standard error
stream of the batch job.
.P
The options of the
.IR qmsg
utility provide users with the means of placing the message in the
output stream of their choice. The default output stream for the
message\(emif the user does not designate an output stream\(emis
implementation-defined, since many implementations will provide, as
an extension to this volume of POSIX.1\(hy2008, a log file that shows the history of utility
execution.
.P
If users wish to send a message to a set of jobs that meet a selection
criteria, the
.IR qselect
utility can be used to acquire the appropriate list of job
identifiers.
.P
The
.BR \(miE
option allows users to place the message in the standard error stream
of the batch job.
.P
The
.BR \(miO
option allows users to place the message in the standard output stream
of the batch job.
.P
Historically, the
.IR qmsg
utility is an existing practice in the offerings of one or more
implementors of an NQS-derived batch system. The utility has been found
to be useful enough that it deserves to be included in this volume of POSIX.1\(hy2008.
.SH "FUTURE DIRECTIONS"
The
.IR qmsg
utility may be removed in a future version.
.SH "SEE ALSO"
.IR "Chapter 3" ", " "Batch Environment Services",
.IR "\fIqselect\fR\^"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 6.1" ", " "Portable Character Set",
.IR "Chapter 8" ", " "Environment Variables",
.IR "Section 12.2" ", " "Utility Syntax Guidelines"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
'\" et
.TH QRERUN "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
qrerun
\(em rerun batch jobs
.SH SYNOPSIS
.LP
.nf
qrerun \fIjob_identifier\fR...
.fi
.SH DESCRIPTION
To rerun a batch job is to terminate the session leader of the batch
job, delete any associated checkpoint files, and return the batch job
to the batch queued state. A batch job is rerun by a request to the
batch server that manages the batch job. The
.IR qrerun
utility is a user-accessible batch client that requests the rerunning
of one or more batch jobs.
.P
The
.IR qrerun
utility shall rerun those batch jobs for which a batch
.IR job_identifier
is presented to the utility.
.P
The
.IR qrerun
utility shall rerun batch jobs in the order in which their batch
.IR job_identifier s
are presented to the utility.
.P
If the
.IR qrerun
utility fails to process any batch
.IR job_identifier
successfully, the utility shall proceed to process the remaining batch
.IR job_identifier s,
if any.
.P
The
.IR qrerun
utility shall rerun batch jobs by sending a
.IR "Rerun Job Request"
to the batch server that manages each batch job.
.P
For each successfully processed batch
.IR job_identifier ,
the
.IR qrerun
utility shall have rerun the corresponding batch job at the time
the utility exits.
.SH OPTIONS
None.
.SH OPERANDS
The
.IR qrerun
utility shall accept one or more operands that conform to the syntax
for a batch
.IR job_identifier
(see
.IR "Section 3.3.1" ", " "Batch Job Identifier").
.SH STDIN
Not used.
.SH "INPUT FILES"
None.
.SH "ENVIRONMENT VARIABLES"
The following environment variables shall affect the execution of
.IR qrerun :
.IP "\fILANG\fP" 10
Provide a default value for the internationalization variables that are
unset or null. (See the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 8.2" ", " "Internationalization Variables"
the precedence of internationalization variables used to determine the
values of locale categories.)
.IP "\fILC_ALL\fP" 10
If set to a non-empty string value, override the values of all the
other internationalization variables.
.IP "\fILC_CTYPE\fP" 10
Determine the locale for the interpretation of sequences of bytes of
text data as characters (for example, single-byte as opposed to
multi-byte characters in arguments).
.IP "\fILC_MESSAGES\fP" 10
.br
Determine the locale that should be used to affect the format and
contents of diagnostic messages written to standard error.
.IP "\fILOGNAME\fP" 10
Determine the login name of the user.
.SH "ASYNCHRONOUS EVENTS"
Default.
.SH STDOUT
None.
.SH STDERR
The standard error shall be used only for diagnostic messages.
.SH "OUTPUT FILES"
None.
.SH "EXTENDED DESCRIPTION"
None.
.SH "EXIT STATUS"
The following exit values shall be returned:
.IP "\00" 6
Successful completion.
.IP &gt;0 6
An error occurred.
.SH "CONSEQUENCES OF ERRORS"
In addition to the default behavior, the
.IR qrerun
utility shall not be required to write a diagnostic message to standard
error when the error reply received from a batch server indicates that
the batch
.IR job_identifier
does not exist on the server. Whether or not the
.IR qrerun
utility waits to output the diagnostic message while attempting to
locate the job on other servers is implementation-defined.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
None.
.SH EXAMPLES
None.
.SH RATIONALE
The
.IR qrerun
utility allows users to cause jobs in the running state to exit and
rerun.
.P
The
.IR qrerun
utility is a new utility, \fIvis-a-vis\fP existing practice, that has
been defined in this volume of POSIX.1\(hy2008 to correct user-perceived deficiencies in the
existing practice.
.SH "FUTURE DIRECTIONS"
The
.IR qrerun
utility may be removed in a future version.
.SH "SEE ALSO"
.IR "Chapter 3" ", " "Batch Environment Services"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "Chapter 8" ", " "Environment Variables"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
'\" et
.TH QRLS "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
qrls
\(em release batch jobs
.SH SYNOPSIS
.LP
.nf
qrls \fB[\fR\(mih \fIhold_list\fB] \fIjob_identifier\fR...
.fi
.SH DESCRIPTION
A batch job might have one or more holds, which prevent the batch job
from executing. A batch job from which all the holds have been removed
becomes eligible for execution and is said to have been released. A
batch job hold is removed by sending a request to the batch server that
manages the batch job. The
.IR qrls
utility is a user-accessible client of batch services that requests
holds be removed from one or more batch jobs.
.P
The
.IR qrls
utility shall remove one or more holds from those batch jobs for which
a batch
.IR job_identifier
is presented to the utility.
.P
The
.IR qrls
utility shall remove holds from batch jobs in the order in which their
batch
.IR job_identifier s
are presented to the utility.
.P
If the
.IR qrls
utility fails to process a batch
.IR job_identifier
successfully, the utility shall proceed to process the remaining batch
.IR job_identifier s,
if any.
.P
The
.IR qrls
utility shall remove holds on each batch job by sending a
.IR "Release Job Request"
to the batch server that manages the batch job.
.P
The
.IR qrls
utility shall not exit until the holds have been removed from the batch
job corresponding to each successfully processed batch
.IR job_identifier .
.SH OPTIONS
The
.IR qrls
utility shall conform to the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 12.2" ", " "Utility Syntax Guidelines".
.P
The following option shall be supported by the implementation:
.IP "\fB\(mih\ \fIhold_list\fR" 10
Define the types of holds to be removed from the batch job.
.RS 10 
.P
The
.IR qrls
.BR \(mih
option shall accept a value for the
.IR hold_list
option-argument that is a string of alphanumeric characters in the
portable character set (see the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 6.1" ", " "Portable Character Set").
.P
The
.IR qrls
utility shall accept a value for the
.IR hold_list
option-argument that is a string of one or more of the characters
.BR 'u' ,
.BR 's' ,
or
.BR 'o' ,
or the single character
.BR 'n' .
.P
For each unique character in the
.IR hold_list
option-argument, the
.IR qrls
utility shall add a value to the
.IR Hold_Types
attribute of the batch job as follows, each representing a different
hold type:
.IP "\fRu\fP" 6
USER
.IP "\fRs\fP" 6
SYSTEM
.IP "\fRo\fP" 6
OPERATOR
.P
If any of these characters are duplicated in the
.IR hold_list
option-argument, the duplicates shall be ignored.
.P
An existing
.IR Hold_Types
attribute can be cleared by the following hold type:
.IP "\fRn\fP" 6
NO_HOLD
.P
The
.IR qrls
utility shall consider it an error if any hold type other than
.BR 'n' 
is combined with hold type
.BR 'n' .
.P
Strictly conforming applications shall not repeat any of the characters
.BR 'u' ,
.BR 's' ,
.BR 'o' ,
or
.BR 'n' 
within the
.IR hold_list
option-argument. The
.IR qrls
utility shall permit the repetition of characters, but shall not assign
additional meaning to the repeated characters.
.P
An implementation may define other hold types. The conformance document
for an implementation shall describe any additional hold types, how
they are specified, their internal behavior, and how they affect the
behavior of the utility.
.P
If the
.BR \(mih
option is not presented to the
.IR qrls
utility, the implementation shall remove the USER hold in the
.IR Hold_Types
attribute.
.RE
.SH OPERANDS
The
.IR qrls
utility shall accept one or more operands that conform to the syntax
for a batch
.IR job_identifier
(see
.IR "Section 3.3.1" ", " "Batch Job Identifier").
.SH STDIN
Not used.
.SH "INPUT FILES"
None.
.SH "ENVIRONMENT VARIABLES"
The following environment variables shall affect the execution of
.IR qrls :
.IP "\fILANG\fP" 10
Provide a default value for the internationalization variables that are
unset or null. (See the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 8.2" ", " "Internationalization Variables"
the precedence of internationalization variables used to determine the
values of locale categories.)
.IP "\fILC_ALL\fP" 10
If set to a non-empty string value, override the values of all the
other internationalization variables.
.IP "\fILC_CTYPE\fP" 10
Determine the locale for the interpretation of sequences of bytes of
text data as characters (for example, single-byte as opposed to
multi-byte characters in arguments).
.IP "\fILC_MESSAGES\fP" 10
.br
Determine the locale that should be used to affect the format and
contents of diagnostic messages written to standard error.
.IP "\fILOGNAME\fP" 10
Determine the login name of the user.
.SH "ASYNCHRONOUS EVENTS"
Default.
.SH STDOUT
None.
.SH STDERR
The standard error shall be used only for diagnostic messages.
.SH "OUTPUT FILES"
None.
.SH "EXTENDED DESCRIPTION"
None.
.SH "EXIT STATUS"
The following exit values shall be returned:
.IP "\00" 6
Successful completion.
.IP &gt;0 6
An error occurred.
.SH "CONSEQUENCES OF ERRORS"
In addition to the default behavior, the
.IR qrls
utility shall not be required to write a diagnostic message to standard
error when the error reply received from a batch server indicates that
the batch
.IR job_identifier
does not exist on the server. Whether or not the
.IR qrls
utility waits to output the diagnostic message while attempting to
locate the job on other servers is implementation-defined.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
None.
.SH EXAMPLES
None.
.SH RATIONALE
The
.IR qrls
utility allows users, operators, and administrators to remove holds
from jobs.
.P
The
.IR qrls
utility does not support any job selection options or wildcard
arguments. Users may acquire a list of jobs selected by attributes
using the
.IR qselect
utility. For example, a user could select all of their held jobs.
.P
The
.BR \(mih
option allows the user to specify the type of hold that is to be
removed. This option allows for USER, SYSTEM, OPERATOR, and
implementation-defined hold types. The batch server that manages the
batch job will verify whether the user is authorized to remove the
specified hold for the batch job. If more than one type of hold has
been placed on the batch job, a user may wish to remove only some of
them.
.P
Mail is not required on release because the administrator has the tools
and libraries to build this option if required.
.P
The
.IR qrls
utility is a new utility \fIvis-a-vis\fP existing practice; it has been
defined in this volume of POSIX.1\(hy2008 as the natural complement to the
.IR qhold
utility.
.SH "FUTURE DIRECTIONS"
The
.IR qrls
utility may be removed in a future version.
.SH "SEE ALSO"
.IR "Chapter 3" ", " "Batch Environment Services",
.IR "\fIqhold\fR\^",
.IR "\fIqselect\fR\^"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 6.1" ", " "Portable Character Set",
.IR "Chapter 8" ", " "Environment Variables",
.IR "Section 12.2" ", " "Utility Syntax Guidelines"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
'\" et
.TH QSELECT "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
qselect
\(em select batch jobs
.SH SYNOPSIS
.LP
.nf
qselect \fB[\fR\(mia \fB[\fIop\fB]\fIdate_time\fB] [\fR\(miA \fIaccount_string\fB] [\fR\(mic \fB[\fIop\fB]\fIinterval\fB]
[\fR\(mih \fIhold_list\fB] [\fR\(mil \fIresource_list\fB] [\fR\(miN \fIname\fB] [\fR\(mip \fB[\fIop\fB]\fIpriority\fB]
[\fR\(miq \fIdestination\fB] [\fR\(mir \fIy\fR|\fIn\fB] [\fR\(mis \fIstates\fB] [\fR\(miu \fIuser_list\fB]\fR
.fi
.SH DESCRIPTION
To select a set of batch jobs is to return the batch
.IR job_identifier s
for each batch job that meets a list of selection criteria. A set of
batch jobs is selected by a request to a batch server. The
.IR qselect
utility is a user-accessible batch client that requests the selection
of batch jobs.
.P
Upon successful completion, the
.IR qselect
utility shall have returned a list of zero or more batch
.IR job_identifier s
that meet the criteria specified by the options and option-arguments
presented to the utility.
.P
The
.IR qselect
utility shall select batch jobs by sending a
.IR "Select Jobs Request"
to a batch server. The
.IR qselect
utility shall not exit until the server replies to each request
generated.
.P
For each option presented to the
.IR qselect
utility, the utility shall restrict the set of selected batch jobs as
described in the OPTIONS section.
.P
The
.IR qselect
utility shall not restrict selection of batch jobs except by
authorization and as required by the options presented to the utility.
.P
When an option is specified with a mandatory or optional
.IR op
component to the option-argument, then
.IR op
shall specify a relation between the value of a certain batch job
attribute and the
.IR value
component of the option-argument. If an
.IR op
is allowable on an option, then the description of the option letter
indicates the
.IR op
as either mandatory or optional. Acceptable strings for the
.IR op
component, and the relation the string indicates, are shown in the
following list:
.IP "\fR.eq.\fR" 8
The value represented by the attribute of the batch job is equal to the
value represented by the option-argument.
.IP "\fR.ge.\fR" 8
The value represented by the attribute of the batch job is greater than
or equal to the value represented by the option-argument.
.IP "\fR.gt.\fR" 8
The value represented by the attribute of the batch job is greater than
the value represented by the option-argument.
.IP "\fR.lt.\fR" 8
The value represented by the attribute of the batch job is less than
the value represented by the option-argument.
.IP "\fR.le.\fR" 8
The value represented by the attribute of the batch job is less than or
equal to the value represented by the option-argument.
.IP "\fR.ne.\fR" 8
The value represented by the attribute of the batch job is not equal to
the value represented by the option-argument.
.SH OPTIONS
The
.IR qselect
utility shall conform to the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 12.2" ", " "Utility Syntax Guidelines".
.P
The following options shall be supported by the implementation:
.IP "\fB\(mia\ [\fIop\fB]\fIdate_time\fR" 10
.br
Restrict selection to a specific time, or a range of times.
.RS 10 
.P
The
.IR qselect
utility shall select only batch jobs for which the value of the
.IR Execution_Time
attribute is related to the Epoch equivalent of the local time
expressed by the value of the
.IR date_time
component of the option-argument in the manner indicated by the value
of the
.IR op
component of the option-argument.
.P
The
.IR qselect
utility shall accept a
.IR date_time
component of the option-argument that conforms to the syntax of the
.IR time
operand of the
.IR touch
utility.
.P
If the
.IR op
component of the option-argument is not presented to the
.IR qselect
utility, the utility shall select batch jobs for which the
.IR Execution_Time
attribute is equal to the
.IR date_time
component of the option-argument.
.P
When comparing times, the
.IR qselect
utility shall use the following definitions for the
.IR op
component of the option-argument:
.IP "\fR.eq.\fR" 8
The time represented by value of the
.IR Execution_Time
attribute of the batch job is equal to the time represented by the
.IR date_time
component of the option-argument.
.IP "\fR.ge.\fR" 8
The time represented by value of the
.IR Execution_Time
attribute of the batch job is after or equal to the time represented by
the
.IR date_time
component of the option-argument.
.IP "\fR.gt.\fR" 8
The time represented by value of the
.IR Execution_Time
attribute of the batch job is after the time represented by the
.IR date_time
component of the option-argument.
.IP "\fR.lt.\fR" 8
The time represented by value of the
.IR Execution_Time
attribute of the batch job is before the time represented by the
.IR date_time
component of the option-argument.
.IP "\fR.le.\fR" 8
The time represented by value of the
.IR Execution_Time
attribute of the batch job is before or equal to the time represented
by the
.IR date_time
component of the option-argument.
.IP "\fR.ne.\fR" 8
The time represented by value of the
.IR Execution_Time
attribute of the batch job is not equal to the time represented by the
.IR date_time
component of the option-argument.
.P
The
.IR qselect
utility shall accept the defined character strings for the
.IR op
component of the option-argument.
.RE
.IP "\fB\(miA\ \fIaccount_string\fR" 10
.br
Restrict selection to the batch jobs charging a specified account.
.RS 10 
.P
The
.IR qselect
utility shall select only batch jobs for which the value of the
.IR Account_Name
attribute of the batch job matches the value of the
.IR account_string
option-argument.
.P
The syntax of the
.IR account_string
option-argument is unspecified.
.RE
.IP "\fB\(mic\ [\fIop\fB]\fIinterval\fR" 10
.br
Restrict selection to batch jobs within a range of checkpoint
intervals.
.RS 10 
.P
The
.IR qselect
utility shall select only batch jobs for which the value of the
.IR Checkpoint
attribute relates to the value of the
.IR interval
component of the option-argument in the manner indicated by the value
of the
.IR op
component of the option-argument.
.P
If the
.IR op
component of the option-argument is omitted, the
.IR qselect
utility shall select batch jobs for which the value of the
.IR Checkpoint
attribute is equal to the value of the
.IR interval
component of the option-argument.
.P
When comparing checkpoint intervals, the
.IR qselect
utility shall use the following definitions for the
.IR op
component of the option-argument:
.IP "\fR.eq.\fR" 8
The value of the
.IR Checkpoint
attribute of the batch job equals the value of the
.IR interval
component of the option-argument.
.IP "\fR.ge.\fR" 8
The value of the
.IR Checkpoint
attribute of the batch job is greater than or equal to the value of the
.IR interval
component option-argument.
.IP "\fR.gt.\fR" 8
The value of the
.IR Checkpoint
attribute of the batch job is greater than the value of the
.IR interval
component option-argument.
.IP "\fR.lt.\fR" 8
The value of the
.IR Checkpoint
attribute of the batch job is less than the value of the
.IR interval
component option-argument.
.IP "\fR.le.\fR" 8
The value of the
.IR Checkpoint
attribute of the batch job is less than or equal to the value of the
.IR interval
component option-argument.
.IP "\fR.ne.\fR" 8
The value of the
.IR Checkpoint
attribute of the batch job does not equal the value of the
.IR interval
component option-argument.
.P
The
.IR qselect
utility shall accept the defined character strings for the
.IR op
component of the option-argument.
.P
The ordering relationship for the values of the interval
option-argument is defined to be:
.sp
.RS 4
.nf
\fB
\&amp;`n' .gt. `s' .gt. `c=\fIminutes\fR' .ge. `c'
.fi \fR
.P
.RE
When comparing
.IR Checkpoint
attributes with an interval having the value of the single character
.BR 'u' ,
only equality or inequality are valid comparisons.
.RE
.IP "\fB\(mih\ \fIhold_list\fR" 10
Restrict selection to batch jobs that have a specific type of hold.
.RS 10 
.P
The
.IR qselect
utility shall select only batch jobs for which the value of the
.IR Hold_Types
attribute matches the value of the
.IR hold_list
option-argument.
.P
The
.IR qselect
.BR \(mih
option shall accept a value for the
.IR hold_list
option-argument that is a string of alphanumeric characters in the
portable character set (see the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 6.1" ", " "Portable Character Set").
.P
The
.IR qselect
utility shall accept a value for the
.IR hold_list
option-argument that is a string of one or more of the characters
.BR 'u' ,
.BR 's' ,
or
.BR 'o' ,
or the single character
.BR 'n' .
.P
Each unique character in the
.IR hold_list
option-argument of the
.IR qselect
utility is defined as follows, each representing a different hold type:
.IP "\fRu\fP" 6
USER
.IP "\fRs\fP" 6
SYSTEM
.IP "\fRo\fP" 6
OPERATOR
.P
If any of these characters are duplicated in the
.IR hold_list
option-argument, the duplicates shall be ignored.
.P
The
.IR qselect
utility shall consider it an error if any hold type other than
.BR 'n' 
is combined with hold type
.BR 'n' .
.P
Strictly conforming applications shall not repeat any of the characters
.BR 'u' ,
.BR 's' ,
.BR 'o' ,
or
.BR 'n' 
within the
.IR hold_list
option-argument. The
.IR qselect
utility shall permit the repetition of characters, but shall not assign
additional meaning to the repeated characters.
.P
An implementation may define other hold types. The conformance document
for an implementation shall describe any additional hold types, how
they are specified, their internal behavior, and how they affect the
behavior of the utility.
.RE
.IP "\fB\(mil\ \fIresource_list\fR" 10
.br
Restrict selection to batch jobs with specified resource limits and
attributes.
.RS 10 
.P
The
.IR qselect
utility shall accept a
.IR resource_list
option-argument with the following syntax:
.sp
.RS 4
.nf
\fB
\fIresource_name op value \fB[\fR,,\fIresource_name op value\fR,, ...\fB]\fR
.fi \fR
.P
.RE
.P
When comparing resource values, the
.IR qselect
utility shall use the following definitions for the
.IR op
component of the option-argument:
.IP "\fR.eq.\fR" 8
The value of the resource of the same name in the
.IR Resource_List
attribute of the batch job equals the value of the value component of
the option-argument.
.IP "\fR.ge.\fR" 8
The value of the resource of the same name in the
.IR Resource_List
attribute of the batch job is greater than or equal to the value of the
.IR value
component of the option-argument.
.IP "\fR.gt.\fR" 8
The value of the resource of the same name in the
.IR Resource_List
attribute of the batch job is greater than the value of the value
component of the option-argument.
.IP "\fR.lt.\fR" 8
The value of the resource of the same name in the
.IR Resource_List
attribute of the batch job is less than the value of the value
component of the option-argument.
.IP "\fR.ne.\fR" 8
The value of the resource of the same name in the
.IR Resource_List
attribute of the batch job does not equal the value of the value
component of the option-argument.
.IP "\fR.le.\fR" 8
The value of the resource of the same name in the
.IR Resource_List
attribute of the batch job is less than or equal to the value of the
.IR value
component of the option-argument.
.P
When comparing the limit of a
.IR Resource_List
attribute with the
.IR value
component of the option-argument, if the limit, the value, or both are
non-numeric, only equality or inequality are valid comparisons.
.P
The
.IR qselect
utility shall select only batch jobs for which the values of the
.IR resource_name s
listed in the
.IR resource_list
option-argument match the corresponding limits of the
.IR Resource_List
attribute of the batch job.
.P
Limits of
.IR resource_name s
present in the
.IR Resource_List
attribute of the batch job that have no corresponding values in the
.IR resource_list
option-argument shall not be considered when selecting batch jobs.
.RE
.IP "\fB\(miN\ \fIname\fR" 10
Restrict selection to batch jobs with a specified name.
.RS 10 
.P
The
.IR qselect
utility shall select only batch jobs for which the value of the
.IR Job_Name
attribute matches the value of the
.IR name
option-argument. The string specified in the
.IR name
option-argument shall be passed, uninterpreted, to the server. This
allows an implementation to match ``wildcard'' patterns against batch
job names.
.P
An implementation shall describe in the conformance document the format
it supports for matching against the
.IR Job_Name
attribute.
.RE
.IP "\fB\(mip\ [\fIop\fB]\fIpriority\fR" 10
.br
Restrict selection to batch jobs of the specified priority or range of
priorities.
.RS 10 
.P
The
.IR qselect
utility shall select only batch jobs for which the value of the
.IR Priority
attribute of the batch job relates to the value of the
.IR priority
component of the option-argument in the manner indicated by the value
of the
.IR op
component of the option-argument.
.P
If the
.IR op
component of the option-argument is omitted, the
.IR qselect
utility shall select batch jobs for which the value of the
.IR Priority
attribute of the batch job is equal to the value of the
.IR priority
component of the option-argument.
.P
When comparing priority values, the
.IR qselect
utility shall use the following definitions for the
.IR op
component of the option-argument:
.IP "\fR.eq.\fR" 8
The value of the
.IR Priority
attribute of the batch job equals the value of the
.IR priority
component of the option-argument.
.IP "\fR.ge.\fR" 8
The value of the
.IR Priority
attribute of the batch job is greater than or equal to the value of the
.IR priority
component option-argument.
.IP "\fR.gt.\fR" 8
The value of the
.IR Priority
attribute of the batch job is greater than the value of the
.IR priority
component option-argument.
.IP "\fR.lt.\fR" 8
The value of the
.IR Priority
attribute of the batch job is less than the value of the
.IR priority
component option-argument.
.IP "\fR.lt.\fR" 8
The value of the
.IR Priority
attribute of the batch job is less than or equal to the value of the
.IR priority
component option-argument.
.IP "\fR.ne.\fR" 8
The value of the
.IR Priority
attribute of the batch job does not equal the value of the
.IR priority
component option-argument.
.RE
.IP "\fB\(miq\ \fIdestination\fR" 10
.br
Restrict selection to the specified batch queue or server, or both.
.RS 10 
.P
The
.IR qselect
utility shall select only batch jobs that are located at the
destination indicated by the value of the
.IR destination
option-argument.
.P
The destination defines a batch queue, a server, or a batch queue at a
server.
.P
The
.IR qselect
utility shall accept an option-argument for the
.BR \(miq
option that conforms to the syntax for a destination. If the
.BR \(miq
option is not presented to the
.IR qselect
utility, the utility shall select batch jobs from all batch queues at
the default batch server.
.P
If the option-argument describes only a batch queue, the
.IR qselect
utility shall select only batch jobs from the batch queue of the
specified name at the default batch server. The means by which
.IR qselect
determines the default server is implementation-defined.
.P
If the option-argument describes only a batch server, the
.IR qselect
utility shall select batch jobs from all the batch queues at that batch
server.
.P
If the option-argument describes both a batch queue and a batch server,
the
.IR qselect
utility shall select only batch jobs from the specified batch queue at
the specified server.
.RE
.IP "\fB\(mir\ \fRy\fR|\fRn\fR" 10
Restrict selection to batch jobs with the specified rerunability
status.
.RS 10 
.P
The
.IR qselect
utility shall select only batch jobs for which the value of the
.IR Rerunable
attribute of the batch job matches the value of the option-argument.
.P
The
.IR qselect
utility shall accept a value for the option-argument that consists of
either the single character
.BR 'y' 
or the single character
.BR 'n' .
The character
.BR 'y' 
represents the value TRUE, and the character
.BR 'n' 
represents the value FALSE.
.RE
.IP "\fB\(mis\ \fIstates\fR" 10
Restrict selection to batch jobs in the specified states.
.RS 10 
.P
The
.IR qselect
utility shall accept an option-argument that consists of any
combination of the characters
.BR 'e' ,
.BR 'q' ,
.BR 'r' ,
.BR 'w' ,
.BR 'h' ,
and
.BR 't' .
.P
Conforming applications shall not repeat any character in the
option-argument. The
.IR qselect
utility shall permit the repetition of characters in the
option-argument, but shall not assign additional meaning to repeated
characters.
.P
The
.IR qselect
utility shall interpret the characters in the
.IR states
option-argument as follows:
.IP "\fRe\fR" 6
Represents the EXITING state.
.IP "\fRq\fR" 6
Represents the QUEUED state.
.IP "\fRr\fR" 6
Represents the RUNNING state.
.IP "\fRt\fR" 6
Represents the TRANSITING state.
.IP "\fRh\fR" 6
Represents the HELD state.
.IP "\fRw\fR" 6
Represents the WAITING state.
.P
For each character in the
.IR states
option-argument, the
.IR qselect
utility shall select batch jobs in the corresponding state.
.RE
.IP "\fB\(miu\ \fIuser_list\fR" 10
Restrict selection to batch jobs owned by the specified user names.
.RS 10 
.P
The
.IR qselect
utility shall select only the batch jobs of those users specified in
the
.IR user_list
option-argument.
.P
The
.IR qselect
utility shall accept a
.IR user_list
option-argument that conforms to the following syntax:
.sp
.RS 4
.nf
\fB
\fIusername\fB[\fR@\fIhost\fB][\fR,,\fIusername\fB[\fR@\fIhost\fB]\fR,, ...\fB]\fR
.fi \fR
.P
.RE
.P
The
.IR qselect
utility shall accept only one user name that is missing a corresponding
host name. The
.IR qselect
utility shall accept only one user name per named host.
.RE
.SH OPERANDS
None.
.SH STDIN
Not used.
.SH "INPUT FILES"
None.
.SH "ENVIRONMENT VARIABLES"
The following environment variables shall affect the execution of
.IR qselect :
.IP "\fILANG\fP" 10
Provide a default value for the internationalization variables that are
unset or null. (See the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 8.2" ", " "Internationalization Variables"
the precedence of internationalization variables used to determine the
values of locale categories.)
.IP "\fILC_ALL\fP" 10
If set to a non-empty string value, override the values of all the
other internationalization variables.
.IP "\fILC_CTYPE\fP" 10
Determine the locale for the interpretation of sequences of bytes of
text data as characters (for example, single-byte as opposed to
multi-byte characters in arguments).
.IP "\fILC_MESSAGES\fP" 10
.br
Determine the locale that should be used to affect the format and
contents of diagnostic messages written to standard error.
.IP "\fILOGNAME\fP" 10
Determine the login name of the user.
.IP "\fITZ\fP" 10
Determine the timezone used to interpret the
.IR date-time
option-argument. If
.IR TZ
is unset or null, an unspecified default timezone shall be used.
.SH "ASYNCHRONOUS EVENTS"
Default.
.SH STDOUT
The
.IR qselect
utility shall write zero or more batch
.IR job_identifier s
to standard output.
.P
The
.IR qselect
utility shall separate the batch
.IR job_identifier s
written to standard output by white space.
.P
The
.IR qselect
utility shall write batch
.IR job_identifier s
in the following format:
.sp
.RS 4
.nf
\fB
\fIsequence_number.server_name\fR@\fIserver\fR
.fi \fR
.P
.RE
.SH STDERR
The standard error shall be used only for diagnostic messages.
.SH "OUTPUT FILES"
None.
.SH "EXTENDED DESCRIPTION"
None.
.SH "EXIT STATUS"
The following exit values shall be returned:
.IP "\00" 6
Successful completion.
.IP &gt;0 6
An error occurred.
.SH "CONSEQUENCES OF ERRORS"
Default.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
None.
.SH EXAMPLES
The following example shows how a user might use the
.IR qselect
utility in conjunction with the
.IR qdel
utility to delete all of his or her jobs in the queued state without
affecting any jobs that are already running:
.sp
.RS 4
.nf
\fB
qdel $(qselect \(mis q)
.fi \fR
.P
.RE
.P
or:
.sp
.RS 4
.nf
\fB
qselect \(mis q || xargs qdel
.fi \fR
.P
.RE
.SH RATIONALE
The
.IR qselect
utility allows users to acquire a list of job identifiers that match
user-specified selection criteria. The list of identifiers returned by
the
.IR qselect
utility conforms to the syntax of the batch job identifier list
processed by a utility such as
.IR qmove ,
.IR qdel ,
and
.IR qrls .
The
.IR qselect
utility is thus a powerful tool for causing another batch system
utility to act upon a set of jobs that match a list of selection
criteria.
.P
The options of the
.IR qselect
utility let the user apply a number of useful filters for selecting
jobs. Each option further restricts the selection of jobs. Many of the
selection options allow the specification of a relational operator. The
FORTRAN-like syntax of the operator\(emthat is,
.BR \(dq.lt.\(dq \(em\c
was chosen rather than the C-like
.BR \(dq&lt;=\(dq 
meta-characters.
.P
The
.BR \(mia
option allows users to restrict the selected jobs to those that have
been submitted (or altered) to wait until a particular time. The time
period is determined by the argument of this option, which includes
both a time and an operator\(emit is thus possible to select jobs
waiting until a specific time, jobs waiting until after a certain time,
or those waiting for a time before the specified time.
.P
The
.BR \(miA
option allows users to restrict the selected jobs to those that have
been submitted (or altered) to charge a particular account.
.P
The
.BR \(mic
option allows users to restrict the selected jobs to those whose
checkpointing interval falls within the specified range.
.P
The
.BR \(mil
option allows users to select those jobs whose resource limits fall
within the range indicated by the value of the option. For example, a
user could select those jobs for which the CPU time limit is greater
than two hours.
.P
The
.BR \(miN
option allows users to select jobs by job name. For instance, all the
parts of a task that have been divided in parallel jobs might be given
the same name, and thus manipulated as a group by means of this
option.
.P
The
.BR \(miq
option allows users to select jobs in a specified queue.
.P
The
.BR \(mir
option allows users to select only those jobs with a specified rerun
criteria. For instance, a user might select only those jobs that can be
rerun for use with the
.IR qrerun
utility.
.P
The
.BR \(mis
option allows users to select only those jobs that are in a certain
state.
.P
The
.BR \(miu
option allows users to select jobs that have been submitted to execute
under a particular account.
.P
The selection criteria provided by the options of the
.IR qselect
utility allow users to select jobs based on all the appropriate
attributes that can be assigned to jobs by the
.IR qsub
utility.
.P
Historically, the
.IR qselect
utility has not been a part of existing practice; it is an improvement
that has been introduced in this volume of POSIX.1\(hy2008.
.SH "FUTURE DIRECTIONS"
The
.IR qselect
utility may be removed in a future version.
.SH "SEE ALSO"
.IR "Chapter 3" ", " "Batch Environment Services",
.IR "\fIqdel\fR\^",
.IR "\fIqrerun\fR\^",
.IR "\fIqrls\fR\^",
.IR "\fIqselect\fR\^",
.IR "\fIqsub\fR\^",
.IR "\fItouch\fR\^"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 6.1" ", " "Portable Character Set",
.IR "Chapter 8" ", " "Environment Variables",
.IR "Section 12.2" ", " "Utility Syntax Guidelines"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
'\" et
.TH QSIG "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
qsig
\(em signal batch jobs
.SH SYNOPSIS
.LP
.nf
qsig \fB[\fR\(mis \fIsignal\fB] \fIjob_identifier\fR...
.fi
.SH DESCRIPTION
To signal a batch job is to send a signal to the session leader of the
batch job. A batch job is signaled by sending a request to the batch
server that manages the batch job. The
.IR qsig
utility is a user-accessible batch client that requests the signaling
of a batch job.
.P
The
.IR qsig
utility shall signal those batch jobs for which a batch
.IR job_identifier
is presented to the utility. The
.IR qsig
utility shall not signal any batch jobs whose batch
.IR job_identifier s
are not presented to the utility.
.P
The
.IR qsig
utility shall signal batch jobs in the order in which the corresponding
batch
.IR job_identifier s
are presented to the utility. If the
.IR qsig
utility fails to process a batch
.IR job_identifier
successfully, the utility shall proceed to process the remaining batch
.IR job_identifier s,
if any.
.P
The
.IR qsig
utility shall signal batch jobs by sending a
.IR "Signal Job Request"
to the batch server that manages the batch job.
.P
For each successfully processed batch
.IR job_identifier ,
the
.IR qsig
utility shall have received a completion reply to each
.IR "Signal Job Request"
sent to a batch server at the time the utility exits.
.SH OPTIONS
The
.IR qsig
utility shall conform to the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 12.2" ", " "Utility Syntax Guidelines".
.P
The following option shall be supported by the implementation:
.IP "\fB\(mis\ \fIsignal\fR" 10
Define the signal to be sent to the batch job.
.RS 10 
.P
The
.IR qsig
utility shall accept a
.IR signal
option-argument that is either a symbolic signal name or an unsigned
integer signal number (see the POSIX.1\(hy1990 standard, Section 3.3.1.1). The
.IR qsig
utility shall accept signal names for which the SIG prefix has been
omitted.
.P
If the
.IR signal
option-argument is a signal name, the
.IR qsig
utility shall send that name.
.P
If the
.IR signal
option-argument is a number, the
.IR qsig
utility shall send the signal value represented by the number.
.P
If the
.BR \(mis
option is not presented to the
.IR qsig
utility, the utility shall send the signal SIGTERM to each signaled
batch job.
.RE
.SH OPERANDS
The
.IR qsig
utility shall accept one or more operands that conform to the syntax
for a batch
.IR job_identifier
(see
.IR "Section 3.3.1" ", " "Batch Job Identifier").
.SH STDIN
Not used.
.SH "INPUT FILES"
None.
.SH "ENVIRONMENT VARIABLES"
The following environment variables shall affect the execution of
.IR qsig :
.IP "\fILANG\fP" 10
Provide a default value for the internationalization variables that are
unset or null. (See the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 8.2" ", " "Internationalization Variables"
the precedence of internationalization variables used to determine the
values of locale categories.)
.IP "\fILC_ALL\fP" 10
If set to a non-empty string value, override the values of all the
other internationalization variables.
.IP "\fILC_CTYPE\fP" 10
Determine the locale for the interpretation of sequences of bytes of
text data as characters (for example, single-byte as opposed to
multi-byte characters in arguments).
.IP "\fILC_MESSAGES\fP" 10
.br
Determine the locale that should be used to affect the format and
contents of diagnostic messages written to standard error.
.IP "\fILOGNAME\fP" 10
Determine the login name of the user.
.SH "ASYNCHRONOUS EVENTS"
Default.
.SH STDOUT
An implementation of the
.IR qsig
utility may write informative messages to standard output.
.SH STDERR
The standard error shall be used only for diagnostic messages.
.SH "OUTPUT FILES"
None.
.SH "EXTENDED DESCRIPTION"
None.
.SH "EXIT STATUS"
The following exit values shall be returned:
.IP "\00" 6
Successful completion.
.IP &gt;0 6
An error occurred.
.SH "CONSEQUENCES OF ERRORS"
In addition to the default behavior, the
.IR qsig
utility shall not be required to write a diagnostic message to standard
error when the error reply received from a batch server indicates that
the batch
.IR job_identifier
does not exist on the server. Whether or not the
.IR qsig
utility waits to output the diagnostic message while attempting to
locate the batch job on other servers is implementation-defined.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
None.
.SH EXAMPLES
None.
.SH RATIONALE
The
.IR qsig
utility allows users to signal batch jobs.
.P
A user may be unable to signal a batch job with the
.IR kill
utility of the operating system for a number of reasons. First, the
process ID of the batch job may be unknown to the user. Second, the
processes of the batch job may be on a remote node. However, by virtue
of communication between batch nodes, the
.IR qsig
utility can arrange for the signaling of a process.
.P
Because a batch job that is not running cannot be signaled, and because
the signal may not terminate the batch job, the
.IR qsig
utility is not a substitute for the
.IR qdel
utility.
.P
The options of the
.IR qsig
utility allow the user to specify the signal that is to be sent to the
batch job.
.P
The
.BR \(mis
option allows users to specify a signal by name or by number, and thus
override the default signal. The POSIX.1\(hy1990 standard defines signals by both name and
number.
.P
The
.IR qsig
utility is a new utility, \fIvis-a-vis\fP existing practice; it has
been defined in this volume of POSIX.1\(hy2008 in response to user-perceived shortcomings in
existing practice.
.SH "FUTURE DIRECTIONS"
The
.IR qsig
utility may be removed in a future version.
.SH "SEE ALSO"
.IR "Chapter 3" ", " "Batch Environment Services",
.IR "\fIkill\fR\^",
.IR "\fIqdel\fR\^"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "Chapter 8" ", " "Environment Variables",
.IR "Section 12.2" ", " "Utility Syntax Guidelines"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
'\" et
.TH READ "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
read
\(em read a line from standard input
.SH SYNOPSIS
.LP
.nf
read \fB[\fR\(mir\fB] \fIvar\fR...
.fi
.SH DESCRIPTION
The
.IR read
utility shall read a single line from standard input.
.P
By default, unless the
.BR \(mir
option is specified,
&lt;backslash&gt;
shall act as an escape character. An unescaped
&lt;backslash&gt;
shall preserve the literal value of the following character, with the
exception of a
&lt;newline&gt;.
If a
&lt;newline&gt;
follows the
&lt;backslash&gt;,
the
.IR read
utility shall interpret this as line continuation. The
&lt;backslash&gt;
and
&lt;newline&gt;
shall be removed before splitting the input into fields. All other
unescaped
&lt;backslash&gt;
characters shall be removed after splitting the input into fields.
.P
If standard input is a terminal device and the invoking shell is
interactive,
.IR read
shall prompt for a continuation line when it reads an input line ending
with a
&lt;backslash&gt;
&lt;newline&gt;,
unless the
.BR \(mir
option is specified.
.P
The terminating
&lt;newline&gt;
(if any) shall be removed from the input and the results shall be split
into fields as in the shell for the results of parameter expansion (see
.IR "Section 2.6.5" ", " "Field Splitting");
the first field shall be assigned to the first variable
.IR var ,
the second field to the second variable
.IR var ,
and so on. If there are fewer fields than there are
.IR var
operands, the remaining
.IR var s
shall be set to empty strings. If there are fewer
.IR var s
than fields, the last
.IR var
shall be set to a value comprising the following elements:
.IP " *" 4
The field that corresponds to the last
.IR var
in the normal assignment sequence described above
.IP " *" 4
The delimiter(s) that follow the field corresponding to the last
.IR var
.IP " *" 4
The remaining fields and their delimiters, with trailing
.IR IFS
white space ignored
.P
The setting of variables specified by the
.IR var
operands shall affect the current shell execution environment; see
.IR "Section 2.12" ", " "Shell Execution Environment".
If it is called in a subshell or separate utility execution
environment, such as one of the following:
.sp
.RS 4
.nf
\fB
(read foo)
nohup read ...
find . \(miexec read ... \e;
.fi \fR
.P
.RE
.P
it shall not affect the shell variables in the caller's environment.
.SH OPTIONS
The
.IR read
utility shall conform to the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 12.2" ", " "Utility Syntax Guidelines".
.P
The following option is supported:
.IP "\fB\(mir\fP" 10
Do not treat a
&lt;backslash&gt;
character in any special way. Consider each
&lt;backslash&gt;
to be part of the input line.
.SH OPERANDS
The following operand shall be supported:
.IP "\fIvar\fR" 10
The name of an existing or nonexisting shell variable.
.SH STDIN
The standard input shall be a text file.
.SH "INPUT FILES"
None.
.SH "ENVIRONMENT VARIABLES"
The following environment variables shall affect the execution of
.IR read :
.IP "\fIIFS\fP" 10
Determine the internal field separators used to delimit fields; see
.IR "Section 2.5.3" ", " "Shell Variables".
.IP "\fILANG\fP" 10
Provide a default value for the internationalization variables that are
unset or null. (See the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 8.2" ", " "Internationalization Variables"
for the precedence of internationalization variables used to determine
the values of locale categories.)
.IP "\fILC_ALL\fP" 10
If set to a non-empty string value, override the values of all the
other internationalization variables.
.IP "\fILC_CTYPE\fP" 10
Determine the locale for the interpretation of sequences of bytes of
text data as characters (for example, single-byte as opposed to
multi-byte characters in arguments).
.IP "\fILC_MESSAGES\fP" 10
.br
Determine the locale that should be used to affect the format and
contents of diagnostic messages written to standard error.
.IP "\fINLSPATH\fP" 10
Determine the location of message catalogs for the processing of
.IR LC_MESSAGES .
.IP "\fIPS2\fP" 10
Provide the prompt string that an interactive shell shall write to
standard error when a line ending with a
&lt;backslash&gt;
&lt;newline&gt;
is read and the
.BR \(mir
option was not specified.
.SH "ASYNCHRONOUS EVENTS"
Default.
.SH STDOUT
Not used.
.SH STDERR
The standard error shall be used for diagnostic messages and
prompts for continued input.
.SH "OUTPUT FILES"
None.
.SH "EXTENDED DESCRIPTION"
None.
.SH "EXIT STATUS"
The following exit values shall be returned:
.IP "\00" 6
Successful completion.
.IP &gt;0 6
End-of-file was detected or an error occurred.
.SH "CONSEQUENCES OF ERRORS"
Default.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
The
.BR \(mir
option is included to enable
.IR read
to subsume the purpose of the
.IR line
utility, which is not included in POSIX.1\(hy2008.
.SH EXAMPLES
The following command:
.sp
.RS 4
.nf
\fB
while read \(mir xx yy
do
printf "%s %s\en$yy$xx"
done &lt; \fIinput_file\fR
.fi \fR
.P
.RE
.P
prints a file with the first field of each line moved to the end of the
line.
.SH RATIONALE
The
.IR read
utility historically has been a shell built-in. It was separated off
into its own utility to take advantage of the richer description of
functionality introduced by this volume of POSIX.1\(hy2008.
.P
Since
.IR read
affects the current shell execution environment,
it is generally provided as a shell regular built-in. If it is called
in a subshell or separate utility execution environment, such as one of
the following:
.sp
.RS 4
.nf
\fB
(read foo)
nohup read ...
find . \(miexec read ... \e;
.fi \fR
.P
.RE
.P
it does not affect the shell variables in the environment of the
caller.
.P
Although the standard input is required to be a text file, and
therefore will always end with a
&lt;newline&gt;
(unless it is an empty file), the processing of continuation lines
when the
.BR \(mir
option is not used can result in the input not ending with a
&lt;newline&gt;.
This occurs if the last line of the input file ends with a
&lt;backslash&gt;
&lt;newline&gt;.
It is for this reason that ``if any'' is used in ``The terminating
&lt;newline&gt;
(if any) shall be removed from the input'' in the description.
It is not a relaxation of the requirement for standard input to
be a text file.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "Chapter 2" ", " "Shell Command Language"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "Chapter 8" ", " "Environment Variables",
.IR "Section 12.2" ", " "Utility Syntax Guidelines"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
'\" et
.TH READONLY "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
readonly
\(em set the readonly attribute for variables
.SH SYNOPSIS
.LP
.nf
readonly name\fB[\fR=\fIword\fB]\fR...
.P
readonly\fR \(mip
.fi
.SH DESCRIPTION
The variables whose
.IR name s
are specified shall be given the
.IR readonly
attribute. The values of variables with the
.IR readonly
attribute cannot be changed by subsequent assignment, nor can those
variables be unset by the
.IR unset
utility. If the name of a variable is followed by =\c
.IR word ,
then the value of that variable shall be set to
.IR word .
.P
The
.IR readonly
special built-in shall support the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 12.2" ", " "Utility Syntax Guidelines".
.P
When
.BR \(mip
is specified,
.IR readonly
writes to the standard output the names and values of all read-only
variables, in the following format:
.sp
.RS 4
.nf
\fB
"readonly %s=%s\en", &lt;\fIname\fR&gt;, &lt;\fIvalue\fR&gt;
.fi \fR
.P
.RE
.P
if
.IR name
is set, and
.sp
.RS 4
.nf
\fB
"readonly %s\en", &lt;\fIname\fR&gt;
.fi \fR
.P
.RE
.P
if
.IR name
is unset.
.P
The shell shall format the output, including the proper use of quoting,
so that it is suitable for reinput to the shell as commands that
achieve the same value and
.IR readonly
attribute-setting results in a shell execution environment in which:
.IP " 1." 4
Variables with values at the time they were output do not have the
.IR readonly
attribute set.
.IP " 2." 4
Variables that were unset at the time they were output do not have a
value at the time at which the saved output is reinput to the shell.
.P
When no arguments are given, the results are unspecified.
.SH OPTIONS
See the DESCRIPTION.
.SH OPERANDS
See the DESCRIPTION.
.SH STDIN
Not used.
.SH "INPUT FILES"
None.
.SH "ENVIRONMENT VARIABLES"
None.
.SH "ASYNCHRONOUS EVENTS"
Default.
.SH STDOUT
See the DESCRIPTION.
.SH STDERR
The standard error shall be used only for diagnostic messages.
.SH "OUTPUT FILES"
None.
.SH "EXTENDED DESCRIPTION"
None.
.SH "EXIT STATUS"
Zero.
.SH "CONSEQUENCES OF ERRORS"
Default.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
None.
.SH EXAMPLES
.LP
.nf
readonly HOME PWD
.fi
.SH "RATIONALE"
Some historical shells preserve the
.IR readonly
attribute across separate invocations. This volume of POSIX.1\(hy2008 allows this behavior,
but does not require it.
.P
The
.BR \(mip
option allows portable access to the values that can be saved and then
later restored using, for example, a
.IR dot
script. Also see the RATIONALE for
.IR "\fIexport\fR\^"
for a description of the no-argument and
.BR \(mip
output cases and a related example.
.P
Read-only functions were considered, but they were omitted as not being
historical practice or particularly useful. Furthermore, functions must
not be read-only across invocations to preclude ``spoofing''
(spoofing is the term for the practice of creating a program that acts
like a well-known utility with the intent of subverting the real intent
of the user) of administrative or security-relevant (or
security-conscious) shell scripts.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "Section 2.14" ", " "Special Built-In Utilities"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 12.2" ", " "Utility Syntax Guidelines"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
.\" Copyright (c) 1983, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)renice.8	8.1 (Berkeley) 6/9/93
.\"
.TH RENICE "1" "July 2014" "util-linux" "User Commands"
.SH NAME
renice \- alter priority of running processes
.SH SYNOPSIS
.B renice
.RB [ \-n ]
.I priority
.RB [ \-g | \-p | \-u ]
.IR identifier ...
.SH DESCRIPTION
.B renice
alters the scheduling priority of one or more running processes.  The
first argument is the \fIpriority\fR value to be used.
The other arguments are interpreted as process IDs (by default),
process group IDs, user IDs, or user names.
.BR renice 'ing
a process group causes all processes in the process group to have their
scheduling priority altered.
.BR renice 'ing
a user causes all processes owned by the user to have their scheduling
priority altered.
.PP
.SH OPTIONS
.TP
.BR \-n , " \-\-priority " \fIpriority\fR
Specify the scheduling
.I priority
to be used for the process, process group, or user.  Use of the option
.BR \-n " or " \-\-priority
is optional, but when used it must be the first argument.
.TP
.BR \-g , " \-\-pgrp
Interpret the succeeding arguments as process group IDs.
.TP
.BR \-p , " \-\-pid
Interpret the succeeding arguments as process IDs
(the default).
.TP
.BR \-u , " \-\-user
Interpret the succeeding arguments as usernames or UIDs.
.TP
.BR \-V , " \-\-version"
Display version information and exit.
.TP
.BR \-h , " \-\-help"
Display help text and exit.
.SH EXAMPLES
The following command would change the priority of the processes with
PIDs 987 and 32, plus all processes owned by the users daemon and root:
.TP
.B "       renice" +1 987 -u daemon root -p 32
.SH NOTES
Users other than the superuser may only alter the priority of processes they
own.  Furthermore, an unprivileged user can only
.I increase
the ``nice value'' (i.e., choose a lower priority)
and such changes are irreversible unless (since Linux 2.6.12)
the user has a suitable ``nice'' resource limit (see
.BR ulimit (1)
and
.BR getrlimit (2)).

The superuser may alter the priority of any process and set the priority to any
value in the range \-20 to 19.
Useful priorities are: 19 (the affected processes will run only when nothing
else in the system wants to), 0 (the ``base'' scheduling priority), anything
negative (to make things go very fast).
.SH FILES
.TP
.I /etc/passwd
to map user names to user IDs
.SH SEE ALSO
.BR nice (1),
.BR getpriority (2),
.BR setpriority (2),
.BR credentials (7),
.BR sched (7)
.SH HISTORY
The
.B renice
command appeared in 4.0BSD.
.SH AVAILABILITY
The renice command is part of the util-linux package and is available from
.UR ftp://\:ftp.kernel.org\:/pub\:/linux\:/utils\:/util-linux/
Linux Kernel Archive
.UE .
'\" et
.TH RETURN "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
return
\(em return from a function or dot script
.SH SYNOPSIS
.LP
.nf
return \fB[\fIn\fB]\fR
.fi
.SH DESCRIPTION
The
.IR return
utility shall cause the shell to stop executing the current function or
.IR dot
script. If the shell is not currently executing a function or
.IR dot
script, the results are unspecified.
.SH OPTIONS
None.
.SH OPERANDS
See the DESCRIPTION.
.SH STDIN
Not used.
.SH "INPUT FILES"
None.
.SH "ENVIRONMENT VARIABLES"
None.
.SH "ASYNCHRONOUS EVENTS"
Default.
.SH STDOUT
Not used.
.SH STDERR
The standard error shall be used only for diagnostic messages.
.SH "OUTPUT FILES"
None.
.SH "EXTENDED DESCRIPTION"
None.
.SH "EXIT STATUS"
The value of the special parameter
.BR '?' 
shall be set to
.IR n ,
an unsigned decimal integer, or to the exit status of the last command
executed if
.IR n
is not specified. If the value of
.IR n
is greater than 255, the results are undefined. When
.IR return
is executed in a
.IR trap
action, the last command is considered to be the command that
executed immediately preceding the
.IR trap
action.
.SH "CONSEQUENCES OF ERRORS"
Default.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
None.
.SH "EXAMPLES"
None.
.SH "RATIONALE"
The behavior of
.IR return
when not in a function or
.IR dot
script differs between the System V shell and the KornShell. In the
System V shell this is an error, whereas in the KornShell, the effect
is the same as
.IR exit .
.P
The results of returning a number greater than 255 are undefined
because of differing practices in the various historical
implementations. Some shells AND out all but the low-order 8 bits;
others allow larger values, but not of unlimited size.
.P
See the discussion of appropriate exit status values under
.IR "\fIexit\fR\^".
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "Section 2.9.5" ", " "Function Definition Command",
.IR "Section 2.14" ", " "Special Built-In Utilities",
.IR "\fIdot\fR\^"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.
.TH RM "1" "March 2017" "GNU coreutils 8.27" "User Commands"
.SH NAME
rm \- remove files or directories
.SH SYNOPSIS
.B rm
[\fI\,OPTION\/\fR]... [\fI\,FILE\/\fR]...
.SH DESCRIPTION
This manual page
documents the GNU version of
.BR rm .
.B rm
removes each specified file.  By default, it does not remove
directories.
.P
If the \fI\-I\fR or \fI\-\-interactive\=once\fR option is given,
and there are more than three files or the \fI\-r\fR, \fI\-R\fR,
or \fI\-\-recursive\fR are given, then
.B rm
prompts the user for whether to proceed with the entire operation.  If
the response is not affirmative, the entire command is aborted.
.P
Otherwise, if a file is unwritable, standard input is a terminal, and
the \fI\-f\fR or \fI\-\-force\fR option is not given, or the
\fI\-i\fR or \fI\-\-interactive\=always\fR option is given,
.B rm
prompts the user for whether to remove the file.  If the response is
not affirmative, the file is skipped.
.SH OPTIONS
.PP
Remove (unlink) the FILE(s).
.TP
\fB\-f\fR, \fB\-\-force\fR
ignore nonexistent files and arguments, never prompt
.TP
\fB\-i\fR
prompt before every removal
.TP
\fB\-I\fR
prompt once before removing more than three files, or
when removing recursively; less intrusive than \fB\-i\fR,
while still giving protection against most mistakes
.TP
\fB\-\-interactive\fR[=\fI\,WHEN\/\fR]
prompt according to WHEN: never, once (\fB\-I\fR), or
always (\fB\-i\fR); without WHEN, prompt always
.TP
\fB\-\-one\-file\-system\fR
when removing a hierarchy recursively, skip any
directory that is on a file system different from
that of the corresponding command line argument
.TP
\fB\-\-no\-preserve\-root\fR
do not treat '/' specially
.TP
\fB\-\-preserve\-root\fR
do not remove '/' (default)
.TP
\fB\-r\fR, \fB\-R\fR, \fB\-\-recursive\fR
remove directories and their contents recursively
.TP
\fB\-d\fR, \fB\-\-dir\fR
remove empty directories
.TP
\fB\-v\fR, \fB\-\-verbose\fR
explain what is being done
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-\-version\fR
output version information and exit
.PP
By default, rm does not remove directories.  Use the \fB\-\-recursive\fR (\fB\-r\fR or \fB\-R\fR)
option to remove each listed directory, too, along with all of its contents.
.PP
To remove a file whose name starts with a '\-', for example '\-foo',
use one of these commands:
.IP
rm \fB\-\-\fR \fB\-foo\fR
.IP
rm ./\-foo
.PP
Note that if you use rm to remove a file, it might be possible to recover
some of its contents, given sufficient expertise and/or time.  For greater
assurance that the contents are truly unrecoverable, consider using shred.
.SH AUTHOR
Written by Paul Rubin, David MacKenzie, Richard M. Stallman,
and Jim Meyering.
.SH "REPORTING BUGS"
GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt;
.br
Report rm translation bugs to &lt;http://translationproject.org/team/&gt;
.SH COPYRIGHT
Copyright \(co 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
unlink(1), unlink(2), chattr(1), shred(1)
.PP
.br
Full documentation at: &lt;http://www.gnu.org/software/coreutils/rm&gt;
.br
or available locally via: info \(aq(coreutils) rm invocation\(aq
'\" et
.TH RMDEL "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
rmdel
\(em remove a delta from an SCCS file (\fBDEVELOPMENT\fP)
.SH SYNOPSIS
.LP
.nf
rmdel \(mir \fISID file\fR...
.fi
.SH DESCRIPTION
The
.IR rmdel
utility shall remove the delta specified by the SID from each named
SCCS file. The delta to be removed shall be the most recent delta in
its branch in the delta chain of each named SCCS file. In addition, the
application shall ensure that the SID specified is not that of a
version being edited for the purpose of making a delta; that is, if a
.IR p-file
(see
.IR "\fIget\fR\^")
exists for the named SCCS file, the SID specified shall not appear in
any entry of the
.IR p-file .
.P
Removal of a delta shall be restricted to:
.IP " 1." 4
The user who made the delta
.IP " 2." 4
The owner of the SCCS file
.IP " 3." 4
The owner of the directory containing the SCCS file
.SH OPTIONS
The
.IR rmdel
utility shall conform to the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 12.2" ", " "Utility Syntax Guidelines".
.P
The following option shall be supported:
.IP "\fB\(mir\ \fISID\fR" 10
Specify the SCCS identification string (\c
.IR SID )
of the delta to be deleted.
.SH OPERANDS
The following operand shall be supported:
.IP "\fIfile\fR" 10
A pathname of an existing SCCS file or a directory. If
.IR file
is a directory, the
.IR rmdel
utility shall behave as though each file in the directory were
specified as a named file, except that non-SCCS files (last component
of the pathname does not begin with
.BR s. )
and unreadable files shall be silently ignored.
.RS 10 
.P
If exactly one
.IR file
operand appears, and it is
.BR '\(mi' ,
the standard input shall be read; each line of the standard input is
taken to be the name of an SCCS file to be processed. Non-SCCS files
and unreadable files shall be silently ignored.
.RE
.SH STDIN
The standard input shall be a text file used only when the
.IR file
operand is specified as
.BR '\(mi' .
Each line of the text file shall be interpreted as an SCCS pathname.
.SH "INPUT FILES"
The SCCS files shall be files of unspecified format.
.SH "ENVIRONMENT VARIABLES"
The following environment variables shall affect the execution of
.IR rmdel :
.IP "\fILANG\fP" 10
Provide a default value for the internationalization variables that are
unset or null. (See the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 8.2" ", " "Internationalization Variables"
for the precedence of internationalization variables used to determine
the values of locale categories.)
.IP "\fILC_ALL\fP" 10
If set to a non-empty string value, override the values of all the
other internationalization variables.
.IP "\fILC_CTYPE\fP" 10
Determine the locale for the interpretation of sequences of bytes of
text data as characters (for example, single-byte as opposed to
multi-byte characters in arguments and input files).
.IP "\fILC_MESSAGES\fP" 10
.br
Determine the locale that should be used to affect the format and
contents of diagnostic messages written to standard error.
.IP "\fINLSPATH\fP" 10
Determine the location of message catalogs for the processing of
.IR LC_MESSAGES .
.SH "ASYNCHRONOUS EVENTS"
Default.
.SH STDOUT
Not used.
.SH STDERR
The standard error shall be used only for diagnostic messages.
.SH "OUTPUT FILES"
The SCCS files shall be files of unspecified format. During processing
of a
.IR file ,
a temporary
.IR x-file ,
as described in
.IR "\fIadmin\fR\^",
may be created and deleted; a locking
.IR z-file ,
as described in
.IR "\fIget\fR\^",
may be created and deleted.
.SH "EXTENDED DESCRIPTION"
None.
.SH "EXIT STATUS"
The following exit values shall be returned:
.IP "\00" 6
Successful completion.
.IP &gt;0 6
An error occurred.
.SH "CONSEQUENCES OF ERRORS"
Default.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
None.
.SH EXAMPLES
None.
.SH RATIONALE
None.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "\fIadmin\fR\^",
.IR "\fIdelta\fR\^",
.IR "\fIget\fR\^",
.IR "\fIprs\fR\^"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "Chapter 8" ", " "Environment Variables",
.IR "Section 12.2" ", " "Utility Syntax Guidelines"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.
.TH RMDIR "1" "March 2017" "GNU coreutils 8.27" "User Commands"
.SH NAME
rmdir \- remove empty directories
.SH SYNOPSIS
.B rmdir
[\fI\,OPTION\/\fR]... \fI\,DIRECTORY\/\fR...
.SH DESCRIPTION
.\" Add any additional description here
.PP
Remove the DIRECTORY(ies), if they are empty.
.HP
\fB\-\-ignore\-fail\-on\-non\-empty\fR
.IP
ignore each failure that is solely because a directory
.IP
is non\-empty
.TP
\fB\-p\fR, \fB\-\-parents\fR
remove DIRECTORY and its ancestors; e.g., 'rmdir \fB\-p\fR a/b/c' is
similar to 'rmdir a/b/c a/b a'
.TP
\fB\-v\fR, \fB\-\-verbose\fR
output a diagnostic for every directory processed
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-\-version\fR
output version information and exit
.SH AUTHOR
Written by David MacKenzie.
.SH "REPORTING BUGS"
GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt;
.br
Report rmdir translation bugs to &lt;http://translationproject.org/team/&gt;
.SH COPYRIGHT
Copyright \(co 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
rmdir(2)
.PP
.br
Full documentation at: &lt;http://www.gnu.org/software/coreutils/rmdir&gt;
.br
or available locally via: info \(aq(coreutils) rmdir invocation\(aq
'\" et
.TH SACT "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
sact
\(em print current SCCS file-editing activity (\fBDEVELOPMENT\fP)
.SH SYNOPSIS
.LP
.nf
sact \fIfile\fR...
.fi
.SH DESCRIPTION
The
.IR sact
utility shall inform the user of any impending deltas to a named SCCS
file by writing a list to standard output. This situation occurs when
.IR get
.BR \(mie
has been executed previously without a subsequent execution of
.IR delta ,
.IR unget ,
or
.IR sccs
.BR unedit .
.SH OPTIONS
None.
.SH OPERANDS
The following operand shall be supported:
.IP "\fIfile\fR" 10
A pathname of an existing SCCS file or a directory. If
.IR file
is a directory, the
.IR sact
utility shall behave as though each file in the directory were
specified as a named file, except that non-SCCS files (last component
of the pathname does not begin with
.BR s. )
and unreadable files shall be silently ignored.
.RS 10 
.P
If exactly one
.IR file
operand appears, and it is
.BR '\(mi' ,
the standard input shall be read; each line of the standard input shall
be taken to be the name of an SCCS file to be processed. Non-SCCS files
and unreadable files shall be silently ignored.
.RE
.SH STDIN
The standard input shall be a text file used only when the
.IR file
operand is specified as
.BR '\(mi' .
Each line of the text file shall be interpreted as an SCCS pathname.
.SH "INPUT FILES"
Any SCCS files interrogated are files of an unspecified format.
.SH "ENVIRONMENT VARIABLES"
The following environment variables shall affect the execution of
.IR sact :
.IP "\fILANG\fP" 10
Provide a default value for the internationalization variables that are
unset or null. (See the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 8.2" ", " "Internationalization Variables"
for the precedence of internationalization variables used to determine
the values of locale categories.)
.IP "\fILC_ALL\fP" 10
If set to a non-empty string value, override the values of all the
other internationalization variables.
.IP "\fILC_CTYPE\fP" 10
Determine the locale for the interpretation of sequences of bytes of
text data as characters (for example, single-byte as opposed to
multi-byte characters in arguments and input files).
.IP "\fILC_MESSAGES\fP" 10
.br
Determine the locale that should be used to affect the format and
contents of diagnostic messages written to standard error.
.IP "\fINLSPATH\fP" 10
Determine the location of message catalogs for the processing of
.IR LC_MESSAGES .
.SH "ASYNCHRONOUS EVENTS"
Default.
.SH STDOUT
The output for each named file shall consist of a line in the following
format:
.sp
.RS 4
.nf
\fB
"%s %s %s %s %s\en", &lt;\fISID\fR&gt;, &lt;\fInew SID\fR&gt;, &lt;\fIlogin\fR&gt;, &lt;\fIdate\fR&gt;, &lt;\fItime\fR&gt;
.fi \fR
.P
.RE
.IP "&lt;\fISID\fR&gt;" 10
Specifies the SID of a delta that currently exists in the SCCS file to
which changes are made to make the new delta.
.IP "&lt;\fInew\ SID\fR&gt;" 10
Specifies the SID for the new delta to be created.
.IP "&lt;\fIlogin\fR&gt;" 10
Contains the login name of the user who makes the delta (that is, who
executed a
.IR get
for editing).
.IP "&lt;\fIdate\fR&gt;" 10
Contains the date that
.IR get
.BR \(mie
was executed, in the format used by the
.IR prs
.BR :D:
data keyword.
.IP "&lt;\fItime\fR&gt;" 10
Contains the time that
.IR get
.BR \(mie
was executed, in the format used by the
.IR prs
.BR :T:
data keyword.
.P
If there is more than one named file or if a directory or standard
input is named, each pathname shall be written before each of the
preceding lines:
.sp
.RS 4
.nf
\fB
"\en%s:\en", &lt;\fIpathname\fR&gt;
.fi \fR
.P
.RE
.SH STDERR
The standard error shall be used only for optional informative
messages concerning SCCS files with no impending deltas, and for
diagnostic messages.
.SH "OUTPUT FILES"
None.
.SH "EXTENDED DESCRIPTION"
None.
.SH "EXIT STATUS"
The following exit values shall be returned:
.IP "\00" 6
Successful completion.
.IP &gt;0 6
An error occurred.
.SH "CONSEQUENCES OF ERRORS"
Default.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
None.
.SH EXAMPLES
None.
.SH RATIONALE
None.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "\fIdelta\fR\^",
.IR "\fIget\fR\^",
.IR "\fIsccs\fR\^",
.IR "\fIunget\fR\^"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "Chapter 8" ", " "Environment Variables"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
'\" et
.TH SCCS "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
sccs
\(em front end for the SCCS subsystem (\fBDEVELOPMENT\fP)
.SH SYNOPSIS
.LP
.nf
sccs \fB[\fR\(mir\fB] [\fR\(mid \fIpath\fB] [\fR\(mip \fIpath\fB] \fIcommand \fB[\fIoptions\fR...\fB] [\fIoperands\fR...\fB]\fR
.fi
.SH DESCRIPTION
The
.IR sccs
utility is a front end to the SCCS programs. It also includes the
capability to run set-user-id to another user to provide additional
protection.
.P
The
.IR sccs
utility shall invoke the specified
.IR command
with the specified
.IR options
and
.IR operands .
By default, each of the
.IR operands
shall be modified by prefixing it with the string
.BR \(dqSCCS/s.\(dq .
.P
The
.IR command
can be the name of one of the SCCS utilities in this volume of POSIX.1\(hy2008 (\c
.IR admin ,
.IR delta ,
.IR get ,
.IR prs ,
.IR rmdel ,
.IR sact ,
.IR unget ,
.IR val ,
or
.IR what )
or one of the pseudo-utilities listed in the EXTENDED DESCRIPTION
section.
.SH OPTIONS
The
.IR sccs
utility shall conform to the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 12.2" ", " "Utility Syntax Guidelines",
except that
.IR options
operands are actually options to be passed to the utility named by
.IR command .
When the portion of the command:
.sp
.RS 4
.nf
\fB
\fIcommand \fB[\fIoptions\fR ... \fB] [\fIoperands\fR ... \fB]\fR
.fi \fR
.P
.RE
.P
is considered, all of the pseudo-utilities used as
.IR command
shall support the Utility Syntax Guidelines. Any of the other SCCS
utilities that can be invoked in this manner support the Guidelines to
the extent indicated by their individual OPTIONS sections.
.P
The following options shall be supported preceding the
.IR command
operand:
.IP "\fB\(mid\ \fIpath\fR" 10
A pathname of a directory to be used as a root directory for the SCCS
files. The default shall be the current directory. The
.BR \(mid
option shall take precedence over the
.IR PROJECTDIR
variable. See
.BR \(mip .
.IP "\fB\(mip\ \fIpath\fR" 10
A pathname of a directory in which the SCCS files are located. The
default shall be the
.BR SCCS
directory.
.RS 10 
.P
The
.BR \(mip
option differs from the
.BR \(mid
option in that the
.BR \(mid
option-argument shall be prefixed to the entire pathname and the
.BR \(mip
option-argument shall be inserted before the final component of the
pathname. For example:
.sp
.RS 4
.nf
\fB
sccs \(mid /x \(mip y get a/b
.fi \fR
.P
.RE
.P
converts to:
.sp
.RS 4
.nf
\fB
get /x/a/y/s.b
.fi \fR
.P
.RE
.P
This allows the creation of aliases such as:
.sp
.RS 4
.nf
\fB
alias syssccs="sccs \(mid /usr/src"
.fi \fR
.P
.RE
.P
which is used as:
.sp
.RS 4
.nf
\fB
syssccs get cmd/who.c
.fi \fR
.P
.RE
.RE
.IP "\fB\(mir\fP" 10
Invoke
.IR command
with the real user ID of the process, not any effective user ID that
the
.IR sccs
utility is set to. Certain commands (\c
.IR admin ,
.BR check ,
.BR clean ,
.BR diffs ,
.BR info ,
.IR rmdel ,
and
.BR tell )
cannot be run set-user-ID by all users, since this would allow anyone
to change the authorizations. These commands are always run as the
real user.
.SH OPERANDS
The following operands shall be supported:
.IP "\fIcommand\fR" 10
An SCCS utility name or the name of one of the pseudo-utilities listed
in the EXTENDED DESCRIPTION section.
.IP "\fIoptions\fR" 10
An option or option-argument to be passed to
.IR command .
.IP "\fIoperands\fR" 10
An operand to be passed to
.IR command .
.SH STDIN
See the utility description for the specified
.IR command .
.SH "INPUT FILES"
See the utility description for the specified
.IR command .
.SH "ENVIRONMENT VARIABLES"
The following environment variables shall affect the execution of
.IR sccs :
.IP "\fILANG\fP" 10
Provide a default value for the internationalization variables that are
unset or null. (See the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 8.2" ", " "Internationalization Variables"
for the precedence of internationalization variables used to determine
the values of locale categories.)
.IP "\fILC_ALL\fP" 10
If set to a non-empty string value, override the values of all the
other internationalization variables.
.IP "\fILC_CTYPE\fP" 10
Determine the locale for the interpretation of sequences of bytes of
text data as characters (for example, single-byte as opposed to
multi-byte characters in arguments and input files).
.IP "\fILC_MESSAGES\fP" 10
.br
Determine the locale that should be used to affect the format and
contents of diagnostic messages written to standard error.
.IP "\fINLSPATH\fP" 10
Determine the location of message catalogs for the processing of
.IR LC_MESSAGES .
.IP "\fIPROJECTDIR\fP" 10
.br
Provide a default value for the
.BR \(mid
.IR path
option. If the value of
.IR PROJECTDIR
begins with a
&lt;slash&gt;,
it shall be considered an absolute pathname; otherwise, the value of
.IR PROJECTDIR
is treated as a user name and that user's initial working directory
shall be examined for a subdirectory
.BR src
or
.BR source .
If such a directory is found, it shall be used. Otherwise, the value
shall be used as a relative pathname.
.P
Additional environment variable effects may be found in the utility
description for the specified
.IR command .
.SH "ASYNCHRONOUS EVENTS"
Default.
.SH STDOUT
See the utility description for the specified
.IR command .
.SH STDERR
See the utility description for the specified
.IR command .
.SH "OUTPUT FILES"
See the utility description for the specified
.IR command .
.SH "EXTENDED DESCRIPTION"
The following pseudo-utilities shall be supported as
.IR command
operands. All options referred to in the following list are values
given in the
.IR options
operands following
.IR command .
.IP "\fBcheck\fR" 8
Equivalent to
.BR info ,
except that nothing shall be printed if nothing is being edited, and a
non-zero exit status shall be returned if anything is being edited. The
intent is to have this included in an ``install'' entry in a makefile
to ensure that everything is included into the SCCS file before a
version is installed.
.IP "\fBclean\fR" 8
Remove everything from the current directory that can be recreated from
SCCS files, but do not remove any files being edited. If the
.BR \(mib
option is given, branches shall be ignored in the determination of
whether they are being edited; this is dangerous if branches are kept
in the same directory.
.IP "\fBcreate\fR" 8
Create an SCCS file, taking the initial contents from the file of the
same name. Any options to
.IR admin
are accepted. If the creation is successful, the original files shall
be renamed by prefixing the basenames with a comma. These renamed files
should be removed after it has been verified that the SCCS files have
been created successfully.
.IP "\fBdelget\fR" 8
Perform a
.IR delta
on the named files and then
.IR get
new versions. The new versions shall have ID keywords expanded and
shall not be editable. Any
.BR \(mim ,
.BR \(mip ,
.BR \(mir ,
.BR \(mis ,
and
.BR \(miy
options shall be passed to
.IR delta ,
and any
.BR \(mib ,
.BR \(mic ,
.BR \(mie ,
.BR \(mii ,
.BR \(mik ,
.BR \(mil ,
.BR \(mis ,
and
.BR \(mix
options shall be passed to
.IR get .
.IP "\fBdeledit\fR" 8
Equivalent to
.BR delget ,
except that the
.IR get
phase shall include the
.BR \(mie
option. This option is useful for making a checkpoint of the current
editing phase. The same options shall be passed to
.IR delta
as described above, and all the options listed for
.IR get
above except
.BR \(mie
shall be passed to
.BR edit .
.IP "\fBdiffs\fR" 8
Write a difference listing between the current version of the files
checked out for editing and the versions in SCCS format. Any
.BR \(mir ,
.BR \(mic ,
.BR \(mii ,
.BR \(mix ,
and
.BR \(mit
options shall be passed to
.IR get ;
any
.BR \(mil ,
.BR \(mis ,
.BR \(mie ,
.BR \(mif ,
.BR \(mih ,
and
.BR \(mib
options shall be passed to
.IR diff .
A
.BR \(miC
option shall be passed to
.IR diff
as
.BR \(mic .
.IP "\fBedit\fR" 8
Equivalent to
.IR get
.BR \(mie .
.IP "\fBfix\fR" 8
Remove the named delta, but leave a copy of the delta with the changes
that were in it. It is useful for fixing small compiler bugs, and so
on. The application shall ensure that it is followed by a
.BR \(mir
.IR SID
option. Since
.BR fix
does not leave audit trails, it should be used carefully.
.IP "\fBinfo\fR" 8
Write a listing of all files being edited. If the
.BR \(mib
option is given, branches (that is, SIDs with two or fewer components)
shall be ignored. If a
.BR \(miu
.IR user
option is given, then only files being edited by the named user shall
be listed. A
.BR \(miU
option shall be equivalent to
.BR \(miu &lt;\c
.IR "current\ user" &gt;.
.IP "\fBprint\fR" 8
Write out verbose information about the named files, equivalent to
.IR sccs
.IR prs .
.IP "\fBtell\fR" 8
Write a
&lt;newline&gt;-separated
list of the files being edited to standard output. Takes the
.BR \(mib ,
.BR \(miu ,
and
.BR \(miU
options like
.BR info
and
.BR check .
.IP "\fBunedit\fR" 8
This is the opposite of an
.BR edit
or a
.IR get
.BR \(mie .
It should be used with caution, since any changes made since the
.IR get
are lost.
.br
.SH "EXIT STATUS"
The following exit values shall be returned:
.IP "\00" 6
Successful completion.
.IP &gt;0 6
An error occurred.
.SH "CONSEQUENCES OF ERRORS"
Default.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
Many of the SCCS utilities take directory names as operands as well as
specific filenames. The pseudo-utilities supported by
.IR sccs
are not described as having this capability, but are not prohibited
from doing so.
.SH EXAMPLES
.IP " 1." 4
To get a file for editing, edit it and produce a new delta:
.RS 4 
.sp
.RS 4
.nf
\fB
sccs get \(mie file.c
ex file.c
sccs delta file.c
.fi \fR
.P
.RE
.RE
.IP " 2." 4
To get a file from another directory:
.RS 4 
.sp
.RS 4
.nf
\fB
sccs \(mip /usr/src/sccs/s. get cc.c
.fi \fR
.P
.RE
.P
or:
.sp
.RS 4
.nf
\fB
sccs get /usr/src/sccs/s.cc.c
.fi \fR
.P
.RE
.RE
.IP " 3." 4
To make a delta of a large number of files in the current directory:
.RS 4 
.sp
.RS 4
.nf
\fB
sccs delta *.c
.fi \fR
.P
.RE
.RE
.IP " 4." 4
To get a list of files being edited that are not on branches:
.RS 4 
.sp
.RS 4
.nf
\fB
sccs info \(mib
.fi \fR
.P
.RE
.RE
.IP " 5." 4
To delta everything being edited by the current user:
.RS 4 
.sp
.RS 4
.nf
\fB
sccs delta $(sccs tell \(miU)
.fi \fR
.P
.RE
.RE
.IP " 6." 4
In a makefile, to get source files from an SCCS file if it does not
already exist:
.RS 4 
.sp
.RS 4
.nf
\fB
SRCS = &lt;\fIlist of source files\fP&gt;
$(SRCS):
sccs get $(REL) $@
.fi \fR
.P
.RE
.RE
.SH RATIONALE
.IR sccs
and its associated utilities are part of the XSI Development
Utilities option within the XSI option.
.P
SCCS is an abbreviation for Source Code Control System. It is a
maintenance and enhancement tracking tool. When a file is put under
SCCS, the source code control system maintains the file and, when
changes are made, identifies and stores them in the file with the
original source code and/or documentation. As other changes are made,
they too are identified and retained in the file.
.P
Retrieval of the original and any set of changes is possible. Any
version of the file as it develops can be reconstructed for inspection
or additional modification. History data can be stored with each
version, documenting why the changes were made, who made them, and when
they were made.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "\fIadmin\fR\^",
.IR "\fIdelta\fR\^",
.IR "\fIget\fR\^",
.IR "\fImake\fR\^",
.IR "\fIprs\fR\^",
.IR "\fIrmdel\fR\^",
.IR "\fIsact\fR\^",
.IR "\fIunget\fR\^",
.IR "\fIval\fR\^",
.IR "\fIwhat\fR\^"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "Chapter 8" ", " "Environment Variables",
.IR "Section 12.2" ", " "Utility Syntax Guidelines"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.28.
.TH SED "1" "February 2017" "sed 4.4" "User Commands"
.SH NAME
sed \- stream editor for filtering and transforming text
.SH SYNOPSIS
.B sed
[\fIOPTION\fR]... \fI{script-only-if-no-other-script} \fR[\fIinput-file\fR]...
.SH DESCRIPTION
.ds sd \fIsed\fP
.ds Sd \fISed\fP
\*(Sd is a stream editor.
A stream editor is used to perform basic text
transformations on an input stream
(a file or input from a pipeline).
While in some ways similar to an editor which
permits scripted edits (such as \fIed\fP),
\*(sd works by making only one pass over the
input(s), and is consequently more efficient.
But it is \*(sd's ability to filter text in a pipeline
which particularly distinguishes it from other types of
editors.
.HP
\fB\-n\fR, \fB\-\-quiet\fR, \fB\-\-silent\fR
.IP
suppress automatic printing of pattern space
.HP
\fB\-e\fR script, \fB\-\-expression\fR=\fIscript\fR
.IP
add the script to the commands to be executed
.HP
\fB\-f\fR script-file, \fB\-\-file\fR=\fIscript\-file\fR
.IP
add the contents of script-file to the commands to be executed
.HP
\fB\-\-follow\-symlinks\fR
.IP
follow symlinks when processing in place
.HP
\fB\-i[SUFFIX]\fR, \fB\-\-in\-place\fR[=\fISUFFIX\fR]
.IP
edit files in place (makes backup if SUFFIX supplied)
.HP
\fB\-l\fR N, \fB\-\-line\-length\fR=\fIN\fR
.IP
specify the desired line-wrap length for the `l' command
.HP
\fB\-\-posix\fR
.IP
disable all GNU extensions.
.HP
\fB\-E\fR, \fB\-r\fR, \fB\-\-regexp\-extended\fR
.IP
use extended regular expressions in the script
(for portability use POSIX \fB\-E\fR).
.HP
\fB\-s\fR, \fB\-\-separate\fR
.IP
consider files as separate rather than as a single,
continuous long stream.
.HP
\fB\-\-sandbox\fR
.IP
operate in sandbox mode.
.HP
\fB\-u\fR, \fB\-\-unbuffered\fR
.IP
load minimal amounts of data from the input files and flush
the output buffers more often
.HP
\fB\-z\fR, \fB\-\-null\-data\fR
.IP
separate lines by NUL characters
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-\-version\fR
output version information and exit
.PP
If no \fB\-e\fR, \fB\-\-expression\fR, \fB\-f\fR, or \fB\-\-file\fR option is given, then the first
non-option argument is taken as the sed script to interpret.  All
remaining arguments are names of input files; if no input files are
specified, then the standard input is read.
.PP
GNU sed home page: &lt;http://www.gnu.org/software/sed/&gt;.
General help using GNU software: &lt;http://www.gnu.org/gethelp/&gt;.
E-mail bug reports to: &lt;bug-sed@gnu.org&gt;.
.SH "COMMAND SYNOPSIS"
This is just a brief synopsis of \*(sd commands to serve as
a reminder to those who already know \*(sd;
other documentation (such as the texinfo document)
must be consulted for fuller descriptions.
.SS
Zero-address ``commands''
.TP
.RI :\  label
Label for
.B b
and
.B t
commands.
.TP
.RI # comment
The comment extends until the next newline (or the end of a
.B -e
script fragment).
.TP
}
The closing bracket of a { } block.
.SS
Zero- or One- address commands
.TP
=
Print the current line number.
.TP
a \e
.TP
.I text
Append
.IR text ,
which has each embedded newline preceded by a backslash.
.TP
i \e
.TP
.I text
Insert
.IR text ,
which has each embedded newline preceded by a backslash.
.TP
q [\fIexit-code\fR]
Immediately quit the \*(sd script without processing
any more input, except that if auto-print is not disabled
the current pattern space will be printed.  The exit code
argument is a GNU extension.
.TP
Q [\fIexit-code\fR]
Immediately quit the \*(sd script without processing
any more input.  This is a GNU extension.
.TP
.RI r\  filename
Append text read from
.IR filename .
.TP
.RI R\  filename
Append a line read from
.IR filename .
Each invocation of the command reads a line from the file.
This is a GNU extension.
.SS
Commands which accept address ranges
.TP
{
Begin a block of commands (end with a }).
.TP
.RI b\  label
Branch to
.IR label ;
if
.I label
is omitted, branch to end of script.
.TP
c \e
.TP
.I text
Replace the selected lines with
.IR text ,
which has each embedded newline preceded by a backslash.
.TP
d
Delete pattern space.
Start next cycle.
.TP
D
If pattern space contains no newline, start a normal new cycle as if
the d command was issued.  Otherwise, delete text in the pattern
space up to the first newline, and restart cycle with the resultant
pattern space, without reading a new line of input.
.TP
h H
Copy/append pattern space to hold space.
.TP
g G
Copy/append hold space to pattern space.
.TP
l
List out the current line in a ``visually unambiguous'' form.
.TP
.RI l\  width
List out the current line in a ``visually unambiguous'' form,
breaking it at
.I width
characters.  This is a GNU extension.
.TP
n N
Read/append the next line of input into the pattern space.
.TP
p
Print the current pattern space.
.TP
P
Print up to the first embedded newline of the current pattern space.
.TP
.RI s/ regexp / replacement /
Attempt to match
.I regexp
against the pattern space.
If successful, replace that portion matched
with
.IR replacement .
The
.I replacement
may contain the special character
.B &amp;
to refer to that portion of the pattern space which matched,
and the special escapes \e1 through \e9 to refer to the
corresponding matching sub-expressions in the
.IR regexp .
.TP
.RI t\  label
If a s/// has done a successful substitution since the
last input line was read and since the last t or T
command, then branch to
.IR label ;
if
.I label
is omitted, branch to end of script.
.TP
.RI T\  label
If no s/// has done a successful substitution since the
last input line was read and since the last t or T
command, then branch to
.IR label ;
if
.I label
is omitted, branch to end of script.  This is a GNU
extension.
.TP
.RI w\  filename
Write the current pattern space to
.IR filename .
.TP
.RI W\  filename
Write the first line of the current pattern space to
.IR filename .
This is a GNU extension.
.TP
x
Exchange the contents of the hold and pattern spaces.
.TP
.RI y/ source / dest /
Transliterate the characters in the pattern space which appear in
.I source
to the corresponding character in
.IR dest .
.SH
Addresses
\*(Sd commands can be given with no addresses, in which
case the command will be executed for all input lines;
with one address, in which case the command will only be executed
for input lines which match that address; or with two
addresses, in which case the command will be executed
for all input lines which match the inclusive range of
lines starting from the first address and continuing to
the second address.
Three things to note about address ranges:
the syntax is
.IR addr1 , addr2
(i.e., the addresses are separated by a comma);
the line which
.I addr1
matched will always be accepted,
even if
.I addr2
selects an earlier line;
and if
.I addr2
is a
.IR regexp ,
it will not be tested against the line that
.I addr1
matched.
.PP
After the address (or address-range),
and before the command, a
.B !
may be inserted,
which specifies that the command shall only be
executed if the address (or address-range) does
.B not
match.
.PP
The following address types are supported:
.TP
.I number
Match only the specified line
.IR number
(which increments cumulatively across files, unless the
.B -s
option is specified on the command line).
.TP
.IR first ~ step
Match every
.IR step 'th
line starting with line
.IR first .
For example, ``sed -n 1~2p'' will print all the odd-numbered lines in
the input stream, and the address 2~5 will match every fifth line,
starting with the second.
.I first
can be zero; in this case, \*(sd operates as if it were equal to
.IR step .
(This is an extension.)
.TP
$
Match the last line.
.TP
.RI / regexp /
Match lines matching the regular expression
.IR regexp .
.TP
.BI \fR\e\fPc regexp c
Match lines matching the regular expression
.IR regexp .
The
.B c
may be any character.
.PP
GNU \*(sd also supports some special 2-address forms:
.TP
.RI 0, addr2
Start out in "matched first address" state, until
.I addr2
is found.
This is similar to
.RI 1, addr2 ,
except that if
.I addr2
matches the very first line of input the
.RI 0, addr2
form will be at the end of its range, whereas the
.RI 1, addr2
form will still be at the beginning of its range.
This works only when
.I addr2
is a regular expression.
.TP
.IR addr1 ,+ N
Will match
.I addr1
and the
.I N
lines following
.IR addr1 .
.TP
.IR addr1 ,~ N
Will match
.I addr1
and the lines following
.I addr1
until the next line whose input line number is a multiple of
.IR N .
.SH "REGULAR EXPRESSIONS"
POSIX.2 BREs
.I should
be supported, but they aren't completely because of performance
problems.
The
.B \en
sequence in a regular expression matches the newline character,
and similarly for
.BR \ea ,
.BR \et ,
and other sequences.
The \fI-E\fP option switches to using extended regular expressions instead;
the -E option has been supported for years by GNU sed, and is now
included in POSIX.
.SH BUGS
.PP
E-mail bug reports to
.BR bug-sed@gnu.org .
Also, please include the output of ``sed --version'' in the body
of your report if at all possible.
.SH AUTHOR
Written by Jay Fenlason, Tom Lord, Ken Pizzini,
and Paolo Bonzini.
GNU sed home page: &lt;http://www.gnu.org/software/sed/&gt;.
General help using GNU software: &lt;http://www.gnu.org/gethelp/&gt;.
E-mail bug reports to: &lt;bug-sed@gnu.org&gt;.
.SH COPYRIGHT
Copyright \(co 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
.BR awk (1),
.BR ed (1),
.BR grep (1),
.BR tr (1),
.BR perlre (1),
sed.info,
any of various books on \*(sd,
.na
the \*(sd FAQ (http://sed.sf.net/grabbag/tutorials/sedfaq.txt),
http://sed.sf.net/grabbag/.
.PP
The full documentation for
.B sed
is maintained as a Texinfo manual.  If the
.B info
and
.B sed
programs are properly installed at your site, the command
.IP
.B info sed
.PP
should give you access to the complete manual.
'\" et
.TH SET "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
set
\(em set or unset options and positional parameters
.SH SYNOPSIS
.LP
.nf
set \fB[\fR\(miabCefhmnuvx\fB] [\fR\(mio \fIoption\fB] [\fIargument\fR...\fB]\fR
.P
set \fB[\fR+abCefhmnuvx\fB] [\fR+o \fIoption\fB] [\fIargument\fR...\fB]\fR
.P
set \(mi\|\(mi\fB [\fIargument\fR...\fB]\fR
.P
set \(mio
.P
set +o
.fi
.SH DESCRIPTION
If no
.IR option s
or
.IR argument s
are specified,
.IR set
shall write the names and values of all shell variables in the collation
sequence of the current locale. Each
.IR name
shall start on a separate line, using the format:
.sp
.RS 4
.nf
\fB
"%s=%s\en", &lt;\fIname\fR&gt;, &lt;\fIvalue\fR&gt;
.fi \fR
.P
.RE
.P
The
.IR value
string shall be written with appropriate quoting; see the description
of shell quoting in
.IR "Section 2.2" ", " "Quoting".
The output shall be suitable for reinput to the shell, setting or
resetting, as far as possible, the variables that are currently set;
read-only variables cannot be reset.
.P
When options are specified, they shall set or unset attributes of the
shell, as described below. When
.IR argument s
are specified, they cause positional parameters to be set or unset, as
described below. Setting or unsetting attributes and positional
parameters are not necessarily related actions, but they can be
combined in a single invocation of
.IR set .
.P
The
.IR set
special built-in shall support the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 12.2" ", " "Utility Syntax Guidelines"
except that options can be specified with either a leading
&lt;hyphen&gt;
(meaning enable the option) or
&lt;plus-sign&gt;
(meaning disable it) unless otherwise specified.
.P
Implementations shall support the options in the following list in both
their
&lt;hyphen&gt;
and
&lt;plus-sign&gt;
forms. These options can also be specified as options to
.IR sh .
.IP "\fB\(mia\fP" 6
When this option is on, the
.IR export
attribute shall be set for each variable to which an assignment is
performed; see the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 4.22" ", " "Variable Assignment".
If the assignment precedes a utility name in a command, the
.IR export
attribute shall not persist in the current execution environment after
the utility completes, with the exception that preceding one of the
special built-in utilities causes the
.IR export
attribute to persist after the built-in has completed. If the
assignment does not precede a utility name in the command, or if the
assignment is a result of the operation of the
.IR getopts
or
.IR read
utilities, the
.IR export
attribute shall persist until the variable is unset.
.IP "\fB\(mib\fP" 6
This option shall be supported if the implementation supports the User
Portability Utilities option. It shall cause the shell to notify the
user asynchronously of background job completions. The following
message is written to standard error:
.RS 6 
.sp
.RS 4
.nf
\fB
"[%d]%c %s%s\en", &lt;\fIjob-number\fR&gt;, &lt;\fIcurrent\fR&gt;, &lt;\fRstatus\fR&gt;, &lt;\fRjob-name\fR&gt;
.fi \fR
.P
.RE
.P
where the fields shall be as follows:
.IP "&lt;\fIcurrent\fR&gt;" 12
The character
.BR '+' 
identifies the job that would be used as a default for the
.IR fg
or
.IR bg
utilities; this job can also be specified using the
.IR job_id
.BR \(dq%+\(dq 
or
.BR \(dq%%\(dq .
The character
.BR '\(mi' 
identifies the job that would become the
default if the current default job were to exit; this job can also be
specified using the
.IR job_id
.BR \(dq%\(mi\(dq .
For other jobs, this field is a
&lt;space&gt;.
At most one job can be identified with
.BR '+' 
and at most one job can be identified with
.BR '\(mi' .
If there is any suspended job, then the current job shall be a
suspended job. If there are at least two suspended jobs, then the
previous job also shall be a suspended job.
.IP "&lt;\fIjob-number\fR&gt;" 12
A number that can be used to identify the process group to the
.IR wait ,
.IR fg ,
.IR bg ,
and
.IR kill
utilities. Using these utilities, the job can be identified by
prefixing the job number with
.BR '%' .
.IP "&lt;\fIstatus\fR&gt;" 12
Unspecified.
.IP "&lt;\fIjob-name\fR&gt;" 12
Unspecified.
.P
When the shell notifies the user a job has been completed, it may
remove the job's process ID from the list of those known in the current
shell execution environment; see
.IR "Section 2.9.3.1" ", " "Examples".
Asynchronous notification shall not be enabled by default.
.RE
.IP "\fB\(miC\fP" 6
(Uppercase C.) Prevent existing files from being overwritten by the
shell's
.BR '&gt;' 
redirection operator (see
.IR "Section 2.7.2" ", " "Redirecting Output");
the
.BR \(dq&gt;|\(dq 
redirection operator shall override this
.IR noclobber
option for an individual file.
.IP "\fB\(mie\fP" 6
When this option is on, when any command fails (for any of the reasons
listed in
.IR "Section 2.8.1" ", " "Consequences of Shell Errors"
or by returning an exit status greater than zero), the shell immediately
shall exit with the following exceptions:
.RS 6 
.IP " 1." 4
The failure of any individual command in a multi-command pipeline shall
not cause the shell to exit. Only the failure of the pipeline itself
shall be considered.
.IP " 2." 4
The
.BR \(mie
setting shall be ignored when executing the compound list following the
.BR while ,
.BR until ,
.BR if ,
or
.BR elif
reserved word, a pipeline beginning with the
.BR !
reserved word, or any command of an AND-OR list other than the last.
.IP " 3." 4
If the exit status of a compound command other than a subshell command
was the result of a failure while
.BR \(mie
was being ignored, then
.BR \(mie
shall not apply to this command.
.P
This requirement applies to the shell environment and each subshell
environment separately. For example, in:
.sp
.RS 4
.nf
\fB
set -e; (false; echo one) | cat; echo two
.fi \fR
.P
.RE
.P
the
.IR false
command causes the subshell to exit without executing
.IR "echo one" ;
however,
.IR "echo two"
is executed because the exit status of the pipeline
.IR "(false; echo one) | cat"
is zero.
.RE
.IP "\fB\(mif\fP" 6
The shell shall disable pathname expansion.
.IP "\fB\(mih\fP" 6
Locate and remember utilities invoked by functions as those functions
are defined (the utilities are normally located when the function is
executed).
.IP "\fB\(mim\fP" 6
This option shall be supported if the implementation supports the User
Portability Utilities option. All jobs shall be run in their own
process groups. Immediately before the shell issues a prompt after
completion of the background job, a message reporting the exit status
of the background job shall be written to standard error. If a
foreground job stops, the shell shall write a message to standard error
to that effect, formatted as described by the
.IR jobs
utility. In addition, if a job changes status other than exiting (for
example, if it stops for input or output or is stopped by a SIGSTOP
signal), the shell shall write a similar message immediately prior to
writing the next prompt. This option is enabled by default for
interactive shells.
.IP "\fB\(min\fP" 6
The shell shall read commands but does not execute them; this can be
used to check for shell script syntax errors. An interactive shell may
ignore this option.
.IP "\fB\(mio\fP" 6
Write the current settings of the options to standard output in an
unspecified format.
.IP "\fB+o\fP" 6
Write the current option settings to standard output in a format that
is suitable for reinput to the shell as commands that achieve the same
options settings.
.IP "\fB\(mio\ \fIoption\fR" 6
.br
This option is supported if the system supports the User Portability
Utilities option. It shall set various options, many of which shall be
equivalent to the single option letters. The following values of
.IR option
shall be supported:
.RS 6 
.IP "\fIallexport\fR" 10
Equivalent to
.BR \(mia .
.IP "\fIerrexit\fR" 10
Equivalent to
.BR \(mie .
.IP "\fIignoreeof\fR" 10
Prevent an interactive shell from exiting on end-of-file. This setting
prevents accidental logouts when
&lt;control&gt;\(hyD
is entered. A user shall explicitly
.IR exit
to leave the interactive shell.
.IP "\fImonitor\fR" 10
Equivalent to
.BR \(mim .
This option is supported if the system supports the User Portability
Utilities option.
.IP "\fInoclobber\fR" 10
Equivalent to
.BR \(miC
(uppercase C).
.IP "\fInoglob\fR" 10
Equivalent to
.BR \(mif .
.IP "\fInoexec\fR" 10
Equivalent to
.BR \(min .
.IP "\fInolog\fR" 10
Prevent the entry of function definitions into the command history; see
.IR "Command History List".
.IP "\fInotify\fR" 10
Equivalent to
.BR \(mib .
.IP "\fInounset\fR" 10
Equivalent to
.BR \(miu .
.IP "\fIverbose\fR" 10
Equivalent to
.BR \(miv .
.IP "\fIvi\fR" 10
Allow shell command line editing using the built-in
.IR vi
editor. Enabling
.IR vi
mode shall disable any other command line editing mode provided as an
implementation extension.
.RS 10 
.P
It need not be possible to set
.IR vi
mode on for certain block-mode terminals.
.RE
.IP "\fIxtrace\fR" 10
Equivalent to
.BR \(mix .
.RE
.IP "\fB\(miu\fP" 6
When the shell tries to expand an unset parameter other than the
.BR '@' 
and
.BR '*' 
special parameters, it shall write a message to standard error and shall
not execute the command containing the expansion, but for the purposes
of setting the
.BR '?' 
special parameter and the exit status of the shell the command shall be
treated as having been executed and returned an exit status of between
1 and 125 inclusive. A non-interactive shell shall immediately exit. An
interactive shell shall not exit.
.IP "\fB\(miv\fP" 6
The shell shall write its input to standard error as it is read.
.IP "\fB\(mix\fP" 6
The shell shall write to standard error a trace for each command after
it expands the command and before it executes it. It is unspecified
whether the command that turns tracing off is traced.
.P
The default for all these options shall be off (unset) unless stated
otherwise in the description of the option or unless the shell was
invoked with them on; see
.IR sh .
.P
The remaining arguments shall be assigned in order to the positional
parameters. The special parameter
.BR '#' 
shall be set to reflect the number of positional parameters. All
positional parameters shall be unset before any new values are
assigned.
.P
If the first argument is
.BR '\(mi' ,
the results are unspecified.
.P
The special argument
.BR \(dq\(mi\|\(mi\(dq 
immediately following the
.IR set
command name can be used to delimit the arguments if the first argument
begins with
.BR '+' 
or
.BR '\(mi' ,
or to prevent inadvertent listing of all shell variables when there are
no arguments. The command
.IR set
.BR \(mi\|\(mi
without
.IR argument
shall unset all positional parameters and set the special parameter
.BR '#' 
to zero.
.SH OPTIONS
See the DESCRIPTION.
.SH OPERANDS
See the DESCRIPTION.
.SH STDIN
Not used.
.SH "INPUT FILES"
None.
.SH "ENVIRONMENT VARIABLES"
None.
.SH "ASYNCHRONOUS EVENTS"
Default.
.SH STDOUT
See the DESCRIPTION.
.SH STDERR
The standard error shall be used only for diagnostic messages.
.SH "OUTPUT FILES"
None.
.SH "EXTENDED DESCRIPTION"
None.
.SH "EXIT STATUS"
Zero.
.SH "CONSEQUENCES OF ERRORS"
Default.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
Application writers should avoid relying on
.IR set
.BR \(mie
within functions. For example, in the following script:
.sp
.RS 4
.nf
\fB
set -e
start() {
some_server
echo some_server started successfully
}
start || echo &gt;&amp;2 some_server failed
.fi \fR
.P
.RE
.P
the
.BR \(mie
setting is ignored within the function body (because the function is a
command in an AND-OR list other than the last). Therefore, if
.IR some_server
fails, the function carries on to echo
.BR \(dqsome_server started successfully\(dq ,
and the exit status of the function is zero (which means
.BR \(dqsome_server failed\(dq 
is not output).
.SH EXAMPLES
Write out all variables and their values:
.sp
.RS 4
.nf
\fB
set
.fi \fR
.P
.RE
.P
Set $1, $2, and $3 and set
.BR \(dq$#\(dq 
to 3:
.sp
.RS 4
.nf
\fB
set c a b
.fi \fR
.P
.RE
.P
Turn on the
.BR \(mix
and
.BR \(miv
options:
.sp
.RS 4
.nf
\fB
set \(mixv
.fi \fR
.P
.RE
.P
Unset all positional parameters:
.sp
.RS 4
.nf
\fB
set \(mi\|\(mi
.fi \fR
.P
.RE
.P
Set $1 to the value of
.IR x ,
even if it begins with
.BR '\(mi' 
or
.BR '+' :
.sp
.RS 4
.nf
\fB
set \(mi\|\(mi "$x"
.fi \fR
.P
.RE
.P
Set the positional parameters to the expansion of
.IR x ,
even if
.IR x
expands with a leading
.BR '\(mi' 
or
.BR '+' :
.sp
.RS 4
.nf
\fB
set \(mi\|\(mi $x
.fi \fR
.P
.RE
.SH "RATIONALE"
The
.IR set
\(mi\|\(mi form is listed specifically in the SYNOPSIS even though this
usage is implied by the Utility Syntax Guidelines. The explanation of
this feature removes any ambiguity about whether the
.IR set
\(mi\|\(mi form might be misinterpreted as being equivalent to
.IR set
without any options or arguments. The functionality of this form has
been adopted from the KornShell. In System V,
.IR set
\(mi\|\(mi only unsets parameters if there is at least one argument;
the only way to unset all parameters is to use
.IR shift .
Using the KornShell version should not affect System V scripts because
there should be no reason to issue it without arguments deliberately;
if it were issued as, for example:
.sp
.RS 4
.nf
\fB
set \(mi\|\(mi "$@"
.fi \fR
.P
.RE
.P
and there were in fact no arguments resulting from
.BR \(dq$@\(dq ,
unsetting the parameters would have no result.
.P
The
.IR set
+ form in early proposals was omitted as being an unnecessary
duplication of
.IR set
alone and not widespread historical practice.
.P
The
.IR noclobber
option was changed to allow
.IR set
.BR \(miC
as well as the
.IR set
.BR \(mio
.IR noclobber
option. The single-letter version was added so that the historical
.BR \(dq$\(mi\(dq 
paradigm would not be broken; see
.IR "Section 2.5.2" ", " "Special Parameters".
.P
The description of the
.BR \(mie
option is intended to match the behavior of the 1988 version of the
KornShell.
.P
The
.BR \(mih
flag is related to command name hashing. See
.IR "\fIhash\fR\^".
.P
The following
.IR set
flags were omitted intentionally with the following rationale:
.IP "\fB\(mik\fP" 6
The
.BR \(mik
flag was originally added by the author of the Bourne shell to make it
easier for users of pre-release versions of the shell. In early
versions of the Bourne shell the construct
.IR set
.IR name =\c
.IR value
had to be used to assign values to shell variables. The problem with
.BR \(mik
is that the behavior affects parsing, virtually precluding writing any
compilers. To explain the behavior of
.BR \(mik ,
it is necessary to describe the parsing algorithm, which is
implementation-defined. For example:
.RS 6 
.sp
.RS 4
.nf
\fB
set \(mik; echo \fIname\fR=\fIvalue\fR
.fi \fR
.P
.RE
.P
and:
.sp
.RS 4
.nf
\fB
set \(mik
echo \fIname\fP=\fIvalue\fR
.fi \fR
.P
.RE
.P
behave differently. The interaction with functions is even more
complex. What is more, the
.BR \(mik
flag is never needed, since the command line could have been
reordered.
.RE
.IP "\fB\(mit\fP" 6
The
.BR \(mit
flag is hard to specify and almost never used. The only known use could
be done with here-documents. Moreover, the behavior with
.IR ksh
and
.IR sh
differs. The reference page says that it exits after reading and
executing one command. What is one command? If the input is
.IR date ;\c
.IR date ,
.IR sh
executes both
.IR date
commands while
.IR ksh
does only the first.
.P
Consideration was given to rewriting
.IR set
to simplify its confusing syntax. A specific suggestion was that the
.IR unset
utility should be used to unset options instead of using the non-\c
\fIgetopt\fR()\c
-able +\c
.IR option
syntax. However, the conclusion was reached that the historical
practice of using +\c
.IR option
was satisfactory and that there was no compelling reason to modify such
widespread historical practice.
.P
The
.BR \(mio
option was adopted from the KornShell to address user needs. In
addition to its generally friendly interface,
.BR \(mio
is needed to provide the
.IR vi
command line editing mode, for which historical practice yields no
single-letter option name. (Although it might have been possible to
invent such a letter, it was recognized that other editing modes would
be developed and
.BR \(mio
provides ample name space for describing such extensions.)
.P
Historical implementations are inconsistent in the format used for
.BR \(mio
option status reporting. The
.BR +o
format without an option-argument was added to allow portable access to
the options that can be saved and then later restored using, for
instance, a dot script.
.P
Historically,
.IR sh
did trace the command
.IR set
.BR +x ,
but
.IR ksh
did not.
.P
The
.IR ignoreeof
setting prevents accidental logouts when the end-of-file character
(typically
&lt;control&gt;\(hyD)
is entered. A user shall explicitly
.IR exit
to leave the interactive shell.
.P
The
.IR set
.BR \(mim
option was added to apply only to the UPE because it applies primarily
to interactive use, not shell script applications.
.P
The ability to do asynchronous notification became available in the
1988 version of the KornShell. To have it occur, the user had to issue
the command:
.sp
.RS 4
.nf
\fB
trap "jobs \(min" CLD
.fi \fR
.P
.RE
.P
The C shell provides two different levels of an asynchronous
notification capability. The environment variable
.IR notify
is analogous to what is done in
.IR set
.BR \(mib
or
.IR set
.BR \(mio
.IR notify .
When set, it notifies the user immediately of background job
completions. When unset, this capability is turned off.
.P
The other notification ability comes through the built-in utility
.IR notify .
The syntax is:
.sp
.RS 4
.nf
\fB
notify \fB[\fR%job ... \fB]\fR
.fi \fR
.P
.RE
.P
By issuing
.IR notify
with no operands, it causes the C shell to notify the user
asynchronously when the state of the current job changes. If given
operands,
.IR notify
asynchronously informs the user of changes in the states of the
specified jobs.
.P
To add asynchronous notification to the POSIX shell, neither the
KornShell extensions to
.IR trap ,
nor the C shell
.IR notify
environment variable seemed appropriate (\c
.IR notify
is not a proper POSIX environment variable name).
.P
The
.IR set
.BR \(mib
option was selected as a compromise.
.P
The
.IR notify
built-in was considered to have more functionality than was required
for simple asynchronous notification.
.P
Historically, some shells applied the
.BR \(miu
option to all parameters including
.IR $@
and
.IR $* .
The standard developers felt that this was a misfeature since it is
normal and common for
.IR $@
and
.IR $*
to be used in shell scripts regardless of whether they were passed any
arguments. Treating these uses as an error when no arguments are passed
reduces the value of
.BR \(miu
for its intended purpose of finding spelling mistakes in variable names
and uses of unset positional parameters.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "Section 2.14" ", " "Special Built-In Utilities",
.IR "\fIhash\fR\^"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 4.22" ", " "Variable Assignment",
.IR "Section 12.2" ", " "Utility Syntax Guidelines"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
'\" et
.TH SH "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
sh
\(em shell, the standard command language interpreter
.SH SYNOPSIS
.LP
.nf
sh \fB[\fR\(miabCefhimnuvx\fB] [\fR\(mio \fIoption\fB]\fR... \fB[\fR+abCefhimnuvx\fB] [\fR+o \fIoption\fB]\fR...
\fB[\fIcommand_file \fB[\fIargument\fR...\fB]]\fR
.P
sh \(mic \fB[\fR\(miabCefhimnuvx\fB] [\fR\(mio \fIoption\fB]\fR... \fB[\fR+abCefhimnuvx\fB] [\fR+o \fIoption\fB]\fR...
\fIcommand_string \fB[\fIcommand_name \fB[\fIargument\fR...\fB]]\fR
.P
sh \(mis \fB[\fR\(miabCefhimnuvx\fB] [\fR\(mio \fIoption\fB]\fR... \fB[\fR+abCefhimnuvx\fB] [\fR+o \fIoption\fB]\fR...
\fB[\fIargument\fR...\fB]\fR
.fi
.SH DESCRIPTION
The
.IR sh
utility is a command language interpreter that shall execute commands
read from a command line string, the standard input, or a specified
file. The application shall ensure that the commands to be executed are
expressed in the language described in
.IR "Chapter 2" ", " "Shell Command Language".
.P
Pathname expansion shall not fail due to the size of a file.
.P
Shell input and output redirections have an implementation-defined
offset maximum that is established in the open file description.
.SH OPTIONS
The
.IR sh
utility shall conform to the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 12.2" ", " "Utility Syntax Guidelines",
with an extension for support of a leading
&lt;plus-sign&gt;
(\c
.BR '\(pl' )
as noted below.
.P
The
.BR \(mia ,
.BR \(mib ,
.BR \(miC ,
.BR \(mie ,
.BR \(mif ,
.BR \(mim ,
.BR \(min ,
.BR \(mio
.IR option ,
.BR \(miu ,
.BR \(miv ,
and
.BR \(mix
options are described as part of the
.IR set
utility in
.IR "Section 2.14" ", " "Special Built-In Utilities".
The option letters derived from the
.IR set
special built-in shall also be accepted with a leading
&lt;plus-sign&gt;
(\c
.BR '\(pl' )
instead of a leading
&lt;hyphen&gt;
(meaning the reverse case of the option as described in this volume of POSIX.1\(hy2008).
.P
The following additional options shall be supported:
.IP "\fB\(mic\fP" 10
Read commands from the
.IR command_string
operand. Set the value of special parameter 0 (see
.IR "Section 2.5.2" ", " "Special Parameters")
from the value of the
.IR command_name
operand and the positional parameters ($1, $2, and so on) in sequence
from the remaining
.IR argument
operands. No commands shall be read from the standard input.
.IP "\fB\(mii\fP" 10
Specify that the shell is
.IR interactive ;
see below. An implementation may treat specifying the
.BR \(mii
option as an error if the real user ID of the calling process does not
equal the effective user ID or if the real group ID does not equal the
effective group ID.
.IP "\fB\(mis\fP" 10
Read commands from the standard input.
.P
If there are no operands and the
.BR \(mic
option is not specified, the
.BR \(mis
option shall be assumed.
.P
If the
.BR \(mii
option is present, or if there are no operands and the shell's standard
input and standard error are attached to a terminal, the shell is
considered to be
.IR interactive .
.SH OPERANDS
The following operands shall be supported:
.IP "\fR\(mi\fR" 10
A single
&lt;hyphen&gt;
shall be treated as the first operand and then ignored. If both
.BR '\(mi' 
and
.BR \(dq\(mi\|\(mi\(dq 
are given as arguments, or if other operands precede the single
&lt;hyphen&gt;,
the results are undefined.
.IP "\fIargument\fR" 10
The positional parameters ($1, $2, and so on) shall be set to
.IR arguments ,
if any.
.IP "\fIcommand_file\fR" 10
The pathname of a file containing commands. If the pathname contains
one or more
&lt;slash&gt;
characters, the implementation attempts to read that file; the file need
not be executable. If the pathname does not contain a
&lt;slash&gt;
character:
.RS 10 
.IP " *" 4
The implementation shall attempt to read that file from the current
working directory; the file need not be executable.
.IP " *" 4
If the file is not in the current working directory, the implementation
may perform a search for an executable file using the value of
.IR PATH ,
as described in
.IR "Section 2.9.1.1" ", " "Command Search and Execution".
.P
Special parameter 0 (see
.IR "Section 2.5.2" ", " "Special Parameters")
shall be set to the value of
.IR command_file .
If
.IR sh
is called using a synopsis form that omits
.IR command_file ,
special parameter 0 shall be set to the value of the first argument
passed to
.IR sh
from its parent (for example,
.IR argv [0]
for a C program), which is normally a pathname used to execute the
.IR sh
utility.
.RE
.IP "\fIcommand_name\fR" 10
.br
A string assigned to special parameter 0 when executing the commands in
.IR command_string .
If
.IR command_name
is not specified, special parameter 0 shall be set to the value of the
first argument passed to
.IR sh
from its parent (for example,
.IR argv [0]
for a C program), which is normally a pathname used to execute the
.IR sh
utility.
.IP "\fIcommand_string\fR" 10
.br
A string that shall be interpreted by the shell as one or more
commands, as if the string were the argument to the
\fIsystem\fR()
function defined in the System Interfaces volume of POSIX.1\(hy2008. If the
.IR command_string
operand is an empty string,
.IR sh
shall exit with a zero exit status.
.SH STDIN
The standard input shall be used only if one of the following is true:
.IP " *" 4
The
.BR \(mis
option is specified.
.IP " *" 4
The
.BR \(mic
option is not specified and no operands are specified.
.IP " *" 4
The script executes one or more commands that require input from
standard input (such as a
.IR read
command that does not redirect its input).
.P
See the INPUT FILES section.
.P
When the shell is using standard input and it invokes a command that
also uses standard input, the shell shall ensure that the standard
input file pointer points directly after the command it has read when
the command begins execution. It shall not read ahead in such a manner
that any characters intended to be read by the invoked command are
consumed by the shell (whether interpreted by the shell or not) or that
characters that are not read by the invoked command are not seen by the
shell. When the command expecting to read standard input is started
asynchronously by an interactive shell, it is unspecified whether
characters are read by the command or interpreted by the shell.
.P
If the standard input to
.IR sh
is a FIFO or terminal device and is set to non-blocking reads, then
.IR sh
shall enable blocking reads on standard input. This shall remain in
effect when the command completes.
.SH "INPUT FILES"
The input file shall be a text file, except that line lengths shall be
unlimited. If the input file is empty or consists solely of blank
lines or comments, or both,
.IR sh
shall exit with a zero exit status.
.SH "ENVIRONMENT VARIABLES"
The following environment variables shall affect the execution of
.IR sh :
.IP "\fIENV\fP" 10
This variable, when and only when an interactive shell is invoked,
shall be subjected to parameter expansion (see
.IR "Section 2.6.2" ", " "Parameter Expansion")
by the shell, and the resulting value shall be used as a pathname of a
file containing shell commands to execute in the current environment.
The file need not be executable. If the expanded value of
.IR ENV
is not an absolute pathname, the results are unspecified.
.IR ENV
shall be ignored if the real and effective user IDs or real and
effective group IDs of the process are different.
.IP "\fIFCEDIT\fP" 10
This variable, when expanded by the shell, shall determine the default
value for the
.BR \(mie
.IR editor
option's
.IR editor
option-argument. If
.IR FCEDIT
is null or unset,
.IR ed
shall be used as the editor.
.IP "\fIHISTFILE\fP" 10
Determine a pathname naming a command history file. If the
.IR HISTFILE
variable is not set, the shell may attempt to access or create a file
.BR .sh_history
in the directory referred to by the
.IR HOME
environment variable. If the shell cannot obtain both read and
write access to, or create, the history file, it shall use an
unspecified mechanism that allows the history to operate properly.
(References to history ``file'' in this section shall be understood to
mean this unspecified mechanism in such cases.) An implementation may
choose to access this variable only when initializing the history file;
this initialization shall occur when
.IR fc
or
.IR sh
first attempt to retrieve entries from, or add entries to, the file, as
the result of commands issued by the user, the file named by the
.IR ENV
variable, or implementation-defined system start-up files.
Implementations may choose to disable the history list mechanism for
users with appropriate privileges who do not set
.IR HISTFILE ;
the specific circumstances under which this occurs are
implementation-defined. If more than one instance of the shell is
using the same history file, it is unspecified how updates to the
history file from those shells interact. As entries are deleted from
the history file, they shall be deleted oldest first. It is
unspecified when history file entries are physically removed from the
history file.
.IP "\fIHISTSIZE\fP" 10
Determine a decimal number representing the limit to the number of
previous commands that are accessible. If this variable is unset, an
unspecified default greater than or equal to 128 shall be used. The
maximum number of commands in the history list is unspecified, but
shall be at least 128. An implementation may choose to access this
variable only when initializing the history file, as described under
.IR HISTFILE .
Therefore, it is unspecified whether changes made to
.IR HISTSIZE
after the history file has been initialized are effective.
.IP "\fIHOME\fP" 10
Determine the pathname of the user's home directory. The contents of
.IR HOME
are used in tilde expansion as described in
.IR "Section 2.6.1" ", " "Tilde Expansion".
.IP "\fIIFS\fP" 10
A string treated as a list of characters that is used for field
splitting and to split lines into fields with the
.IR read
command.
.RS 10 
.P
If
.IR IFS
is not set, it shall behave as normal for an unset variable, except
that field splitting by the shell and line splitting by the
.IR read
command shall be performed as if the value of
.IR IFS
is
&lt;space&gt;\c
&lt;tab&gt;\c
&lt;newline&gt;;
see
.IR "Section 2.6.5" ", " "Field Splitting".
.P
Implementations may ignore the value of
.IR IFS
in the environment, or the absence of
.IR IFS
from the environment, at the time the shell is invoked, in which case
the shell shall set
.IR IFS
to
&lt;space&gt;\c
&lt;tab&gt;\c
&lt;newline&gt;
when it is invoked.
.RE
.IP "\fILANG\fP" 10
Provide a default value for the internationalization variables that are
unset or null. (See the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 8.2" ", " "Internationalization Variables"
for the precedence of internationalization variables used to determine
the values of locale categories.)
.IP "\fILC_ALL\fP" 10
If set to a non-empty string value, override the values of all the
other internationalization variables.
.IP "\fILC_COLLATE\fP" 10
.br
Determine the behavior of range expressions, equivalence classes, and
multi-character collating elements within pattern matching.
.IP "\fILC_CTYPE\fP" 10
Determine the locale for the interpretation of sequences of bytes of
text data as characters (for example, single-byte as opposed to
multi-byte characters in arguments and input files), which characters
are defined as letters (character class
.BR alpha ),
and the behavior of character classes within pattern matching.
.IP "\fILC_MESSAGES\fP" 10
.br
Determine the locale that should be used to affect the format and
contents of diagnostic messages written to standard error.
.IP "\fIMAIL\fP" 10
Determine a pathname of the user's mailbox file for purposes of
incoming mail notification. If this variable is set, the shell shall
inform the user if the file named by the variable is created or if its
modification time has changed. Informing the user shall be accomplished
by writing a string of unspecified format to standard error prior to
the writing of the next primary prompt string. Such check shall be
performed only after the completion of the interval defined by the
.IR MAILCHECK
variable after the last such check. The user shall be informed only if
.IR MAIL
is set and
.IR MAILPATH
is not set.
.IP "\fIMAILCHECK\fP" 10
.br
Establish a decimal integer value that specifies how often (in seconds)
the shell shall check for the arrival of mail in the files specified by
the
.IR MAILPATH
or
.IR MAIL
variables. The default value shall be 600 seconds. If set to zero,
the shell shall check before issuing each primary prompt.
.IP "\fIMAILPATH\fP" 10
Provide a list of pathnames and optional messages separated by
&lt;colon&gt;
characters. If this variable is set, the shell shall inform the user if
any of the files named by the variable are created or if any of their
modification times change. (See the preceding entry for
.IR MAIL
for descriptions of mail arrival and user informing.) Each pathname can
be followed by
.BR '%' 
and a string that shall be subjected to parameter expansion and written
to standard error when the modification time changes. If a
.BR '%' 
character in the pathname is preceded by a
&lt;backslash&gt;,
it shall be treated as a literal
.BR '%' 
in the pathname. The default message is unspecified.
.RS 10 
.P
The
.IR MAILPATH
environment variable takes precedence over the
.IR MAIL
variable.
.RE
.IP "\fINLSPATH\fP" 10
Determine the location of message catalogs for the processing of
.IR LC_MESSAGES .
.IP "\fIPATH\fP" 10
Establish a string formatted as described in the Base Definitions volume of POSIX.1\(hy2008,
.IR "Chapter 8" ", " "Environment Variables",
used to effect command interpretation; see
.IR "Section 2.9.1.1" ", " "Command Search and Execution".
.IP "\fIPWD\fP" 10
This variable shall represent an absolute pathname of the current
working directory. Assignments to this variable may be ignored.
.SH "ASYNCHRONOUS EVENTS"
The
.IR sh
utility shall take the standard action for all signals (see
.IR "Section 1.4" ", " "Utility Description Defaults")
with the following exceptions.
.P
If the shell is interactive, SIGINT signals received during command
line editing shall be handled as described in the EXTENDED DESCRIPTION,
and SIGINT signals received at other times shall be caught but no action
performed.
.P
If the shell is interactive:
.IP " *" 4
SIGQUIT and SIGTERM signals shall be ignored.
.IP " *" 4
If the
.BR \(mim
option is in effect, SIGTTIN, SIGTTOU, and SIGTSTP signals shall be
ignored.
.IP " *" 4
If the
.BR \(mim
option is not in effect, it is unspecified whether SIGTTIN, SIGTTOU,
and SIGTSTP signals are ignored, set to the default action, or caught.
If they are caught, the shell shall, in the signal-catching function,
set the signal to the default action and raise the signal (after taking
any appropriate steps, such as restoring terminal settings).
.P
The standard actions, and the actions described above for interactive
shells, can be overridden by use of the
.IR trap
special built-in utility (see
.IR "\fItrap\fR\^"
and
.IR "Section 2.11" ", " "Signals and Error Handling").
.SH STDOUT
See the STDERR section.
.SH STDERR
Except as otherwise stated (by the descriptions of any invoked
utilities or in interactive mode), standard error shall be used
only for diagnostic messages.
.SH "OUTPUT FILES"
None.
.SH "EXTENDED DESCRIPTION"
See
.IR "Chapter 2" ", " "Shell Command Language".
The functionality described in the rest of the EXTENDED DESCRIPTION
section shall be provided on implementations that support the User
Portability Utilities option
(and the rest of this section is not further shaded for this option).
.SS "Command History List"
.P
When the
.IR sh
utility is being used interactively, it shall maintain a list of
commands previously entered from the terminal in the file named by the
.IR HISTFILE
environment variable. The type, size, and internal format of this file
are unspecified. Multiple
.IR sh
processes can share access to the file for a user, if file access
permissions allow this; see the description of the
.IR HISTFILE
environment variable.
.SS "Command Line Editing"
.P
When
.IR sh
is being used interactively from a terminal, the current command and
the command history (see
.IR "\fIfc\fR\^")
can be edited using
.IR vi -mode
command line editing. This mode uses commands, described below,
similar to a subset of those described in the
.IR vi
utility. Implementations may offer other command line editing modes
corresponding to other editing utilities.
.P
The command
.IR set
.BR \(mio
.IR vi
shall enable
.IR vi -mode
editing and place
.IR sh
into
.IR vi
insert mode (see
.IR "Command Line Editing (vi-mode)").
This command also shall disable any other editing mode that the
implementation may provide. The command
.IR set
.BR +o
.IR vi
disables
.IR vi -mode
editing.
.P
Certain block-mode terminals may be unable to support shell command
line editing. If a terminal is unable to provide either edit mode, it
need not be possible to
.IR set
.BR \(mio
.IR vi
when using the shell on this terminal.
.P
In the following sections, the characters
.IR erase ,
.IR interrupt ,
.IR kill ,
and
.IR end-of-file
are those set by the
.IR stty
utility.
.SS "Command Line Editing (vi-mode)"
.P
In
.IR vi
editing mode, there shall be a distinguished line, the edit line. All
the editing operations which modify a line affect the edit line. The
edit line is always the newest line in the command history buffer.
.P
With
.IR vi -mode
enabled,
.IR sh
can be switched between insert mode and command mode.
.P
When in insert mode, an entered character shall be inserted into the
command line, except as noted in
.IR "vi Line Editing Insert Mode".
Upon entering
.IR sh
and after termination of the previous command,
.IR sh
shall be in insert mode.
.P
Typing an escape character shall switch
.IR sh
into command mode (see
.IR "vi Line Editing Command Mode").
In command mode, an entered character shall either invoke a defined
operation, be used as part of a multi-character operation, or be
treated as an error. A character that is not recognized as part of an
editing command shall terminate any specific editing command and shall
alert the terminal. If
.IR sh
receives a SIGINT signal in command mode (whether generated by typing the
.IR interrupt
character or by other means), it shall terminate command line editing
on the current command line, reissue the prompt on the next line of the
terminal, and reset the command history (see
.IR "\fIfc\fR\^")
so that the most recently executed command is the previous command
(that is, the command that was being edited when it was interrupted is
not re-entered into the history).
.P
In the following sections, the phrase ``move the cursor to the
beginning of the word'' shall mean ``move the cursor to the first
character of the current word'' and the phrase ``move the cursor to the
end of the word'' shall mean ``move the cursor to the last character of
the current word''. The phrase ``beginning of the command line''
indicates the point between the end of the prompt string issued by the
shell (or the beginning of the terminal line, if there is no prompt
string) and the first character of the command text.
.SS "vi Line Editing Insert Mode"
.P
While in insert mode, any character typed shall be inserted in the
current command line, unless it is from the following set.
.IP &lt;newline&gt; 10
Execute the current command line. If the current command line is not
empty, this line shall be entered into the command history (see
.IR "\fIfc\fR\^").
.IP "\fIerase\fR" 10
Delete the character previous to the current cursor position and move
the current cursor position back one character. In insert mode,
characters shall be erased from both the screen and the buffer when
backspacing.
.IP "\fIinterrupt\fR" 10
If
.IR sh
receives a SIGINT signal in insert mode (whether generated by typing
the
.IR interrupt
character or by other means), it shall terminate command line editing
with the same effects as described for interrupting command mode; see
.IR "Command Line Editing (vi-mode)".
.IP "\fIkill\fR" 10
Clear all the characters from the input line.
.IP "&lt;control&gt;\(hyV" 10
Insert the next character input, even if the character is otherwise a
special insert mode character.
.IP "&lt;control&gt;\(hyW" 10
Delete the characters from the one preceding the cursor to the
preceding word boundary. The word boundary in this case is the closer
to the cursor of either the beginning of the line or a character that
is in neither the
.BR blank
nor
.BR punct
character classification of the current locale.
.IP "\fIend-of-file\fR" 10
Interpreted as the end of input in
.IR sh .
This interpretation shall occur only at the beginning of an input
line. If
.IR end-of-file
is entered other than at the beginning of the line, the results are
unspecified.
.IP &lt;ESC&gt; 10
Place
.IR sh
into command mode.
.SS "vi Line Editing Command Mode"
.P
In command mode for the command line editing feature, decimal digits
not beginning with 0 that precede a command letter shall be
remembered. Some commands use these decimal digits as a count number
that affects the operation.
.P
The term
.IR "motion command"
represents one of the commands:
.sp
.RS 4
.nf
\fB
&lt;space&gt;  0  b  F  l  W  ^  $  ;  E  f  T  w  |  ,  B  e  h  t
.fi \fR
.P
.RE
.P
If the current line is not the edit line, any command that modifies the
current line shall cause the content of the current line to replace the
content of the edit line, and the current line shall become the edit
line. This replacement cannot be undone (see the
.BR u
and
.BR U
commands below). The modification requested shall then be performed to
the edit line. When the current line is the edit line, the modification
shall be done directly to the edit line.
.P
Any command that is preceded by
.IR count
shall take a count (the numeric value of any preceding decimal
digits). Unless otherwise noted, this count shall cause the specified
operation to repeat by the number of times specified by the count.
Also unless otherwise noted, a
.IR count
that is out of range is considered an error condition and shall alert
the terminal, but neither the cursor position, nor the command line,
shall change.
.P
The terms
.IR word
and
.IR bigword
are used as defined in the
.IR vi
description. The term
.IR "save buffer"
corresponds to the term
.IR "unnamed buffer"
in
.IR vi .
.P
The following commands shall be recognized in command mode:
.IP &lt;newline&gt; 10
Execute the current command line. If the current command line is not
empty, this line shall be entered into the command history (see
.IR "\fIfc\fR\^").
.IP "&lt;control&gt;\(hyL" 10
Redraw the current command line. Position the cursor at the same
location on the redrawn line.
.IP "\fB#\fP" 10
Insert the character
.BR '#' 
at the beginning of the current command line and treat the resulting
edit line as a comment. This line shall be entered into the command
history; see
.IR "\fIfc\fR\^".
.IP "\fB=\fP" 10
Display the possible shell word expansions (see
.IR "Section 2.6" ", " "Word Expansions")
of the bigword at the current command line position.
.RS 10 
.TP 10
.BR Note:
This does not modify the content of the current line, and therefore
does not cause the current line to become the edit line.
.P
.P
These expansions shall be displayed on subsequent terminal lines. If
the bigword contains none of the characters
.BR '?' ,
.BR '*' ,
or
.BR '[' ,
an
&lt;asterisk&gt;
(\c
.BR '*' )
shall be implicitly assumed at the end. If any directories are
matched, these expansions shall have a
.BR '/' 
character appended. After the expansion, the line shall be redrawn,
the cursor repositioned at the current cursor position, and
.IR sh
shall be placed in command mode.
.RE
.IP "\fB\e\fR" 10
Perform pathname expansion (see
.IR "Section 2.6.6" ", " "Pathname Expansion")
on the current bigword, up to the largest set of characters that can be
matched uniquely. If the bigword contains none of the characters
.BR '?' ,
.BR '*' ,
or
.BR '[' ,
an
&lt;asterisk&gt;
(\c
.BR '*' )
shall be implicitly assumed at the end. This maximal expansion then
shall replace the original bigword in the command line, and the cursor
shall be placed after this expansion. If the resulting bigword
completely and uniquely matches a directory, a
.BR '/' 
character shall be inserted directly after the bigword. If some other
file is completely matched, a single
&lt;space&gt;
shall be inserted after the bigword. After this operation,
.IR sh
shall be placed in insert mode.
.IP "\fB*\fR" 10
Perform pathname expansion on the current bigword and insert all
expansions into the command to replace the current bigword, with each
expansion separated by a single
&lt;space&gt;.
If at the end of the line, the current cursor position shall be moved
to the first column position following the expansions and
.IR sh
shall be placed in insert mode. Otherwise, the current cursor position
shall be the last column position of the first character after the
expansions and
.IR sh
shall be placed in insert mode. If the current bigword contains none
of the characters
.BR '?' ,
.BR '*' ,
or
.BR '[' ,
before the operation, an
&lt;asterisk&gt;
(\c
.BR '*' )
shall be implicitly assumed at the end.
.IP "\fB@\fIletter\fR" 10
Insert the value of the alias named
.IR _letter .
The symbol
.IR letter
represents a single alphabetic character from the portable character
set; implementations may support additional characters as an
extension. If the alias
.IR _letter
contains other editing commands, these commands shall be performed as
part of the insertion. If no alias
.IR _letter
is enabled, this command shall have no effect.
.IP "\fB[\fIcount\fB]~\fR" 10
Convert, if the current character is a lowercase letter, to the
equivalent uppercase letter and
.IR "vice versa" ,
as prescribed by the current locale. The current cursor position then
shall be advanced by one character. If the cursor was positioned on
the last character of the line, the case conversion shall occur, but
the cursor shall not advance. If the
.BR '~' 
command is preceded by a
.IR count ,
that number of characters shall be converted, and the cursor shall be
advanced to the character position after the last character converted.
If the
.IR count
is larger than the number of characters after the cursor, this shall
not be considered an error; the cursor shall advance to the last
character on the line.
.IP "\fB[\fIcount\fB].\fR" 10
Repeat the most recent non-motion command, even if it was executed on
an earlier command line. If the previous command was preceded by a
.IR count ,
and no count is given on the
.BR '.' 
command, the count from the previous command shall be included as part
of the repeated command. If the
.BR '.' 
command is preceded by a
.IR count ,
this shall override any
.IR count
argument to the previous command. The
.IR count
specified in the
.BR '.' 
command shall become the count for subsequent
.BR '.' 
commands issued without a count.
.IP "\fB[\fInumber\fB]v\fR" 10
Invoke the
.IR vi
editor to edit the current command line in a temporary file. When the
editor exits, the commands in the temporary file shall be executed and
placed in the command history. If a
.IR number
is included, it specifies the command number in the command history to
be edited, rather than the current command line.
.IP "\fB[\fIcount\fB]l\fR\0\0\0(ell)" 10
.sp -0.5v
.IP "\fB[\fIcount\fB]\fR&lt;space&gt;" 10
.br
Move the current cursor position to the next character position. If
the cursor was positioned on the last character of the line, the
terminal shall be alerted and the cursor shall not be advanced. If the
.IR count
is larger than the number of characters after the cursor, this shall
not be considered an error; the cursor shall advance to the last
character on the line.
.IP "\fB[\fIcount\fB]h\fR" 10
Move the current cursor position to the
.IR count th
(default 1) previous character position. If the cursor was positioned
on the first character of the line, the terminal shall be alerted and
the cursor shall not be moved. If the count is larger than the number
of characters before the cursor, this shall not be considered an error;
the cursor shall move to the first character on the line.
.IP "\fB[\fIcount\fB]w\fR" 10
Move to the start of the next word. If the cursor was positioned on
the last character of the line, the terminal shall be alerted and the
cursor shall not be advanced. If the
.IR count
is larger than the number of words after the cursor, this shall not be
considered an error; the cursor shall advance to the last character on
the line.
.IP "\fB[\fIcount\fB]W\fR" 10
Move to the start of the next bigword. If the cursor was positioned on
the last character of the line, the terminal shall be alerted and the
cursor shall not be advanced. If the
.IR count
is larger than the number of bigwords after the cursor, this shall not
be considered an error; the cursor shall advance to the last character
on the line.
.IP "\fB[\fIcount\fB]e\fR" 10
Move to the end of the current word. If at the end of a word, move to
the end of the next word. If the cursor was positioned on the last
character of the line, the terminal shall be alerted and the cursor
shall not be advanced. If the
.IR count
is larger than the number of words after the cursor, this shall not be
considered an error; the cursor shall advance to the last character on
the line.
.IP "\fB[\fIcount\fB]E\fR" 10
Move to the end of the current bigword. If at the end of a bigword,
move to the end of the next bigword. If the cursor was positioned on
the last character of the line, the terminal shall be alerted and the
cursor shall not be advanced. If the
.IR count
is larger than the number of bigwords after the cursor, this shall not
be considered an error; the cursor shall advance to the last character
on the line.
.IP "\fB[\fIcount\fB]b\fR" 10
Move to the beginning of the current word. If at the beginning of a
word, move to the beginning of the previous word. If the cursor was
positioned on the first character of the line, the terminal shall be
alerted and the cursor shall not be moved. If the
.IR count
is larger than the number of words preceding the cursor, this shall not
be considered an error; the cursor shall return to the first character
on the line.
.IP "\fB[\fIcount\fB]B\fR" 10
Move to the beginning of the current bigword. If at the beginning of a
bigword, move to the beginning of the previous bigword. If the cursor
was positioned on the first character of the line, the terminal shall
be alerted and the cursor shall not be moved. If the
.IR count
is larger than the number of bigwords preceding the cursor, this shall
not be considered an error; the cursor shall return to the first
character on the line.
.IP "\fB^\fR" 10
Move the current cursor position to the first character on the input
line that is not a
&lt;blank&gt;.
.IP "\fB$\fR" 10
Move to the last character position on the current command line.
.IP "\fB0\fR" 10
(Zero.) Move to the first character position on the current command
line.
.IP "\fB[\fIcount\fB]\||\fR" 10
Move to the
.IR count th
character position on the current command line. If no number is
specified, move to the first position. The first character position
shall be numbered 1. If the count is larger than the number of
characters on the line, this shall not be considered an error; the
cursor shall be placed on the last character on the line.
.IP "\fB[\fIcount\fB]f\fIc\fR" 10
Move to the first occurrence of the character
.BR 'c' 
that occurs after the current cursor position. If the cursor was
positioned on the last character of the line, the terminal shall be
alerted and the cursor shall not be advanced. If the character
.BR 'c' 
does not occur in the line after the current cursor position, the
terminal shall be alerted and the cursor shall not be moved.
.IP "\fB[\fIcount\fB]F\fIc\fR" 10
Move to the first occurrence of the character
.BR 'c' 
that occurs before the current cursor position. If the cursor was
positioned on the first character of the line, the terminal shall be
alerted and the cursor shall not be moved. If the character
.BR 'c' 
does not occur in the line before the current cursor position, the
terminal shall be alerted and the cursor shall not be moved.
.IP "\fB[\fIcount\fB]t\fIc\fR" 10
Move to the character before the first occurrence of the character
.BR 'c' 
that occurs after the current cursor position. If the cursor was
positioned on the last character of the line, the terminal shall be
alerted and the cursor shall not be advanced. If the character
.BR 'c' 
does not occur in the line after the current cursor position, the
terminal shall be alerted and the cursor shall not be moved.
.IP "\fB[\fIcount\fB]T\fIc\fR" 10
Move to the character after the first occurrence of the character
.BR 'c' 
that occurs before the current cursor position. If the cursor was
positioned on the first character of the line, the terminal shall be
alerted and the cursor shall not be moved. If the character
.BR 'c' 
does not occur in the line before the current cursor position, the
terminal shall be alerted and the cursor shall not be moved.
.IP "\fB[\fIcount\fB];\fR" 10
Repeat the most recent
.BR f ,
.BR F ,
.BR t ,
or
.BR T
command. Any number argument on that previous command shall be
ignored. Errors are those described for the repeated command.
.IP "\fB[\fIcount\fB],\fR" 10
Repeat the most recent
.BR f ,
.BR F ,
.BR t ,
or
.BR T
command. Any number argument on that previous command shall be
ignored. However, reverse the direction of that command.
.IP "\fBa\fR" 10
Enter insert mode after the current cursor position. Characters that
are entered shall be inserted before the next character.
.IP "\fBA\fR" 10
Enter insert mode after the end of the current command line.
.IP "\fBi\fR" 10
Enter insert mode at the current cursor position. Characters that are
entered shall be inserted before the current character.
.IP "\fBI\fR" 10
Enter insert mode at the beginning of the current command line.
.IP "\fBR\fR" 10
Enter insert mode, replacing characters from the command line beginning
at the current cursor position.
.IP "\fB[\fIcount\fB]c\fImotion\fR" 10
.br
Delete the characters between the current cursor position and the
cursor position that would result from the specified motion
command. Then enter insert mode before the first character following
any deleted characters. If
.IR count
is specified, it shall be applied to the motion command. A
.IR count
shall be ignored for the following motion commands:
.RS 10 
.sp
.RS 4
.nf
\fB
0    ^    $    c
.fi \fR
.P
.RE
.P
If the motion command is the character
.BR 'c' ,
the current command line shall be cleared and insert mode shall be
entered. If the motion command would move the current cursor position
toward the beginning of the command line, the character under the
current cursor position shall not be deleted. If the motion command
would move the current cursor position toward the end of the command
line, the character under the current cursor position shall be deleted.
If the
.IR count
is larger than the number of characters between the current cursor
position and the end of the command line toward which the motion
command would move the cursor, this shall not be considered an error;
all of the remaining characters in the aforementioned range shall be
deleted and insert mode shall be entered. If the motion command is
invalid, the terminal shall be alerted, the cursor shall not be moved,
and no text shall be deleted.
.RE
.IP "\fBC\fR" 10
Delete from the current character to the end of the line and enter
insert mode at the new end-of-line.
.IP "\fBS\fR" 10
Clear the entire edit line and enter insert mode.
.IP "\fB[\fIcount\fB]r\fIc\fR" 10
Replace the current character with the character
.BR 'c' .
With a number
.IR count ,
replace the current and the following
.IR count \(mi1
characters. After this command, the current cursor position shall be
on the last character that was changed. If the
.IR count
is larger than the number of characters after the cursor, this shall
not be considered an error; all of the remaining characters shall be
changed.
.IP "\fB[\fIcount\fB]_\fR" 10
Append a
&lt;space&gt;
after the current character position and then append the last bigword
in the previous input line after the
&lt;space&gt;.
Then enter insert mode after the last character just appended. With a
number
.IR count ,
append the
.IR count th
bigword in the previous line.
.IP "\fB[\fIcount\fB]x\fR" 10
Delete the character at the current cursor position and place the
deleted characters in the save buffer. If the cursor was positioned on
the last character of the line, the character shall be deleted and the
cursor position shall be moved to the previous character (the new last
character). If the
.IR count
is larger than the number of characters after the cursor, this shall
not be considered an error; all the characters from the cursor to the
end of the line shall be deleted.
.IP "\fB[\fIcount\fB]X\fR" 10
Delete the character before the current cursor position and place the
deleted characters in the save buffer. The character under the current
cursor position shall not change. If the cursor was positioned on the
first character of the line, the terminal shall be alerted, and the
.BR X
command shall have no effect. If the line contained a single
character, the
.BR X
command shall have no effect. If the line contained no characters, the
terminal shall be alerted and the cursor shall not be moved. If the
.IR count
is larger than the number of characters before the cursor, this shall
not be considered an error; all the characters from before the cursor
to the beginning of the line shall be deleted.
.IP "\fB[\fIcount\fB]d\fImotion\fR" 10
.br
Delete the characters between the current cursor position and the
character position that would result from the motion command. A number
.IR count
repeats the motion command
.IR count
times. If the motion command would move toward the beginning of the
command line, the character under the current cursor position shall not
be deleted. If the motion command is
.BR d ,
the entire current command line shall be cleared. If the
.IR count
is larger than the number of characters between the current cursor
position and the end of the command line toward which the motion
command would move the cursor, this shall not be considered an error;
all of the remaining characters in the aforementioned range shall be
deleted. The deleted characters shall be placed in the save buffer.
.IP "\fBD\fR" 10
Delete all characters from the current cursor position to the end of
the line. The deleted characters shall be placed in the save buffer.
.IP "\fB[\fIcount\fB]y\fImotion\fR" 10
.br
Yank (that is, copy) the characters from the current cursor position to
the position resulting from the motion command into the save buffer. A
number
.IR count
shall be applied to the motion command. If the motion command would
move toward the beginning of the command line, the character under the
current cursor position shall not be included in the set of yanked
characters. If the motion command is
.BR y ,
the entire current command line shall be yanked into the save buffer.
The current cursor position shall be unchanged. If the
.IR count
is larger than the number of characters between the current cursor
position and the end of the command line toward which the motion
command would move the cursor, this shall not be considered an error;
all of the remaining characters in the aforementioned range shall be
yanked.
.IP "\fBY\fR" 10
Yank the characters from the current cursor position to the end of the
line into the save buffer. The current character position shall be
unchanged.
.IP "\fB[\fIcount\fB]p\fR" 10
Put a copy of the current contents of the save buffer after the current
cursor position. The current cursor position shall be advanced to the
last character put from the save buffer. A
.IR count
shall indicate how many copies of the save buffer shall be put.
.IP "\fB[\fIcount\fB]P\fR" 10
Put a copy of the current contents of the save buffer before the
current cursor position. The current cursor position shall be moved to
the last character put from the save buffer. A
.IR count
shall indicate how many copies of the save buffer shall be put.
.IP "\fBu\fR" 10
Undo the last command that changed the edit line. This operation shall
not undo the copy of any command line to the edit line.
.IP "\fBU\fR" 10
Undo all changes made to the edit line. This operation shall not undo
the copy of any command line to the edit line.
.IP "\fB[\fIcount\fB]k\fR" 10
.sp -0.5v
.IP "\fB[\fIcount\fB]\(mi\fR" 10
Set the current command line to be the
.IR count th
previous command line in the shell command history. If
.IR count
is not specified, it shall default to 1. The cursor shall be positioned
on the first character of the new command. If a
.BR k
or
.BR \(mi
command would retreat past the maximum number of commands in effect for
this shell (affected by the
.IR HISTSIZE
environment variable), the terminal shall be alerted, and the command
shall have no effect.
.IP "\fB[\fIcount\fB]j\fR" 10
.sp -0.5v
.IP "\fB[\fIcount\fB]+\fR" 10
Set the current command line to be the
.IR count th
next command line in the shell command history. If
.IR count
is not specified, it shall default to 1. The cursor shall be positioned
on the first character of the new command. If a
.BR j
or
.BR +
command advances past the edit line, the current command line shall be
restored to the edit line and the terminal shall be alerted.
.IP "\fB[\fInumber\fB]G\fR" 10
Set the current command line to be the oldest command line stored in
the shell command history. With a number
.IR number ,
set the current command line to be the command line
.IR number
in the history. If command line
.IR number
does not exist, the terminal shall be alerted and the command line
shall not be changed.
.IP "\fB/\fIpattern\fR&lt;newline&gt;" 10
.br
Move backwards through the command history, searching for the specified
pattern, beginning with the previous command line. Patterns use the
pattern matching notation described in
.IR "Section 2.13" ", " "Pattern Matching Notation",
except that the
.BR '^' 
character shall have special meaning when it appears as the first
character of
.IR pattern .
In this case, the
.BR '^' 
is discarded and the characters after the
.BR '^' 
shall be matched only at the beginning of a line. Commands in the
command history shall be treated as strings, not as filenames. If the
pattern is not found, the current command line shall be unchanged and
the terminal is alerted. If it is found in a previous line, the current
command line shall be set to that line and the cursor shall be set to
the first character of the new command line.
.RS 10 
.P
If
.IR pattern
is empty, the last non-empty pattern provided to
.BR /
or
.BR ?
shall be used. If there is no previous non-empty pattern, the terminal
shall be alerted and the current command line shall remain unchanged.
.RE
.IP "\fB?\fIpattern\fR&lt;newline&gt;" 10
.br
Move forwards through the command history, searching for the specified
pattern, beginning with the next command line. Patterns use the pattern
matching notation described in
.IR "Section 2.13" ", " "Pattern Matching Notation",
except that the
.BR '^' 
character shall have special meaning when it appears as the first
character of
.IR pattern .
In this case, the
.BR '^' 
is discarded and the characters after the
.BR '^' 
shall be matched only at the beginning of a line. Commands in the
command history shall be treated as strings, not as filenames. If the
pattern is not found, the current command line shall be unchanged and
the terminal alerted. If it is found in a following line, the current
command line shall be set to that line and the cursor shall be set to
the fist character of the new command line.
.RS 10 
.P
If
.IR pattern
is empty, the last non-empty pattern provided to
.BR /
or
.BR ?
shall be used. If there is no previous non-empty pattern, the terminal
shall be alerted and the current command line shall remain unchanged.
.RE
.IP "\fBn\fR" 10
Repeat the most recent
.BR /
or
.BR ?
command. If there is no previous
.BR /
or
.BR ? ,
the terminal shall be alerted and the current command line shall remain
unchanged.
.IP "\fBN\fR" 10
Repeat the most recent
.BR /
or
.BR ?
command, reversing the direction of the search. If there is no previous
.BR /
or
.BR ? ,
the terminal shall be alerted and the current command line shall remain
unchanged.
.SH "EXIT STATUS"
The following exit values shall be returned:
.IP "\0\0\0\00" 8
The script to be executed consisted solely of zero or more blank lines
or comments, or both.
.IP "1\(hy125" 8
A non-interactive shell detected an error other than
.IR command_file
not found, including but not limited to syntax, redirection, or variable
assignment errors.
.IP "\0\0127" 8
A specified
.IR command_file
could not be found by a non-interactive shell.
.P
Otherwise, the shell shall return the exit status of the last command
it invoked or attempted to invoke (see also the
.IR exit
utility in
.IR "Section 2.14" ", " "Special Built-In Utilities").
.SH "CONSEQUENCES OF ERRORS"
See
.IR "Section 2.8.1" ", " "Consequences of Shell Errors".
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
Standard input and standard error are the files that
determine whether a shell is interactive when
.BR \(mii
is not specified. For example:
.sp
.RS 4
.nf
\fB
sh &gt; file
.fi \fR
.P
.RE
.P
and:
.sp
.RS 4
.nf
\fB
sh 2&gt; file
.fi \fR
.P
.RE
.P
create interactive and non-interactive shells, respectively. Although
both accept terminal input, the results of error conditions are
different, as described in
.IR "Section 2.8.1" ", " "Consequences of Shell Errors";
in the second example a redirection error encountered by a special
built-in utility aborts the shell.
.P
A conforming application must protect its first operand, if it starts
with a
&lt;plus-sign&gt;,
by preceding it with the
.BR \(dq\(mi\|\(mi\(dq 
argument that denotes the end of the options.
.P
Applications should note that the standard
.IR PATH
to the shell cannot be assumed to be either
.BR /bin/sh
or
.BR /usr/bin/sh ,
and should be determined by interrogation of the
.IR PATH
returned by
.IR getconf
.IR PATH ,
ensuring that the returned pathname is an absolute pathname and not a
shell built-in.
.P
For example, to determine the location of the standard
.IR sh
utility:
.sp
.RS 4
.nf
\fB
command \(miv sh
.fi \fR
.P
.RE
.P
On some implementations this might return:
.sp
.RS 4
.nf
\fB
/usr/xpg4/bin/sh
.fi \fR
.P
.RE
.P
Furthermore, on systems that support executable scripts (the
.BR \(dq#!\(dq 
construct), it is recommended that applications using executable
scripts install them using
.IR getconf
.IR PATH
to determine the shell pathname and update the
.BR \(dq#!\(dq 
script appropriately as it is being installed (for example, with
.IR sed ).
For example:
.sp
.RS 4
.nf
\fB
#
# Installation time script to install correct POSIX shell pathname
#
# Get list of paths to check
#
Sifs=$IFS
Sifs_set=${IFS+y}
IFS=:
set \(mi\|\(mi $(getconf PATH)
if [ "$Sifs_set" = y ]
then
IFS=$Sifs
else
unset IFS
fi
#
# Check each path for 'sh'
#
for i
do
if [ \(mix "${i}"/sh ]
then
Pshell=${i}/sh
fi
done
#
# This is the list of scripts to update. They should be of the
# form '${name}.source' and will be transformed to '${name}'.
# Each script should begin:
#
# #!INSTALLSHELLPATH
#
scripts="a b c"
#
# Transform each script
#
for i in ${scripts}
do
sed \(mie "s|INSTALLSHELLPATH|${Pshell}|" &lt; ${i}.source &gt; ${i}
done
.fi \fR
.P
.RE
.SH EXAMPLES
.IP " 1." 4
Execute a shell command from a string:
.RS 4 
.sp
.RS 4
.nf
\fB
sh \(mic "cat myfile"
.fi \fR
.P
.RE
.RE
.IP " 2." 4
Execute a shell script from a file in the current directory:
.RS 4 
.sp
.RS 4
.nf
\fB
sh my_shell_cmds
.fi \fR
.P
.RE
.RE
.SH RATIONALE
The
.IR sh
utility and the
.IR set
special built-in utility share a common set of options.
.P
The name
.IR IFS
was originally an abbreviation of ``Input Field Separators''; however,
this name is misleading as the
.IR IFS
characters are actually used as field terminators. The KornShell
ignores the contents of
.IR IFS
upon entry to the script. A conforming application cannot rely on
importing
.IR IFS .
One justification for this, beyond security considerations, is to
assist possible future shell compilers. Allowing
.IR IFS
to be imported from the environment prevents many optimizations that
might otherwise be performed via dataflow analysis of the script
itself.
.P
The text in the STDIN section about non-blocking reads concerns an
instance of
.IR sh
that has been invoked, probably by a C-language program, with standard
input that has been opened using the O_NONBLOCK flag; see
\fIopen\fR()
in the System Interfaces volume of POSIX.1\(hy2008. If the shell did not reset this flag, it would
immediately terminate because no input data would be available yet and
that would be considered the same as end-of-file.
.P
The options associated with a
.IR "restricted shell"
(command name
.IR rsh
and the
.BR \(mir
option) were excluded because the standard developers considered that
the implied level of security could not be achieved and they did not
want to raise false expectations.
.P
On systems that support set-user-ID scripts,
a historical trapdoor has been to link a script to the name
.BR \(mii .
When it is called by a sequence such as:
.sp
.RS 4
.nf
\fB
sh \(mi
.fi \fR
.P
.RE
.P
or by:
.sp
.RS 4
.nf
\fB
#!\ usr/bin/sh\ \(mi
.fi \fR
.P
.RE
.P
the historical systems have assumed that no option letters follow.
Thus, this volume of POSIX.1\(hy2008 allows the single
&lt;hyphen&gt;
to mark the end of the options, in addition to the use of the regular
.BR \(dq\(mi\|\(mi\(dq 
argument, because it was considered that the older practice was so
pervasive. An alternative approach is taken by the KornShell, where
real and effective user/group IDs must match for an interactive shell;
this behavior is specifically allowed by this volume of POSIX.1\(hy2008.
.TP 10
.BR Note:
There are other problems with set-user-ID scripts that the two
approaches described here do not resolve.
.P
.P
The initialization process for the history file can be dependent on the
system start-up files, in that they may contain commands that
effectively preempt the user's settings of
.IR HISTFILE
and
.IR HISTSIZE .
For example, function definition commands are recorded in the history
file, unless the
.IR set
.BR \(mio
.IR nolog
option is set. If the system administrator includes function
definitions in some system start-up file called before the
.IR ENV
file, the history file is initialized before the user gets a chance to
influence its characteristics. In some historical shells, the history
file is initialized just after the
.IR ENV
file has been processed. Therefore, it is implementation-defined
whether changes made to
.IR HISTFILE
after the history file has been initialized are effective.
.P
The default messages for the various
.IR MAIL -related
messages are unspecified because they vary across implementations.
Typical messages are:
.sp
.RS 4
.nf
\fB
"you have mail\en"
.fi \fR
.P
.RE
.P
or:
.sp
.RS 4
.nf
\fB
"you have new mail\en"
.fi \fR
.P
.RE
.P
It is important that the descriptions of command line editing refer to
the same shell as that in POSIX.1\(hy2008 so that interactive users can also be
application programmers without having to deal with programmatic
differences in their two environments. It is also essential that the
utility name
.IR sh
be specified because this explicit utility name is too firmly rooted in
historical practice of application programs for it to change.
.P
Consideration was given to mandating a diagnostic message when
attempting to set
.IR vi -mode
on terminals that do not support command line editing. However, it is
not historical practice for the shell to be cognizant of all terminal
types and thus be able to detect inappropriate terminals in all cases.
Implementations are encouraged to supply diagnostics in this case
whenever possible, rather than leaving the user in a state where
editing commands work incorrectly.
.P
In early proposals, the KornShell-derived
.IR emacs
mode of command line editing was included, even though the
.IR emacs
editor itself was not. The community of
.IR emacs
proponents was adamant that the full
.IR emacs
editor not be standardized because they were concerned that an attempt
to standardize this very powerful environment would encourage vendors
to ship strictly conforming versions lacking the extensibility required
by the community. The author of the original
.IR emacs
program also expressed his desire to omit the program. Furthermore,
there were a number of historical systems that did not include
.IR emacs ,
or included it without supporting it, but there were very few that did
not include and support
.IR vi .
The shell
.IR emacs
command line editing mode was finally omitted because it became
apparent that the KornShell version and the editor being distributed
with the GNU system had diverged in some respects. The author of
.IR emacs
requested that the POSIX
.IR emacs
mode either be deleted or have a significant number of unspecified
conditions. Although the KornShell author agreed to consider changes to
bring the shell into alignment, the standard developers decided to
defer specification at that time. At the time, it was assumed that
convergence on an acceptable definition would occur for a subsequent
draft, but that has not happened, and there appears to be no impetus to
do so. In any case, implementations are free to offer additional
command line editing modes based on the exact models of editors their
users are most comfortable with.
.P
Early proposals had the following list entry in
.IR "vi Line Editing Insert Mode":
.IP "\fR\e\fR" 6
If followed by the
.IR erase
or
.IR kill
character, that character shall be inserted into the input line.
Otherwise, the
&lt;backslash&gt;
itself shall be inserted into the input line.
.P
However, this is not actually a feature of
.IR sh
command line editing insert mode, but one of some historical terminal
line drivers. Some conforming implementations continue to do this when
the
.IR stty
.BR iexten
flag is set.
.P
In interactive shells, SIGTERM is ignored so that
.IR "kill 0"
does not kill the shell, and SIGINT is caught so that
.IR wait
is interruptible. If the shell does not ignore SIGTTIN, SIGTTOU, and
SIGTSTP signals when it is interactive and the
.BR \(mim
option is not in effect, these signals suspend the shell if it is not
a session leader. If it is a session leader, the signals are discarded
if they would stop the process, as required by the System Interfaces volume of POSIX.1\(hy2008,
.IR "Section 2.4.3" ", " "Signal Actions"
for orphaned process groups.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "Chapter 2" ", " "Shell Command Language",
.IR "\fIcd\fR\^",
.IR "\fIecho\fR\^",
.IR "\fIexit\fR\^",
.IR "\fIfc\fR\^",
.IR "\fIpwd\fR\^",
.IR "invalid",
.IR "\fIset\fR\^",
.IR "\fIstty\fR\^",
.IR "\fItest\fR\^",
.IR "\fItrap\fR\^",
.IR "\fIumask\fR\^",
.IR "\fIvi\fR\^"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "Chapter 8" ", " "Environment Variables",
.IR "Section 12.2" ", " "Utility Syntax Guidelines"
.P
The System Interfaces volume of POSIX.1\(hy2008,
.IR "\fIdup\fR\^(\|)",
.IR "\fIexec\fR\^",
.IR "\fIexit\fR\^(\|)",
.IR "\fIfork\fR\^(\|)",
.IR "\fIopen\fR\^(\|)",
.IR "\fIpipe\fR\^(\|)",
.IR "\fIsignal\fR\^(\|)",
.IR "\fIsystem\fR\^(\|)",
.IR "\fIulimit\fR\^(\|)",
.IR "\fIumask\fR\^(\|)",
.IR "\fIwait\fR\^(\|)"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
'\" et
.TH SHIFT "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
shift
\(em shift positional parameters
.SH SYNOPSIS
.LP
.nf
shift \fB[\fIn\fB]\fR
.fi
.SH DESCRIPTION
The positional parameters shall be shifted. Positional parameter 1
shall be assigned the value of parameter (1+\fIn\fP), parameter 2 shall
be assigned the value of parameter (2+\fIn\fP), and so on. The
parameters represented by the numbers
.BR \(dq$#\(dq 
down to
.BR \(dq$#\(min+1\(dq 
shall be unset, and the parameter
.BR '#' 
is updated to reflect the new number of positional parameters.
.P
The value
.IR n
shall be an unsigned decimal integer less than or equal to the value of
the special parameter
.BR '#' .
If
.IR n
is not given, it shall be assumed to be 1. If
.IR n
is 0, the positional and special parameters are not changed.
.SH OPTIONS
None.
.SH OPERANDS
See the DESCRIPTION.
.SH STDIN
Not used.
.SH "INPUT FILES"
None.
.SH "ENVIRONMENT VARIABLES"
None.
.SH "ASYNCHRONOUS EVENTS"
Default.
.SH STDOUT
Not used.
.SH STDERR
The standard error shall be used only for diagnostic messages.
.SH "OUTPUT FILES"
None.
.SH "EXTENDED DESCRIPTION"
None.
.SH "EXIT STATUS"
If the
.IR n
operand is invalid or is greater than
.BR \(dq$#\(dq ,
this may be considered a syntax error and a non-interactive shell may
exit; if the shell does not exit in this case, a non-zero exit status
shall be returned. Otherwise, zero shall be returned.
.SH "CONSEQUENCES OF ERRORS"
Default.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
None.
.SH EXAMPLES
.LP
.nf
\fB$\fR set a b c d e
\fB$\fR shift 2
\fB$\fR echo $*
\fBc d e\fR
.fi
.SH "RATIONALE"
None.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "Section 2.14" ", " "Special Built-In Utilities"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.
.TH SLEEP "1" "March 2017" "GNU coreutils 8.27" "User Commands"
.SH NAME
sleep \- delay for a specified amount of time
.SH SYNOPSIS
.B sleep
\fI\,NUMBER\/\fR[\fI\,SUFFIX\/\fR]...
.br
.B sleep
\fI\,OPTION\/\fR
.SH DESCRIPTION
.\" Add any additional description here
.PP
Pause for NUMBER seconds.  SUFFIX may be 's' for seconds (the default),
\&amp;'m' for minutes, 'h' for hours or 'd' for days.  Unlike most implementations
that require NUMBER be an integer, here NUMBER may be an arbitrary floating
point number.  Given two or more arguments, pause for the amount of time
specified by the sum of their values.
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-\-version\fR
output version information and exit
.SH AUTHOR
Written by Jim Meyering and Paul Eggert.
.SH "REPORTING BUGS"
GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt;
.br
Report sleep translation bugs to &lt;http://translationproject.org/team/&gt;
.SH COPYRIGHT
Copyright \(co 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
sleep(3)
.PP
.br
Full documentation at: &lt;http://www.gnu.org/software/coreutils/sleep&gt;
.br
or available locally via: info \(aq(coreutils) sleep invocation\(aq
.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.
.TH SORT "1" "March 2017" "GNU coreutils 8.27" "User Commands"
.SH NAME
sort \- sort lines of text files
.SH SYNOPSIS
.B sort
[\fI\,OPTION\/\fR]... [\fI\,FILE\/\fR]...
.br
.B sort
[\fI\,OPTION\/\fR]... \fI\,--files0-from=F\/\fR
.SH DESCRIPTION
.\" Add any additional description here
.PP
Write sorted concatenation of all FILE(s) to standard output.
.PP
With no FILE, or when FILE is \-, read standard input.
.PP
Mandatory arguments to long options are mandatory for short options too.
Ordering options:
.TP
\fB\-b\fR, \fB\-\-ignore\-leading\-blanks\fR
ignore leading blanks
.TP
\fB\-d\fR, \fB\-\-dictionary\-order\fR
consider only blanks and alphanumeric characters
.TP
\fB\-f\fR, \fB\-\-ignore\-case\fR
fold lower case to upper case characters
.TP
\fB\-g\fR, \fB\-\-general\-numeric\-sort\fR
compare according to general numerical value
.TP
\fB\-i\fR, \fB\-\-ignore\-nonprinting\fR
consider only printable characters
.TP
\fB\-M\fR, \fB\-\-month\-sort\fR
compare (unknown) &lt; 'JAN' &lt; ... &lt; 'DEC'
.TP
\fB\-h\fR, \fB\-\-human\-numeric\-sort\fR
compare human readable numbers (e.g., 2K 1G)
.TP
\fB\-n\fR, \fB\-\-numeric\-sort\fR
compare according to string numerical value
.TP
\fB\-R\fR, \fB\-\-random\-sort\fR
shuffle, but group identical keys.  See shuf(1)
.TP
\fB\-\-random\-source\fR=\fI\,FILE\/\fR
get random bytes from FILE
.TP
\fB\-r\fR, \fB\-\-reverse\fR
reverse the result of comparisons
.TP
\fB\-\-sort\fR=\fI\,WORD\/\fR
sort according to WORD:
general\-numeric \fB\-g\fR, human\-numeric \fB\-h\fR, month \fB\-M\fR,
numeric \fB\-n\fR, random \fB\-R\fR, version \fB\-V\fR
.TP
\fB\-V\fR, \fB\-\-version\-sort\fR
natural sort of (version) numbers within text
.PP
Other options:
.TP
\fB\-\-batch\-size\fR=\fI\,NMERGE\/\fR
merge at most NMERGE inputs at once;
for more use temp files
.TP
\fB\-c\fR, \fB\-\-check\fR, \fB\-\-check\fR=\fI\,diagnose\-first\/\fR
check for sorted input; do not sort
.TP
\fB\-C\fR, \fB\-\-check\fR=\fI\,quiet\/\fR, \fB\-\-check\fR=\fI\,silent\/\fR
like \fB\-c\fR, but do not report first bad line
.TP
\fB\-\-compress\-program\fR=\fI\,PROG\/\fR
compress temporaries with PROG;
decompress them with PROG \fB\-d\fR
.TP
\fB\-\-debug\fR
annotate the part of the line used to sort,
and warn about questionable usage to stderr
.TP
\fB\-\-files0\-from\fR=\fI\,F\/\fR
read input from the files specified by
NUL\-terminated names in file F;
If F is \- then read names from standard input
.TP
\fB\-k\fR, \fB\-\-key\fR=\fI\,KEYDEF\/\fR
sort via a key; KEYDEF gives location and type
.TP
\fB\-m\fR, \fB\-\-merge\fR
merge already sorted files; do not sort
.TP
\fB\-o\fR, \fB\-\-output\fR=\fI\,FILE\/\fR
write result to FILE instead of standard output
.TP
\fB\-s\fR, \fB\-\-stable\fR
stabilize sort by disabling last\-resort comparison
.TP
\fB\-S\fR, \fB\-\-buffer\-size\fR=\fI\,SIZE\/\fR
use SIZE for main memory buffer
.TP
\fB\-t\fR, \fB\-\-field\-separator\fR=\fI\,SEP\/\fR
use SEP instead of non\-blank to blank transition
.TP
\fB\-T\fR, \fB\-\-temporary\-directory\fR=\fI\,DIR\/\fR
use DIR for temporaries, not $TMPDIR or \fI\,/tmp\/\fP;
multiple options specify multiple directories
.TP
\fB\-\-parallel\fR=\fI\,N\/\fR
change the number of sorts run concurrently to N
.TP
\fB\-u\fR, \fB\-\-unique\fR
with \fB\-c\fR, check for strict ordering;
without \fB\-c\fR, output only the first of an equal run
.TP
\fB\-z\fR, \fB\-\-zero\-terminated\fR
line delimiter is NUL, not newline
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-\-version\fR
output version information and exit
.PP
KEYDEF is F[.C][OPTS][,F[.C][OPTS]] for start and stop position, where F is a
field number and C a character position in the field; both are origin 1, and
the stop position defaults to the line's end.  If neither \fB\-t\fR nor \fB\-b\fR is in
effect, characters in a field are counted from the beginning of the preceding
whitespace.  OPTS is one or more single\-letter ordering options [bdfgiMhnRrV],
which override global ordering options for that key.  If no key is given, use
the entire line as the key.  Use \fB\-\-debug\fR to diagnose incorrect key usage.
.PP
SIZE may be followed by the following multiplicative suffixes:
% 1% of memory, b 1, K 1024 (default), and so on for M, G, T, P, E, Z, Y.
.PP
*** WARNING ***
The locale specified by the environment affects sort order.
Set LC_ALL=C to get the traditional sort order that uses
native byte values.
.SH AUTHOR
Written by Mike Haertel and Paul Eggert.
.SH "REPORTING BUGS"
GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt;
.br
Report sort translation bugs to &lt;http://translationproject.org/team/&gt;
.SH COPYRIGHT
Copyright \(co 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
shuf(1), uniq(1)
.PP
.br
Full documentation at: &lt;http://www.gnu.org/software/coreutils/sort&gt;
.br
or available locally via: info \(aq(coreutils) sort invocation\(aq
.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.
.TH SPLIT "1" "March 2017" "GNU coreutils 8.27" "User Commands"
.SH NAME
split \- split a file into pieces
.SH SYNOPSIS
.B split
[\fI\,OPTION\/\fR]... [\fI\,FILE \/\fR[\fI\,PREFIX\/\fR]]
.SH DESCRIPTION
.\" Add any additional description here
.PP
Output pieces of FILE to PREFIXaa, PREFIXab, ...;
default size is 1000 lines, and default PREFIX is 'x'.
.PP
With no FILE, or when FILE is \-, read standard input.
.PP
Mandatory arguments to long options are mandatory for short options too.
.TP
\fB\-a\fR, \fB\-\-suffix\-length\fR=\fI\,N\/\fR
generate suffixes of length N (default 2)
.TP
\fB\-\-additional\-suffix\fR=\fI\,SUFFIX\/\fR
append an additional SUFFIX to file names
.TP
\fB\-b\fR, \fB\-\-bytes\fR=\fI\,SIZE\/\fR
put SIZE bytes per output file
.TP
\fB\-C\fR, \fB\-\-line\-bytes\fR=\fI\,SIZE\/\fR
put at most SIZE bytes of records per output file
.TP
\fB\-d\fR
use numeric suffixes starting at 0, not alphabetic
.TP
\fB\-\-numeric\-suffixes\fR[=\fI\,FROM\/\fR]
same as \fB\-d\fR, but allow setting the start value
.TP
\fB\-e\fR, \fB\-\-elide\-empty\-files\fR
do not generate empty output files with '\-n'
.TP
\fB\-\-filter\fR=\fI\,COMMAND\/\fR
write to shell COMMAND; file name is $FILE
.TP
\fB\-l\fR, \fB\-\-lines\fR=\fI\,NUMBER\/\fR
put NUMBER lines/records per output file
.TP
\fB\-n\fR, \fB\-\-number\fR=\fI\,CHUNKS\/\fR
generate CHUNKS output files; see explanation below
.TP
\fB\-t\fR, \fB\-\-separator\fR=\fI\,SEP\/\fR
use SEP instead of newline as the record separator;
\&amp;'\e0' (zero) specifies the NUL character
.TP
\fB\-u\fR, \fB\-\-unbuffered\fR
immediately copy input to output with '\-n r/...'
.TP
\fB\-\-verbose\fR
print a diagnostic just before each
output file is opened
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-\-version\fR
output version information and exit
.PP
The SIZE argument is an integer and optional unit (example: 10K is 10*1024).
Units are K,M,G,T,P,E,Z,Y (powers of 1024) or KB,MB,... (powers of 1000).
.SS "CHUNKS may be:"
.TP
N
split into N files based on size of input
.TP
K/N
output Kth of N to stdout
.TP
l/N
split into N files without splitting lines/records
.TP
l/K/N
output Kth of N to stdout without splitting lines/records
.TP
r/N
like 'l' but use round robin distribution
.TP
r/K/N
likewise but only output Kth of N to stdout
.SH AUTHOR
Written by Torbjorn Granlund and Richard M. Stallman.
.SH "REPORTING BUGS"
GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt;
.br
Report split translation bugs to &lt;http://translationproject.org/team/&gt;
.SH COPYRIGHT
Copyright \(co 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
Full documentation at: &lt;http://www.gnu.org/software/coreutils/split&gt;
.br
or available locally via: info \(aq(coreutils) split invocation\(aq
.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C&lt;&gt;.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&amp;(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&amp;(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X&lt;&gt; in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&amp;
.    ds #] \&amp;
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&amp;
.    ds ` \&amp;
.    ds ^ \&amp;
.    ds , \&amp;
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H&gt;23 .if \n(.V&gt;19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "STRINGS 1"
.TH STRINGS 1 "2017-03-02" "binutils-2.28" "GNU Development Tools"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
strings \- print the strings of printable characters in files.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
strings [\fB\-afovV\fR] [\fB\-\fR\fImin-len\fR]
[\fB\-n\fR \fImin-len\fR] [\fB\-\-bytes=\fR\fImin-len\fR]
[\fB\-t\fR \fIradix\fR] [\fB\-\-radix=\fR\fIradix\fR]
[\fB\-e\fR \fIencoding\fR] [\fB\-\-encoding=\fR\fIencoding\fR]
[\fB\-\fR] [\fB\-\-all\fR] [\fB\-\-print\-file\-name\fR]
[\fB\-T\fR \fIbfdname\fR] [\fB\-\-target=\fR\fIbfdname\fR]
[\fB\-w\fR] [\fB\-\-include\-all\-whitespace\fR]
[\fB\-s\fR] [\fB\-\-output\-separator\fR\fIsep_string\fR]
[\fB\-\-help\fR] [\fB\-\-version\fR] \fIfile\fR...
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
For each \fIfile\fR given, \s-1GNU \s0\fBstrings\fR prints the
printable character sequences that are at least 4 characters long (or
the number given with the options below) and are followed by an
unprintable character.
.PP
Depending upon how the strings program was configured it will default
to either displaying all the printable sequences that it can find in
each file, or only those sequences that are in loadable, initialized
data sections.  If the file type in unrecognizable, or if strings is
reading from stdin then it will always display all of the printable
sequences that it can find.
.PP
For backwards compatibility any file that occurs after a command line
option of just \fB\-\fR will also be scanned in full, regardless of
the presence of any \fB\-d\fR option.
.PP
\&amp;\fBstrings\fR is mainly useful for determining the contents of
non-text files.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-a\fR" 4
.IX Item "-a"
.PD 0
.IP "\fB\-\-all\fR" 4
.IX Item "--all"
.IP "\fB\-\fR" 4
.IX Item "-"
.PD
Scan the whole file, regardless of what sections it contains or
whether those sections are loaded or initialized.  Normally this is
the default behaviour, but strings can be configured so that the
\&amp;\fB\-d\fR is the default instead.
.Sp
The \fB\-\fR option is position dependent and forces strings to
perform full scans of any file that is mentioned after the \fB\-\fR
on the command line, even if the \fB\-d\fR option has been
specified.
.IP "\fB\-d\fR" 4
.IX Item "-d"
.PD 0
.IP "\fB\-\-data\fR" 4
.IX Item "--data"
.PD
Only print strings from initialized, loaded data sections in the
file.  This may reduce the amount of garbage in the output, but it
also exposes the strings program to any security flaws that may be
present in the \s-1BFD\s0 library used to scan and load sections.  Strings
can be configured so that this option is the default behaviour.  In
such cases the \fB\-a\fR option can be used to avoid using the \s-1BFD\s0
library and instead just print all of the strings found in the file.
.IP "\fB\-f\fR" 4
.IX Item "-f"
.PD 0
.IP "\fB\-\-print\-file\-name\fR" 4
.IX Item "--print-file-name"
.PD
Print the name of the file before each string.
.IP "\fB\-\-help\fR" 4
.IX Item "--help"
Print a summary of the program usage on the standard output and exit.
.IP "\fB\-\fR\fImin-len\fR" 4
.IX Item "-min-len"
.PD 0
.IP "\fB\-n\fR \fImin-len\fR" 4
.IX Item "-n min-len"
.IP "\fB\-\-bytes=\fR\fImin-len\fR" 4
.IX Item "--bytes=min-len"
.PD
Print sequences of characters that are at least \fImin-len\fR characters
long, instead of the default 4.
.IP "\fB\-o\fR" 4
.IX Item "-o"
Like \fB\-t o\fR.  Some other versions of \fBstrings\fR have \fB\-o\fR
act like \fB\-t d\fR instead.  Since we can not be compatible with both
ways, we simply chose one.
.IP "\fB\-t\fR \fIradix\fR" 4
.IX Item "-t radix"
.PD 0
.IP "\fB\-\-radix=\fR\fIradix\fR" 4
.IX Item "--radix=radix"
.PD
Print the offset within the file before each string.  The single
character argument specifies the radix of the offset\-\-\-\fBo\fR for
octal, \fBx\fR for hexadecimal, or \fBd\fR for decimal.
.IP "\fB\-e\fR \fIencoding\fR" 4
.IX Item "-e encoding"
.PD 0
.IP "\fB\-\-encoding=\fR\fIencoding\fR" 4
.IX Item "--encoding=encoding"
.PD
Select the character encoding of the strings that are to be found.
Possible values for \fIencoding\fR are: \fBs\fR = single\-7\-bit\-byte
characters (\s-1ASCII, ISO 8859,\s0 etc., default), \fBS\fR =
single\-8\-bit\-byte characters, \fBb\fR = 16\-bit bigendian, \fBl\fR =
16\-bit littleendian, \fBB\fR = 32\-bit bigendian, \fBL\fR = 32\-bit
littleendian.  Useful for finding wide character strings. (\fBl\fR
and \fBb\fR apply to, for example, Unicode \s-1UTF\-16/UCS\-2\s0 encodings).
.IP "\fB\-T\fR \fIbfdname\fR" 4
.IX Item "-T bfdname"
.PD 0
.IP "\fB\-\-target=\fR\fIbfdname\fR" 4
.IX Item "--target=bfdname"
.PD
Specify an object code format other than your system's default format.
.IP "\fB\-v\fR" 4
.IX Item "-v"
.PD 0
.IP "\fB\-V\fR" 4
.IX Item "-V"
.IP "\fB\-\-version\fR" 4
.IX Item "--version"
.PD
Print the program version number on the standard output and exit.
.IP "\fB\-w\fR" 4
.IX Item "-w"
.PD 0
.IP "\fB\-\-include\-all\-whitespace\fR" 4
.IX Item "--include-all-whitespace"
.PD
By default tab and space characters are included in the strings that
are displayed, but other whitespace characters, such a newlines and
carriage returns, are not.  The \fB\-w\fR option changes this so
that all whitespace characters are considered to be part of a string.
.IP "\fB\-s\fR" 4
.IX Item "-s"
.PD 0
.IP "\fB\-\-output\-separator\fR" 4
.IX Item "--output-separator"
.PD
By default, output strings are delimited by a new-line. This option
allows you to supply any string to be used as the output record
separator.  Useful with \-\-include\-all\-whitespace where strings
may contain new-lines internally.
.IP "\fB@\fR\fIfile\fR" 4
.IX Item "@file"
Read command-line options from \fIfile\fR.  The options read are
inserted in place of the original @\fIfile\fR option.  If \fIfile\fR
does not exist, or cannot be read, then the option will be treated
literally, and not removed.
.Sp
Options in \fIfile\fR are separated by whitespace.  A whitespace
character may be included in an option by surrounding the entire
option in either single or double quotes.  Any character (including a
backslash) may be included by prefixing the character to be included
with a backslash.  The \fIfile\fR may itself contain additional
@\fIfile\fR options; any such options will be processed recursively.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&amp;\fIar\fR\|(1), \fInm\fR\|(1), \fIobjdump\fR\|(1), \fIranlib\fR\|(1), \fIreadelf\fR\|(1)
and the Info entries for \fIbinutils\fR.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1991\-2017 Free Software Foundation, Inc.
.PP
Permission is granted to copy, distribute and/or modify this document
under the terms of the \s-1GNU\s0 Free Documentation License, Version 1.3
or any later version published by the Free Software Foundation;
with no Invariant Sections, with no Front-Cover Texts, and with no
Back-Cover Texts.  A copy of the license is included in the
section entitled \*(L"\s-1GNU\s0 Free Documentation License\*(R".
.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C&lt;&gt;.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&amp;(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&amp;(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X&lt;&gt; in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&amp;
.    ds #] \&amp;
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&amp;
.    ds ` \&amp;
.    ds ^ \&amp;
.    ds , \&amp;
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H&gt;23 .if \n(.V&gt;19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "STRIP 1"
.TH STRIP 1 "2017-03-02" "binutils-2.28" "GNU Development Tools"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
strip \- Discard symbols from object files.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
strip [\fB\-F\fR \fIbfdname\fR |\fB\-\-target=\fR\fIbfdname\fR]
[\fB\-I\fR \fIbfdname\fR |\fB\-\-input\-target=\fR\fIbfdname\fR]
[\fB\-O\fR \fIbfdname\fR |\fB\-\-output\-target=\fR\fIbfdname\fR]
[\fB\-s\fR|\fB\-\-strip\-all\fR]
[\fB\-S\fR|\fB\-g\fR|\fB\-d\fR|\fB\-\-strip\-debug\fR]
[\fB\-\-strip\-dwo\fR]
[\fB\-K\fR \fIsymbolname\fR |\fB\-\-keep\-symbol=\fR\fIsymbolname\fR]
[\fB\-N\fR \fIsymbolname\fR |\fB\-\-strip\-symbol=\fR\fIsymbolname\fR]
[\fB\-w\fR|\fB\-\-wildcard\fR]
[\fB\-x\fR|\fB\-\-discard\-all\fR] [\fB\-X\fR |\fB\-\-discard\-locals\fR]
[\fB\-R\fR \fIsectionname\fR |\fB\-\-remove\-section=\fR\fIsectionname\fR]
[\fB\-\-remove\-relocations=\fR\fIsectionpattern\fR]
[\fB\-o\fR \fIfile\fR] [\fB\-p\fR|\fB\-\-preserve\-dates\fR]
[\fB\-D\fR|\fB\-\-enable\-deterministic\-archives\fR]
[\fB\-U\fR|\fB\-\-disable\-deterministic\-archives\fR]
[\fB\-\-keep\-file\-symbols\fR]
[\fB\-\-only\-keep\-debug\fR]
[\fB\-v\fR |\fB\-\-verbose\fR] [\fB\-V\fR|\fB\-\-version\fR]
[\fB\-\-help\fR] [\fB\-\-info\fR]
\fIobjfile\fR...
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&amp;\s-1GNU \s0\fBstrip\fR discards all symbols from object files
\&amp;\fIobjfile\fR.  The list of object files may include archives.
At least one object file must be given.
.PP
\&amp;\fBstrip\fR modifies the files named in its argument,
rather than writing modified copies under different names.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-F\fR \fIbfdname\fR" 4
.IX Item "-F bfdname"
.PD 0
.IP "\fB\-\-target=\fR\fIbfdname\fR" 4
.IX Item "--target=bfdname"
.PD
Treat the original \fIobjfile\fR as a file with the object
code format \fIbfdname\fR, and rewrite it in the same format.
.IP "\fB\-\-help\fR" 4
.IX Item "--help"
Show a summary of the options to \fBstrip\fR and exit.
.IP "\fB\-\-info\fR" 4
.IX Item "--info"
Display a list showing all architectures and object formats available.
.IP "\fB\-I\fR \fIbfdname\fR" 4
.IX Item "-I bfdname"
.PD 0
.IP "\fB\-\-input\-target=\fR\fIbfdname\fR" 4
.IX Item "--input-target=bfdname"
.PD
Treat the original \fIobjfile\fR as a file with the object
code format \fIbfdname\fR.
.IP "\fB\-O\fR \fIbfdname\fR" 4
.IX Item "-O bfdname"
.PD 0
.IP "\fB\-\-output\-target=\fR\fIbfdname\fR" 4
.IX Item "--output-target=bfdname"
.PD
Replace \fIobjfile\fR with a file in the output format \fIbfdname\fR.
.IP "\fB\-R\fR \fIsectionname\fR" 4
.IX Item "-R sectionname"
.PD 0
.IP "\fB\-\-remove\-section=\fR\fIsectionname\fR" 4
.IX Item "--remove-section=sectionname"
.PD
Remove any section named \fIsectionname\fR from the output file, in
addition to whatever sections would otherwise be removed.  This
option may be given more than once.  Note that using this option
inappropriately may make the output file unusable.  The wildcard
character \fB*\fR may be given at the end of \fIsectionname\fR.  If
so, then any section starting with \fIsectionname\fR will be removed.
.Sp
If the first character of \fIsectionpattern\fR is the exclamation
point (!) then matching sections will not be removed even if an
earlier use of \fB\-\-remove\-section\fR on the same command line
would otherwise remove it.  For example:
.Sp
.Vb 1
\&amp;          \-\-remove\-section=.text.* \-\-remove\-section=!.text.foo
.Ve
.Sp
will remove all sections matching the pattern '.text.*', but will not
remove the section '.text.foo'.
.IP "\fB\-\-remove\-relocations=\fR\fIsectionpattern\fR" 4
.IX Item "--remove-relocations=sectionpattern"
Remove relocations from the output file for any section matching
\&amp;\fIsectionpattern\fR.  This option may be given more than once.  Note
that using this option inappropriately may make the output file
unusable.  Wildcard characters are accepted in \fIsectionpattern\fR.
For example:
.Sp
.Vb 1
\&amp;          \-\-remove\-relocations=.text.*
.Ve
.Sp
will remove the relocations for all sections matching the patter
\&amp;'.text.*'.
.Sp
If the first character of \fIsectionpattern\fR is the exclamation
point (!) then matching sections will not have their relocation
removed even if an earlier use of \fB\-\-remove\-relocations\fR on the
same command line would otherwise cause the relocations to be removed.
For example:
.Sp
.Vb 1
\&amp;          \-\-remove\-relocations=.text.* \-\-remove\-relocations=!.text.foo
.Ve
.Sp
will remove all relocations for sections matching the pattern
\&amp;'.text.*', but will not remove relocations for the section
\&amp;'.text.foo'.
.IP "\fB\-s\fR" 4
.IX Item "-s"
.PD 0
.IP "\fB\-\-strip\-all\fR" 4
.IX Item "--strip-all"
.PD
Remove all symbols.
.IP "\fB\-g\fR" 4
.IX Item "-g"
.PD 0
.IP "\fB\-S\fR" 4
.IX Item "-S"
.IP "\fB\-d\fR" 4
.IX Item "-d"
.IP "\fB\-\-strip\-debug\fR" 4
.IX Item "--strip-debug"
.PD
Remove debugging symbols only.
.IP "\fB\-\-strip\-dwo\fR" 4
.IX Item "--strip-dwo"
Remove the contents of all \s-1DWARF \s0.dwo sections, leaving the
remaining debugging sections and all symbols intact.
See the description of this option in the \fBobjcopy\fR section
for more information.
.IP "\fB\-\-strip\-unneeded\fR" 4
.IX Item "--strip-unneeded"
Remove all symbols that are not needed for relocation processing.
.IP "\fB\-K\fR \fIsymbolname\fR" 4
.IX Item "-K symbolname"
.PD 0
.IP "\fB\-\-keep\-symbol=\fR\fIsymbolname\fR" 4
.IX Item "--keep-symbol=symbolname"
.PD
When stripping symbols, keep symbol \fIsymbolname\fR even if it would
normally be stripped.  This option may be given more than once.
.IP "\fB\-N\fR \fIsymbolname\fR" 4
.IX Item "-N symbolname"
.PD 0
.IP "\fB\-\-strip\-symbol=\fR\fIsymbolname\fR" 4
.IX Item "--strip-symbol=symbolname"
.PD
Remove symbol \fIsymbolname\fR from the source file. This option may be
given more than once, and may be combined with strip options other than
\&amp;\fB\-K\fR.
.IP "\fB\-o\fR \fIfile\fR" 4
.IX Item "-o file"
Put the stripped output in \fIfile\fR, rather than replacing the
existing file.  When this argument is used, only one \fIobjfile\fR
argument may be specified.
.IP "\fB\-p\fR" 4
.IX Item "-p"
.PD 0
.IP "\fB\-\-preserve\-dates\fR" 4
.IX Item "--preserve-dates"
.PD
Preserve the access and modification dates of the file.
.IP "\fB\-D\fR" 4
.IX Item "-D"
.PD 0
.IP "\fB\-\-enable\-deterministic\-archives\fR" 4
.IX Item "--enable-deterministic-archives"
.PD
Operate in \fIdeterministic\fR mode.  When copying archive members
and writing the archive index, use zero for UIDs, GIDs, timestamps,
and use consistent file modes for all files.
.Sp
If \fIbinutils\fR was configured with
\&amp;\fB\-\-enable\-deterministic\-archives\fR, then this mode is on by default.
It can be disabled with the \fB\-U\fR option, below.
.IP "\fB\-U\fR" 4
.IX Item "-U"
.PD 0
.IP "\fB\-\-disable\-deterministic\-archives\fR" 4
.IX Item "--disable-deterministic-archives"
.PD
Do \fInot\fR operate in \fIdeterministic\fR mode.  This is the
inverse of the \fB\-D\fR option, above: when copying archive members
and writing the archive index, use their actual \s-1UID, GID,\s0 timestamp,
and file mode values.
.Sp
This is the default unless \fIbinutils\fR was configured with
\&amp;\fB\-\-enable\-deterministic\-archives\fR.
.IP "\fB\-w\fR" 4
.IX Item "-w"
.PD 0
.IP "\fB\-\-wildcard\fR" 4
.IX Item "--wildcard"
.PD
Permit regular expressions in \fIsymbolname\fRs used in other command
line options.  The question mark (?), asterisk (*), backslash (\e) and
square brackets ([]) operators can be used anywhere in the symbol
name.  If the first character of the symbol name is the exclamation
point (!) then the sense of the switch is reversed for that symbol.
For example:
.Sp
.Vb 1
\&amp;          \-w \-K !foo \-K fo*
.Ve
.Sp
would cause strip to only keep symbols that start with the letters
\&amp;\*(L"fo\*(R", but to discard the symbol \*(L"foo\*(R".
.IP "\fB\-x\fR" 4
.IX Item "-x"
.PD 0
.IP "\fB\-\-discard\-all\fR" 4
.IX Item "--discard-all"
.PD
Remove non-global symbols.
.IP "\fB\-X\fR" 4
.IX Item "-X"
.PD 0
.IP "\fB\-\-discard\-locals\fR" 4
.IX Item "--discard-locals"
.PD
Remove compiler-generated local symbols.
(These usually start with \fBL\fR or \fB.\fR.)
.IP "\fB\-\-keep\-file\-symbols\fR" 4
.IX Item "--keep-file-symbols"
When stripping a file, perhaps with \fB\-\-strip\-debug\fR or
\&amp;\fB\-\-strip\-unneeded\fR, retain any symbols specifying source file names,
which would otherwise get stripped.
.IP "\fB\-\-only\-keep\-debug\fR" 4
.IX Item "--only-keep-debug"
Strip a file, emptying the contents of any sections that would not be
stripped by \fB\-\-strip\-debug\fR and leaving the debugging sections
intact.  In \s-1ELF\s0 files, this preserves all the note sections in the
output as well.
.Sp
Note \- the section headers of the stripped sections are preserved,
including their sizes, but the contents of the section are discarded.
The section headers are preserved so that other tools can match up the
debuginfo file with the real executable, even if that executable has
been relocated to a different address space.
.Sp
The intention is that this option will be used in conjunction with
\&amp;\fB\-\-add\-gnu\-debuglink\fR to create a two part executable.  One a
stripped binary which will occupy less space in \s-1RAM\s0 and in a
distribution and the second a debugging information file which is only
needed if debugging abilities are required.  The suggested procedure
to create these files is as follows:
.RS 4
.IP "1.&lt;Link the executable as normal.  Assuming that is is called&gt;" 4
.IX Item "1.&lt;Link the executable as normal. Assuming that is is called&gt;"
\&amp;\f(CW\*(C`foo\*(C'\fR then...
.ie n .IP "1.&lt;Run ""objcopy \-\-only\-keep\-debug foo foo.dbg"" to&gt;" 4
.el .IP "1.&lt;Run \f(CWobjcopy \-\-only\-keep\-debug foo foo.dbg\fR to&gt;" 4
.IX Item "1.&lt;Run objcopy --only-keep-debug foo foo.dbg to&gt;"
create a file containing the debugging info.
.ie n .IP "1.&lt;Run ""objcopy \-\-strip\-debug foo"" to create a&gt;" 4
.el .IP "1.&lt;Run \f(CWobjcopy \-\-strip\-debug foo\fR to create a&gt;" 4
.IX Item "1.&lt;Run objcopy --strip-debug foo to create a&gt;"
stripped executable.
.ie n .IP "1.&lt;Run ""objcopy \-\-add\-gnu\-debuglink=foo.dbg foo""&gt;" 4
.el .IP "1.&lt;Run \f(CWobjcopy \-\-add\-gnu\-debuglink=foo.dbg foo\fR&gt;" 4
.IX Item "1.&lt;Run objcopy --add-gnu-debuglink=foo.dbg foo&gt;"
to add a link to the debugging info into the stripped executable.
.RE
.RS 4
.Sp
Note\-\-\-the choice of \f(CW\*(C`.dbg\*(C'\fR as an extension for the debug info
file is arbitrary.  Also the \f(CW\*(C`\-\-only\-keep\-debug\*(C'\fR step is
optional.  You could instead do this:
.IP "1.&lt;Link the executable as normal.&gt;" 4
.IX Item "1.&lt;Link the executable as normal.&gt;"
.PD 0
.ie n .IP "1.&lt;Copy ""foo"" to ""foo.full""&gt;" 4
.el .IP "1.&lt;Copy \f(CWfoo\fR to \f(CWfoo.full\fR&gt;" 4
.IX Item "1.&lt;Copy foo to foo.full&gt;"
.ie n .IP "1.&lt;Run ""strip \-\-strip\-debug foo""&gt;" 4
.el .IP "1.&lt;Run \f(CWstrip \-\-strip\-debug foo\fR&gt;" 4
.IX Item "1.&lt;Run strip --strip-debug foo&gt;"
.ie n .IP "1.&lt;Run ""objcopy \-\-add\-gnu\-debuglink=foo.full foo""&gt;" 4
.el .IP "1.&lt;Run \f(CWobjcopy \-\-add\-gnu\-debuglink=foo.full foo\fR&gt;" 4
.IX Item "1.&lt;Run objcopy --add-gnu-debuglink=foo.full foo&gt;"
.RE
.RS 4
.PD
.Sp
i.e., the file pointed to by the \fB\-\-add\-gnu\-debuglink\fR can be the
full executable.  It does not have to be a file created by the
\&amp;\fB\-\-only\-keep\-debug\fR switch.
.Sp
Note\-\-\-this switch is only intended for use on fully linked files.  It
does not make sense to use it on object files where the debugging
information may be incomplete.  Besides the gnu_debuglink feature
currently only supports the presence of one filename containing
debugging information, not multiple filenames on a one-per-object-file
basis.
.RE
.IP "\fB\-V\fR" 4
.IX Item "-V"
.PD 0
.IP "\fB\-\-version\fR" 4
.IX Item "--version"
.PD
Show the version number for \fBstrip\fR.
.IP "\fB\-v\fR" 4
.IX Item "-v"
.PD 0
.IP "\fB\-\-verbose\fR" 4
.IX Item "--verbose"
.PD
Verbose output: list all object files modified.  In the case of
archives, \fBstrip \-v\fR lists all members of the archive.
.IP "\fB@\fR\fIfile\fR" 4
.IX Item "@file"
Read command-line options from \fIfile\fR.  The options read are
inserted in place of the original @\fIfile\fR option.  If \fIfile\fR
does not exist, or cannot be read, then the option will be treated
literally, and not removed.
.Sp
Options in \fIfile\fR are separated by whitespace.  A whitespace
character may be included in an option by surrounding the entire
option in either single or double quotes.  Any character (including a
backslash) may be included by prefixing the character to be included
with a backslash.  The \fIfile\fR may itself contain additional
@\fIfile\fR options; any such options will be processed recursively.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
the Info entries for \fIbinutils\fR.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1991\-2017 Free Software Foundation, Inc.
.PP
Permission is granted to copy, distribute and/or modify this document
under the terms of the \s-1GNU\s0 Free Documentation License, Version 1.3
or any later version published by the Free Software Foundation;
with no Invariant Sections, with no Front-Cover Texts, and with no
Back-Cover Texts.  A copy of the license is included in the
section entitled \*(L"\s-1GNU\s0 Free Documentation License\*(R".
.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.
.TH STTY "1" "March 2017" "GNU coreutils 8.27" "User Commands"
.SH NAME
stty \- change and print terminal line settings
.SH SYNOPSIS
.B stty
[\fI\,-F DEVICE | --file=DEVICE\/\fR] [\fI\,SETTING\/\fR]...
.br
.B stty
[\fI\,-F DEVICE | --file=DEVICE\/\fR] [\fI\,-a|--all\/\fR]
.br
.B stty
[\fI\,-F DEVICE | --file=DEVICE\/\fR] [\fI\,-g|--save\/\fR]
.SH DESCRIPTION
.\" Add any additional description here
.PP
Print or change terminal characteristics.
.PP
Mandatory arguments to long options are mandatory for short options too.
.TP
\fB\-a\fR, \fB\-\-all\fR
print all current settings in human\-readable form
.TP
\fB\-g\fR, \fB\-\-save\fR
print all current settings in a stty\-readable form
.TP
\fB\-F\fR, \fB\-\-file\fR=\fI\,DEVICE\/\fR
open and use the specified DEVICE instead of stdin
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-\-version\fR
output version information and exit
.PP
Optional \- before SETTING indicates negation.  An * marks non\-POSIX
settings.  The underlying system defines which settings are available.
.SS "Special characters:"
.TP
* discard CHAR
CHAR will toggle discarding of output
.TP
eof CHAR
CHAR will send an end of file (terminate the input)
.TP
eol CHAR
CHAR will end the line
.TP
* eol2 CHAR
alternate CHAR for ending the line
.TP
erase CHAR
CHAR will erase the last character typed
.TP
intr CHAR
CHAR will send an interrupt signal
.TP
kill CHAR
CHAR will erase the current line
.TP
* lnext CHAR
CHAR will enter the next character quoted
.TP
quit CHAR
CHAR will send a quit signal
.TP
* rprnt CHAR
CHAR will redraw the current line
.TP
start CHAR
CHAR will restart the output after stopping it
.TP
stop CHAR
CHAR will stop the output
.TP
susp CHAR
CHAR will send a terminal stop signal
.TP
* swtch CHAR
CHAR will switch to a different shell layer
.TP
* werase CHAR
CHAR will erase the last word typed
.SS "Special settings:"
.TP
N
set the input and output speeds to N bauds
.TP
* cols N
tell the kernel that the terminal has N columns
.TP
* columns N
same as cols N
.TP
* [\-]drain
wait for transmission before applying settings (on by default)
.TP
ispeed N
set the input speed to N
.TP
* line N
use line discipline N
.TP
min N
with \fB\-icanon\fR, set N characters minimum for a completed read
.TP
ospeed N
set the output speed to N
.TP
* rows N
tell the kernel that the terminal has N rows
.TP
* size
print the number of rows and columns according to the kernel
.TP
speed
print the terminal speed
.TP
time N
with \fB\-icanon\fR, set read timeout of N tenths of a second
.SS "Control settings:"
.TP
[\-]clocal
disable modem control signals
.TP
[\-]cread
allow input to be received
.TP
* [\-]crtscts
enable RTS/CTS handshaking
.TP
csN
set character size to N bits, N in [5..8]
.TP
[\-]cstopb
use two stop bits per character (one with '\-')
.TP
[\-]hup
send a hangup signal when the last process closes the tty
.TP
[\-]hupcl
same as [\-]hup
.TP
[\-]parenb
generate parity bit in output and expect parity bit in input
.TP
[\-]parodd
set odd parity (or even parity with '\-')
.TP
* [\-]cmspar
use "stick" (mark/space) parity
.SS "Input settings:"
.TP
[\-]brkint
breaks cause an interrupt signal
.TP
[\-]icrnl
translate carriage return to newline
.TP
[\-]ignbrk
ignore break characters
.TP
[\-]igncr
ignore carriage return
.TP
[\-]ignpar
ignore characters with parity errors
.TP
* [\-]imaxbel
beep and do not flush a full input buffer on a character
.TP
[\-]inlcr
translate newline to carriage return
.TP
[\-]inpck
enable input parity checking
.TP
[\-]istrip
clear high (8th) bit of input characters
.TP
* [\-]iutf8
assume input characters are UTF\-8 encoded
.TP
* [\-]iuclc
translate uppercase characters to lowercase
.TP
* [\-]ixany
let any character restart output, not only start character
.TP
[\-]ixoff
enable sending of start/stop characters
.TP
[\-]ixon
enable XON/XOFF flow control
.TP
[\-]parmrk
mark parity errors (with a 255\-0\-character sequence)
.TP
[\-]tandem
same as [\-]ixoff
.SS "Output settings:"
.TP
* bsN
backspace delay style, N in [0..1]
.TP
* crN
carriage return delay style, N in [0..3]
.TP
* ffN
form feed delay style, N in [0..1]
.TP
* nlN
newline delay style, N in [0..1]
.TP
* [\-]ocrnl
translate carriage return to newline
.TP
* [\-]ofdel
use delete characters for fill instead of NUL characters
.TP
* [\-]ofill
use fill (padding) characters instead of timing for delays
.TP
* [\-]olcuc
translate lowercase characters to uppercase
.TP
* [\-]onlcr
translate newline to carriage return\-newline
.TP
* [\-]onlret
newline performs a carriage return
.TP
* [\-]onocr
do not print carriage returns in the first column
.TP
[\-]opost
postprocess output
.TP
* tabN
horizontal tab delay style, N in [0..3]
.TP
* tabs
same as tab0
.TP
* \fB\-tabs\fR
same as tab3
.TP
* vtN
vertical tab delay style, N in [0..1]
.SS "Local settings:"
.TP
[\-]crterase
echo erase characters as backspace\-space\-backspace
.TP
* crtkill
kill all line by obeying the echoprt and echoe settings
.TP
* \fB\-crtkill\fR
kill all line by obeying the echoctl and echok settings
.TP
* [\-]ctlecho
echo control characters in hat notation ('^c')
.TP
[\-]echo
echo input characters
.TP
* [\-]echoctl
same as [\-]ctlecho
.TP
[\-]echoe
same as [\-]crterase
.TP
[\-]echok
echo a newline after a kill character
.TP
* [\-]echoke
same as [\-]crtkill
.TP
[\-]echonl
echo newline even if not echoing other characters
.TP
* [\-]echoprt
echo erased characters backward, between '\e' and '/'
.TP
* [\-]extproc
enable "LINEMODE"; useful with high latency links
.TP
* [\-]flusho
discard output
.TP
[\-]icanon
enable special characters: erase, kill, werase, rprnt
.TP
[\-]iexten
enable non\-POSIX special characters
.TP
[\-]isig
enable interrupt, quit, and suspend special characters
.TP
[\-]noflsh
disable flushing after interrupt and quit special characters
.TP
* [\-]prterase
same as [\-]echoprt
.TP
* [\-]tostop
stop background jobs that try to write to the terminal
.TP
* [\-]xcase
with icanon, escape with '\e' for uppercase characters
.SS "Combination settings:"
.TP
* [\-]LCASE
same as [\-]lcase
.TP
cbreak
same as \fB\-icanon\fR
.TP
\fB\-cbreak\fR
same as icanon
.TP
cooked
same as brkint ignpar istrip icrnl ixon opost isig
icanon, eof and eol characters to their default values
.TP
\fB\-cooked\fR
same as raw
.TP
crt
same as echoe echoctl echoke
.TP
dec
same as echoe echoctl echoke \fB\-ixany\fR intr ^c erase 0177
kill ^u
.TP
* [\-]decctlq
same as [\-]ixany
.TP
ek
erase and kill characters to their default values
.TP
evenp
same as parenb \fB\-parodd\fR cs7
.TP
\fB\-evenp\fR
same as \fB\-parenb\fR cs8
.TP
* [\-]lcase
same as xcase iuclc olcuc
.TP
litout
same as \fB\-parenb\fR \fB\-istrip\fR \fB\-opost\fR cs8
.TP
\fB\-litout\fR
same as parenb istrip opost cs7
.TP
nl
same as \fB\-icrnl\fR \fB\-onlcr\fR
.TP
\fB\-nl\fR
same as icrnl \fB\-inlcr\fR \fB\-igncr\fR onlcr \fB\-ocrnl\fR \fB\-onlret\fR
.TP
oddp
same as parenb parodd cs7
.TP
\fB\-oddp\fR
same as \fB\-parenb\fR cs8
.TP
[\-]parity
same as [\-]evenp
.TP
pass8
same as \fB\-parenb\fR \fB\-istrip\fR cs8
.TP
\fB\-pass8\fR
same as parenb istrip cs7
.TP
raw
same as \fB\-ignbrk\fR \fB\-brkint\fR \fB\-ignpar\fR \fB\-parmrk\fR \fB\-inpck\fR \fB\-istrip\fR
\fB\-inlcr\fR \fB\-igncr\fR \fB\-icrnl\fR \fB\-ixon\fR \fB\-ixoff\fR \fB\-icanon\fR \fB\-opost\fR
\fB\-isig\fR \fB\-iuclc\fR \fB\-ixany\fR \fB\-imaxbel\fR \fB\-xcase\fR min 1 time 0
.TP
\fB\-raw\fR
same as cooked
.TP
sane
same as cread \fB\-ignbrk\fR brkint \fB\-inlcr\fR \fB\-igncr\fR icrnl
icanon iexten echo echoe echok \fB\-echonl\fR \fB\-noflsh\fR
\fB\-ixoff\fR \fB\-iutf8\fR \fB\-iuclc\fR \fB\-ixany\fR imaxbel \fB\-xcase\fR \fB\-olcuc\fR \fB\-ocrnl\fR
opost \fB\-ofill\fR onlcr \fB\-onocr\fR \fB\-onlret\fR nl0 cr0 tab0 bs0 vt0 ff0
isig \fB\-tostop\fR \fB\-ofdel\fR \fB\-echoprt\fR echoctl echoke \fB\-extproc\fR \fB\-flusho\fR,
all special characters to their default values
.PP
Handle the tty line connected to standard input.  Without arguments,
prints baud rate, line discipline, and deviations from stty sane.  In
settings, CHAR is taken literally, or coded as in ^c, 0x37, 0177 or
127; special values ^\- or undef used to disable special characters.
.SH AUTHOR
Written by David MacKenzie.
.SH "REPORTING BUGS"
GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt;
.br
Report stty translation bugs to &lt;http://translationproject.org/team/&gt;
.SH COPYRIGHT
Copyright \(co 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
Full documentation at: &lt;http://www.gnu.org/software/coreutils/stty&gt;
.br
or available locally via: info \(aq(coreutils) stty invocation\(aq
.\"***************************************************************************
.\" Copyright (c) 2008-2013,2016 Free Software Foundation, Inc.              *
.\"                                                                          *
.\" Permission is hereby granted, free of charge, to any person obtaining a  *
.\" copy of this software and associated documentation files (the            *
.\" "Software"), to deal in the Software without restriction, including      *
.\" without limitation the rights to use, copy, modify, merge, publish,      *
.\" distribute, distribute with modifications, sublicense, and/or sell       *
.\" copies of the Software, and to permit persons to whom the Software is    *
.\" furnished to do so, subject to the following conditions:                 *
.\"                                                                          *
.\" The above copyright notice and this permission notice shall be included  *
.\" in all copies or substantial portions of the Software.                   *
.\"                                                                          *
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
.\" OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
.\" IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
.\" DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
.\" OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
.\" THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
.\"                                                                          *
.\" Except as contained in this notice, the name(s) of the above copyright   *
.\" holders shall not be used in advertising or otherwise to promote the     *
.\" sale, use or other dealings in this Software without prior written       *
.\" authorization.                                                           *
.\"***************************************************************************
.\"
.\" $Id: tabs.1,v 1.15 2016/12/31 16:07:39 tom Exp $
.TH tabs 1 ""
.ds n 5
.ie \n(.g .ds `` \(lq
.el       .ds `` ``
.ie \n(.g .ds '' \(rq
.el       .ds '' ''
.de bP
.IP \(bu 4
..
.de NS
.ie \n(.sp
.el    .sp .5
.ie \n(.in +4
.el    .in +2
.nf
.ft C			\" Courier
..
.de NE
.fi
.ft R
.in -4
..
.SH NAME
\fBtabs\fR \- set tabs on a terminal
.SH SYNOPSIS
\fBtabs\fR [\fIoptions\fR]] \fI[tabstop-list]\fR
.SH DESCRIPTION
.PP
The \fBtabs\fP program clears and sets tab-stops on the terminal.
This uses the terminfo \fIclear_all_tabs\fP and \fIset_tab\fP capabilities.
If either is absent, \fBtabs\fP is unable to clear/set tab-stops.
The terminal should be configured to use hard tabs, e.g.,
.NS
stty tab0
.NE
.PP
Like \fBclear\fR(1), \fBtabs\fR writes to the standard output.
You can redirect the standard output to a file (which prevents
\fBtabs\fR from actually changing the tabstops),
and later \fBcat\fP the file to the screen, setting tabstops at that point.
.SH OPTIONS
.SS General Options
.TP 5
.BI \-T "name"
Tell \fBtabs\fP which terminal type to use.
If this option is not given, \fBtabs\fP will use the \fB$TERM\fP
environment variable.
If that is not set, it will use the \fIansi+tabs\fP entry.
.TP 5
.B \-d
The debugging option shows a ruler line, followed by two data lines.
The first data line shows the expected tab-stops marked with asterisks.
The second data line shows the actual tab-stops, marked with asterisks.
.TP 5
.B \-n
This option tells \fBtabs\fP to check the options and run any debugging
option, but not to modify the terminal settings.
.TP
\fB\-V\fR
reports the version of ncurses which was used in this program, and exits.
.PP
The \fBtabs\fP program processes a single list of tab stops.
The last option to be processed which defines a list is the one that
determines the list to be processed.
.SS Implicit Lists
Use a single number as an option, e.g., \*(``\fB\-5\fP\*('' to set tabs at the given
interval (in this case 1, 6, 11, 16, 21, etc.).  Tabs are repeated up to
the right margin of the screen.
.PP
Use \*(``\fB\-0\fP\*('' to clear all tabs.
.PP
Use \*(``\fB\-8\fP\*('' to set tabs to the standard interval.
.SS Explicit Lists
An explicit list can be defined after the options
(this does not use a \*(``\-\*('').
The values in the list must be in increasing numeric order,
and greater than zero.
They are separated by a comma or a blank, for example,
.NS
tabs 1,6,11,16,21
.br
tabs 1 6 11 16 21
.NE
.PP
Use a \*(``+\*('' to treat a number as an increment relative to the previous value,
e.g.,
.NS
tabs 1,+5,+5,+5,+5
.NE
.PP
which is equivalent to the 1,6,11,16,21 example.
.SS Predefined Tab-Stops
X/Open defines several predefined lists of tab stops.
.TP 5
.B \-a
Assembler, IBM S/370, first format
.TP 5
.B \-a2
Assembler, IBM S/370, second format
.TP 5
.B \-c
COBOL, normal format
.TP 5
.B \-c2
COBOL compact format
.TP 5
.B \-c3
COBOL compact format extended
.TP 5
.B \-f
FORTRAN
.TP 5
.B \-p
PL/I
.TP 5
.B \-s
SNOBOL
.TP 5
.B \-u
UNIVAC 1100 Assembler
.SH PORTABILITY
.PP
IEEE Std 1003.1/The Open Group  Base Specifications Issue 7 (POSIX.1-2008) describes
a \fBtabs\fP utility.  However
.bP
This standard describes a \fB+m\fP option, to set a terminal's left-margin.
Very few of the entries in the terminal database provide this capability.
.bP
There is no counterpart in X/Open Curses Issue 7 for this utility,
unlike \fBtput(1)\fP.
.PP
The \fB\-d\fP (debug) and \fB\-n\fP (no-op) options are extensions not provided
by other implementations.
.PP
Documentation for other implementations states that there is a limit on the
number of tab stops.  While some terminals may not accept an arbitrary number
of tab stops, this implementation will attempt to set tab stops up to the
right margin of the screen, if the given list happens to be that long.
.SH SEE ALSO
\fBtset\fR(1),
\fBinfocmp\fR(1M),
\fBcurses\fR(3X),
\fBterminfo\fR(\*n).
.PP
This describes \fBncurses\fR
version 6.0 (patch 20170429).
.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.
.TH TAIL "1" "March 2017" "GNU coreutils 8.27" "User Commands"
.SH NAME
tail \- output the last part of files
.SH SYNOPSIS
.B tail
[\fI\,OPTION\/\fR]... [\fI\,FILE\/\fR]...
.SH DESCRIPTION
.\" Add any additional description here
.PP
Print the last 10 lines of each FILE to standard output.
With more than one FILE, precede each with a header giving the file name.
.PP
With no FILE, or when FILE is \-, read standard input.
.PP
Mandatory arguments to long options are mandatory for short options too.
.TP
\fB\-c\fR, \fB\-\-bytes\fR=\fI\,[\/\fR+]NUM
output the last NUM bytes; or use \fB\-c\fR +NUM to
output starting with byte NUM of each file
.TP
\fB\-f\fR, \fB\-\-follow[=\fR{name|descriptor}]
output appended data as the file grows;
.IP
an absent option argument means 'descriptor'
.TP
\fB\-F\fR
same as \fB\-\-follow\fR=\fI\,name\/\fR \fB\-\-retry\fR
.TP
\fB\-n\fR, \fB\-\-lines\fR=\fI\,[\/\fR+]NUM
output the last NUM lines, instead of the last 10;
or use \fB\-n\fR +NUM to output starting with line NUM
.TP
\fB\-\-max\-unchanged\-stats\fR=\fI\,N\/\fR
with \fB\-\-follow\fR=\fI\,name\/\fR, reopen a FILE which has not
.IP
changed size after N (default 5) iterations
to see if it has been unlinked or renamed
(this is the usual case of rotated log files);
with inotify, this option is rarely useful
.TP
\fB\-\-pid\fR=\fI\,PID\/\fR
with \fB\-f\fR, terminate after process ID, PID dies
.TP
\fB\-q\fR, \fB\-\-quiet\fR, \fB\-\-silent\fR
never output headers giving file names
.TP
\fB\-\-retry\fR
keep trying to open a file if it is inaccessible
.TP
\fB\-s\fR, \fB\-\-sleep\-interval\fR=\fI\,N\/\fR
with \fB\-f\fR, sleep for approximately N seconds
(default 1.0) between iterations;
with inotify and \fB\-\-pid\fR=\fI\,P\/\fR, check process P at
least once every N seconds
.TP
\fB\-v\fR, \fB\-\-verbose\fR
always output headers giving file names
.TP
\fB\-z\fR, \fB\-\-zero\-terminated\fR
line delimiter is NUL, not newline
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-\-version\fR
output version information and exit
.PP
NUM may have a multiplier suffix:
b 512, kB 1000, K 1024, MB 1000*1000, M 1024*1024,
GB 1000*1000*1000, G 1024*1024*1024, and so on for T, P, E, Z, Y.
.PP
With \fB\-\-follow\fR (\fB\-f\fR), tail defaults to following the file descriptor, which
means that even if a tail'ed file is renamed, tail will continue to track
its end.  This default behavior is not desirable when you really want to
track the actual name of the file, not the file descriptor (e.g., log
rotation).  Use \fB\-\-follow\fR=\fI\,name\/\fR in that case.  That causes tail to track the
named file in a way that accommodates renaming, removal and creation.
.SH AUTHOR
Written by Paul Rubin, David MacKenzie, Ian Lance Taylor,
and Jim Meyering.
.SH "REPORTING BUGS"
GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt;
.br
Report tail translation bugs to &lt;http://translationproject.org/team/&gt;
.SH COPYRIGHT
Copyright \(co 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
head(1)
.PP
.br
Full documentation at: &lt;http://www.gnu.org/software/coreutils/tail&gt;
.br
or available locally via: info \(aq(coreutils) tail invocation\(aq
.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.46.4.
.TH TALK "1" "May 2015" "GNU inetutils 1.9.2.67-d7a1" "User Commands"
.SH NAME
talk \- Talk client
.SH SYNOPSIS
.B talk
[\fI\,OPTION\/\fR...] \fI\,person \/\fR[\fI\,ttyname\/\fR]
.SH DESCRIPTION
Talk to another user.
.TP
\-?, \fB\-\-help\fR
give this help list
.TP
\fB\-\-usage\fR
give a short usage message
.TP
\fB\-V\fR, \fB\-\-version\fR
print program version
.SH AUTHOR
Written by Kipp Hickman, Clem Cole, and Peter Moore.
.SH "REPORTING BUGS"
Report bugs to &lt;bug\-inetutils@gnu.org&gt;.
.SH COPYRIGHT
Copyright \(co 2015 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
talkd(1)
.PP
The full documentation for
.B talk
is maintained as a Texinfo manual.  If the
.B info
and
.B talk
programs are properly installed at your site, the command
.IP
.B info talk
.PP
should give you access to the complete manual.
.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.
.TH TEE "1" "March 2017" "GNU coreutils 8.27" "User Commands"
.SH NAME
tee \- read from standard input and write to standard output and files
.SH SYNOPSIS
.B tee
[\fI\,OPTION\/\fR]... [\fI\,FILE\/\fR]...
.SH DESCRIPTION
.\" Add any additional description here
.PP
Copy standard input to each FILE, and also to standard output.
.TP
\fB\-a\fR, \fB\-\-append\fR
append to the given FILEs, do not overwrite
.TP
\fB\-i\fR, \fB\-\-ignore\-interrupts\fR
ignore interrupt signals
.TP
\fB\-p\fR
diagnose errors writing to non pipes
.TP
\fB\-\-output\-error\fR[=\fI\,MODE\/\fR]
set behavior on write error.  See MODE below
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-\-version\fR
output version information and exit
.SS "MODE determines behavior with write errors on the outputs:"
.TP
\&amp;'warn'
diagnose errors writing to any output
.TP
\&amp;'warn\-nopipe'
diagnose errors writing to any output not a pipe
.TP
\&amp;'exit'
exit on error writing to any output
.TP
\&amp;'exit\-nopipe'
exit on error writing to any output not a pipe
.PP
The default MODE for the \fB\-p\fR option is 'warn\-nopipe'.
The default operation when \fB\-\-output\-error\fR is not specified, is to
exit immediately on error writing to a pipe, and diagnose errors
writing to non pipe outputs.
.SH AUTHOR
Written by Mike Parker, Richard M. Stallman, and David MacKenzie.
.SH "REPORTING BUGS"
GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt;
.br
Report tee translation bugs to &lt;http://translationproject.org/team/&gt;
.SH COPYRIGHT
Copyright \(co 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
Full documentation at: &lt;http://www.gnu.org/software/coreutils/tee&gt;
.br
or available locally via: info \(aq(coreutils) tee invocation\(aq
.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.
.TH TEST "1" "March 2017" "GNU coreutils 8.27" "User Commands"
.SH NAME
test \- check file types and compare values
.SH SYNOPSIS
.B test
\fI\,EXPRESSION\/\fR
.br
.B test

.br
.B [
\fI\,EXPRESSION \/\fR]
.br
.B [
]
.br
.B [
\fI\,OPTION\/\fR
.SH DESCRIPTION
.\" Add any additional description here
.PP
Exit with the status determined by EXPRESSION.
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-\-version\fR
output version information and exit
.PP
An omitted EXPRESSION defaults to false.  Otherwise,
EXPRESSION is true or false and sets exit status.  It is one of:
.TP
( EXPRESSION )
EXPRESSION is true
.TP
! EXPRESSION
EXPRESSION is false
.TP
EXPRESSION1 \fB\-a\fR EXPRESSION2
both EXPRESSION1 and EXPRESSION2 are true
.TP
EXPRESSION1 \fB\-o\fR EXPRESSION2
either EXPRESSION1 or EXPRESSION2 is true
.TP
\fB\-n\fR STRING
the length of STRING is nonzero
.TP
STRING
equivalent to \fB\-n\fR STRING
.TP
\fB\-z\fR STRING
the length of STRING is zero
.TP
STRING1 = STRING2
the strings are equal
.TP
STRING1 != STRING2
the strings are not equal
.TP
INTEGER1 \fB\-eq\fR INTEGER2
INTEGER1 is equal to INTEGER2
.TP
INTEGER1 \fB\-ge\fR INTEGER2
INTEGER1 is greater than or equal to INTEGER2
.TP
INTEGER1 \fB\-gt\fR INTEGER2
INTEGER1 is greater than INTEGER2
.TP
INTEGER1 \fB\-le\fR INTEGER2
INTEGER1 is less than or equal to INTEGER2
.TP
INTEGER1 \fB\-lt\fR INTEGER2
INTEGER1 is less than INTEGER2
.TP
INTEGER1 \fB\-ne\fR INTEGER2
INTEGER1 is not equal to INTEGER2
.TP
FILE1 \fB\-ef\fR FILE2
FILE1 and FILE2 have the same device and inode numbers
.TP
FILE1 \fB\-nt\fR FILE2
FILE1 is newer (modification date) than FILE2
.TP
FILE1 \fB\-ot\fR FILE2
FILE1 is older than FILE2
.TP
\fB\-b\fR FILE
FILE exists and is block special
.TP
\fB\-c\fR FILE
FILE exists and is character special
.TP
\fB\-d\fR FILE
FILE exists and is a directory
.TP
\fB\-e\fR FILE
FILE exists
.TP
\fB\-f\fR FILE
FILE exists and is a regular file
.TP
\fB\-g\fR FILE
FILE exists and is set\-group\-ID
.TP
\fB\-G\fR FILE
FILE exists and is owned by the effective group ID
.TP
\fB\-h\fR FILE
FILE exists and is a symbolic link (same as \fB\-L\fR)
.TP
\fB\-k\fR FILE
FILE exists and has its sticky bit set
.TP
\fB\-L\fR FILE
FILE exists and is a symbolic link (same as \fB\-h\fR)
.TP
\fB\-O\fR FILE
FILE exists and is owned by the effective user ID
.TP
\fB\-p\fR FILE
FILE exists and is a named pipe
.TP
\fB\-r\fR FILE
FILE exists and read permission is granted
.TP
\fB\-s\fR FILE
FILE exists and has a size greater than zero
.TP
\fB\-S\fR FILE
FILE exists and is a socket
.TP
\fB\-t\fR FD
file descriptor FD is opened on a terminal
.TP
\fB\-u\fR FILE
FILE exists and its set\-user\-ID bit is set
.TP
\fB\-w\fR FILE
FILE exists and write permission is granted
.TP
\fB\-x\fR FILE
FILE exists and execute (or search) permission is granted
.PP
Except for \fB\-h\fR and \fB\-L\fR, all FILE\-related tests dereference symbolic links.
Beware that parentheses need to be escaped (e.g., by backslashes) for shells.
INTEGER may also be \fB\-l\fR STRING, which evaluates to the length of STRING.
.PP
NOTE: Binary \fB\-a\fR and \fB\-o\fR are inherently ambiguous.  Use 'test EXPR1 &amp;&amp; test
EXPR2' or 'test EXPR1 || test EXPR2' instead.
.PP
NOTE: [ honors the \fB\-\-help\fR and \fB\-\-version\fR options, but test does not.
test treats each of those as it treats any other nonempty STRING.
.PP
NOTE: your shell may have its own version of test and/or [, which usually supersedes
the version described here.  Please refer to your shell's documentation
for details about the options it supports.
.SH AUTHOR
Written by Kevin Braunsdorf and Matthew Bradburn.
.SH "REPORTING BUGS"
GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt;
.br
Report [ translation bugs to &lt;http://translationproject.org/team/&gt;
.SH COPYRIGHT
Copyright \(co 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
Full documentation at: &lt;http://www.gnu.org/software/coreutils/[&gt;
.br
or available locally via: info \(aq(coreutils) test invocation\(aq
'\" et
.TH TIMES "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
times
\(em write process times
.SH SYNOPSIS
.LP
.nf
times\fR
.fi
.SH DESCRIPTION
The
.IR times
utility shall write the accumulated user and system times for the shell
and for all of its child processes, in the following POSIX locale
format:
.sp
.RS 4
.nf
\fB
"%dm%fs %dm%fs\en%dm%fs %dm%fs\en", &lt;\fIshell user minutes\fR&gt;,
&lt;\fIshell user seconds\fR&gt;, &lt;\fIshell system minutes\fR&gt;,
&lt;\fIshell system seconds\fR&gt;, &lt;\fIchildren user minutes\fR&gt;,
&lt;\fIchildren user seconds\fR&gt;, &lt;\fIchildren system minutes\fR&gt;,
&lt;\fIchildren system seconds\fR&gt;
.fi \fR
.P
.RE
.P
The four pairs of times shall correspond to the members of the
.IR &lt;sys/times.h&gt; 
.BR tms
structure (defined in the Base Definitions volume of POSIX.1\(hy2008,
.IR "Chapter 13" ", " "Headers")
as returned by
\fItimes\fR():
.IR tms_utime ,
.IR tms_stime ,
.IR tms_cutime ,
and
.IR tms_cstime ,
respectively.
.SH OPTIONS
None.
.SH OPERANDS
None.
.SH STDIN
Not used.
.SH "INPUT FILES"
None.
.SH "ENVIRONMENT VARIABLES"
None.
.SH "ASYNCHRONOUS EVENTS"
Default.
.SH STDOUT
See the DESCRIPTION.
.SH STDERR
The standard error shall be used only for diagnostic messages.
.SH "OUTPUT FILES"
None.
.SH "EXTENDED DESCRIPTION"
None.
.SH "EXIT STATUS"
Zero.
.SH "CONSEQUENCES OF ERRORS"
Default.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
None.
.SH EXAMPLES
.LP
.nf
\fB$\fP times
\fB0m0.43s 0m1.11s
8m44.18s 1m43.23s\fR
.fi
.SH "RATIONALE"
The
.IR times
special built-in from the Single UNIX Specification is now required
for all conforming shells.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "Section 2.14" ", " "Special Built-In Utilities"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "\fB&lt;sys_times.h&gt;\fP"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.
.TH TOUCH "1" "March 2017" "GNU coreutils 8.27" "User Commands"
.SH NAME
touch \- change file timestamps
.SH SYNOPSIS
.B touch
[\fI\,OPTION\/\fR]... \fI\,FILE\/\fR...
.SH DESCRIPTION
.\" Add any additional description here
.PP
Update the access and modification times of each FILE to the current time.
.PP
A FILE argument that does not exist is created empty, unless \fB\-c\fR or \fB\-h\fR
is supplied.
.PP
A FILE argument string of \- is handled specially and causes touch to
change the times of the file associated with standard output.
.PP
Mandatory arguments to long options are mandatory for short options too.
.TP
\fB\-a\fR
change only the access time
.TP
\fB\-c\fR, \fB\-\-no\-create\fR
do not create any files
.TP
\fB\-d\fR, \fB\-\-date\fR=\fI\,STRING\/\fR
parse STRING and use it instead of current time
.TP
\fB\-f\fR
(ignored)
.TP
\fB\-h\fR, \fB\-\-no\-dereference\fR
affect each symbolic link instead of any referenced
file (useful only on systems that can change the
timestamps of a symlink)
.TP
\fB\-m\fR
change only the modification time
.TP
\fB\-r\fR, \fB\-\-reference\fR=\fI\,FILE\/\fR
use this file's times instead of current time
.TP
\fB\-t\fR STAMP
use [[CC]YY]MMDDhhmm[.ss] instead of current time
.TP
\fB\-\-time\fR=\fI\,WORD\/\fR
change the specified time:
WORD is access, atime, or use: equivalent to \fB\-a\fR
WORD is modify or mtime: equivalent to \fB\-m\fR
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-\-version\fR
output version information and exit
.PP
Note that the \fB\-d\fR and \fB\-t\fR options accept different time\-date formats.
.SH "DATE STRING"
.\" NOTE: keep this paragraph in sync with the one in date.x
The --date=STRING is a mostly free format human readable date string
such as "Sun, 29 Feb 2004 16:21:42 -0800" or "2004-02-29 16:21:42" or
even "next Thursday".  A date string may contain items indicating
calendar date, time of day, time zone, day of week, relative time,
relative date, and numbers.  An empty string indicates the beginning
of the day.  The date string format is more complex than is easily
documented here but is fully described in the info documentation.
.SH AUTHOR
Written by Paul Rubin, Arnold Robbins, Jim Kingdon,
David MacKenzie, and Randy Smith.
.SH "REPORTING BUGS"
GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt;
.br
Report touch translation bugs to &lt;http://translationproject.org/team/&gt;
.SH COPYRIGHT
Copyright \(co 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
Full documentation at: &lt;http://www.gnu.org/software/coreutils/touch&gt;
.br
or available locally via: info \(aq(coreutils) touch invocation\(aq
'\" t
.\"***************************************************************************
.\" Copyright (c) 1998-2016,2017 Free Software Foundation, Inc.              *
.\"                                                                          *
.\" Permission is hereby granted, free of charge, to any person obtaining a  *
.\" copy of this software and associated documentation files (the            *
.\" "Software"), to deal in the Software without restriction, including      *
.\" without limitation the rights to use, copy, modify, merge, publish,      *
.\" distribute, distribute with modifications, sublicense, and/or sell       *
.\" copies of the Software, and to permit persons to whom the Software is    *
.\" furnished to do so, subject to the following conditions:                 *
.\"                                                                          *
.\" The above copyright notice and this permission notice shall be included  *
.\" in all copies or substantial portions of the Software.                   *
.\"                                                                          *
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
.\" OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
.\" IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
.\" DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
.\" OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
.\" THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
.\"                                                                          *
.\" Except as contained in this notice, the name(s) of the above copyright   *
.\" holders shall not be used in advertising or otherwise to promote the     *
.\" sale, use or other dealings in this Software without prior written       *
.\" authorization.                                                           *
.\"***************************************************************************
.\"
.\" $Id: tput.1,v 1.54 2017/01/29 00:51:08 tom Exp $
.TH tput 1 ""
.ds d /usr/share/terminfo
.ds n 1
.ie \n(.g .ds `` \(lq
.el       .ds `` ``
.ie \n(.g .ds '' \(rq
.el       .ds '' ''
.de bP
.IP \(bu 4
..
.SH NAME
\fBtput\fR, \fBreset\fR \- initialize a terminal or query terminfo database
.SH SYNOPSIS
\fBtput\fR [\fB\-T\fR\fItype\fR] \fIcapname\fR [\fIparameters\fR]
.br
\fBtput\fR [\fB\-T\fR\fItype\fR] \fBclear\fR
.br
\fBtput\fR [\fB\-T\fR\fItype\fR] \fBinit\fR
.br
\fBtput\fR [\fB\-T\fR\fItype\fR] \fBreset\fR
.br
\fBtput\fR [\fB\-T\fR\fItype\fR] \fBlongname\fR
.br
\fBtput \-S\fR  \fB&lt;&lt;\fR
.br
\fBtput \-V\fR
.br
.SH DESCRIPTION
The \fBtput\fR utility uses the \fBterminfo\fR database to make the
values of terminal-dependent capabilities and information available to
the shell (see \fBsh\fR(1)), to initialize or reset the terminal, or
return the long name of the requested terminal type.
The result depends upon the capability's type:
.RS 3
.TP 5
string
\fBtput\fR writes the string to the standard output.
No trailing newline is supplied.
.TP
integer
\fBtput\fR writes the decimal value to the standard output,
with a trailing newline.
.TP
boolean
\fBtput\fR simply sets the exit code
(\fB0\fR for TRUE if the terminal has the capability,
\fB1\fR for FALSE if it does not),
and writes nothing to the standard output.
.RE
.PP
Before using a value returned on the standard output,
the application should test the exit code
(e.g., \fB$?\fR, see \fBsh\fR(1)) to be sure it is \fB0\fR.
(See the \fBEXIT CODES\fR and \fBDIAGNOSTICS\fR sections.)
For a complete list of capabilities
and the \fIcapname\fR associated with each, see \fBterminfo\fR(5).
.SS Options
.TP
\fB\-T\fR\fItype\fR
indicates the \fItype\fR of terminal.
Normally this option is
unnecessary, because the default is taken from the environment
variable \fBTERM\fR.
If \fB\-T\fR is specified, then the shell
variables \fBLINES\fR and \fBCOLUMNS\fR will also be ignored.
.TP
\fB\-S\fR
allows more than one capability per invocation of \fBtput\fR.  The
capabilities must be passed to \fBtput\fR from the standard input
instead of from the command line (see example).
Only one \fIcapname\fR is allowed per line.
The \fB\-S\fR option changes the
meaning of the \fB0\fR and \fB1\fR boolean and string exit codes (see the
EXIT CODES section).
.IP
Again, \fBtput\fR uses a table and the presence of parameters in its input
to decide whether to use \fBtparm\fR(3X),
and how to interpret the parameters.
.TP
\fB\-V\fR
reports the version of ncurses which was used in this program, and exits.
.SS Commands
A few commands (\fBinit\fP, \fBreset\fP and \fBlongname\fP) are
special; they are defined by the \fBtput\fP program.
The others are the names of \fIcapabilities\fP from the terminal database
(see \fBterminfo\fR(5) for a list).
Although \fBinit\fP and \fBreset\fP resemble capability names,
\fBtput\fP uses several capabilities to perform these special functions.
.TP
\fIcapname\fR
indicates the capability from the terminal database.
.IP
If the capability is a string that takes parameters, the arguments
following the capability will be used as parameters for the string.
.IP
Most parameters are numbers.
Only a few terminal capabilities require string parameters;
\fBtput\fR uses a table to decide which to pass as strings.
Normally \fBtput\fR uses \fBtparm\fR(3X) to perform the substitution.
If no parameters are given for the capability,
\fBtput\fR writes the string without performing the substitution.
.TP
\fBinit\fR
If the terminal database is present and an entry for the user's
terminal exists (see \fB\-T\fR\fItype\fR, above), the following will
occur:
.RS
.TP 5
(1)
first, \fBtput\fR retrieves the current terminal mode settings
for your terminal.
It does this by successively testing
.RS
.bP
the standard error,
.bP
standard output,
.bP
standard input and
.bP
ultimately \*(lq/dev/tty\*(rq
.RE
.IP
to obtain terminal settings.
Having retrieved these settings, \fBtput\fP remembers which
file descriptor to use when updating settings.
.TP
(2)
if the window size cannot be obtained from the operating system,
but the terminal description (or environment, e.g., \fBLINES\fP
and \fBCOLUMNS\fP variables specify this),
update the operating system's notion of the window size.
.TP
(3)
the terminal modes will be updated:
.RS
.bP
any delays (e.g., newline) specified in the entry will
be set in the tty driver,
.bP
tabs expansion will be turned on or off according to
the specification in the entry, and
.bP
if tabs are not expanded,
standard tabs will be set (every 8 spaces).
.RE
.TP
(4)
if present, the terminal's initialization strings will be
output as detailed in the \fBterminfo\fR(5) section on
.IR "Tabs and Initialization" ,
.TP
(5)
output is flushed.
.RE
.IP
If an entry does not
contain the information needed for any of these activities,
that activity will silently be skipped.
.TP
\fBreset\fR
This is similar to \fBinit\fP, with two differences:
.RS
.TP 5
(1)
before any other initialization,
the terminal modes will be reset to a \*(``sane\*('' state:
.RS
.bP
set cooked and echo modes,
.bP
turn off cbreak and raw modes,
.bP
turn on newline translation and
.bP
reset any unset special characters to their default values
.RE
.TP 5
(2)
Instead of putting out \fIinitialization\fP strings, the terminal's
\fIreset\fP strings will be output if present
(\fBrs1\fR, \fBrs2\fR, \fBrs3\fR, \fBrf\fR).
If the \fIreset\fP strings are not present, but \fIinitialization\fP
strings are, the \fIinitialization\fP strings will be output.
.RE
.IP
Otherwise, \fBreset\fR acts identically to \fBinit\fR.
.TP
\fBlongname\fR
If the terminal database is present and an entry for the
user's terminal exists (see \fB\-T\fR\fItype\fR above), then the long name
of the terminal will be put out.  The long name is the last
name in the first line of the terminal's description in the
\fBterminfo\fR database [see \fBterm\fR(5)].
.SS Aliases
\fBtput\fR handles the \fBclear\fP, \fBinit\fP and \fBreset\fP
commands specially:
it allows for the possibility that it is invoked by a link with those names.
.PP
If \fBtput\fR is invoked by a link named \fBreset\fR, this has the
same effect as \fBtput reset\fR.
The \fBtset\fR(\*n) utility also treats a link named \fBreset\fP specially.
.PP
Before ncurses 6.1, the two utilities were different from each other:
.bP
\fBtset\fP utility reset the terminal modes and special characters
(not done with \fBtput\fP).
.bP
On the other hand, \fBtset\fP's repertoire of terminal capabilities for
resetting the terminal was more limited, i.e., only \fBreset_1string\fP, \fBreset_2string\fP and \fBreset_file\fP
in contrast to the tab-stops and margins which are set by this utility.
.bP
The \fBreset\fP program is usually an alias for \fBtset\fP,
because of this difference with resetting terminal modes and special characters.
.PP
With the changes made for ncurses 6.1, the \fIreset\fP feature of the
two programs is (mostly) the same.  A few differences remain:
.bP
The \fBtset\fP program waits one second when resetting,
in case it happens to be a hardware terminal.
.bP
The two programs write the terminal initialization strings
to different streams (i.e.,. the standard error for \fBtset\fP and the
standard output for \fBtput\fP).
.IP
\fBNote:\fP although these programs write to different streams,
redirecting their output to a file will capture only part of their actions.
The changes to the terminal modes are not affected by redirecting the output.
.PP
If \fBtput\fR is invoked by a link named \fBinit\fR, this has the
same effect as \fBtput init\fR.
Again, you are less likely to use that link because another program
named \fBinit\fP has a more well-established use.
.SH EXAMPLES
.TP 5
\fBtput init\fR
Initialize the terminal according to the type of
terminal in the environmental variable \fBTERM\fR.  This
command should be included in everyone's .profile after
the environmental variable \fBTERM\fR has been exported, as
illustrated on the \fBprofile\fR(5) manual page.
.TP 5
\fBtput \-T5620 reset\fR
Reset an AT&amp;T 5620 terminal, overriding the type of
terminal in the environmental variable \fBTERM\fR.
.TP 5
\fBtput cup 0 0\fR
Send the sequence to move the cursor to row \fB0\fR, column \fB0\fR
(the upper left corner of the screen, usually known as the \*(lqhome\*(rq
cursor position).
.TP 5
\fBtput clear\fR
Echo the clear-screen sequence for the current terminal.
.TP 5
\fBtput cols\fR
Print the number of columns for the current terminal.
.TP 5
\fBtput \-T450 cols\fR
Print the number of columns for the 450 terminal.
.TP 5
\fBbold=`tput smso` offbold=`tput rmso`\fR
Set the shell variables \fBbold\fR, to begin stand-out mode
sequence, and \fBoffbold\fR, to end standout mode sequence,
for the current terminal.  This might be followed by a
prompt: \fBecho "${bold}Please type in your name: ${offbold}\\c"\fR
.TP 5
\fBtput hc\fR
Set exit code to indicate if the current terminal is a hard copy terminal.
.TP 5
\fBtput cup 23 4\fR
Send the sequence to move the cursor to row 23, column 4.
.TP 5
\fBtput cup\fR
Send the terminfo string for cursor-movement, with no parameters substituted.
.TP 5
\fBtput longname\fR
Print the long name from the \fBterminfo\fR database for the
type of terminal specified in the environmental
variable \fBTERM\fR.
.PP
.RS 5
\fBtput \-S &lt;&lt;!\fR
.br
\fB&gt; clear\fR
.br
\fB&gt; cup 10 10\fR
.br
\fB&gt; bold\fR
.br
\fB&gt; !\fR
.RE
.TP 5
\&amp;
This example shows \fBtput\fR processing several capabilities in one invocation.
It clears the screen,
moves the cursor to position 10, 10
and turns on bold (extra bright) mode.
The list is terminated by an exclamation mark (\fB!\fR) on a line by itself.
.SH FILES
.TP
\fB\*d\fR
compiled terminal description database
.TP
\fB/usr/share/tabset/*\fR
tab settings for some terminals, in a format
appropriate to be output to the terminal (escape
sequences that set margins and tabs); for more
information, see the
.IR "Tabs and Initialization" ,
section of \fBterminfo\fR(5)
.SH EXIT CODES
If the \fB\-S\fR option is used,
\fBtput\fR checks for errors from each line,
and if any errors are found, will set the exit code to 4 plus the
number of lines with errors.
If no errors are found, the exit code is \fB0\fR.
No indication of which line failed can be given so
exit code \fB1\fR will never appear.  Exit codes \fB2\fR, \fB3\fR, and
\fB4\fR retain their usual interpretation.
If the \fB\-S\fR option is not used,
the exit code depends on the type of \fIcapname\fR:
.RS 3
.TP
.I boolean
a value of \fB0\fR is set for TRUE and \fB1\fR for FALSE.
.TP
.I string
a value of \fB0\fR is set if the
\fIcapname\fR is defined for this terminal \fItype\fR (the value of
\fIcapname\fR is returned on standard output);
a value of \fB1\fR is set if \fIcapname\fR
is not defined for this terminal \fItype\fR
(nothing is written to standard output).
.TP
.I integer
a value of \fB0\fR is always set,
whether or not \fIcapname\fR is defined for this terminal \fItype\fR.
To determine if \fIcapname\fR is defined for this terminal \fItype\fR,
the user must test the value written to standard output.
A value of \fB\-1\fR
means that \fIcapname\fR is not defined for this terminal \fItype\fR.
.TP
.I other
\fBreset\fR or \fBinit\fR may fail to find their respective files.
In that case, the exit code is set to 4 + \fBerrno\fR.
.RE
.PP
Any other exit code indicates an error; see the DIAGNOSTICS section.
.SH DIAGNOSTICS
\fBtput\fR prints the following error messages and sets the corresponding exit
codes.
.PP
.ne 15
.TS
l l.
exit code	error message
=
\fB0\fR	T{
(\fIcapname\fR is a numeric variable that is not specified in the
\fBterminfo\fR(5) database for this terminal type, e.g.
\fBtput \-T450 lines\fR and \fBtput \-T2621 xmc\fR)
T}
\fB1\fR	no error message is printed, see the \fBEXIT CODES\fR section.
\fB2\fR	usage error
\fB3\fR	unknown terminal \fItype\fR or no \fBterminfo\fR database
\fB4\fR	unknown \fBterminfo\fR capability \fIcapname\fR
\fB&gt;4\fR	error occurred in \-S
=
.TE
.SH HISTORY
The \fBtput\fP command was begun by Bill Joy in 1980.
The initial version only cleared the screen.
.PP
AT&amp;T System V provided a different \fBtput\fP command,
whose \fBinit\fP and \fBreset\fP  subcommands
(more than half the program) were incorporated from
the \fBreset\fP feature of BSD \fBtset\fP written by Eric Allman.
.PP
Keith Bostic replaced the BSD \fBtput\fP command in 1989 with a new implementation
based on the AT&amp;T System V program \fBtput\fP.
Like the AT&amp;T program, Bostic's version
accepted some parameters named for \fIterminfo capabilities\fP
(\fBclear\fP, \fBinit\fP, \fBlongname\fP and \fBreset\fP).
However (because he had only termcap available),
it accepted \fItermcap names\fP for other capabilities.
Also, Bostic's BSD \fBtput\fP did not modify the terminal I/O modes
as the earlier BSD \fBtset\fP had done.
.PP
At the same time, Bostic added a shell script named \*(lqclear\*(rq,
which used \fBtput\fP to clear the screen.
.PP
Both of these appeared in 4.4BSD,
becoming the \*(lqmodern\*(rq BSD implementation of \fBtput\fP.
.PP
This implementation of \fBtput\fP began from a different source than
AT&amp;T or BSD: Ross Ridge's \fImytinfo\fP package, published on
\fIcomp.sources.unix\fP in December 1992.
Ridge's program made more sophisticated use of the terminal capabilities
than the BSD program.
Eric Raymond used the \fBtput\fP program
(and other parts of \fImytinfo\fP) in ncurses in June 1995.
Using the portions dealing with terminal capabilities
almost without change,
Raymond made improvements to the way the command-line parameters
were handled.
.SH PORTABILITY
.PP
This implementation of \fBtput\fP differs from AT&amp;T \fBtput\fP in
two important areas:
.bP
\fBtput\fP \fIcapname\fP writes to the standard output.
That need not be a regular terminal.
However, the subcommands which manipulate terminal modes
may not use the standard output.
.IP
The AT&amp;T implementation's \fBinit\fP and \fBreset\fP commands
use the BSD (4.1c) \fBtset\fP source, which manipulates terminal modes.
It successively tries standard output, standard error, standard input
before falling back to \*(lq/dev/tty\*(rq and finally just assumes
a 1200Bd terminal.
When updating terminal modes, it ignores errors.
.IP
Until changes made after ncurses 6.0, \fBtput\fP did not modify terminal modes.
\fBtput\fP now uses a similar scheme,
using functions shared with \fBtset\fP
(and ultimately based on the 4.4BSD \fBtset\fP).
If it is not able to open a terminal, e.g., when running in \fBcron\fP,
\fBtput\fP will return an error.
.bP
AT&amp;T \fBtput\fP guesses the type of its \fIcapname\fP operands by seeing if
all of the characters are numeric, or not.
.IP
Most implementations which provide support for \fIcapname\fR operands
use the \fItparm\fP function to expand parameters in it.
That function expects a mixture of numeric and string parameters,
requiring \fBtput\fP to know which type to use.
.IP
This implementation uses a table to determine the parameter types for
the standard \fIcapname\fR operands, and an internal library
function to analyze nonstandard \fIcapname\fR operands.
.PP
This implementation (unlike others) can accept both \fItermcap\fP
and \fIterminfo\fP names for the \fIcapname\fP feature,
if
\fItermcap\fR support is compiled in.
However, the predefined \fItermcap\fP and \fIterminfo\fP names have two
ambiguities in this case (and the \fIterminfo\fP name is assumed):
.bP
The \fItermcap\fP name \fBdl\fP corresponds to
the \fIterminfo\fP name \fBdl1\fP (delete one line).
.br
The \fIterminfo\fP name \fBdl\fP corresponds to
the \fItermcap\fP name \fBDL\fP (delete a given number of lines).
.bP
The \fItermcap\fP name \fBed\fP corresponds to
the \fIterminfo\fP name \fBrmdc\fP (end delete mode).
.br
The \fIterminfo\fP name \fBed\fP corresponds to
the \fItermcap\fP name \fBcd\fP (clear to end of screen).
.PP
The \fBlongname\fR and \fB\-S\fR options, and the parameter-substitution
features used in the \fBcup\fR example,
were not supported in BSD curses before 4.3reno (1989) or in
AT&amp;T/USL curses before SVr4 (1988).
.PP
IEEE Std 1003.1/The Open Group  Base Specifications Issue 7 (POSIX.1-2008) 
documents only the operands for \fBclear\fP, \fBinit\fP and \fBreset\fP.
There are a few interesting observations to make regarding that:
.bP
In this implementation, \fBclear\fP is part of the \fIcapname\fR support.
The others (\fBinit\fP and \fBlongname\fP) do not correspond to terminal
capabilities.
.bP
Other implementations of \fBtput\fP on
SVr4-based systems such as Solaris, IRIX64 and HPUX
as well as others such as AIX and Tru64
provide support for \fIcapname\fR operands.
.bP
A few platforms such as FreeBSD recognize termcap names rather
than terminfo capability names in their respective \fBtput\fP commands.
Since 2010, NetBSD's \fBtput\fP uses terminfo names.
Before that, it (like FreeBSD) recognized termcap names.
.PP
Because (apparently) \fIall\fP of the certified Unix systems
support the full set of capability names, the reasoning for documenting
only a few may not be apparent.
.bP
X/Open Curses Issue 7 documents \fBtput\fP differently, with \fIcapname\fP
and the other features used in this implementation.
.bP
That is, there are two standards for \fBtput\fP: POSIX (a subset) and X/Open Curses (the full implementation).
POSIX documents a subset to avoid the complication of including X/Open Curses
and the terminal capabilities database.
.bP
While it is certainly possible to write a \fBtput\fP program without using curses,
none of the systems which have a curses implementation provide
a \fBtput\fP utility which does not provide the \fIcapname\fP feature.
.SH SEE ALSO
\fBclear\fR(\*n),
\fBstty\fR(1),
\fBtabs\fR(\*n),
\fBtset\fR(\*n),
\fBterminfo\fR(5),
\fBcurs_termcap\fR(3X).
.PP
This describes \fBncurses\fR
version 6.0 (patch 20170429).
.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.
.TH TR "1" "March 2017" "GNU coreutils 8.27" "User Commands"
.SH NAME
tr \- translate or delete characters
.SH SYNOPSIS
.B tr
[\fI\,OPTION\/\fR]... \fI\,SET1 \/\fR[\fI\,SET2\/\fR]
.SH DESCRIPTION
.\" Add any additional description here
.PP
Translate, squeeze, and/or delete characters from standard input,
writing to standard output.
.TP
\fB\-c\fR, \fB\-C\fR, \fB\-\-complement\fR
use the complement of SET1
.TP
\fB\-d\fR, \fB\-\-delete\fR
delete characters in SET1, do not translate
.TP
\fB\-s\fR, \fB\-\-squeeze\-repeats\fR
replace each sequence of a repeated character
that is listed in the last specified SET,
with a single occurrence of that character
.TP
\fB\-t\fR, \fB\-\-truncate\-set1\fR
first truncate SET1 to length of SET2
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-\-version\fR
output version information and exit
.PP
SETs are specified as strings of characters.  Most represent themselves.
Interpreted sequences are:
.TP
\eNNN
character with octal value NNN (1 to 3 octal digits)
.TP
\e\e
backslash
.TP
\ea
audible BEL
.TP
\eb
backspace
.TP
\ef
form feed
.TP
\en
new line
.TP
\er
return
.TP
\et
horizontal tab
.TP
\ev
vertical tab
.TP
CHAR1\-CHAR2
all characters from CHAR1 to CHAR2 in ascending order
.TP
[CHAR*]
in SET2, copies of CHAR until length of SET1
.TP
[CHAR*REPEAT]
REPEAT copies of CHAR, REPEAT octal if starting with 0
.TP
[:alnum:]
all letters and digits
.TP
[:alpha:]
all letters
.TP
[:blank:]
all horizontal whitespace
.TP
[:cntrl:]
all control characters
.TP
[:digit:]
all digits
.TP
[:graph:]
all printable characters, not including space
.TP
[:lower:]
all lower case letters
.TP
[:print:]
all printable characters, including space
.TP
[:punct:]
all punctuation characters
.TP
[:space:]
all horizontal or vertical whitespace
.TP
[:upper:]
all upper case letters
.TP
[:xdigit:]
all hexadecimal digits
.TP
[=CHAR=]
all characters which are equivalent to CHAR
.PP
Translation occurs if \fB\-d\fR is not given and both SET1 and SET2 appear.
\fB\-t\fR may be used only when translating.  SET2 is extended to length of
SET1 by repeating its last character as necessary.  Excess characters
of SET2 are ignored.  Only [:lower:] and [:upper:] are guaranteed to
expand in ascending order; used in SET2 while translating, they may
only be used in pairs to specify case conversion.  \fB\-s\fR uses the last
specified SET, and occurs after translation or deletion.
.SH AUTHOR
Written by Jim Meyering.
.SH "REPORTING BUGS"
GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt;
.br
Report tr translation bugs to &lt;http://translationproject.org/team/&gt;
.SH COPYRIGHT
Copyright \(co 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
Full documentation at: &lt;http://www.gnu.org/software/coreutils/tr&gt;
.br
or available locally via: info \(aq(coreutils) tr invocation\(aq
'\" et
.TH TRAP "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
trap
\(em trap signals
.SH SYNOPSIS
.LP
.nf
trap \fIn \fB[\fIcondition\fR...\fB]\fR
trap \fB[\fIaction condition\fR...\fB]\fR
.fi
.SH DESCRIPTION
If the first operand is an unsigned decimal integer, the shell shall
treat all operands as conditions, and shall reset each condition to
the default value. Otherwise, if there are operands, the first is
treated as an action and the remaining as conditions.
.P
If
.IR action
is
.BR '\(mi' ,
the shell shall reset each
.IR condition
to the default value. If
.IR action
is null (\c
.BR \(dq\^\(dq ),
the shell shall ignore each specified
.IR condition
if it arises. Otherwise, the argument
.IR action
shall be read and executed by the shell when one of the corresponding
conditions arises. The action of
.IR trap
shall override a previous action (either default action or one
explicitly set). The value of
.BR \(dq$?\(dq 
after the
.IR trap
action completes shall be the value it had before
.IR trap
was invoked.
.P
The condition can be EXIT, 0 (equivalent to EXIT), or a signal
specified using a symbolic name, without the SIG prefix, as listed in
the tables of signal names in the
.IR &lt;signal.h&gt; 
header defined in the Base Definitions volume of POSIX.1\(hy2008,
.IR "Chapter 13" ", " "Headers";
for example, HUP, INT, QUIT, TERM. Implementations may permit names with
the SIG prefix or ignore case in signal names as an extension. Setting
a trap for SIGKILL or SIGSTOP produces undefined results.
.P
The environment in which the shell executes a
.IR trap
on EXIT shall be identical to the environment immediately after the
last command executed before the
.IR trap
on EXIT was taken.
.P
Each time
.IR trap
is invoked, the
.IR action
argument shall be processed in a manner equivalent to:
.sp
.RS 4
.nf
\fB
eval \fIaction\fR
.fi \fR
.P
.RE
.P
Signals that were ignored on entry to a non-interactive shell cannot be
trapped or reset, although no error need be reported when attempting to
do so. An interactive shell may reset or catch signals ignored on
entry. Traps shall remain in place for a given shell until explicitly
changed with another
.IR trap
command.
.P
When a subshell is entered, traps that are not being ignored shall be
set to the default actions, except in the case of a command substitution
containing only a single
.IR trap
command, when the traps need not be altered. Implementations may check
for this case using only lexical analysis; for example, if
.IR `trap`
and
.IR "$( trap -- )"
do not alter the traps in the subshell, cases such as assigning
.IR var=trap
and then using
.IR $($var)
may still alter them. This does not imply that the
.IR trap
command cannot be used within the subshell to set new traps.
.P
The
.IR trap
command with no operands shall write to standard output a list of commands
associated with each condition. If the command is executed in a subshell,
the implementation does not perform the optional check described above
for a command substitution containing only a single
.IR trap
command, and no
.IR trap
commands with operands have been executed since entry to the subshell,
the list shall contain the commands that were associated with each
condition immediately before the subshell environment was entered.
Otherwise, the list shall contain the commands currently associated with
each condition. The format shall be:
.sp
.RS 4
.nf
\fB
"trap \(mi\|\(mi %s %s ...\en", &lt;\fIaction\fR&gt;, &lt;\fIcondition\fR&gt; ...
.fi \fR
.P
.RE
.P
The shell shall format the output, including the proper use of quoting,
so that it is suitable for reinput to the shell as commands that
achieve the same trapping results. For example:
.sp
.RS 4
.nf
\fB
save_traps=$(trap)
\&amp;...
eval "$save_traps"
.fi \fR
.P
.RE
.P
XSI-conformant systems also allow numeric signal numbers for the
conditions corresponding to the following signal names:
.IP 1 6
SIGHUP
.IP 2 6
SIGINT
.IP 3 6
SIGQUIT
.IP 6 6
SIGABRT
.IP 9 6
SIGKILL
.IP 14 6
SIGALRM
.IP 15 6
SIGTERM
.P
The
.IR trap
special built-in shall conform to the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 12.2" ", " "Utility Syntax Guidelines".
.SH OPTIONS
None.
.SH OPERANDS
See the DESCRIPTION.
.SH STDIN
Not used.
.SH "INPUT FILES"
None.
.SH "ENVIRONMENT VARIABLES"
None.
.SH "ASYNCHRONOUS EVENTS"
Default.
.SH STDOUT
See the DESCRIPTION.
.SH STDERR
The standard error shall be used only for diagnostic messages.
.SH "OUTPUT FILES"
None.
.SH "EXTENDED DESCRIPTION"
None.
.SH "EXIT STATUS"
If the trap name
or number
is invalid, a non-zero exit status shall be returned; otherwise, zero
shall be returned. For both interactive and non-interactive shells,
invalid signal names
or numbers
shall not be considered a syntax error and do not cause the shell to
abort.
.SH "CONSEQUENCES OF ERRORS"
Default.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
None.
.SH EXAMPLES
Write out a list of all traps and actions:
.sp
.RS 4
.nf
\fB
trap
.fi \fR
.P
.RE
.P
Set a trap so the
.IR logout
utility in the directory referred to by the
.IR HOME
environment variable executes when the shell terminates:
.sp
.RS 4
.nf
\fB
trap '"$HOME"/logout' EXIT
.fi \fR
.P
.RE
.P
or:
.sp
.RS 4
.nf
\fB
trap '"$HOME"/logout' 0
.fi \fR
.P
.RE
.P
Unset traps on INT, QUIT, TERM, and EXIT:
.sp
.RS 4
.nf
\fB
trap \(mi INT QUIT TERM EXIT
.fi \fR
.P
.RE
.SH "RATIONALE"
Implementations may permit lowercase signal names as an extension.
Implementations may also accept the names with the SIG prefix; no known
historical shell does so. The
.IR trap
and
.IR kill
utilities in this volume of POSIX.1\(hy2008 are now consistent in their omission of the SIG
prefix for signal names. Some
.IR kill
implementations do not allow the prefix, and
.IR kill
.BR \(mil
lists the signals without prefixes.
.P
Trapping SIGKILL or SIGSTOP is syntactically accepted by some
historical implementations, but it has no effect. Portable POSIX
applications cannot attempt to trap these signals.
.P
The output format is not historical practice. Since the output of
historical
.IR trap
commands is not portable (because numeric signal values are not
portable) and had to change to become so, an opportunity was taken to
format the output in a way that a shell script could use to save and
then later reuse a trap if it wanted.
.P
The KornShell uses an
.BR ERR
trap that is triggered whenever
.IR set
.BR \(mie
would cause an exit. This is allowable as an extension, but was not
mandated, as other shells have not used it.
.P
The text about the environment for the EXIT trap invalidates the
behavior of some historical versions of interactive shells which, for
example, close the standard input before executing a trap on 0. For
example, in some historical interactive shell sessions the following
trap on 0 would always print
.BR \(dq\(mi\|\(mi\(dq :
.sp
.RS 4
.nf
\fB
trap 'read foo; echo "\(mi$foo\(mi"' 0
.fi \fR
.P
.RE
.P
The command:
.sp
.RS 4
.nf
\fB
trap 'eval " $cmd"' 0
.fi \fR
.P
.RE
.P
causes the contents of the shell variable
.IR cmd
to be executed as a command when the shell exits. Using:
.sp
.RS 4
.nf
\fB
trap '$cmd' 0
.fi \fR
.P
.RE
.P
does not work correctly if
.IR cmd
contains any special characters such as quoting or redirections. Using:
.sp
.RS 4
.nf
\fB
trap " $cmd" 0
.fi \fR
.P
.RE
.P
also works (the leading
&lt;space&gt;
character protects against unlikely cases where
.IR cmd
is a decimal integer or begins with
.BR '\(mi' ),
but it expands the
.IR cmd
variable when the
.IR trap
command is executed, not when the exit action is executed.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "Section 2.14" ", " "Special Built-In Utilities"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 12.2" ", " "Utility Syntax Guidelines",
.IR "\fB&lt;signal.h&gt;\fP"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.
.TH TRUE "1" "March 2017" "GNU coreutils 8.27" "User Commands"
.SH NAME
true \- do nothing, successfully
.SH SYNOPSIS
.B true
[\fI\,ignored command line arguments\/\fR]
.br
.B true
\fI\,OPTION\/\fR
.SH DESCRIPTION
.\" Add any additional description here
.PP
Exit with a status code indicating success.
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-\-version\fR
output version information and exit
.PP
NOTE: your shell may have its own version of true, which usually supersedes
the version described here.  Please refer to your shell's documentation
for details about the options it supports.
.SH AUTHOR
Written by Jim Meyering.
.SH "REPORTING BUGS"
GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt;
.br
Report true translation bugs to &lt;http://translationproject.org/team/&gt;
.SH COPYRIGHT
Copyright \(co 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
Full documentation at: &lt;http://www.gnu.org/software/coreutils/true&gt;
.br
or available locally via: info \(aq(coreutils) true invocation\(aq
.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.
.TH TSORT "1" "March 2017" "GNU coreutils 8.27" "User Commands"
.SH NAME
tsort \- perform topological sort
.SH SYNOPSIS
.B tsort
[\fI\,OPTION\/\fR] [\fI\,FILE\/\fR]
.SH DESCRIPTION
.\" Add any additional description here
.PP
Write totally ordered list consistent with the partial ordering in FILE.
.PP
With no FILE, or when FILE is \-, read standard input.
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-\-version\fR
output version information and exit
.SH AUTHOR
Written by Mark Kettenis.
.SH "REPORTING BUGS"
GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt;
.br
Report tsort translation bugs to &lt;http://translationproject.org/team/&gt;
.SH COPYRIGHT
Copyright \(co 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
Full documentation at: &lt;http://www.gnu.org/software/coreutils/tsort&gt;
.br
or available locally via: info \(aq(coreutils) tsort invocation\(aq
.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.
.TH TTY "1" "March 2017" "GNU coreutils 8.27" "User Commands"
.SH NAME
tty \- print the file name of the terminal connected to standard input
.SH SYNOPSIS
.B tty
[\fI\,OPTION\/\fR]...
.SH DESCRIPTION
.\" Add any additional description here
.PP
Print the file name of the terminal connected to standard input.
.TP
\fB\-s\fR, \fB\-\-silent\fR, \fB\-\-quiet\fR
print nothing, only return an exit status
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-\-version\fR
output version information and exit
.SH AUTHOR
Written by David MacKenzie.
.SH "REPORTING BUGS"
GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt;
.br
Report tty translation bugs to &lt;http://translationproject.org/team/&gt;
.SH COPYRIGHT
Copyright \(co 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
Full documentation at: &lt;http://www.gnu.org/software/coreutils/tty&gt;
.br
or available locally via: info \(aq(coreutils) tty invocation\(aq
'\" et
.TH TYPE "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
type
\(em write a description of command type
.SH SYNOPSIS
.LP
.nf
type \fIname\fR...
.fi
.SH DESCRIPTION
The
.IR type
utility shall indicate how each argument would be interpreted if used
as a command name.
.SH OPTIONS
None.
.SH OPERANDS
The following operand shall be supported:
.IP "\fIname\fR" 10
A name to be interpreted.
.SH STDIN
Not used.
.SH "INPUT FILES"
None.
.SH "ENVIRONMENT VARIABLES"
The following environment variables shall affect the execution of
.IR type :
.IP "\fILANG\fP" 10
Provide a default value for the internationalization variables that are
unset or null. (See the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 8.2" ", " "Internationalization Variables"
for the precedence of internationalization variables used to determine
the values of locale categories.)
.IP "\fILC_ALL\fP" 10
If set to a non-empty string value, override the values of all the
other internationalization variables.
.IP "\fILC_CTYPE\fP" 10
Determine the locale for the interpretation of sequences of bytes of
text data as characters (for example, single-byte as opposed to
multi-byte characters in arguments).
.IP "\fILC_MESSAGES\fP" 10
.br
Determine the locale that should be used to affect the format and
contents of diagnostic messages written to standard error.
.IP "\fINLSPATH\fP" 10
Determine the location of message catalogs for the processing of
.IR LC_MESSAGES .
.IP "\fIPATH\fP" 10
Determine the location of
.IR name ,
as described in the Base Definitions volume of POSIX.1\(hy2008,
.IR "Chapter 8" ", " "Environment Variables".
.SH "ASYNCHRONOUS EVENTS"
Default.
.SH STDOUT
The standard output of
.IR type
contains information about each operand in an unspecified format. The
information provided typically identifies the operand as a shell
built-in, function, alias, or keyword, and where applicable, may
display the operand's pathname.
.SH STDERR
The standard error shall be used only for diagnostic messages.
.SH "OUTPUT FILES"
None.
.SH "EXTENDED DESCRIPTION"
None.
.SH "EXIT STATUS"
The following exit values shall be returned:
.IP "\00" 6
Successful completion.
.IP &gt;0 6
An error occurred.
.SH "CONSEQUENCES OF ERRORS"
Default.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
Since
.IR type
must be aware of the contents of the current shell execution
environment (such as the lists of commands, functions, and built-ins
processed by
.IR hash ),
it is always provided as a shell regular built-in. If it is called in
a separate utility execution environment, such as one of the
following:
.sp
.RS 4
.nf
\fB
nohup type writer
find . \(mitype f | xargs type
.fi \fR
.P
.RE
it might not produce accurate results.
.SH EXAMPLES
None.
.SH RATIONALE
None.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "\fIcommand\fR\^",
.IR "\fIhash\fR\^"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "Chapter 8" ", " "Environment Variables"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
'\" et
.TH ULIMIT "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
ulimit
\(em set or report file size limit
.SH SYNOPSIS
.LP
.nf
ulimit \fB[\fR\(mif\fB] [\fIblocks\fB]\fR
.fi
.SH DESCRIPTION
The
.IR ulimit
utility shall set or report the file-size writing limit imposed on
files written by the shell and its child processes (files of any size
may be read). Only a process with appropriate privileges can increase
the limit.
.SH OPTIONS
The
.IR ulimit
utility shall conform to the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 12.2" ", " "Utility Syntax Guidelines".
.P
The following option shall be supported:
.IP "\fB\(mif\fP" 10
Set (or report, if no
.IR blocks
operand is present), the file size limit in blocks. The
.BR \(mif
option shall also be the default case.
.SH OPERANDS
The following operand shall be supported:
.IP "\fIblocks\fR" 10
The number of 512-byte blocks to use as the new file size limit.
.SH STDIN
Not used.
.SH "INPUT FILES"
None.
.SH "ENVIRONMENT VARIABLES"
The following environment variables shall affect the execution of
.IR ulimit :
.IP "\fILANG\fP" 10
Provide a default value for the internationalization variables that are
unset or null. (See the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 8.2" ", " "Internationalization Variables"
for the precedence of internationalization variables used to determine
the values of locale categories.)
.IP "\fILC_ALL\fP" 10
If set to a non-empty string value, override the values of all the
other internationalization variables.
.IP "\fILC_CTYPE\fP" 10
Determine the locale for the interpretation of sequences of bytes of
text data as characters (for example, single-byte as opposed to
multi-byte characters in arguments).
.IP "\fILC_MESSAGES\fP" 10
.br
Determine the locale that should be used to affect the format and
contents of diagnostic messages written to standard error.
.IP "\fINLSPATH\fP" 10
Determine the location of message catalogs for the processing of
.IR LC_MESSAGES .
.SH "ASYNCHRONOUS EVENTS"
Default.
.SH STDOUT
The standard output shall be used when no
.IR blocks
operand is present. If the current number of blocks is limited, the
number of blocks in the current limit shall be written in the following
format:
.sp
.RS 4
.nf
\fB
"%d\en", &lt;\fInumber of 512-byte blocks\fR&gt;
.fi \fR
.P
.RE
.P
If there is no current limit on the number of blocks, in the POSIX
locale the following format shall be used:
.sp
.RS 4
.nf
\fB
"unlimited\en"
.fi \fR
.P
.RE
.SH STDERR
The standard error shall be used only for diagnostic messages.
.SH "OUTPUT FILES"
None.
.SH "EXTENDED DESCRIPTION"
None.
.SH "EXIT STATUS"
The following exit values shall be returned:
.IP "\00" 6
Successful completion.
.IP &gt;0 6
A request for a higher limit was rejected or an error occurred.
.SH "CONSEQUENCES OF ERRORS"
Default.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
Since
.IR ulimit
affects the current shell execution environment, it is always provided
as a shell regular built-in. If it is called in a separate utility
execution environment, such as one of the following:
.sp
.RS 4
.nf
\fB
nohup ulimit \(mif 10000
env ulimit 10000
.fi \fR
.P
.RE
.P
it does not affect the file size limit of the caller's environment.
.P
Once a limit has been decreased by a process, it cannot be increased
(unless appropriate privileges are involved), even back to the original
system limit.
.SH EXAMPLES
Set the file size limit to 51\|200 bytes:
.sp
.RS 4
.nf
\fB
ulimit \(mif 100
.fi \fR
.P
.RE
.SH RATIONALE
None.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
The Base Definitions volume of POSIX.1\(hy2008,
.IR "Chapter 8" ", " "Environment Variables",
.IR "Section 12.2" ", " "Utility Syntax Guidelines"
.P
The System Interfaces volume of POSIX.1\(hy2008,
.IR "\fIulimit\fR\^(\|)"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
'\" et
.TH UMASK "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
umask
\(em get or set the file mode creation mask
.SH SYNOPSIS
.LP
.nf
umask \fB[\fR\(miS\fB] [\fImask\fB]\fR
.fi
.SH DESCRIPTION
The
.IR umask
utility shall set the file mode creation mask of the current shell
execution environment (see
.IR "Section 2.12" ", " "Shell Execution Environment")
to the value specified by the
.IR mask
operand. This mask shall affect the initial value of the file
permission bits of subsequently created files. If
.IR umask
is called in a subshell or separate utility execution environment, such
as one of the following:
.sp
.RS 4
.nf
\fB
(umask 002)
nohup umask ...
find . \(miexec umask ... \e;
.fi \fR
.P
.RE
.P
it shall not affect the file mode creation mask of the caller's
environment.
.P
If the
.IR mask
operand is not specified, the
.IR umask
utility shall write to standard output the value of the
file mode creation mask of the invoking process.
.SH OPTIONS
The
.IR umask
utility shall conform to the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 12.2" ", " "Utility Syntax Guidelines".
.P
The following option shall be supported:
.IP "\fB\(miS\fP" 10
Produce symbolic output.
.P
The default output style is unspecified, but shall be recognized on a
subsequent invocation of
.IR umask
on the same system as a
.IR mask
operand to restore the previous file mode creation mask.
.SH OPERANDS
The following operand shall be supported:
.IP "\fImask\fR" 10
A string specifying the new file mode creation mask. The string is
treated in the same way as the
.IR mode
operand described in the EXTENDED DESCRIPTION section for
.IR chmod .
.RS 10 
.P
For a
.IR symbolic_mode
value, the new value of the file mode creation mask shall be the
logical complement of the file permission bits portion of the file mode
specified by the
.IR symbolic_mode
string.
.P
In a
.IR symbolic_mode
value, the permissions
.IR op
characters
.BR '\(pl' 
and
.BR '\(mi' 
shall be interpreted relative to the current file mode creation mask;
.BR '\(pl' 
shall cause the bits for the indicated permissions to be cleared in the
mask;
.BR '\(mi' 
shall cause the bits for the indicated permissions to be set in the
mask.
.P
The interpretation of
.IR mode
values that specify file mode bits other than the file permission bits
is unspecified.
.P
In the octal integer form of
.IR mode ,
the specified bits are set in the file mode creation mask.
.P
The file mode creation mask shall be set to the resulting numeric
value.
.P
The default output of a prior invocation of
.IR umask
on the same system with no operand also shall be recognized as a
.IR mask
operand.
.RE
.SH STDIN
Not used.
.SH "INPUT FILES"
None.
.SH "ENVIRONMENT VARIABLES"
The following environment variables shall affect the execution of
.IR umask :
.IP "\fILANG\fP" 10
Provide a default value for the internationalization variables that are
unset or null. (See the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 8.2" ", " "Internationalization Variables"
for the precedence of internationalization variables used to determine
the values of locale categories.)
.IP "\fILC_ALL\fP" 10
If set to a non-empty string value, override the values of all the
other internationalization variables.
.IP "\fILC_CTYPE\fP" 10
Determine the locale for the interpretation of sequences of bytes of
text data as characters (for example, single-byte as opposed to
multi-byte characters in arguments).
.IP "\fILC_MESSAGES\fP" 10
.br
Determine the locale that should be used to affect the format and
contents of diagnostic messages written to standard error.
.IP "\fINLSPATH\fP" 10
Determine the location of message catalogs for the processing of
.IR LC_MESSAGES .
.SH "ASYNCHRONOUS EVENTS"
Default.
.SH STDOUT
When the
.IR mask
operand is not specified, the
.IR umask
utility shall write a message to standard output that can later be used
as a
.IR umask
.IR mask
operand.
.P
If
.BR \(miS
is specified, the message shall be in the following format:
.sp
.RS 4
.nf
\fB
"u=%s,g=%s,o=%s\en", &lt;\fIowner permissions\fR&gt;, &lt;\fIgroup permissions\fR&gt;,
&lt;\fIother permissions\fR&gt;
.fi \fR
.P
.RE
.P
where the three values shall be combinations of letters from the set
{\c
.IR r ,
.IR w ,
.IR x };
the presence of a letter shall indicate that the corresponding bit is
clear in the file mode creation mask.
.P
If a
.IR mask
operand is specified, there shall be no output written to standard
output.
.SH STDERR
The standard error shall be used only for diagnostic messages.
.SH "OUTPUT FILES"
None.
.SH "EXTENDED DESCRIPTION"
None.
.SH "EXIT STATUS"
The following exit values shall be returned:
.IP "\00" 6
The file mode creation mask was successfully changed, or no
.IR mask
operand was supplied.
.IP &gt;0 6
An error occurred.
.SH "CONSEQUENCES OF ERRORS"
Default.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
Since
.IR umask
affects the current shell execution environment, it is generally
provided as a shell regular built-in.
.P
In contrast to the negative permission logic provided by the file mode
creation mask and the octal number form of the
.IR mask
argument, the symbolic form of the
.IR mask
argument specifies those permissions that are left alone.
.SH EXAMPLES
Either of the commands:
.sp
.RS 4
.nf
\fB
umask a=rx,ug+w
.P
umask 002
.fi \fR
.P
.RE
.P
sets the mode mask so that subsequently created files have their
S_IWOTH bit cleared.
.P
After setting the mode mask with either of the above commands, the
.IR umask
command can be used to write out the current value of the mode mask:
.sp
.RS 4
.nf
\fB
\fB$ \fRumask
\fB0002\fR
.fi \fR
.P
.RE
.P
(The output format is unspecified, but historical implementations use
the octal integer mode format.)
.sp
.RS 4
.nf
\fB
\fB$ \fRumask \(miS
\fBu=rwx,g=rwx,o=rx\fR
.fi \fR
.P
.RE
.P
Either of these outputs can be used as the mask operand to a subsequent
invocation of the
.IR umask
utility.
.P
Assuming the mode mask is set as above, the command:
.sp
.RS 4
.nf
\fB
umask g\(miw
.fi \fR
.P
.RE
.P
sets the mode mask so that subsequently created files have their
S_IWGRP and S_IWOTH bits cleared.
.P
The command:
.sp
.RS 4
.nf
\fB
umask \(mi\|\(mi \(miw
.fi \fR
.P
.RE
.P
sets the mode mask so that subsequently created files have all their
write bits cleared. Note that
.IR mask
operands
.BR \(mir ,
.BR \(miw ,
.BR \(mix
or anything beginning with a
&lt;hyphen&gt;,
must be preceded by
.BR \(dq\(mi\|\(mi\(dq 
to keep it from being interpreted as an option.
.SH RATIONALE
Since
.IR umask
affects the current shell execution environment,
it is generally provided as a shell regular built-in. If it is called
in a subshell or separate utility execution environment, such as one of
the following:
.sp
.RS 4
.nf
\fB
(umask 002)
nohup umask ...
find . \(miexec umask ... \e;
.fi \fR
.P
.RE
.P
it does not affect the file mode creation mask of the environment of
the caller.
.P
The description of the historical utility was modified to allow it to
use the symbolic modes of
.IR chmod .
The
.BR \(mis
option used in early proposals was changed to
.BR \(miS
because
.BR \(mis
could be confused with a
.IR symbolic_mode
form of mask referring to the S_ISUID and S_ISGID bits.
.P
The default output style is unspecified to permit implementors to
provide migration to the new symbolic style at the time most
appropriate to their users. A
.BR \(mio
flag to force octal mode output was omitted because the octal mode may
not be sufficient to specify all of the information that may be present
in the file mode creation mask when more secure file access permission
checks are implemented.
.P
It has been suggested that trusted systems developers might appreciate
ameliorating the requirement that the mode mask ``affects'' the file
access permissions, since it seems access control lists might replace
the mode mask to some degree. The wording has been changed to say that
it affects the file permission bits, and it leaves the details of the
behavior of how they affect the file access permissions to the
description in the System Interfaces volume of POSIX.1\(hy2008.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "Chapter 2" ", " "Shell Command Language",
.IR "\fIchmod\fR\^"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "Chapter 8" ", " "Environment Variables",
.IR "Section 12.2" ", " "Utility Syntax Guidelines"
.P
The System Interfaces volume of POSIX.1\(hy2008,
.IR "\fIumask\fR\^(\|)"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
'\" et
.TH UNALIAS "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
unalias
\(em remove alias definitions
.SH SYNOPSIS
.LP
.nf
unalias \fIalias-name\fR...
.P
unalias \(mia
.fi
.SH DESCRIPTION
The
.IR unalias
utility shall remove the definition for each alias name specified. See
.IR "Section 2.3.1" ", " "Alias Substitution".
The aliases shall be removed from the current shell execution
environment; see
.IR "Section 2.12" ", " "Shell Execution Environment".
.SH OPTIONS
The
.IR unalias
utility shall conform to the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 12.2" ", " "Utility Syntax Guidelines".
.P
The following option shall be supported:
.IP "\fB\(mia\fP" 10
Remove all alias definitions from the current shell execution
environment.
.SH OPERANDS
The following operand shall be supported:
.IP "\fIalias-name\fR" 10
The name of an alias to be removed.
.SH STDIN
Not used.
.SH "INPUT FILES"
None.
.SH "ENVIRONMENT VARIABLES"
The following environment variables shall affect the execution of
.IR unalias :
.IP "\fILANG\fP" 10
Provide a default value for the internationalization variables that are
unset or null. (See the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 8.2" ", " "Internationalization Variables"
for the precedence of internationalization variables used to determine
the values of locale categories.)
.IP "\fILC_ALL\fP" 10
If set to a non-empty string value, override the values of all the
other internationalization variables.
.IP "\fILC_CTYPE\fP" 10
Determine the locale for the interpretation of sequences of bytes of
text data as characters (for example, single-byte as opposed to
multi-byte characters in arguments).
.IP "\fILC_MESSAGES\fP" 10
.br
Determine the locale that should be used to affect the format and
contents of diagnostic messages written to standard error.
.IP "\fINLSPATH\fP" 10
Determine the location of message catalogs for the processing of
.IR LC_MESSAGES .
.SH "ASYNCHRONOUS EVENTS"
Default.
.SH STDOUT
Not used.
.SH STDERR
The standard error shall be used only for diagnostic messages.
.SH "OUTPUT FILES"
None.
.SH "EXTENDED DESCRIPTION"
None.
.SH "EXIT STATUS"
The following exit values shall be returned:
.IP "\00" 6
Successful completion.
.IP &gt;0 6
One of the
.IR alias-name
operands specified did not represent a valid alias definition, or an
error occurred.
.SH "CONSEQUENCES OF ERRORS"
Default.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
Since
.IR unalias
affects the current shell execution environment, it is generally
provided as a shell regular built-in.
.SH EXAMPLES
None.
.SH RATIONALE
The
.IR unalias
description is based on that from historical KornShell implementations.
Known differences exist between that and the C shell. The KornShell
version was adopted to be consistent with all the other KornShell
features in this volume of POSIX.1\(hy2008, such as command line editing.
.P
The
.BR \(mia
option is the equivalent of the
.IR unalias
* form of the C shell and is provided to address security concerns
about unknown aliases entering the environment of a user (or
application) through the allowable implementation-defined predefined
alias route or as a result of an
.IR ENV
file. (Although
.IR unalias
could be used to simplify the ``secure'' shell script shown in the
.IR command
rationale, it does not obviate the need to quote all command names. An
initial call to
.IR unalias
.BR \(mia
would have to be quoted in case there was an alias for
.IR unalias .)
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "Chapter 2" ", " "Shell Command Language",
.IR "\fIalias\fR\^"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "Chapter 8" ", " "Environment Variables",
.IR "Section 12.2" ", " "Utility Syntax Guidelines"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.
.TH UNAME "1" "March 2017" "GNU coreutils 8.27" "User Commands"
.SH NAME
uname \- print system information
.SH SYNOPSIS
.B uname
[\fI\,OPTION\/\fR]...
.SH DESCRIPTION
.\" Add any additional description here
.PP
Print certain system information.  With no OPTION, same as \fB\-s\fR.
.TP
\fB\-a\fR, \fB\-\-all\fR
print all information, in the following order,
except omit \fB\-p\fR and \fB\-i\fR if unknown:
.TP
\fB\-s\fR, \fB\-\-kernel\-name\fR
print the kernel name
.TP
\fB\-n\fR, \fB\-\-nodename\fR
print the network node hostname
.TP
\fB\-r\fR, \fB\-\-kernel\-release\fR
print the kernel release
.TP
\fB\-v\fR, \fB\-\-kernel\-version\fR
print the kernel version
.TP
\fB\-m\fR, \fB\-\-machine\fR
print the machine hardware name
.TP
\fB\-p\fR, \fB\-\-processor\fR
print the processor type (non\-portable)
.TP
\fB\-i\fR, \fB\-\-hardware\-platform\fR
print the hardware platform (non\-portable)
.TP
\fB\-o\fR, \fB\-\-operating\-system\fR
print the operating system
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-\-version\fR
output version information and exit
.SH AUTHOR
Written by David MacKenzie.
.SH "REPORTING BUGS"
GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt;
.br
Report uname translation bugs to &lt;http://translationproject.org/team/&gt;
.SH COPYRIGHT
Copyright \(co 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
arch(1), uname(2)
.PP
.br
Full documentation at: &lt;http://www.gnu.org/software/coreutils/uname&gt;
.br
or available locally via: info \(aq(coreutils) uname invocation\(aq
'\" et
.TH UNCOMPRESS "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
uncompress
\(em expand compressed data
.SH SYNOPSIS
.LP
.nf
uncompress \fB[\fR\(micfv\fB] [\fIfile\fR...\fB]\fR
.fi
.SH DESCRIPTION
The
.IR uncompress
utility shall restore files to their original state after they have
been compressed using the
.IR compress
utility. If no files are specified, the standard input shall be
uncompressed to the standard output. If the invoking process has
appropriate privileges, the ownership, modes, access time, and
modification time of the original file shall be preserved.
.P
This utility shall support the uncompressing of any files produced by
the
.IR compress
utility on the same implementation. For files produced by
.IR compress
on other systems,
.IR uncompress
supports 9 to 14-bit compression (see
.IR "\fIcompress\fR\^",
.BR \(mib );
it is implementation-defined whether values of
.BR \(mib
greater than 14 are supported.
.SH OPTIONS
The
.IR uncompress
utility shall conform to the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 12.2" ", " "Utility Syntax Guidelines",
except that Guideline 1 does apply since the utility name has ten letters.
.P
The following options shall be supported:
.IP "\fB\(mic\fP" 10
Write to standard output; no files are changed.
.IP "\fB\(mif\fP" 10
Do not prompt for overwriting files. Except when run in the
background, if
.BR \(mif
is not given the user shall be prompted as to whether an existing file
should be overwritten. If the standard input is not a terminal and
.BR \(mif
is not given,
.IR uncompress
shall write a diagnostic message to standard error and exit with a
status greater than zero.
.IP "\fB\(miv\fP" 10
Write messages to standard error concerning the expansion of each file.
.SH OPERANDS
The following operand shall be supported:
.IP "\fIfile\fR" 10
A pathname of a file. If
.IR file
already has the
.BR .Z
suffix specified, it shall be used as the input file and the output
file shall be named
.BR file
with the
.BR .Z
suffix removed. Otherwise,
.IR file
shall be used as the name of the output file and
.BR file
with the
.BR .Z
suffix appended shall be used as the input file.
.SH STDIN
The standard input shall be used only if no
.IR file
operands are specified, or if a
.IR file
operand is
.BR '\(mi' .
.SH "INPUT FILES"
Input files shall be in the format produced by the
.IR compress
utility.
.SH "ENVIRONMENT VARIABLES"
The following environment variables shall affect the execution of
.IR uncompress :
.IP "\fILANG\fP" 10
Provide a default value for the internationalization variables that are
unset or null. (See the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 8.2" ", " "Internationalization Variables"
for the precedence of internationalization variables used to determine
the values of locale categories.)
.IP "\fILC_ALL\fP" 10
If set to a non-empty string value, override the values of all the
other internationalization variables.
.IP "\fILC_CTYPE\fP" 10
Determine the locale for the interpretation of sequences of bytes of
text data as characters (for example, single-byte as opposed to
multi-byte characters in arguments).
.IP "\fILC_MESSAGES\fP" 10
.br
Determine the locale that should be used to affect the format and
contents of diagnostic messages written to standard error.
.IP "\fINLSPATH\fP" 10
Determine the location of message catalogs for the processing of
.IR LC_MESSAGES .
.SH "ASYNCHRONOUS EVENTS"
Default.
.SH STDOUT
When there are no
.IR file
operands or the
.BR \(mic
option is specified, the uncompressed output is written to standard
output.
.SH STDERR
Prompts shall be written to the standard error output under the
conditions specified in the DESCRIPTION and OPTIONS sections. The
prompts shall contain the
.IR file
pathname, but their format is otherwise unspecified. Otherwise, the
standard error output shall be used only for diagnostic messages.
.SH "OUTPUT FILES"
Output files are the same as the respective input files to
.IR compress .
.SH "EXTENDED DESCRIPTION"
None.
.SH "EXIT STATUS"
The following exit values shall be returned:
.IP "\00" 6
Successful completion.
.IP &gt;0 6
An error occurred.
.SH "CONSEQUENCES OF ERRORS"
The input file remains unmodified.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
The limit of 14 on the
.IR compress
.BR \(mib
.IR bits
argument is to achieve portability to all systems (within the
restrictions imposed by the lack of an explicit published file
format). Some implementations based on 16-bit architectures cannot
support 15 or 16-bit uncompression.
.SH EXAMPLES
None.
.SH RATIONALE
None.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "\fIcompress\fR\^",
.IR "\fIzcat\fR\^"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "Chapter 8" ", " "Environment Variables",
.IR "Section 12.2" ", " "Utility Syntax Guidelines"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.
.TH UNEXPAND "1" "March 2017" "GNU coreutils 8.27" "User Commands"
.SH NAME
unexpand \- convert spaces to tabs
.SH SYNOPSIS
.B unexpand
[\fI\,OPTION\/\fR]... [\fI\,FILE\/\fR]...
.SH DESCRIPTION
.\" Add any additional description here
.PP
Convert blanks in each FILE to tabs, writing to standard output.
.PP
With no FILE, or when FILE is \-, read standard input.
.PP
Mandatory arguments to long options are mandatory for short options too.
.TP
\fB\-a\fR, \fB\-\-all\fR
convert all blanks, instead of just initial blanks
.TP
\fB\-\-first\-only\fR
convert only leading sequences of blanks (overrides \fB\-a\fR)
.TP
\fB\-t\fR, \fB\-\-tabs\fR=\fI\,N\/\fR
have tabs N characters apart instead of 8 (enables \fB\-a\fR)
.TP
\fB\-t\fR, \fB\-\-tabs\fR=\fI\,LIST\/\fR
use comma separated LIST of tab positions (enables \fB\-a\fR)
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-\-version\fR
output version information and exit
.SH AUTHOR
Written by David MacKenzie.
.SH "REPORTING BUGS"
GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt;
.br
Report unexpand translation bugs to &lt;http://translationproject.org/team/&gt;
.SH COPYRIGHT
Copyright \(co 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
expand(1)
.PP
.br
Full documentation at: &lt;http://www.gnu.org/software/coreutils/unexpand&gt;
.br
or available locally via: info \(aq(coreutils) unexpand invocation\(aq
'\" et
.TH UNGET "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
unget
\(em undo a previous get of an SCCS file (\fBDEVELOPMENT\fP)
.SH SYNOPSIS
.LP
.nf
unget \fB[\fR\(mins\fB] [\fR\(mir \fISID\fB] \fIfile\fR...
.fi
.SH DESCRIPTION
The
.IR unget
utility shall reverse the effect of a
.IR get
.BR \(mie
done prior to creating the intended new delta.
.SH OPTIONS
The
.IR unget
utility shall conform to the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 12.2" ", " "Utility Syntax Guidelines".
.P
The following options shall be supported:
.IP "\fB\(mir\ \fISID\fR" 10
Uniquely identify which delta is no longer intended. (This would have
been specified by
.IR get
as the new delta.) The use of this option is necessary only if two or
more outstanding
.IR get
commands for editing on the same SCCS file were done by the same person
(login name).
.IP "\fB\(mis\fP" 10
Suppress the writing to standard output of the intended delta's SID.
.IP "\fB\(min\fP" 10
Retain the file that was obtained by
.IR get ,
which would normally be removed from the current directory.
.SH OPERANDS
The following operands shall be supported:
.IP "\fIfile\fR" 10
A pathname of an existing SCCS file or a directory. If
.IR file
is a directory, the
.IR unget
utility shall behave as though each file in the directory were specified as a named
file, except that non-SCCS files (last component of the pathname does
not begin with
.BR s. )
and unreadable files shall be silently ignored.
.RS 10 
.P
If exactly one
.IR file
operand appears, and it is
.BR '\(mi' ,
the standard input shall be read; each line of the standard input shall
be taken to be the name of an SCCS file to be processed. Non-SCCS files
and unreadable files shall be silently ignored.
.RE
.SH STDIN
The standard input shall be a text file used only when the
.IR file
operand is specified as
.BR '\(mi' .
Each line of the text file shall be interpreted as an SCCS pathname.
.SH "INPUT FILES"
Any SCCS files processed shall be files of an unspecified format.
.SH "ENVIRONMENT VARIABLES"
The following environment variables shall affect the execution of
.IR unget :
.IP "\fILANG\fP" 10
Provide a default value for the internationalization variables that are
unset or null. (See the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 8.2" ", " "Internationalization Variables"
for the precedence of internationalization variables used to determine
the values of locale categories.)
.IP "\fILC_ALL\fP" 10
If set to a non-empty string value, override the values of all the
other internationalization variables.
.IP "\fILC_CTYPE\fP" 10
Determine the locale for the interpretation of sequences of bytes of
text data as characters (for example, single-byte as opposed to
multi-byte characters in arguments and input files).
.IP "\fILC_MESSAGES\fP" 10
.br
Determine the locale that should be used to affect the format and
contents of diagnostic messages written to standard error.
.IP "\fINLSPATH\fP" 10
Determine the location of message catalogs for the processing of
.IR LC_MESSAGES .
.SH "ASYNCHRONOUS EVENTS"
Default.
.SH STDOUT
The standard output shall consist of a line for each file, in the
following format:
.sp
.RS 4
.nf
\fB
"%s\en", &lt;\fISID removed from file\fR&gt;
.fi \fR
.P
.RE
.P
If there is more than one named file or if a directory or standard
input is named, each pathname shall be written before each of the
preceding lines:
.sp
.RS 4
.nf
\fB
"\en%s:\en", &lt;\fIpathname\fR&gt;
.fi \fR
.P
.RE
.SH STDERR
The standard error shall be used only for diagnostic messages.
.SH "OUTPUT FILES"
Any SCCS files updated shall be files of an unspecified format.
During processing of a
.IR file ,
a locking
.IR z-file ,
as described in
.IR get ,
and a
.IR q-file
(a working copy of the
.IR p-file ),
may be created and deleted. The
.IR p-file
and
.IR g-file ,
as described in
.IR get ,
shall be deleted.
.SH "EXTENDED DESCRIPTION"
None.
.SH "EXIT STATUS"
The following exit values shall be returned:
.IP "\00" 6
Successful completion.
.IP &gt;0 6
An error occurred.
.SH "CONSEQUENCES OF ERRORS"
Default.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
None.
.SH EXAMPLES
None.
.SH RATIONALE
None.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "\fIdelta\fR\^",
.IR "\fIget\fR\^",
.IR "\fIsact\fR\^"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "Chapter 8" ", " "Environment Variables",
.IR "Section 12.2" ", " "Utility Syntax Guidelines"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.
.TH UNIQ "1" "March 2017" "GNU coreutils 8.27" "User Commands"
.SH NAME
uniq \- report or omit repeated lines
.SH SYNOPSIS
.B uniq
[\fI\,OPTION\/\fR]... [\fI\,INPUT \/\fR[\fI\,OUTPUT\/\fR]]
.SH DESCRIPTION
.\" Add any additional description here
.PP
Filter adjacent matching lines from INPUT (or standard input),
writing to OUTPUT (or standard output).
.PP
With no options, matching lines are merged to the first occurrence.
.PP
Mandatory arguments to long options are mandatory for short options too.
.TP
\fB\-c\fR, \fB\-\-count\fR
prefix lines by the number of occurrences
.TP
\fB\-d\fR, \fB\-\-repeated\fR
only print duplicate lines, one for each group
.TP
\fB\-D\fR
print all duplicate lines
.TP
\fB\-\-all\-repeated\fR[=\fI\,METHOD\/\fR]
like \fB\-D\fR, but allow separating groups
with an empty line;
METHOD={none(default),prepend,separate}
.TP
\fB\-f\fR, \fB\-\-skip\-fields\fR=\fI\,N\/\fR
avoid comparing the first N fields
.TP
\fB\-\-group\fR[=\fI\,METHOD\/\fR]
show all items, separating groups with an empty line;
METHOD={separate(default),prepend,append,both}
.TP
\fB\-i\fR, \fB\-\-ignore\-case\fR
ignore differences in case when comparing
.TP
\fB\-s\fR, \fB\-\-skip\-chars\fR=\fI\,N\/\fR
avoid comparing the first N characters
.TP
\fB\-u\fR, \fB\-\-unique\fR
only print unique lines
.TP
\fB\-z\fR, \fB\-\-zero\-terminated\fR
line delimiter is NUL, not newline
.TP
\fB\-w\fR, \fB\-\-check\-chars\fR=\fI\,N\/\fR
compare no more than N characters in lines
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-\-version\fR
output version information and exit
.PP
A field is a run of blanks (usually spaces and/or TABs), then non\-blank
characters.  Fields are skipped before chars.
.PP
Note: 'uniq' does not detect repeated lines unless they are adjacent.
You may want to sort the input first, or use 'sort \fB\-u\fR' without 'uniq'.
Also, comparisons honor the rules specified by 'LC_COLLATE'.
.SH AUTHOR
Written by Richard M. Stallman and David MacKenzie.
.SH "REPORTING BUGS"
GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt;
.br
Report uniq translation bugs to &lt;http://translationproject.org/team/&gt;
.SH COPYRIGHT
Copyright \(co 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
comm(1), join(1), sort(1)
.PP
.br
Full documentation at: &lt;http://www.gnu.org/software/coreutils/uniq&gt;
.br
or available locally via: info \(aq(coreutils) uniq invocation\(aq
.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.
.TH UNLINK "1" "March 2017" "GNU coreutils 8.27" "User Commands"
.SH NAME
unlink \- call the unlink function to remove the specified file
.SH SYNOPSIS
.B unlink
\fI\,FILE\/\fR
.br
.B unlink
\fI\,OPTION\/\fR
.SH DESCRIPTION
.\" Add any additional description here
.PP
Call the unlink function to remove the specified FILE.
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-\-version\fR
output version information and exit
.SH AUTHOR
Written by Michael Stone.
.SH "REPORTING BUGS"
GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt;
.br
Report unlink translation bugs to &lt;http://translationproject.org/team/&gt;
.SH COPYRIGHT
Copyright \(co 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
unlink(2)
.PP
.br
Full documentation at: &lt;http://www.gnu.org/software/coreutils/unlink&gt;
.br
or available locally via: info \(aq(coreutils) unlink invocation\(aq
'\" et
.TH UNSET "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
unset
\(em unset values and attributes of variables and functions
.SH SYNOPSIS
.LP
.nf
unset \fB[\fR\(mifv\fB] \fIname\fR...
.fi
.SH DESCRIPTION
Each variable or function specified by
.IR name
shall be unset.
.P
If
.BR \(miv
is specified,
.IR name
refers to a variable name and the shell shall unset it and remove it
from the environment. Read-only variables cannot be unset.
.P
If
.BR \(mif
is specified,
.IR name
refers to a function and the shell shall unset the function definition.
.P
If neither
.BR \(mif
nor
.BR \(miv
is specified,
.IR name
refers to a variable; if a variable by that name does not exist, it is
unspecified whether a function by that name, if any, shall be unset.
.P
Unsetting a variable or function that was not previously set shall not
be considered an error and does not cause the shell to abort.
.P
The
.IR unset
special built-in shall support the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 12.2" ", " "Utility Syntax Guidelines".
.P
Note that:
.sp
.RS 4
.nf
\fB
VARIABLE=
.fi \fR
.P
.RE
.P
is not equivalent to an
.IR unset
of
.BR VARIABLE ;
in the example,
.BR VARIABLE
is set to
.BR \(dq\^\(dq .
Also, the variables that can be
.IR unset
should not be misinterpreted to include the special parameters (see
.IR "Section 2.5.2" ", " "Special Parameters").
.SH OPTIONS
See the DESCRIPTION.
.SH OPERANDS
See the DESCRIPTION.
.SH STDIN
Not used.
.SH "INPUT FILES"
None.
.SH "ENVIRONMENT VARIABLES"
None.
.SH "ASYNCHRONOUS EVENTS"
Default.
.SH STDOUT
Not used.
.SH STDERR
The standard error shall be used only for diagnostic messages.
.SH "OUTPUT FILES"
None.
.SH "EXTENDED DESCRIPTION"
None.
.SH "EXIT STATUS"
.IP "\00" 6
All
.IR name
operands were successfully unset.
.IP &gt;0 6
At least one
.IR name
could not be unset.
.SH "CONSEQUENCES OF ERRORS"
Default.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
None.
.SH EXAMPLES
Unset
.IR VISUAL
variable:
.sp
.RS 4
.nf
\fB
unset \(miv VISUAL
.fi \fR
.P
.RE
.P
Unset the functions
.BR foo
and
.BR bar :
.sp
.RS 4
.nf
\fB
unset \(mif foo bar
.fi \fR
.P
.RE
.SH "RATIONALE"
Consideration was given to omitting the
.BR \(mif
option in favor of an
.IR unfunction
utility, but the standard developers decided to retain historical
practice.
.P
The
.BR \(miv
option was introduced because System V historically used one name space
for both variables and functions. When
.IR unset
is used without options, System V historically unset either a function
or a variable, and there was no confusion about which one was intended.
A portable POSIX application can use
.IR unset
without an option to unset a variable, but not a function; the
.BR \(mif
option must be used.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "Section 2.14" ", " "Special Built-In Utilities"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 12.2" ", " "Utility Syntax Guidelines"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
'\" et
.TH UUCP "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
uucp
\(em system-to-system copy
.SH SYNOPSIS
.LP
.nf
uucp \fB[\fR\(micCdfjmr\fB] [\fR\(min \fIuser\fB] \fIsource-file\fR... \fIdestination-file\fR
.fi
.SH DESCRIPTION
The
.IR uucp
utility shall copy files named by the
.IR source-file
argument to the
.IR destination-file
argument. The files named can be on local or remote systems.
.P
The
.IR uucp
utility cannot guarantee support for all character encodings in all
circumstances. For example, transmission data may be restricted to 7
bits by the underlying network, 8-bit data and filenames need not be
portable to non-internationalized systems, and so on. Under these
circumstances, it is recommended that only characters defined in the
ISO/IEC\ 646:\|1991 standard International Reference Version (equivalent to ASCII) 7-bit range
of characters be used, and that only characters defined in the portable
filename character set be used for naming files. The protocol for
transfer of files is unspecified by POSIX.1\(hy2008.
.P
Typical implementations of this utility require a communications line
configured to use the Base Definitions volume of POSIX.1\(hy2008,
.IR "Chapter 11" ", " "General Terminal Interface",
but other communications means may be used. On systems where there are
no available communications means (either temporarily or permanently),
this utility shall write an error message describing the problem and
exit with a non-zero exit status.
.SH OPTIONS
The
.IR uucp
utility shall conform to the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 12.2" ", " "Utility Syntax Guidelines".
.P
The following options shall be supported:
.IP "\fB\(mic\fP" 10
Do not copy local file to the spool directory for transfer to the
remote machine (default).
.IP "\fB\(miC\fP" 10
Force the copy of local files to the spool directory for transfer.
.IP "\fB\(mid\fP" 10
Make all necessary directories for the file copy (default).
.IP "\fB\(mif\fP" 10
Do not make intermediate directories for the file copy.
.IP "\fB\(mij\fP" 10
Write the job identification string to standard output. This job
identification can be used by
.IR uustat
to obtain the status or terminate a job.
.IP "\fB\(mim\fP" 10
Send mail to the requester when the copy is completed.
.IP "\fB\(min\ \fIuser\fR" 10
Notify
.IR user
on the remote system that a file was sent.
.IP "\fB\(mir\fP" 10
Do not start the file transfer; just queue the job.
.SH OPERANDS
The following operands shall be supported:
.IP "\fIdestination-file\fR,\ \fIsource-file\fR" 10
.br
A pathname of a file to be copied to, or from, respectively. Either
name can be a pathname on the local machine, or can have the form:
.RS 10 
.sp
.RS 4
.nf
\fB
\fIsystem-name\fR!\fIpathname\fR
.fi \fR
.P
.RE
.P
where
.IR system-name
is taken from a list of system names that
.IR uucp
knows about.
The destination
.IR system-name
can also be a list of names such as:
.sp
.RS 4
.nf
\fB
\fIsystem-name\fR!\fIsystem-name\fR!...!\fIsystem-name\fR!\fIpathname\fR
.fi \fR
.P
.RE
.P
in which case, an attempt is made to send the file via the specified
route to the destination. Care should be taken to ensure that
intermediate nodes in the route are willing to forward information.
.P
The shell pattern matching notation characters
.BR '?' ,
.BR '*' ,
and
.BR \(dq[...]\(dq 
appearing in
.IR pathname
shall be expanded on the appropriate system.
.P
Pathnames can be one of:
.IP " 1." 4
An absolute pathname.
.IP " 2." 4
A pathname preceded by ~\c
.IR user
where
.IR user
is a login name on the specified system and is replaced by that user's
login directory. Note that if an invalid login is specified, the
default is to the public directory (called
.IR PUBDIR ;
the actual location of
.IR PUBDIR
is implementation-defined).
.IP " 3." 4
A pathname preceded by ~/\c
.IR destination
where
.IR destination
is appended to
.IR PUBDIR .
.RS 4 
.TP 10
.BR Note:
This destination is treated as a filename unless more than one file is
being transferred by this request or the destination is already a
directory. To ensure that it is a directory, follow the destination
with a
.BR '/' .
For example,
.BR ~/dan/
as the destination makes the directory
.BR PUBDIR/dan
if it does not exist and puts the requested files in that directory.
.P
.RE
.IP " 4." 4
Anything else shall be prefixed by the current directory.
.P
If the result is an erroneous pathname for the remote system, the copy
shall fail. If the
.IR destination-file
is a directory, the last part of the
.IR source-file
name shall be used.
.P
The read, write, and execute permissions given by
.IR uucp
are implementation-defined.
.RE
.SH STDIN
Not used.
.SH "INPUT FILES"
The files to be copied are regular files.
.SH "ENVIRONMENT VARIABLES"
The following environment variables shall affect the execution of
.IR uucp :
.IP "\fILANG\fP" 10
Provide a default value for the internationalization variables that are
unset or null. (See the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 8.2" ", " "Internationalization Variables"
for the precedence of internationalization variables used to determine
the values of locale categories.)
.IP "\fILC_ALL\fP" 10
If set to a non-empty string value, override the values of all the
other internationalization variables.
.IP "\fILC_COLLATE\fP" 10
.br
Determine the locale for the behavior of ranges, equivalence classes,
and multi-character collating elements within bracketed filename
patterns.
.IP "\fILC_CTYPE\fP" 10
Determine the locale for the interpretation of sequences of bytes of
text data as characters (for example, single-byte as opposed to
multi-byte characters in arguments and input files) and the behavior of
character classes within bracketed filename patterns (for example,
.BR \(dq'[[:lower:]]*'\(dq ).
.IP "\fILC_MESSAGES\fP" 10
.br
Determine the locale that should be used to affect the format and
contents of diagnostic messages written to standard error, and
informative messages written to standard output.
.IP "\fINLSPATH\fP" 10
Determine the location of message catalogs for the processing of
.IR LC_MESSAGES .
.SH "ASYNCHRONOUS EVENTS"
Default.
.SH STDOUT
Not used.
.SH STDERR
The standard error shall be used only for diagnostic messages.
.SH "OUTPUT FILES"
The output files (which may be on other systems) are copies of the
input files.
.P
If
.BR \(mim
is used, mail files are modified.
.SH "EXTENDED DESCRIPTION"
None.
.SH "EXIT STATUS"
The following exit values shall be returned:
.IP "\00" 6
Successful completion.
.IP &gt;0 6
An error occurred.
.SH "CONSEQUENCES OF ERRORS"
Default.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
This utility is part of the UUCP Utilities option and need not be
supported by all implementations.
.P
The domain of remotely accessible files can (and for obvious security
reasons usually should) be severely restricted.
.P
Note that the
.BR '!' 
character in addresses has to be escaped when using
.IR csh
as a command interpreter because of its history substitution syntax.
For
.IR ksh
and
.IR sh
the escape is not necessary, but may be used.
.P
As noted above, shell metacharacters appearing in pathnames are
expanded on the appropriate system. On an internationalized system,
this is done under the control of local settings of
.IR LC_COLLATE
and
.IR LC_CTYPE .
Thus, care should be taken when using bracketed filename patterns, as
collation and typing rules may vary from one system to another. Also
be aware that certain types of expression (that is, equivalence
classes, character classes, and collating symbols) need not be
supported on non-internationalized systems.
.SH EXAMPLES
None.
.SH RATIONALE
None.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "\fImailx\fR\^",
.IR "\fIuuencode\fR\^",
.IR "\fIuustat\fR\^",
.IR "\fIuux\fR\^"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "Chapter 8" ", " "Environment Variables",
.IR "Chapter 11" ", " "General Terminal Interface",
.IR "Section 12.2" ", " "Utility Syntax Guidelines"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
.de1 NOP
.  it 1 an-trap
.  if \\n[.$] \,\\$*\/
..
.ie t \
.ds B-Font [CB]
.ds I-Font [CI]
.ds R-Font [CR]
.el \
.ds B-Font B
.ds I-Font I
.ds R-Font R
.TH uudecode 1 "30 May 2015" "GNU sharutils (4.15.2)" "User Commands"
.\"
.\" DO NOT EDIT THIS FILE (in-mem file)
.\"
.\" It has been AutoGen-ed
.\" From the definitions uudecode-opts.def
.\" and the template file agman-cmd.tpl
.SH NAME
\f\*[B-Font]uudecode\fP
\- decode an encoded file
.SH SYNOPSIS
\f\*[B-Font]uudecode\fP
.\" Mixture of short (flag) options and long options
[\f\*[B-Font]\-flags\f[]]
[\f\*[B-Font]\-flag\f[] [\f\*[I-Font]value\f[]]]
[\f\*[B-Font]\-\-option-name\f[][[=| ]\f\*[I-Font]value\f[]]]
[&lt;file&gt;...]
.sp \n(Ppu
.ne 2

If no \fIfile\fP(s) are provided, then standard input is decoded.
.SH "DESCRIPTION"
\fIuudecode\fP transforms uuencoded files into their original form.
.sp
The encoded file(s) may be specified on the command line, or one may
be read from standard input.  The output file name is specified in
the encoded file, but may be overridden with the \fB-o\fP option.
It will have the mode of the original file, except that setuid and
execute bits are not retained.  If the output file is specified to
be \fI/dev/stdout\fP or \fI-\fP, the result will be written to
standard output. If there are multiple input files and the second or
subsquent file specifies standard output, the decoded data will be
written to the same file as the previous output.  Don't do that.
.sp
\fIuudecode\fP ignores any leading and trailing lines.  It looks
for a line that starts with "\fBbegin\fP" and proceeds until the
end-of-encoding marker is found.  The program determines from the
header line of the encoded file which of the two supported encoding
schemes was used and whether or not the output file name has been
encoded with base64 encoding.  See \fIuuencode(5)\fP.
.SH "OPTIONS"
.TP
.NOP \f\*[B-Font]\-o\f[] \f\*[I-Font]file\f[], \f\*[B-Font]\-\-output\-file\f[]=\f\*[I-Font]file\f[]
direct output to \fIfile\fP.
.sp
If specified, decoded data are written to this file.  When multiple
inputs are specified on the command line, this option cannot be
specified.  All decoded data must be written to the file name
encoded in the data.
.TP
.NOP \f\*[B-Font]\-c\f[], \f\*[B-Font]\-\-ignore\-chmod\f[]
ignore \fBfchmod(3P)\fP errors.
.sp
By default, if the output file permissions cannot be changed to
the permissions specified in the encoded data, the file will not
be written out and execution stops.  This option will cause that
error to be ignored.  The resulting file will have all the data,
but the incorrect mode settings.
.sp
\fBfchmod()\fP errors are also ignored if
\fBPOSIXLY_CORRECT\fP is set in the environment.  RE:
\fIhttp://austingroupbugs.net/view.php?id=635\fP
.sp
A warning is always emitted when \fBfchmod()\fP fails.
.TP
.NOP \f\*[B-Font]\-h\f[], \f\*[B-Font]\-\-help\f[]
Display usage information and exit.
.TP
.NOP \f\*[B-Font]\-\&amp;!\f[], \f\*[B-Font]\-\-more\-help\f[]
Pass the extended usage information through a pager.
.TP
.NOP \f\*[B-Font]\-R\f[] [\f\*[I-Font]cfgfile\f[]], \f\*[B-Font]\-\-save\-opts\f[] [=\f\*[I-Font]cfgfile\f[]]
Save the option state to \fIcfgfile\fP.  The default is the \fIlast\fP
configuration file listed in the \fBOPTION PRESETS\fP section, below.
The command will exit after updating the config file.
.TP
.NOP \f\*[B-Font]\-r\f[] \f\*[I-Font]cfgfile\f[], \f\*[B-Font]\-\-load\-opts\f[]=\f\*[I-Font]cfgfile\f[], \f\*[B-Font]\-\-no\-load\-opts\f[]
Load options from \fIcfgfile\fP.
The \fIno\-load\-opts\fP form will disable the loading
of earlier config/rc/ini files.  \fI\-\-no\-load\-opts\fP is handled early,
out of order.
.TP
.NOP \f\*[B-Font]\-v\f[] [{\f\*[I-Font]v|c|n\f[] \f\*[B-Font]\-\-version\f[] [{\f\*[I-Font]v|c|n\f[]}]}]
Output version of program and exit.  The default mode is `v', a simple
version.  The `c' mode will print copyright information and `n' will
print the full copyright notice.
.PP
.sp
.SH "OPTION PRESETS"
Any option that is not marked as \fInot presettable\fP may be preset
by loading values from configuration ("RC" or ".INI") file(s).
The file "\fI$HOME/.sharrc\fP" will be used, if present.
.SH STANDARDS
This implementation is compliant with P1003.2b/D11.
.SH "FILES"
See \fBOPTION PRESETS\fP for configuration files.
.SH "EXIT STATUS"
One of the following exit values will be returned:
.TP
.NOP 0 " (EXIT_SUCCESS)"
Successful program execution.
.TP
.NOP 1 " (EXIT_OPTION_ERROR)"
The command options were misconfigured.
.TP
.NOP 2 " (EXIT_INVALID)"
(warning) One or more input files contained no valid data
.TP
.NOP 4 " (EXIT_NO_INPUT)"
(warning) The specified input file was not found
.TP
.NOP 8 " (EXIT_NO_OUTPUT)"
The specified output file could not be created (error); or else one of the output files could not be written or its access mode could not be changed (warnings).  The accompanying message(s) will distinguish.
.TP
.NOP 9 " (EXIT_NO_MEM)"
No process memory available
.TP
.NOP 66 " (EX_NOINPUT)"
A specified configuration file could not be loaded.
.TP
.NOP 70 " (EX_SOFTWARE)"
libopts had an internal operational error.  Please report
it to autogen-users@lists.sourceforge.net.  Thank you.
.sp \n(Ppu
.ne 2

The exit status codes are (mostly) warning codes.
As such, each code is "or"\-ed into the final exit code as the input
files are processed.  For example, an exit code of '6' is not listed
above.  It is the sum of \fBEXIT_INVALID\fP and \fBEXIT_NO_INPUT\fP.
It would mean that at least one input file contained invalid
data and also at least one input file could not be found at all.
.PP
.SH "SEE ALSO"
uuencode(1), uuencode(5)
.SH "AUTHORS"
Free Software Foundation, Inc.
.SH "COPYRIGHT"
Copyright (C) 1994-2015 Free Software Foundation, Inc. all rights reserved.
This program is released under the terms of the GNU General Public License, version 3 or later.
.SH BUGS
Please put \fBsharutils\fP in the subject line for emailed bug
reports.  It helps to spot the message.
.sp \n(Ppu
.ne 2

If more than one \fIname\fP in the encoded files are the same, or
if the second or following input files specifies standard output
for the output file, then the result is probably not what is expected.
Specifically, standard output will be appended to and named output
files will be replaced.
.sp \n(Ppu
.ne 2

Please send bug reports to: bug-gnu-utils@gnu.org
.SH "NOTES"
This manual page was \fIAutoGen\fP-erated from the \fBuudecode\fP
option definitions.
.de1 NOP
.  it 1 an-trap
.  if \\n[.$] \,\\$*\/
..
.ie t \
.ds B-Font [CB]
.ds I-Font [CI]
.ds R-Font [CR]
.el \
.ds B-Font B
.ds I-Font I
.ds R-Font R
.TH uuencode 1 "30 May 2015" "GNU sharutils (4.15.2)" "User Commands"
.\"
.\" DO NOT EDIT THIS FILE (in-mem file)
.\"
.\" It has been AutoGen-ed
.\" From the definitions uuencode-opts.def
.\" and the template file agman-cmd.tpl
.SH NAME
\f\*[B-Font]uuencode\fP
\- encode a file into email friendly text
.SH SYNOPSIS
\f\*[B-Font]uuencode\fP
.\" Mixture of short (flag) options and long options
[\f\*[B-Font]\-flags\f[]]
[\f\*[B-Font]\-flag\f[] [\f\*[I-Font]value\f[]]]
[\f\*[B-Font]\-\-option-name\f[][[=| ]\f\*[I-Font]value\f[]]]
[&lt;in-file&gt;] &lt;output-name&gt;
.sp \n(Ppu
.ne 2

.SH "DESCRIPTION"
\fIuuencode\fP is used to create an ASCII representation of a file
that can be sent over channels that may otherwise corrupt the data.
Specifically, email cannot handle binary data and will often even
insert a character when the six character sequence "\nFrom " is seen.
.sp
\fIuuencode\fP will read \fIin-file\fP if provided and otherwise
read data from standard in and write the encoded form to standard out.
The output will begin with a header line for use by \fIuudecode\fP
giving it the resulting suggested file \fIoutput-name\fP and access
mode.  If the \fIoutput-name\fP is specifically \fI/dev/stdout\fP,
then \fIuudecode\fP will emit the decoded file to standard out.
.sp
\fBNote\fP: \fIuuencode\fP uses buffered input and assumes that it
is not hand typed from a tty.  The consequence is that at a tty, you
may need to hit Ctl-D several times to terminate input.
.SH "OPTIONS"
.TP
.NOP \f\*[B-Font]\-m\f[], \f\*[B-Font]\-\-base64\f[]
convert using base64.
.sp
By default, \fIuuencode\fP will encode using the traditional
conversion.  It is slower and less compact than base64.
The encoded form of the file is expanded by 37% for UU encoding
and by 35% for base64 encoding (3 bytes become 4 plus control
information).
.TP
.NOP \f\*[B-Font]\-e\f[], \f\*[B-Font]\-\-encode\-file\-name\f[]
encode the output file name.
.sp
Since output file names may contain characters that are not
handled well by various transmission modes, you may specify
that the \fIoutput-name\fP be base64 encoded as well.
(Traditional uuencoding of the file name is not supported.)
.TP
.NOP \f\*[B-Font]\-h\f[], \f\*[B-Font]\-\-help\f[]
Display usage information and exit.
.TP
.NOP \f\*[B-Font]\-\&amp;!\f[], \f\*[B-Font]\-\-more-help\f[]
Pass the extended usage information through a pager.
.TP
.NOP \f\*[B-Font]\-R\f[] [\f\*[I-Font]cfgfile\f[]], \f\*[B-Font]\-\-save-opts\f[] [=\f\*[I-Font]cfgfile\f[]]
Save the option state to \fIcfgfile\fP.  The default is the \fIlast\fP
configuration file listed in the \fBOPTION PRESETS\fP section, below.
The command will exit after updating the config file.
.TP
.NOP \f\*[B-Font]\-r\f[] \f\*[I-Font]cfgfile\f[], \f\*[B-Font]\-\-load-opts\f[]=\f\*[I-Font]cfgfile\f[], \f\*[B-Font]\-\-no-load-opts\f[]
Load options from \fIcfgfile\fP.
The \fIno-load-opts\fP form will disable the loading
of earlier config/rc/ini files.  \fI\-\-no-load-opts\fP is handled early,
out of order.
.TP
.NOP \f\*[B-Font]\-v\f[] [{\f\*[I-Font]v|c|n\f[] \f\*[B-Font]\-\-version\f[] [{\f\*[I-Font]v|c|n\f[]}]}]
Output version of program and exit.  The default mode is `v', a simple
version.  The `c' mode will print copyright information and `n' will
print the full copyright notice.
.PP
.SH "OPTION PRESETS"
Any option that is not marked as \fInot presettable\fP may be preset
by loading values from configuration ("RC" or ".INI") file(s).
The file "\fI$HOME/.sharrc\fP" will be used, if present.
.SH STANDARDS
This implementation is compliant with P1003.2b/D11.
.SH "FILES"
See \fBOPTION PRESETS\fP for configuration files.
.SH "EXIT STATUS"
One of the following exit values will be returned:
.TP
.NOP 0 " (EXIT_SUCCESS)"
Successful program execution.
.TP
.NOP 1 " (EXIT_FAILURE)"
The operation failed or the command syntax was not valid.
.TP
.NOP 66 " (EX_NOINPUT)"
A specified configuration file could not be loaded.
.TP
.NOP 70 " (EX_SOFTWARE)"
libopts had an internal operational error.  Please report
it to autogen-users@lists.sourceforge.net.  Thank you.
.PP
.SH "SEE ALSO"
uudecode(1), uuencode(5)
.SH HISTORY
The \fBuuencode\fP command first appeared in BSD 4.0.
.SH "AUTHORS"
Free Software Foundation, Inc.
.SH "COPYRIGHT"
Copyright (C) 1994-2015 Free Software Foundation, Inc. all rights reserved.
This program is released under the terms of the GNU General Public License, version 3 or later.
.SH BUGS
Please put \fBsharutils\fP in the subject line for emailed bug
reports.  It helps to spot the message.
.sp \n(Ppu
.ne 2

Please send bug reports to: bug-gnu-utils@gnu.org
.SH "NOTES"
This manual page was \fIAutoGen\fP-erated from the \fBuuencode\fP
option definitions.
'\" et
.TH UUSTAT "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
uustat
\(em uucp status enquiry and job control
.SH SYNOPSIS
.LP
.nf
uustat \fB[\fR\(miq|\(mik \fIjobid\fR|\(mir \fIjobid\fB]\fR
.P
uustat \fB[\fR\(mis \fIsystem\fB] [\fR\(miu \fIuser\fB]\fR
.fi
.SH DESCRIPTION
The
.IR uustat
utility shall display the status of, or cancel, previously specified
.IR uucp
requests, or provide general status on
.IR uucp
connections to other systems.
.P
When no options are given,
.IR uustat
shall write to standard output the status of all
.IR uucp
requests issued by the current user.
.P
Typical implementations of this utility require a communications line
configured to use the Base Definitions volume of POSIX.1\(hy2008,
.IR "Chapter 11" ", " "General Terminal Interface",
but other communications means may be used. On systems where there are
no available communications means (either temporarily or permanently),
this utility shall write an error message describing the problem and
exit with a non-zero exit status.
.SH OPTIONS
The
.IR uustat
utility shall conform to the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 12.2" ", " "Utility Syntax Guidelines".
.P
The following options shall be supported:
.IP "\fB\(miq\fP" 10
Write the jobs queued for each machine.
.IP "\fB\(mik\ \fIjobid\fR" 10
Kill the
.IR uucp
request whose job identification is
.IR jobid .
The application shall ensure that the killed
.IR uucp
request belongs to the person invoking
.IR uustat
unless that user has appropriate privileges.
.IP "\fB\(mir\ \fIjobid\fR" 10
Rejuvenate
.IR jobid .
The files associated with
.IR jobid
are touched so that their modification time is set to the current
time. This prevents the cleanup program from deleting the job until
the jobs modification time reaches the limit imposed by the program.
.IP "\fB\(mis\ \fIsystem\fR" 10
Write the status of all
.IR uucp
requests for remote system
.IR system .
.IP "\fB\(miu\ \fIuser\fR" 10
Write the status of all
.IR uucp
requests issued by
.IR user .
.SH OPERANDS
None.
.SH STDIN
Not used.
.SH "INPUT FILES"
None.
.SH "ENVIRONMENT VARIABLES"
The following environment variables shall affect the execution of
.IR uustat :
.IP "\fILANG\fP" 10
Provide a default value for the internationalization variables that are
unset or null. (See the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 8.2" ", " "Internationalization Variables"
for the precedence of internationalization variables used to determine
the values of locale categories.)
.IP "\fILC_ALL\fP" 10
If set to a non-empty string value, override the values of all the
other internationalization variables.
.IP "\fILC_CTYPE\fP" 10
Determine the locale for the interpretation of sequences of bytes of
text data as characters (for example, single-byte as opposed to
multi-byte characters in arguments).
.IP "\fILC_MESSAGES\fP" 10
.br
Determine the locale that should be used to affect the format and
contents of diagnostic messages written to standard error, and
informative messages written to standard output.
.IP "\fINLSPATH\fP" 10
Determine the location of message catalogs for the processing of
.IR LC_MESSAGES .
.SH "ASYNCHRONOUS EVENTS"
Default.
.SH STDOUT
The standard output shall consist of information about each job
selected, in an unspecified format. The information shall include at
least the job ID, the user ID or name, and the remote system name.
.SH STDERR
The standard error shall be used only for diagnostic messages.
.SH "OUTPUT FILES"
None.
.SH "EXTENDED DESCRIPTION"
None.
.SH "EXIT STATUS"
The following exit values shall be returned:
.IP "\00" 6
Successful completion.
.IP &gt;0 6
An error occurred.
.SH "CONSEQUENCES OF ERRORS"
Default.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
This utility is part of the UUCP Utilities option and need not be
supported by all implementations.
.SH EXAMPLES
None.
.SH RATIONALE
None.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "\fIuucp\fR\^"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "Chapter 8" ", " "Environment Variables",
.IR "Chapter 11" ", " "General Terminal Interface",
.IR "Section 12.2" ", " "Utility Syntax Guidelines"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
'\" et
.TH UUX "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
uux
\(em remote command execution
.SH SYNOPSIS
.LP
.nf
uux \fB[\fR\(mijnp\fB] \fIcommand\(mistring\fR
.fi
.SH DESCRIPTION
The
.IR uux
utility shall gather zero or more files from various systems, execute a
shell pipeline (see
.IR "Section 2.9" ", " "Shell Commands")
on a specified system, and then send the standard output of the command
to a file on a specified system. Only the first command of a pipeline
can have a
.IR system-name !
prefix. All other commands in the pipeline shall be executed on the
system of the first command.
.P
The following restrictions are applicable to the shell pipeline
processed by
.IR uux :
.IP " *" 4
In gathering files from different systems, pathname expansion shall
not be performed by
.IR uux .
Thus, a request such as:
.RS 4 
.sp
.RS 4
.nf
\fB
uux "c99 remsys!~/*.c"
.fi \fR
.P
.RE
.P
would attempt to copy the file named literally
.BR *.c
to the local system.
.RE
.IP " *" 4
The redirection operators
.BR \(dq&gt;&gt;\(dq ,
.BR \(dq&lt;&lt;\(dq ,
.BR \(dq&gt;|\(dq ,
and
.BR \(dq&gt;&amp;\(dq 
shall not be accepted. Any use of these redirection operators shall
cause this utility to write an error message describing the problem
and exit with a non-zero exit status.
.IP " *" 4
The reserved word
.BR !
cannot be used at the head of the pipeline to modify the exit status.
(See the
.IR command-string
operand description below.)
.IP " *" 4
Alias substitution shall not be performed.
.P
A filename can be specified as for
.IR uucp ;
it can be an absolute pathname, a pathname preceded by ~\c
.IR name
(which is replaced by the corresponding login directory), a pathname
specified as ~/\^\c
.IR dest
(\c
.IR dest
is prefixed by the public directory called
.IR PUBDIR ;
the actual location of
.IR PUBDIR
is implementation-defined), or a simple filename (which is prefixed
by
.IR uux
with the current directory). See
.IR "\fIuucp\fR\^"
for the details.
.P
The execution of commands on remote systems shall take place in an
execution directory known to the
.IR uucp
system. All files required for the execution shall be put into this
directory unless they already reside on that machine. Therefore, the
application shall ensure that non-local filenames (without path or
machine reference) are unique within the
.IR uux
request.
.P
The
.IR uux
utility shall attempt to get all files to the execution system. For
files that are output files, the application shall ensure that the
filename is escaped using parentheses.
.P
The remote system shall notify the user by mail if the requested
command on the remote system was disallowed or the files were not
accessible. This notification can be turned off by the
.BR \(min
option.
.P
Typical implementations of this utility require a communications line
configured to use the Base Definitions volume of POSIX.1\(hy2008,
.IR "Chapter 11" ", " "General Terminal Interface",
but other communications means may be used. On systems where there are
no available communications means (either temporarily or permanently),
this utility shall write an error message describing the problem and
exit with a non-zero exit status.
.P
The
.IR uux
utility cannot guarantee support for all character encodings in all
circumstances. For example, transmission data may be restricted to 7
bits by the underlying network, 8-bit data and filenames need not be
portable to non-internationalized systems, and so on. Under these
circumstances, it is recommended that only characters defined in the
ISO/IEC\ 646:\|1991 standard International Reference Version (equivalent to ASCII) 7-bit range
of characters be used and that only characters defined in the portable
filename character set be used for naming files.
.SH OPTIONS
The
.IR uux
utility shall conform to the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 12.2" ", " "Utility Syntax Guidelines".
.P
The following options shall be supported:
.IP "\fB\(mij\fP" 10
Write the job identification string to standard output. This job
identification can be used by
.IR uustat
to obtain the status or terminate a job.
.IP "\fB\(min\fP" 10
Do not notify the user if the command fails.
.IP "\fB\(mip\fP" 10
Make the standard input to
.IR uux
the standard input to the
.IR command-string .
.SH OPERANDS
The following operand shall be supported:
.IP "\fIcommand-string\fR" 10
.br
A string made up of one or more arguments that are similar to normal
command arguments, except that the command and any filenames can be
prefixed by
.IR system-name !.
A null
.IR system-name
shall be interpreted as the local system.
.SH STDIN
The standard input shall not be used unless the
.BR '\(mi' 
or
.BR \(mip
option is specified; in those cases, the standard input shall be made
the standard input of the
.IR command-string .
.SH "INPUT FILES"
Input files shall be selected according to the contents of
.IR command-string .
.SH "ENVIRONMENT VARIABLES"
The following environment variables shall affect the execution of
.IR uux :
.IP "\fILANG\fP" 10
Provide a default value for the internationalization variables that are
unset or null. (See the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 8.2" ", " "Internationalization Variables"
for the precedence of internationalization variables used to determine
the values of locale categories.)
.IP "\fILC_ALL\fP" 10
If set to a non-empty string value, override the values of all the
other internationalization variables.
.IP "\fILC_CTYPE\fP" 10
Determine the locale for the interpretation of sequences of bytes of
text data as characters (for example, single-byte as opposed to
multi-byte characters in arguments).
.IP "\fILC_MESSAGES\fP" 10
.br
Determine the locale that should be used to affect the format and
contents of diagnostic messages written to standard error.
.IP "\fINLSPATH\fP" 10
Determine the location of message catalogs for the processing of
.IR LC_MESSAGES .
.SH "ASYNCHRONOUS EVENTS"
Default.
.SH STDOUT
The standard output shall not be used unless the
.BR \(mij
option is specified; in that case, the job identification string shall
be written to standard output in the following format:
.sp
.RS 4
.nf
\fB
"%s\en", &lt;\fIjobid\fR&gt;
.fi \fR
.P
.RE
.SH STDERR
The standard error shall be used only for diagnostic messages.
.SH "OUTPUT FILES"
Output files shall be created or written, or both, according to the
contents of
.IR command-string .
.P
If
.BR \(min
is not used, mail files shall be modified following any command or
file-access failures on the remote system.
.SH "EXTENDED DESCRIPTION"
None.
.SH "EXIT STATUS"
The following exit values shall be returned:
.IP "\00" 6
Successful completion.
.IP &gt;0 6
An error occurred.
.SH "CONSEQUENCES OF ERRORS"
Default.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
This utility is part of the UUCP Utilities option and need not be
supported by all implementations.
.P
Note that, for security reasons, many installations limit the list of
commands executable on behalf of an incoming request from
.IR uux .
Many sites permit little more than the receipt of mail via
.IR uux .
.P
Any characters special to the command interpreter should be quoted
either by quoting the entire
.IR command-string
or quoting the special characters as individual arguments.
.P
As noted in
.IR uucp ,
shell pattern matching notation
characters appearing in pathnames are expanded on the appropriate local
system. This is done under the control of local settings of
.IR LC_COLLATE
and
.IR LC_CTYPE .
Thus, care should be taken when using bracketed filename patterns, as
collation and typing rules may vary from one system to another. Also
be aware that certain types of expression (that is, equivalence
classes, character classes, and collating symbols) need not be
supported on non-internationalized systems.
.SH EXAMPLES
.IP " 1." 4
The following command gets
.BR file1
from system
.BR a
and
.BR file2
from system
.BR b ,
executes
.IR diff
on the local system, and puts the results in
.BR file.diff
in the local
.IR PUBDIR
directory. (\c
.IR PUBDIR
is the
.IR uucp
public directory on the local system.)
.RS 4 
.sp
.RS 4
.nf
\fB
uux "!diff a!/usr/file1 b!/a4/file2 &gt;!~/file.diff"
.fi \fR
.P
.RE
.RE
.IP " 2." 4
The following command fails because
.IR uux
places all files copied to a system in the same working directory.
Although the files
.BR xyz
are from two different systems, their filenames are the same and
conflict.
.RS 4 
.sp
.RS 4
.nf
\fB
uux "!diff a!/usr1/xyz b!/usr2/xyz &gt;!~/xyz.diff"
.fi \fR
.P
.RE
.RE
.IP " 3." 4
The following command succeeds (assuming
.IR diff
is permitted on system
.BR a )
because the file local to system
.BR a
is not copied to the working directory, and hence does not conflict with
the file from system
.BR c .
.RS 4 
.sp
.RS 4
.nf
\fB
uux "a!diff a!/usr/xyz c!/usr/xyz &gt;!~/xyz.diff"
.fi \fR
.P
.RE
.RE
.SH RATIONALE
None.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "Chapter 2" ", " "Shell Command Language",
.IR "\fIuucp\fR\^",
.IR "\fIuuencode\fR\^",
.IR "\fIuustat\fR\^"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "Chapter 8" ", " "Environment Variables",
.IR "Chapter 11" ", " "General Terminal Interface",
.IR "Section 12.2" ", " "Utility Syntax Guidelines"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
'\" et
.TH VAL "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
val
\(em validate SCCS files (\fBDEVELOPMENT\fP)
.SH SYNOPSIS
.LP
.nf
val \(mi
.P
val \fB[\fR\(mis\fB] [\fR\(mim \fIname\fB] [\fR\(mir \fISID\fB] [\fR\(miy \fItype\fB] \fIfile\fR...
.fi
.SH DESCRIPTION
The
.IR val
utility shall determine whether the specified
.IR file
is an SCCS file meeting the characteristics specified by the options.
.SH OPTIONS
The
.IR val
utility shall conform to the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 12.2" ", " "Utility Syntax Guidelines",
except that the usage of the
.BR '\(mi' 
operand is not strictly as intended by the guidelines (that is, reading
options and operands from standard input).
.P
The following options shall be supported:
.IP "\fB\(mim\ \fIname\fR" 10
Specify a
.IR name ,
which is compared with the SCCS %\fBM\fP% keyword in
.IR file ;
see
.IR "\fIget\fR\^".
.IP "\fB\(mir\ \fISID\fR" 10
Specify a
.IR SID
(SCCS Identification String), an SCCS delta number. A check shall be
made to determine whether the
.IR SID
is ambiguous (for example,
.BR "\(mir\ 1"
is ambiguous because it physically does not exist but implies 1.1, 1.2,
and so on, which may exist) or invalid (for example,
.BR "\(mir\ 1.0"
or
.BR "\(mir\ 1.1.0"
are invalid because neither case can exist as a valid delta number).
If the
.IR SID
is valid and not ambiguous, a check shall be made to determine whether
it actually exists.
.IP "\fB\(mis\fP" 10
Silence the diagnostic message normally written to standard output for
any error that is detected while processing each named file on a given
command line.
.IP "\fB\(miy\ \fItype\fR" 10
Specify a
.IR type ,
which shall be compared with the SCCS %\fBY\fP% keyword in
.IR file ;
see
.IR "\fIget\fR\^".
.SH OPERANDS
The following operands shall be supported:
.IP "\fIfile\fR" 10
A pathname of an existing SCCS file. If exactly one
.IR file
operand appears, and it is
.BR '\(mi' ,
the standard input shall be read: each line shall be independently
processed as if it were a command line argument list. (However, the
line is not subjected to any of the shell word expansions, such as
parameter expansion or quote removal.)
.SH STDIN
The standard input shall be a text file used only when the
.IR file
operand is specified as
.BR '\(mi' .
.SH "INPUT FILES"
Any SCCS files processed shall be files of an unspecified format.
.SH "ENVIRONMENT VARIABLES"
The following environment variables shall affect the execution of
.IR val :
.IP "\fILANG\fP" 10
Provide a default value for the internationalization variables that are
unset or null. (See the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 8.2" ", " "Internationalization Variables"
for the precedence of internationalization variables used to determine
the values of locale categories.)
.IP "\fILC_ALL\fP" 10
If set to a non-empty string value, override the values of all the
other internationalization variables.
.IP "\fILC_CTYPE\fP" 10
Determine the locale for the interpretation of sequences of bytes of
text data as characters (for example, single-byte as opposed to
multi-byte characters in arguments and input files).
.IP "\fILC_MESSAGES\fP" 10
.br
Determine the locale that should be used to affect the format and
contents of diagnostic messages written to standard error, and
informative messages written to standard output.
.IP "\fINLSPATH\fP" 10
Determine the location of message catalogs for the processing of
.IR LC_MESSAGES .
.SH "ASYNCHRONOUS EVENTS"
Default.
.SH STDOUT
The standard output shall consist of informative messages about either:
.IP " 1." 4
Each file processed
.IP " 2." 4
Each command line read from standard input
.P
If the standard input is not used, for each
.IR file
operand yielding a discrepancy, the output line shall have the
following format:
.sp
.RS 4
.nf
\fB
"%s: %s\en", &lt;\fIpathname\fR&gt;, &lt;\fIunspecified string\fR&gt;
.fi \fR
.P
.RE
.P
If the standard input is used, for each input line yielding a discrepancy,
the output shall have the following format:
.sp
.RS 4
.nf
\fB
"%s\en\en %s: %s\en", &lt;\fIinput\fR&gt;, &lt;\fIpathname\fR&gt;, &lt;\fIunspecified string\fR&gt;
.fi \fR
.P
.RE
.P
where &lt;\fIinput\fP&gt; is the input line minus its terminating
&lt;newline&gt;.
.SH STDERR
Not used.
.SH "OUTPUT FILES"
None.
.SH "EXTENDED DESCRIPTION"
None.
.SH "EXIT STATUS"
The 8-bit code returned by
.IR val
shall be a disjunction of the possible errors; that is, it can be
interpreted as a bit string where set bits are interpreted as follows:
.TS
tab(@);
l c l.
0x80@\&amp;=@Missing file argument.
0x40@\&amp;=@Unknown or duplicate option.
0x20@\&amp;=@Corrupted SCCS file.
0x10@\&amp;=@Cannot open file or file not SCCS.
0x08@\&amp;=@\fISID\fR is invalid or ambiguous.
0x04@\&amp;=@\fISID\fR does not exist.
0x02@\&amp;=@%\fBY\fR%, \fB\(miy\fR mismatch.
0x01@\&amp;=@%\fBM\fR%, \fB\(mim\fR mismatch.
.TE
.P
Note that
.IR val
can process two or more files on a given command line and can process
multiple command lines (when reading the standard input). In these
cases an aggregate code shall be returned: a logical OR of the codes
generated for each command line and file processed.
.SH "CONSEQUENCES OF ERRORS"
Default.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
Since the
.IR val
exit status sets the 0x80 bit, shell applications checking
.BR \(dq$?\(dq 
cannot tell if it terminated due to a missing file argument or receipt
of a signal.
.SH EXAMPLES
In a directory with three SCCS files\(em\c
.BR s.x
(of
.BR t
type ``text''),
.BR s.y ,
and
.BR s.z
(a corrupted file)\(emthe following command could produce the output
shown:
.sp
.RS 4
.nf
\fB
val \(mi &lt;&lt;EOF
\(miy source s.x
\(mim y s.y
s.z
EOF
\(miy source s.x
.P
s.x: %\|Y\|%, \(miy mismatch
s.z
.P
s.z: corrupted SCCS file
.fi \fR
.P
.RE
.SH RATIONALE
None.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "\fIadmin\fR\^",
.IR "\fIdelta\fR\^",
.IR "\fIget\fR\^",
.IR "\fIprs\fR\^"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "Chapter 8" ", " "Environment Variables",
.IR "Section 12.2" ", " "Utility Syntax Guidelines"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
.\"
.\" This code contains changes by
.\"      Gunnar Ritter, Freiburg i. Br., Germany, 2002. All rights reserved.
.\"
.\" Conditions 1, 2, and 4 and the no-warranty notice below apply
.\" to these changes.
.\"
.\"
.\" Copyright (c) 1980, 1993
.\" 	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\" 	This product includes software developed by the University of
.\" 	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"
.\" Copyright(C) Caldera International Inc. 2001-2002. All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"   Redistributions of source code and documentation must retain the
.\"    above copyright notice, this list of conditions and the following
.\"    disclaimer.
.\"   Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"   All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"      This product includes software developed or owned by Caldera
.\"      International, Inc.
.\"   Neither the name of Caldera International, Inc. nor the names of
.\"    other contributors may be used to endorse or promote products
.\"    derived from this software without specific prior written permission.
.\"
.\" USE OF THE SOFTWARE PROVIDED FOR UNDER THIS LICENSE BY CALDERA
.\" INTERNATIONAL, INC. AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED. IN NO EVENT SHALL CALDERA INTERNATIONAL, INC. BE
.\" LIABLE FOR ANY DIRECT, INDIRECT INCIDENTAL, SPECIAL, EXEMPLARY, OR
.\" CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
.\" SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
.\" BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
.\" WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
.\" OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
.\" EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.\"	from vi.1	6.1 (Berkeley) 4/29/85
.\"
.\"	Sccsid @(#)vi.1	1.26 (gritter) 3/12/03
.\"
.ie \n(.g==1 \{\
.ds lq \(lq
.ds rq \(rq
.\}
.el \{\
.ds lq ``
.ds rq ''
.\}
.TH VI 1 "3/12/03" "Ancient Unix Ports" "User Commands"
.SH NAME
vi, view, vedit \- screen oriented (visual) display editor based on ex
.SH SYNOPSIS
.HP
.ad l
\fBvi\fR [\fB\-c\fI\ command\fR|\fB+\fIcommand\fR]
[\fB\-r\fR\ [\fIfilename\fR]] [\fB\-s\fR|\fB\-\fR]
[\fB\-t\fI\ tagstring\fR] [\fB\-w\fI\ size\fR]
[\fB\-lLRV\fR] [\fIfile\fR ...]
.HP
.ad l
\fBview\fR [\fB\-c\fI\ command\fR|\fB+\fIcommand\fR]
[\fB\-r\fR\ [\fIfilename\fR]] [\fB\-s\fR|\fB\-\fR]
[\fB\-t\fI\ tagstring\fR] [\fB\-w\fI\ size\fR]
[\fB\-lLRV\fR] [\fIfile\fR ...]
.HP
.ad l
\fBvedit\fR [\fB\-c\fI\ command\fR|\fB+\fIcommand\fR]
[\fB\-r\fR\ [\fIfilename\fR]] [\fB\-s\fR|\fB\-\fR]
[\fB\-t\fI\ tagstring\fR] [\fB\-w\fI\ size\fR]
[\fB\-lLRV\fR] [\fIfile\fR ...]
.br
.ad b
.SH DESCRIPTION
.I Vi
(visual) is a display oriented text editor based on
.IR ex (1).
.I Ex
and
.I vi
run the same code; it is possible to get to
the command mode of
.I ex
from within
.I vi
and vice-versa.
.PP
The
.I view
command is identical to
.I vi
except that files are opened read-only.
The
.I vedit
command is also identical,
but sets some options to values more useful for novices.
.PP
The following options are accepted:
.TP
\fB\-c\fP\fI\ command\fP or \fB+\fP\fIcommand\fP
Execute
.I command
when editing begins.
.TP
.B \-l
Start in a special mode useful for the
.I Lisp
programming language.
.TP
\fB\-r\fI\ [filename]\fR or \fB\-L\fR
When no argument is supplied with this option,
all files to be recovered are listed
and the editor exits immediately.
If a
.I filename
is specified,
the corresponding temporary file is opened in recovery mode.
.TP
.B \-R
Files are opened read-only when this option is given.
.TP
.BR \-s \ or\  \-
Script mode;
all feedback for interactive editing is disabled.
.SM EXINIT
and
.I .exrc
files are not processed.
.TP
.BI \-t \ tagstring
Read the
.I tags
file,
then choose the file and position specified by
.I tagstring
for editing.
.TP
.B \-V
Echo command input to standard error,
unless it originates from a terminal.
.TP
.BI \-w \ size
Specify the size of the editing window for visual mode.
.PP
The
.I "Introduction to Display Editing with Vi"
provides full details on using
.I vi.
.PP
Most of the
.I ex
commands are available in
.I visual
mode when prefixed by a
.B :
character. See
.BR ex (1)
for a description of them.
.\"	from vi.chars	8.1 (Berkeley) 6/8/93
.PP
The following gives the uses the editor makes of each character.  The
characters are presented in their order in the \s-1ASCII\s0 character
set:  Control characters come first, then most special characters, then
the digits, upper and then lower case characters.
.PP
For each character we tell a meaning it has as a command and any meaning it
has during an insert.
If it has only meaning as a command, then only this is discussed.
Section numbers in parentheses indicate where the character is discussed
in \*(lqAn Introduction to Display Editing with Vi\*(rq;
a `f' after the section number means that the character is mentioned
in a footnote.
.TP
\fB^@\fR
Not a command character.
If typed as the first character of an insertion it is replaced with the
last text inserted, and the insert terminates.  Only 128 characters are
saved from the last insert; if more characters were inserted the mechanism
is not available.
A \fB^@\fR cannot be part of the file due to the editor implementation
(7.5f).
.TP
\fB^A\fR
Unused.
.TP
\fB^B\fR
Backward window.
A count specifies repetition.
Two lines of continuity are kept if possible (2.1, 6.1, 7.2).
.TP
\fB^C\fR
Unused.
.TP
\fB^D\fR
As a command, scrolls down a half-window of text.  
A count gives the number of (logical) lines to scroll, and is remembered
for future \fB^D\fR and \fB^U\fR commands (2.1, 7.2).
During an insert, backtabs over \fIautoindent\fR white space at the beginning
of a line (6.6, 7.5); this white space cannot be backspaced over.
.TP
\fB^E\fR
Exposes one more line below the current screen in the file, leaving
the cursor where it is if possible.
.TP
\fB^F\fR
Forward window.  A count specifies repetition.
Two lines of continuity are kept if possible (2.1, 6.1, 7.2).
.TP
\fB^G\fR
Equivalent to \fB:f\fR\s-1CR\s0, printing the current file, whether
it has been modified, the current line number and the number of lines
in the file, and the percentage of the way through the file.
.TP
\fB^H (\fR\s-1BS\s0\fB)\fR
Same as
.BR "left arrow" .
(See
.BR h ).
During an insert, eliminates the last input character, backing over it
but not erasing it; it remains so the user can see what he typed if he
wishes to type something only slightly different (3.1, 7.5).
.TP
\fB^I\ (\fR\s-1TAB\s0\fB)\fR
Not a command character.
When inserted it prints as some
number of spaces.
When the cursor is at a tab character it rests at the last of the spaces
which represent the tab.
The spacing of tabstops is controlled by the \fItabstop\fR option (4.1, 6.6).
.TP
\fB^J\ (\fR\s-1LF\s0\fB)\fR
Same as
.B "down arrow"
(see
.BR j ).
.TP
\fB^K\fR
Unused.
.TP
\fB^L\fR
The \s-1ASCII\s0 formfeed character, this causes the screen to be cleared
and redrawn.  This is useful after a transmission error, if characters
typed by a program other than the editor scramble the screen,
or after output is stopped by an interrupt (5.4, 7.2f).
.TP
\fB^M\ (\fR\s-1CR\s0\fB)\fR
A carriage return advances to the next line, at the first non-white position
in the line.  Given a count, it advances that many lines (2.3).
During an insert, a \s-1CR\s0 causes the insert to continue onto
another line (3.1).
.TP
\fB^N\fR
Same as
.B "down arrow"
(see
.BR j ).
.TP
\fB^O\fR
Unused.
.TP
\fB^P\fR
Same as
.B "up arrow"
(see
.BR k ).
.TP
\fB^Q\fR
Not a command character.
In input mode,
.B ^Q
quotes the next character, the same as
.B ^V ,
except that some teletype drivers will eat the
.B ^Q
so that the editor never sees it.
.TP
\fB^R\fR
Redraws the current screen, eliminating logical lines not corresponding
to physical lines (lines with only a single @ character on them).
On hardcopy terminals in \fIopen\fR mode, retypes the current line
(5.4, 7.2, 7.8).
.TP
\fB^S\fR
Unused.  Some teletype drivers use
.B ^S
to suspend output until
.B ^Q is pressed.
.TP
\fB^T\fR
Not a command character.
During an insert, with \fIautoindent\fR set and at the beginning of the
line, inserts \fIshiftwidth\fR white space.
.TP
\fB^U\fR
Scrolls the screen up, inverting \fB^D\fR which scrolls down.  Counts work as
they do for \fB^D\fR, and the previous scroll amount is common to both.
On a dumb terminal, \fB^U\fR will often necessitate clearing and redrawing
the screen further back in the file (2.1, 7.2).
.TP
\fB^V\fR
Not a command character.
In input mode, quotes the next character so that it is possible
to insert non-printing and special characters into the file (4.2, 7.5).
.TP
\fB^W\fR
Not a command character.
During an insert, backs up as \fBb\fR would in command mode; the deleted
characters remain on the display (see \fB^H\fR) (7.5).
.TP
\fB^X\fR
Unused.
.TP
\fB^Y\fR
Exposes one more line above the current screen, leaving the cursor where
it is if possible.  (No mnemonic value for this key; however, it is next
to \fB^U\fR which scrolls up a bunch.)
.TP
\fB^Z\fR
If supported by the Unix system,
stops the editor, exiting to the top level shell.
Same as \fB:stop\fP\s-1CR\s0.
Otherwise, unused.
.TP
\fB^[\ (\fR\s-1ESC\s0\fB)\fR
Cancels a partially formed command, such as a \fBz\fR when no following
character has yet been given; terminates inputs on the last line (read
by commands such as \fB: /\fR and \fB?\fR); ends insertions of new text
into the buffer.
If an \s-1ESC\s0 is given when quiescent in command state, the editor
rings the bell or flashes the screen.  The user can thus hit \s-1ESC\s0 if
he doesn't know what is happening till the editor rings the bell.
If the user doesn't know whether he is in insert mode
he can type \s-1ESC\s0\fBa\fR,
and then material to be input; the material will be inserted correctly
whether or not he was in insert mode when he started (1.6, 3.1, 7.5).
.TP
\fB^\e\fR
Unused.
.TP
\fB^]\fR
Searches for the word which is after the cursor as a tag.  Equivalent
to typing \fB:ta\fR, this word, and then a \s-1CR\s0.
Mnemonically, this command is \*(lq right to\*(rq (7.3).
.TP
\fB^^\fR
Equivalent to \fB:e #\fR\s-1CR\s0, returning to the previous position
in the last edited file, or editing a file which the user specified if he
got a `No write since last change diagnostic' and does not want to have
to type the file name again (7.3).
(The user has to do a \fB:w\fR before \fB^^\fR
will work in this case.  If he does not wish to write the file he should
do \fB:e!\ #\fR\s-1CR\s0 instead.)
.TP
\fB^_\fR
Unused.
Reserved as the command character for the
Tektronix 4025 and 4027 terminal.
.TP
\fB\fR\s-1SPACE\s0\fB\fR
Same as
.B "right arrow"
(see
.BR l ).
.TP
\fB!\fR
An operator, which processes lines from the buffer with reformatting commands.
Follow \fB!\fR with the object to be processed, and then the command name
terminated by \s-1CR\s0.  Doubling \fB!\fR and preceding it by a count
causes count lines to be filtered; otherwise the count
is passed on to the object after the \fB!\fR.  Thus \fB2!}\fR\fIfmt\fR\s-1CR\s0
reformats the next two paragraphs by running them through the program
\fIfmt\fR.  If working on \s-1LISP\s0,
the command \fB!%\fR\fIgrind\fR\s-1CR\s0,
.\"*
.\".FS
.\"*Both
.\".I fmt
.\"and
.\".I grind
.\"are Berkeley programs and may not be present at all installations.
.\".FE
given at the beginning of a
function, will run the text of the function through the \s-1LISP\s0 grinder
(6.7, 7.3).
To read a file or the output of a command into the buffer \fB:r\fR (7.3)
can be used.
To simply execute a command, \fB:!\fR (7.3).
.tr "
.iP  15
Precedes a named buffer specification.  There are named buffers \fB1\-9\fR
used for saving deleted text and named buffers \fBa\-z\fR into which the
user can place text (4.3, 6.3)
.tr 
.TP
\fB#\fR
The macro character which, when followed by a number, will substitute
for a function key on terminals without function keys (6.9).
In input mode, 
if this is the erase character, it will delete the last character
typed in input mode, and must be preceded with a \fB\e\fR to insert
it, since it normally backs over the last input character.
.TP
\fB$\fR
Moves to the end of the current line.  If the \fBlist\fR option is set,
then the end of each line will be shown by printing a \fB$\fR after the
end of the displayed text in the line.  Given a count, advances to the
count'th following end of line; thus \fB2$\fR advances to the end of the
following line.
.TP
\fB%\fR
Moves to the parenthesis or brace \fB{ }\fR which balances the parenthesis
or brace at the current cursor position.
.TP
\fB&amp;\fR
A synonym for \fB:&amp;\fR\s-1CR\s0, by analogy with the
.I ex
.B &amp;
command.
.TP
\fB\(aa\fR
When followed by a \fB\(aa\fR returns to the previous context at the
beginning of a line.  The previous context is set whenever the current
line is moved in a non-relative way.
When followed by a letter \fBa\fR\-\fBz\fR, returns to the line which
was marked with this letter with a \fBm\fR command, at the first non-white
character in the line. (2.2, 5.3).
When used with an operator such as \fBd\fR, the operation takes place
over complete lines; if \fB\(ga\fR is used, the operation takes place
from the exact marked place to the current cursor position within the
line.
.TP
\fB(\fR
Retreats to the beginning of a
sentence, or to the beginning of a \s-1LISP\s0 s-expression
if the \fIlisp\fR option is set.
A sentence ends at a \fB. !\fR or \fB?\fR which is followed by either
the end of a line or by two spaces.  Any number of closing \fB) ] "\fR
and \fB\(aa\fR characters may appear after the \fB. !\fR or \fB?\fR,
and before the spaces or end of line.  Sentences also begin
at paragraph and section boundaries
(see \fB{\fR and \fB[[\fR below).
A count advances that many sentences (4.2, 6.8).
.TP
\fB)\fR
Advances to the beginning of a sentence.
A count repeats the effect.
See \fB(\fR above for the definition of a sentence (4.2, 6.8).
.TP
\fB*\fR
Unused.
.TP
\fB+\fR
Same as \s-1CR\s0 when used as a command.
.TP
\fB,\fR
Reverse of the last \fBf F t\fR or \fBT\fR command, looking the other way
in the current line.  Especially useful after hitting too many \fB;\fR
characters.  A count repeats the search.
.TP
\fB\-\fR
Retreats to the previous line at the first non-white character.
This is the inverse of \fB+\fR and \s-1RETURN\s0.
If the line moved to is not on the screen, the screen is scrolled, or
cleared and redrawn if this is not possible.
If a large amount of scrolling would be required the screen is also cleared
and redrawn, with the current line at the center (2.3).
.TP
\fB\&amp;.\fR
Repeats the last command which changed the buffer.  Especially useful
when deleting words or lines; the user can delete some words/lines and then
hit \fB.\fR to delete more and more words/lines.
Given a count, it passes it on to the command being repeated.  Thus after
a \fB2dw\fR, \fB3.\fR deletes three words (3.3, 6.3, 7.2, 7.4).
.TP
\fB/\fR
Reads a string from the last line on the screen, and scans forward for
the next occurrence of this string.  The normal input editing sequences may
be used during the input on the bottom line; an returns to command state
without ever searching.
The search begins when the user hits \s-1CR\s0 to terminate the pattern;
the cursor moves to the beginning of the last line to indicate that the search
is in progress; the search may then
be terminated with a \s-1DEL\s0 or \s-1RUB\s0, or by backspacing when
at the beginning of the bottom line, returning the cursor to
its initial position.
Searches normally wrap end-around to find a string
anywhere in the buffer.
.IP
When used with an operator the enclosed region is normally affected.
By mentioning an
offset from the line matched by the pattern the user can force whole lines
to be affected.  To do this a pattern with a closing
a closing \fB/\fR and then an offset \fB+\fR\fIn\fR or \fB\-\fR\fIn\fR
must be given.
.IP
To include the character \fB/\fR in the search string, it must be escaped
with a preceding \fB\e\fR.
A \fB^\fR at the beginning of the pattern forces the match to occur
at the beginning of a line only; this speeds the search.  A \fB$\fR at
the end of the pattern forces the match to occur at the end of a line
only.
More extended pattern matching is available, see section 7.4;
unless \fBnomagic\fR ist set in the \fI\&amp;.exrc\fR file the user will have
to preceed the characters \fB. [ *\fR and \fB~\fR in the search pattern
with a \fB\e\fR to get them to work as one would naively expect (1.6, 2.2,
6.1, 7.2, 7.4).
.TP
\fB0\fR
Moves to the first character on the current line.
Also used, in forming numbers, after an initial \fB1\fR\-\fB9\fR.
.TP
\fB1\-9\fR
Used to form numeric arguments to commands (2.3, 7.2).
.TP
\fB:\fR
A prefix to a set of commands for file and option manipulation and escapes
to the system.  Input is given on the bottom line and terminated with
an \s-1CR\s0, and the command then executed.  The user can return to where
he was by hitting \s-1DEL\s0 or \s-1RUB\s0 if he hit \fB:\fR accidentally
(see 
.BR ex (1)
and primarily 6.2 and 7.3).
.TP
\fB;\fR
Repeats the last single character find which used \fBf F t\fR or \fBT\fR.
A count iterates the basic scan (4.1).
.TP
\fB&lt;\fR
An operator which shifts lines left one \fIshiftwidth\fR, normally 8
spaces.  Like all operators, affects lines when repeated, as in
\fB&lt;&lt;\fR.  Counts are passed through to the basic object, thus \fB3&lt;&lt;\fR
shifts three lines (6.6, 7.2).
.TP
\fB=\fR
Reindents line for \s-1LISP\s0, as though they were typed in with \fIlisp\fR
and \fIautoindent\fR set (6.8).
.TP
\fB&gt;\fR
An operator which shifts lines right one \fIshiftwidth\fR, normally 8
spaces.  Affects lines when repeated as in \fB&gt;&gt;\fR.  Counts repeat the
basic object (6.6, 7.2).
.TP
\fB?\fR
Scans backwards, the opposite of \fB/\fR.  See the \fB/\fR description
above for details on scanning (2.2, 6.1, 7.4).
.TP
\fB@\fR
A macro character (6.9).  If this is the kill character, it must be escaped
with a \e
to type it in during input mode, as it normally backs over the input
given on the current line (3.1, 3.4, 7.5).
.TP
\fBA\fR
Appends at the end of line, a synonym for \fB$a\fR (7.2).
.TP
\fBB\fR
Backs up a word, where words are composed of non-blank sequences, placing
the cursor at the beginning of the word.  A count repeats the effect
(2.4).
.TP
\fBC\fR
Changes the rest of the text on the current line; a synonym for \fBc$\fR.
.TP
\fBD\fR
Deletes the rest of the text on the current line; a synonym for \fBd$\fR.
.TP
\fBE\fR
Moves forward to the end of a word, defined as blanks and non-blanks,
like \fBB\fR and \fBW\fR.  A count repeats the effect.
.TP
\fBF\fR
Finds a single following character, backwards in the current line.
A count repeats this search that many times (4.1).
.TP
\fBG\fR
Goes to the line number given as preceding argument, or the end of the
file if no preceding count is given.  The screen is redrawn with the
new current line in the center if necessary (7.2).
.TP
\fBH\fR
.BR "Home arrow" .
Homes the cursor to the top line on the screen.  If a count is given,
then the cursor is moved to the count'th line on the screen.
In any case the cursor is moved to the first non-white character on the
line.  If used as the target of an operator, full lines are affected
(2.3, 3.2).
.TP
\fBI\fR
Inserts at the beginning of a line; a synonym for \fB^i\fR.
.TP
\fBJ\fR
Joins together lines, supplying appropriate white space: one space between
words, two spaces after a \fB.\fR, and no spaces at all if the first
character of the joined on line is \fB)\fR.  A count causes that many
lines to be joined rather than the default two (6.5, 7.1f).
.TP
\fBK\fR
Unused.
.TP
\fBL\fR
Moves the cursor to the first non-white character of the last line on
the screen.  With a count, to the first non-white of the count'th line
from the bottom.  Operators affect whole lines when used with \fBL\fR
(2.3).
.TP
\fBM\fR
Moves the cursor to the middle line on the screen, at the first non-white
position on the line (2.3).
.TP
\fBN\fR
Scans for the next match of the last pattern given to
\fB/\fR or \fB?\fR, but in the reverse direction; this is the reverse
of \fBn\fR.
.TP
\fBO\fR
Opens a new line above the current line and inputs text there up to an
\s-1ESC\s0.  A count can be used on dumb terminals to specify a number
of lines to be opened; this is generally obsolete, as the \fIslowopen\fR
option works better (3.1).
.TP
\fBP\fR
Puts the last deleted text back before/above the cursor.  The text goes
back as whole lines above the cursor if it was deleted as whole lines.
Otherwise the text is inserted between the characters before and at the
cursor.  May be preceded by a named buffer specification \fB"\fR\fIx\fR
to retrieve the contents of the buffer; buffers \fB1\fR\-\fB9\fR contain
deleted material, buffers \fBa\fR\-\fBz\fR are available for general
use (6.3).
.TP
\fBQ\fR
Quits from \fIvi\fR to \fIex\fR command mode.  In this mode, whole lines
form commands, ending with a \s-1RETURN\s0.  One can give all the \fB:\fR
commands; the editor supplies the \fB:\fR as a prompt (7.7).
.TP
\fBR\fR
Replaces characters on the screen with characters typed (overlay fashion).
Terminates with an \s-1ESC\s0.
.TP
\fBS\fR
Changes whole lines, a synonym for \fBcc\fR.  A count substitutes for
that many lines.  The lines are saved in the numeric buffers, and erased
on the screen before the substitution begins.
.TP
\fBT\fR
Takes a single following character, locates the character before the
cursor in the current line, and places the cursor just after that character.
A count repeats the effect.  Most useful with operators such as \fBd\fR
(4.1).
.TP
\fBU\fR
Restores the current line to its state before the user started changing it
(3.5).
.TP
\fBV\fR
Unused.
.TP
\fBW\fR
Moves forward to the beginning of a word in the current line,
where words are defined as sequences of blank/non-blank characters.
A count repeats the effect (2.4).
.TP
\fBX\fR
Deletes the character before the cursor.  A count repeats the effect,
but only characters on the current line are deleted.
.TP
\fBY\fR
Yanks a copy of the current line into the unnamed buffer, to be put back
by a later \fBp\fR or \fBP\fR; a very useful synonym for \fByy\fR. 
A count yanks that many lines.  May be preceded by a buffer name to put
lines in that buffer (7.4).
.TP
\fBZZ\fR
Exits the editor.
(Same as \fB:x\fP\s-1CR\s0.)
If any changes have been made, the buffer is written out to the current file.
Then the editor quits.
.TP
\fB[[\fR
Backs up to the previous section boundary.  A section begins at each
macro in the \fIsections\fR option,
normally a `.NH' or `.SH' and also at lines which which start
with a formfeed \fB^L\fR.  Lines beginning with \fB{\fR also stop \fB[[\fR;
this makes it useful for looking backwards, a function at a time, in C
programs.  If the option \fIlisp\fR is set, stops at each \fB(\fR at the
beginning of a line, and is thus useful for moving backwards at the top
level \s-1LISP\s0 objects. (4.2, 6.1, 6.6, 7.2).
.TP
\fB\e\fR
Unused.
.TP
\fB]]\fR
Forward to a section boundary, see \fB[[\fR for a definition (4.2, 6.1,
6.6, 7.2).
.TP
\fB^\fR
Moves to the first non-white position on the current line (4.4).
.TP
\fB_\fR
Unused.
.TP
\fB\(ga\fR
When followed by a \fB\(ga\fR returns to the previous context.
The previous context is set whenever the current
line is moved in a non-relative way.
When followed by a letter \fBa\fR\-\fBz\fR, returns to the position which
was marked with this letter with a \fBm\fR command.
When used with an operator such as \fBd\fR, the operation takes place
from the exact marked place to the current position within the line;
if using \fB\(aa\fR, the operation takes place over complete lines
(2.2, 5.3).
.TP
\fBa\fR
Appends arbitrary text after the current cursor position; the insert
can continue onto multiple lines by using \s-1RETURN\s0 within the insert.
A count causes the inserted text to be replicated, but only if the inserted
text is all on one line.
The insertion terminates with an \s-1ESC\s0 (3.1, 7.2).
.TP
\fBb\fR
Backs up to the beginning of a word in the current line.  A word is a
sequence of alphanumerics, or a sequence of special characters.
A count repeats the effect (2.4).
.TP
\fBc\fR
An operator which changes the following object, replacing it with the
following input text up to an \s-1ESC\s0.  If more than part of a single
line is affected, the text which is changed away is saved in the numeric named
buffers.  If only part of the current line is affected, then the last
character to be changed away is marked with a \fB$\fR.
A count causes that many objects to be affected, thus both
\fB3c)\fR and \fBc3)\fR change the following three sentences (7.4).
.TP
\fBd\fR
An operator which deletes the following object.  If more than part of
a line is affected, the text is saved in the numeric buffers.
A count causes that many objects to be affected; thus \fB3dw\fR is the
same as \fBd3w\fR (3.3, 3.4, 4.1, 7.4).
.TP
\fBe\fR
Advances to the end of the next word, defined as for \fBb\fR and \fBw\fR.
A count repeats the effect (2.4, 3.1).
.TP
\fBf\fR
Finds the first instance of the next character following the cursor on
the current line.  A count repeats the find (4.1).
.TP
\fBg\fR
Unused.
.sp
Arrow keys
.BR h ,
.BR j ,
.BR k ,
.BR l ,
and
.BR H .
.TP
\fBh\fR
.B "Left arrow" .
Moves the cursor one character to the left.
Like the other arrow keys, either
.BR h ,
the
.B "left arrow"
key, or one of the synonyms (\fB^H\fP) has the same effect.
A count repeats the effect (3.1, 7.5).
.TP
\fBi\fR
Inserts text before the cursor, otherwise like \fBa\fR (7.2).
.TP
\fBj\fR
.B "Down arrow" .
Moves the cursor one line down in the same column.
If the position does not exist,
.I vi
comes as close as possible to the same column.
Synonyms include
.B ^J
(linefeed) and
.B ^N .
.TP
\fBk\fR
.B "Up arrow" .
Moves the cursor one line up.
.B ^P
is a synonym.
.TP
\fBl\fR
.B "Right arrow" .
Moves the cursor one character to the right.
\s-1SPACE\s0 is a synonym.
.TP
\fBm\fR
Marks the current position of the cursor in the mark register which is
specified by the next character \fBa\fR\-\fBz\fR.  The user can return
to this position or use it with an operator
using \fB\(ga\fR or \fB\(aa\fR (5.3).
.TP
\fBn\fR
Repeats the last \fB/\fR or \fB?\fR scanning commands (2.2).
.TP
\fBo\fR
Opens new lines below the current line; otherwise like \fBO\fR (3.1).
.TP
\fBp\fR
Puts text after/below the cursor; otherwise like \fBP\fR (6.3).
.TP
\fBq\fR
Unused.
.TP
\fBr\fR
Replaces the single character at the cursor with a single character typed.
The new character may be a \s-1RETURN\s0; this is the easiest
way to split lines.  A count replaces each of the following count characters
with the single character given; see \fBR\fR above which is the more
usually useful iteration of \fBr\fR (3.2).
.TP
\fBs\fR
Changes the single character under the cursor to the text which follows
up to an \s-1ESC\s0; given a count, that many characters from the current
line are changed.  The last character to be changed is marked with \fB$\fR
as in \fBc\fR (3.2).
.TP
\fBt\fR
Advances the cursor upto the character before the next character typed.
Most useful with operators such as \fBd\fR and \fBc\fR to delete the
characters up to a following character.  One can use \fB.\fR to delete
more if this doesn't delete enough the first time (4.1).
.TP
\fBu\fR
Undoes the last change made to the current buffer.  If repeated, will
alternate between these two states, thus is its own inverse. When used
after an insert which inserted text on more than one line, the lines are
saved in the numeric named buffers (3.5).
.TP
\fBv\fR
Unused.
.TP
\fBw\fR
Advances to the beginning of the next word, as defined by \fBb\fR (2.4).
.TP
\fBx\fR
Deletes the single character under the cursor.  With a count deletes
deletes that many characters forward from the cursor position, but only
on the current line (6.5).
.TP
\fBy\fR
An operator, yanks the following object into the unnamed temporary buffer.
If preceded by a named buffer specification, \fB"\fR\fIx\fR, the text
is placed in that buffer also.  Text can be recovered by a later \fBp\fR
or \fBP\fR (7.4).
.TP
\fBz\fR
Redraws the screen with the current line placed as specified by the following
character: \s-1RETURN\s0 specifies the top of the screen, \fB.\fR the
center of the screen, and \fB\-\fR at the bottom of the screen.
A count may be given after the \fBz\fR and before the following character
to specify the new screen size for the redraw.
A count before the \fBz\fR gives the number of the line to place in the
center of the screen instead of the default current line. (5.4)
.TP
\fB{\fR
Retreats to the beginning of the beginning of the preceding paragraph.
A paragraph begins at each macro in the \fIparagraphs\fR option, normally
`.IP', `.LP', `.PP', `.QP' and `.bp'.
A paragraph also begins after a completely
empty line, and at each section boundary (see \fB[[\fR above) (4.2, 6.8,
7.6).
.TP
\fB|\fR
Places the cursor on the character in the column specified
by the count (7.1, 7.2).
.TP
\fB}\fR
Advances to the beginning of the next paragraph.  See \fB{\fR for the
definition of paragraph (4.2, 6.8, 7.6).
.TP
\fB~\fR
Switches the case of the given count of characters
starting from the current cursor position to the end of the current line.
Non-alphabetic characters remain unchanged.
.TP
\fB^?\ (\s-1\fRDEL\fB\s0)\fR
Interrupts the editor, returning it to command accepting state (1.6,
7.5).
.SH "ENVIRONMENT VARIABLES"
.PP
The following environment variables affect the behaviour of vi:
.TP
.B COLUMNS
Overrides the system-supplied number of terminal columns.
.TP
.B EXINIT
Contains commands to execute at editor startup.
If this variable is present, the
.I .exrc
file in the user's home directory is ignored.
.TP
.B HOME
Used to locate the editor startup file.
.TP
.BR LANG ", " LC_ALL
See
.IR locale (7).
.TP
.B LC_CTYPE
Determines the mapping of bytes to characters,
types of characters,
case conversion
and composition of character classes in regular expressions.
.TP
.B LC_MESSAGES
Sets the language used for diagnostic and informal messages.
.TP
.B LINES
Overrides the system-supplied number of terminal lines.
.TP
.B NLSPATH
See
.IR catopen (3).
.TP
.B SHELL
The program file used to execute external commands.
.TP
.B TERM
Determines the terminal type.
.SH FILES
.TP
.B /usr/lib/ex/expreserve
preserve command
.TP
.B /usr/lib/ex/exrecover
recover command
.TP
.B /etc/termcap
describes capabilities of terminals
.TP
.B $HOME/.exrc
editor startup file
.TP
.B /var/tmp/Ex\fInnnnnnnnnn\fP
editor temporary
.TP
.B /var/tmp/Rx\fInnnnnnnnnn\fP
named buffer temporary
.TP
.B /var/lib/ex
preservation directory
.SH SEE ALSO
ex(1),
edit(1),
\*(lqVi Quick Reference\*(rq card,
\*(lqAn Introduction to Display Editing with Vi\*(rq.
.SH AUTHOR
William Joy.
.PP
Mark Horton added macros to
.I visual
mode and was maintaining version 3.
.PP
This version incorporates changes by Gunnar Ritter.
.SH NOTES
Software tabs using \fB^T\fP work only immediately after the
.I autoindent.
.PP
Left and right shifts on intelligent terminals don't make use of
insert and delete character operations in the terminal.
.PP
The
.I wrapmargin
option can be fooled since it looks at output columns when blanks are typed.
If a long word passes through the margin and onto the next line without a 
break, then the line won't be broken.
.PP
Insert/delete within a line can be slow if tabs are present on intelligent
terminals, since the terminals need help in doing this correctly.
.\".PP
.\"Saving text on deletes in the named buffers is somewhat inefficient.
.PP
The
.I source
command does not work when executed as \fB:source\fP;
there is no way to use the \fB:append\fP, \fB:change\fP,
and \fB:insert\fP commands, since it is not possible to give
more than one line of input to a \fB:\fP escape.  To use these
on a \fB:global\fP one must \fBQ\fP to \fIex\fP command mode,
execute them, and then reenter the screen editor with
.I vi
or
.I open.
'\" et
.TH WAIT "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
wait
\(em await process completion
.SH SYNOPSIS
.LP
.nf
wait \fB[\fIpid\fR...\fB]\fR
.fi
.SH DESCRIPTION
When an asynchronous list (see
.IR "Section 2.9.3.1" ", " "Examples")
is started by the shell, the process ID of the last command in each
element of the asynchronous list shall become known in the current
shell execution environment; see
.IR "Section 2.12" ", " "Shell Execution Environment".
.P
If the
.IR wait
utility is invoked with no operands, it shall wait until all process
IDs known to the invoking shell have terminated and exit with a zero
exit status.
.P
If one or more
.IR pid
operands are specified that represent known process IDs, the
.IR wait
utility shall wait until all of them have terminated. If one or more
.IR pid
operands are specified that represent unknown process IDs,
.IR wait
shall treat them as if they were known process IDs that exited with
exit status 127. The exit status returned by the
.IR wait
utility shall be the exit status of the process requested by the last
.IR pid
operand.
.P
The known process IDs are applicable only for invocations of
.IR wait
in the current shell execution environment.
.SH OPTIONS
None.
.SH OPERANDS
The following operand shall be supported:
.IP "\fIpid\fR" 10
One of the following:
.RS 10 
.IP " 1." 4
The unsigned decimal integer process ID of a command, for which the
utility is to wait for the termination.
.IP " 2." 4
A job control job ID (see the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 3.204" ", " "Job Control Job ID")
that identifies a background process group to be waited for. The job
control job ID notation is applicable only for invocations of
.IR wait
in the current shell execution environment; see
.IR "Section 2.12" ", " "Shell Execution Environment".
The exit status of
.IR wait
shall be determined by the last command in the pipeline.
.RS 4 
.TP 10
.BR Note:
The job control job ID type of
.IR pid
is only available on systems supporting the User Portability Utilities
option.
.P
.RE
.RE
.SH STDIN
Not used.
.SH "INPUT FILES"
None.
.SH "ENVIRONMENT VARIABLES"
The following environment variables shall affect the execution of
.IR wait :
.IP "\fILANG\fP" 10
Provide a default value for the internationalization variables that are
unset or null. (See the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 8.2" ", " "Internationalization Variables"
for the precedence of internationalization variables used to determine
the values of locale categories.)
.IP "\fILC_ALL\fP" 10
If set to a non-empty string value, override the values of all the
other internationalization variables.
.IP "\fILC_CTYPE\fP" 10
Determine the locale for the interpretation of sequences of bytes of
text data as characters (for example, single-byte as opposed to
multi-byte characters in arguments).
.IP "\fILC_MESSAGES\fP" 10
.br
Determine the locale that should be used to affect the format and
contents of diagnostic messages written to standard error.
.IP "\fINLSPATH\fP" 10
Determine the location of message catalogs for the processing of
.IR LC_MESSAGES .
.SH "ASYNCHRONOUS EVENTS"
Default.
.SH STDOUT
Not used.
.SH STDERR
The standard error shall be used only for diagnostic messages.
.SH "OUTPUT FILES"
None.
.SH "EXTENDED DESCRIPTION"
None.
.SH "EXIT STATUS"
If one or more operands were specified, all of them have terminated or
were not known by the invoking shell, and the status of the last
operand specified is known, then the exit status of
.IR wait
shall be the exit status information of the command indicated by the
last operand specified. If the process terminated abnormally due to
the receipt of a signal, the exit status shall be greater than 128 and
shall be distinct from the exit status generated by other signals, but
the exact value is unspecified. (See the
.IR kill
.BR \(mil
option.) Otherwise, the
.IR wait
utility shall exit with one of the following values:
.IP "\0\0\0\00" 8
The
.IR wait
utility was invoked with no operands and all process IDs known by the
invoking shell have terminated.
.IP "1\(hy126" 8
The
.IR wait
utility detected an error.
.IP "\0\0127" 8
The command identified by the last
.IR pid
operand specified is unknown.
.SH "CONSEQUENCES OF ERRORS"
Default.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
On most implementations,
.IR wait
is a shell built-in. If it is called in a subshell or separate utility
execution environment, such as one of the following:
.sp
.RS 4
.nf
\fB
(wait)
nohup wait ...
find . \(miexec wait ... \e;
.fi \fR
.P
.RE
.P
it returns immediately because there are no known process IDs to wait
for in those environments.
.P
Historical implementations of interactive shells have discarded the
exit status of terminated background processes before each shell
prompt. Therefore, the status of background processes was usually lost
unless it terminated while
.IR wait
was waiting for it. This could be a serious problem when a job that
was expected to run for a long time actually terminated quickly with a
syntax or initialization error because the exit status returned was
usually zero if the requested process ID was not found. This volume of POSIX.1\(hy2008 requires
the implementation to keep the status of terminated jobs available
until the status is requested, so that scripts like:
.sp
.RS 4
.nf
\fB
j1&amp;
p1=$!
j2&amp;
wait $p1
echo Job 1 exited with status $?
wait $!
echo Job 2 exited with status $?
.fi \fR
.P
.RE
.P
work without losing status on any of the jobs. The shell is allowed to
discard the status of any process if it determines that the application
cannot get the process ID for that process from the shell. It is also
required to remember only
{CHILD_MAX}
number of processes in this way. Since the only way to get the process
ID from the shell is by using the
.BR '!' 
shell parameter, the shell is allowed to discard the status of an
asynchronous list if
.BR \(dq$!\(dq 
was not referenced before another asynchronous list was started. (This
means that the shell only has to keep the status of the last
asynchronous list started if the application did not reference
.BR \(dq$!\(dq .
If the implementation of the shell is smart enough to determine that a
reference to
.BR \(dq$!\(dq 
was not saved anywhere that the application can retrieve it later, it
can use this information to trim the list of saved information. Note
also that a successful call to
.IR wait
with no operands discards the exit status of all asynchronous lists.)
.P
If the exit status of
.IR wait
is greater than 128, there is no way for the application to know if the
waited-for process exited with that value or was killed by a signal.
Since most utilities exit with small values, there is seldom any
ambiguity. Even in the ambiguous cases, most applications just need to
know that the asynchronous job failed; it does not matter whether it
detected an error and failed or was killed and did not complete its job
normally.
.SH EXAMPLES
Although the exact value used when a process is terminated by a signal
is unspecified, if it is known that a signal terminated a process, a
script can still reliably determine which signal by using
.IR kill
as shown by the following script:
.sp
.RS 4
.nf
\fB
sleep 1000&amp;
pid=$!
kill \(mikill $pid
wait $pid
echo $pid was terminated by a SIG$(kill \(mil $?) signal.
.fi \fR
.P
.RE
.P
If the following sequence of commands is run in less than 31 seconds:
.sp
.RS 4
.nf
\fB
sleep 257 | sleep 31 &amp;
jobs \(mil %%
.fi \fR
.P
.RE
.P
either of the following commands returns the exit status of the second
.IR sleep
in the pipeline:
.sp
.RS 4
.nf
\fB
wait \fI&lt;pid of sleep 31&gt;\fP
wait %%
.fi \fR
.P
.RE
.SH RATIONALE
The description of
.IR wait
does not refer to the
\fIwaitpid\fR()
function from the System Interfaces volume of POSIX.1\(hy2008 because that would needlessly overspecify this
interface. However, the wording means that
.IR wait
is required to wait for an explicit process when it is given an
argument so that the status information of other processes is not
consumed. Historical implementations use the
\fIwait\fR()
function defined in the System Interfaces volume of POSIX.1\(hy2008 until
\fIwait\fR()
returns the requested process ID or finds that the requested process
does not exist. Because this means that a shell script could not
reliably get the status of all background children if a second
background job was ever started before the first job finished, it is
recommended that the
.IR wait
utility use a method such as the functionality provided by the
\fIwaitpid\fR()
function.
.P
The ability to wait for multiple
.IR pid
operands was adopted from the KornShell.
.P
This new functionality was added because it is needed to determine the
exit status of any asynchronous list accurately. The only
compatibility problem that this change creates is for a script like
.sp
.RS 4
.nf
\fB
while sleep 60 do
job&amp; echo Job started $(date) as $!  done
.fi \fR
.P
.RE
.P
which causes the shell to monitor all of the jobs started until the
script terminates or runs out of memory. This would not be a problem
if the loop did not reference
.BR \(dq$!\(dq 
or if the script would occasionally
.IR wait
for jobs it started.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "Chapter 2" ", " "Shell Command Language",
.IR "\fIkill\fR\^",
.IR "\fIsh\fR\^"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 3.204" ", " "Job Control Job ID",
.IR "Chapter 8" ", " "Environment Variables"
.P
The System Interfaces volume of POSIX.1\(hy2008,
.IR "\fIwait\fR\^(\|)"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.
.TH WC "1" "March 2017" "GNU coreutils 8.27" "User Commands"
.SH NAME
wc \- print newline, word, and byte counts for each file
.SH SYNOPSIS
.B wc
[\fI\,OPTION\/\fR]... [\fI\,FILE\/\fR]...
.br
.B wc
[\fI\,OPTION\/\fR]... \fI\,--files0-from=F\/\fR
.SH DESCRIPTION
.\" Add any additional description here
.PP
Print newline, word, and byte counts for each FILE, and a total line if
more than one FILE is specified.  A word is a non\-zero\-length sequence of
characters delimited by white space.
.PP
With no FILE, or when FILE is \-, read standard input.
.PP
The options below may be used to select which counts are printed, always in
the following order: newline, word, character, byte, maximum line length.
.TP
\fB\-c\fR, \fB\-\-bytes\fR
print the byte counts
.TP
\fB\-m\fR, \fB\-\-chars\fR
print the character counts
.TP
\fB\-l\fR, \fB\-\-lines\fR
print the newline counts
.TP
\fB\-\-files0\-from\fR=\fI\,F\/\fR
read input from the files specified by
NUL\-terminated names in file F;
If F is \- then read names from standard input
.TP
\fB\-L\fR, \fB\-\-max\-line\-length\fR
print the maximum display width
.TP
\fB\-w\fR, \fB\-\-words\fR
print the word counts
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-\-version\fR
output version information and exit
.SH AUTHOR
Written by Paul Rubin and David MacKenzie.
.SH "REPORTING BUGS"
GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt;
.br
Report wc translation bugs to &lt;http://translationproject.org/team/&gt;
.SH COPYRIGHT
Copyright \(co 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
Full documentation at: &lt;http://www.gnu.org/software/coreutils/wc&gt;
.br
or available locally via: info \(aq(coreutils) wc invocation\(aq
'\" et
.TH WHAT "1P" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"
.SH PROLOG
This manual page is part of the POSIX Programmer's Manual.
The Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux behavior),
or the interface may not be implemented on Linux.

.SH NAME
what
\(em identify SCCS files (\fBDEVELOPMENT\fP)
.SH SYNOPSIS
.LP
.nf
what \fB[\fR\(mis\fB] \fIfile\fR...
.fi
.SH DESCRIPTION
The
.IR what
utility shall search the given files for all occurrences of the pattern
that
.IR get
(see
.IR "\fIget\fR\^")
substitutes for the %\fBZ\fP% keyword (\c
.BR \(dq@(#)\(dq )
and shall write to standard output what follows until the first
occurrence of one of the following:
.sp
.RS 4
.nf
\fB
\&amp;"   &gt;   newline   \e   NUL
.fi \fR
.P
.RE
.SH OPTIONS
The
.IR what
utility shall conform to the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 12.2" ", " "Utility Syntax Guidelines".
.P
The following option shall be supported:
.IP "\fB\(mis\fP" 10
Quit after finding the first occurrence of the pattern in each file.
.SH OPERANDS
The following operands shall be supported:
.IP "\fIfile\fR" 10
A pathname of a file to search.
.SH STDIN
Not used.
.SH "INPUT FILES"
The input files shall be of any file type.
.SH "ENVIRONMENT VARIABLES"
The following environment variables shall affect the execution of
.IR what :
.IP "\fILANG\fP" 10
Provide a default value for the internationalization variables that are
unset or null. (See the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 8.2" ", " "Internationalization Variables"
for the precedence of internationalization variables used to determine
the values of locale categories.)
.IP "\fILC_ALL\fP" 10
If set to a non-empty string value, override the values of all the
other internationalization variables.
.IP "\fILC_CTYPE\fP" 10
Determine the locale for the interpretation of sequences of bytes of
text data as characters (for example, single-byte as opposed to
multi-byte characters in arguments and input files).
.IP "\fILC_MESSAGES\fP" 10
.br
Determine the locale that should be used to affect the format and
contents of diagnostic messages written to standard error.
.IP "\fINLSPATH\fP" 10
Determine the location of message catalogs for the processing of
.IR LC_MESSAGES .
.SH "ASYNCHRONOUS EVENTS"
Default.
.SH STDOUT
The standard output shall consist of the following for each
.IR file
operand:
.sp
.RS 4
.nf
\fB
"%s:\en\et%s\en", &lt;\fIpathname\fR&gt;, &lt;\fIidentification string\fR&gt;
.fi \fR
.P
.RE
.SH STDERR
The standard error shall be used only for diagnostic messages.
.SH "OUTPUT FILES"
None.
.SH "EXTENDED DESCRIPTION"
None.
.SH "EXIT STATUS"
The following exit values shall be returned:
.IP 0 6
Any matches were found.
.IP 1 6
Otherwise.
.SH "CONSEQUENCES OF ERRORS"
Default.
.LP
.IR "The following sections are informative."
.SH "APPLICATION USAGE"
The
.IR what
utility is intended to be used in conjunction with the SCCS command
.IR get ,
which automatically inserts identifying information, but it can also be
used where the information is inserted by any other means.
.P
When the string
.BR \(dq@(#)\(dq 
is included in a library routine in a shared library, it might not be
found in an
.BR a.out
file using that library routine.
.SH EXAMPLES
If the C-language program in file
.BR f.c
contains:
.sp
.RS 4
.nf
\fB
char ident[] = "@(#)identification information";
.fi \fR
.P
.RE
.P
and
.BR f.c
is compiled to yield
.BR f.o
and
.BR a.out ,
then the command:
.sp
.RS 4
.nf
\fB
what f.c f.o a.out
.fi \fR
.P
.RE
.P
writes:
.sp
.RS 4
.nf
\fB
f.c:
identification information
...
f.o:
identification information
...
a.out:
identification information
...
.fi \fR
.P
.RE
.SH RATIONALE
None.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "\fIget\fR\^"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "Chapter 8" ", " "Environment Variables",
.IR "Section 12.2" ", " "Utility Syntax Guidelines"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.
.TH WHO "1" "March 2017" "GNU coreutils 8.27" "User Commands"
.SH NAME
who \- show who is logged on
.SH SYNOPSIS
.B who
[\fI\,OPTION\/\fR]... [ \fI\,FILE | ARG1 ARG2 \/\fR]
.SH DESCRIPTION
.\" Add any additional description here
.PP
Print information about users who are currently logged in.
.TP
\fB\-a\fR, \fB\-\-all\fR
same as \fB\-b\fR \fB\-d\fR \fB\-\-login\fR \fB\-p\fR \fB\-r\fR \fB\-t\fR \fB\-T\fR \fB\-u\fR
.TP
\fB\-b\fR, \fB\-\-boot\fR
time of last system boot
.TP
\fB\-d\fR, \fB\-\-dead\fR
print dead processes
.TP
\fB\-H\fR, \fB\-\-heading\fR
print line of column headings
.TP
\fB\-l\fR, \fB\-\-login\fR
print system login processes
.TP
\fB\-\-lookup\fR
attempt to canonicalize hostnames via DNS
.TP
\fB\-m\fR
only hostname and user associated with stdin
.TP
\fB\-p\fR, \fB\-\-process\fR
print active processes spawned by init
.TP
\fB\-q\fR, \fB\-\-count\fR
all login names and number of users logged on
.TP
\fB\-r\fR, \fB\-\-runlevel\fR
print current runlevel
.TP
\fB\-s\fR, \fB\-\-short\fR
print only name, line, and time (default)
.TP
\fB\-t\fR, \fB\-\-time\fR
print last system clock change
.TP
\fB\-T\fR, \fB\-w\fR, \fB\-\-mesg\fR
add user's message status as +, \- or ?
.TP
\fB\-u\fR, \fB\-\-users\fR
list users logged in
.TP
\fB\-\-message\fR
same as \fB\-T\fR
.TP
\fB\-\-writable\fR
same as \fB\-T\fR
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-\-version\fR
output version information and exit
.PP
If FILE is not specified, use \fI\,/var/run/utmp\/\fP.  \fI\,/var/log/wtmp\/\fP as FILE is common.
If ARG1 ARG2 given, \fB\-m\fR presumed: 'am i' or 'mom likes' are usual.
.SH AUTHOR
Written by Joseph Arceneaux, David MacKenzie, and Michael Stone.
.SH "REPORTING BUGS"
GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt;
.br
Report who translation bugs to &lt;http://translationproject.org/team/&gt;
.SH COPYRIGHT
Copyright \(co 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
Full documentation at: &lt;http://www.gnu.org/software/coreutils/who&gt;
.br
or available locally via: info \(aq(coreutils) who invocation\(aq
.\" Copyright (c) 1989, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" Jef Poskanzer and Craig Leres of the Lawrence Berkeley Laboratory.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)write.1	8.1 (Berkeley) 6/6/93
.\"
.TH WRITE 1 "March 1995" "util-linux" "User Commands"
.SH NAME
write \- send a message to another user
.SH SYNOPSIS
.B write
.I user
.RI [ ttyname ]
.SH DESCRIPTION
.B write
allows you to communicate with other users, by copying lines from
your terminal to theirs.
.PP
When you run the
.B write
command, the user you are writing to gets a message of the form:
.PP
.RS
Message from yourname@yourhost on yourtty at hh:mm ...
.RE
.PP
Any further lines you enter will be copied to the specified user's
terminal.  If the other user wants to reply, they must run
.B write
as well.
.PP
When you are done, type an end-of-file or interrupt character.  The other
user will see the message
.B EOF
indicating that the conversation is over.
.PP
You can prevent people (other than the superuser) from writing to you with
the
.BR mesg (1)
command.  Some commands, for example
.BR nroff (1)
and
.BR pr (1),
may automatically disallow writing, so that the output they produce
isn't overwritten.
.PP
If the user you want to write to is logged in on more than one terminal,
you can specify which terminal to write to by giving the terminal
name as the second operand to the
.B write
command.  Alternatively, you can let
.B write
select one of the terminals \- it will pick the one with the shortest idle
time.  This is so that if the user is logged in at work and also dialed up
from home, the message will go to the right place.
.PP
The traditional protocol for writing to someone is that the string `\-o',
either at the end of a line or on a line by itself, means that it's the
other person's turn to talk.  The string `oo' means that the person
believes the conversation to be over.
.SH "SEE ALSO"
.BR mesg (1),
.BR talk (1),
.BR who (1)
.SH HISTORY
A
.B write
command appeared in Version 6 AT&amp;T UNIX.
.SH AVAILABILITY
The write command is part of the util-linux package and is available from
ftp://ftp.kernel.org/pub/linux/utils/util-linux/.
.TH XARGS 1 \" -*- nroff -*-
.SH NAME
xargs \- build and execute command lines from standard input
.SH SYNOPSIS
.B xargs
.nh
[\fB\-0prtx\fR]
[\fB\-E \fIeof-str\fR]
[\fB\-e\fR[\fIeof-str\fR]]
[\fB\-\-eof\fR[=\fIeof-str\fR]]
[\fB\-\-null\fR]
[\fB\-d \fIdelimiter\fR]
[\fB\-\-delimiter \fIdelimiter\fR]
[\fB\-I \fIreplace-str\fR]
[\fB\-i\fR[\fIreplace-str\fR]]
[\fB\-\-replace\fR[=\fIreplace-str\fR]]
[\fB\-l\fR[\fImax-lines\fR]]
[\fB\-L \fImax-lines\fR]
[\fB\-\-max\-lines\fR[=\fImax-lines\fR]]
[\fB\-n \fImax-args\fR]
[\fB\-\-max\-args\fR=\fImax-args\fR]
[\fB\-s \fImax-chars\fR]
[\fB\-\-max\-chars\fR=\fImax-chars\fR]
[\fB\-P \fImax-procs\fR]
[\fB\-\-max\-procs\fR=\fImax-procs\fR]
[\fB\-\-process\-slot\-var\fR=\fIname\fR]
[\fB\-\-interactive\fR]
[\fB\-\-verbose\fR]
[\fB\-\-exit\fR]
[\fB\-\-no\-run\-if\-empty\fR]
[\fB\-\-arg\-file\fR=\fIfile\fR]
[\fB\-\-show\-limits\fR]
[\fB\-\-version\fR]
[\fB\-\-help\fR]
[\fIcommand\fR [\fIinitial-arguments\fR]]
.hy
.SH DESCRIPTION
This manual page
documents the GNU version of
.BR xargs .
.B xargs
reads items from the standard input, delimited by blanks (which can be
protected with double or single quotes or a backslash) or newlines,
and executes the
.I command
(default is
.IR /bin/echo )
one or more times with any
.I initial-arguments
followed by items read from standard input.  Blank lines on the
standard input are ignored.
.P
The command line for
.I command
is built up until it reaches a system-defined limit (unless the
.B \-n
and
.B \-L
options are used).  The specified
.I command
will be invoked as many times as necessary to use up the list of input
items.  In general, there will be many fewer invocations of
.I command
than there were items in the input.  This will normally have
significant performance benefits.  Some commands can usefully be
executed in parallel too; see the
.B \-P
option.
.P
Because Unix filenames can contain blanks and newlines, this default
behaviour is often problematic; filenames containing blanks
and/or newlines are incorrectly processed by
.BR xargs .
In these situations it is better to use the
.B \-0
option, which
prevents such problems.   When using this option you will need to
ensure that the program which produces the input for
.B xargs
also uses a null character as a separator.  If that program is
GNU
.B find
for example, the
.B \-print0
option does this for you.
.P
If any invocation of the command exits with a status of 255,
.B xargs
will stop immediately without reading any further input.  An error
message is issued on stderr when this happens.
.SH OPTIONS
.TP
.PD
.B \-0, \-\-null
Input items are terminated by a null character instead of by
whitespace, and the quotes and backslash are not special (every
character is taken literally).  Disables the end of file string, which
is treated like any other argument.  Useful when input items might
contain white space, quote marks, or backslashes.  The GNU find
\-print0 option produces input suitable for this mode.

.TP
.PD
.BI "\-a " file ", \-\-arg\-file=" file
Read items from
.I file
instead of standard input.  If you use this option, stdin remains
unchanged when commands are run.  Otherwise, stdin is redirected
from
.IR /dev/null .

.TP
.PD
.BI "\-\-delimiter=" delim ", \-d" " delim"
Input items are terminated by the specified character.  The specified
delimiter may be a single character, a C-style character escape such
as
.BR \en ,
or an octal or hexadecimal escape code.  Octal and hexadecimal
escape codes are understood as for the
.B printf
command.   Multibyte characters are not supported.
When processing the input, quotes and backslash are not special; every
character in the input is taken literally.  The
.B \-d
option disables any end-of-file string, which is treated like any
other argument.  You can use this option when the input consists of
simply newline-separated items, although it is almost always better to
design your program to use
.B \-\-null
where this is possible.

.TP
.BI \-E " eof-str"
Set the end of file string to \fIeof-str\fR.  If the end of file
string occurs as a line of input, the rest of the input is ignored.
If neither
.B \-E
nor
.B \-e
is used, no end of file string is used.
.TP
.PD
.BR \-e "[\fIeof-str\fR], " "\-\-eof" [\fI=eof-str\fR]
This option is a synonym for the
.B \-E
option.  Use
.B \-E
instead,
because it is POSIX compliant while this option is not.  If
\fIeof-str\fR is omitted, there is no end of file string.  If neither
.B \-E
nor
.B \-e
is used, no end of file string is used.
.TP
.BI \-I " replace-str"
Replace occurrences of \fIreplace-str\fR in the initial-arguments with
names read from standard input.  Also, unquoted blanks do not
terminate input items; instead the separator is the newline character.
Implies
.B \-x
and
.B \-L
1.
.TP
.PD
.BR \-i "[\fIreplace-str\fR], " "\-\-replace" [\fI=replace-str\fR]
This option is a synonym for
.BI \-I replace-str
if
.I replace-str
is specified.  If the
.I replace-str
argument is missing, the effect is the same as
.BR \-I {}.
This option is deprecated; use
.B \-I
instead.
.TP
.BI \-L " max-lines"
Use at most \fImax-lines\fR nonblank input lines per command line.
Trailing blanks cause an input line to be logically continued on the
next input line.  Implies
.BR \-x .
.TP
.PD
.BR \-l "[\fImax-lines\fR], " \-\-max-lines "[=\fImax-lines\fR]"
Synonym for the
.B \-L
option.  Unlike
.BR \-L ,
the
.I max-lines
argument is optional.  If
.I max-lines
is not specified, it defaults to one.  The
.B \-l
option is deprecated since the POSIX standard specifies
.B \-L
instead.
.TP
.PD
.BI \-n " max-args\fB, \fI" "\-\-max\-args" \fR=\fImax-args
Use at most \fImax-args\fR arguments per command line.  Fewer than
.I max-args
arguments will be used if the size (see the
.B \-s
option) is exceeded, unless the
.B \-x
option is given, in which case
.B xargs will exit.
.TP
.PD
.BI \-P " max-procs\fR, \fI" \-\-max\-procs "\fR=\fImax-procs"
Run up to
.I max-procs
processes at a time; the default is 1.  If
.I max-procs
is 0,
.B xargs
will run as many processes as
possible at a time.  Use the
.B \-n
option or the
.B \-L
option with
.BR \-P ;
otherwise chances are that only one exec will be done.
While
.B xargs
is running, you can send its process a SIGUSR1 signal to increase the
number of commands to run simultaneously, or a SIGUSR2 to decrease the
number.  You cannot increase it above an implementation-defined limit
(which is shown with \-\-show-limits).  You cannot decrease it below
1.
.B xargs
never terminates its commands; when asked to decrease, it merely
waits for more than one existing command to terminate before starting
another.

.B Please note
that it is up to the called processes to properly manage parallel
access to shared resources.  For example, if more than one of them
tries to print to stdout, the ouptut will be produced in an
indeterminate order (and very likely mixed up) unless the processes
collaborate in some way to prevent this.  Using some kind of locking
scheme is one way to prevent such problems.  In general, using a
locking scheme will help ensure correct output but reduce performance.
If you don't want to tolerate the performance difference, simply
arrange for each process to produce a separate output file (or
otherwise use separate resources).
.TP
.PD
.B \-p, \-\-interactive
Prompt the user about whether to run each command line and read a line
from the terminal.  Only run the command line if the response starts
with `y' or `Y'.  Implies
.BR -t .
.TP
.PD
.BR \-\-process\-slot\-var "=\fIname\fR"
Set the environment variable
.I name
to a unique value in each running child process.  Values are reused
once child processes exit.  This can be used in a rudimentary load
distribution scheme, for example.
.TP
.PD
.B \-r, \-\-no\-run\-if\-empty
If the standard input does not contain any nonblanks, do not run the
command.  Normally, the command is run once even if there is no input.
This option is a GNU extension.
.TP
.PD
.BI -s " max-chars\fR, \fI" \-\-max\-chars "=\fImax-chars\fR"
Use at most \fImax-chars\fR characters per command line, including the
command and initial-arguments and the terminating nulls at the ends of
the argument strings.  The largest allowed value is system-dependent,
and is calculated as the argument length limit for exec, less the size
of your environment, less 2048 bytes of headroom.  If this value is
more than 128KiB, 128Kib is used as the default value; otherwise, the
default value is the maximum.  1KiB is 1024 bytes.
.B xargs
automatically adapts to tighter constraints.
.TP
.B "\-\-show\\-limits"
Display the limits on the command-line length which are imposed by the
operating system,
.BR xargs '
choice of buffer size and the
.B \-s
option.  Pipe the input from
.I /dev/null
(and perhaps specify
.BR --no-run-if-empty )
if you don't want
.B xargs
to do anything.
.TP
.B \-t, \-\-verbose
Print the command line on the standard error output before executing
it.
.TP
.PD
.B \-x, \-\-exit
Exit if the size (see the
.B \-s
option) is exceeded.
.TP
.B "\-\-help"
Print a summary of the options to
.B xargs
and exit.
.TP
.B "\-\-version"
Print the version number of
.B xargs
and exit.
.SH "EXAMPLES"
.nf
.B find /tmp \-name core \-type f \-print | xargs /bin/rm \-f

.fi
Find files named
.B core
in or below the directory
.B /tmp
and delete them.  Note that this will work incorrectly if there are
any filenames containing newlines or spaces.
.P
.B find /tmp \-name core \-type f \-print0 | xargs \-0 /bin/rm \-f

.fi
Find files named
.B core
in or below the directory
.B /tmp
and delete them, processing filenames in such a way that file or
directory names containing spaces or newlines are correctly handled.

.P
.B find /tmp \-depth \-name core \-type f \-delete

.fi
Find files named
.B core
in or below the directory
.B /tmp
and delete them, but more efficiently than in the previous example
(because we avoid the need to use
.BR fork (2)
and
.BR exec (2)
to launch
.B rm
and we don't need the extra
.B xargs
process).

.P
.nf
.B cut \-d: \-f1 &lt; /etc/passwd | sort | xargs echo

.fi
Generates a compact listing of all the users on the system.

.P
.nf
.B xargs sh -c 'emacs \(dq$@\(dq &lt; /dev/tty' emacs

.fi
Launches the minimum number of copies of Emacs needed, one after the
other, to edit the files listed on
.BR xargs '
standard input.  This example achieves the same effect as BSD's
.B -o
option, but in a more flexible and portable way.

.SH "EXIT STATUS"
.B xargs
exits with the following status:
.nf
0 if it succeeds
123 if any invocation of the command exited with status 1-125
124 if the command exited with status 255
125 if the command is killed by a signal
126 if the command cannot be run
127 if the command is not found
1 if some other error occurred.
.fi
.P
Exit codes greater than 128 are used by the shell to indicate that
a program died due to a fatal signal.
.SH "STANDARDS CONFORMANCE"
As of GNU xargs version 4.2.9, the default behaviour of
.B xargs
is not to have a logical end-of-file marker.  POSIX (IEEE Std 1003.1,
2004 Edition) allows this.
.P
The \-l and \-i options appear in the 1997 version of the POSIX
standard, but do not appear in the 2004 version of the standard.
Therefore you should use \-L and \-I instead, respectively.
.P
The POSIX standard allows implementations to have a limit on the size
of arguments to the
.B exec
functions.  This limit could be as low as 4096 bytes including the size of the
environment.  For scripts to be portable, they must not rely on a
larger value.  However, I know of no implementation whose actual limit
is that small.  The
.B \-\-show\-limits
option can be used to discover the actual limits in force on the
current system.

.SH "SEE ALSO"
\fBfind\fP(1), \fBlocate\fP(1), \fBlocatedb\fP(5), \fBupdatedb\fP(1),
\fBfork\fP(2), \fBexecvp\fP(3),
\fBkill\fP(1), \fBsignal\fP(7),

The  full documentation for
.B xargs
is maintained as a Texinfo manual.  If the
.B info
and
.B xargs
programs are properly installed at your site, the command
.B info xargs
should give you access to the complete manual.

.SH "BUGS"
The
.B \-L
option is incompatible with the
.B \-I
option, but perhaps should not be.
.P
It is not possible for
.B xargs
to be used securely, since there will always be a time gap between the
production of the list of input files and their use in the commands
that
.B xargs
issues.  If other users have access to the system, they can manipulate
the filesystem during this time window to force the action of the
commands
.B xargs
runs to apply to files that you didn't intend.  For a more detailed
discussion of this and related problems, please refer to the
``Security Considerations'' chapter in the findutils Texinfo
documentation.  The
.B \-execdir
option of
.B find
can often be used as a more secure alternative.

When you use the
.B \-I
option, each line read from the input is buffered
internally.   This means that there is an upper limit on the length
of input line that
.B xargs
will accept when used with the
.B \-I
option.  To work around this
limitation, you can use the
.B \-s
option to increase the amount of
buffer space that
.B xargs
uses, and you can also use an extra invocation of
.B xargs
to ensure that very long lines do not occur.
For example:
.P
.B somecommand | xargs \-s 50000 echo | xargs \-I '{}' \-s 100000 rm '{}'
.P
Here, the first invocation of
.B xargs
has no input line length limit
because it doesn't use the
.B \-i
option.  The second invocation of
.B xargs
does have such a limit, but we have ensured that the it never encounters
a line which is longer than it can handle.   This is not an ideal
solution.  Instead, the
.B \-i
option should not impose a line length
limit, which is why this discussion appears in the BUGS section.
The problem doesn't occur with the output of
.BR find (1)
because it emits just one filename per line.
.P
The best way to report a bug is to use the form at
http://savannah.gnu.org/bugs/?group=findutils.
The reason for this is that you will then be able to track progress in
fixing the problem.   Other comments about \fBxargs\fP(1) and about
the findutils package in general can be sent to the
.I bug\-findutils
mailing list.  To join the list, send email to
.IR bug\-findutils\-request@gnu.org .
.TH YACC "1" "November 2007" "GNU Bison 3.0.4" "User Commands"
.SH NAME
yacc \- GNU Project parser generator
.SH SYNOPSIS
.B yacc
[\fIOPTION\fR]... \fIFILE\fR
.SH DESCRIPTION
.I Yacc
(Yet Another Compiler Compiler) is a parser generator.  This
version is a simple wrapper around
.IR bison (1).
It passes option
\fB\-y\fR, \fB\-\-yacc\fR
to activate the upward compatibility mode.  See
.IR bison (1)
for more information.
.SH AUTHOR
Written by Paul Eggert.
.SH "REPORTING BUGS"
Report bugs to &lt;bug-bison@gnu.org&gt;.
.SH COPYRIGHT
Copyright \(co 2015 Free Software Foundation, Inc.
.br
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.SH "SEE ALSO"
.BR lex (1),
.BR flex (1),
.BR bison (1).
.PP
The full documentation for
.B bison
is maintained as a Texinfo manual.  If the
.B info
and
.B bison
programs are properly installed at your site, the command
.IP
.B info bison
.PP
should give you access to the complete manual.
.so man1/gzip.1

</plainxml>
